
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025468  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a04  08025708  08025708  00026708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802910c  0802910c  0002a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080292b4  080292b4  0002a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00644538  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000000e  90644538  90644538  00679538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080292cc  080292cc  00679546  2**0
                  CONTENTS
  8 .ARM          00000008  080292cc  080292cc  0002a2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080292d4  080292d4  00679546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  080292d4  080292d4  0002a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080292f0  080292f0  0002a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  080292f8  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  08029434  0002b140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802df34  0002fc40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  08032a34  00034740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  08032b34  00034840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c794  24009940  08032c34  00034940  2**2
                  ALLOC
 18 ._user_heap_stack 00002004  240260d4  08032c34  000350d4  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  00679546  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  0067a000  2**2
                  ALLOC
 21 .debug_info   000dea4f  00000000  00000000  00679574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00017c7e  00000000  00000000  00757fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00004040  00000000  00000000  0076fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00003d0f  00000000  00000000  00773c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  000557e0  00000000  00000000  00777997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006d18f  00000000  00000000  007cd177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001f8eac  00000000  00000000  0083a306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  00a331b2  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000a690  00000000  00000000  00a33274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 000249ed  00000000  00000000  00a3d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 00000075  00000000  00000000  00a622f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080256f0 	.word	0x080256f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	080256f0 	.word	0x080256f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00e b898 	b.w	800e830 <vTaskSetApplicationTaskTag>
 8000700:	080022b1 	.word	0x080022b1

08000704 <ButtonTaskStarter>:
{
  /* USER CODE BEGIN ButtonTaskStarter */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000704:	4e0b      	ldr	r6, [pc, #44]	@ (8000734 <ButtonTaskStarter+0x30>)
 8000706:	4d0c      	ldr	r5, [pc, #48]	@ (8000738 <ButtonTaskStarter+0x34>)
		  Button_state = 1;
	  }else{
		  Button_state = 0;
	  }

	  osMessageQueuePut(ButtonQueueHandle, &Button_state, 0,0);
 8000708:	4c0c      	ldr	r4, [pc, #48]	@ (800073c <ButtonTaskStarter+0x38>)
{
 800070a:	b508      	push	{r3, lr}
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4630      	mov	r0, r6
 8000712:	f008 f81f 	bl	8008754 <HAL_GPIO_ReadPin>
 8000716:	3800      	subs	r0, #0
	  osMessageQueuePut(ButtonQueueHandle, &Button_state, 0,0);
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	4906      	ldr	r1, [pc, #24]	@ (8000738 <ButtonTaskStarter+0x34>)
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800071e:	bf18      	it	ne
 8000720:	2001      	movne	r0, #1
	  osMessageQueuePut(ButtonQueueHandle, &Button_state, 0,0);
 8000722:	461a      	mov	r2, r3
 8000724:	6028      	str	r0, [r5, #0]
 8000726:	6820      	ldr	r0, [r4, #0]
 8000728:	f00c fca7 	bl	800d07a <osMessageQueuePut>
    osDelay(5);
 800072c:	2005      	movs	r0, #5
 800072e:	f00c fb3b 	bl	800cda8 <osDelay>
  for(;;)
 8000732:	e7eb      	b.n	800070c <ButtonTaskStarter+0x8>
 8000734:	58020800 	.word	0x58020800
 8000738:	24009960 	.word	0x24009960
 800073c:	24009998 	.word	0x24009998

08000740 <ADCTaskStarter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCTaskStarter */
void ADCTaskStarter(void *argument)
{
 8000740:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN ADCTaskStarter */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3);
 8000742:	4d10      	ldr	r5, [pc, #64]	@ (8000784 <ADCTaskStarter+0x44>)
	  HAL_ADC_PollForConversion(&hadc3,10);

	  uint16_t val = HAL_ADC_GetValue(&hadc3);

	  HAL_ADC_Stop(&hadc3);
	  ADC_Value = map(val, 0, 4095, 0, 100);
 8000744:	4e10      	ldr	r6, [pc, #64]	@ (8000788 <ADCTaskStarter+0x48>)
	  HAL_ADC_Start(&hadc3);
 8000746:	4628      	mov	r0, r5
 8000748:	f006 f970 	bl	8006a2c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3,10);
 800074c:	210a      	movs	r1, #10
 800074e:	4628      	mov	r0, r5
 8000750:	f005 fe22 	bl	8006398 <HAL_ADC_PollForConversion>
	  uint16_t val = HAL_ADC_GetValue(&hadc3);
 8000754:	4628      	mov	r0, r5
 8000756:	f005 feab 	bl	80064b0 <HAL_ADC_GetValue>
 800075a:	4604      	mov	r4, r0
	  HAL_ADC_Stop(&hadc3);
 800075c:	4628      	mov	r0, r5
 800075e:	f006 fa18 	bl	8006b92 <HAL_ADC_Stop>
	return (x - in_min) * (out_max - out_min +1) / (in_max - in_min +1) +out_min;
 8000762:	2365      	movs	r3, #101	@ 0x65
	  ADC_Value = map(val, 0, 4095, 0, 100);
 8000764:	b2a4      	uxth	r4, r4

	  osMessageQueuePut(ADCQueueHandle, &ADC_Value, 0,0);
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <ADCTaskStarter+0x4c>)
 8000768:	4907      	ldr	r1, [pc, #28]	@ (8000788 <ADCTaskStarter+0x48>)
	return (x - in_min) * (out_max - out_min +1) / (in_max - in_min +1) +out_min;
 800076a:	435c      	muls	r4, r3
	  osMessageQueuePut(ADCQueueHandle, &ADC_Value, 0,0);
 800076c:	2300      	movs	r3, #0
 800076e:	6800      	ldr	r0, [r0, #0]
	return (x - in_min) * (out_max - out_min +1) / (in_max - in_min +1) +out_min;
 8000770:	1324      	asrs	r4, r4, #12
	  osMessageQueuePut(ADCQueueHandle, &ADC_Value, 0,0);
 8000772:	461a      	mov	r2, r3
	  ADC_Value = map(val, 0, 4095, 0, 100);
 8000774:	8034      	strh	r4, [r6, #0]
	  osMessageQueuePut(ADCQueueHandle, &ADC_Value, 0,0);
 8000776:	f00c fc80 	bl	800d07a <osMessageQueuePut>


    osDelay(10);
 800077a:	200a      	movs	r0, #10
 800077c:	f00c fb14 	bl	800cda8 <osDelay>
  for(;;)
 8000780:	e7e1      	b.n	8000746 <ADCTaskStarter+0x6>
 8000782:	bf00      	nop
 8000784:	24009d24 	.word	0x24009d24
 8000788:	2400995c 	.word	0x2400995c
 800078c:	24009994 	.word	0x24009994

08000790 <SystemClock_Config>:
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000794:	224c      	movs	r2, #76	@ 0x4c
 8000796:	2100      	movs	r1, #0
 8000798:	a809      	add	r0, sp, #36	@ 0x24
 800079a:	f024 fa15 	bl	8024bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	2220      	movs	r2, #32
 80007a0:	2100      	movs	r1, #0
 80007a2:	a801      	add	r0, sp, #4
 80007a4:	f024 fa10 	bl	8024bc8 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007a8:	2004      	movs	r0, #4
 80007aa:	f009 fe43 	bl	800a434 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ae:	2300      	movs	r3, #0
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xbc>)
 80007b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007b6:	f022 0201 	bic.w	r2, r2, #1
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <SystemClock_Config+0xc0>)
 80007c6:	699a      	ldr	r2, [r3, #24]
 80007c8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	699a      	ldr	r2, [r3, #24]
 80007d0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80007d4:	9200      	str	r2, [sp, #0]
 80007d6:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	0491      	lsls	r1, r2, #18
 80007dc:	d5fc      	bpl.n	80007d8 <SystemClock_Config+0x48>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e2:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007e6:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2608      	movs	r6, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ee:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007fa:	23a0      	movs	r3, #160	@ 0xa0
 80007fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000800:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000806:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080a:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f00a f90a 	bl	800aa28 <HAL_RCC_OscConfig>
 8000814:	b108      	cbz	r0, 800081a <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000816:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000826:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082c:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000830:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000834:	f00a fc90 	bl	800b158 <HAL_RCC_ClockConfig>
 8000838:	4601      	mov	r1, r0
 800083a:	b108      	cbz	r0, 8000840 <SystemClock_Config+0xb0>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000840:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000844:	f00a fb98 	bl	800af78 <HAL_RCC_MCOConfig>
}
 8000848:	b01d      	add	sp, #116	@ 0x74
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800084c:	58000400 	.word	0x58000400
 8000850:	58024800 	.word	0x58024800

08000854 <main>:
{
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	b0bc      	sub	sp, #240	@ 0xf0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800085a:	2210      	movs	r2, #16
 800085c:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800085e:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000860:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000862:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000864:	f024 f9b0 	bl	8024bc8 <memset>
  HAL_MPU_Disable();
 8000868:	f006 fbb4 	bl	8006fd4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800086c:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000870:	4bbd      	ldr	r3, [pc, #756]	@ (8000b68 <main+0x314>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000872:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000874:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000878:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800087a:	e9cd 1330 	strd	r1, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800087e:	f006 fbc7 	bl	8007010 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000882:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000884:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000886:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800088a:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088e:	f006 fbbf 	bl	8007010 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000892:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000894:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000896:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800089a:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800089e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008a2:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80008a4:	2318      	movs	r3, #24
 80008a6:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008aa:	f006 fbb1 	bl	8007010 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80008ae:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b0:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80008b2:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 80008b6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80008ba:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80008bc:	2312      	movs	r3, #18
 80008be:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008c8:	f006 fba2 	bl	8007010 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 80008cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d0:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80008d2:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 80008d6:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80008d8:	2311      	movs	r3, #17
 80008da:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008de:	f006 fb97 	bl	8007010 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80008e2:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e4:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008e6:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80008ea:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 80008ee:	4b9f      	ldr	r3, [pc, #636]	@ (8000b6c <main+0x318>)
 80008f0:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80008f2:	230e      	movs	r3, #14
 80008f4:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f8:	f006 fb8a 	bl	8007010 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008fc:	4628      	mov	r0, r5
 80008fe:	f006 fb77 	bl	8006ff0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000902:	4b9b      	ldr	r3, [pc, #620]	@ (8000b70 <main+0x31c>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800090a:	d111      	bne.n	8000930 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000910:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000914:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800091c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000926:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800092c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000930:	4a8f      	ldr	r2, [pc, #572]	@ (8000b70 <main+0x31c>)
 8000932:	6953      	ldr	r3, [r2, #20]
 8000934:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000938:	d123      	bne.n	8000982 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800093a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800093e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000942:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000946:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800094a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800094e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000952:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000954:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000958:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800095a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800095e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000960:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000964:	d2f9      	bcs.n	800095a <main+0x106>
    } while(sets-- != 0U);
 8000966:	3b20      	subs	r3, #32
 8000968:	f113 0f20 	cmn.w	r3, #32
 800096c:	d1f2      	bne.n	8000954 <main+0x100>
 800096e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000972:	6953      	ldr	r3, [r2, #20]
 8000974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800097e:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000986:	4d7b      	ldr	r5, [pc, #492]	@ (8000b74 <main+0x320>)
 8000988:	682c      	ldr	r4, [r5, #0]
 800098a:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 800098e:	f000 8364 	beq.w	800105a <main+0x806>
 8000992:	3b01      	subs	r3, #1
 8000994:	d2f8      	bcs.n	8000988 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x144>
 800099a:	b672      	cpsid	i
 800099c:	e7fe      	b.n	800099c <main+0x148>
  hqspi.Instance = QUADSPI;
 800099e:	4876      	ldr	r0, [pc, #472]	@ (8000b78 <main+0x324>)
 80009a0:	4a76      	ldr	r2, [pc, #472]	@ (8000b7c <main+0x328>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a2:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80009a4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 80009a6:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80009aa:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009ae:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009b2:	f009 fe5b 	bl	800a66c <HAL_QSPI_Init>
 80009b6:	b108      	cbz	r0, 80009bc <main+0x168>
 80009b8:	b672      	cpsid	i
  while (1)
 80009ba:	e7fe      	b.n	80009ba <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80009bc:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80009c0:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 80009c2:	f88d 40be 	strb.w	r4, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80009c6:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80009ca:	f005 f817 	bl	80059fc <BSP_QSPI_Init>
 80009ce:	b108      	cbz	r0, 80009d4 <main+0x180>
 80009d0:	b672      	cpsid	i
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80009d4:	f004 ffbe 	bl	8005954 <BSP_QSPI_EnableMemoryMappedMode>
 80009d8:	4603      	mov	r3, r0
 80009da:	b108      	cbz	r0, 80009e0 <main+0x18c>
 80009dc:	b672      	cpsid	i
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0x18a>
  hdma2d.Instance = DMA2D;
 80009e0:	4867      	ldr	r0, [pc, #412]	@ (8000b80 <main+0x32c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 80009e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009e6:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8000b8c <main+0x338>
  hdma2d.Init.OutputOffset = 0;
 80009ea:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 80009ee:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009f2:	f006 ffd3 	bl	800799c <HAL_DMA2D_Init>
 80009f6:	4604      	mov	r4, r0
 80009f8:	b108      	cbz	r0, 80009fe <main+0x1aa>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 80009fe:	4602      	mov	r2, r0
 8000a00:	4641      	mov	r1, r8
 8000a02:	4860      	ldr	r0, [pc, #384]	@ (8000b84 <main+0x330>)
 8000a04:	f007 feac 	bl	8008760 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000a08:	2014      	movs	r0, #20
 8000a0a:	f005 fc9b 	bl	8006344 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000a0e:	462a      	mov	r2, r5
 8000a10:	4641      	mov	r1, r8
 8000a12:	485c      	ldr	r0, [pc, #368]	@ (8000b84 <main+0x330>)
 8000a14:	f007 fea4 	bl	8008760 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f005 fc93 	bl	8006344 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a1e:	2224      	movs	r2, #36	@ 0x24
 8000a20:	4621      	mov	r1, r4
 8000a22:	a819      	add	r0, sp, #100	@ 0x64
 8000a24:	f024 f8d0 	bl	8024bc8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a28:	2218      	movs	r2, #24
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	a813      	add	r0, sp, #76	@ 0x4c
 8000a2e:	f024 f8cb 	bl	8024bc8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a32:	2234      	movs	r2, #52	@ 0x34
 8000a34:	4621      	mov	r1, r4
 8000a36:	a82f      	add	r0, sp, #188	@ 0xbc
 8000a38:	f024 f8c6 	bl	8024bc8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	222c      	movs	r2, #44	@ 0x2c
 8000a40:	a822      	add	r0, sp, #136	@ 0x88
 8000a42:	f024 f8c1 	bl	8024bc8 <memset>
  hdsi.Instance = DSI;
 8000a46:	4e50      	ldr	r6, [pc, #320]	@ (8000b88 <main+0x334>)
 8000a48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a4c:	a910      	add	r1, sp, #64	@ 0x40
 8000a4e:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a50:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a52:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 8000a56:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a58:	e9c6 9502 	strd	r9, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000a5c:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a60:	f007 f8e8 	bl	8007c34 <HAL_DSI_Init>
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x216>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a6a:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a6e:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a72:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a76:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 8000a7a:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a7c:	a919      	add	r1, sp, #100	@ 0x64
 8000a7e:	4630      	mov	r0, r6
 8000a80:	f007 fb44 	bl	800810c <HAL_DSI_ConfigHostTimeouts>
 8000a84:	b108      	cbz	r0, 8000a8a <main+0x236>
 8000a86:	b672      	cpsid	i
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a8a:	2321      	movs	r3, #33	@ 0x21
 8000a8c:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a8e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a90:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a92:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a96:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a98:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a9c:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a9e:	e9cd 7315 	strd	r7, r3, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000aa2:	f007 faf6 	bl	8008092 <HAL_DSI_ConfigPhyTimer>
 8000aa6:	b108      	cbz	r0, 8000aac <main+0x258>
 8000aa8:	b672      	cpsid	i
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000aac:	2104      	movs	r1, #4
 8000aae:	4836      	ldr	r0, [pc, #216]	@ (8000b88 <main+0x334>)
 8000ab0:	f007 fade 	bl	8008070 <HAL_DSI_ConfigFlowControl>
 8000ab4:	b108      	cbz	r0, 8000aba <main+0x266>
 8000ab6:	b672      	cpsid	i
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000aba:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000abe:	4832      	ldr	r0, [pc, #200]	@ (8000b88 <main+0x334>)
 8000ac0:	f007 fcad 	bl	800841e <HAL_DSI_SetLowPowerRXFilter>
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	b108      	cbz	r0, 8000acc <main+0x278>
 8000ac8:	b672      	cpsid	i
  while (1)
 8000aca:	e7fe      	b.n	8000aca <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000acc:	482e      	ldr	r0, [pc, #184]	@ (8000b88 <main+0x334>)
 8000ace:	f007 f84f 	bl	8007b70 <HAL_DSI_ConfigErrorMonitor>
 8000ad2:	b108      	cbz	r0, 8000ad8 <main+0x284>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000adc:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000ae0:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ae4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ae8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000aec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000af0:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000af4:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000af8:	e9cd 932f 	strd	r9, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000afc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000b00:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b04:	e9cd a331 	strd	sl, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b1c:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b1e:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b26:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <main+0x334>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b28:	e9cd 4339 	strd	r4, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b2c:	f007 fa6c 	bl	8008008 <HAL_DSI_ConfigCommand>
 8000b30:	b108      	cbz	r0, 8000b36 <main+0x2e2>
 8000b32:	b672      	cpsid	i
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000b36:	2305      	movs	r3, #5
 8000b38:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b3c:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b3e:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000b40:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b42:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b44:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000b46:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b4a:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b4c:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b50:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b52:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b56:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b5a:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <main+0x334>)
 8000b5c:	f007 f9e2 	bl	8007f24 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b60:	4601      	mov	r1, r0
 8000b62:	b1a8      	cbz	r0, 8000b90 <main+0x33c>
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0x312>
 8000b68:	0300001b 	.word	0x0300001b
 8000b6c:	10040000 	.word	0x10040000
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	58024400 	.word	0x58024400
 8000b78:	240099e0 	.word	0x240099e0
 8000b7c:	52005000 	.word	0x52005000
 8000b80:	24009c20 	.word	0x24009c20
 8000b84:	58021800 	.word	0x58021800
 8000b88:	24009c04 	.word	0x24009c04
 8000b8c:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b90:	4883      	ldr	r0, [pc, #524]	@ (8000da0 <main+0x54c>)
 8000b92:	f007 f9b6 	bl	8007f02 <HAL_DSI_SetGenericVCID>
 8000b96:	4604      	mov	r4, r0
 8000b98:	b108      	cbz	r0, 8000b9e <main+0x34a>
 8000b9a:	b672      	cpsid	i
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <main+0x348>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b9e:	2234      	movs	r2, #52	@ 0x34
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000ba4:	4d7f      	ldr	r5, [pc, #508]	@ (8000da4 <main+0x550>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ba6:	f024 f80f 	bl	8024bc8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000baa:	f8df c268 	ldr.w	ip, [pc, #616]	@ 8000e14 <main+0x5c0>
 8000bae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000bb2:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000bb6:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bba:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000bbc:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000bbe:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000bc2:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bca:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000bce:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000bd2:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000bd6:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000bda:	f240 1893 	movw	r8, #403	@ 0x193
 8000bde:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000be2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000be6:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bea:	f009 f919 	bl	8009e20 <HAL_LTDC_Init>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	b108      	cbz	r0, 8000bf6 <main+0x3a2>
 8000bf2:	b672      	cpsid	i
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x3a0>
  pLayerCfg.Alpha = 255;
 8000bf6:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bf8:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000bfc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000c00:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000c02:	f8ad 00b8 	strh.w	r0, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000c06:	f88d 00ba 	strb.w	r0, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000c0a:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000c0c:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c10:	2107      	movs	r1, #7
 8000c12:	e9cd 4129 	strd	r4, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c16:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000c1a:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.ImageWidth = 400;
 8000c1e:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c22:	4628      	mov	r0, r5
 8000c24:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c26:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c2a:	f009 f9ae 	bl	8009f8a <HAL_LTDC_ConfigLayer>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	b108      	cbz	r0, 8000c36 <main+0x3e2>
 8000c32:	b672      	cpsid	i
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <main+0x3e0>
  __HAL_LTDC_DISABLE(&hltdc);
 8000c36:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000c38:	4859      	ldr	r0, [pc, #356]	@ (8000da0 <main+0x54c>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000c3a:	6993      	ldr	r3, [r2, #24]
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000c42:	f007 fac9 	bl	80081d8 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000c46:	4958      	ldr	r1, [pc, #352]	@ (8000da8 <main+0x554>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c48:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <main+0x558>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c4a:	4859      	ldr	r0, [pc, #356]	@ (8000db0 <main+0x55c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c4c:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c4e:	4b59      	ldr	r3, [pc, #356]	@ (8000db4 <main+0x560>)
  IOCtx.Address     = 0;
 8000c50:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c52:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000c54:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <main+0x564>)
 8000c56:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c58:	f004 fc72 	bl	8005540 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000c5c:	4632      	mov	r2, r6
 8000c5e:	4621      	mov	r1, r4
 8000c60:	4853      	ldr	r0, [pc, #332]	@ (8000db0 <main+0x55c>)
 8000c62:	f004 f8dd 	bl	8004e20 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c66:	2328      	movs	r3, #40	@ 0x28
 8000c68:	2215      	movs	r2, #21
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	484c      	ldr	r0, [pc, #304]	@ (8000da0 <main+0x54c>)
 8000c6e:	9400      	str	r4, [sp, #0]
 8000c70:	f007 fae5 	bl	800823e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c74:	a92f      	add	r1, sp, #188	@ 0xbc
 8000c76:	484a      	ldr	r0, [pc, #296]	@ (8000da0 <main+0x54c>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c78:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c7a:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c7e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c82:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c86:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c8a:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c8e:	f007 f9bb 	bl	8008008 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c92:	4622      	mov	r2, r4
 8000c94:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f009 f9a3 	bl	8009fe4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c9e:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000ca0:	4846      	ldr	r0, [pc, #280]	@ (8000dbc <main+0x568>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000ca2:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ca4:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000cac:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <main+0x56c>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cae:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000cb0:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cb2:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb6:	f006 f9d7 	bl	8007068 <HAL_CRC_Init>
 8000cba:	b108      	cbz	r0, 8000cc0 <main+0x46c>
 8000cbc:	b672      	cpsid	i
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <main+0x46a>
  hjpeg.Instance = JPEG;
 8000cc0:	4840      	ldr	r0, [pc, #256]	@ (8000dc4 <main+0x570>)
 8000cc2:	4b41      	ldr	r3, [pc, #260]	@ (8000dc8 <main+0x574>)
 8000cc4:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000cc6:	f008 faa5 	bl	8009214 <HAL_JPEG_Init>
 8000cca:	b108      	cbz	r0, 8000cd0 <main+0x47c>
 8000ccc:	b672      	cpsid	i
  while (1)
 8000cce:	e7fe      	b.n	8000cce <main+0x47a>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd0:	221c      	movs	r2, #28
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc3.Instance = ADC3;
 8000cd6:	4c3d      	ldr	r4, [pc, #244]	@ (8000dcc <main+0x578>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd8:	f023 ff76 	bl	8024bc8 <memset>
  hadc3.Instance = ADC3;
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd0 <main+0x57c>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cde:	2008      	movs	r0, #8
  hadc3.Init.NbrOfConversion = 1;
 8000ce0:	2501      	movs	r5, #1
  hadc3.Instance = ADC3;
 8000ce2:	6023      	str	r3, [r4, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce4:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce6:	2604      	movs	r6, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
  hadc3.Init.NbrOfConversion = 1;
 8000cec:	61a5      	str	r5, [r4, #24]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cee:	6126      	str	r6, [r4, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cf0:	82a2      	strh	r2, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cf2:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf4:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000cf6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000cfa:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfc:	e9c4 0302 	strd	r0, r3, [r4, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d00:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d02:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d06:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d0a:	f005 fff7 	bl	8006cfc <HAL_ADC_Init>
 8000d0e:	b108      	cbz	r0, 8000d14 <main+0x4c0>
 8000d10:	b672      	cpsid	i
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <main+0x4be>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2306      	movs	r3, #6
  sConfig.Offset = 0;
 8000d16:	9034      	str	r0, [sp, #208]	@ 0xd0
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d18:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d1c:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d1e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8000d20:	952f      	str	r5, [sp, #188]	@ 0xbc
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000d22:	e9cd 3330 	strd	r3, r3, [sp, #192]	@ 0xc0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d26:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d2a:	e9cd 3632 	strd	r3, r6, [sp, #200]	@ 0xc8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d2e:	f005 fbc3 	bl	80064b8 <HAL_ADC_ConfigChannel>
 8000d32:	4604      	mov	r4, r0
 8000d34:	b108      	cbz	r0, 8000d3a <main+0x4e6>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x4e4>
  MX_TouchGFX_Init();
 8000d3a:	f000 fe4b 	bl	80019d4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000d3e:	f000 fe48 	bl	80019d2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000d42:	f00b ffc1 	bl	800ccc8 <osKernelInitialize>
  ButtonQueueHandle = osMessageQueueNew (2, sizeof(uint8_t), &ButtonQueue_attributes);
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <main+0x580>)
 8000d48:	4629      	mov	r1, r5
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f00c f95a 	bl	800d004 <osMessageQueueNew>
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <main+0x584>)
  ADCQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &ADCQueue_attributes);
 8000d52:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <main+0x588>)
 8000d54:	2102      	movs	r1, #2
  ButtonQueueHandle = osMessageQueueNew (2, sizeof(uint8_t), &ButtonQueue_attributes);
 8000d56:	6018      	str	r0, [r3, #0]
  ADCQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &ADCQueue_attributes);
 8000d58:	2005      	movs	r0, #5
 8000d5a:	f00c f953 	bl	800d004 <osMessageQueueNew>
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <main+0x58c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d60:	4a20      	ldr	r2, [pc, #128]	@ (8000de4 <main+0x590>)
 8000d62:	4621      	mov	r1, r4
  ADCQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &ADCQueue_attributes);
 8000d64:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d66:	4820      	ldr	r0, [pc, #128]	@ (8000de8 <main+0x594>)
 8000d68:	f00b ffda 	bl	800cd20 <osThreadNew>
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <main+0x598>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d6e:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <main+0x59c>)
 8000d70:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d72:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d74:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <main+0x5a0>)
 8000d76:	f00b ffd3 	bl	800cd20 <osThreadNew>
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <main+0x5a4>)
  ButtonTaskHandle = osThreadNew(ButtonTaskStarter, NULL, &ButtonTask_attributes);
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <main+0x5a8>)
 8000d7e:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d80:	6018      	str	r0, [r3, #0]
  ButtonTaskHandle = osThreadNew(ButtonTaskStarter, NULL, &ButtonTask_attributes);
 8000d82:	481f      	ldr	r0, [pc, #124]	@ (8000e00 <main+0x5ac>)
 8000d84:	f00b ffcc 	bl	800cd20 <osThreadNew>
 8000d88:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <main+0x5b0>)
  ADCTaskHandle = osThreadNew(ADCTaskStarter, NULL, &ADCTask_attributes);
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <main+0x5b4>)
 8000d8c:	4621      	mov	r1, r4
  ButtonTaskHandle = osThreadNew(ButtonTaskStarter, NULL, &ButtonTask_attributes);
 8000d8e:	6018      	str	r0, [r3, #0]
  ADCTaskHandle = osThreadNew(ADCTaskStarter, NULL, &ADCTask_attributes);
 8000d90:	481e      	ldr	r0, [pc, #120]	@ (8000e0c <main+0x5b8>)
 8000d92:	f00b ffc5 	bl	800cd20 <osThreadNew>
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <main+0x5bc>)
 8000d98:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d9a:	f00b ffa7 	bl	800ccec <osKernelStart>
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <main+0x54a>
 8000da0:	24009c04 	.word	0x24009c04
 8000da4:	24009a2c 	.word	0x24009a2c
 8000da8:	24009964 	.word	0x24009964
 8000dac:	08005925 	.word	0x08005925
 8000db0:	24009974 	.word	0x24009974
 8000db4:	08001fa9 	.word	0x08001fa9
 8000db8:	08001fe1 	.word	0x08001fe1
 8000dbc:	24009c88 	.word	0x24009c88
 8000dc0:	58024c00 	.word	0x58024c00
 8000dc4:	24009bac 	.word	0x24009bac
 8000dc8:	52003000 	.word	0x52003000
 8000dcc:	24009d24 	.word	0x24009d24
 8000dd0:	58026000 	.word	0x58026000
 8000dd4:	08027508 	.word	0x08027508
 8000dd8:	24009998 	.word	0x24009998
 8000ddc:	080274f0 	.word	0x080274f0
 8000de0:	24009994 	.word	0x24009994
 8000de4:	0802758c 	.word	0x0802758c
 8000de8:	080019e3 	.word	0x080019e3
 8000dec:	240099a8 	.word	0x240099a8
 8000df0:	08027568 	.word	0x08027568
 8000df4:	08003b3d 	.word	0x08003b3d
 8000df8:	240099a4 	.word	0x240099a4
 8000dfc:	08027544 	.word	0x08027544
 8000e00:	08000705 	.word	0x08000705
 8000e04:	240099a0 	.word	0x240099a0
 8000e08:	08027520 	.word	0x08027520
 8000e0c:	08000741 	.word	0x08000741
 8000e10:	2400999c 	.word	0x2400999c
 8000e14:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f023 fed2 	bl	8024bc8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000e32:	489b      	ldr	r0, [pc, #620]	@ (80010a0 <main+0x84c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e38:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3c:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e44:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000e48:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e50:	9306      	str	r3, [sp, #24]
 8000e52:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	9307      	str	r3, [sp, #28]
 8000e6a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e78:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e80:	9308      	str	r3, [sp, #32]
 8000e82:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e84:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ea8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8000eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ec0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ecc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ed8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ee0:	930c      	str	r3, [sp, #48]	@ 0x30
 8000ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ef0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	930d      	str	r3, [sp, #52]	@ 0x34
 8000efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	930e      	str	r3, [sp, #56]	@ 0x38
 8000f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f2c:	f007 fc18 	bl	8008760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2108      	movs	r1, #8
 8000f34:	485b      	ldr	r0, [pc, #364]	@ (80010a4 <main+0x850>)
 8000f36:	f007 fc13 	bl	8008760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f40:	4859      	ldr	r0, [pc, #356]	@ (80010a8 <main+0x854>)
 8000f42:	f007 fc0d 	bl	8008760 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f4a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f4c:	4854      	ldr	r0, [pc, #336]	@ (80010a0 <main+0x84c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	e9cd 6731 	strd	r6, r7, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f56:	f007 fa79 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f60:	4852      	ldr	r0, [pc, #328]	@ (80010ac <main+0x858>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f62:	f8cd a0c4 	str.w	sl, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f007 fa6f 	bl	800844c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f70:	484f      	ldr	r0, [pc, #316]	@ (80010b0 <main+0x85c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f72:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	e9cd 9a2f 	strd	r9, sl, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	e9cd 6631 	strd	r6, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f007 fa66 	bl	800844c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f80:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f82:	4848      	ldr	r0, [pc, #288]	@ (80010a4 <main+0x850>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	e9cd 5731 	strd	r5, r7, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f007 fa5e 	bl	800844c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000f90:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f92:	4845      	ldr	r0, [pc, #276]	@ (80010a8 <main+0x854>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	e9cd 952f 	strd	r9, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	e9cd 6731 	strd	r6, r7, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f007 fa56 	bl	800844c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fa0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000fa4:	4632      	mov	r2, r6
 8000fa6:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fa8:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000faa:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000fac:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fb0:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000fb4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8000fb8:	402b      	ands	r3, r5
 8000fba:	9305      	str	r3, [sp, #20]
 8000fbc:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000fbe:	f005 ffb7 	bl	8006f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000fc2:	207a      	movs	r0, #122	@ 0x7a
 8000fc4:	f005 ffe6 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000fc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000fcc:	4632      	mov	r2, r6
 8000fce:	2105      	movs	r1, #5
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000fd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000fd4:	2081      	movs	r0, #129	@ 0x81
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000fd6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fda:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fde:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe4:	9304      	str	r3, [sp, #16]
 8000fe6:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000fe8:	f005 ffa2 	bl	8006f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000fec:	2081      	movs	r0, #129	@ 0x81
 8000fee:	f005 ffd1 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ff2:	4a30      	ldr	r2, [pc, #192]	@ (80010b4 <main+0x860>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ff4:	4830      	ldr	r0, [pc, #192]	@ (80010b8 <main+0x864>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff6:	a92f      	add	r1, sp, #188	@ 0xbc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ff8:	6813      	ldr	r3, [r2, #0]
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <main+0x868>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001006:	61c6      	str	r6, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001008:	6286      	str	r6, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800100a:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 800100c:	f8cd a0bc 	str.w	sl, [sp, #188]	@ 0xbc
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001010:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001014:	2320      	movs	r3, #32
 8001016:	e9c0 9303 	strd	r9, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800101a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800101e:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001026:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800102a:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 800102c:	e9cd aa34 	strd	sl, sl, [sp, #208]	@ 0xd0
  SdramTiming.SelfRefreshTime = 4;
 8001030:	e9cd 3930 	strd	r3, r9, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8001034:	e9cd 3732 	strd	r3, r7, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001038:	f00b fb92 	bl	800c760 <HAL_SDRAM_Init>
 800103c:	4606      	mov	r6, r0
 800103e:	2800      	cmp	r0, #0
 8001040:	f47f acab 	bne.w	800099a <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001044:	f004 fe94 	bl	8005d70 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001048:	4630      	mov	r0, r6
 800104a:	f004 fedf 	bl	8005e0c <BSP_SDRAM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2800      	cmp	r0, #0
 8001052:	f43f aca4 	beq.w	800099e <main+0x14a>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x804>
  HAL_Init();
 800105a:	f005 f933 	bl	80062c4 <HAL_Init>
  SystemClock_Config();
 800105e:	f7ff fb97 	bl	8000790 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001062:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001066:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800106c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001070:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 800107c:	f007 fb7e 	bl	800877c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001080:	4621      	mov	r1, r4
 8001082:	4620      	mov	r0, r4
 8001084:	f007 fb88 	bl	8008798 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001088:	4c0d      	ldr	r4, [pc, #52]	@ (80010c0 <main+0x86c>)
timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	0412      	lsls	r2, r2, #16
 8001092:	f53f aec1 	bmi.w	8000e18 <main+0x5c4>
 8001096:	3b01      	subs	r3, #1
 8001098:	d2f9      	bcs.n	800108e <main+0x83a>
 800109a:	b672      	cpsid	i
  while (1)
 800109c:	e7fe      	b.n	800109c <main+0x848>
 800109e:	bf00      	nop
 80010a0:	58022400 	.word	0x58022400
 80010a4:	58021800 	.word	0x58021800
 80010a8:	58021400 	.word	0x58021400
 80010ac:	58020800 	.word	0x58020800
 80010b0:	58020000 	.word	0x58020000
 80010b4:	52004000 	.word	0x52004000
 80010b8:	240099ac 	.word	0x240099ac
 80010bc:	52004140 	.word	0x52004140
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 80010c4:	6802      	ldr	r2, [r0, #0]
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d101      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80010cc:	f005 b928 	b.w	8006320 <HAL_IncTick>
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40001000 	.word	0x40001000

080010d8 <Error_Handler>:
 80010d8:	b672      	cpsid	i
  while (1)
 80010da:	e7fe      	b.n	80010da <Error_Handler+0x2>

080010dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_MspInit+0x2c>)
{
 80010de:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e0:	210f      	movs	r1, #15
 80010e2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80010ea:	f042 0202 	orr.w	r2, r2, #2
 80010ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001100:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001102:	f005 bf15 	b.w	8006f30 <HAL_NVIC_SetPriority>
 8001106:	bf00      	nop
 8001108:	58024400 	.word	0x58024400

0800110c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b530      	push	{r4, r5, lr}
 800110e:	b0b5      	sub	sp, #212	@ 0xd4
 8001110:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001112:	22c8      	movs	r2, #200	@ 0xc8
 8001114:	2100      	movs	r1, #0
 8001116:	a802      	add	r0, sp, #8
 8001118:	f023 fd56 	bl	8024bc8 <memset>
  if(hadc->Instance==ADC3)
 800111c:	682a      	ldr	r2, [r5, #0]
 800111e:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <HAL_ADC_MspInit+0xbc>)
 8001120:	429a      	cmp	r2, r3
 8001122:	d14f      	bne.n	80011c4 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001124:	2300      	movs	r3, #0
 8001126:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    PeriphClkInitStruct.PLL2.PLL2M = 32;
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800112a:	2420      	movs	r4, #32
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001132:	2381      	movs	r3, #129	@ 0x81
 8001134:	e9cd 4304 	strd	r4, r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001138:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800113a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800113e:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001140:	23c0      	movs	r3, #192	@ 0xc0
 8001142:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	f00a fa8a 	bl	800b65c <HAL_RCCEx_PeriphCLKConfig>
 8001148:	b108      	cbz	r0, 800114e <HAL_ADC_MspInit+0x42>
    {
      Error_Handler();
 800114a:	f7ff ffc5 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_ADC_MspInit+0xc0>)

    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001150:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8001154:	4c1e      	ldr	r4, [pc, #120]	@ (80011d0 <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800115a:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 800115c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001160:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001164:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001168:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001174:	f042 0204 	orr.w	r2, r2, #4
 8001178:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001188:	f005 f8f4 	bl	8006374 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 800118c:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_ADC_MspInit+0xc8>)
 800118e:	2311      	movs	r3, #17
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001194:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8001198:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a0:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a2:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011aa:	6223      	str	r3, [r4, #32]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011ac:	e9c4 0206 	strd	r0, r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011b0:	4620      	mov	r0, r4
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011b6:	f006 f889 	bl	80072cc <HAL_DMA_Init>
 80011ba:	b108      	cbz	r0, 80011c0 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80011bc:	f7ff ff8c 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80011c0:	64ec      	str	r4, [r5, #76]	@ 0x4c
 80011c2:	63a5      	str	r5, [r4, #56]	@ 0x38

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80011c4:	b035      	add	sp, #212	@ 0xd4
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	58026000 	.word	0x58026000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	24009cac 	.word	0x24009cac
 80011d4:	58025408 	.word	0x58025408

080011d8 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80011d8:	6802      	ldr	r2, [r0, #0]
{
 80011da:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_CRC_MspInit+0x2c>)
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10d      	bne.n	80011fe <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011e2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80011e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011ea:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80011ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80011fe:	b002      	add	sp, #8
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	58024c00 	.word	0x58024c00

08001208 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_DMA2D_MspInit+0x40>)
{
 800120a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800120c:	6802      	ldr	r2, [r0, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d117      	bne.n	8001242 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001214:	2107      	movs	r1, #7
 8001216:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001218:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800121c:	f042 0210 	orr.w	r2, r2, #16
 8001220:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001224:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001226:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001232:	f005 fe7d 	bl	8006f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001236:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001238:	b003      	add	sp, #12
 800123a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800123e:	f005 bea9 	b.w	8006f94 <HAL_NVIC_EnableIRQ>
}
 8001242:	b003      	add	sp, #12
 8001244:	f85d fb04 	ldr.w	pc, [sp], #4
 8001248:	52001000 	.word	0x52001000
 800124c:	58024400 	.word	0x58024400

08001250 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001250:	b510      	push	{r4, lr}
 8001252:	b0ba      	sub	sp, #232	@ 0xe8
 8001254:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a803      	add	r0, sp, #12
 800125c:	f023 fcb4 	bl	8024bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	22c8      	movs	r2, #200	@ 0xc8
 8001262:	2100      	movs	r1, #0
 8001264:	a808      	add	r0, sp, #32
 8001266:	f023 fcaf 	bl	8024bc8 <memset>
  if(hdsi->Instance==DSI)
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001270:	d138      	bne.n	80012e4 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001272:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001276:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001278:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800127a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f00a f9ed 	bl	800b65c <HAL_RCCEx_PeriphCLKConfig>
 8001282:	b108      	cbz	r0, 8001288 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001284:	f7ff ff28 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800128c:	a903      	add	r1, sp, #12
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001290:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001294:	f042 0210 	orr.w	r2, r2, #16
 8001298:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800129c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012a0:	f002 0210 	and.w	r2, r2, #16
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012c8:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012d0:	f007 f8bc 	bl	800844c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80012d4:	207b      	movs	r0, #123	@ 0x7b
 80012d6:	4622      	mov	r2, r4
 80012d8:	2107      	movs	r1, #7
 80012da:	f005 fe29 	bl	8006f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80012de:	207b      	movs	r0, #123	@ 0x7b
 80012e0:	f005 fe58 	bl	8006f94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 80012e4:	b03a      	add	sp, #232	@ 0xe8
 80012e6:	bd10      	pop	{r4, pc}
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58022400 	.word	0x58022400

080012f0 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80012f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <HAL_JPEG_MspInit+0xf4>)
{
 80012f4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80012f6:	6802      	ldr	r2, [r0, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d170      	bne.n	80013de <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80012fc:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80012fe:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001300:	4c3a      	ldr	r4, [pc, #232]	@ (80013ec <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001302:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001306:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800130a:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80013f8 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800130e:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001318:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800131a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001326:	2311      	movs	r3, #17
 8001328:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001332:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001336:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001338:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800133a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800133e:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001342:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001346:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800134a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800134e:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001352:	f008 fea4 	bl	800a09e <HAL_MDMA_Init>
 8001356:	b108      	cbz	r0, 800135c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001358:	f7ff febe 	bl	80010d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800135c:	2200      	movs	r2, #0
 800135e:	4823      	ldr	r0, [pc, #140]	@ (80013ec <HAL_JPEG_MspInit+0xfc>)
 8001360:	4611      	mov	r1, r2
 8001362:	f008 ff2a 	bl	800a1ba <HAL_MDMA_ConfigPostRequestMask>
 8001366:	b108      	cbz	r0, 800136c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001368:	f7ff feb6 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800136c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800136e:	2313      	movs	r3, #19
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001372:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001374:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001376:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800137a:	4c1e      	ldr	r4, [pc, #120]	@ (80013f4 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800137c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	22c0      	movs	r2, #192	@ 0xc0
 8001384:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001388:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800138a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800138c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001390:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001394:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001398:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800139c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013a0:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80013a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80013a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013aa:	f008 fe78 	bl	800a09e <HAL_MDMA_Init>
 80013ae:	b108      	cbz	r0, 80013b4 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80013b0:	f7ff fe92 	bl	80010d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80013b4:	2200      	movs	r2, #0
 80013b6:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <HAL_JPEG_MspInit+0x104>)
 80013b8:	4611      	mov	r1, r2
 80013ba:	f008 fefe 	bl	800a1ba <HAL_MDMA_ConfigPostRequestMask>
 80013be:	b108      	cbz	r0, 80013c4 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80013c0:	f7ff fe8a 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80013c4:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80013cc:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80013ce:	f005 fdaf 	bl	8006f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80013d2:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80013d4:	b003      	add	sp, #12
 80013d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80013da:	f005 bddb 	b.w	8006f94 <HAL_NVIC_EnableIRQ>
}
 80013de:	b003      	add	sp, #12
 80013e0:	bd30      	pop	{r4, r5, pc}
 80013e2:	bf00      	nop
 80013e4:	52003000 	.word	0x52003000
 80013e8:	58024400 	.word	0x58024400
 80013ec:	24009b40 	.word	0x24009b40
 80013f0:	520001c0 	.word	0x520001c0
 80013f4:	24009ad4 	.word	0x24009ad4
 80013f8:	52000200 	.word	0x52000200

080013fc <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b0b4      	sub	sp, #208	@ 0xd0
 8001400:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001402:	22c8      	movs	r2, #200	@ 0xc8
 8001404:	2100      	movs	r1, #0
 8001406:	a802      	add	r0, sp, #8
 8001408:	f023 fbde 	bl	8024bc8 <memset>
  if(hltdc->Instance==LTDC)
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_LTDC_MspInit+0x74>)
 8001410:	429a      	cmp	r2, r3
 8001412:	d12b      	bne.n	800146c <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001414:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001418:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800141a:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800141e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001422:	23a1      	movs	r3, #161	@ 0xa1
 8001424:	2205      	movs	r2, #5
 8001426:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800142a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800142c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001430:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001434:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001438:	f00a f910 	bl	800b65c <HAL_RCCEx_PeriphCLKConfig>
 800143c:	b108      	cbz	r0, 8001442 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800143e:	f7ff fe4b 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001444:	2058      	movs	r0, #88	@ 0x58
 8001446:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001448:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800144c:	f042 0208 	orr.w	r2, r2, #8
 8001450:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001454:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001462:	f005 fd65 	bl	8006f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001466:	2058      	movs	r0, #88	@ 0x58
 8001468:	f005 fd94 	bl	8006f94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800146c:	b034      	add	sp, #208	@ 0xd0
 800146e:	bd10      	pop	{r4, pc}
 8001470:	50001000 	.word	0x50001000
 8001474:	58024400 	.word	0x58024400

08001478 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b0bf      	sub	sp, #252	@ 0xfc
 800147c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	2214      	movs	r2, #20
 8001480:	2100      	movs	r1, #0
 8001482:	a807      	add	r0, sp, #28
 8001484:	f023 fba0 	bl	8024bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	22c8      	movs	r2, #200	@ 0xc8
 800148a:	2100      	movs	r1, #0
 800148c:	a80c      	add	r0, sp, #48	@ 0x30
 800148e:	f023 fb9b 	bl	8024bc8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <HAL_QSPI_MspInit+0x16c>)
 8001496:	429a      	cmp	r2, r3
 8001498:	f040 80a1 	bne.w	80015de <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800149c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014a0:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f00a f8d8 	bl	800b65c <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	b108      	cbz	r0, 80014b2 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80014ae:	f7ff fe13 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014b2:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014b8:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	a907      	add	r1, sp, #28
 80014c0:	484a      	ldr	r0, [pc, #296]	@ (80015ec <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c2:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014c8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80014cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80014d0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014d4:	9201      	str	r2, [sp, #4]
 80014d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014e8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80014ec:	9202      	str	r2, [sp, #8]
 80014ee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001500:	f002 0220 	and.w	r2, r2, #32
 8001504:	9203      	str	r2, [sp, #12]
 8001506:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001508:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800150c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001510:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001514:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001518:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800151c:	9204      	str	r2, [sp, #16]
 800151e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001524:	f042 0202 	orr.w	r2, r2, #2
 8001528:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800152c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001530:	f002 0202 	and.w	r2, r2, #2
 8001534:	9205      	str	r2, [sp, #20]
 8001536:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800153c:	f042 0208 	orr.w	r2, r2, #8
 8001540:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	9306      	str	r3, [sp, #24]
 800154e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001554:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800155c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155e:	f006 ff75 	bl	800844c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001562:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001564:	a907      	add	r1, sp, #28
 8001566:	4821      	ldr	r0, [pc, #132]	@ (80015ec <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001568:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001572:	f006 ff6b 	bl	800844c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001578:	a907      	add	r1, sp, #28
 800157a:	481d      	ldr	r0, [pc, #116]	@ (80015f0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800157c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001586:	f006 ff61 	bl	800844c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158e:	a907      	add	r1, sp, #28
 8001590:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001592:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159c:	f006 ff56 	bl	800844c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a0:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a2:	a907      	add	r1, sp, #28
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015a6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015b0:	f006 ff4c 	bl	800844c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b4:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	a907      	add	r1, sp, #28
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015ba:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f006 ff42 	bl	800844c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	a907      	add	r1, sp, #28
 80015ce:	480b      	ldr	r0, [pc, #44]	@ (80015fc <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015d0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f006 ff37 	bl	800844c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80015de:	b03f      	add	sp, #252	@ 0xfc
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	52005000 	.word	0x52005000
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58021800 	.word	0x58021800
 80015f0:	58021400 	.word	0x58021400
 80015f4:	58021c00 	.word	0x58021c00
 80015f8:	58020400 	.word	0x58020400
 80015fc:	58020c00 	.word	0x58020c00

08001600 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001604:	2100      	movs	r1, #0
 8001606:	2214      	movs	r2, #20
 8001608:	a801      	add	r0, sp, #4
 800160a:	f023 fadd 	bl	8024bc8 <memset>
  if (FMC_Initialized) {
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <HAL_SDRAM_MspInit+0x10c>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	2900      	cmp	r1, #0
 8001614:	d177      	bne.n	8001706 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 8001616:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800161a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	22c0      	movs	r2, #192	@ 0xc0
 800161e:	f023 fad3 	bl	8024bc8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001622:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001626:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800162a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	f00a f815 	bl	800b65c <HAL_RCCEx_PeriphCLKConfig>
 8001632:	b108      	cbz	r0, 8001638 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001634:	f7ff fd50 	bl	80010d8 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001638:	4b35      	ldr	r3, [pc, #212]	@ (8001710 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2600      	movs	r6, #0
 800163e:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001640:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001644:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001646:	a901      	add	r1, sp, #4
 8001648:	4832      	ldr	r0, [pc, #200]	@ (8001714 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800164a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800164e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001652:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001656:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800166c:	f006 feee 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001670:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	a901      	add	r1, sp, #4
 8001674:	4828      	ldr	r0, [pc, #160]	@ (8001718 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001676:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f006 fee4 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001684:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001688:	a901      	add	r1, sp, #4
 800168a:	4824      	ldr	r0, [pc, #144]	@ (800171c <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001696:	f006 fed9 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800169a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800169e:	a901      	add	r1, sp, #4
 80016a0:	481f      	ldr	r0, [pc, #124]	@ (8001720 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ac:	f006 fece 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80016b0:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b4:	a901      	add	r1, sp, #4
 80016b6:	481b      	ldr	r0, [pc, #108]	@ (8001724 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c2:	f006 fec3 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80016c6:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	a901      	add	r1, sp, #4
 80016cc:	4816      	ldr	r0, [pc, #88]	@ (8001728 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	f006 feb8 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80016dc:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e0:	a901      	add	r1, sp, #4
 80016e2:	4812      	ldr	r0, [pc, #72]	@ (800172c <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ee:	f006 fead 	bl	800844c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	a901      	add	r1, sp, #4
 80016f6:	480e      	ldr	r0, [pc, #56]	@ (8001730 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f006 fea3 	bl	800844c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001706:	b039      	add	sp, #228	@ 0xe4
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	bf00      	nop
 800170c:	24009d8c 	.word	0x24009d8c
 8001710:	58024400 	.word	0x58024400
 8001714:	58022000 	.word	0x58022000
 8001718:	58020400 	.word	0x58020400
 800171c:	58021000 	.word	0x58021000
 8001720:	58021c00 	.word	0x58021c00
 8001724:	58021800 	.word	0x58021800
 8001728:	58020c00 	.word	0x58020c00
 800172c:	58021400 	.word	0x58021400
 8001730:	58020800 	.word	0x58020800

08001734 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_SDRAM_MspDeInit+0x6c>)
 8001736:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001738:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800173a:	bb82      	cbnz	r2, 800179e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 800173e:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001740:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001744:	4818      	ldr	r0, [pc, #96]	@ (80017a8 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001746:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001748:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 800174c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001750:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001754:	f006 ff62 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001758:	2160      	movs	r1, #96	@ 0x60
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <HAL_SDRAM_MspDeInit+0x78>)
 800175c:	f006 ff5e 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001760:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001764:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <HAL_SDRAM_MspDeInit+0x7c>)
 8001766:	f006 ff59 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800176a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <HAL_SDRAM_MspDeInit+0x80>)
 8001770:	f006 ff54 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001774:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001778:	480f      	ldr	r0, [pc, #60]	@ (80017b8 <HAL_SDRAM_MspDeInit+0x84>)
 800177a:	f006 ff4f 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800177e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <HAL_SDRAM_MspDeInit+0x88>)
 8001784:	f006 ff4a 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001788:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <HAL_SDRAM_MspDeInit+0x8c>)
 800178e:	f006 ff45 	bl	800861c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001792:	4621      	mov	r1, r4
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800179a:	f006 bf3f 	b.w	800861c <HAL_GPIO_DeInit>
}
 800179e:	bd10      	pop	{r4, pc}
 80017a0:	24009d88 	.word	0x24009d88
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58022000 	.word	0x58022000
 80017ac:	58020400 	.word	0x58020400
 80017b0:	58021000 	.word	0x58021000
 80017b4:	58021c00 	.word	0x58021c00
 80017b8:	58021800 	.word	0x58021800
 80017bc:	58020c00 	.word	0x58020c00
 80017c0:	58021400 	.word	0x58021400
 80017c4:	58020800 	.word	0x58020800

080017c8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c8:	280f      	cmp	r0, #15
{
 80017ca:	b510      	push	{r4, lr}
 80017cc:	4604      	mov	r4, r0
 80017ce:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d0:	d902      	bls.n	80017d8 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80017d2:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80017d4:	b00a      	add	sp, #40	@ 0x28
 80017d6:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017d8:	4601      	mov	r1, r0
 80017da:	2200      	movs	r2, #0
 80017dc:	2036      	movs	r0, #54	@ 0x36
 80017de:	f005 fba7 	bl	8006f30 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e2:	2036      	movs	r0, #54	@ 0x36
 80017e4:	f005 fbd6 	bl	8006f94 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ea:	4669      	mov	r1, sp
 80017ec:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80017ee:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <HAL_InitTick+0x88>)
 80017f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80017f6:	f042 0210 	orr.w	r2, r2, #16
 80017fa:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80017fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180a:	f009 fe11 	bl	800b430 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800180e:	9b07      	ldr	r3, [sp, #28]
 8001810:	b9c3      	cbnz	r3, 8001844 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001812:	f009 fde9 	bl	800b3e8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001816:	4c0f      	ldr	r4, [pc, #60]	@ (8001854 <HAL_InitTick+0x8c>)
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_InitTick+0x90>)
 800181a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800181c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001820:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_InitTick+0x94>)
 8001824:	fbb0 f0f3 	udiv	r0, r0, r3
 8001828:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800182a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800182c:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800182e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001830:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001834:	f00b f972 	bl	800cb1c <HAL_TIM_Base_Init>
 8001838:	2800      	cmp	r0, #0
 800183a:	d1ca      	bne.n	80017d2 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 800183c:	4620      	mov	r0, r4
 800183e:	f00b f837 	bl	800c8b0 <HAL_TIM_Base_Start_IT>
 8001842:	e7c7      	b.n	80017d4 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001844:	f009 fdd0 	bl	800b3e8 <HAL_RCC_GetPCLK1Freq>
 8001848:	0040      	lsls	r0, r0, #1
 800184a:	e7e4      	b.n	8001816 <HAL_InitTick+0x4e>
 800184c:	24000074 	.word	0x24000074
 8001850:	58024400 	.word	0x58024400
 8001854:	24009d90 	.word	0x24009d90
 8001858:	40001000 	.word	0x40001000
 800185c:	000f4240 	.word	0x000f4240

08001860 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler>

08001862 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler>

08001864 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler>

08001866 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler>

08001868 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler>

0800186a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186a:	4770      	bx	lr

0800186c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800186c:	4801      	ldr	r0, [pc, #4]	@ (8001874 <TIM6_DAC_IRQHandler+0x8>)
 800186e:	f00b b861 	b.w	800c934 <HAL_TIM_IRQHandler>
 8001872:	bf00      	nop
 8001874:	24009d90 	.word	0x24009d90

08001878 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001878:	4801      	ldr	r0, [pc, #4]	@ (8001880 <LTDC_IRQHandler+0x8>)
 800187a:	f008 bb29 	b.w	8009ed0 <HAL_LTDC_IRQHandler>
 800187e:	bf00      	nop
 8001880:	24009a2c 	.word	0x24009a2c

08001884 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001884:	4801      	ldr	r0, [pc, #4]	@ (800188c <DMA2D_IRQHandler+0x8>)
 8001886:	f006 b8c8 	b.w	8007a1a <HAL_DMA2D_IRQHandler>
 800188a:	bf00      	nop
 800188c:	24009c20 	.word	0x24009c20

08001890 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001890:	4801      	ldr	r0, [pc, #4]	@ (8001898 <JPEG_IRQHandler+0x8>)
 8001892:	f008 b9f5 	b.w	8009c80 <HAL_JPEG_IRQHandler>
 8001896:	bf00      	nop
 8001898:	24009bac 	.word	0x24009bac

0800189c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <MDMA_IRQHandler+0x14>)
{
 800189e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80018a0:	f008 fd10 	bl	800a2c4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80018a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80018aa:	f008 bd0b 	b.w	800a2c4 <HAL_MDMA_IRQHandler>
 80018ae:	bf00      	nop
 80018b0:	24009ad4 	.word	0x24009ad4
 80018b4:	24009b40 	.word	0x24009b40

080018b8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80018b8:	4801      	ldr	r0, [pc, #4]	@ (80018c0 <DSI_IRQHandler+0x8>)
 80018ba:	f006 bab0 	b.w	8007e1e <HAL_DSI_IRQHandler>
 80018be:	bf00      	nop
 80018c0:	24009c04 	.word	0x24009c04

080018c4 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018c4:	4801      	ldr	r0, [pc, #4]	@ (80018cc <BDMA_Channel0_IRQHandler+0x8>)
 80018c6:	f005 be99 	b.w	80075fc <HAL_DMA_IRQHandler>
 80018ca:	bf00      	nop
 80018cc:	24009cac 	.word	0x24009cac

080018d0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018d0:	2001      	movs	r0, #1
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018d6:	f023 fa2b 	bl	8024d30 <__errno>
 80018da:	2316      	movs	r3, #22
 80018dc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80018de:	f04f 30ff 	mov.w	r0, #4294967295
 80018e2:	bd08      	pop	{r3, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018e6:	f023 fa23 	bl	8024d30 <__errno>
 80018ea:	2316      	movs	r3, #22
 80018ec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018ee:	e7fe      	b.n	80018ee <_exit+0xa>

080018f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	460d      	mov	r5, r1
 80018f4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	460e      	mov	r6, r1
 80018f8:	1b73      	subs	r3, r6, r5
 80018fa:	429c      	cmp	r4, r3
 80018fc:	dc01      	bgt.n	8001902 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018fe:	4620      	mov	r0, r4
 8001900:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	e7f5      	b.n	80018f8 <_read+0x8>

0800190c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	460d      	mov	r5, r1
 8001910:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	460e      	mov	r6, r1
 8001914:	1b73      	subs	r3, r6, r5
 8001916:	429c      	cmp	r4, r3
 8001918:	dc01      	bgt.n	800191e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800191a:	4620      	mov	r0, r4
 800191c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800191e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001922:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	e7f5      	b.n	8001914 <_write+0x8>

08001928 <_close>:

int _close(int file)
{
	return -1;
}
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001932:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001934:	604b      	str	r3, [r1, #4]
}
 8001936:	4770      	bx	lr

08001938 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001938:	2001      	movs	r0, #1
 800193a:	4770      	bx	lr

0800193c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800193c:	2000      	movs	r0, #0
 800193e:	4770      	bx	lr

08001940 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <_sbrk+0x30>)
{
 8001942:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001944:	6811      	ldr	r1, [r2, #0]
{
 8001946:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001948:	b909      	cbnz	r1, 800194e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800194a:	490a      	ldr	r1, [pc, #40]	@ (8001974 <_sbrk+0x34>)
 800194c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	6810      	ldr	r0, [r2, #0]
 8001950:	4909      	ldr	r1, [pc, #36]	@ (8001978 <_sbrk+0x38>)
 8001952:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <_sbrk+0x3c>)
 8001954:	4403      	add	r3, r0
 8001956:	1b09      	subs	r1, r1, r4
 8001958:	428b      	cmp	r3, r1
 800195a:	d906      	bls.n	800196a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800195c:	f023 f9e8 	bl	8024d30 <__errno>
 8001960:	230c      	movs	r3, #12
 8001962:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001964:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001968:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800196a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800196c:	e7fc      	b.n	8001968 <_sbrk+0x28>
 800196e:	bf00      	nop
 8001970:	24009ddc 	.word	0x24009ddc
 8001974:	240260d8 	.word	0x240260d8
 8001978:	24080000 	.word	0x24080000
 800197c:	00001000 	.word	0x00001000

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001984:	f004 fc2e 	bl	80061e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	@ (80019cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f023 f9c5 	bl	8024d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7fe ff4f 	bl	8000854 <main>
  bx  lr
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c0:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 80019c4:	080292f8 	.word	0x080292f8
  ldr r2, =_sbss
 80019c8:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 80019cc:	240260d4 	.word	0x240260d4

080019d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC3_IRQHandler>

080019d2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80019d2:	4770      	bx	lr

080019d4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80019d4:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80019d6:	f001 fd25 	bl	8003424 <touchgfx_components_init>
    touchgfx_init();
}
 80019da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 80019de:	f001 bca9 	b.w	8003334 <touchgfx_init>

080019e2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80019e2:	f001 bd21 	b.w	8003428 <touchgfx_taskEntry>

080019e6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80019e6:	6840      	ldr	r0, [r0, #4]
    }
 80019e8:	4770      	bx	lr

080019ea <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80019ea:	6041      	str	r1, [r0, #4]
    }
 80019ec:	4770      	bx	lr

080019ee <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80019f4:	fbb2 f0f3 	udiv	r0, r2, r3
 80019f8:	4770      	bx	lr
	...

080019fc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80019fe:	68c0      	ldr	r0, [r0, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001a04:	4358      	muls	r0, r3
 8001a06:	4770      	bx	lr
 8001a08:	24009de0 	.word	0x24009de0

08001a0c <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001a0c:	4770      	bx	lr
	...

08001a10 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a12:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001a14:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001a18:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001a1a:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a2a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001a38:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001a3c:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001a42:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001a44:	2101      	movs	r1, #1
 8001a46:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001a48:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a50:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a54:	fab2 f282 	clz	r2, r2
 8001a58:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	b983      	cbnz	r3, 8001a82 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001a60:	f009 fca0 	bl	800b3a4 <HAL_RCC_GetHCLKFreq>
 8001a64:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001a66:	f009 fad5 	bl	800b014 <HAL_RCC_GetSysClockFreq>
 8001a6a:	fbb0 f0f4 	udiv	r0, r0, r4
 8001a6e:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001a72:	f00b f853 	bl	800cb1c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001a76:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001a78:	b003      	add	sp, #12
 8001a7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001a7e:	f00a bedd 	b.w	800c83c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001a82:	f009 fcb1 	bl	800b3e8 <HAL_RCC_GetPCLK1Freq>
 8001a86:	0044      	lsls	r4, r0, #1
 8001a88:	e7ed      	b.n	8001a66 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	24009de0 	.word	0x24009de0
 8001a94:	0802818c 	.word	0x0802818c

08001a98 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	f022 fa7e 	bl	8023f9e <_ZdlPvj>
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	bd10      	pop	{r4, pc}

08001aa6 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001aa6:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001aa8:	6803      	ldr	r3, [r0, #0]
{
 8001aaa:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001aac:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001aae:	b131      	cbz	r1, 8001abe <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001ab0:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001ab2:	4798      	blx	r3
 8001ab4:	6863      	ldr	r3, [r4, #4]
 8001ab6:	1b5b      	subs	r3, r3, r5
 8001ab8:	4403      	add	r3, r0
 8001aba:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001abc:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001abe:	4798      	blx	r3
 8001ac0:	60a0      	str	r0, [r4, #8]
}
 8001ac2:	e7fb      	b.n	8001abc <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001ac4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001acc:	460f      	mov	r7, r1
 8001ace:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001ad0:	781d      	ldrb	r5, [r3, #0]
 8001ad2:	b915      	cbnz	r5, 8001ada <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001ad4:	2500      	movs	r5, #0
}
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001ada:	4c07      	ldr	r4, [pc, #28]	@ (8001af8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001adc:	2000      	movs	r0, #0
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f004 fb24 	bl	800612c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f4      	beq.n	8001ad4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001aea:	6863      	ldr	r3, [r4, #4]
 8001aec:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	6033      	str	r3, [r6, #0]
            return true;
 8001af2:	e7f0      	b.n	8001ad6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001af4:	24009e3c 	.word	0x24009e3c
 8001af8:	24009e2c 	.word	0x24009e2c

08001afc <_ZN20STM32TouchControllerD0Ev>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4604      	mov	r4, r0
 8001b00:	2104      	movs	r1, #4
 8001b02:	f022 fa4c 	bl	8023f9e <_ZdlPvj>
 8001b06:	4620      	mov	r0, r4
 8001b08:	bd10      	pop	{r4, pc}
	...

08001b0c <_ZN20STM32TouchController4initEv>:
{
 8001b0c:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001b10:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001b14:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001b16:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001b18:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b1c:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001b20:	230c      	movs	r3, #12
 8001b22:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001b26:	f004 fa71 	bl	800600c <BSP_TS_Init>
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_ZN20STM32TouchController4initEv+0x40>)
 8001b2c:	b910      	cbnz	r0, 8001b34 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
}
 8001b32:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1fb      	bne.n	8001b32 <_ZN20STM32TouchController4initEv+0x26>
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <_ZN20STM32TouchController4initEv+0x44>)
 8001b3c:	212e      	movs	r1, #46	@ 0x2e
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <_ZN20STM32TouchController4initEv+0x48>)
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <_ZN20STM32TouchController4initEv+0x4c>)
 8001b42:	f022 fda5 	bl	8024690 <__assert_func>
 8001b46:	bf00      	nop
 8001b48:	24009e38 	.word	0x24009e38
 8001b4c:	24009e3c 	.word	0x24009e3c
 8001b50:	08025787 	.word	0x08025787
 8001b54:	0802579a 	.word	0x0802579a
 8001b58:	080257c4 	.word	0x080257c4

08001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b5c:	2803      	cmp	r0, #3
 8001b5e:	d825      	bhi.n	8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001b60:	e8df f000 	tbb	[pc, r0]
 8001b64:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b74:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b76:	f006 bdf3 	b.w	8008760 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	0952      	lsrs	r2, r2, #5
 8001b88:	e7f4      	b.n	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	fab2 f282 	clz	r2, r2
 8001b96:	0952      	lsrs	r2, r2, #5
 8001b98:	e7ec      	b.n	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	0952      	lsrs	r2, r2, #5
 8001baa:	e7e4      	b.n	8001b76 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	24009e40 	.word	0x24009e40
 8001bb4:	58022400 	.word	0x58022400
 8001bb8:	58021400 	.word	0x58021400

08001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bbc:	2803      	cmp	r0, #3
 8001bbe:	d825      	bhi.n	8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001bc0:	e8df f000 	tbb	[pc, r0]
 8001bc4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bca:	2108      	movs	r1, #8
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	3a00      	subs	r2, #0
 8001bd0:	bf18      	it	ne
 8001bd2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bd4:	480f      	ldr	r0, [pc, #60]	@ (8001c14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bd6:	f006 bdc3 	b.w	8008760 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bda:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	3a00      	subs	r2, #0
 8001be4:	bf18      	it	ne
 8001be6:	2201      	movne	r2, #1
 8001be8:	e7f4      	b.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	3a00      	subs	r2, #0
 8001bf4:	bf18      	it	ne
 8001bf6:	2201      	movne	r2, #1
 8001bf8:	e7ec      	b.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	3a00      	subs	r2, #0
 8001c06:	bf18      	it	ne
 8001c08:	2201      	movne	r2, #1
 8001c0a:	e7e4      	b.n	8001bd6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	24009e40 	.word	0x24009e40
 8001c14:	58022400 	.word	0x58022400
 8001c18:	58021400 	.word	0x58021400

08001c1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c1c:	2803      	cmp	r0, #3
 8001c1e:	d811      	bhi.n	8001c44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001c20:	e8df f000 	tbb	[pc, r0]
 8001c24:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c28:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c2c:	f006 bd9d 	b.w	800876a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c34:	e7f9      	b.n	8001c2a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c3a:	e7f6      	b.n	8001c2a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c42:	e7f3      	b.n	8001c2c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	58022400 	.word	0x58022400
 8001c4c:	58021400 	.word	0x58021400

08001c50 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c50:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c52:	2803      	cmp	r0, #3
 8001c54:	d815      	bhi.n	8001c82 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001c56:	e8df f000 	tbb	[pc, r0]
 8001c5a:	0a02      	.short	0x0a02
 8001c5c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c5e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c60:	4809      	ldr	r0, [pc, #36]	@ (8001c88 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c62:	f006 fd77 	bl	8008754 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c66:	1e43      	subs	r3, r0, #1
 8001c68:	4258      	negs	r0, r3
 8001c6a:	4158      	adcs	r0, r3
 8001c6c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c72:	e7f5      	b.n	8001c60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c78:	e7f2      	b.n	8001c60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001c80:	e7ef      	b.n	8001c62 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7ef      	b.n	8001c66 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001c86:	bf00      	nop
 8001c88:	58022400 	.word	0x58022400
 8001c8c:	58021400 	.word	0x58021400

08001c90 <_ZN8touchgfx4GPIO4initEv>:
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4d08      	ldr	r5, [pc, #32]	@ (8001cb4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001c94:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001c96:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001c98:	b2e0      	uxtb	r0, r4
 8001c9a:	f7ff ffd9 	bl	8001c50 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001c9e:	b118      	cbz	r0, 8001ca8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001ca4:	bf18      	it	ne
 8001ca6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001ca8:	3401      	adds	r4, #1
 8001caa:	3504      	adds	r5, #4
 8001cac:	2c05      	cmp	r4, #5
 8001cae:	d1f3      	bne.n	8001c98 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	bf00      	nop
 8001cb4:	24009e40 	.word	0x24009e40

08001cb8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001cb8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001cba:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001cbe:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001cc4:	4770      	bx	lr

08001cc6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	4770      	bx	lr
	...

08001ccc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ccc:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001cce:	3900      	subs	r1, #0
 8001cd0:	4b02      	ldr	r3, [pc, #8]	@ (8001cdc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001cd2:	bf18      	it	ne
 8001cd4:	2101      	movne	r1, #1
 8001cd6:	7019      	strb	r1, [r3, #0]
    }
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	240253b3 	.word	0x240253b3

08001ce0 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001ce0:	4770      	bx	lr

08001ce2 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	4770      	bx	lr

08001ce6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ce6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ce8:	b10b      	cbz	r3, 8001cee <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001cea:	4608      	mov	r0, r1
 8001cec:	4718      	bx	r3
        }
    }
 8001cee:	4770      	bx	lr

08001cf0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001cf0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cf4:	4770      	bx	lr

08001cf6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001cf6:	6840      	ldr	r0, [r0, #4]
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4718      	bx	r3

08001cfe <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001cfe:	4770      	bx	lr

08001d00 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001d00:	4770      	bx	lr
	...

08001d04 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001d04:	4b01      	ldr	r3, [pc, #4]	@ (8001d0c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24009e64 	.word	0x24009e64

08001d10 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d10:	4770      	bx	lr

08001d12 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d12:	f001 bc86 	b.w	8003622 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001d16 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001d16:	f001 bc17 	b.w	8003548 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d1a <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001d1a:	f001 bde7 	b.w	80038ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d1e <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001d1e:	f001 bdd9 	b.w	80038d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001d24 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001d28:	f001 fd9c 	bl	8003864 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001d2c:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001d30:	b113      	cbz	r3, 8001d38 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001d32:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    }
}
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2400000c 	.word	0x2400000c

08001d40 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d40:	f001 bc0a 	b.w	8003558 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d44 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d48:	f00e fc2a 	bl	80105a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d58:	4718      	bx	r3

08001d5a <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001d5a:	b510      	push	{r4, lr}
 8001d5c:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001d5e:	f00d ff85 	bl	800fc6c <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001d62:	6860      	ldr	r0, [r4, #4]
 8001d64:	6803      	ldr	r3, [r0, #0]
    }
 8001d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	4718      	bx	r3

08001d6e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001d6e:	f00d be45 	b.w	800f9fc <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d72 <_ZN11TouchGFXHALD0Ev>:
 8001d72:	b510      	push	{r4, lr}
 8001d74:	4604      	mov	r4, r0
 8001d76:	2184      	movs	r1, #132	@ 0x84
 8001d78:	f022 f911 	bl	8023f9e <_ZdlPvj>
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	bd10      	pop	{r4, pc}

08001d80 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001d80:	4b02      	ldr	r3, [pc, #8]	@ (8001d8c <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001d86:	f00d be75 	b.w	800fa74 <_ZN8touchgfx3HAL10beginFrameEv>
 8001d8a:	bf00      	nop
 8001d8c:	2400000c 	.word	0x2400000c

08001d90 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4604      	mov	r4, r0
    mcuInstr.init();
 8001d94:	4d06      	ldr	r5, [pc, #24]	@ (8001db0 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001d96:	f001 fc05 	bl	80035a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001d9a:	2300      	movs	r3, #0
    mcuInstr.init();
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001da2:	f7ff fe35 	bl	8001a10 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001da6:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001da8:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001daa:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	24009e54 	.word	0x24009e54

08001db4 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001db4:	6803      	ldr	r3, [r0, #0]
{
 8001db6:	4604      	mov	r4, r0
 8001db8:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dbe:	4798      	blx	r3
    enableInterrupts();
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001dc6:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001dc8:	f000 ff66 	bl	8002c98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	4620      	mov	r0, r4
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd2:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2329      	movs	r3, #41	@ 0x29
 8001dd8:	2215      	movs	r2, #21
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001ddc:	9100      	str	r1, [sp, #0]
 8001dde:	f006 fa2e 	bl	800823e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001de2:	f000 ff59 	bl	8002c98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	4620      	mov	r0, r4
 8001dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dec:	4798      	blx	r3
    for (;;)
 8001dee:	e7f8      	b.n	8001de2 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001df0:	24009c04 	.word	0x24009c04

08001df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001df4:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001df8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001dfa:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001dfc:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001e00:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d009      	beq.n	8001e1a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001e06:	b93a      	cbnz	r2, 8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e08:	490a      	ldr	r1, [pc, #40]	@ (8001e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e0c:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e0e:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001e10:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001e12:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e14:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001e16:	701a      	strb	r2, [r3, #0]
    }
 8001e18:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d0fc      	beq.n	8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e1e:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e20:	4904      	ldr	r1, [pc, #16]	@ (8001e34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e22:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e24:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e26:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001e28:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	e7f3      	b.n	8001e16 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001e2e:	bf00      	nop
 8001e30:	240253ac 	.word	0x240253ac
 8001e34:	240253aa 	.word	0x240253aa
 8001e38:	240253a8 	.word	0x240253a8

08001e3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001e3c:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	428b      	cmp	r3, r1
 8001e44:	d803      	bhi.n	8001e4e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d905      	bls.n	8001e5a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e50:	21a3      	movs	r1, #163	@ 0xa3
 8001e52:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e56:	f022 fc1b 	bl	8024690 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e5c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e60:	801a      	strh	r2, [r3, #0]
    }
 8001e62:	bd08      	pop	{r3, pc}
 8001e64:	240253a8 	.word	0x240253a8
 8001e68:	240253aa 	.word	0x240253aa
 8001e6c:	0802581b 	.word	0x0802581b
 8001e70:	0802587e 	.word	0x0802587e
 8001e74:	080258c1 	.word	0x080258c1
 8001e78:	240253ae 	.word	0x240253ae
 8001e7c:	240253b0 	.word	0x240253b0

08001e80 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001e80:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001e82:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001e86:	b118      	cbz	r0, 8001e90 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001e88:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001e8a:	6803      	ldr	r3, [r0, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4718      	bx	r3
    }
 8001e90:	4770      	bx	lr
	...

08001e94 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460d      	mov	r5, r1
 8001e98:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001e9c:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e9e:	b935      	cbnz	r5, 8001eae <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001ea2:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001ea8:	480a      	ldr	r0, [pc, #40]	@ (8001ed4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001eaa:	f022 fbf1 	bl	8024690 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001eae:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001eb2:	3a00      	subs	r2, #0
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001eb6:	bf18      	it	ne
 8001eb8:	2201      	movne	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001ebc:	6803      	ldr	r3, [r0, #0]
}
 8001ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	4718      	bx	r3
 8001ec8:	24009e64 	.word	0x24009e64
 8001ecc:	08025914 	.word	0x08025914
 8001ed0:	0802594c 	.word	0x0802594c
 8001ed4:	080258c1 	.word	0x080258c1
 8001ed8:	240253b2 	.word	0x240253b2

08001edc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001edc:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8001ede:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001ee2:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001eee:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001ef2:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001ef4:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001ef6:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8001efa:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001efc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001efe:	8603      	strh	r3, [r0, #48]	@ 0x30
 8001f00:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8001f02:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001f06:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001f08:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 8001f0a:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8001f0e:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001f12:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8001f14:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001f18:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 8001f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001f1e:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001f22:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001f26:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001f2a:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001f2e:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001f32:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 8001f36:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001f38:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8001f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3e:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8001f42:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8001f46:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001f4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f4e:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8001f52:	f04f 0214 	mov.w	r2, #20
 8001f56:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8001f5c:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8001f60:	8015      	strh	r5, [r2, #0]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8001f64:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001f66:	bf28      	it	cs
 8001f68:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001f6c:	bf38      	it	cc
 8001f6e:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001f70:	8016      	strh	r6, [r2, #0]
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001f74:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001f78:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8001f7c:	7013      	strb	r3, [r2, #0]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8001f80:	6003      	str	r3, [r0, #0]
}
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	01000001 	.word	0x01000001
 8001f88:	01010000 	.word	0x01010000
 8001f8c:	240253b4 	.word	0x240253b4
 8001f90:	240253a8 	.word	0x240253a8
 8001f94:	240253ae 	.word	0x240253ae
 8001f98:	240253aa 	.word	0x240253aa
 8001f9c:	240253b0 	.word	0x240253b0
 8001fa0:	240253ac 	.word	0x240253ac
 8001fa4:	080275f8 	.word	0x080275f8

08001fa8 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001fa8:	2b01      	cmp	r3, #1
    {
 8001faa:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001fac:	d80e      	bhi.n	8001fcc <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	2215      	movs	r2, #21
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	4808      	ldr	r0, [pc, #32]	@ (8001fdc <DSI_IO_Write+0x34>)
 8001fba:	f006 f940 	bl	800823e <HAL_DSI_ShortWrite>
 8001fbe:	b118      	cbz	r0, 8001fc8 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001fc0:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e7fb      	b.n	8001fc4 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001fcc:	e9cd 1200 	strd	r1, r2, [sp]
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	2239      	movs	r2, #57	@ 0x39
 8001fd4:	4801      	ldr	r0, [pc, #4]	@ (8001fdc <DSI_IO_Write+0x34>)
 8001fd6:	f006 f943 	bl	8008260 <HAL_DSI_LongWrite>
 8001fda:	e7f0      	b.n	8001fbe <DSI_IO_Write+0x16>
 8001fdc:	24009c04 	.word	0x24009c04

08001fe0 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001fe2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001fe6:	2106      	movs	r1, #6
 8001fe8:	9100      	str	r1, [sp, #0]
 8001fea:	4601      	mov	r1, r0
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <DSI_IO_Read+0x24>)
 8001fee:	f006 f997 	bl	8008320 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001ff2:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001ff4:	bf14      	ite	ne
 8001ff6:	f06f 0007 	mvnne.w	r0, #7
 8001ffa:	2000      	moveq	r0, #0
 8001ffc:	b005      	add	sp, #20
 8001ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002002:	bf00      	nop
 8002004:	24009c04 	.word	0x24009c04

08002008 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8002008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 800200a:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800200e:	4c0b      	ldr	r4, [pc, #44]	@ (800203c <LCD_ReqTear+0x34>)
 8002010:	2239      	movs	r2, #57	@ 0x39
 8002012:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8002014:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8002018:	ab03      	add	r3, sp, #12
 800201a:	4620      	mov	r0, r4
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2344      	movs	r3, #68	@ 0x44
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2302      	movs	r3, #2
 8002024:	f006 f91c 	bl	8008260 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8002028:	2100      	movs	r1, #0
 800202a:	2335      	movs	r3, #53	@ 0x35
 800202c:	2215      	movs	r2, #21
 800202e:	4620      	mov	r0, r4
 8002030:	9100      	str	r1, [sp, #0]
 8002032:	f006 f904 	bl	800823e <HAL_DSI_ShortWrite>
    }
 8002036:	b004      	add	sp, #16
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	24009c04 	.word	0x24009c04

08002040 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002040:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8002042:	f7ff ffe1 	bl	8002008 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002048:	2202      	movs	r2, #2
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002050:	2201      	movs	r2, #1
 8002052:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8002056:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8002062:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002066:	f042 0202 	orr.w	r2, r2, #2
 800206a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 800206e:	2203      	movs	r2, #3
 8002070:	4b02      	ldr	r3, [pc, #8]	@ (800207c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002074:	bd08      	pop	{r3, pc}
 8002076:	bf00      	nop
 8002078:	24009c04 	.word	0x24009c04
 800207c:	50001000 	.word	0x50001000

08002080 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <LCD_ReqEnable+0x20>)
    {
 8002082:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002084:	7819      	ldrb	r1, [r3, #0]
 8002086:	b939      	cbnz	r1, 8002098 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002088:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800208a:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 800208c:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 800208e:	2329      	movs	r3, #41	@ 0x29
 8002090:	2215      	movs	r2, #21
 8002092:	9100      	str	r1, [sp, #0]
 8002094:	f006 f8d3 	bl	800823e <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002098:	b003      	add	sp, #12
 800209a:	f85d fb04 	ldr.w	pc, [sp], #4
 800209e:	bf00      	nop
 80020a0:	24009e50 	.word	0x24009e50
 80020a4:	24009c04 	.word	0x24009c04

080020a8 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 80020aa:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	232a      	movs	r3, #42	@ 0x2a
 80020b0:	2239      	movs	r2, #57	@ 0x39
 80020b2:	2100      	movs	r1, #0
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2304      	movs	r3, #4
 80020b8:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <LCD_SetUpdateRegionLeft+0x20>)
 80020ba:	f006 f8d1 	bl	8008260 <HAL_DSI_LongWrite>
    }
 80020be:	b003      	add	sp, #12
 80020c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020c4:	24000008 	.word	0x24000008
 80020c8:	24009c04 	.word	0x24009c04

080020cc <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <LCD_SetUpdateRegionRight+0x1c>)
    {
 80020ce:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	232a      	movs	r3, #42	@ 0x2a
 80020d4:	2239      	movs	r2, #57	@ 0x39
 80020d6:	2100      	movs	r1, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2304      	movs	r3, #4
 80020dc:	4803      	ldr	r0, [pc, #12]	@ (80020ec <LCD_SetUpdateRegionRight+0x20>)
 80020de:	f006 f8bf 	bl	8008260 <HAL_DSI_LongWrite>
    }
 80020e2:	b003      	add	sp, #12
 80020e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020e8:	24000004 	.word	0x24000004
 80020ec:	24009c04 	.word	0x24009c04

080020f0 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80020f0:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80020f2:	4d15      	ldr	r5, [pc, #84]	@ (8002148 <HAL_DSI_TearingEffectCallback+0x58>)
 80020f4:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff fd30 	bl	8001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020fc:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 80020fe:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8002102:	3201      	adds	r2, #1
 8002104:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8002108:	2200      	movs	r2, #0
 800210a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 800210e:	f000 fdb7 	bl	8002c80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8002114:	682a      	ldr	r2, [r5, #0]
 8002116:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 800211e:	b173      	cbz	r3, 800213e <HAL_DSI_TearingEffectCallback+0x4e>
 8002120:	4d0b      	ldr	r5, [pc, #44]	@ (8002150 <HAL_DSI_TearingEffectCallback+0x60>)
 8002122:	782b      	ldrb	r3, [r5, #0]
 8002124:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002128:	b94b      	cbnz	r3, 800213e <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_DSI_TearingEffectCallback+0x64>)
 800212c:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 800212e:	f7ff ffbb 	bl	80020a8 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8002132:	4620      	mov	r0, r4
 8002134:	f006 f873 	bl	800821e <HAL_DSI_Refresh>
            displayRefreshing = true;
 8002138:	2301      	movs	r3, #1
 800213a:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800213c:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800213e:	2000      	movs	r0, #0
    }
 8002140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002144:	f7ff bd3a 	b.w	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8002148:	240253b4 	.word	0x240253b4
 800214c:	2400000c 	.word	0x2400000c
 8002150:	24009e6c 	.word	0x24009e6c
 8002154:	24009e68 	.word	0x24009e68

08002158 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8002158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 800215c:	4e49      	ldr	r6, [pc, #292]	@ (8002284 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 800215e:	b085      	sub	sp, #20
 8002160:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002162:	7833      	ldrb	r3, [r6, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8089 	beq.w	800227c <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 800216a:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80022a8 <HAL_DSI_EndOfRefreshCallback+0x150>
 800216e:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80022ac <HAL_DSI_EndOfRefreshCallback+0x154>
 8002172:	f8d9 5000 	ldr.w	r5, [r9]
 8002176:	4f44      	ldr	r7, [pc, #272]	@ (8002288 <HAL_DSI_EndOfRefreshCallback+0x130>)
 8002178:	2d00      	cmp	r5, #0
 800217a:	d13e      	bne.n	80021fa <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 800217c:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800217e:	4e43      	ldr	r6, [pc, #268]	@ (800228c <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8002180:	f004 f8e0 	bl	8006344 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	9500      	str	r5, [sp, #0]
 8002188:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800218c:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800218e:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002192:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002196:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800219a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800219e:	f002 0208 	and.w	r2, r2, #8
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 80021a6:	f8d8 2000 	ldr.w	r2, [r8]
 80021aa:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 80021ae:	4838      	ldr	r0, [pc, #224]	@ (8002290 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80021b0:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80021b2:	4e38      	ldr	r6, [pc, #224]	@ (8002294 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80021b4:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80021b6:	4838      	ldr	r0, [pc, #224]	@ (8002298 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80021b8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 80021bc:	4837      	ldr	r0, [pc, #220]	@ (800229c <HAL_DSI_EndOfRefreshCallback+0x144>)
 80021be:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80021c2:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80021c4:	f041 0101 	orr.w	r1, r1, #1
 80021c8:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80021ca:	9501      	str	r5, [sp, #4]
 80021cc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80021d0:	f042 0208 	orr.w	r2, r2, #8
 80021d4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80021d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80021e4:	f7ff ff72 	bl	80020cc <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80021e8:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80021ea:	4620      	mov	r0, r4
                updateRegion = 1;
 80021ec:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80021f0:	b005      	add	sp, #20
 80021f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80021f6:	f006 b812 	b.w	800821e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80021fe:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002200:	9502      	str	r5, [sp, #8]
 8002202:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002206:	4c26      	ldr	r4, [pc, #152]	@ (80022a0 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002208:	f022 0208 	bic.w	r2, r2, #8
 800220c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002210:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002214:	f002 0208 	and.w	r2, r2, #8
 8002218:	9202      	str	r2, [sp, #8]
 800221a:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800221c:	f8d8 2000 	ldr.w	r2, [r8]
 8002220:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002224:	481a      	ldr	r0, [pc, #104]	@ (8002290 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002226:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8002228:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 800222c:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 800222e:	481a      	ldr	r0, [pc, #104]	@ (8002298 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002230:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8002234:	4819      	ldr	r0, [pc, #100]	@ (800229c <HAL_DSI_EndOfRefreshCallback+0x144>)
 8002236:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 800223a:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800223c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800223e:	f041 0101 	orr.w	r1, r1, #1
 8002242:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002244:	9503      	str	r5, [sp, #12]
 8002246:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 800225e:	f7ff fcad 	bl	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002262:	f7ff ff0d 	bl	8002080 <LCD_ReqEnable>
        return instance;
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8002268:	7035      	strb	r5, [r6, #0]
 800226a:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 800226c:	b134      	cbz	r4, 800227c <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4798      	blx	r3
        isFrontPorchEntered = true;
 8002276:	2301      	movs	r3, #1
 8002278:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 800227c:	b005      	add	sp, #20
 800227e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002282:	bf00      	nop
 8002284:	24009e6c 	.word	0x24009e6c
 8002288:	24009e64 	.word	0x24009e64
 800228c:	01b201e2 	.word	0x01b201e2
 8002290:	50001000 	.word	0x50001000
 8002294:	019201e3 	.word	0x019201e3
 8002298:	01920003 	.word	0x01920003
 800229c:	09c004b3 	.word	0x09c004b3
 80022a0:	019201e2 	.word	0x019201e2
 80022a4:	240253b4 	.word	0x240253b4
 80022a8:	24009e68 	.word	0x24009e68
 80022ac:	24009a2c 	.word	0x24009a2c

080022b0 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 80022b0:	4601      	mov	r1, r0
 80022b2:	b508      	push	{r3, lr}
        return instance;
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <IdleTaskHook+0x14>)
 80022b6:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80022b8:	b101      	cbz	r1, 80022bc <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80022ba:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80022bc:	f00e f98a 	bl	80105d4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80022c0:	2001      	movs	r0, #1
 80022c2:	bd08      	pop	{r3, pc}
 80022c4:	240253b4 	.word	0x240253b4

080022c8 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	4a02      	ldr	r2, [pc, #8]	@ (80022dc <_GLOBAL__sub_I_displayRefreshing+0x14>)
 80022d2:	601a      	str	r2, [r3, #0]

}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	24009e54 	.word	0x24009e54
 80022dc:	080275b8 	.word	0x080275b8

080022e0 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80022e0:	6940      	ldr	r0, [r0, #20]
 80022e2:	4770      	bx	lr

080022e4 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80022e4:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80022e8:	4770      	bx	lr

080022ea <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80022ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80022ec:	b923      	cbnz	r3, 80022f8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80022ee:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80022f0:	3800      	subs	r0, #0
 80022f2:	bf18      	it	ne
 80022f4:	2001      	movne	r0, #1
 80022f6:	4770      	bx	lr
 80022f8:	2001      	movs	r0, #1
}
 80022fa:	4770      	bx	lr

080022fc <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80022fc:	6880      	ldr	r0, [r0, #8]
 80022fe:	4770      	bx	lr

08002300 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002300:	4770      	bx	lr

08002302 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002302:	3004      	adds	r0, #4
{
 8002304:	b510      	push	{r4, lr}
 8002306:	460c      	mov	r4, r1
    *data = videoInfo;
 8002308:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800230a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800230e:	bd10      	pop	{r4, pc}

08002310 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002310:	4770      	bx	lr
	...

08002314 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002314:	b508      	push	{r3, lr}
    assert(0);
 8002316:	4a03      	ldr	r2, [pc, #12]	@ (8002324 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002318:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800231e:	4803      	ldr	r0, [pc, #12]	@ (800232c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002320:	f022 f9b6 	bl	8024690 <__assert_func>
 8002324:	0802599a 	.word	0x0802599a
 8002328:	08027288 	.word	0x08027288
 800232c:	080259f5 	.word	0x080259f5

08002330 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002330:	b510      	push	{r4, lr}
 8002332:	4604      	mov	r4, r0
 8002334:	2148      	movs	r1, #72	@ 0x48
 8002336:	f021 fe32 	bl	8023f9e <_ZdlPvj>
 800233a:	4620      	mov	r0, r4
 800233c:	bd10      	pop	{r4, pc}
	...

08002340 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002340:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002344:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 8002346:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002348:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	63c2      	str	r2, [r0, #60]	@ 0x3c
 800234e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002352:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002356:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800235a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800235e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002362:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002366:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800236a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800236e:	2001      	movs	r0, #1
 8002370:	f00a fda0 	bl	800ceb4 <osSemaphoreNew>
 8002374:	4b02      	ldr	r3, [pc, #8]	@ (8002380 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002376:	6018      	str	r0, [r3, #0]
}
 8002378:	4620      	mov	r0, r4
 800237a:	bd10      	pop	{r4, pc}
 800237c:	080276e4 	.word	0x080276e4
 8002380:	24009e8c 	.word	0x24009e8c

08002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002384:	b410      	push	{r4}
 8002386:	460c      	mov	r4, r1
 8002388:	4611      	mov	r1, r2
 800238a:	461a      	mov	r2, r3
    if (reader != 0)
 800238c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800238e:	b13b      	cbz	r3, 80023a0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002390:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002392:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002394:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002396:	4420      	add	r0, r4
}
 8002398:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800239c:	f022 bc1c 	b.w	8024bd8 <strncmp>
        src = (const char*)movieData + offset;
 80023a0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80023a2:	e7f8      	b.n	8002396 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80023a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80023a6:	b510      	push	{r4, lr}
    if (reader != 0)
 80023a8:	b173      	cbz	r3, 80023c8 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80023aa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023ac:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80023ae:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023b0:	1853      	adds	r3, r2, r1
 80023b2:	5c52      	ldrb	r2, [r2, r1]
 80023b4:	7898      	ldrb	r0, [r3, #2]
 80023b6:	785c      	ldrb	r4, [r3, #1]
 80023b8:	0400      	lsls	r0, r0, #16
 80023ba:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 80023be:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80023c6:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80023c8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80023ca:	1853      	adds	r3, r2, r1
        val |= d[0];
 80023cc:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80023ce:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80023d0:	7898      	ldrb	r0, [r3, #2]
 80023d2:	0400      	lsls	r0, r0, #16
 80023d4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80023d8:	e7f1      	b.n	80023be <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080023da <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80023da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023dc:	b143      	cbz	r3, 80023f0 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80023de:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80023e0:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80023e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80023e4:	185a      	adds	r2, r3, r1
 80023e6:	5c58      	ldrb	r0, [r3, r1]
 80023e8:	7852      	ldrb	r2, [r2, #1]
 80023ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80023ee:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80023f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80023f2:	185a      	adds	r2, r3, r1
        val |= d[0];
 80023f4:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80023f6:	7853      	ldrb	r3, [r2, #1]
 80023f8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80023fc:	4770      	bx	lr
	...

08002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	4604      	mov	r4, r0
    if (reader != 0)
 8002404:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002406:	460d      	mov	r5, r1
 8002408:	4616      	mov	r6, r2
    if (reader != 0)
 800240a:	b1d8      	cbz	r0, 8002444 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800240c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800240e:	4293      	cmp	r3, r2
 8002410:	d208      	bcs.n	8002424 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002412:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002416:	21a0      	movs	r1, #160	@ 0xa0
 8002418:	480d      	ldr	r0, [pc, #52]	@ (8002450 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800241a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002420:	f022 f936 	bl	8024690 <__assert_func>
        reader->seek(offset);
 8002424:	6803      	ldr	r3, [r0, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800242a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800242c:	4632      	mov	r2, r6
 800242e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4798      	blx	r3
 8002436:	b910      	cbnz	r0, 800243e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002438:	230d      	movs	r3, #13
 800243a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800243e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002440:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002442:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002444:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002446:	4408      	add	r0, r1
 8002448:	e7fb      	b.n	8002442 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800244a:	bf00      	nop
 800244c:	08025a69 	.word	0x08025a69
 8002450:	080259f5 	.word	0x080259f5
 8002454:	08025a56 	.word	0x08025a56

08002458 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800245c:	6943      	ldr	r3, [r0, #20]
{
 800245e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002460:	b92b      	cbnz	r3, 800246e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002464:	21e6      	movs	r1, #230	@ 0xe6
 8002466:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002468:	4822      	ldr	r0, [pc, #136]	@ (80024f4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800246a:	f022 f911 	bl	8024690 <__assert_func>
    readData(currentMovieOffset, 8);
 800246e:	2208      	movs	r2, #8
 8002470:	6981      	ldr	r1, [r0, #24]
 8002472:	f7ff ffc5 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002476:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002478:	f243 0630 	movw	r6, #12336	@ 0x3030
 800247c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002480:	3104      	adds	r1, #4
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff ff8e 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002488:	69a3      	ldr	r3, [r4, #24]
 800248a:	4418      	add	r0, r3
 800248c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800248e:	f100 0208 	add.w	r2, r0, #8
 8002492:	429a      	cmp	r2, r3
 8002494:	d306      	bcc.n	80024a4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002496:	2301      	movs	r3, #1
    return false;
 8002498:	2000      	movs	r0, #0
    frameNumber = 1;
 800249a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 800249c:	6a23      	ldr	r3, [r4, #32]
 800249e:	61a3      	str	r3, [r4, #24]
}
 80024a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80024a4:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80024a6:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 80024aa:	2208      	movs	r2, #8
 80024ac:	4620      	mov	r0, r4
        frameNumber++;
 80024ae:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80024b0:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80024b4:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80024b6:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80024b8:	f7ff ffa2 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80024bc:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80024c0:	4620      	mov	r0, r4
 80024c2:	4649      	mov	r1, r9
 80024c4:	f7ff ff89 	bl	80023da <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024c8:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80024cc:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff ff83 	bl	80023da <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80024d4:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024d8:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff ff62 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80024e0:	45b0      	cmp	r8, r6
 80024e2:	d1d1      	bne.n	8002488 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80024e4:	42bd      	cmp	r5, r7
 80024e6:	d1cf      	bne.n	8002488 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80024e8:	2001      	movs	r0, #1
 80024ea:	e7d9      	b.n	80024a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80024ec:	08025aab 	.word	0x08025aab
 80024f0:	08025af4 	.word	0x08025af4
 80024f4:	080259f5 	.word	0x080259f5

080024f8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80024f8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80024fa:	6803      	ldr	r3, [r0, #0]
 80024fc:	bf38      	it	cc
 80024fe:	2101      	movcc	r1, #1
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002502:	b570      	push	{r4, r5, r6, lr}
 8002504:	460d      	mov	r5, r1
 8002506:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002508:	4798      	blx	r3
 800250a:	42a8      	cmp	r0, r5
 800250c:	d204      	bcs.n	8002518 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	4620      	mov	r0, r4
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	4798      	blx	r3
 8002516:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002518:	1e6b      	subs	r3, r5, #1
 800251a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800251c:	2210      	movs	r2, #16
 800251e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002520:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002524:	f106 0108 	add.w	r1, r6, #8
 8002528:	f7ff ff6a 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800252c:	f106 0110 	add.w	r1, r6, #16
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff ff37 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002536:	6a23      	ldr	r3, [r4, #32]
 8002538:	3b04      	subs	r3, #4
 800253a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800253c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002540:	bd70      	pop	{r4, r5, r6, pc}
	...

08002544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002544:	2100      	movs	r1, #0
    readData(0, 72);
 8002546:	2248      	movs	r2, #72	@ 0x48
{
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254c:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800254e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002550:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002554:	f7ff ff54 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002558:	69a6      	ldr	r6, [r4, #24]
 800255a:	2304      	movs	r3, #4
 800255c:	4a63      	ldr	r2, [pc, #396]	@ (80026ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800255e:	4631      	mov	r1, r6
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff0f 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002566:	b148      	cbz	r0, 800257c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002568:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800256a:	4a61      	ldr	r2, [pc, #388]	@ (80026f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800256c:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002570:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002574:	4b5f      	ldr	r3, [pc, #380]	@ (80026f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002576:	4860      	ldr	r0, [pc, #384]	@ (80026f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002578:	f022 f88a 	bl	8024690 <__assert_func>
    currentMovieOffset += 8;
 800257c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002580:	2304      	movs	r3, #4
 8002582:	4a5e      	ldr	r2, [pc, #376]	@ (80026fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002584:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002586:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002588:	f7ff fefc 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800258c:	b138      	cbz	r0, 800259e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800258e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002590:	4a57      	ldr	r2, [pc, #348]	@ (80026f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002592:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002596:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800259a:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800259c:	e7eb      	b.n	8002576 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800259e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80025a2:	2304      	movs	r3, #4
 80025a4:	4a57      	ldr	r2, [pc, #348]	@ (8002704 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80025a6:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80025a8:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80025aa:	f7ff feeb 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80025ae:	4607      	mov	r7, r0
 80025b0:	b138      	cbz	r0, 80025c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80025b2:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80025b4:	4a4e      	ldr	r2, [pc, #312]	@ (80026f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80025b6:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80025ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80025be:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80025c0:	e7d9      	b.n	8002576 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80025c2:	f106 0110 	add.w	r1, r6, #16
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff feec 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80025cc:	4605      	mov	r5, r0
 80025ce:	b920      	cbnz	r0, 80025da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80025d0:	4b4e      	ldr	r3, [pc, #312]	@ (800270c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80025d2:	f240 1143 	movw	r1, #323	@ 0x143
 80025d6:	4a46      	ldr	r2, [pc, #280]	@ (80026f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80025d8:	e7cd      	b.n	8002576 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80025da:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80025de:	2304      	movs	r3, #4
 80025e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002710 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80025e2:	4620      	mov	r0, r4
 80025e4:	4641      	mov	r1, r8
 80025e6:	f7ff fecd 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d049      	beq.n	8002682 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80025ee:	2306      	movs	r3, #6
 80025f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80025f4:	2304      	movs	r3, #4
 80025f6:	4a47      	ldr	r2, [pc, #284]	@ (8002714 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80025f8:	f106 0118 	add.w	r1, r6, #24
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7ff fec1 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002602:	2800      	cmp	r0, #0
 8002604:	d03f      	beq.n	8002686 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002606:	2307      	movs	r3, #7
 8002608:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800260c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800260e:	4f42      	ldr	r7, [pc, #264]	@ (8002718 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002610:	220c      	movs	r2, #12
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7ff fef3 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800261a:	f105 0608 	add.w	r6, r5, #8
 800261e:	2304      	movs	r3, #4
 8002620:	463a      	mov	r2, r7
 8002622:	4620      	mov	r0, r4
 8002624:	4631      	mov	r1, r6
 8002626:	f7ff fead 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800262a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800262e:	2800      	cmp	r0, #0
 8002630:	d048      	beq.n	80026c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d148      	bne.n	80026c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002636:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002638:	42ab      	cmp	r3, r5
 800263a:	d849      	bhi.n	80026d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800263c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002640:	3504      	adds	r5, #4
 8002642:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002644:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002646:	4629      	mov	r1, r5
 8002648:	f7ff feac 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800264c:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800264e:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002650:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fea6 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002658:	4406      	add	r6, r0
    readData(listOffset, 4);
 800265a:	2204      	movs	r2, #4
 800265c:	4620      	mov	r0, r4
 800265e:	4631      	mov	r1, r6
 8002660:	f7ff fece 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002664:	2304      	movs	r3, #4
 8002666:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002668:	4631      	mov	r1, r6
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff fe8a 	bl	8002384 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002670:	2800      	cmp	r0, #0
 8002672:	d138      	bne.n	80026e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002674:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002676:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002678:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800267a:	69a3      	ldr	r3, [r4, #24]
 800267c:	6223      	str	r3, [r4, #32]
}
 800267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002682:	2701      	movs	r7, #1
 8002684:	e7b6      	b.n	80025f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002686:	2f00      	cmp	r7, #0
 8002688:	d0c0      	beq.n	800260c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800268a:	f106 0120 	add.w	r1, r6, #32
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff fe88 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002698:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800269c:	fbb0 f0f3 	udiv	r0, r0, r3
 80026a0:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff fe7e 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80026a8:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80026ac:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7ff fe78 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80026b4:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80026b8:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fe72 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026c0:	6120      	str	r0, [r4, #16]
 80026c2:	e7a3      	b.n	800260c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0b9      	beq.n	800263c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80026c8:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80026ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80026ce:	e7d6      	b.n	800267e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80026d0:	1d29      	adds	r1, r5, #4
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fe66 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80026d8:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80026da:	220c      	movs	r2, #12
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7ff fe8e 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80026e4:	e799      	b.n	800261a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80026e6:	230b      	movs	r3, #11
 80026e8:	e7ef      	b.n	80026ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80026ea:	bf00      	nop
 80026ec:	08025b27 	.word	0x08025b27
 80026f0:	08025b45 	.word	0x08025b45
 80026f4:	08025b2c 	.word	0x08025b2c
 80026f8:	080259f5 	.word	0x080259f5
 80026fc:	08025b72 	.word	0x08025b72
 8002700:	08025b77 	.word	0x08025b77
 8002704:	08025b8f 	.word	0x08025b8f
 8002708:	08025b94 	.word	0x08025b94
 800270c:	08025baa 	.word	0x08025baa
 8002710:	08025bb6 	.word	0x08025bb6
 8002714:	08025bbb 	.word	0x08025bbb
 8002718:	08025bc0 	.word	0x08025bc0
 800271c:	08025bc5 	.word	0x08025bc5

08002720 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002720:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002724:	2200      	movs	r2, #0
 8002726:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002728:	f7ff bf0c 	b.w	8002544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800272c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800272c:	b510      	push	{r4, lr}
    movieData = 0;
 800272e:	2300      	movs	r3, #0
{
 8002730:	4604      	mov	r4, r0
 8002732:	4608      	mov	r0, r1
    movieData = 0;
 8002734:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002736:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002738:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4798      	blx	r3
 800273e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002740:	4620      	mov	r0, r4
}
 8002742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002746:	f7ff befd 	b.w	8002544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

0800274c <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 800274c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <JPEG_Decode_DMA+0x50>)
 8002750:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002752:	4d13      	ldr	r5, [pc, #76]	@ (80027a0 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 8002754:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <JPEG_Decode_DMA+0x58>)
 8002758:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 800275c:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 800275e:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <JPEG_Decode_DMA+0x60>)
 8002762:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <JPEG_Decode_DMA+0x64>)
 8002766:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002768:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <JPEG_Decode_DMA+0x68>)
 800276a:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800276c:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800276e:	682a      	ldr	r2, [r5, #0]
 8002770:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002774:	701c      	strb	r4, [r3, #0]
 8002776:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002778:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800277c:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002780:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002784:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <JPEG_Decode_DMA+0x70>)
 8002786:	68d2      	ldr	r2, [r2, #12]
 8002788:	436a      	muls	r2, r5
 800278a:	9200      	str	r2, [sp, #0]
 800278c:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f006 feed 	bl	8009570 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002796:	4620      	mov	r0, r4
 8002798:	b003      	add	sp, #12
 800279a:	bd30      	pop	{r4, r5, pc}
 800279c:	24009ea4 	.word	0x24009ea4
 80027a0:	24009e94 	.word	0x24009e94
 80027a4:	24009e88 	.word	0x24009e88
 80027a8:	24009eb4 	.word	0x24009eb4
 80027ac:	24009eac 	.word	0x24009eac
 80027b0:	24009eb0 	.word	0x24009eb0
 80027b4:	24009e90 	.word	0x24009e90
 80027b8:	24000010 	.word	0x24000010
 80027bc:	24009e70 	.word	0x24009e70

080027c0 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80027c0:	684b      	ldr	r3, [r1, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d115      	bne.n	80027f2 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 80027c6:	68cb      	ldr	r3, [r1, #12]
 80027c8:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80027ca:	bf1e      	ittt	ne
 80027cc:	f023 030f 	bicne.w	r3, r3, #15
 80027d0:	3310      	addne	r3, #16
 80027d2:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 80027d4:	688b      	ldr	r3, [r1, #8]
 80027d6:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80027d8:	bf1e      	ittt	ne
 80027da:	f023 030f 	bicne.w	r3, r3, #15
 80027de:	3310      	addne	r3, #16
 80027e0:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80027e2:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80027e4:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80027e6:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80027e8:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80027ea:	4353      	muls	r3, r2
 80027ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_JPEG_InfoReadyCallback+0x68>)
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d10e      	bne.n	8002814 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80027f6:	68cb      	ldr	r3, [r1, #12]
 80027f8:	071a      	lsls	r2, r3, #28
 80027fa:	d003      	beq.n	8002804 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80027fc:	f023 030f 	bic.w	r3, r3, #15
 8002800:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002802:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002804:	688b      	ldr	r3, [r1, #8]
 8002806:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002808:	bf1e      	ittt	ne
 800280a:	f023 0307 	bicne.w	r3, r3, #7
 800280e:	3308      	addne	r3, #8
 8002810:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002812:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1fc      	bne.n	8002812 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002818:	68cb      	ldr	r3, [r1, #12]
 800281a:	0758      	lsls	r0, r3, #29
 800281c:	d0f2      	beq.n	8002804 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	3308      	adds	r3, #8
 8002824:	e7ed      	b.n	8002802 <HAL_JPEG_InfoReadyCallback+0x42>
 8002826:	bf00      	nop
 8002828:	24009e9c 	.word	0x24009e9c

0800282c <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 800282c:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <HAL_JPEG_GetDataCallback+0x30>)
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	440b      	add	r3, r1
    {
 8002832:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002834:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002836:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <HAL_JPEG_GetDataCallback+0x34>)
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	4293      	cmp	r3, r2
 800283c:	d20c      	bcs.n	8002858 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800283e:	4c09      	ldr	r4, [pc, #36]	@ (8002864 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002840:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002842:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002844:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002848:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800284a:	bf28      	it	cs
 800284c:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002850:	6021      	str	r1, [r4, #0]
        }
    }
 8002852:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002854:	f006 beee 	b.w	8009634 <HAL_JPEG_ConfigInputBuffer>
    }
 8002858:	bc30      	pop	{r4, r5}
 800285a:	4770      	bx	lr
 800285c:	24009eb4 	.word	0x24009eb4
 8002860:	24009eb0 	.word	0x24009eb0
 8002864:	24009eac 	.word	0x24009eac

08002868 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800286a:	4c20      	ldr	r4, [pc, #128]	@ (80028ec <HAL_JPEG_DataReadyCallback+0x84>)
 800286c:	2101      	movs	r1, #1
 800286e:	4d20      	ldr	r5, [pc, #128]	@ (80028f0 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002870:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002872:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002874:	4f1f      	ldr	r7, [pc, #124]	@ (80028f4 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002880:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HAL_JPEG_DataReadyCallback+0x90>)
 8002884:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002886:	6822      	ldr	r2, [r4, #0]
 8002888:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800288c:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	440a      	add	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d901      	bls.n	80028a6 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	5ceb      	ldrb	r3, [r5, r3]
 80028ac:	b133      	cbz	r3, 80028bc <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80028ae:	2102      	movs	r1, #2
 80028b0:	4630      	mov	r0, r6
 80028b2:	f006 fe91 	bl	80095d8 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_JPEG_DataReadyCallback+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	4630      	mov	r0, r6
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 80028c6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028ca:	6869      	ldr	r1, [r5, #4]
 80028cc:	435a      	muls	r2, r3
 80028ce:	f006 feb4 	bl	800963a <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_JPEG_DataReadyCallback+0x98>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	7a1a      	ldrb	r2, [r3, #8]
 80028d8:	b93a      	cbnz	r2, 80028ea <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 80028da:	7a9b      	ldrb	r3, [r3, #10]
 80028dc:	b92b      	cbnz	r3, 80028ea <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HAL_JPEG_DataReadyCallback+0x9c>)
 80028e0:	6818      	ldr	r0, [r3, #0]
        }
    }
 80028e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 80028e6:	f00a bb5b 	b.w	800cfa0 <osSemaphoreRelease>
    }
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ec:	24009e94 	.word	0x24009e94
 80028f0:	24000010 	.word	0x24000010
 80028f4:	24009e70 	.word	0x24009e70
 80028f8:	24009e90 	.word	0x24009e90
 80028fc:	24009ea4 	.word	0x24009ea4
 8002900:	24009e98 	.word	0x24009e98
 8002904:	24009e8c 	.word	0x24009e8c

08002908 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 800290a:	e7fe      	b.n	800290a <HAL_JPEG_ErrorCallback+0x2>

0800290c <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 800290c:	4b01      	ldr	r3, [pc, #4]	@ (8002914 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
    }
 8002912:	4770      	bx	lr
 8002914:	24009ea8 	.word	0x24009ea8

08002918 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002918:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 800291a:	4d16      	ldr	r5, [pc, #88]	@ (8002974 <JPEG_OutputHandler+0x5c>)
{
 800291c:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 800291e:	682b      	ldr	r3, [r5, #0]
 8002920:	b113      	cbz	r3, 8002928 <JPEG_OutputHandler+0x10>
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <JPEG_OutputHandler+0x60>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	bb1b      	cbnz	r3, 8002970 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002928:	4b14      	ldr	r3, [pc, #80]	@ (800297c <JPEG_OutputHandler+0x64>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	7a03      	ldrb	r3, [r0, #8]
 800292e:	b963      	cbnz	r3, 800294a <JPEG_OutputHandler+0x32>
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <JPEG_OutputHandler+0x68>)
 8002932:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <JPEG_OutputHandler+0x6c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <JPEG_OutputHandler+0x32>
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <JPEG_OutputHandler+0x60>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b913      	cbnz	r3, 800294a <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 800294a:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <JPEG_OutputHandler+0x70>)
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10c      	bne.n	800296c <JPEG_OutputHandler+0x54>
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <JPEG_OutputHandler+0x74>)
 8002954:	490b      	ldr	r1, [pc, #44]	@ (8002984 <JPEG_OutputHandler+0x6c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	b933      	cbnz	r3, 800296c <JPEG_OutputHandler+0x54>
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	b923      	cbnz	r3, 800296c <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002962:	2102      	movs	r1, #2
 8002964:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002966:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002968:	f007 f893 	bl	8009a92 <HAL_JPEG_Resume>
        return 1;
 800296c:	2002      	movs	r0, #2
    }

    return 2;
}
 800296e:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002970:	2001      	movs	r0, #1
 8002972:	e7fc      	b.n	800296e <JPEG_OutputHandler+0x56>
 8002974:	24009ea8 	.word	0x24009ea8
 8002978:	24009e84 	.word	0x24009e84
 800297c:	24009e98 	.word	0x24009e98
 8002980:	24009e88 	.word	0x24009e88
 8002984:	24000010 	.word	0x24000010
 8002988:	24009ea4 	.word	0x24009ea4
 800298c:	24009e94 	.word	0x24009e94

08002990 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4605      	mov	r5, r0
    if (length == 0)
 8002994:	2a00      	cmp	r2, #0
 8002996:	d037      	beq.n	8002a08 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002998:	2b00      	cmp	r3, #0
 800299a:	d035      	beq.n	8002a08 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 800299c:	481b      	ldr	r0, [pc, #108]	@ (8002a0c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 800299e:	2403      	movs	r4, #3
 80029a0:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80029a2:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80029a4:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80029a6:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80029aa:	bf18      	it	ne
 80029ac:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80029b0:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80029b2:	bf18      	it	ne
 80029b4:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80029b6:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 80029b8:	0924      	lsrs	r4, r4, #4
 80029ba:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80029bc:	692c      	ldr	r4, [r5, #16]
 80029be:	f014 040f 	ands.w	r4, r4, #15
 80029c2:	bf18      	it	ne
 80029c4:	f1c4 0410 	rsbne	r4, r4, #16
 80029c8:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 80029ca:	4811      	ldr	r0, [pc, #68]	@ (8002a10 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80029cc:	4c11      	ldr	r4, [pc, #68]	@ (8002a14 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 80029ce:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80029d0:	4811      	ldr	r0, [pc, #68]	@ (8002a18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 80029d2:	f7ff febb 	bl	800274c <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 80029d6:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80029d8:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80029da:	4d0f      	ldr	r5, [pc, #60]	@ (8002a18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 80029dc:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff ff9a 	bl	8002918 <JPEG_OutputHandler>
 80029e4:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d105      	bne.n	80029f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 80029ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 80029ee:	f04f 31ff 	mov.w	r1, #4294967295
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	f00a faa8 	bl	800cf48 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d1ef      	bne.n	80029de <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	4a08      	ldr	r2, [pc, #32]	@ (8002a24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002a02:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002a04:	4a08      	ldr	r2, [pc, #32]	@ (8002a28 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	bf00      	nop
 8002a0c:	24009e70 	.word	0x24009e70
 8002a10:	24009eb8 	.word	0x24009eb8
 8002a14:	24009ea0 	.word	0x24009ea0
 8002a18:	24009bac 	.word	0x24009bac
 8002a1c:	24009e98 	.word	0x24009e98
 8002a20:	24009e8c 	.word	0x24009e8c
 8002a24:	24009ea8 	.word	0x24009ea8
 8002a28:	24009e84 	.word	0x24009e84

08002a2c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a30:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002a32:	6943      	ldr	r3, [r0, #20]
{
 8002a34:	b085      	sub	sp, #20
 8002a36:	4604      	mov	r4, r0
 8002a38:	460f      	mov	r7, r1
 8002a3a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002a3c:	b92b      	cbnz	r3, 8002a4a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002a3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002a40:	21b2      	movs	r1, #178	@ 0xb2
 8002a42:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002a44:	4829      	ldr	r0, [pc, #164]	@ (8002aec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002a46:	f021 fe23 	bl	8024690 <__assert_func>
    readData(currentMovieOffset, 8);
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	6981      	ldr	r1, [r0, #24]
 8002a4e:	f7ff fcd7 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002a52:	69a6      	ldr	r6, [r4, #24]
 8002a54:	4620      	mov	r0, r4
 8002a56:	4631      	mov	r1, r6
 8002a58:	f7ff fcbf 	bl	80023da <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002a5c:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002a5e:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff fcba 	bl	80023da <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002a66:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002a68:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff fc9a 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002a70:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002a74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002a76:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002a78:	180a      	adds	r2, r1, r0
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d226      	bcs.n	8002acc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002a7e:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002a82:	459b      	cmp	fp, r3
 8002a84:	d117      	bne.n	8002ab6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002a86:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002a8a:	459a      	cmp	sl, r3
 8002a8c:	d113      	bne.n	8002ab6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002a8e:	b190      	cbz	r0, 8002ab6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a90:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002a92:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fcb3 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a9c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002a9e:	462a      	mov	r2, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f8cd 8000 	str.w	r8, [sp]
 8002aa6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002aaa:	463b      	mov	r3, r7
 8002aac:	f7ff ff70 	bl	8002990 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002ab0:	6963      	ldr	r3, [r4, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002ab6:	69a3      	ldr	r3, [r4, #24]
 8002ab8:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002aba:	b905      	cbnz	r5, 8002abe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002abc:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002abe:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002ac0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002ac6:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002ac8:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002aca:	d109      	bne.n	8002ae0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002acc:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002ace:	2001      	movs	r0, #1
        frameNumber = 1;
 8002ad0:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002ad2:	6a23      	ldr	r3, [r4, #32]
 8002ad4:	61a3      	str	r3, [r4, #24]
}
 8002ad6:	f080 0001 	eor.w	r0, r0, #1
 8002ada:	b005      	add	sp, #20
 8002adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e7f8      	b.n	8002ad6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002ae4:	08025aab 	.word	0x08025aab
 8002ae8:	08025bca 	.word	0x08025bca
 8002aec:	080259f5 	.word	0x080259f5

08002af0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002af4:	6981      	ldr	r1, [r0, #24]
{
 8002af6:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002af8:	2208      	movs	r2, #8
 8002afa:	f7ff fc81 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002afe:	69a7      	ldr	r7, [r4, #24]
 8002b00:	4620      	mov	r0, r4
 8002b02:	1d39      	adds	r1, r7, #4
 8002b04:	f7ff fc4e 	bl	80023a4 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002b08:	f107 0108 	add.w	r1, r7, #8
 8002b0c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002b0e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fc75 	bl	8002400 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002b16:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002b18:	b16e      	cbz	r6, 8002b36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002b1a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b1c:	4c07      	ldr	r4, [pc, #28]	@ (8002b3c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002b1e:	4d08      	ldr	r5, [pc, #32]	@ (8002b40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002b20:	4633      	mov	r3, r6
 8002b22:	4807      	ldr	r0, [pc, #28]	@ (8002b40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002b24:	f7ff fe12 	bl	800274c <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f7ff fef5 	bl	8002918 <JPEG_OutputHandler>
 8002b2e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f8      	beq.n	8002b28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002b36:	2001      	movs	r0, #1
 8002b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24009ea0 	.word	0x24009ea0
 8002b40:	24009bac 	.word	0x24009bac

08002b44 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002b46:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002b48:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002b4a:	4c15      	ldr	r4, [pc, #84]	@ (8002ba0 <DMA2D_CopyBuffer+0x5c>)
 8002b4c:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002b4e:	4e15      	ldr	r6, [pc, #84]	@ (8002ba4 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002b56:	6863      	ldr	r3, [r4, #4]
 8002b58:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002b5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <DMA2D_CopyBuffer+0x64>)
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002b5e:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002b60:	68e2      	ldr	r2, [r4, #12]
 8002b62:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002b64:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002b66:	1ab6      	subs	r6, r6, r2
 8002b68:	42b7      	cmp	r7, r6
 8002b6a:	d315      	bcc.n	8002b98 <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002b6c:	68a4      	ldr	r4, [r4, #8]
 8002b6e:	f1c4 0410 	rsb	r4, r4, #16
 8002b72:	432c      	orrs	r4, r5
 8002b74:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002b76:	4c0d      	ldr	r4, [pc, #52]	@ (8002bac <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002b78:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002b7c:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002b7e:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002b80:	4421      	add	r1, r4
 8002b82:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <DMA2D_CopyBuffer+0x6c>)
 8002b8c:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002b8e:	6842      	ldr	r2, [r0, #4]
 8002b90:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002b92:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <DMA2D_CopyBuffer+0x70>)
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002b98:	f045 0510 	orr.w	r5, r5, #16
 8002b9c:	645d      	str	r5, [r3, #68]	@ 0x44
 8002b9e:	e7ea      	b.n	8002b76 <DMA2D_CopyBuffer+0x32>
 8002ba0:	24009e70 	.word	0x24009e70
 8002ba4:	24009e9c 	.word	0x24009e9c
 8002ba8:	52001000 	.word	0x52001000
 8002bac:	24009eb8 	.word	0x24009eb8
 8002bb0:	ff09000b 	.word	0xff09000b
 8002bb4:	00012301 	.word	0x00012301

08002bb8 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002bbe:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002bc0:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002bc2:	3101      	adds	r1, #1
 8002bc4:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	2901      	cmp	r1, #1
 8002bca:	d900      	bls.n	8002bce <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002bcc:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <DMA2D_ExternalJobCompleted+0x38>)
 8002bd0:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <DMA2D_ExternalJobCompleted+0x3c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	68c2      	ldr	r2, [r0, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <DMA2D_ExternalJobCompleted+0x40>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <DMA2D_ExternalJobCompleted+0x44>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	f00a b9da 	b.w	800cfa0 <osSemaphoreRelease>
 8002bec:	24009e88 	.word	0x24009e88
 8002bf0:	24009e9c 	.word	0x24009e9c
 8002bf4:	24009e70 	.word	0x24009e70
 8002bf8:	24009e84 	.word	0x24009e84
 8002bfc:	24009e8c 	.word	0x24009e8c

08002c00 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002c00:	2101      	movs	r1, #1
 8002c02:	2200      	movs	r2, #0
{
 8002c04:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002c06:	4608      	mov	r0, r1
 8002c08:	f00a f954 	bl	800ceb4 <osSemaphoreNew>
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002c0e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002c10:	b928      	cbnz	r0, 8002c1e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002c12:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002c14:	2128      	movs	r1, #40	@ 0x28
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002c18:	480a      	ldr	r0, [pc, #40]	@ (8002c44 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002c1a:	f021 fd39 	bl	8024690 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2104      	movs	r1, #4
 8002c22:	2001      	movs	r0, #1
 8002c24:	f00a f9ee 	bl	800d004 <osMessageQueueNew>
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002c2a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002c2c:	b918      	cbnz	r0, 8002c36 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002c30:	212c      	movs	r1, #44	@ 0x2c
 8002c32:	4a03      	ldr	r2, [pc, #12]	@ (8002c40 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002c34:	e7f0      	b.n	8002c18 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002c36:	bd08      	pop	{r3, pc}
 8002c38:	24009ec0 	.word	0x24009ec0
 8002c3c:	08025c25 	.word	0x08025c25
 8002c40:	08025c6e 	.word	0x08025c6e
 8002c44:	08025c9d 	.word	0x08025c9d
 8002c48:	24009ebc 	.word	0x24009ebc
 8002c4c:	08025cf4 	.word	0x08025cf4

08002c50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002c50:	4b02      	ldr	r3, [pc, #8]	@ (8002c5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002c52:	f04f 31ff 	mov.w	r1, #4294967295
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	f00a b976 	b.w	800cf48 <osSemaphoreAcquire>
 8002c5c:	24009ec0 	.word	0x24009ec0

08002c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002c60:	4b01      	ldr	r3, [pc, #4]	@ (8002c68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f00a b99c 	b.w	800cfa0 <osSemaphoreRelease>
 8002c68:	24009ec0 	.word	0x24009ec0

08002c6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002c6c:	4b02      	ldr	r3, [pc, #8]	@ (8002c78 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002c6e:	2100      	movs	r1, #0
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	f00a b969 	b.w	800cf48 <osSemaphoreAcquire>
 8002c76:	bf00      	nop
 8002c78:	24009ec0 	.word	0x24009ec0

08002c7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002c7c:	f7ff bff0 	b.w	8002c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002c80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002c80:	2300      	movs	r3, #0
 8002c82:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002c86:	461a      	mov	r2, r3
 8002c88:	6800      	ldr	r0, [r0, #0]
 8002c8a:	f00a b9f6 	b.w	800d07a <osMessageQueuePut>
 8002c8e:	bf00      	nop
 8002c90:	24009ebc 	.word	0x24009ebc
 8002c94:	24000030 	.word	0x24000030

08002c98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002c98:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	4c07      	ldr	r4, [pc, #28]	@ (8002cbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002c9e:	a901      	add	r1, sp, #4
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6820      	ldr	r0, [r4, #0]
 8002ca4:	f00a fa1a 	bl	800d0dc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	2200      	movs	r2, #0
 8002cae:	a901      	add	r1, sp, #4
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	f00a fa13 	bl	800d0dc <osMessageQueueGet>
}
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	bf00      	nop
 8002cbc:	24009ebc 	.word	0x24009ebc

08002cc0 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	4718      	bx	r3

08002cc6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	4770      	bx	lr

08002cca <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002cca:	e7fe      	b.n	8002cca <DMA2D_XferErrorCallback>

08002ccc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002ccc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002cd0:	4770      	bx	lr
	...

08002cd4 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002ce0:	f00a f8a6 	bl	800ce30 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002ce4:	6860      	ldr	r0, [r4, #4]
 8002ce6:	6803      	ldr	r3, [r0, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4798      	blx	r3
 8002cec:	b978      	cbnz	r0, 8002d0e <_ZN8STM32DMA5startEv+0x3a>
 8002cee:	7a63      	ldrb	r3, [r4, #9]
 8002cf0:	b16b      	cbz	r3, 8002d0e <_ZN8STM32DMA5startEv+0x3a>
 8002cf2:	7a23      	ldrb	r3, [r4, #8]
 8002cf4:	b95b      	cbnz	r3, 8002d0e <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002cf6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002d02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002d0a:	f00a b8b4 	b.w	800ce76 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002d0e:	490b      	ldr	r1, [pc, #44]	@ (8002d3c <_ZN8STM32DMA5startEv+0x68>)
 8002d10:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <_ZN8STM32DMA5startEv+0x6c>)
 8002d12:	680b      	ldr	r3, [r1, #0]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1f2      	bne.n	8002d02 <_ZN8STM32DMA5startEv+0x2e>
 8002d1c:	7a20      	ldrb	r0, [r4, #8]
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d1ef      	bne.n	8002d02 <_ZN8STM32DMA5startEv+0x2e>
 8002d22:	7aa0      	ldrb	r0, [r4, #10]
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1ec      	bne.n	8002d02 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d28:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002d2a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d2e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002d32:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d34:	f7ff ff06 	bl	8002b44 <DMA2D_CopyBuffer>
    }
 8002d38:	e7e3      	b.n	8002d02 <_ZN8STM32DMA5startEv+0x2e>
 8002d3a:	bf00      	nop
 8002d3c:	24009e88 	.word	0x24009e88
 8002d40:	24000010 	.word	0x24000010

08002d44 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d4a:	6003      	str	r3, [r0, #0]
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <_ZN8STM32DMAD1Ev+0x1c>)
 8002d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d56:	f3bf 8f6f 	isb	sy
}
 8002d5a:	4770      	bx	lr
 8002d5c:	08027728 	.word	0x08027728
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002d64:	b510      	push	{r4, lr}
 8002d66:	4604      	mov	r4, r0
}
 8002d68:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002d6c:	f7ff ffea 	bl	8002d44 <_ZN8STM32DMAD1Ev>
 8002d70:	4620      	mov	r0, r4
 8002d72:	f021 f914 	bl	8023f9e <_ZdlPvj>
 8002d76:	4620      	mov	r0, r4
 8002d78:	bd10      	pop	{r4, pc}
	...

08002d7c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d7c:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002d7e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d80:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002d84:	f042 0210 	orr.w	r2, r2, #16
 8002d88:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002d8c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002d90:	f002 0210 	and.w	r2, r2, #16
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002d98:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002d9a:	f042 0210 	orr.w	r2, r2, #16
 8002d9e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002da0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002da2:	f022 0210 	bic.w	r2, r2, #16
 8002da6:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <_ZN8STM32DMA10initializeEv+0x48>)
 8002daa:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002dac:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <_ZN8STM32DMA10initializeEv+0x50>)
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002db4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	b002      	add	sp, #8
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	24009c20 	.word	0x24009c20
 8002dc8:	08003019 	.word	0x08003019
 8002dcc:	08002ccb 	.word	0x08002ccb
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002dd4:	b508      	push	{r3, lr}
    switch (format)
 8002dd6:	280a      	cmp	r0, #10
 8002dd8:	d809      	bhi.n	8002dee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002dda:	e8df f000 	tbb	[pc, r0]
 8002dde:	1006      	.short	0x1006
 8002de0:	0808080e 	.word	0x0808080e
 8002de4:	10101008 	.word	0x10101008
 8002de8:	10          	.byte	0x10
 8002de9:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002dea:	2002      	movs	r0, #2
}
 8002dec:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002df0:	2191      	movs	r1, #145	@ 0x91
 8002df2:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002df4:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002df6:	f021 fc4b 	bl	8024690 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	e7f6      	b.n	8002dec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002dfe:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002e00:	e7f4      	b.n	8002dec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002e02:	bf00      	nop
 8002e04:	08025d36 	.word	0x08025d36
 8002e08:	08025d51 	.word	0x08025d51
 8002e0c:	08025d9c 	.word	0x08025d9c

08002e10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002e14:	7f88      	ldrb	r0, [r1, #30]
 8002e16:	f7ff ffdd 	bl	8002dd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e1c:	8aa5      	ldrh	r5, [r4, #20]
 8002e1e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002e20:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e22:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e26:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e2a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e2c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e2e:	1b52      	subs	r2, r2, r5
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002e32:	6825      	ldr	r5, [r4, #0]
 8002e34:	2d08      	cmp	r5, #8
 8002e36:	d10e      	bne.n	8002e56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e38:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e3a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e3c:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002e40:	7f20      	ldrb	r0, [r4, #28]
 8002e42:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002e46:	61da      	str	r2, [r3, #28]
        return color;
 8002e48:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e4a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e4e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e50:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002e52:	601a      	str	r2, [r3, #0]
    }
}
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002e56:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002e58:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002e60:	4a03      	ldr	r2, [pc, #12]	@ (8002e70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002e62:	e7f6      	b.n	8002e52 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002e64:	52001000 	.word	0x52001000
 8002e68:	00010009 	.word	0x00010009
 8002e6c:	00022301 	.word	0x00022301
 8002e70:	00032301 	.word	0x00032301

08002e74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002e74:	b508      	push	{r3, lr}
    switch (format)
 8002e76:	280b      	cmp	r0, #11
 8002e78:	d80b      	bhi.n	8002e92 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002e7a:	e8df f000 	tbb	[pc, r0]
 8002e7e:	1206      	.short	0x1206
 8002e80:	0a0a0a10 	.word	0x0a0a0a10
 8002e84:	0808080a 	.word	0x0808080a
 8002e88:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002e8a:	2002      	movs	r0, #2
}
 8002e8c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002e8e:	2005      	movs	r0, #5
        break;
 8002e90:	e7fc      	b.n	8002e8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002e94:	2170      	movs	r1, #112	@ 0x70
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002e98:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002e9a:	f021 fbf9 	bl	8024690 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e7f4      	b.n	8002e8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002ea2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002ea4:	e7f2      	b.n	8002e8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002ea6:	bf00      	nop
 8002ea8:	08025d36 	.word	0x08025d36
 8002eac:	08025df1 	.word	0x08025df1
 8002eb0:	08025d9c 	.word	0x08025d9c

08002eb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002eb8:	7f4f      	ldrb	r7, [r1, #29]
{
 8002eba:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	f7ff ffd9 	bl	8002e74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ec2:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002ec6:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f7ff ffd3 	bl	8002e74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002ece:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f7ff ff7f 	bl	8002dd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ed6:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002eda:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002ede:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ee2:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002ee4:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002ee6:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ee8:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002eea:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002eec:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002eee:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ef2:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ef4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ef8:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002efe:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f02:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002f04:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002f06:	f8d9 4000 	ldr.w	r4, [r9]
 8002f0a:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002f0e:	2c80      	cmp	r4, #128	@ 0x80
 8002f10:	d022      	beq.n	8002f58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002f12:	d80f      	bhi.n	8002f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002f14:	2c20      	cmp	r4, #32
 8002f16:	d066      	beq.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002f18:	2c40      	cmp	r4, #64	@ 0x40
 8002f1a:	d064      	beq.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002f1c:	2c04      	cmp	r4, #4
 8002f1e:	d05c      	beq.n	8002fda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f20:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002f24:	4b34      	ldr	r3, [pc, #208]	@ (8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002f26:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f28:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002f2c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002f2e:	d060      	beq.n	8002ff2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002f30:	4a32      	ldr	r2, [pc, #200]	@ (8002ffc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002f32:	e03f      	b.n	8002fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002f34:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002f38:	d004      	beq.n	8002f44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002f3a:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002f3e:	d1ef      	bne.n	8002f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f40:	482f      	ldr	r0, [pc, #188]	@ (8003000 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002f42:	e000      	b.n	8002f46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f44:	482f      	ldr	r0, [pc, #188]	@ (8003004 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f46:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002f4a:	61da      	str	r2, [r3, #28]
 8002f4c:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002f50:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f52:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f54:	6159      	str	r1, [r3, #20]
 8002f56:	e02c      	b.n	8002fb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f58:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002f5c:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f60:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002f64:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f66:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f68:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002f6a:	1d21      	adds	r1, r4, #4
 8002f6c:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002f6e:	7821      	ldrb	r1, [r4, #0]
 8002f70:	b141      	cbz	r1, 8002f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002f72:	2901      	cmp	r1, #1
 8002f74:	d021      	beq.n	8002fba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002f78:	f240 110b 	movw	r1, #267	@ 0x10b
 8002f7c:	4a23      	ldr	r2, [pc, #140]	@ (800300c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002f7e:	4824      	ldr	r0, [pc, #144]	@ (8003010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002f80:	f021 fb86 	bl	8024690 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	8861      	ldrh	r1, [r4, #2]
 8002f88:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002f8c:	3901      	subs	r1, #1
 8002f8e:	f022 0210 	bic.w	r2, r2, #16
 8002f92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f96:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002f98:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002f9c:	69d9      	ldr	r1, [r3, #28]
 8002f9e:	f041 0120 	orr.w	r1, r1, #32
 8002fa2:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002fa4:	69d9      	ldr	r1, [r3, #28]
 8002fa6:	0689      	lsls	r1, r1, #26
 8002fa8:	d4fc      	bmi.n	8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002faa:	2110      	movs	r1, #16
 8002fac:	6099      	str	r1, [r3, #8]
            if (blend)
 8002fae:	2a00      	cmp	r2, #0
 8002fb0:	d0be      	beq.n	8002f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002fb2:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002fba:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002fbc:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002fbe:	8860      	ldrh	r0, [r4, #2]
 8002fc0:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002fc4:	bf18      	it	ne
 8002fc6:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002fc8:	3801      	subs	r0, #1
 8002fca:	f021 0110 	bic.w	r1, r1, #16
 8002fce:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002fd2:	f041 0110 	orr.w	r1, r1, #16
 8002fd6:	61d9      	str	r1, [r3, #28]
                break;
 8002fd8:	e7df      	b.n	8002f9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fda:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002fde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	e7b5      	b.n	8002f52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002fe6:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002fea:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002fec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002ff0:	e7f7      	b.n	8002fe2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ff2:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002ff6:	e7dd      	b.n	8002fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002ff8:	52001000 	.word	0x52001000
 8002ffc:	00012301 	.word	0x00012301
 8003000:	00020009 	.word	0x00020009
 8003004:	0002000a 	.word	0x0002000a
 8003008:	08025e3b 	.word	0x08025e3b
 800300c:	08025e55 	.word	0x08025e55
 8003010:	08025d9c 	.word	0x08025d9c
 8003014:	00022301 	.word	0x00022301

08003018 <DMA2D_XferCpltCallback>:
 8003018:	4b02      	ldr	r3, [pc, #8]	@ (8003024 <DMA2D_XferCpltCallback+0xc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4718      	bx	r3
 8003024:	240253b4 	.word	0x240253b4

08003028 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8003028:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003030:	b9d3      	cbnz	r3, 8003068 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8003038:	4919      	ldr	r1, [pc, #100]	@ (80030a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d12a      	bne.n	800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003046:	4818      	ldr	r0, [pc, #96]	@ (80030a8 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8003048:	6800      	ldr	r0, [r0, #0]
 800304a:	bb38      	cbnz	r0, 800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800304c:	7a20      	ldrb	r0, [r4, #8]
 800304e:	bb28      	cbnz	r0, 800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003050:	7aa0      	ldrb	r0, [r4, #10]
 8003052:	bb18      	cbnz	r0, 800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003054:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8003056:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 800305a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800305c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003064:	f7ff bd6e 	b.w	8002b44 <DMA2D_CopyBuffer>
        if (isRunning)
 8003068:	7a03      	ldrb	r3, [r0, #8]
 800306a:	b143      	cbz	r3, 800307e <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 800306c:	2300      	movs	r3, #0
 800306e:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003076:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800307a:	f7ff fd9d 	bl	8002bb8 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 800307e:	6860      	ldr	r0, [r4, #4]
 8003080:	6803      	ldr	r3, [r0, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4798      	blx	r3
 8003086:	b948      	cbnz	r0, 800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003088:	7a63      	ldrb	r3, [r4, #9]
 800308a:	b13b      	cbz	r3, 800309c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 800308c:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 800308e:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003092:	4620      	mov	r0, r4
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800309a:	4718      	bx	r3
    }
 800309c:	bd10      	pop	{r4, pc}
 800309e:	bf00      	nop
 80030a0:	24009e88 	.word	0x24009e88
 80030a4:	24000010 	.word	0x24000010
 80030a8:	24009e84 	.word	0x24009e84

080030ac <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80030b0:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <_ZN8STM32DMAC1Ev+0x40>)
 80030b2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80030b4:	2600      	movs	r6, #0
 80030b6:	4625      	mov	r5, r4
 80030b8:	2260      	movs	r2, #96	@ 0x60
 80030ba:	6060      	str	r0, [r4, #4]
 80030bc:	7226      	strb	r6, [r4, #8]
 80030be:	7266      	strb	r6, [r4, #9]
 80030c0:	f845 3b20 	str.w	r3, [r5], #32
 80030c4:	4629      	mov	r1, r5
 80030c6:	f00d fbc7 	bl	8010858 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80030ca:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80030ce:	60ee      	str	r6, [r5, #12]
 80030d0:	3524      	adds	r5, #36	@ 0x24
 80030d2:	429d      	cmp	r5, r3
 80030d4:	d1fb      	bne.n	80030ce <_ZN8STM32DMAC1Ev+0x22>
 80030d6:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80030da:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80030dc:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80030e0:	f009 fe6e 	bl	800cdc0 <osMutexNew>
 80030e4:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80030e8:	4620      	mov	r0, r4
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	08027728 	.word	0x08027728

080030f0 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80030f0:	4b03      	ldr	r3, [pc, #12]	@ (8003100 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	07d2      	lsls	r2, r2, #31
 80030f6:	d4fc      	bmi.n	80030f2 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030f8:	2223      	movs	r2, #35	@ 0x23
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	52001000 	.word	0x52001000

08003104 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003104:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8003106:	6953      	ldr	r3, [r2, #20]
 8003108:	03db      	lsls	r3, r3, #15
 800310a:	d511      	bpl.n	8003130 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800310c:	2900      	cmp	r1, #0
 800310e:	dd0f      	ble.n	8003130 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003110:	f000 031f 	and.w	r3, r0, #31
 8003114:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8003116:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800311a:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800311c:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003120:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8003122:	1a0b      	subs	r3, r1, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	dcf9      	bgt.n	800311c <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8003128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800312c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003138:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800313a:	4c10      	ldr	r4, [pc, #64]	@ (800317c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	07ed      	lsls	r5, r5, #31
 8003140:	d4fc      	bmi.n	800313c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003142:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003144:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8003146:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003148:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800314a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800314e:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003152:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003154:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003156:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8003158:	d00c      	beq.n	8003174 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800315a:	4909      	ldr	r1, [pc, #36]	@ (8003180 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800315c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003160:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003162:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003166:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800316a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800316c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800316e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003170:	6023      	str	r3, [r4, #0]
    }
}
 8003172:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003174:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003176:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003178:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800317a:	e7f9      	b.n	8003170 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 800317c:	52001000 	.word	0x52001000
 8003180:	00010009 	.word	0x00010009
 8003184:	00020001 	.word	0x00020001
 8003188:	00030001 	.word	0x00030001

0800318c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 800318c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800318e:	4c0e      	ldr	r4, [pc, #56]	@ (80031c8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003190:	6825      	ldr	r5, [r4, #0]
 8003192:	07ed      	lsls	r5, r5, #31
 8003194:	d4fc      	bmi.n	8003190 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003196:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003198:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800319a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800319c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800319e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031a2:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80031a6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031a8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80031aa:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80031ac:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 80031ae:	d007      	beq.n	80031c0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031b0:	4a06      	ldr	r2, [pc, #24]	@ (80031cc <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 80031b2:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 80031b6:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80031b8:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80031ba:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80031bc:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 80031be:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 80031c2:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 80031c4:	6025      	str	r5, [r4, #0]
}
 80031c6:	e7fa      	b.n	80031be <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 80031c8:	52001000 	.word	0x52001000
 80031cc:	00020001 	.word	0x00020001
 80031d0:	ff020001 	.word	0xff020001

080031d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80031d4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80031d6:	4c0b      	ldr	r4, [pc, #44]	@ (8003204 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80031d8:	6825      	ldr	r5, [r4, #0]
 80031da:	07ed      	lsls	r5, r5, #31
 80031dc:	d4fc      	bmi.n	80031d8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031de:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031e0:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031e2:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031e4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80031e6:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031ec:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80031ee:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031f0:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80031f2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80031f4:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031f6:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80031fa:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80031fc:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80031fe:	6023      	str	r3, [r4, #0]
}
 8003200:	bd30      	pop	{r4, r5, pc}
 8003202:	bf00      	nop
 8003204:	52001000 	.word	0x52001000
 8003208:	00020001 	.word	0x00020001

0800320c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800320c:	2001      	movs	r0, #1
 800320e:	4770      	bx	lr

08003210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003210:	200c      	movs	r0, #12
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003214:	230c      	movs	r3, #12
 8003216:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800321a:	3008      	adds	r0, #8
 800321c:	4770      	bx	lr

0800321e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800321e:	230c      	movs	r3, #12
 8003220:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003224:	3008      	adds	r0, #8
 8003226:	4770      	bx	lr

08003228 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003228:	2001      	movs	r0, #1
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800322c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8003230:	4770      	bx	lr

08003232 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003232:	f44f 731d 	mov.w	r3, #628	@ 0x274
 8003236:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800323a:	3008      	adds	r0, #8
 800323c:	4770      	bx	lr

0800323e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800323e:	f44f 731d 	mov.w	r3, #628	@ 0x274
 8003242:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003246:	3008      	adds	r0, #8
 8003248:	4770      	bx	lr

0800324a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800324a:	2001      	movs	r0, #1
 800324c:	4770      	bx	lr

0800324e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800324e:	2010      	movs	r0, #16
 8003250:	4770      	bx	lr

08003252 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003252:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003256:	3008      	adds	r0, #8
 8003258:	4770      	bx	lr

0800325a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800325a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800325e:	3008      	adds	r0, #8
 8003260:	4770      	bx	lr

08003262 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003262:	4608      	mov	r0, r1
 8003264:	f000 be3a 	b.w	8003edc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	6003      	str	r3, [r0, #0]
 8003270:	f00b ff4d 	bl	800f10e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003274:	4620      	mov	r0, r4
 8003276:	bd10      	pop	{r4, pc}
 8003278:	080277e0 	.word	0x080277e0

0800327c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	f7ff fff2 	bl	8003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003284:	2114      	movs	r1, #20
 8003286:	4620      	mov	r0, r4
 8003288:	f020 fe89 	bl	8023f9e <_ZdlPvj>
 800328c:	4620      	mov	r0, r4
 800328e:	bd10      	pop	{r4, pc}

08003290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003292:	b510      	push	{r4, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	6003      	str	r3, [r0, #0]
 8003298:	f00b ff39 	bl	800f10e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800329c:	4620      	mov	r0, r4
 800329e:	bd10      	pop	{r4, pc}
 80032a0:	080277ac 	.word	0x080277ac

080032a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	f7ff fff2 	bl	8003290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032ac:	f44f 711f 	mov.w	r1, #636	@ 0x27c
 80032b0:	4620      	mov	r0, r4
 80032b2:	f020 fe74 	bl	8023f9e <_ZdlPvj>
 80032b6:	4620      	mov	r0, r4
 80032b8:	bd10      	pop	{r4, pc}
	...

080032bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80032be:	b510      	push	{r4, lr}
 80032c0:	4604      	mov	r4, r0
 80032c2:	6003      	str	r3, [r0, #0]
 80032c4:	f00b ff23 	bl	800f10e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032c8:	4620      	mov	r0, r4
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	08027778 	.word	0x08027778

080032d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	f7ff fff2 	bl	80032bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032d8:	2118      	movs	r1, #24
 80032da:	4620      	mov	r0, r4
 80032dc:	f020 fe5f 	bl	8023f9e <_ZdlPvj>
 80032e0:	4620      	mov	r0, r4
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <_ZN12FrontendHeapD1Ev+0x24>)
 80032e6:	b510      	push	{r4, lr}
 80032e8:	4604      	mov	r4, r0
 80032ea:	6003      	str	r3, [r0, #0]
 80032ec:	f500 702a 	add.w	r0, r0, #680	@ 0x2a8
 80032f0:	f7ff ffba 	bl	8003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032f4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80032f8:	f7ff ffca 	bl	8003290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032fc:	f104 0014 	add.w	r0, r4, #20
 8003300:	f7ff ffdc 	bl	80032bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003304:	4620      	mov	r0, r4
 8003306:	bd10      	pop	{r4, pc}
 8003308:	08027814 	.word	0x08027814

0800330c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800330c:	b508      	push	{r3, lr}
 800330e:	4802      	ldr	r0, [pc, #8]	@ (8003318 <__tcf_0+0xc>)
 8003310:	f7ff ffe8 	bl	80032e4 <_ZN12FrontendHeapD1Ev>
 8003314:	bd08      	pop	{r3, pc}
 8003316:	bf00      	nop
 8003318:	2400ad84 	.word	0x2400ad84

0800331c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	f7ff ffe0 	bl	80032e4 <_ZN12FrontendHeapD1Ev>
 8003324:	f240 4124 	movw	r1, #1060	@ 0x424
 8003328:	4620      	mov	r0, r4
 800332a:	f020 fe38 	bl	8023f9e <_ZdlPvj>
 800332e:	4620      	mov	r0, r4
 8003330:	bd10      	pop	{r4, pc}
	...

08003334 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003338:	f000 fc52 	bl	8003be0 <_ZN14BitmapDatabase11getInstanceEv>
 800333c:	2400      	movs	r4, #0
 800333e:	4605      	mov	r5, r0
 8003340:	f000 fc52 	bl	8003be8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003344:	4623      	mov	r3, r4
 8003346:	4601      	mov	r1, r0
 8003348:	4622      	mov	r2, r4
 800334a:	4628      	mov	r0, r5
 800334c:	9400      	str	r4, [sp, #0]
 800334e:	f014 fc45 	bl	8017bdc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003352:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <touchgfx_init+0xbc>)
 8003354:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003356:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003358:	4d27      	ldr	r5, [pc, #156]	@ (80033f8 <touchgfx_init+0xc4>)
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f001 f852 	bl	8004404 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003360:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <touchgfx_init+0xc8>)
 8003362:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003364:	4827      	ldr	r0, [pc, #156]	@ (8003404 <touchgfx_init+0xd0>)
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	f014 fae4 	bl	8017934 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	f3bf 8f5b 	dmb	ish
 8003372:	07db      	lsls	r3, r3, #31
 8003374:	d435      	bmi.n	80033e2 <touchgfx_init+0xae>
 8003376:	4628      	mov	r0, r5
 8003378:	f020 fe13 	bl	8023fa2 <__cxa_guard_acquire>
 800337c:	b388      	cbz	r0, 80033e2 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800337e:	4c22      	ldr	r4, [pc, #136]	@ (8003408 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003380:	4b22      	ldr	r3, [pc, #136]	@ (800340c <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003382:	f504 7632 	add.w	r6, r4, #712	@ 0x2c8
        : presenterStorage(pres),
 8003386:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800338a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 800338e:	f504 772a 	add.w	r7, r4, #680	@ 0x2a8
 8003392:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003394:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003396:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800339a:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800339c:	6126      	str	r6, [r4, #16]
 800339e:	f00b feb7 	bl	800f110 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80033a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <touchgfx_init+0xdc>)
 80033a4:	4640      	mov	r0, r8
 80033a6:	6163      	str	r3, [r4, #20]
 80033a8:	f00b feb2 	bl	800f110 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80033ac:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <touchgfx_init+0xe0>)
 80033ae:	4638      	mov	r0, r7
 80033b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033b2:	f00b fead 	bl	800f110 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <touchgfx_init+0xe4>)
 80033b8:	f504 702f 	add.w	r0, r4, #700	@ 0x2bc
 80033bc:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
 80033c0:	f001 f896 	bl	80044f0 <_ZN5ModelC1Ev>
 80033c4:	4622      	mov	r2, r4
 80033c6:	f504 712f 	add.w	r1, r4, #700	@ 0x2bc
 80033ca:	4630      	mov	r0, r6
 80033cc:	f001 f886 	bl	80044dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80033d0:	4630      	mov	r0, r6
 80033d2:	f000 fd83 	bl	8003edc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80033d6:	4811      	ldr	r0, [pc, #68]	@ (800341c <touchgfx_init+0xe8>)
 80033d8:	f021 f978 	bl	80246cc <atexit>
 80033dc:	4628      	mov	r0, r5
 80033de:	f020 fdec 	bl	8023fba <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80033e2:	480f      	ldr	r0, [pc, #60]	@ (8003420 <touchgfx_init+0xec>)
}
 80033e4:	b002      	add	sp, #8
 80033e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80033ea:	f7fe bcd1 	b.w	8001d90 <_ZN11TouchGFXHAL10initializeEv>
 80033ee:	bf00      	nop
 80033f0:	24025418 	.word	0x24025418
 80033f4:	24009f48 	.word	0x24009f48
 80033f8:	2400ad80 	.word	0x2400ad80
 80033fc:	24009f68 	.word	0x24009f68
 8003400:	24009f4c 	.word	0x24009f4c
 8003404:	24000034 	.word	0x24000034
 8003408:	2400ad84 	.word	0x2400ad84
 800340c:	08027814 	.word	0x08027814
 8003410:	08027778 	.word	0x08027778
 8003414:	080277ac 	.word	0x080277ac
 8003418:	080277e0 	.word	0x080277e0
 800341c:	0800330d 	.word	0x0800330d
 8003420:	24009ec4 	.word	0x24009ec4

08003424 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003424:	4770      	bx	lr
	...

08003428 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <touchgfx_taskEntry+0x8>)
 800342a:	f7fe bcc3 	b.w	8001db4 <_ZN11TouchGFXHAL9taskEntryEv>
 800342e:	bf00      	nop
 8003430:	24009ec4 	.word	0x24009ec4

08003434 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003434:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003436:	4c0e      	ldr	r4, [pc, #56]	@ (8003470 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003438:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800343a:	4e0f      	ldr	r6, [pc, #60]	@ (8003478 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 800343c:	4620      	mov	r0, r4
static LCD24bpp display;
 800343e:	4d0f      	ldr	r5, [pc, #60]	@ (800347c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003440:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003442:	f7ff fe33 	bl	80030ac <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003446:	4628      	mov	r0, r5
 8003448:	f018 fa6a 	bl	801b920 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 800344c:	480c      	ldr	r0, [pc, #48]	@ (8003480 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800344e:	f012 fb19 	bl	8015a84 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003452:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003456:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800345a:	4621      	mov	r1, r4
 800345c:	4809      	ldr	r0, [pc, #36]	@ (8003484 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800345e:	e9cd 3200 	strd	r3, r2, [sp]
 8003462:	4633      	mov	r3, r6
 8003464:	462a      	mov	r2, r5
 8003466:	f7fe fd39 	bl	8001edc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800346a:	b002      	add	sp, #8
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	bf00      	nop
 8003470:	24009fd4 	.word	0x24009fd4
 8003474:	080275e0 	.word	0x080275e0
 8003478:	2400ad7c 	.word	0x2400ad7c
 800347c:	24009f68 	.word	0x24009f68
 8003480:	24009f4c 	.word	0x24009f4c
 8003484:	24009ec4 	.word	0x24009ec4

08003488 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003488:	4801      	ldr	r0, [pc, #4]	@ (8003490 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800348a:	f7ff bc5b 	b.w	8002d44 <_ZN8STM32DMAD1Ev>
 800348e:	bf00      	nop
 8003490:	24009fd4 	.word	0x24009fd4

08003494 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003494:	2000      	movs	r0, #0
 8003496:	4770      	bx	lr

08003498 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003498:	8081      	strh	r1, [r0, #4]
    }
 800349a:	4770      	bx	lr

0800349c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800349c:	80c1      	strh	r1, [r0, #6]
    }
 800349e:	4770      	bx	lr

080034a0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80034a0:	8101      	strh	r1, [r0, #8]
    }
 80034a2:	4770      	bx	lr

080034a4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80034a4:	8141      	strh	r1, [r0, #10]
    }
 80034a6:	4770      	bx	lr

080034a8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80034a8:	4770      	bx	lr

080034aa <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80034aa:	4770      	bx	lr

080034ac <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80034ac:	4770      	bx	lr

080034ae <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80034ae:	4770      	bx	lr

080034b0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80034b0:	4770      	bx	lr

080034b2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80034b2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80034b4:	88c4      	ldrh	r4, [r0, #6]
 80034b6:	6803      	ldr	r3, [r0, #0]
 80034b8:	1b12      	subs	r2, r2, r4
 80034ba:	8884      	ldrh	r4, [r0, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	1b09      	subs	r1, r1, r4
 80034c0:	b212      	sxth	r2, r2
    }
 80034c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80034c6:	b209      	sxth	r1, r1
 80034c8:	4718      	bx	r3

080034ca <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80034ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034ce:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80034da:	6010      	str	r0, [r2, #0]
    }
 80034dc:	4770      	bx	lr

080034de <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80034de:	2000      	movs	r0, #0
 80034e0:	4770      	bx	lr

080034e2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80034e2:	888b      	ldrh	r3, [r1, #4]
 80034e4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80034e6:	2001      	movs	r0, #1
 80034e8:	4770      	bx	lr

080034ea <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80034ea:	4770      	bx	lr

080034ec <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80034ec:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80034f0:	4770      	bx	lr

080034f2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80034f2:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80034f6:	4770      	bx	lr

080034f8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80034f8:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80034fa:	2200      	movs	r2, #0
        return rect.width;
 80034fc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003500:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003504:	8002      	strh	r2, [r0, #0]
 8003506:	8042      	strh	r2, [r0, #2]
 8003508:	8084      	strh	r4, [r0, #4]
 800350a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800350c:	bd10      	pop	{r4, pc}

0800350e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800350e:	2200      	movs	r2, #0
 8003510:	8002      	strh	r2, [r0, #0]
 8003512:	8042      	strh	r2, [r0, #2]
 8003514:	8082      	strh	r2, [r0, #4]
 8003516:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003518:	4770      	bx	lr

0800351a <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800351a:	7701      	strb	r1, [r0, #28]
    }
 800351c:	4770      	bx	lr

0800351e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800351e:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003522:	4770      	bx	lr

08003524 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003524:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003528:	4770      	bx	lr

0800352a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800352a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800352e:	4770      	bx	lr

08003530 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003530:	2001      	movs	r0, #1
 8003532:	4770      	bx	lr

08003534 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003534:	3098      	adds	r0, #152	@ 0x98
 8003536:	4770      	bx	lr

08003538 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003538:	308c      	adds	r0, #140	@ 0x8c
 800353a:	4770      	bx	lr

0800353c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 800353c:	3084      	adds	r0, #132	@ 0x84
 800353e:	4770      	bx	lr

08003540 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003540:	4770      	bx	lr

08003542 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003542:	4770      	bx	lr

08003544 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003544:	4770      	bx	lr
	...

08003548 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	4b02      	ldr	r3, [pc, #8]	@ (8003554 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800354a:	2290      	movs	r2, #144	@ 0x90
 800354c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003558:	4770      	bx	lr

0800355a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800355a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800355c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003560:	4770      	bx	lr

08003562 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003562:	4770      	bx	lr

08003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003564:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003568:	4611      	mov	r1, r2
 800356a:	6840      	ldr	r0, [r0, #4]
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4718      	bx	r3

08003572 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003572:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003576:	4770      	bx	lr

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	2148      	movs	r1, #72	@ 0x48
 800357e:	f020 fd0e 	bl	8023f9e <_ZdlPvj>
 8003582:	4620      	mov	r0, r4
 8003584:	bd10      	pop	{r4, pc}

08003586 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003586:	b510      	push	{r4, lr}
 8003588:	4604      	mov	r4, r0
 800358a:	212c      	movs	r1, #44	@ 0x2c
 800358c:	f020 fd07 	bl	8023f9e <_ZdlPvj>
 8003590:	4620      	mov	r0, r4
 8003592:	bd10      	pop	{r4, pc}

08003594 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
 8003598:	21bc      	movs	r1, #188	@ 0xbc
 800359a:	f020 fd00 	bl	8023f9e <_ZdlPvj>
 800359e:	4620      	mov	r0, r4
 80035a0:	bd10      	pop	{r4, pc}
	...

080035a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4604      	mov	r4, r0
    HAL::initialize();
 80035a8:	f00c fa7d 	bl	800faa6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80035b0:	f010 ffb0 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 80035b4:	4601      	mov	r1, r0
 80035b6:	4620      	mov	r0, r4
 80035b8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	4908      	ldr	r1, [pc, #32]	@ (80035e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80035be:	4620      	mov	r0, r4
 80035c0:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80035c4:	2300      	movs	r3, #0
 80035c6:	461a      	mov	r2, r3
 80035c8:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	4a05      	ldr	r2, [pc, #20]	@ (80035e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80035ce:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80035d2:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80035d4:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80035da:	4a05      	ldr	r2, [pc, #20]	@ (80035f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80035dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	d0119400 	.word	0xd0119400
 80035e4:	2400b2b0 	.word	0x2400b2b0
 80035e8:	2400b268 	.word	0x2400b268
 80035ec:	d0000000 	.word	0xd0000000
 80035f0:	00119400 	.word	0x00119400

080035f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80035fa:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	f009 fc16 	bl	800ce30 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003604:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003606:	f009 fc36 	bl	800ce76 <osMutexRelease>
        streams[handle].isActive = false;
 800360a:	2324      	movs	r3, #36	@ 0x24
 800360c:	fb03 4505 	mla	r5, r3, r5, r4
 8003610:	2300      	movs	r3, #0
 8003612:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003616:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800361a:	b90b      	cbnz	r3, 8003620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 800361c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800361e:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003620:	bd38      	pop	{r3, r4, r5, pc}

08003622 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003622:	f00c b9f1 	b.w	800fa08 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003626 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003626:	f00c bb60 	b.w	800fcea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800362a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800362a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800362e:	b112      	cbz	r2, 8003636 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003630:	6803      	ldr	r3, [r0, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4718      	bx	r3
    }
 8003636:	4770      	bx	lr

08003638 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003638:	4a12      	ldr	r2, [pc, #72]	@ (8003684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800363a:	6953      	ldr	r3, [r2, #20]
 800363c:	03db      	lsls	r3, r3, #15
{
 800363e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003640:	d51e      	bpl.n	8003680 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003642:	2300      	movs	r3, #0
 8003644:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003648:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800364c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003650:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003654:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003658:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800365c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800365e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003662:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003664:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003668:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800366a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800366e:	d2f9      	bcs.n	8003664 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003670:	3b20      	subs	r3, #32
 8003672:	f113 0f20 	cmn.w	r3, #32
 8003676:	d1f2      	bne.n	800365e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800367c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003688:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800368a:	b131      	cbz	r1, 800369a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800368e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003692:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003694:	4804      	ldr	r0, [pc, #16]	@ (80036a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003696:	f020 fffb 	bl	8024690 <__assert_func>
    }
 800369a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800369e:	bd08      	pop	{r3, pc}
 80036a0:	08025e93 	.word	0x08025e93
 80036a4:	08025ea7 	.word	0x08025ea7
 80036a8:	08026031 	.word	0x08026031

080036ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80036ac:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80036ae:	b131      	cbz	r1, 80036be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80036b2:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80036b6:	4a06      	ldr	r2, [pc, #24]	@ (80036d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80036b8:	4806      	ldr	r0, [pc, #24]	@ (80036d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80036ba:	f020 ffe9 	bl	8024690 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80036be:	6840      	ldr	r0, [r0, #4]
 80036c0:	4611      	mov	r1, r2
 80036c2:	6803      	ldr	r3, [r0, #0]
    }
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	4718      	bx	r3
 80036cc:	08025e93 	.word	0x08025e93
 80036d0:	0802607b 	.word	0x0802607b
 80036d4:	08026031 	.word	0x08026031

080036d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80036d8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80036da:	b129      	cbz	r1, 80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80036dc:	4b03      	ldr	r3, [pc, #12]	@ (80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80036de:	2179      	movs	r1, #121	@ 0x79
 80036e0:	4a03      	ldr	r2, [pc, #12]	@ (80036f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80036e2:	4804      	ldr	r0, [pc, #16]	@ (80036f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80036e4:	f020 ffd4 	bl	8024690 <__assert_func>
    }
 80036e8:	68c0      	ldr	r0, [r0, #12]
 80036ea:	bd08      	pop	{r3, pc}
 80036ec:	08025e93 	.word	0x08025e93
 80036f0:	08026229 	.word	0x08026229
 80036f4:	08026031 	.word	0x08026031

080036f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80036fc:	b129      	cbz	r1, 800370a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80036fe:	4b19      	ldr	r3, [pc, #100]	@ (8003764 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003700:	21a2      	movs	r1, #162	@ 0xa2
 8003702:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003704:	4819      	ldr	r0, [pc, #100]	@ (800376c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003706:	f020 ffc3 	bl	8024690 <__assert_func>
        switch (cmd)
 800370a:	2a05      	cmp	r2, #5
 800370c:	d815      	bhi.n	800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800370e:	e8df f002 	tbb	[pc, r2]
 8003712:	1103      	.short	0x1103
 8003714:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003718:	6840      	ldr	r0, [r0, #4]
 800371a:	6803      	ldr	r3, [r0, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	4798      	blx	r3
 8003720:	b158      	cbz	r0, 800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003722:	2301      	movs	r3, #1
 8003724:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003728:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 800372c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800372e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003732:	e002      	b.n	800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003734:	2300      	movs	r3, #0
 8003736:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800373a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800373c:	6203      	str	r3, [r0, #32]
 800373e:	e7f5      	b.n	800372c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003740:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003742:	2301      	movs	r3, #1
 8003744:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003748:	e7f0      	b.n	800372c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800374a:	2300      	movs	r3, #0
 800374c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	6203      	str	r3, [r0, #32]
            break;
 8003754:	e7f1      	b.n	800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003756:	3b00      	subs	r3, #0
 8003758:	bf18      	it	ne
 800375a:	2301      	movne	r3, #1
 800375c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003760:	e7eb      	b.n	800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003762:	bf00      	nop
 8003764:	08025e93 	.word	0x08025e93
 8003768:	080263de 	.word	0x080263de
 800376c:	08026031 	.word	0x08026031

08003770 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003770:	b510      	push	{r4, lr}
 8003772:	460c      	mov	r4, r1
 8003774:	4611      	mov	r1, r2
 8003776:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003778:	b12c      	cbz	r4, 8003786 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800377c:	2190      	movs	r1, #144	@ 0x90
 800377e:	4a06      	ldr	r2, [pc, #24]	@ (8003798 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003780:	4806      	ldr	r0, [pc, #24]	@ (800379c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003782:	f020 ff85 	bl	8024690 <__assert_func>
        stream.frameNumber = 0;
 8003786:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003788:	6840      	ldr	r0, [r0, #4]
 800378a:	6803      	ldr	r3, [r0, #0]
    }
 800378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4718      	bx	r3
 8003794:	08025e93 	.word	0x08025e93
 8003798:	080265b2 	.word	0x080265b2
 800379c:	08026031 	.word	0x08026031

080037a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80037a0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80037a2:	b129      	cbz	r1, 80037b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 80037a6:	2182      	movs	r1, #130	@ 0x82
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 80037aa:	4806      	ldr	r0, [pc, #24]	@ (80037c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 80037ac:	f020 ff70 	bl	8024690 <__assert_func>
        stream.tickCount = 0;
 80037b0:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80037b4:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80037b8:	bd08      	pop	{r3, pc}
 80037ba:	bf00      	nop
 80037bc:	08025e93 	.word	0x08025e93
 80037c0:	0802678d 	.word	0x0802678d
 80037c4:	08026031 	.word	0x08026031

080037c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80037c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80037d0:	b153      	cbz	r3, 80037e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80037d2:	f04f 31ff 	mov.w	r1, #4294967295
 80037d6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80037d8:	f009 fb2a 	bl	800ce30 <osMutexAcquire>
            firstDrawThisFrame = false;
 80037dc:	2300      	movs	r3, #0
 80037de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80037e8:	bd10      	pop	{r4, pc}

080037ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80037ea:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80037ee:	b11a      	cbz	r2, 80037f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80037f0:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80037f4:	b102      	cbz	r2, 80037f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80037f6:	6018      	str	r0, [r3, #0]
        }
    }
 80037f8:	4770      	bx	lr
	...

080037fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80037fc:	b510      	push	{r4, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003802:	b129      	cbz	r1, 8003810 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003806:	21d0      	movs	r1, #208	@ 0xd0
 8003808:	4a13      	ldr	r2, [pc, #76]	@ (8003858 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800380a:	4814      	ldr	r0, [pc, #80]	@ (800385c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800380c:	f020 ff40 	bl	8024690 <__assert_func>
        if (stream.isPlaying)
 8003810:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003814:	b133      	cbz	r3, 8003824 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800381e:	6963      	ldr	r3, [r4, #20]
 8003820:	4413      	add	r3, r2
 8003822:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003824:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003828:	b90b      	cbnz	r3, 800382e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800382a:	2001      	movs	r0, #1
    }
 800382c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800382e:	68a3      	ldr	r3, [r4, #8]
 8003830:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003832:	6803      	ldr	r3, [r0, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003838:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800383a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 800383e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003842:	2800      	cmp	r0, #0
 8003844:	d1f1      	bne.n	800382a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003846:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800384e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003852:	e7eb      	b.n	800382c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003854:	08025e93 	.word	0x08025e93
 8003858:	08026949 	.word	0x08026949
 800385c:	08026031 	.word	0x08026031
 8003860:	240253b4 	.word	0x240253b4

08003864 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003864:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003866:	4c1a      	ldr	r4, [pc, #104]	@ (80038d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003868:	4605      	mov	r5, r0
    HAL::endFrame();
 800386a:	f00c f90f 	bl	800fa8c <_ZN8touchgfx3HAL8endFrameEv>
 800386e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003872:	b913      	cbnz	r3, 800387a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003874:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003878:	b1ab      	cbz	r3, 80038a6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800387a:	69e1      	ldr	r1, [r4, #28]
 800387c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003880:	4353      	muls	r3, r2
 8003882:	6922      	ldr	r2, [r4, #16]
 8003884:	434a      	muls	r2, r1
 8003886:	4293      	cmp	r3, r2
 8003888:	d30d      	bcc.n	80038a6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800388a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800388e:	b138      	cbz	r0, 80038a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003896:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003898:	bf98      	it	ls
 800389a:	f102 32ff 	addls.w	r2, r2, #4294967295
 800389e:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 80038a6:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80038a8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 80038aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 80038ae:	f009 fb77 	bl	800cfa0 <osSemaphoreRelease>
        if (uiHasMutex)
 80038b2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80038b6:	b12b      	cbz	r3, 80038c4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 80038b8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038ba:	f009 fadc 	bl	800ce76 <osMutexRelease>
            uiHasMutex = false;
 80038be:	2300      	movs	r3, #0
 80038c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 80038c4:	6868      	ldr	r0, [r5, #4]
 80038c6:	6803      	ldr	r3, [r0, #0]
}
 80038c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	4718      	bx	r3
 80038d0:	2400b268 	.word	0x2400b268

080038d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80038d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80038da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80038de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038e2:	f3bf 8f6f 	isb	sy
}
 80038e6:	4770      	bx	lr
 80038e8:	e000e100 	.word	0xe000e100

080038ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ec:	4b02      	ldr	r3, [pc, #8]	@ (80038f8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80038ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000e100 	.word	0xe000e100

080038fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003900:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003904:	b9d8      	cbnz	r0, 800393e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003906:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800390a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 800390c:	2501      	movs	r5, #1
                streams[i] = Stream();
 800390e:	60d8      	str	r0, [r3, #12]
 8003910:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003912:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003916:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003918:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 800391c:	6158      	str	r0, [r3, #20]
 800391e:	6198      	str	r0, [r3, #24]
 8003920:	61d8      	str	r0, [r3, #28]
 8003922:	6218      	str	r0, [r3, #32]
 8003924:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003926:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003928:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800392c:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003930:	443c      	add	r4, r7
 8003932:	42a2      	cmp	r2, r4
 8003934:	d90a      	bls.n	800394c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003936:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003938:	2152      	movs	r1, #82	@ 0x52
 800393a:	4a0b      	ldr	r2, [pc, #44]	@ (8003968 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800393c:	e003      	b.n	8003946 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003940:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003944:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003946:	480b      	ldr	r0, [pc, #44]	@ (8003974 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003948:	f020 fea2 	bl	8024690 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800394c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003950:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003954:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003958:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800395a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 800395e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003960:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	08026ca1 	.word	0x08026ca1
 8003968:	08026cdc 	.word	0x08026cdc
 800396c:	08026aea 	.word	0x08026aea
 8003970:	08026b1a 	.word	0x08026b1a
 8003974:	08026031 	.word	0x08026031

08003978 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003978:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800397a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800397c:	4e12      	ldr	r6, [pc, #72]	@ (80039c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800397e:	4604      	mov	r4, r0
 8003980:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003984:	6003      	str	r3, [r0, #0]
 8003986:	6833      	ldr	r3, [r6, #0]
 8003988:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800398c:	b10a      	cbz	r2, 8003992 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800398e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003990:	b900      	cbnz	r0, 8003994 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003992:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003994:	6803      	ldr	r3, [r0, #0]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	4798      	blx	r3
 800399a:	1e43      	subs	r3, r0, #1
 800399c:	425d      	negs	r5, r3
 800399e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80039a0:	6833      	ldr	r3, [r6, #0]
 80039a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80039a4:	b130      	cbz	r0, 80039b4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80039a6:	6803      	ldr	r3, [r0, #0]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	4798      	blx	r3
 80039ac:	2801      	cmp	r0, #1
 80039ae:	bf08      	it	eq
 80039b0:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80039b4:	b92d      	cbnz	r5, 80039c2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80039b8:	2127      	movs	r1, #39	@ 0x27
 80039ba:	4a06      	ldr	r2, [pc, #24]	@ (80039d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80039bc:	4806      	ldr	r0, [pc, #24]	@ (80039d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80039be:	f020 fe67 	bl	8024690 <__assert_func>
    }
 80039c2:	4620      	mov	r0, r4
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	bf00      	nop
 80039c8:	240253b4 	.word	0x240253b4
 80039cc:	08027828 	.word	0x08027828
 80039d0:	08026e7f 	.word	0x08026e7f
 80039d4:	08026edd 	.word	0x08026edd
 80039d8:	08026f16 	.word	0x08026f16

080039dc <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 80039de:	4e25      	ldr	r6, [pc, #148]	@ (8003a74 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80039e0:	6835      	ldr	r5, [r6, #0]
 80039e2:	f3bf 8f5b 	dmb	ish
 80039e6:	f015 0501 	ands.w	r5, r5, #1
 80039ea:	d140      	bne.n	8003a6e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 80039ec:	4630      	mov	r0, r6
 80039ee:	f020 fad8 	bl	8023fa2 <__cxa_guard_acquire>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d03b      	beq.n	8003a6e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 80039f6:	4c20      	ldr	r4, [pc, #128]	@ (8003a78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 80039f8:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 80039fa:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80039fe:	6125      	str	r5, [r4, #16]
 8003a00:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003a02:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003a04:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003a06:	e9c4 3500 	strd	r3, r5, [r4]
 8003a0a:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003a0e:	f012 fb1e 	bl	801604e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003a12:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a16:	f00e fb5f 	bl	80120d8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003a1c:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003a1e:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003a22:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003a26:	f7ff ffa7 	bl	8003978 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003a2c:	4817      	ldr	r0, [pc, #92]	@ (8003a8c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003a2e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003a32:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003a34:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003a38:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003a3c:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8003a40:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003a44:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003a48:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003a52:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003a56:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003a5a:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003a60:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003a64:	f020 fe32 	bl	80246cc <atexit>
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f020 faa6 	bl	8023fba <__cxa_guard_release>
}
 8003a6e:	4802      	ldr	r0, [pc, #8]	@ (8003a78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
 8003a72:	bf00      	nop
 8003a74:	2400b1a8 	.word	0x2400b1a8
 8003a78:	2400b1ac 	.word	0x2400b1ac
 8003a7c:	080285ec 	.word	0x080285ec
 8003a80:	08027848 	.word	0x08027848
 8003a84:	080278c0 	.word	0x080278c0
 8003a88:	08028638 	.word	0x08028638
 8003a8c:	08003545 	.word	0x08003545
 8003a90:	08028670 	.word	0x08028670

08003a94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003a9a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003a9c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003aa6:	f009 fa4f 	bl	800cf48 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8003aae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003ab0:	f009 f9be 	bl	800ce30 <osMutexAcquire>
                if (stream.doDecode)
 8003ab4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003ab8:	b343      	cbz	r3, 8003b0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003aba:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003abc:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003ac0:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003ac2:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003ac6:	f1b8 0f00 	cmp.w	r8, #0
 8003aca:	d023      	beq.n	8003b14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	4641      	mov	r1, r8
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003ade:	9700      	str	r7, [sp, #0]
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003ae6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003aea:	68a1      	ldr	r1, [r4, #8]
 8003aec:	47c0      	blx	r8
                    stream.frameCount++;
 8003aee:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003af0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003af4:	3301      	adds	r3, #1
 8003af6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003af8:	b1f0      	cbz	r0, 8003b38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	4628      	mov	r0, r5
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	4798      	blx	r3
 8003b02:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003b04:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003b06:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003b08:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003b0c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b0e:	f009 f9b2 	bl	800ce76 <osMutexRelease>
        while (1)
 8003b12:	e7c5      	b.n	8003aa0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003b14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d0de      	beq.n	8003ad8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003b20:	4798      	blx	r3
 8003b22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003b24:	4401      	add	r1, r0
 8003b26:	4628      	mov	r0, r5
 8003b28:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003b2e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003b32:	4413      	add	r3, r2
 8003b34:	6123      	str	r3, [r4, #16]
 8003b36:	e7cf      	b.n	8003ad8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003b38:	2001      	movs	r0, #1
 8003b3a:	e7e3      	b.n	8003b04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003b3c <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003b3c:	4801      	ldr	r0, [pc, #4]	@ (8003b44 <videoTaskFunc+0x8>)
{
 8003b3e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003b40:	f7ff ffa8 	bl	8003a94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003b44:	2400b268 	.word	0x2400b268

08003b48 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003b48:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003b4a:	4814      	ldr	r0, [pc, #80]	@ (8003b9c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	f7fe fbf7 	bl	8002340 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003b52:	4c13      	ldr	r4, [pc, #76]	@ (8003ba0 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003b56:	462a      	mov	r2, r5
 8003b58:	4629      	mov	r1, r5
 8003b5a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003b62:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003b64:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003b66:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003b68:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003b6c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003b70:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003b74:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003b7c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003b80:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003b84:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003b88:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003b8c:	f009 f992 	bl	800ceb4 <osSemaphoreNew>
 8003b90:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003b92:	4628      	mov	r0, r5
 8003b94:	f009 f914 	bl	800cdc0 <osMutexNew>
 8003b98:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	2400b2b0 	.word	0x2400b2b0
 8003ba0:	2400b268 	.word	0x2400b268
 8003ba4:	0802790c 	.word	0x0802790c

08003ba8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003ba8:	4770      	bx	lr

08003baa <_ZN23ApplicationFontProviderD0Ev>:
 8003baa:	b510      	push	{r4, lr}
 8003bac:	4604      	mov	r4, r0
 8003bae:	2104      	movs	r1, #4
 8003bb0:	f020 f9f5 	bl	8023f9e <_ZdlPvj>
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	bd10      	pop	{r4, pc}

08003bb8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003bb8:	2901      	cmp	r1, #1
{
 8003bba:	b508      	push	{r3, lr}
    switch (typography)
 8003bbc:	d006      	beq.n	8003bcc <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003bbe:	2902      	cmp	r1, #2
 8003bc0:	d008      	beq.n	8003bd4 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003bc2:	b959      	cbnz	r1, 8003bdc <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003bc4:	f000 fc5c 	bl	8004480 <_ZN17TypedTextDatabase8getFontsEv>
 8003bc8:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003bca:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003bcc:	f000 fc58 	bl	8004480 <_ZN17TypedTextDatabase8getFontsEv>
 8003bd0:	6840      	ldr	r0, [r0, #4]
 8003bd2:	e7fa      	b.n	8003bca <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003bd4:	f000 fc54 	bl	8004480 <_ZN17TypedTextDatabase8getFontsEv>
 8003bd8:	6880      	ldr	r0, [r0, #8]
 8003bda:	e7f6      	b.n	8003bca <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7f4      	b.n	8003bca <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003be0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003be0:	4800      	ldr	r0, [pc, #0]	@ (8003be4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003be2:	4770      	bx	lr
 8003be4:	0802795c 	.word	0x0802795c

08003be8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003be8:	203f      	movs	r0, #63	@ 0x3f
 8003bea:	4770      	bx	lr

08003bec <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003bec:	b513      	push	{r0, r1, r4, lr}
 8003bee:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003bf0:	b151      	cbz	r1, 8003c08 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003bf2:	6803      	ldr	r3, [r0, #0]
 8003bf4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003bf6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003bf8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003bfc:	689c      	ldr	r4, [r3, #8]
 8003bfe:	f10d 0303 	add.w	r3, sp, #3
 8003c02:	47a0      	blx	r4
        return glyph;
    }
 8003c04:	b002      	add	sp, #8
 8003c06:	bd10      	pop	{r4, pc}
            return 0;
 8003c08:	4608      	mov	r0, r1
 8003c0a:	e7fb      	b.n	8003c04 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003c0c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003c0c:	89c0      	ldrh	r0, [r0, #14]
 8003c0e:	4770      	bx	lr

08003c10 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003c10:	8a00      	ldrh	r0, [r0, #16]
 8003c12:	4770      	bx	lr

08003c14 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003c14:	88c0      	ldrh	r0, [r0, #6]
 8003c16:	4770      	bx	lr

08003c18 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003c18:	8880      	ldrh	r0, [r0, #4]
 8003c1a:	4770      	bx	lr

08003c1c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003c1c:	7a80      	ldrb	r0, [r0, #10]
    }
 8003c1e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003c22:	4770      	bx	lr

08003c24 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003c24:	7a80      	ldrb	r0, [r0, #10]
    }
 8003c26:	09c0      	lsrs	r0, r0, #7
 8003c28:	4770      	bx	lr

08003c2a <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	4770      	bx	lr
	...

08003c30 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003c30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003c38 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	00000000 	.word	0x00000000

08003c3c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003c3c:	4770      	bx	lr

08003c3e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003c3e:	4770      	bx	lr

08003c40 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003c40:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	c303      	stmia	r3!, {r0, r1}
    }
 8003c4a:	4770      	bx	lr

08003c4c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003c4c:	4770      	bx	lr

08003c4e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003c4e:	4770      	bx	lr

08003c50 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003c50:	6041      	str	r1, [r0, #4]
    }
 8003c52:	4770      	bx	lr

08003c54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c54:	4770      	bx	lr

08003c56 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003c56:	4770      	bx	lr

08003c58 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003c5a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003c5e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003c68:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003c6c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	08003d19 	.word	0x08003d19

08003c78 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	7203      	strb	r3, [r0, #8]
    }
 8003c7c:	4770      	bx	lr

08003c7e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003c7e:	4770      	bx	lr

08003c80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003c80:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003c82:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003c84:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003c86:	68c2      	ldr	r2, [r0, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	1054      	asrs	r4, r2, #1
 8003c8c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003c90:	07d2      	lsls	r2, r2, #31
 8003c92:	bf48      	it	mi
 8003c94:	590a      	ldrmi	r2, [r1, r4]
    }
 8003c96:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003c9a:	bf48      	it	mi
 8003c9c:	58d3      	ldrmi	r3, [r2, r3]
 8003c9e:	4718      	bx	r3

08003ca0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003ca0:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003ca2:	6840      	ldr	r0, [r0, #4]
 8003ca4:	b130      	cbz	r0, 8003cb4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	b91a      	cbnz	r2, 8003cb2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003caa:	68d8      	ldr	r0, [r3, #12]
 8003cac:	f000 0001 	and.w	r0, r0, #1
 8003cb0:	4770      	bx	lr
 8003cb2:	2001      	movs	r0, #1
    }
 8003cb4:	4770      	bx	lr

08003cb6 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	4604      	mov	r4, r0
 8003cba:	210c      	movs	r1, #12
 8003cbc:	f020 f96f 	bl	8023f9e <_ZdlPvj>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	bd10      	pop	{r4, pc}

08003cc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	2110      	movs	r1, #16
 8003cca:	f020 f968 	bl	8023f9e <_ZdlPvj>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003cda:	f020 f960 	bl	8023f9e <_ZdlPvj>
 8003cde:	4620      	mov	r0, r4
 8003ce0:	bd10      	pop	{r4, pc}

08003ce2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003ce2:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003ce4:	f010 fc16 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 8003ce8:	6803      	ldr	r3, [r0, #0]
    }
 8003cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf0:	4718      	bx	r3

08003cf2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003cf6:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003cfa:	b158      	cbz	r0, 8003d14 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003cfc:	6803      	ldr	r3, [r0, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4798      	blx	r3
 8003d02:	b138      	cbz	r0, 8003d14 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003d04:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003d14:	bd10      	pop	{r4, pc}
	...

08003d18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003d18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003d1c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003d20:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d22:	68b0      	ldr	r0, [r6, #8]
 8003d24:	6803      	ldr	r3, [r0, #0]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4798      	blx	r3
 8003d2a:	f5b0 7f1d 	cmp.w	r0, #628	@ 0x274
 8003d2e:	d205      	bcs.n	8003d3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003d30:	4b44      	ldr	r3, [pc, #272]	@ (8003e44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003d32:	21a3      	movs	r1, #163	@ 0xa3
 8003d34:	4a44      	ldr	r2, [pc, #272]	@ (8003e48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d36:	4845      	ldr	r0, [pc, #276]	@ (8003e4c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003d38:	f020 fcaa 	bl	8024690 <__assert_func>
 8003d3c:	6870      	ldr	r0, [r6, #4]
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4798      	blx	r3
 8003d44:	280f      	cmp	r0, #15
 8003d46:	d803      	bhi.n	8003d50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003d48:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003d4a:	21a4      	movs	r1, #164	@ 0xa4
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003d4e:	e7f2      	b.n	8003d36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d50:	68f0      	ldr	r0, [r6, #12]
 8003d52:	6803      	ldr	r3, [r0, #0]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4798      	blx	r3
 8003d58:	280b      	cmp	r0, #11
 8003d5a:	d803      	bhi.n	8003d64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003d5e:	21a5      	movs	r1, #165	@ 0xa5
 8003d60:	4a39      	ldr	r2, [pc, #228]	@ (8003e48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003d62:	e7e8      	b.n	8003d36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003d64:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003e5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003d68:	f010 fbd4 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003d6c:	3004      	adds	r0, #4
 8003d6e:	f010 fc0f 	bl	8014590 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003d72:	f8d9 0000 	ldr.w	r0, [r9]
 8003d76:	b110      	cbz	r0, 8003d7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003d78:	6803      	ldr	r3, [r0, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4798      	blx	r3
    if (*currentTrans)
 8003d7e:	f8d9 0000 	ldr.w	r0, [r9]
 8003d82:	b110      	cbz	r0, 8003d8a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003d84:	6803      	ldr	r3, [r0, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4798      	blx	r3
    if (*currentScreen)
 8003d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003d8e:	f8d8 0000 	ldr.w	r0, [r8]
 8003d92:	b110      	cbz	r0, 8003d9a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003d94:	6803      	ldr	r3, [r0, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	4798      	blx	r3
    if (*currentPresenter)
 8003d9a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003d9e:	b110      	cbz	r0, 8003da6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003da0:	6803      	ldr	r3, [r0, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4798      	blx	r3
    if (*currentScreen)
 8003da6:	f8d8 0000 	ldr.w	r0, [r8]
 8003daa:	b110      	cbz	r0, 8003db2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003dac:	6803      	ldr	r3, [r0, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4798      	blx	r3
    if (*currentPresenter)
 8003db2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003db6:	b110      	cbz	r0, 8003dbe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003db8:	6803      	ldr	r3, [r0, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003dbe:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003dc0:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003dc2:	f04f 0b00 	mov.w	fp, #0
 8003dc6:	6803      	ldr	r3, [r0, #0]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	4798      	blx	r3
 8003dcc:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003dce:	4604      	mov	r4, r0
 8003dd0:	f8c0 b004 	str.w	fp, [r0, #4]
 8003dd4:	f880 b008 	strb.w	fp, [r0, #8]
 8003dd8:	4659      	mov	r1, fp
 8003dda:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003ddc:	68b0      	ldr	r0, [r6, #8]
 8003dde:	6803      	ldr	r3, [r0, #0]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	4798      	blx	r3
 8003de4:	4605      	mov	r5, r0
 8003de6:	f000 fbf9 	bl	80045dc <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003dea:	6870      	ldr	r0, [r6, #4]
 8003dec:	4659      	mov	r1, fp
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	4798      	blx	r3
 8003df4:	4606      	mov	r6, r0
 8003df6:	4629      	mov	r1, r5
 8003df8:	f000 fbce 	bl	8004598 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003dfc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003dfe:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003e02:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003e04:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003e08:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003e0c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003e10:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003e12:	f8c6 a008 	str.w	sl, [r6, #8]
 8003e16:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003e18:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003e1a:	4798      	blx	r3
    newPresenter->activate();
 8003e1c:	6833      	ldr	r3, [r6, #0]
 8003e1e:	4630      	mov	r0, r6
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f012 fe22 	bl	8016a70 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	4798      	blx	r3
    newTransition->invalidate();
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	4620      	mov	r0, r4
 8003e38:	695b      	ldr	r3, [r3, #20]
}
 8003e3a:	b001      	add	sp, #4
 8003e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	4718      	bx	r3
 8003e42:	bf00      	nop
 8003e44:	08026f86 	.word	0x08026f86
 8003e48:	08027014 	.word	0x08027014
 8003e4c:	080270e6 	.word	0x080270e6
 8003e50:	0802713b 	.word	0x0802713b
 8003e54:	080271de 	.word	0x080271de
 8003e58:	08027ebc 	.word	0x08027ebc
 8003e5c:	240253fc 	.word	0x240253fc
 8003e60:	240253f8 	.word	0x240253f8

08003e64 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003e6c:	b10a      	cbz	r2, 8003e72 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003e6e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003e70:	b900      	cbnz	r0, 8003e74 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003e72:	6898      	ldr	r0, [r3, #8]
    }
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	240253b4 	.word	0x240253b4

08003e7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4616      	mov	r6, r2
 8003e80:	4604      	mov	r4, r0
 8003e82:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 8003e84:	f010 fc56 	bl	8014734 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003e88:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003e8a:	2100      	movs	r1, #0
        instance = this;
 8003e8c:	601c      	str	r4, [r3, #0]
      model(m)
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003e90:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003e92:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003e94:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003ea0:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003ea2:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 8003ea6:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003ea8:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003eac:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003eae:	f7ff ffd9 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8003eb2:	f018 fe36 	bl	801cb22 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003eb6:	f7ff ffd5 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8003eba:	f018 fea9 	bl	801cc10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003ebe:	f7ff ffd1 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8003ec2:	f018 feb1 	bl	801cc28 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	bf00      	nop
 8003ecc:	24025408 	.word	0x24025408
 8003ed0:	08027e68 	.word	0x08027e68
 8003ed4:	08027e50 	.word	0x08027e50
 8003ed8:	240253b4 	.word	0x240253b4

08003edc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003ede:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003ee2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003eec:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003ef0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	08003d19 	.word	0x08003d19

08003efc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003efc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003efe:	4770      	bx	lr

08003f00 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003f00:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003f02:	4770      	bx	lr

08003f04 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003f04:	4770      	bx	lr

08003f06 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8003f06:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003f08:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8003f0a:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003f0c:	0ad2      	lsrs	r2, r2, #11
{
 8003f0e:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 8003f10:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003f12:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8003f14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8003f18:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8003f1c:	4418      	add	r0, r3
 8003f1e:	bd10      	pop	{r4, pc}

08003f20 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003f24:	b1ba      	cbz	r2, 8003f56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003f26:	7b10      	ldrb	r0, [r2, #12]
 8003f28:	b168      	cbz	r0, 8003f46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003f2a:	7b53      	ldrb	r3, [r2, #13]
 8003f2c:	7ad2      	ldrb	r2, [r2, #11]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003f34:	431a      	orrs	r2, r3
 8003f36:	6a23      	ldr	r3, [r4, #32]
 8003f38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	428a      	cmp	r2, r1
 8003f40:	d102      	bne.n	8003f48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003f42:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003f46:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003f48:	d805      	bhi.n	8003f56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003f4a:	3801      	subs	r0, #1
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	b280      	uxth	r0, r0
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d1f3      	bne.n	8003f3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003f54:	e7f7      	b.n	8003f46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003f56:	2000      	movs	r0, #0
 8003f58:	e7f5      	b.n	8003f46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003f5a <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	212c      	movs	r1, #44	@ 0x2c
 8003f60:	f020 f81d 	bl	8023f9e <_ZdlPvj>
 8003f64:	4620      	mov	r0, r4
 8003f66:	bd10      	pop	{r4, pc}

08003f68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	b08b      	sub	sp, #44	@ 0x2c
 8003f6c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003f6e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003f72:	9508      	str	r5, [sp, #32]
 8003f74:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003f78:	9507      	str	r5, [sp, #28]
 8003f7a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003f7e:	9506      	str	r5, [sp, #24]
 8003f80:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003f84:	9505      	str	r5, [sp, #20]
 8003f86:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003f8a:	9504      	str	r5, [sp, #16]
 8003f8c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003f90:	9503      	str	r5, [sp, #12]
 8003f92:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003f96:	9502      	str	r5, [sp, #8]
 8003f98:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003f9c:	9501      	str	r5, [sp, #4]
 8003f9e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003fa2:	9500      	str	r5, [sp, #0]
 8003fa4:	f012 f910 	bl	80161c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003fa8:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003faa:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003fac:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003fae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003fb0:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003fb2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003fb4:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003fb8:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003fba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003fbe:	b00b      	add	sp, #44	@ 0x2c
 8003fc0:	bd30      	pop	{r4, r5, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08027ee0 	.word	0x08027ee0

08003fc8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003fc8:	4770      	bx	lr

08003fca <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003fca:	4770      	bx	lr

08003fcc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003fcc:	4770      	bx	lr

08003fce <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003fce:	4770      	bx	lr

08003fd0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003fd0:	4770      	bx	lr

08003fd2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003fd2:	4770      	bx	lr

08003fd4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003fd4:	4770      	bx	lr

08003fd6 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	4604      	mov	r4, r0
}
 8003fda:	f44f 711d 	mov.w	r1, #628	@ 0x274
 8003fde:	f01f ffde 	bl	8023f9e <_ZdlPvj>
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003fe6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4604      	mov	r4, r0
        setX(x);
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003fee:	4615      	mov	r5, r2
        setX(x);
 8003ff0:	4798      	blx	r3
        setY(y);
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003ffe:	4718      	bx	r3

08004000 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	461d      	mov	r5, r3
 8004006:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800400a:	f7ff ffec 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	4629      	mov	r1, r5
 8004012:	4620      	mov	r0, r4
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	4798      	blx	r3
        setHeight(height);
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	4631      	mov	r1, r6
 800401c:	4620      	mov	r0, r4
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8004020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004024:	4718      	bx	r3
	...

08004028 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8004028:	2300      	movs	r3, #0
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800402a:	b510      	push	{r4, lr}
 800402c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004030:	e9c0 3303 	strd	r3, r3, [r0, #12]
          cachedAbsX(0),
 8004034:	e9c0 3307 	strd	r3, r3, [r0, #28]
          nextSibling(0),
 8004038:	e9c0 3305 	strd	r3, r3, [r0, #20]
          touchable(false),
 800403c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004040:	4604      	mov	r4, r0
 8004042:	8483      	strh	r3, [r0, #36]	@ 0x24
        : Widget(), bitmap(bmp), alpha(255)
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x34>)
 8004046:	6003      	str	r3, [r0, #0]
 8004048:	880b      	ldrh	r3, [r1, #0]
 800404a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800404c:	23ff      	movs	r3, #255	@ 0xff
 800404e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 8004052:	f00e fb0e 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004056:	4620      	mov	r0, r4
 8004058:	bd10      	pop	{r4, pc}
 800405a:	bf00      	nop
 800405c:	080288d4 	.word	0x080288d4

08004060 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b085      	sub	sp, #20
 8004066:	4604      	mov	r4, r0
        : presenter(0)
 8004068:	f012 fb56 	bl	8016718 <_ZN8touchgfx6ScreenC1Ev>
 800406c:	4b56      	ldr	r3, [pc, #344]	@ (80041c8 <_ZN15Screen1ViewBaseC1Ev+0x168>)
 800406e:	2500      	movs	r5, #0
 8004070:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	f104 0698 	add.w	r6, r4, #152	@ 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800407a:	4b54      	ldr	r3, [pc, #336]	@ (80041cc <_ZN15Screen1ViewBaseC1Ev+0x16c>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800407c:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8004080:	f504 770e 	add.w	r7, r4, #568	@ 0x238
 8004084:	a903      	add	r1, sp, #12
 8004086:	4650      	mov	r0, sl
 8004088:	63e5      	str	r5, [r4, #60]	@ 0x3c
          cachedAbsX(0),
 800408a:	6625      	str	r5, [r4, #96]	@ 0x60
    __background.setPosition(0, 0, 800, 480);
 800408c:	f104 0b40 	add.w	fp, r4, #64	@ 0x40
        : color(col)
 8004090:	66a5      	str	r5, [r4, #104]	@ 0x68
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004092:	f104 0904 	add.w	r9, r4, #4
 8004096:	f8ad 800c 	strh.w	r8, [sp, #12]
        : x(0), y(0), width(0), height(0)
 800409a:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 800409e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040a2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 80040a6:	23ff      	movs	r3, #255	@ 0xff
 80040a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 80040ac:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
          parent(0),
 80040b0:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 80040b4:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
Screen1ViewBase::Screen1ViewBase()
 80040b8:	f7ff ffb6 	bl	8004028 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80040bc:	4630      	mov	r0, r6
 80040be:	f00e f993 	bl	80123e8 <_ZN8touchgfx5GaugeC1Ev>
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 80040c2:	a903      	add	r1, sp, #12
 80040c4:	4638      	mov	r0, r7
 80040c6:	f8ad 800c 	strh.w	r8, [sp, #12]
 80040ca:	f7ff ffad 	bl	8004028 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80040ce:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <_ZN15Screen1ViewBaseC1Ev+0x170>)
          updateTicksInterval(updateInterval),
 80040d0:	f04f 0801 	mov.w	r8, #1
    __background.setPosition(0, 0, 800, 480);
 80040d4:	462a      	mov	r2, r5
          running(false)
 80040d6:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
          updateTicksInterval(updateInterval),
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	4629      	mov	r1, r5
 80040e0:	4658      	mov	r0, fp
        : animationDoneAction(0),
 80040e2:	f8c4 5264 	str.w	r5, [r4, #612]	@ 0x264
          running(false)
 80040e6:	f884 5270 	strb.w	r5, [r4, #624]	@ 0x270
          updateTicksInterval(updateInterval),
 80040ea:	e9c4 389a 	strd	r3, r8, [r4, #616]	@ 0x268
 80040ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80040f8:	f7ff ff82 	bl	8004000 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80040fc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004100:	4659      	mov	r1, fp
 8004102:	4648      	mov	r0, r9
 8004104:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004106:	f00b f9e5 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-54, -120);
 800410a:	f06f 0277 	mvn.w	r2, #119	@ 0x77
 800410e:	4650      	mov	r0, sl
 8004110:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8004114:	f7ff ff67 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_WAVES_ID));
 8004118:	a903      	add	r1, sp, #12
 800411a:	4650      	mov	r0, sl
 800411c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8004120:	f00e faa7 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004124:	4651      	mov	r1, sl
 8004126:	4648      	mov	r0, r9
 8004128:	f00b f9d4 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_BACKGROUNDS_ACTIVE_ID));
 800412c:	a903      	add	r1, sp, #12
 800412e:	4630      	mov	r0, r6
 8004130:	f8ad 800c 	strh.w	r8, [sp, #12]
 8004134:	f00b f960 	bl	800f3f8 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(458, 102, 240, 277);
 8004138:	f240 1315 	movw	r3, #277	@ 0x115
 800413c:	4630      	mov	r0, r6
 800413e:	2266      	movs	r2, #102	@ 0x66
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8004146:	23f0      	movs	r3, #240	@ 0xf0
 8004148:	f7ff ff5a 	bl	8004000 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(120, 120);
 800414c:	2278      	movs	r2, #120	@ 0x78
 800414e:	4630      	mov	r0, r6
 8004150:	4611      	mov	r1, r2
 8004152:	f00e f9f4 	bl	801253e <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-113, 112);
 8004156:	4630      	mov	r0, r6
 8004158:	2270      	movs	r2, #112	@ 0x70
 800415a:	f06f 0170 	mvn.w	r1, #112	@ 0x70
 800415e:	f00e fa73 	bl	8012648 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8004162:	462b      	mov	r3, r5
 8004164:	2264      	movs	r2, #100	@ 0x64
 8004166:	4629      	mov	r1, r5
 8004168:	4630      	mov	r0, r6
 800416a:	9500      	str	r5, [sp, #0]
 800416c:	f00a fff1 	bl	800f152 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8004170:	4629      	mov	r1, r5
 8004172:	4630      	mov	r0, r6
 8004174:	f00e fa12 	bl	801259c <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_SMOOTH_ID, 7, 67);
 8004178:	2343      	movs	r3, #67	@ 0x43
 800417a:	2207      	movs	r2, #7
 800417c:	4630      	mov	r0, r6
 800417e:	2102      	movs	r1, #2
 8004180:	f00e f9c8 	bl	8012514 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8004184:	4641      	mov	r1, r8
 8004186:	4630      	mov	r0, r6
 8004188:	f00e f966 	bl	8012458 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 800418c:	4641      	mov	r1, r8
 800418e:	4630      	mov	r0, r6
 8004190:	f00e f965 	bl	801245e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
 8004194:	4631      	mov	r1, r6
 8004196:	4648      	mov	r0, r9
 8004198:	f00b f99c 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    animatedImage1.setXY(121, 161);
 800419c:	4638      	mov	r0, r7
 800419e:	22a1      	movs	r2, #161	@ 0xa1
 80041a0:	2179      	movs	r1, #121	@ 0x79
 80041a2:	f7ff ff20 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
    animatedImage1.setBitmaps(BITMAP_FRAME_00_DELAY_0_05S_ID, BITMAP_FRAME_58_DELAY_0_05S_ID);
 80041a6:	223d      	movs	r2, #61	@ 0x3d
 80041a8:	4638      	mov	r0, r7
 80041aa:	2103      	movs	r1, #3
 80041ac:	f00e f880 	bl	80122b0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(1);
 80041b0:	4641      	mov	r1, r8
 80041b2:	4638      	mov	r0, r7
 80041b4:	f00e f88f 	bl	80122d6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
 80041b8:	4648      	mov	r0, r9
 80041ba:	4639      	mov	r1, r7
 80041bc:	f00b f98a 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80041c0:	4620      	mov	r0, r4
 80041c2:	b005      	add	sp, #20
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	08027f48 	.word	0x08027f48
 80041cc:	08028784 	.word	0x08028784
 80041d0:	08028708 	.word	0x08028708

080041d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041d4:	4770      	bx	lr
	...

080041d8 <_Z23getFont_verdana_10_4bppv>:
{
 80041d8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041da:	4d16      	ldr	r5, [pc, #88]	@ (8004234 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80041dc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041de:	682c      	ldr	r4, [r5, #0]
 80041e0:	f3bf 8f5b 	dmb	ish
 80041e4:	f014 0401 	ands.w	r4, r4, #1
 80041e8:	d120      	bne.n	800422c <_Z23getFont_verdana_10_4bppv+0x54>
 80041ea:	4628      	mov	r0, r5
 80041ec:	f01f fed9 	bl	8023fa2 <__cxa_guard_acquire>
 80041f0:	b1e0      	cbz	r0, 800422c <_Z23getFont_verdana_10_4bppv+0x54>
 80041f2:	233f      	movs	r3, #63	@ 0x3f
 80041f4:	2201      	movs	r2, #1
 80041f6:	4910      	ldr	r1, [pc, #64]	@ (8004238 <_Z23getFont_verdana_10_4bppv+0x60>)
 80041f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <_Z23getFont_verdana_10_4bppv+0x64>)
 80041fc:	4810      	ldr	r0, [pc, #64]	@ (8004240 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041fe:	9308      	str	r3, [sp, #32]
 8004200:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004202:	940a      	str	r4, [sp, #40]	@ 0x28
 8004204:	9405      	str	r4, [sp, #20]
 8004206:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800420a:	2304      	movs	r3, #4
 800420c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004210:	230a      	movs	r3, #10
 8004212:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800421c:	f7ff fea4 	bl	8003f68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004220:	4809      	ldr	r0, [pc, #36]	@ (8004248 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004222:	f020 fa53 	bl	80246cc <atexit>
 8004226:	4628      	mov	r0, r5
 8004228:	f01f fec7 	bl	8023fba <__cxa_guard_release>
    return verdana_10_4bpp;
}
 800422c:	4804      	ldr	r0, [pc, #16]	@ (8004240 <_Z23getFont_verdana_10_4bppv+0x68>)
 800422e:	b00f      	add	sp, #60	@ 0x3c
 8004230:	bd30      	pop	{r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	2400b2f8 	.word	0x2400b2f8
 8004238:	08029284 	.word	0x08029284
 800423c:	080292b4 	.word	0x080292b4
 8004240:	2400b2fc 	.word	0x2400b2fc
 8004244:	080292c0 	.word	0x080292c0
 8004248:	080041d5 	.word	0x080041d5

0800424c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800424c:	4770      	bx	lr
	...

08004250 <_Z23getFont_verdana_20_4bppv>:
{
 8004250:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004252:	4d16      	ldr	r5, [pc, #88]	@ (80042ac <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004254:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004256:	682c      	ldr	r4, [r5, #0]
 8004258:	f3bf 8f5b 	dmb	ish
 800425c:	f014 0401 	ands.w	r4, r4, #1
 8004260:	d120      	bne.n	80042a4 <_Z23getFont_verdana_20_4bppv+0x54>
 8004262:	4628      	mov	r0, r5
 8004264:	f01f fe9d 	bl	8023fa2 <__cxa_guard_acquire>
 8004268:	b1e0      	cbz	r0, 80042a4 <_Z23getFont_verdana_20_4bppv+0x54>
 800426a:	233f      	movs	r3, #63	@ 0x3f
 800426c:	2201      	movs	r2, #1
 800426e:	4910      	ldr	r1, [pc, #64]	@ (80042b0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004270:	9309      	str	r3, [sp, #36]	@ 0x24
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004274:	4810      	ldr	r0, [pc, #64]	@ (80042b8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004276:	9308      	str	r3, [sp, #32]
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <_Z23getFont_verdana_20_4bppv+0x6c>)
 800427a:	940a      	str	r4, [sp, #40]	@ 0x28
 800427c:	9405      	str	r4, [sp, #20]
 800427e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004282:	2304      	movs	r3, #4
 8004284:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004288:	2314      	movs	r3, #20
 800428a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004294:	f7ff fe68 	bl	8003f68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004298:	4809      	ldr	r0, [pc, #36]	@ (80042c0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800429a:	f020 fa17 	bl	80246cc <atexit>
 800429e:	4628      	mov	r0, r5
 80042a0:	f01f fe8b 	bl	8023fba <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80042a4:	4804      	ldr	r0, [pc, #16]	@ (80042b8 <_Z23getFont_verdana_20_4bppv+0x68>)
 80042a6:	b00f      	add	sp, #60	@ 0x3c
 80042a8:	bd30      	pop	{r4, r5, pc}
 80042aa:	bf00      	nop
 80042ac:	2400b328 	.word	0x2400b328
 80042b0:	08029294 	.word	0x08029294
 80042b4:	080292b8 	.word	0x080292b8
 80042b8:	2400b32c 	.word	0x2400b32c
 80042bc:	080292c4 	.word	0x080292c4
 80042c0:	0800424d 	.word	0x0800424d

080042c4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042c4:	4770      	bx	lr
	...

080042c8 <_Z23getFont_verdana_40_4bppv>:
{
 80042c8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042ca:	4d16      	ldr	r5, [pc, #88]	@ (8004324 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80042cc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042ce:	682c      	ldr	r4, [r5, #0]
 80042d0:	f3bf 8f5b 	dmb	ish
 80042d4:	f014 0401 	ands.w	r4, r4, #1
 80042d8:	d120      	bne.n	800431c <_Z23getFont_verdana_40_4bppv+0x54>
 80042da:	4628      	mov	r0, r5
 80042dc:	f01f fe61 	bl	8023fa2 <__cxa_guard_acquire>
 80042e0:	b1e0      	cbz	r0, 800431c <_Z23getFont_verdana_40_4bppv+0x54>
 80042e2:	233f      	movs	r3, #63	@ 0x3f
 80042e4:	2201      	movs	r2, #1
 80042e6:	4910      	ldr	r1, [pc, #64]	@ (8004328 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <_Z23getFont_verdana_40_4bppv+0x64>)
 80042ec:	4810      	ldr	r0, [pc, #64]	@ (8004330 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042ee:	9308      	str	r3, [sp, #32]
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80042f4:	9405      	str	r4, [sp, #20]
 80042f6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80042fa:	2304      	movs	r3, #4
 80042fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004300:	2328      	movs	r3, #40	@ 0x28
 8004302:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800430c:	f7ff fe2c 	bl	8003f68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004310:	4809      	ldr	r0, [pc, #36]	@ (8004338 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004312:	f020 f9db 	bl	80246cc <atexit>
 8004316:	4628      	mov	r0, r5
 8004318:	f01f fe4f 	bl	8023fba <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800431c:	4804      	ldr	r0, [pc, #16]	@ (8004330 <_Z23getFont_verdana_40_4bppv+0x68>)
 800431e:	b00f      	add	sp, #60	@ 0x3c
 8004320:	bd30      	pop	{r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	2400b358 	.word	0x2400b358
 8004328:	080292a4 	.word	0x080292a4
 800432c:	080292bc 	.word	0x080292bc
 8004330:	2400b35c 	.word	0x2400b35c
 8004334:	080292c8 	.word	0x080292c8
 8004338:	080042c5 	.word	0x080042c5

0800433c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800433c:	2000      	movs	r0, #0
 800433e:	4770      	bx	lr

08004340 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004340:	2000      	movs	r0, #0
 8004342:	4770      	bx	lr

08004344 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	b503      	push	{r0, r1, lr}
 8004348:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800434a:	2100      	movs	r1, #0
{
 800434c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004350:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004352:	f011 f9b7 	bl	80156c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004356:	b002      	add	sp, #8
 8004358:	f85d eb04 	ldr.w	lr, [sp], #4
 800435c:	b003      	add	sp, #12
 800435e:	4770      	bx	lr

08004360 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004360:	b40c      	push	{r2, r3}
 8004362:	b507      	push	{r0, r1, r2, lr}
 8004364:	ab04      	add	r3, sp, #16
 8004366:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800436a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800436c:	f011 f9aa 	bl	80156c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004370:	b003      	add	sp, #12
 8004372:	f85d eb04 	ldr.w	lr, [sp], #4
 8004376:	b002      	add	sp, #8
 8004378:	4770      	bx	lr
	...

0800437c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800437c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800437e:	b510      	push	{r4, lr}
 8004380:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004382:	b373      	cbz	r3, 80043e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004384:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004386:	b92b      	cbnz	r3, 8004394 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800438a:	21c5      	movs	r1, #197	@ 0xc5
 800438c:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800438e:	4819      	ldr	r0, [pc, #100]	@ (80043f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004390:	f020 f97e 	bl	8024690 <__assert_func>
            return buffer[pos];
 8004394:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004396:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800439a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800439c:	b30b      	cbz	r3, 80043e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800439e:	f013 f88d 	bl	80174bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80043a2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d803      	bhi.n	80043b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80043aa:	21cb      	movs	r1, #203	@ 0xcb
 80043ac:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80043ae:	e7ee      	b.n	800438e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80043b0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80043b2:	f640 103f 	movw	r0, #2367	@ 0x93f
 80043b6:	1c53      	adds	r3, r2, #1
 80043b8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	4619      	mov	r1, r3
 80043be:	bf88      	it	hi
 80043c0:	f1a3 010a 	subhi.w	r1, r3, #10
 80043c4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80043c8:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80043ca:	4281      	cmp	r1, r0
 80043cc:	d109      	bne.n	80043e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80043ce:	2b0a      	cmp	r3, #10
 80043d0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80043d4:	bf28      	it	cs
 80043d6:	2300      	movcs	r3, #0
            return buffer[pos];
 80043d8:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 80043da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043de:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80043e0:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80043e2:	4620      	mov	r0, r4
}
 80043e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80043e8:	f012 bf6a 	b.w	80172c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80043ec:	08027281 	.word	0x08027281
 80043f0:	0802728a 	.word	0x0802728a
 80043f4:	08027335 	.word	0x08027335
 80043f8:	0802738d 	.word	0x0802738d
 80043fc:	0802739b 	.word	0x0802739b

08004400 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004400:	f012 bf27 	b.w	8017252 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004404 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004404:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004406:	bb18      	cbnz	r0, 8004450 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004408:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800440a:	4813      	ldr	r0, [pc, #76]	@ (8004458 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800440c:	681c      	ldr	r4, [r3, #0]
 800440e:	4913      	ldr	r1, [pc, #76]	@ (800445c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004410:	b1b4      	cbz	r4, 8004440 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	4422      	add	r2, r4
 8004416:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004418:	6862      	ldr	r2, [r4, #4]
 800441a:	4422      	add	r2, r4
 800441c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800441e:	68a2      	ldr	r2, [r4, #8]
 8004420:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004424:	2200      	movs	r2, #0
 8004426:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004428:	f000 f82a 	bl	8004480 <_ZN17TypedTextDatabase8getFontsEv>
 800442c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800442e:	f000 f825 	bl	800447c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004434:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004436:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004438:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800443a:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800443c:	8018      	strh	r0, [r3, #0]
    }
}
 800443e:	e007      	b.n	8004450 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004442:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004446:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800444a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800444c:	2c00      	cmp	r4, #0
 800444e:	d1e8      	bne.n	8004422 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004450:	bd38      	pop	{r3, r4, r5, pc}
 8004452:	bf00      	nop
 8004454:	2400b394 	.word	0x2400b394
 8004458:	2400b38c 	.word	0x2400b38c
 800445c:	2400b388 	.word	0x2400b388
 8004460:	2400b390 	.word	0x2400b390
 8004464:	2402540c 	.word	0x2402540c
 8004468:	24025414 	.word	0x24025414
 800446c:	24025410 	.word	0x24025410
 8004470:	9064453c 	.word	0x9064453c
 8004474:	90644538 	.word	0x90644538
 8004478:	90644540 	.word	0x90644540

0800447c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 800447c:	2000      	movs	r0, #0
 800447e:	4770      	bx	lr

08004480 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004480:	4800      	ldr	r0, [pc, #0]	@ (8004484 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004482:	4770      	bx	lr
 8004484:	2400b398 	.word	0x2400b398

08004488 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004488:	b510      	push	{r4, lr}
};
 800448a:	4c05      	ldr	r4, [pc, #20]	@ (80044a0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 800448c:	f7ff fee0 	bl	8004250 <_Z23getFont_verdana_20_4bppv>
};
 8004490:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004492:	f7ff ff19 	bl	80042c8 <_Z23getFont_verdana_40_4bppv>
};
 8004496:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004498:	f7ff fe9e 	bl	80041d8 <_Z23getFont_verdana_10_4bppv>
};
 800449c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800449e:	bd10      	pop	{r4, pc}
 80044a0:	2400b398 	.word	0x2400b398

080044a4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 80044a4:	b510      	push	{r4, lr}
    pointArray = 0;
 80044a6:	2400      	movs	r4, #0
 80044a8:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80044aa:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80044ac:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80044ae:	601c      	str	r4, [r3, #0]
}
 80044b0:	bd10      	pop	{r4, pc}

080044b2 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80044b2:	4770      	bx	lr

080044b4 <_ZN19FrontendApplicationD0Ev>:
 80044b4:	b510      	push	{r4, lr}
 80044b6:	4604      	mov	r4, r0
 80044b8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80044bc:	f01f fd6f 	bl	8023f9e <_ZdlPvj>
 80044c0:	4620      	mov	r0, r4
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4604      	mov	r4, r0
    {
        model.tick();
 80044c8:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80044cc:	f000 f816 	bl	80044fc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80044d0:	4620      	mov	r0, r4
    }
 80044d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80044d6:	f010 b8b9 	b.w	801464c <_ZN8touchgfx11Application15handleTickEventEv>
	...

080044dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80044dc:	b510      	push	{r4, lr}
 80044de:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80044e0:	f7ff fccc 	bl	8003e7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80044e4:	4b01      	ldr	r3, [pc, #4]	@ (80044ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80044e6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80044e8:	6023      	str	r3, [r4, #0]
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	08027f7c 	.word	0x08027f7c

080044f0 <_ZN5ModelC1Ev>:

}

#endif

Model::Model() : modelListener(0), ADC_Value(30), Button_state(false)
 80044f0:	2200      	movs	r2, #0
 80044f2:	6002      	str	r2, [r0, #0]
 80044f4:	7102      	strb	r2, [r0, #4]
 80044f6:	221e      	movs	r2, #30
 80044f8:	6082      	str	r2, [r0, #8]
{

}
 80044fa:	4770      	bx	lr

080044fc <_ZN5Model4tickEv>:

void Model::tick()
{
 80044fc:	b570      	push	{r4, r5, r6, lr}

#ifndef SIMULATION

	if(osMessageQueueGetCount(ADCQueueHandle)>0){
 80044fe:	4d14      	ldr	r5, [pc, #80]	@ (8004550 <_ZN5Model4tickEv+0x54>)
{
 8004500:	4604      	mov	r4, r0
	if(osMessageQueueGetCount(ADCQueueHandle)>0){
 8004502:	6828      	ldr	r0, [r5, #0]
 8004504:	f008 fe1a 	bl	800d13c <osMessageQueueGetCount>
 8004508:	b160      	cbz	r0, 8004524 <_ZN5Model4tickEv+0x28>

		if(osMessageQueueGet(ADCQueueHandle, &ADC_Value, 0, 0) == osOK){
 800450a:	2300      	movs	r3, #0
 800450c:	f104 0108 	add.w	r1, r4, #8
 8004510:	6828      	ldr	r0, [r5, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f008 fde2 	bl	800d0dc <osMessageQueueGet>
 8004518:	b920      	cbnz	r0, 8004524 <_ZN5Model4tickEv+0x28>

				modelListener->setVolume(ADC_Value);
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	68a1      	ldr	r1, [r4, #8]
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4798      	blx	r3
		}

	}

	static int button;
	if(osMessageQueueGet(ButtonQueueHandle, &button, 0, 0)  == osOK){
 8004524:	4d0b      	ldr	r5, [pc, #44]	@ (8004554 <_ZN5Model4tickEv+0x58>)
 8004526:	2300      	movs	r3, #0
 8004528:	480b      	ldr	r0, [pc, #44]	@ (8004558 <_ZN5Model4tickEv+0x5c>)
 800452a:	461a      	mov	r2, r3
 800452c:	4629      	mov	r1, r5
 800452e:	6800      	ldr	r0, [r0, #0]
 8004530:	f008 fdd4 	bl	800d0dc <osMessageQueueGet>
 8004534:	b950      	cbnz	r0, 800454c <_ZN5Model4tickEv+0x50>

		if(button) Button_state = true;
 8004536:	6829      	ldr	r1, [r5, #0]
		else Button_state = false;

		modelListener->setButton(Button_state);
 8004538:	6820      	ldr	r0, [r4, #0]
		if(button) Button_state = true;
 800453a:	3900      	subs	r1, #0
		modelListener->setButton(Button_state);
 800453c:	6803      	ldr	r3, [r0, #0]
		if(button) Button_state = true;
 800453e:	bf18      	it	ne
 8004540:	2101      	movne	r1, #1
		modelListener->setButton(Button_state);
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	7121      	strb	r1, [r4, #4]
	}

#endif
}
 8004546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->setButton(Button_state);
 800454a:	4718      	bx	r3
}
 800454c:	bd70      	pop	{r4, r5, r6, pc}
 800454e:	bf00      	nop
 8004550:	24009994 	.word	0x24009994
 8004554:	2400b3a4 	.word	0x2400b3a4
 8004558:	24009998 	.word	0x24009998

0800455c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800455c:	4770      	bx	lr

0800455e <_ZThn4_N16Screen1PresenterD1Ev>:
 800455e:	3804      	subs	r0, #4
 8004560:	4770      	bx	lr

08004562 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004562:	4770      	bx	lr

08004564 <_ZN16Screen1Presenter9setVolumeEi>:
}

void Screen1Presenter::setVolume(int val){


	view.setVolume(val);
 8004564:	68c0      	ldr	r0, [r0, #12]
 8004566:	6803      	ldr	r3, [r0, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	4718      	bx	r3

0800456c <_ZThn4_N16Screen1Presenter9setVolumeEi>:

    virtual void setVolume(int val);
 800456c:	f1a0 0004 	sub.w	r0, r0, #4
 8004570:	f7ff bff8 	b.w	8004564 <_ZN16Screen1Presenter9setVolumeEi>

08004574 <_ZN16Screen1Presenter9setButtonEb>:
}
void Screen1Presenter::setButton(bool btnState){

	view.setButton(btnState);
 8004574:	68c0      	ldr	r0, [r0, #12]
 8004576:	6803      	ldr	r3, [r0, #0]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	4718      	bx	r3

0800457c <_ZThn4_N16Screen1Presenter9setButtonEb>:
    virtual void setButton(bool btnState);
 800457c:	f1a0 0004 	sub.w	r0, r0, #4
 8004580:	f7ff bff8 	b.w	8004574 <_ZN16Screen1Presenter9setButtonEb>

08004584 <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {}
 8004584:	b510      	push	{r4, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	2110      	movs	r1, #16
 800458a:	f01f fd08 	bl	8023f9e <_ZdlPvj>
 800458e:	4620      	mov	r0, r4
 8004590:	bd10      	pop	{r4, pc}

08004592 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004592:	f1a0 0004 	sub.w	r0, r0, #4
 8004596:	e7f5      	b.n	8004584 <_ZN16Screen1PresenterD0Ev>

08004598 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004598:	2200      	movs	r2, #0
    : view(v)
 800459a:	60c1      	str	r1, [r0, #12]
 800459c:	6082      	str	r2, [r0, #8]
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80045a0:	6002      	str	r2, [r0, #0]
 80045a2:	3220      	adds	r2, #32
 80045a4:	6042      	str	r2, [r0, #4]
}
 80045a6:	4770      	bx	lr
 80045a8:	08027fd0 	.word	0x08027fd0

080045ac <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80045ac:	4770      	bx	lr
	...

080045b0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80045b0:	4b03      	ldr	r3, [pc, #12]	@ (80045c0 <_ZN11Screen1ViewD1Ev+0x10>)
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	6003      	str	r3, [r0, #0]
 80045b8:	f7ff fd0b 	bl	8003fd2 <_ZN15Screen1ViewBaseD1Ev>
 80045bc:	4620      	mov	r0, r4
 80045be:	bd10      	pop	{r4, pc}
 80045c0:	08028008 	.word	0x08028008

080045c4 <_ZN11Screen1ViewD0Ev>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4604      	mov	r4, r0
 80045c8:	f7ff fff2 	bl	80045b0 <_ZN11Screen1ViewD1Ev>
 80045cc:	f44f 711d 	mov.w	r1, #628	@ 0x274
 80045d0:	4620      	mov	r0, r4
 80045d2:	f01f fce4 	bl	8023f9e <_ZdlPvj>
 80045d6:	4620      	mov	r0, r4
 80045d8:	bd10      	pop	{r4, pc}
	...

080045dc <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80045dc:	b510      	push	{r4, lr}
 80045de:	4604      	mov	r4, r0
 80045e0:	f7ff fd3e 	bl	8004060 <_ZN15Screen1ViewBaseC1Ev>
 80045e4:	4b01      	ldr	r3, [pc, #4]	@ (80045ec <_ZN11Screen1ViewC1Ev+0x10>)
}
 80045e6:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80045e8:	6023      	str	r3, [r4, #0]
}
 80045ea:	bd10      	pop	{r4, pc}
 80045ec:	08028008 	.word	0x08028008

080045f0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80045f0:	f7ff bcf0 	b.w	8003fd4 <_ZN15Screen1ViewBase11setupScreenEv>

080045f4 <_ZN11Screen1View9setVolumeEi>:
void Screen1View::setVolume(int val){
 80045f4:	b510      	push	{r4, lr}

	gauge1.setValue(val);
 80045f6:	f100 0498 	add.w	r4, r0, #152	@ 0x98
 80045fa:	4620      	mov	r0, r4
 80045fc:	f00d ffce 	bl	801259c <_ZN8touchgfx5Gauge8setValueEi>
	gauge1.invalidate();
 8004600:	4620      	mov	r0, r4

}
 8004602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gauge1.invalidate();
 8004606:	f011 b988 	b.w	801591a <_ZNK8touchgfx8Drawable10invalidateEv>

0800460a <_ZN11Screen1View9setButtonEb>:
void Screen1View::setButton(bool btnState){

	if(!(animatedImage1.isAnimatedImageRunning())){
 800460a:	f890 2270 	ldrb.w	r2, [r0, #624]	@ 0x270
 800460e:	b932      	cbnz	r2, 800461e <_ZN11Screen1View9setButtonEb+0x14>
		if(btnState == true){
 8004610:	b151      	cbz	r1, 8004628 <_ZN11Screen1View9setButtonEb+0x1e>
			animatedImage1.startAnimation(false, false, true);
 8004612:	2301      	movs	r3, #1
 8004614:	4611      	mov	r1, r2
 8004616:	f500 700e 	add.w	r0, r0, #568	@ 0x238
 800461a:	f00d bda1 	b.w	8012160 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
		}
	}else if((animatedImage1.isAnimatedImageRunning())){
		if(btnState == false){
 800461e:	b919      	cbnz	r1, 8004628 <_ZN11Screen1View9setButtonEb+0x1e>
			animatedImage1.pauseAnimation();
 8004620:	f500 700e 	add.w	r0, r0, #568	@ 0x238
 8004624:	f00d bdcd 	b.w	80121c2 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>
		}
	}

}
 8004628:	4770      	bx	lr

0800462a <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800462a:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800462c:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8004630:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004632:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004634:	2302      	movs	r3, #2
 8004636:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004638:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800463c:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004640:	4770      	bx	lr

08004642 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004642:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004646:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004648:	bf04      	itt	eq
 800464a:	2300      	moveq	r3, #0
 800464c:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004650:	2000      	movs	r0, #0
 8004652:	4770      	bx	lr

08004654 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004654:	2000      	movs	r0, #0
 8004656:	4770      	bx	lr

08004658 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004658:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800465a:	6904      	ldr	r4, [r0, #16]
 800465c:	8900      	ldrh	r0, [r0, #8]
 800465e:	46a4      	mov	ip, r4
}
 8004660:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004664:	4760      	bx	ip

08004666 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004666:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004668:	68c4      	ldr	r4, [r0, #12]
 800466a:	8900      	ldrh	r0, [r0, #8]
 800466c:	46a4      	mov	ip, r4
}
 800466e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004672:	4760      	bx	ip

08004674 <FT6X06_GestureConfig>:
{
 8004674:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004676:	f100 0518 	add.w	r5, r0, #24
{
 800467a:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800467c:	7809      	ldrb	r1, [r1, #0]
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f912 	bl	80048a8 <ft6x06_radian_value>
 8004684:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004686:	7931      	ldrb	r1, [r6, #4]
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f919 	bl	80048c0 <ft6x06_offset_left_right>
 800468e:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004690:	7a31      	ldrb	r1, [r6, #8]
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f920 	bl	80048d8 <ft6x06_offset_up_down>
 8004698:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800469a:	7b31      	ldrb	r1, [r6, #12]
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f927 	bl	80048f0 <ft6x06_disatnce_left_right>
 80046a2:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80046a4:	7c31      	ldrb	r1, [r6, #16]
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f92e 	bl	8004908 <ft6x06_distance_up_down>
 80046ac:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80046ae:	7d31      	ldrb	r1, [r6, #20]
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f935 	bl	8004920 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80046b6:	42c4      	cmn	r4, r0
}
 80046b8:	bf14      	ite	ne
 80046ba:	f04f 30ff 	movne.w	r0, #4294967295
 80046be:	2000      	moveq	r0, #0
 80046c0:	bd70      	pop	{r4, r5, r6, pc}

080046c2 <FT6X06_ReadID>:
{
 80046c2:	b513      	push	{r0, r1, r4, lr}
 80046c4:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80046c6:	3018      	adds	r0, #24
 80046c8:	f10d 0107 	add.w	r1, sp, #7
 80046cc:	f000 f940 	bl	8004950 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80046d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046d4:	6023      	str	r3, [r4, #0]
}
 80046d6:	b002      	add	sp, #8
 80046d8:	bd10      	pop	{r4, pc}

080046da <FT6X06_GetState>:
{
 80046da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80046dc:	f100 0518 	add.w	r5, r0, #24
{
 80046e0:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80046e2:	a901      	add	r1, sp, #4
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 f8d2 	bl	800488e <ft6x06_td_status>
 80046ea:	bb08      	cbnz	r0, 8004730 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80046ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	bf98      	it	ls
 80046f4:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80046f6:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80046f8:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80046fa:	2103      	movs	r1, #3
 80046fc:	4628      	mov	r0, r5
 80046fe:	eb0d 0203 	add.w	r2, sp, r3
 8004702:	f000 f8b1 	bl	8004868 <ft6x06_read_reg>
 8004706:	b9b0      	cbnz	r0, 8004736 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004708:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800470c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004716:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004718:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800471c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800471e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004728:	4313      	orrs	r3, r2
 800472a:	60a3      	str	r3, [r4, #8]
}
 800472c:	b003      	add	sp, #12
 800472e:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	e7df      	b.n	80046f6 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800473a:	e7f7      	b.n	800472c <FT6X06_GetState+0x52>

0800473c <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800473c:	3018      	adds	r0, #24
 800473e:	f000 b8a1 	b.w	8004884 <ft6x06_gest_id>

08004742 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004742:	2101      	movs	r1, #1
 8004744:	3018      	adds	r0, #24
 8004746:	f000 b8f7 	b.w	8004938 <ft6x06_g_mode>

0800474a <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800474a:	2100      	movs	r1, #0
 800474c:	3018      	adds	r0, #24
 800474e:	f000 b8f3 	b.w	8004938 <ft6x06_g_mode>

08004752 <FT6X06_Init>:
{
 8004752:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004754:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004758:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800475a:	b96b      	cbnz	r3, 8004778 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800475c:	6803      	ldr	r3, [r0, #0]
 800475e:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fff2 	bl	800474a <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004766:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004768:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800476c:	bf18      	it	ne
 800476e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004770:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004774:	4240      	negs	r0, r0
}
 8004776:	bd10      	pop	{r4, pc}
 8004778:	2000      	movs	r0, #0
  return ret;
 800477a:	e7fc      	b.n	8004776 <FT6X06_Init+0x24>

0800477c <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800477c:	2000      	movs	r0, #0
 800477e:	4770      	bx	lr

08004780 <FT6X06_GetMultiTouchState>:
{
 8004780:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004782:	f100 0518 	add.w	r5, r0, #24
{
 8004786:	b085      	sub	sp, #20
 8004788:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800478a:	4628      	mov	r0, r5
 800478c:	a901      	add	r1, sp, #4
 800478e:	f000 f87e 	bl	800488e <ft6x06_td_status>
 8004792:	2800      	cmp	r0, #0
 8004794:	d145      	bne.n	8004822 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004796:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800479a:	2b02      	cmp	r3, #2
 800479c:	bf98      	it	ls
 800479e:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80047a0:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80047a2:	230c      	movs	r3, #12
 80047a4:	aa01      	add	r2, sp, #4
 80047a6:	2103      	movs	r1, #3
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f85d 	bl	8004868 <ft6x06_read_reg>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d13a      	bne.n	8004828 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80047b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80047ba:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80047bc:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80047c2:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047c4:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80047c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80047ca:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047ce:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80047d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047da:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80047dc:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80047e0:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80047e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80047e6:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80047e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80047f0:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80047f2:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80047f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80047f8:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80047fa:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80047fc:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004800:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004802:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800480c:	430b      	orrs	r3, r1
 800480e:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004810:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004814:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004816:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800481e:	b005      	add	sp, #20
 8004820:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	e7bb      	b.n	80047a0 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800482c:	e7f7      	b.n	800481e <FT6X06_GetMultiTouchState+0x9e>
	...

08004830 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004830:	b190      	cbz	r0, 8004858 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004832:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004834:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004836:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004838:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800483a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800483c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800483e:	68ca      	ldr	r2, [r1, #12]
 8004840:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004842:	690a      	ldr	r2, [r1, #16]
 8004844:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004846:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004848:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800484a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800484c:	4a04      	ldr	r2, [pc, #16]	@ (8004860 <FT6X06_RegisterBusIO+0x30>)
 800484e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004850:	4a04      	ldr	r2, [pc, #16]	@ (8004864 <FT6X06_RegisterBusIO+0x34>)
 8004852:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004854:	b103      	cbz	r3, 8004858 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004856:	4718      	bx	r3
}
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	08004659 	.word	0x08004659
 8004864:	08004667 	.word	0x08004667

08004868 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004868:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800486a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800486e:	46a4      	mov	ip, r4
}
 8004870:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004874:	4760      	bx	ip

08004876 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004876:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004878:	6804      	ldr	r4, [r0, #0]
 800487a:	6880      	ldr	r0, [r0, #8]
 800487c:	46a4      	mov	ip, r4
}
 800487e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004882:	4760      	bx	ip

08004884 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004884:	2301      	movs	r3, #1
{
 8004886:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004888:	4619      	mov	r1, r3
 800488a:	f7ff bfed 	b.w	8004868 <ft6x06_read_reg>

0800488e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800488e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004890:	460a      	mov	r2, r1
{
 8004892:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004894:	2301      	movs	r3, #1
 8004896:	2102      	movs	r1, #2
 8004898:	f7ff ffe6 	bl	8004868 <ft6x06_read_reg>
  
  if(ret == 0)
 800489c:	b918      	cbnz	r0, 80048a6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800489e:	7823      	ldrb	r3, [r4, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80048a8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80048aa:	2301      	movs	r3, #1
{
 80048ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80048b0:	f10d 0207 	add.w	r2, sp, #7
 80048b4:	2191      	movs	r1, #145	@ 0x91
 80048b6:	f7ff ffde 	bl	8004876 <ft6x06_write_reg>
}
 80048ba:	b003      	add	sp, #12
 80048bc:	f85d fb04 	ldr.w	pc, [sp], #4

080048c0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80048c0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80048c2:	2301      	movs	r3, #1
{
 80048c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80048c8:	f10d 0207 	add.w	r2, sp, #7
 80048cc:	2192      	movs	r1, #146	@ 0x92
 80048ce:	f7ff ffd2 	bl	8004876 <ft6x06_write_reg>
}
 80048d2:	b003      	add	sp, #12
 80048d4:	f85d fb04 	ldr.w	pc, [sp], #4

080048d8 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80048d8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80048da:	2301      	movs	r3, #1
{
 80048dc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80048e0:	f10d 0207 	add.w	r2, sp, #7
 80048e4:	2193      	movs	r1, #147	@ 0x93
 80048e6:	f7ff ffc6 	bl	8004876 <ft6x06_write_reg>
}
 80048ea:	b003      	add	sp, #12
 80048ec:	f85d fb04 	ldr.w	pc, [sp], #4

080048f0 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80048f0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80048f2:	2301      	movs	r3, #1
{
 80048f4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80048f8:	f10d 0207 	add.w	r2, sp, #7
 80048fc:	2194      	movs	r1, #148	@ 0x94
 80048fe:	f7ff ffba 	bl	8004876 <ft6x06_write_reg>
}
 8004902:	b003      	add	sp, #12
 8004904:	f85d fb04 	ldr.w	pc, [sp], #4

08004908 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004908:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800490a:	2301      	movs	r3, #1
{
 800490c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004910:	f10d 0207 	add.w	r2, sp, #7
 8004914:	2195      	movs	r1, #149	@ 0x95
 8004916:	f7ff ffae 	bl	8004876 <ft6x06_write_reg>
}
 800491a:	b003      	add	sp, #12
 800491c:	f85d fb04 	ldr.w	pc, [sp], #4

08004920 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004920:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004922:	2301      	movs	r3, #1
{
 8004924:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004928:	f10d 0207 	add.w	r2, sp, #7
 800492c:	2196      	movs	r1, #150	@ 0x96
 800492e:	f7ff ffa2 	bl	8004876 <ft6x06_write_reg>
}
 8004932:	b003      	add	sp, #12
 8004934:	f85d fb04 	ldr.w	pc, [sp], #4

08004938 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004938:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800493a:	2301      	movs	r3, #1
{
 800493c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004940:	f10d 0207 	add.w	r2, sp, #7
 8004944:	21a4      	movs	r1, #164	@ 0xa4
 8004946:	f7ff ff96 	bl	8004876 <ft6x06_write_reg>
}
 800494a:	b003      	add	sp, #12
 800494c:	f85d fb04 	ldr.w	pc, [sp], #4

08004950 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004950:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004952:	2301      	movs	r3, #1
 8004954:	21a8      	movs	r1, #168	@ 0xa8
 8004956:	f7ff bf87 	b.w	8004868 <ft6x06_read_reg>
	...

0800495c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800495c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800495e:	2201      	movs	r2, #1
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004962:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004966:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004968:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800496a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800496c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800496e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004972:	f007 ff2b 	bl	800c7cc <HAL_SDRAM_SendCommand>
 8004976:	3800      	subs	r0, #0
 8004978:	bf18      	it	ne
 800497a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800497c:	4240      	negs	r0, r0
 800497e:	bd08      	pop	{r3, pc}
 8004980:	2400b3a8 	.word	0x2400b3a8

08004984 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004984:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004986:	2202      	movs	r2, #2
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800498a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800498e:	2101      	movs	r1, #1
 8004990:	2200      	movs	r2, #0
 8004992:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499a:	4619      	mov	r1, r3
 800499c:	f007 ff16 	bl	800c7cc <HAL_SDRAM_SendCommand>
 80049a0:	3800      	subs	r0, #0
 80049a2:	bf18      	it	ne
 80049a4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80049a6:	4240      	negs	r0, r0
 80049a8:	bd08      	pop	{r3, pc}
 80049aa:	bf00      	nop
 80049ac:	2400b3a8 	.word	0x2400b3a8

080049b0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80049b0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049b2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80049b6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049b8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80049ba:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049bc:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80049be:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80049c0:	6991      	ldr	r1, [r2, #24]
 80049c2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049c4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80049c6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049c8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049ca:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80049cc:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80049ce:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049d0:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80049d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049da:	f007 fef7 	bl	800c7cc <HAL_SDRAM_SendCommand>
 80049de:	3800      	subs	r0, #0
 80049e0:	bf18      	it	ne
 80049e2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80049e4:	4240      	negs	r0, r0
 80049e6:	bd10      	pop	{r4, pc}
 80049e8:	2400b3a8 	.word	0x2400b3a8

080049ec <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80049ec:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80049ee:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80049f0:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80049f4:	2108      	movs	r1, #8
 80049f6:	2200      	movs	r2, #0
 80049f8:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a00:	4619      	mov	r1, r3
 8004a02:	f007 fee3 	bl	800c7cc <HAL_SDRAM_SendCommand>
 8004a06:	3800      	subs	r0, #0
 8004a08:	bf18      	it	ne
 8004a0a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a0c:	4240      	negs	r0, r0
 8004a0e:	bd08      	pop	{r3, pc}
 8004a10:	2400b3a8 	.word	0x2400b3a8

08004a14 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004a14:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004a16:	f007 fef8 	bl	800c80a <HAL_SDRAM_ProgramRefreshRate>
 8004a1a:	3800      	subs	r0, #0
 8004a1c:	bf18      	it	ne
 8004a1e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a20:	4240      	negs	r0, r0
 8004a22:	bd08      	pop	{r3, pc}

08004a24 <IS42S32800J_Init>:
{
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a28:	6809      	ldr	r1, [r1, #0]
{
 8004a2a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a2c:	f7ff ff96 	bl	800495c <IS42S32800J_ClockEnable>
 8004a30:	b110      	cbz	r0, 8004a38 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004a38:	f001 fc7e 	bl	8006338 <HAL_GetTick>
 8004a3c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004a3e:	f001 fc7b 	bl	8006338 <HAL_GetTick>
 8004a42:	4286      	cmp	r6, r0
 8004a44:	d0fb      	beq.n	8004a3e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a46:	6821      	ldr	r1, [r4, #0]
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7ff ff9b 	bl	8004984 <IS42S32800J_Precharge>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d1ef      	bne.n	8004a32 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004a52:	4628      	mov	r0, r5
 8004a54:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004a58:	f7ff ffc8 	bl	80049ec <IS42S32800J_RefreshMode>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d1e8      	bne.n	8004a32 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f7ff ffa4 	bl	80049b0 <IS42S32800J_ModeRegConfig>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1e2      	bne.n	8004a32 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004a6c:	68a1      	ldr	r1, [r4, #8]
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7ff ffd0 	bl	8004a14 <IS42S32800J_RefreshRate>
 8004a74:	3800      	subs	r0, #0
 8004a76:	bf18      	it	ne
 8004a78:	2001      	movne	r0, #1
 8004a7a:	4240      	negs	r0, r0
  return ret;
 8004a7c:	e7db      	b.n	8004a36 <IS42S32800J_Init+0x12>

08004a7e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004a7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004a8a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a92:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004a96:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004a9a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr

08004aa0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004aa0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004aa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004aa6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004aa8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004aac:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004aae:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004ab0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004ab2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004ab4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ab6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004ab8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004aba:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004abc:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004abe:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004ac0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004ac2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ac4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ac6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004aca:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004ace:	2310      	movs	r3, #16
 8004ad0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ad6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004ad8:	f240 1301 	movw	r3, #257	@ 0x101
 8004adc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ade:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ae2:	f005 ff0f 	bl	800a904 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004ae6:	2800      	cmp	r0, #0

}
 8004ae8:	bf14      	ite	ne
 8004aea:	f06f 0004 	mvnne.w	r0, #4
 8004aee:	2000      	moveq	r0, #0
 8004af0:	b015      	add	sp, #84	@ 0x54
 8004af2:	f85d fb04 	ldr.w	pc, [sp], #4

08004af6 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004af6:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004af8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004afc:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004afe:	bf18      	it	ne
 8004b00:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004b04:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b06:	bf08      	it	eq
 8004b08:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004b0c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b0e:	a906      	add	r1, sp, #24
{
 8004b10:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b12:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004b14:	2306      	movs	r3, #6
 8004b16:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b18:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b1a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b1e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004b20:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b22:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b24:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b28:	f005 fdec 	bl	800a704 <HAL_QSPI_Command>
 8004b2c:	bb20      	cbnz	r0, 8004b78 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004b2e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004b32:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004b34:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004b36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004b3a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b3c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004b3e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004b42:	f04f 0310 	mov.w	r3, #16
 8004b46:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004b4a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b4e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004b50:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004b54:	bf14      	ite	ne
 8004b56:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004b5a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b5e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004b60:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b66:	f005 fecd 	bl	800a904 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	f06f 0004 	mvnne.w	r0, #4
 8004b72:	2000      	moveq	r0, #0
}
 8004b74:	b015      	add	sp, #84	@ 0x54
 8004b76:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004b78:	f06f 0001 	mvn.w	r0, #1
 8004b7c:	e7fa      	b.n	8004b74 <MT25TL01G_WriteEnable+0x7e>

08004b7e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b7e:	2903      	cmp	r1, #3
{
 8004b80:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b82:	bf18      	it	ne
 8004b84:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004b88:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b8a:	bf08      	it	eq
 8004b8c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004b90:	4604      	mov	r4, r0
 8004b92:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b94:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004b96:	23b7      	movs	r3, #183	@ 0xb7
 8004b98:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b9a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004ba2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ba4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ba6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004baa:	f7ff ffa4 	bl	8004af6 <MT25TL01G_WriteEnable>
 8004bae:	b118      	cbz	r0, 8004bb8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004bb0:	f06f 0001 	mvn.w	r0, #1
}
 8004bb4:	b00f      	add	sp, #60	@ 0x3c
 8004bb6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbc:	4669      	mov	r1, sp
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f005 fda0 	bl	800a704 <HAL_QSPI_Command>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1f3      	bne.n	8004bb0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff68 	bl	8004aa0 <MT25TL01G_AutoPollingMemReady>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004bd4:	e7ec      	b.n	8004bb0 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004bd6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004bd6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004bdc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bde:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004be2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004be4:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004be6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004be8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004bea:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bf0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004bf2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bf4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bf6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfa:	f005 fd83 	bl	800a704 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004bfe:	2800      	cmp	r0, #0
}
 8004c00:	bf14      	ite	ne
 8004c02:	f06f 0001 	mvnne.w	r0, #1
 8004c06:	2000      	moveq	r0, #0
 8004c08:	b00f      	add	sp, #60	@ 0x3c
 8004c0a:	f85d fb04 	ldr.w	pc, [sp], #4

08004c0e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004c0e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004c14:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c1a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004c1c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c1e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004c20:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c22:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c24:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c28:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004c2a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c2c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c2e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c32:	f005 fd67 	bl	800a704 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004c36:	2800      	cmp	r0, #0
}
 8004c38:	bf14      	ite	ne
 8004c3a:	f06f 0001 	mvnne.w	r0, #1
 8004c3e:	2000      	moveq	r0, #0
 8004c40:	b00f      	add	sp, #60	@ 0x3c
 8004c42:	f85d fb04 	ldr.w	pc, [sp], #4

08004c46 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004c46:	b500      	push	{lr}
 8004c48:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004c4a:	2903      	cmp	r1, #3
 8004c4c:	d80e      	bhi.n	8004c6c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004c4e:	e8df f001 	tbb	[pc, r1]
 8004c52:	2902      	.short	0x2902
 8004c54:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c5a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004c5c:	230e      	movs	r3, #14
 8004c5e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c64:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004c66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004c6c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004c6e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004c72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c76:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004c78:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004c7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004c7e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c80:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004c82:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c86:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c88:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004c8c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c90:	f005 fe89 	bl	800a9a6 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004c94:	2800      	cmp	r0, #0
}
 8004c96:	bf14      	ite	ne
 8004c98:	f06f 0005 	mvnne.w	r0, #5
 8004c9c:	2000      	moveq	r0, #0
 8004c9e:	b011      	add	sp, #68	@ 0x44
 8004ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ca8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004caa:	233d      	movs	r3, #61	@ 0x3d
 8004cac:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cb2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb8:	e7d7      	b.n	8004c6a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cbe:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004cc0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004cc2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004cc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004cc8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004cca:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004cce:	e7cc      	b.n	8004c6a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004cd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004cd4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004cd6:	23ed      	movs	r3, #237	@ 0xed
 8004cd8:	e7f3      	b.n	8004cc2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004cda <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004cda:	b500      	push	{lr}
 8004cdc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004cde:	2903      	cmp	r1, #3
 8004ce0:	d80e      	bhi.n	8004d00 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004ce2:	e8df f001 	tbb	[pc, r1]
 8004ce6:	2502      	.short	0x2502
 8004ce8:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cee:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cf8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004cfe:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004d00:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d02:	466a      	mov	r2, sp
 8004d04:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004d06:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004d08:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004d0c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d12:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d14:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004d18:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d1c:	f005 fe43 	bl	800a9a6 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004d20:	2800      	cmp	r0, #0
}
 8004d22:	bf14      	ite	ne
 8004d24:	f06f 0005 	mvnne.w	r0, #5
 8004d28:	2000      	moveq	r0, #0
 8004d2a:	b011      	add	sp, #68	@ 0x44
 8004d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d34:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004d36:	23bc      	movs	r3, #188	@ 0xbc
 8004d38:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004d3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d3e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d44:	e7db      	b.n	8004cfe <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d4a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004d4c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004d4e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004d50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d54:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004d56:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004d5a:	e7d0      	b.n	8004cfe <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004d5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d60:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004d62:	23eb      	movs	r3, #235	@ 0xeb
 8004d64:	e7f3      	b.n	8004d4e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004d66 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d66:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004d6c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d6e:	bf18      	it	ne
 8004d70:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004d74:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d76:	bf08      	it	eq
 8004d78:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d7c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d7e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004d80:	2366      	movs	r3, #102	@ 0x66
 8004d82:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004d84:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d86:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004d8a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004d8c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d8e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d90:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d94:	f005 fcb6 	bl	800a704 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004d98:	2800      	cmp	r0, #0
}
 8004d9a:	bf14      	ite	ne
 8004d9c:	f06f 0001 	mvnne.w	r0, #1
 8004da0:	2000      	moveq	r0, #0
 8004da2:	b00f      	add	sp, #60	@ 0x3c
 8004da4:	f85d fb04 	ldr.w	pc, [sp], #4

08004da8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004da8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004daa:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004dae:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004db0:	bf18      	it	ne
 8004db2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004db6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004db8:	bf08      	it	eq
 8004dba:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dbe:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004dc0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004dc2:	2399      	movs	r3, #153	@ 0x99
 8004dc4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004dc6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004dc8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004dcc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004dce:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004dd0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004dd2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dd6:	f005 fc95 	bl	800a704 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004dda:	2800      	cmp	r0, #0
}
 8004ddc:	bf14      	ite	ne
 8004dde:	f06f 0001 	mvnne.w	r0, #1
 8004de2:	2000      	moveq	r0, #0
 8004de4:	b00f      	add	sp, #60	@ 0x3c
 8004de6:	f85d fb04 	ldr.w	pc, [sp], #4

08004dea <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004dea:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004dec:	6884      	ldr	r4, [r0, #8]
 8004dee:	8800      	ldrh	r0, [r0, #0]
 8004df0:	46a4      	mov	ip, r4
}
 8004df2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004df6:	4760      	bx	ip

08004df8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004df8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004dfa:	6844      	ldr	r4, [r0, #4]
 8004dfc:	8800      	ldrh	r0, [r0, #0]
 8004dfe:	46a4      	mov	ip, r4
}
 8004e00:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e04:	4760      	bx	ip

08004e06 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004e06:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004e08:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004e0e:	4798      	blx	r3
 8004e10:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	4798      	blx	r3
 8004e16:	1b83      	subs	r3, r0, r6
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	d3fa      	bcc.n	8004e12 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e20 <OTM8009A_Init>:
{
 8004e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e24:	2300      	movs	r3, #0
 8004e26:	f100 0510 	add.w	r5, r0, #16
{
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e30:	4619      	mov	r1, r3
 8004e32:	4ade      	ldr	r2, [pc, #888]	@ (80051ac <OTM8009A_Init+0x38c>)
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 fb99 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e3a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e3e:	4adc      	ldr	r2, [pc, #880]	@ (80051b0 <OTM8009A_Init+0x390>)
 8004e40:	21ff      	movs	r1, #255	@ 0xff
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 fb92 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e4c:	4ad9      	ldr	r2, [pc, #868]	@ (80051b4 <OTM8009A_Init+0x394>)
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 fb8b 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004e56:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004e5a:	4ad7      	ldr	r2, [pc, #860]	@ (80051b8 <OTM8009A_Init+0x398>)
 8004e5c:	21ff      	movs	r1, #255	@ 0xff
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fb84 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004e66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e68:	4ad2      	ldr	r2, [pc, #840]	@ (80051b4 <OTM8009A_Init+0x394>)
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 fb7d 	bl	800556c <otm8009a_write_reg>
 8004e72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004e74:	2300      	movs	r3, #0
 8004e76:	4ad1      	ldr	r2, [pc, #836]	@ (80051bc <OTM8009A_Init+0x39c>)
 8004e78:	21c4      	movs	r1, #196	@ 0xc4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 fb76 	bl	800556c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004e80:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004e82:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004e84:	4638      	mov	r0, r7
 8004e86:	f7ff ffbe 	bl	8004e06 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	4acc      	ldr	r2, [pc, #816]	@ (80051c0 <OTM8009A_Init+0x3a0>)
 8004e8e:	4628      	mov	r0, r5
 8004e90:	4619      	mov	r1, r3
 8004e92:	f000 fb6b 	bl	800556c <otm8009a_write_reg>
 8004e96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4aca      	ldr	r2, [pc, #808]	@ (80051c4 <OTM8009A_Init+0x3a4>)
 8004e9c:	21c4      	movs	r1, #196	@ 0xc4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fb64 	bl	800556c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004ea4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004ea6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff ffac 	bl	8004e06 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	4ac5      	ldr	r2, [pc, #788]	@ (80051c8 <OTM8009A_Init+0x3a8>)
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f000 fb59 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004eba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004ebc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004ebe:	4ac3      	ldr	r2, [pc, #780]	@ (80051cc <OTM8009A_Init+0x3ac>)
 8004ec0:	21c5      	movs	r1, #197	@ 0xc5
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fb52 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ec8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004eca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ecc:	4ac0      	ldr	r2, [pc, #768]	@ (80051d0 <OTM8009A_Init+0x3b0>)
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fb4b 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ed6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ed8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004eda:	4abe      	ldr	r2, [pc, #760]	@ (80051d4 <OTM8009A_Init+0x3b4>)
 8004edc:	21c5      	movs	r1, #197	@ 0xc5
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fb44 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ee4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ee6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ee8:	4abb      	ldr	r2, [pc, #748]	@ (80051d8 <OTM8009A_Init+0x3b8>)
 8004eea:	4619      	mov	r1, r3
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 fb3d 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004ef2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ef4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004ef6:	4ab9      	ldr	r2, [pc, #740]	@ (80051dc <OTM8009A_Init+0x3bc>)
 8004ef8:	21c0      	movs	r1, #192	@ 0xc0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fb36 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f04:	4aa9      	ldr	r2, [pc, #676]	@ (80051ac <OTM8009A_Init+0x38c>)
 8004f06:	4619      	mov	r1, r3
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 fb2f 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f12:	4ab3      	ldr	r2, [pc, #716]	@ (80051e0 <OTM8009A_Init+0x3c0>)
 8004f14:	21d9      	movs	r1, #217	@ 0xd9
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fb28 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f20:	4ab0      	ldr	r2, [pc, #704]	@ (80051e4 <OTM8009A_Init+0x3c4>)
 8004f22:	4619      	mov	r1, r3
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 fb21 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004f2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004f2e:	4aae      	ldr	r2, [pc, #696]	@ (80051e8 <OTM8009A_Init+0x3c8>)
 8004f30:	21c1      	movs	r1, #193	@ 0xc1
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fb1a 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004f38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004f3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004f3c:	4aab      	ldr	r2, [pc, #684]	@ (80051ec <OTM8009A_Init+0x3cc>)
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 fb13 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004f46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004f48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004f4a:	4aa9      	ldr	r2, [pc, #676]	@ (80051f0 <OTM8009A_Init+0x3d0>)
 8004f4c:	21c5      	movs	r1, #197	@ 0xc5
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 fb0c 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004f54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004f56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004f58:	4aa6      	ldr	r2, [pc, #664]	@ (80051f4 <OTM8009A_Init+0x3d4>)
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fb05 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004f64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f66:	4a9b      	ldr	r2, [pc, #620]	@ (80051d4 <OTM8009A_Init+0x3b4>)
 8004f68:	21c5      	movs	r1, #197	@ 0xc5
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fafe 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f74:	4a8d      	ldr	r2, [pc, #564]	@ (80051ac <OTM8009A_Init+0x38c>)
 8004f76:	4619      	mov	r1, r3
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 faf7 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004f7e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004f82:	4a9d      	ldr	r2, [pc, #628]	@ (80051f8 <OTM8009A_Init+0x3d8>)
 8004f84:	21d8      	movs	r1, #216	@ 0xd8
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 faf0 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004f8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f90:	4a9a      	ldr	r2, [pc, #616]	@ (80051fc <OTM8009A_Init+0x3dc>)
 8004f92:	4619      	mov	r1, r3
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 fae9 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004f9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004f9e:	4a98      	ldr	r2, [pc, #608]	@ (8005200 <OTM8009A_Init+0x3e0>)
 8004fa0:	21c5      	movs	r1, #197	@ 0xc5
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 fae2 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004fa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004faa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004fac:	4a95      	ldr	r2, [pc, #596]	@ (8005204 <OTM8009A_Init+0x3e4>)
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 fadb 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004fb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004fb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004fba:	4a93      	ldr	r2, [pc, #588]	@ (8005208 <OTM8009A_Init+0x3e8>)
 8004fbc:	21c0      	movs	r1, #192	@ 0xc0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fad4 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004fc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004fc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004fc8:	4a90      	ldr	r2, [pc, #576]	@ (800520c <OTM8009A_Init+0x3ec>)
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 facd 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004fd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004fd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004fd6:	4a8e      	ldr	r2, [pc, #568]	@ (8005210 <OTM8009A_Init+0x3f0>)
 8004fd8:	21c5      	movs	r1, #197	@ 0xc5
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 fac6 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004fe0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004fe2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004fe4:	4a8b      	ldr	r2, [pc, #556]	@ (8005214 <OTM8009A_Init+0x3f4>)
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fabf 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004fee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ff0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ff2:	4a89      	ldr	r2, [pc, #548]	@ (8005218 <OTM8009A_Init+0x3f8>)
 8004ff4:	21c4      	movs	r1, #196	@ 0xc4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fab8 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ffc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ffe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005000:	4a78      	ldr	r2, [pc, #480]	@ (80051e4 <OTM8009A_Init+0x3c4>)
 8005002:	4619      	mov	r1, r3
 8005004:	4628      	mov	r0, r5
 8005006:	f000 fab1 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800500a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800500c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800500e:	4a83      	ldr	r2, [pc, #524]	@ (800521c <OTM8009A_Init+0x3fc>)
 8005010:	21c1      	movs	r1, #193	@ 0xc1
 8005012:	4628      	mov	r0, r5
 8005014:	f000 faaa 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005018:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800501a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800501c:	4a80      	ldr	r2, [pc, #512]	@ (8005220 <OTM8009A_Init+0x400>)
 800501e:	4619      	mov	r1, r3
 8005020:	4628      	mov	r0, r5
 8005022:	f000 faa3 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005026:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005028:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800502a:	4a7e      	ldr	r2, [pc, #504]	@ (8005224 <OTM8009A_Init+0x404>)
 800502c:	21b3      	movs	r1, #179	@ 0xb3
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fa9c 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005034:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005036:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005038:	4a5e      	ldr	r2, [pc, #376]	@ (80051b4 <OTM8009A_Init+0x394>)
 800503a:	4619      	mov	r1, r3
 800503c:	4628      	mov	r0, r5
 800503e:	f000 fa95 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005042:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005044:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005046:	4a78      	ldr	r2, [pc, #480]	@ (8005228 <OTM8009A_Init+0x408>)
 8005048:	21ce      	movs	r1, #206	@ 0xce
 800504a:	4628      	mov	r0, r5
 800504c:	f000 fa8e 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005050:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005052:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005054:	4a75      	ldr	r2, [pc, #468]	@ (800522c <OTM8009A_Init+0x40c>)
 8005056:	4619      	mov	r1, r3
 8005058:	4628      	mov	r0, r5
 800505a:	f000 fa87 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800505e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005060:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005062:	4a73      	ldr	r2, [pc, #460]	@ (8005230 <OTM8009A_Init+0x410>)
 8005064:	21ce      	movs	r1, #206	@ 0xce
 8005066:	4628      	mov	r0, r5
 8005068:	f000 fa80 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800506c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800506e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005070:	4a70      	ldr	r2, [pc, #448]	@ (8005234 <OTM8009A_Init+0x414>)
 8005072:	4619      	mov	r1, r3
 8005074:	4628      	mov	r0, r5
 8005076:	f000 fa79 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800507a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800507c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800507e:	4a6e      	ldr	r2, [pc, #440]	@ (8005238 <OTM8009A_Init+0x418>)
 8005080:	21ce      	movs	r1, #206	@ 0xce
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fa72 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005088:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800508a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800508c:	4a6b      	ldr	r2, [pc, #428]	@ (800523c <OTM8009A_Init+0x41c>)
 800508e:	4619      	mov	r1, r3
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fa6b 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005096:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005098:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800509a:	4a69      	ldr	r2, [pc, #420]	@ (8005240 <OTM8009A_Init+0x420>)
 800509c:	21cf      	movs	r1, #207	@ 0xcf
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 fa64 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80050a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050a8:	4a66      	ldr	r2, [pc, #408]	@ (8005244 <OTM8009A_Init+0x424>)
 80050aa:	4619      	mov	r1, r3
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 fa5d 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80050b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80050b6:	4a64      	ldr	r2, [pc, #400]	@ (8005248 <OTM8009A_Init+0x428>)
 80050b8:	21cf      	movs	r1, #207	@ 0xcf
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 fa56 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80050c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050c4:	4a3b      	ldr	r2, [pc, #236]	@ (80051b4 <OTM8009A_Init+0x394>)
 80050c6:	4619      	mov	r1, r3
 80050c8:	4628      	mov	r0, r5
 80050ca:	f000 fa4f 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80050ce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80050d2:	4a5e      	ldr	r2, [pc, #376]	@ (800524c <OTM8009A_Init+0x42c>)
 80050d4:	21cb      	movs	r1, #203	@ 0xcb
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 fa48 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80050de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050e0:	4a5b      	ldr	r2, [pc, #364]	@ (8005250 <OTM8009A_Init+0x430>)
 80050e2:	4619      	mov	r1, r3
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 fa41 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80050ea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80050ee:	4a59      	ldr	r2, [pc, #356]	@ (8005254 <OTM8009A_Init+0x434>)
 80050f0:	21cb      	movs	r1, #203	@ 0xcb
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fa3a 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80050fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050fc:	4a4b      	ldr	r2, [pc, #300]	@ (800522c <OTM8009A_Init+0x40c>)
 80050fe:	4619      	mov	r1, r3
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fa33 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005106:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005108:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800510a:	4a53      	ldr	r2, [pc, #332]	@ (8005258 <OTM8009A_Init+0x438>)
 800510c:	21cb      	movs	r1, #203	@ 0xcb
 800510e:	4628      	mov	r0, r5
 8005110:	f000 fa2c 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005114:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005116:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005118:	4a46      	ldr	r2, [pc, #280]	@ (8005234 <OTM8009A_Init+0x414>)
 800511a:	4619      	mov	r1, r3
 800511c:	4628      	mov	r0, r5
 800511e:	f000 fa25 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005122:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005124:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005126:	4a4d      	ldr	r2, [pc, #308]	@ (800525c <OTM8009A_Init+0x43c>)
 8005128:	21cb      	movs	r1, #203	@ 0xcb
 800512a:	4628      	mov	r0, r5
 800512c:	f000 fa1e 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005130:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005132:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005134:	4a41      	ldr	r2, [pc, #260]	@ (800523c <OTM8009A_Init+0x41c>)
 8005136:	4619      	mov	r1, r3
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fa17 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800513e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005140:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005142:	4a47      	ldr	r2, [pc, #284]	@ (8005260 <OTM8009A_Init+0x440>)
 8005144:	21cb      	movs	r1, #203	@ 0xcb
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fa10 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800514c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800514e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005150:	4a3c      	ldr	r2, [pc, #240]	@ (8005244 <OTM8009A_Init+0x424>)
 8005152:	4619      	mov	r1, r3
 8005154:	4628      	mov	r0, r5
 8005156:	f000 fa09 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800515a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800515c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800515e:	4a41      	ldr	r2, [pc, #260]	@ (8005264 <OTM8009A_Init+0x444>)
 8005160:	21cb      	movs	r1, #203	@ 0xcb
 8005162:	4628      	mov	r0, r5
 8005164:	f000 fa02 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005168:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800516a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800516c:	4a3e      	ldr	r2, [pc, #248]	@ (8005268 <OTM8009A_Init+0x448>)
 800516e:	4619      	mov	r1, r3
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f9fb 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005176:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005178:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800517a:	4a3c      	ldr	r2, [pc, #240]	@ (800526c <OTM8009A_Init+0x44c>)
 800517c:	21cb      	movs	r1, #203	@ 0xcb
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f9f4 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005184:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005186:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005188:	4a39      	ldr	r2, [pc, #228]	@ (8005270 <OTM8009A_Init+0x450>)
 800518a:	4619      	mov	r1, r3
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f9ed 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005192:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005194:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005196:	4a37      	ldr	r2, [pc, #220]	@ (8005274 <OTM8009A_Init+0x454>)
 8005198:	21cb      	movs	r1, #203	@ 0xcb
 800519a:	4628      	mov	r0, r5
 800519c:	f000 f9e6 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80051a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051a4:	4a03      	ldr	r2, [pc, #12]	@ (80051b4 <OTM8009A_Init+0x394>)
 80051a6:	4619      	mov	r1, r3
 80051a8:	4628      	mov	r0, r5
 80051aa:	e065      	b.n	8005278 <OTM8009A_Init+0x458>
 80051ac:	08028149 	.word	0x08028149
 80051b0:	08028145 	.word	0x08028145
 80051b4:	0802814a 	.word	0x0802814a
 80051b8:	08028143 	.word	0x08028143
 80051bc:	0802814b 	.word	0x0802814b
 80051c0:	0802814c 	.word	0x0802814c
 80051c4:	0802814d 	.word	0x0802814d
 80051c8:	0802814e 	.word	0x0802814e
 80051cc:	0802814f 	.word	0x0802814f
 80051d0:	08028150 	.word	0x08028150
 80051d4:	08028151 	.word	0x08028151
 80051d8:	08028152 	.word	0x08028152
 80051dc:	08028153 	.word	0x08028153
 80051e0:	08028154 	.word	0x08028154
 80051e4:	08028157 	.word	0x08028157
 80051e8:	08028158 	.word	0x08028158
 80051ec:	08028159 	.word	0x08028159
 80051f0:	0802815a 	.word	0x0802815a
 80051f4:	0802815b 	.word	0x0802815b
 80051f8:	08028141 	.word	0x08028141
 80051fc:	0802815c 	.word	0x0802815c
 8005200:	0802815d 	.word	0x0802815d
 8005204:	0802815e 	.word	0x0802815e
 8005208:	0802815f 	.word	0x0802815f
 800520c:	08028160 	.word	0x08028160
 8005210:	08028161 	.word	0x08028161
 8005214:	08028155 	.word	0x08028155
 8005218:	08028162 	.word	0x08028162
 800521c:	08028163 	.word	0x08028163
 8005220:	08028164 	.word	0x08028164
 8005224:	0802813f 	.word	0x0802813f
 8005228:	08028139 	.word	0x08028139
 800522c:	08028165 	.word	0x08028165
 8005230:	0802812b 	.word	0x0802812b
 8005234:	08028166 	.word	0x08028166
 8005238:	0802811d 	.word	0x0802811d
 800523c:	08028167 	.word	0x08028167
 8005240:	08028113 	.word	0x08028113
 8005244:	08028168 	.word	0x08028168
 8005248:	08028175 	.word	0x08028175
 800524c:	08028109 	.word	0x08028109
 8005250:	08028169 	.word	0x08028169
 8005254:	080280fa 	.word	0x080280fa
 8005258:	080280eb 	.word	0x080280eb
 800525c:	080280e1 	.word	0x080280e1
 8005260:	080280d2 	.word	0x080280d2
 8005264:	080280c3 	.word	0x080280c3
 8005268:	0802816a 	.word	0x0802816a
 800526c:	080280b9 	.word	0x080280b9
 8005270:	0802816b 	.word	0x0802816b
 8005274:	080280af 	.word	0x080280af
 8005278:	f000 f978 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800527c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800527e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005280:	4a8e      	ldr	r2, [pc, #568]	@ (80054bc <OTM8009A_Init+0x69c>)
 8005282:	21cc      	movs	r1, #204	@ 0xcc
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f971 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800528a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800528c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800528e:	4a8c      	ldr	r2, [pc, #560]	@ (80054c0 <OTM8009A_Init+0x6a0>)
 8005290:	4619      	mov	r1, r3
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f96a 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005298:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800529a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800529c:	4a89      	ldr	r2, [pc, #548]	@ (80054c4 <OTM8009A_Init+0x6a4>)
 800529e:	21cc      	movs	r1, #204	@ 0xcc
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f963 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80052a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80052a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80052aa:	4a87      	ldr	r2, [pc, #540]	@ (80054c8 <OTM8009A_Init+0x6a8>)
 80052ac:	4619      	mov	r1, r3
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 f95c 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80052b4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80052b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80052b8:	4a84      	ldr	r2, [pc, #528]	@ (80054cc <OTM8009A_Init+0x6ac>)
 80052ba:	21cc      	movs	r1, #204	@ 0xcc
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 f955 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80052c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052c6:	4a82      	ldr	r2, [pc, #520]	@ (80054d0 <OTM8009A_Init+0x6b0>)
 80052c8:	4619      	mov	r1, r3
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f94e 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80052d0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80052d4:	4a7f      	ldr	r2, [pc, #508]	@ (80054d4 <OTM8009A_Init+0x6b4>)
 80052d6:	21cc      	movs	r1, #204	@ 0xcc
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f947 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80052e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052e2:	4a7d      	ldr	r2, [pc, #500]	@ (80054d8 <OTM8009A_Init+0x6b8>)
 80052e4:	4619      	mov	r1, r3
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f940 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80052ec:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80052f0:	4a7a      	ldr	r2, [pc, #488]	@ (80054dc <OTM8009A_Init+0x6bc>)
 80052f2:	21cc      	movs	r1, #204	@ 0xcc
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f939 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80052fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052fe:	4a78      	ldr	r2, [pc, #480]	@ (80054e0 <OTM8009A_Init+0x6c0>)
 8005300:	4619      	mov	r1, r3
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f932 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005308:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800530a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800530c:	4a75      	ldr	r2, [pc, #468]	@ (80054e4 <OTM8009A_Init+0x6c4>)
 800530e:	21cc      	movs	r1, #204	@ 0xcc
 8005310:	4628      	mov	r0, r5
 8005312:	f000 f92b 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005316:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005318:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800531a:	4a73      	ldr	r2, [pc, #460]	@ (80054e8 <OTM8009A_Init+0x6c8>)
 800531c:	4619      	mov	r1, r3
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f924 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005324:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005326:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005328:	4a70      	ldr	r2, [pc, #448]	@ (80054ec <OTM8009A_Init+0x6cc>)
 800532a:	21c5      	movs	r1, #197	@ 0xc5
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f91d 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005332:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005334:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005336:	4a6e      	ldr	r2, [pc, #440]	@ (80054f0 <OTM8009A_Init+0x6d0>)
 8005338:	4619      	mov	r1, r3
 800533a:	4628      	mov	r0, r5
 800533c:	f000 f916 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005340:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005342:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005344:	4a6b      	ldr	r2, [pc, #428]	@ (80054f4 <OTM8009A_Init+0x6d4>)
 8005346:	21f5      	movs	r1, #245	@ 0xf5
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f90f 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800534e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005350:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005352:	4a69      	ldr	r2, [pc, #420]	@ (80054f8 <OTM8009A_Init+0x6d8>)
 8005354:	4619      	mov	r1, r3
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f908 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800535c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800535e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005360:	4a66      	ldr	r2, [pc, #408]	@ (80054fc <OTM8009A_Init+0x6dc>)
 8005362:	21c6      	movs	r1, #198	@ 0xc6
 8005364:	4628      	mov	r0, r5
 8005366:	f000 f901 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800536a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800536c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800536e:	4a64      	ldr	r2, [pc, #400]	@ (8005500 <OTM8009A_Init+0x6e0>)
 8005370:	4619      	mov	r1, r3
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f8fa 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005378:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800537a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800537c:	4a61      	ldr	r2, [pc, #388]	@ (8005504 <OTM8009A_Init+0x6e4>)
 800537e:	21ff      	movs	r1, #255	@ 0xff
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f8f3 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005386:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005388:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800538a:	4a5d      	ldr	r2, [pc, #372]	@ (8005500 <OTM8009A_Init+0x6e0>)
 800538c:	4619      	mov	r1, r3
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f8ec 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005394:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005396:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005398:	4a59      	ldr	r2, [pc, #356]	@ (8005500 <OTM8009A_Init+0x6e0>)
 800539a:	4619      	mov	r1, r3
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f8e5 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80053a2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80053a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80053a6:	4a58      	ldr	r2, [pc, #352]	@ (8005508 <OTM8009A_Init+0x6e8>)
 80053a8:	21e1      	movs	r1, #225	@ 0xe1
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f8de 	bl	800556c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80053b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80053b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80053b4:	4a52      	ldr	r2, [pc, #328]	@ (8005500 <OTM8009A_Init+0x6e0>)
 80053b6:	4619      	mov	r1, r3
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f8d7 	bl	800556c <otm8009a_write_reg>
 80053be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80053c0:	2310      	movs	r3, #16
 80053c2:	4a52      	ldr	r2, [pc, #328]	@ (800550c <OTM8009A_Init+0x6ec>)
 80053c4:	21e2      	movs	r1, #226	@ 0xe2
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 f8d0 	bl	800556c <otm8009a_write_reg>
 80053cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80053ce:	2300      	movs	r3, #0
 80053d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005510 <OTM8009A_Init+0x6f0>)
 80053d2:	2111      	movs	r1, #17
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 f8c9 	bl	800556c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80053da:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80053dc:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80053de:	4638      	mov	r0, r7
 80053e0:	f7ff fd11 	bl	8004e06 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80053e4:	4f4b      	ldr	r7, [pc, #300]	@ (8005514 <OTM8009A_Init+0x6f4>)
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	d061      	beq.n	80054ae <OTM8009A_Init+0x68e>
 80053ea:	2e02      	cmp	r6, #2
 80053ec:	d107      	bne.n	80053fe <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80053ee:	2300      	movs	r3, #0
 80053f0:	4a49      	ldr	r2, [pc, #292]	@ (8005518 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80053f2:	213a      	movs	r1, #58	@ 0x3a
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f8b9 	bl	800556c <otm8009a_write_reg>
 80053fa:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80053fc:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80053fe:	f1b8 0f01 	cmp.w	r8, #1
 8005402:	d157      	bne.n	80054b4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005404:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005406:	f10d 0207 	add.w	r2, sp, #7
 800540a:	2136      	movs	r1, #54	@ 0x36
 800540c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800540e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005412:	2300      	movs	r3, #0
 8005414:	f000 f8aa 	bl	800556c <otm8009a_write_reg>
 8005418:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800541a:	2304      	movs	r3, #4
 800541c:	4a3f      	ldr	r2, [pc, #252]	@ (800551c <OTM8009A_Init+0x6fc>)
 800541e:	212a      	movs	r1, #42	@ 0x2a
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f8a3 	bl	800556c <otm8009a_write_reg>
 8005426:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005428:	2304      	movs	r3, #4
 800542a:	4a3d      	ldr	r2, [pc, #244]	@ (8005520 <OTM8009A_Init+0x700>)
 800542c:	212b      	movs	r1, #43	@ 0x2b
 800542e:	4628      	mov	r0, r5
 8005430:	f000 f89c 	bl	800556c <otm8009a_write_reg>
 8005434:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005436:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800543a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800543c:	2300      	movs	r3, #0
 800543e:	4a39      	ldr	r2, [pc, #228]	@ (8005524 <OTM8009A_Init+0x704>)
 8005440:	2151      	movs	r1, #81	@ 0x51
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f892 	bl	800556c <otm8009a_write_reg>
 8005448:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800544a:	4633      	mov	r3, r6
 800544c:	4a36      	ldr	r2, [pc, #216]	@ (8005528 <OTM8009A_Init+0x708>)
 800544e:	2153      	movs	r1, #83	@ 0x53
 8005450:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005452:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005454:	f000 f88a 	bl	800556c <otm8009a_write_reg>
 8005458:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800545a:	4633      	mov	r3, r6
 800545c:	4a33      	ldr	r2, [pc, #204]	@ (800552c <OTM8009A_Init+0x70c>)
 800545e:	2155      	movs	r1, #85	@ 0x55
 8005460:	4628      	mov	r0, r5
 8005462:	f000 f883 	bl	800556c <otm8009a_write_reg>
 8005466:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005468:	4633      	mov	r3, r6
 800546a:	4a31      	ldr	r2, [pc, #196]	@ (8005530 <OTM8009A_Init+0x710>)
 800546c:	215e      	movs	r1, #94	@ 0x5e
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f87c 	bl	800556c <otm8009a_write_reg>
 8005474:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005476:	4633      	mov	r3, r6
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <OTM8009A_Init+0x714>)
 800547a:	2129      	movs	r1, #41	@ 0x29
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f875 	bl	800556c <otm8009a_write_reg>
 8005482:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005484:	4633      	mov	r3, r6
 8005486:	4631      	mov	r1, r6
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <OTM8009A_Init+0x6e0>)
 800548a:	4628      	mov	r0, r5
 800548c:	f000 f86e 	bl	800556c <otm8009a_write_reg>
 8005490:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005492:	4633      	mov	r3, r6
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <OTM8009A_Init+0x718>)
 8005496:	212c      	movs	r1, #44	@ 0x2c
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f867 	bl	800556c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800549e:	42c4      	cmn	r4, r0
}
 80054a0:	bf14      	ite	ne
 80054a2:	f04f 30ff 	movne.w	r0, #4294967295
 80054a6:	4630      	moveq	r0, r6
 80054a8:	b002      	add	sp, #8
 80054aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80054ae:	4633      	mov	r3, r6
 80054b0:	4a22      	ldr	r2, [pc, #136]	@ (800553c <OTM8009A_Init+0x71c>)
 80054b2:	e79e      	b.n	80053f2 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	e7bf      	b.n	800543a <OTM8009A_Init+0x61a>
 80054ba:	bf00      	nop
 80054bc:	080280a5 	.word	0x080280a5
 80054c0:	08028169 	.word	0x08028169
 80054c4:	08028096 	.word	0x08028096
 80054c8:	08028165 	.word	0x08028165
 80054cc:	08028087 	.word	0x08028087
 80054d0:	08028166 	.word	0x08028166
 80054d4:	0802807d 	.word	0x0802807d
 80054d8:	08028167 	.word	0x08028167
 80054dc:	0802806e 	.word	0x0802806e
 80054e0:	08028168 	.word	0x08028168
 80054e4:	0802805f 	.word	0x0802805f
 80054e8:	08028155 	.word	0x08028155
 80054ec:	08028176 	.word	0x08028176
 80054f0:	08028177 	.word	0x08028177
 80054f4:	08028178 	.word	0x08028178
 80054f8:	08028179 	.word	0x08028179
 80054fc:	0802817a 	.word	0x0802817a
 8005500:	08028149 	.word	0x08028149
 8005504:	0802805c 	.word	0x0802805c
 8005508:	0802804c 	.word	0x0802804c
 800550c:	0802803c 	.word	0x0802803c
 8005510:	0802816c 	.word	0x0802816c
 8005514:	2400b3b8 	.word	0x2400b3b8
 8005518:	0802816d 	.word	0x0802816d
 800551c:	0802817f 	.word	0x0802817f
 8005520:	0802817b 	.word	0x0802817b
 8005524:	0802816f 	.word	0x0802816f
 8005528:	08028170 	.word	0x08028170
 800552c:	08028171 	.word	0x08028171
 8005530:	08028172 	.word	0x08028172
 8005534:	08028173 	.word	0x08028173
 8005538:	08028174 	.word	0x08028174
 800553c:	0802816e 	.word	0x0802816e

08005540 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005540:	b160      	cbz	r0, 800555c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005542:	684b      	ldr	r3, [r1, #4]
 8005544:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005546:	688b      	ldr	r3, [r1, #8]
 8005548:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800554a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800554c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800554e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005550:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <OTM8009A_RegisterBusIO+0x24>)
 8005552:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005554:	4b04      	ldr	r3, [pc, #16]	@ (8005568 <OTM8009A_RegisterBusIO+0x28>)
 8005556:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005558:	2000      	movs	r0, #0
 800555a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	08004deb 	.word	0x08004deb
 8005568:	08004df9 	.word	0x08004df9

0800556c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800556c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800556e:	6804      	ldr	r4, [r0, #0]
 8005570:	6880      	ldr	r0, [r0, #8]
 8005572:	46a4      	mov	ip, r4
}
 8005574:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005578:	4760      	bx	ip
	...

0800557c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800557c:	4a10      	ldr	r2, [pc, #64]	@ (80055c0 <BSP_I2C4_DeInit+0x44>)
{
 800557e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005586:	b10b      	cbz	r3, 800558c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005588:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800558a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800558c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005590:	480c      	ldr	r0, [pc, #48]	@ (80055c4 <BSP_I2C4_DeInit+0x48>)
 8005592:	f003 f843 	bl	800861c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005596:	480b      	ldr	r0, [pc, #44]	@ (80055c4 <BSP_I2C4_DeInit+0x48>)
 8005598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800559c:	f003 f83e 	bl	800861c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80055a0:	4a09      	ldr	r2, [pc, #36]	@ (80055c8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80055a2:	480a      	ldr	r0, [pc, #40]	@ (80055cc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80055a4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80055a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80055b0:	f003 fa84 	bl	8008abc <HAL_I2C_DeInit>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d0e7      	beq.n	8005588 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80055b8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80055bc:	e7e5      	b.n	800558a <BSP_I2C4_DeInit+0xe>
 80055be:	bf00      	nop
 80055c0:	2400be1c 	.word	0x2400be1c
 80055c4:	58020c00 	.word	0x58020c00
 80055c8:	58024400 	.word	0x58024400
 80055cc:	2400b3c4 	.word	0x2400b3c4

080055d0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80055d0:	2300      	movs	r3, #0
 80055d2:	2201      	movs	r2, #1
{
 80055d4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80055d6:	6041      	str	r1, [r0, #4]
{
 80055d8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80055da:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80055dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80055e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80055e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80055e8:	f003 fa12 	bl	8008a10 <HAL_I2C_Init>
 80055ec:	4601      	mov	r1, r0
 80055ee:	b108      	cbz	r0, 80055f4 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80055f0:	2001      	movs	r0, #1
}
 80055f2:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80055f4:	4620      	mov	r0, r4
 80055f6:	f003 fc38 	bl	8008e6a <HAL_I2CEx_ConfigAnalogFilter>
 80055fa:	4601      	mov	r1, r0
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d1f7      	bne.n	80055f0 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005600:	4620      	mov	r0, r4
 8005602:	f003 fc58 	bl	8008eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8005606:	3800      	subs	r0, #0
 8005608:	bf18      	it	ne
 800560a:	2001      	movne	r0, #1
 800560c:	e7f1      	b.n	80055f2 <MX_I2C4_Init+0x22>
	...

08005610 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005610:	4ba2      	ldr	r3, [pc, #648]	@ (800589c <BSP_I2C4_Init+0x28c>)
 8005612:	48a3      	ldr	r0, [pc, #652]	@ (80058a0 <BSP_I2C4_Init+0x290>)
{
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 800561a:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 800561c:	4ba1      	ldr	r3, [pc, #644]	@ (80058a4 <BSP_I2C4_Init+0x294>)
 800561e:	681c      	ldr	r4, [r3, #0]
 8005620:	b11c      	cbz	r4, 800562a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005622:	2000      	movs	r0, #0
}
 8005624:	b013      	add	sp, #76	@ 0x4c
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800562e:	f003 fc17 	bl	8008e60 <HAL_I2C_GetState>
 8005632:	2800      	cmp	r0, #0
 8005634:	d1f5      	bne.n	8005622 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005636:	4d9c      	ldr	r5, [pc, #624]	@ (80058a8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005638:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800563c:	2702      	movs	r7, #2
 800563e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005640:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005644:	a90d      	add	r1, sp, #52	@ 0x34
 8005646:	4899      	ldr	r0, [pc, #612]	@ (80058ac <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005648:	f043 0308 	orr.w	r3, r3, #8
 800564c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005650:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	930a      	str	r3, [sp, #40]	@ 0x28
 800565a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800565c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005660:	f043 0308 	orr.w	r3, r3, #8
 8005664:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005668:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800566c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800567a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800567e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005682:	f002 fee3 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800568a:	a90d      	add	r1, sp, #52	@ 0x34
 800568c:	4887      	ldr	r0, [pc, #540]	@ (80058ac <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800568e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005690:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005694:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005698:	f002 fed8 	bl	800844c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800569c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80056a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80056a8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80056ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80056b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80056b4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80056b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056bc:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80056c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80056c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80056cc:	f005 fe9e 	bl	800b40c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d06d      	beq.n	80057b0 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80056d4:	4b76      	ldr	r3, [pc, #472]	@ (80058b0 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 80056d6:	4622      	mov	r2, r4
 80056d8:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80056da:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80056de:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80056e2:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 80058b8 <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80056e6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80056ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80056ee:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80056f2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80056f4:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80056f8:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80056fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005700:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005704:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005706:	4b6b      	ldr	r3, [pc, #428]	@ (80058b4 <BSP_I2C4_Init+0x2a4>)
 8005708:	681b      	ldr	r3, [r3, #0]
{
 800570a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800570c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005710:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005714:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005718:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800571c:	d35b      	bcc.n	80057d6 <BSP_I2C4_Init+0x1c6>
 800571e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005720:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005722:	9d00      	ldr	r5, [sp, #0]
 8005724:	42bd      	cmp	r5, r7
 8005726:	d850      	bhi.n	80057ca <BSP_I2C4_Init+0x1ba>
 8005728:	42be      	cmp	r6, r7
 800572a:	d34e      	bcc.n	80057ca <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 800572c:	4591      	cmp	r9, r2
 800572e:	d04c      	beq.n	80057ca <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005730:	2514      	movs	r5, #20
 8005732:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005736:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005738:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800573a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800573e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005740:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005744:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005748:	d93c      	bls.n	80057c4 <BSP_I2C4_Init+0x1b4>
 800574a:	4a5a      	ldr	r2, [pc, #360]	@ (80058b4 <BSP_I2C4_Init+0x2a4>)
 800574c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800574e:	4b59      	ldr	r3, [pc, #356]	@ (80058b4 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005750:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8005754:	4958      	ldr	r1, [pc, #352]	@ (80058b8 <BSP_I2C4_Init+0x2a8>)
 8005756:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800575c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 800576c:	9309      	str	r3, [sp, #36]	@ 0x24
 800576e:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 8005772:	3301      	adds	r3, #1
 8005774:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005776:	9b06      	ldr	r3, [sp, #24]
 8005778:	429f      	cmp	r7, r3
 800577a:	d138      	bne.n	80057ee <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005780:	d816      	bhi.n	80057b0 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005782:	2114      	movs	r1, #20
 8005784:	9a00      	ldr	r2, [sp, #0]
 8005786:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <BSP_I2C4_Init+0x2a8>)
 8005788:	434a      	muls	r2, r1
 800578a:	1899      	adds	r1, r3, r2
 800578c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800578e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005790:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005794:	684b      	ldr	r3, [r1, #4]
 8005796:	051b      	lsls	r3, r3, #20
 8005798:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800579c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800579e:	688b      	ldr	r3, [r1, #8]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80057a6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80057a8:	68cb      	ldr	r3, [r1, #12]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80057ae:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80057b0:	4621      	mov	r1, r4
 80057b2:	483b      	ldr	r0, [pc, #236]	@ (80058a0 <BSP_I2C4_Init+0x290>)
 80057b4:	f7ff ff0c 	bl	80055d0 <MX_I2C4_Init>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f43f af32 	beq.w	8005622 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80057be:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80057c2:	e72f      	b.n	8005624 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 80057c4:	4691      	mov	r9, r2
 80057c6:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80057ca:	f10e 0e01 	add.w	lr, lr, #1
 80057ce:	440f      	add	r7, r1
 80057d0:	f1be 0f10 	cmp.w	lr, #16
 80057d4:	d1a5      	bne.n	8005722 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80057d6:	f1bc 0f10 	cmp.w	ip, #16
 80057da:	4488      	add	r8, r1
 80057dc:	d198      	bne.n	8005710 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80057de:	3201      	adds	r2, #1
 80057e0:	4401      	add	r1, r0
 80057e2:	2a10      	cmp	r2, #16
 80057e4:	d191      	bne.n	800570a <BSP_I2C4_Init+0xfa>
 80057e6:	f1ba 0f00 	cmp.w	sl, #0
 80057ea:	d1ae      	bne.n	800574a <BSP_I2C4_Init+0x13a>
 80057ec:	e7af      	b.n	800574e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80057ee:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057f0:	f04f 0c00 	mov.w	ip, #0
 80057f4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80057f6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057fa:	441d      	add	r5, r3
 80057fc:	eb03 060b 	add.w	r6, r3, fp
 8005800:	9503      	str	r5, [sp, #12]
 8005802:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 8005806:	9d02      	ldr	r5, [sp, #8]
 8005808:	9608      	str	r6, [sp, #32]
 800580a:	1aed      	subs	r5, r5, r3
 800580c:	006d      	lsls	r5, r5, #1
 800580e:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005810:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005812:	f240 5214 	movw	r2, #1300	@ 0x514
 8005816:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800581a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800581e:	4295      	cmp	r5, r2
 8005820:	d930      	bls.n	8005884 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005822:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005826:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800582a:	d22b      	bcs.n	8005884 <BSP_I2C4_Init+0x274>
 800582c:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800582e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005832:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005836:	442e      	add	r6, r5
 8005838:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800583c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005840:	f240 4212 	movw	r2, #1042	@ 0x412
 8005844:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005848:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800584c:	4592      	cmp	sl, r2
 800584e:	d812      	bhi.n	8005876 <BSP_I2C4_Init+0x266>
 8005850:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005854:	d30f      	bcc.n	8005876 <BSP_I2C4_Init+0x266>
 8005856:	4540      	cmp	r0, r8
 8005858:	d20d      	bcs.n	8005876 <BSP_I2C4_Init+0x266>
              error = -error;
 800585a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800585e:	bf28      	it	cs
 8005860:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	4592      	cmp	sl, r2
 8005866:	d206      	bcs.n	8005876 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005868:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 800586a:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 800586e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005870:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8005872:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005874:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005876:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800587a:	4498      	add	r8, r3
 800587c:	441e      	add	r6, r3
 800587e:	eba9 0903 	sub.w	r9, r9, r3
 8005882:	d1db      	bne.n	800583c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005884:	9a01      	ldr	r2, [sp, #4]
 8005886:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800588a:	441d      	add	r5, r3
 800588c:	eba2 0203 	sub.w	r2, r2, r3
 8005890:	9201      	str	r2, [sp, #4]
 8005892:	d1be      	bne.n	8005812 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005894:	3701      	adds	r7, #1
 8005896:	3114      	adds	r1, #20
 8005898:	e76d      	b.n	8005776 <BSP_I2C4_Init+0x166>
 800589a:	bf00      	nop
 800589c:	58001c00 	.word	0x58001c00
 80058a0:	2400b3c4 	.word	0x2400b3c4
 80058a4:	2400be1c 	.word	0x2400be1c
 80058a8:	58024400 	.word	0x58024400
 80058ac:	58020c00 	.word	0x58020c00
 80058b0:	3b9aca00 	.word	0x3b9aca00
 80058b4:	2400b418 	.word	0x2400b418
 80058b8:	2400b41c 	.word	0x2400b41c

080058bc <BSP_I2C4_WriteReg>:
{
 80058bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80058be:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80058c2:	9200      	str	r2, [sp, #0]
 80058c4:	460a      	mov	r2, r1
 80058c6:	4601      	mov	r1, r0
 80058c8:	4808      	ldr	r0, [pc, #32]	@ (80058ec <BSP_I2C4_WriteReg+0x30>)
 80058ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058ce:	2301      	movs	r3, #1
 80058d0:	f003 f90e 	bl	8008af0 <HAL_I2C_Mem_Write>
 80058d4:	b140      	cbz	r0, 80058e8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80058d6:	4805      	ldr	r0, [pc, #20]	@ (80058ec <BSP_I2C4_WriteReg+0x30>)
 80058d8:	f003 fac5 	bl	8008e66 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80058dc:	2804      	cmp	r0, #4
 80058de:	bf14      	ite	ne
 80058e0:	f06f 0003 	mvnne.w	r0, #3
 80058e4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80058e8:	b004      	add	sp, #16
 80058ea:	bd10      	pop	{r4, pc}
 80058ec:	2400b3c4 	.word	0x2400b3c4

080058f0 <BSP_I2C4_ReadReg>:
{
 80058f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80058f2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80058f6:	9200      	str	r2, [sp, #0]
 80058f8:	460a      	mov	r2, r1
 80058fa:	4601      	mov	r1, r0
 80058fc:	4808      	ldr	r0, [pc, #32]	@ (8005920 <BSP_I2C4_ReadReg+0x30>)
 80058fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005902:	2301      	movs	r3, #1
 8005904:	f003 f9ce 	bl	8008ca4 <HAL_I2C_Mem_Read>
 8005908:	b140      	cbz	r0, 800591c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800590a:	4805      	ldr	r0, [pc, #20]	@ (8005920 <BSP_I2C4_ReadReg+0x30>)
 800590c:	f003 faab 	bl	8008e66 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005910:	2804      	cmp	r0, #4
 8005912:	bf14      	ite	ne
 8005914:	f06f 0003 	mvnne.w	r0, #3
 8005918:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800591c:	b004      	add	sp, #16
 800591e:	bd10      	pop	{r4, pc}
 8005920:	2400b3c4 	.word	0x2400b3c4

08005924 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005924:	f000 bd08 	b.w	8006338 <HAL_GetTick>

08005928 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005928:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800592a:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800592e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005930:	684a      	ldr	r2, [r1, #4]
 8005932:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005934:	2201      	movs	r2, #1
 8005936:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005938:	688a      	ldr	r2, [r1, #8]
 800593a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800593c:	680a      	ldr	r2, [r1, #0]
 800593e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005940:	2200      	movs	r2, #0
 8005942:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005946:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005948:	68ca      	ldr	r2, [r1, #12]
 800594a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800594c:	f004 be8e 	b.w	800a66c <HAL_QSPI_Init>
 8005950:	52005000 	.word	0x52005000

08005954 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005954:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005956:	b988      	cbnz	r0, 800597c <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005958:	4c0a      	ldr	r4, [pc, #40]	@ (8005984 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800595a:	480b      	ldr	r0, [pc, #44]	@ (8005988 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800595c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800595e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005960:	b94b      	cbnz	r3, 8005976 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005962:	f7ff f9ba 	bl	8004cda <MT25TL01G_EnableMemoryMappedModeSTR>
 8005966:	b110      	cbz	r0, 800596e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005968:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800596c:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800596e:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005970:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005972:	7023      	strb	r3, [r4, #0]
 8005974:	e7fa      	b.n	800596c <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005976:	f7ff f966 	bl	8004c46 <MT25TL01G_EnableMemoryMappedModeDTR>
 800597a:	e7f4      	b.n	8005966 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800597c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005980:	e7f4      	b.n	800596c <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005982:	bf00      	nop
 8005984:	2400be20 	.word	0x2400be20
 8005988:	240099e0 	.word	0x240099e0

0800598c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	460c      	mov	r4, r1
 8005990:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005992:	bb30      	cbnz	r0, 80059e2 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005994:	4d17      	ldr	r5, [pc, #92]	@ (80059f4 <BSP_QSPI_ConfigFlash+0x68>)
 8005996:	782b      	ldrb	r3, [r5, #0]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d025      	beq.n	80059e8 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800599c:	fab2 f382 	clz	r3, r2
 80059a0:	4e15      	ldr	r6, [pc, #84]	@ (80059f8 <BSP_QSPI_ConfigFlash+0x6c>)
 80059a2:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80059a4:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80059aa:	f004 fe5f 	bl	800a66c <HAL_QSPI_Init>
 80059ae:	b9f0      	cbnz	r0, 80059ee <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80059b0:	786b      	ldrb	r3, [r5, #1]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d10f      	bne.n	80059d6 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80059b6:	2c03      	cmp	r4, #3
 80059b8:	d105      	bne.n	80059c6 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80059ba:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80059bc:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80059be:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80059c0:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80059c2:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80059c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff f921 	bl	8004c0e <MT25TL01G_ExitQPIMode>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0f4      	beq.n	80059ba <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80059d0:	f06f 0004 	mvn.w	r0, #4
 80059d4:	e7f6      	b.n	80059c4 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80059d6:	2c03      	cmp	r4, #3
 80059d8:	d1ef      	bne.n	80059ba <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff f8fb 	bl	8004bd6 <MT25TL01G_EnterQPIMode>
 80059e0:	e7f4      	b.n	80059cc <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80059e2:	f06f 0001 	mvn.w	r0, #1
 80059e6:	e7ed      	b.n	80059c4 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80059e8:	f06f 0019 	mvn.w	r0, #25
 80059ec:	e7ea      	b.n	80059c4 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80059ee:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80059f2:	e7e7      	b.n	80059c4 <BSP_QSPI_ConfigFlash+0x38>
 80059f4:	2400be20 	.word	0x2400be20
 80059f8:	240099e0 	.word	0x240099e0

080059fc <BSP_QSPI_Init>:
{
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f040 81ac 	bne.w	8005d62 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005a0a:	4d03      	ldr	r5, [pc, #12]	@ (8005a18 <BSP_QSPI_Init+0x1c>)
 8005a0c:	782f      	ldrb	r7, [r5, #0]
 8005a0e:	b12f      	cbz	r7, 8005a1c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005a10:	2000      	movs	r0, #0
}
 8005a12:	b024      	add	sp, #144	@ 0x90
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	2400be20 	.word	0x2400be20
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005a1c:	4bc3      	ldr	r3, [pc, #780]	@ (8005d2c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a1e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a22:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005a24:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005a26:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005a2a:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005a2e:	48c0      	ldr	r0, [pc, #768]	@ (8005d30 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005a30:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a38:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005a3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005a40:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005a44:	9201      	str	r2, [sp, #4]
 8005a46:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005a48:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005a4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005a50:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005a52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a56:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005a58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a5c:	f042 0202 	orr.w	r2, r2, #2
 8005a60:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a68:	f002 0202 	and.w	r2, r2, #2
 8005a6c:	9202      	str	r2, [sp, #8]
 8005a6e:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005a70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a80:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005a84:	9203      	str	r2, [sp, #12]
 8005a86:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005a88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a98:	f002 0208 	and.w	r2, r2, #8
 8005a9c:	9204      	str	r2, [sp, #16]
 8005a9e:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005aa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005aa4:	f042 0220 	orr.w	r2, r2, #32
 8005aa8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005aac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ab0:	f002 0220 	and.w	r2, r2, #32
 8005ab4:	9205      	str	r2, [sp, #20]
 8005ab6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005ab8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005abc:	f042 0220 	orr.w	r2, r2, #32
 8005ac0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ac4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ac8:	f002 0220 	and.w	r2, r2, #32
 8005acc:	9206      	str	r2, [sp, #24]
 8005ace:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005ad0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ad4:	f042 0220 	orr.w	r2, r2, #32
 8005ad8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005adc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ae0:	f002 0220 	and.w	r2, r2, #32
 8005ae4:	9207      	str	r2, [sp, #28]
 8005ae6:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005ae8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005af4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005af8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005afc:	9208      	str	r2, [sp, #32]
 8005afe:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b10:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b28:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005b2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b40:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005b44:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005b46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005b60:	2302      	movs	r3, #2
 8005b62:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b66:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b68:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005b6a:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005b6e:	f002 fc6d 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005b72:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005b74:	a916      	add	r1, sp, #88	@ 0x58
 8005b76:	486f      	ldr	r0, [pc, #444]	@ (8005d34 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005b78:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005b7a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005b7e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005b82:	f002 fc63 	bl	800844c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005b86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005b8a:	a916      	add	r1, sp, #88	@ 0x58
 8005b8c:	486a      	ldr	r0, [pc, #424]	@ (8005d38 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005b8e:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005b90:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b92:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005b94:	f002 fc5a 	bl	800844c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005b98:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005b9a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005b9e:	4867      	ldr	r0, [pc, #412]	@ (8005d3c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005ba0:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ba4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ba6:	f002 fc51 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005baa:	a916      	add	r1, sp, #88	@ 0x58
 8005bac:	4864      	ldr	r0, [pc, #400]	@ (8005d40 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005bae:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005bb2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005bb6:	f002 fc49 	bl	800844c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005bba:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005bbc:	a916      	add	r1, sp, #88	@ 0x58
 8005bbe:	485f      	ldr	r0, [pc, #380]	@ (8005d3c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005bc0:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005bc2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005bc4:	f002 fc42 	bl	800844c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005bc8:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005bca:	a916      	add	r1, sp, #88	@ 0x58
 8005bcc:	485c      	ldr	r0, [pc, #368]	@ (8005d40 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005bce:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005bd0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005bd2:	f002 fc3b 	bl	800844c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005bd6:	a916      	add	r1, sp, #88	@ 0x58
 8005bd8:	4856      	ldr	r0, [pc, #344]	@ (8005d34 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005bda:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005bde:	f002 fc35 	bl	800844c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005be2:	a916      	add	r1, sp, #88	@ 0x58
 8005be4:	4856      	ldr	r0, [pc, #344]	@ (8005d40 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005be6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005bea:	f002 fc2f 	bl	800844c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005bee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005bf2:	a916      	add	r1, sp, #88	@ 0x58
 8005bf4:	484f      	ldr	r0, [pc, #316]	@ (8005d34 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005bf6:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005bf8:	f002 fc28 	bl	800844c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005bfc:	463a      	mov	r2, r7
 8005bfe:	210f      	movs	r1, #15
 8005c00:	205c      	movs	r0, #92	@ 0x5c
 8005c02:	f001 f995 	bl	8006f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005c06:	205c      	movs	r0, #92	@ 0x5c
 8005c08:	f001 f9c4 	bl	8006f94 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005c0c:	a811      	add	r0, sp, #68	@ 0x44
 8005c0e:	f7fe ff36 	bl	8004a7e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005c12:	7863      	ldrb	r3, [r4, #1]
 8005c14:	4a4b      	ldr	r2, [pc, #300]	@ (8005d44 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005c16:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c1e:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005c22:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005c26:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005c2a:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005c2e:	a90d      	add	r1, sp, #52	@ 0x34
 8005c30:	4845      	ldr	r0, [pc, #276]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005c32:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005c34:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005c36:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005c38:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005c3c:	f7ff fe74 	bl	8005928 <MX_QSPI_Init>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	f040 8091 	bne.w	8005d68 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005c46:	2103      	movs	r1, #3
 8005c48:	483f      	ldr	r0, [pc, #252]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c4a:	f7ff f88c 	bl	8004d66 <MT25TL01G_ResetEnable>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f040 8084 	bne.w	8005d5c <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005c54:	2103      	movs	r1, #3
 8005c56:	483c      	ldr	r0, [pc, #240]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c58:	f7ff f8a6 	bl	8004da8 <MT25TL01G_ResetMemory>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d17d      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c60:	7869      	ldrb	r1, [r5, #1]
 8005c62:	4839      	ldr	r0, [pc, #228]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c64:	f7fe ff1c 	bl	8004aa0 <MT25TL01G_AutoPollingMemReady>
 8005c68:	4601      	mov	r1, r0
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d176      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005c6e:	4836      	ldr	r0, [pc, #216]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c70:	f7ff f879 	bl	8004d66 <MT25TL01G_ResetEnable>
 8005c74:	4601      	mov	r1, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d170      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005c7a:	4833      	ldr	r0, [pc, #204]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c7c:	f7ff f894 	bl	8004da8 <MT25TL01G_ResetMemory>
 8005c80:	4601      	mov	r1, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d16a      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005c86:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005c88:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c8a:	482f      	ldr	r0, [pc, #188]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005c8c:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c8e:	f7fe ff07 	bl	8004aa0 <MT25TL01G_AutoPollingMemReady>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d162      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c96:	7869      	ldrb	r1, [r5, #1]
 8005c98:	482b      	ldr	r0, [pc, #172]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005c9a:	f7fe ff70 	bl	8004b7e <MT25TL01G_Enter4BytesAddressMode>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d15c      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005ca6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005caa:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cac:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005cb0:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005cb2:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cb4:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005cb6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005cb8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005cbc:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005cbe:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005cc0:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005cc4:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005cc8:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ccc:	481e      	ldr	r0, [pc, #120]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005cce:	f004 fd19 	bl	800a704 <HAL_QSPI_Command>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d142      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cda:	f10d 0102 	add.w	r1, sp, #2
 8005cde:	481a      	ldr	r0, [pc, #104]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005ce0:	f004 fdb0 	bl	800a844 <HAL_QSPI_Receive>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d139      	bne.n	8005d5c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ce8:	7869      	ldrb	r1, [r5, #1]
 8005cea:	4817      	ldr	r0, [pc, #92]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005cec:	f7fe ff03 	bl	8004af6 <MT25TL01G_WriteEnable>
 8005cf0:	bba0      	cbnz	r0, 8005d5c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005cf2:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf8:	a916      	add	r1, sp, #88	@ 0x58
 8005cfa:	4813      	ldr	r0, [pc, #76]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005cfc:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005cfe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d06:	051b      	lsls	r3, r3, #20
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d12:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d16:	f004 fcf5 	bl	800a704 <HAL_QSPI_Command>
 8005d1a:	b9f8      	cbnz	r0, 8005d5c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d20:	f10d 0102 	add.w	r1, sp, #2
 8005d24:	4808      	ldr	r0, [pc, #32]	@ (8005d48 <BSP_QSPI_Init+0x34c>)
 8005d26:	f004 fd31 	bl	800a78c <HAL_QSPI_Transmit>
 8005d2a:	e00f      	b.n	8005d4c <BSP_QSPI_Init+0x350>
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	58020400 	.word	0x58020400
 8005d34:	58021800 	.word	0x58021800
 8005d38:	58020c00 	.word	0x58020c00
 8005d3c:	58021c00 	.word	0x58021c00
 8005d40:	58021400 	.word	0x58021400
 8005d44:	08028184 	.word	0x08028184
 8005d48:	240099e0 	.word	0x240099e0
 8005d4c:	b930      	cbnz	r0, 8005d5c <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005d4e:	7862      	ldrb	r2, [r4, #1]
 8005d50:	7821      	ldrb	r1, [r4, #0]
 8005d52:	f7ff fe1b 	bl	800598c <BSP_QSPI_ConfigFlash>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f ae5a 	beq.w	8005a10 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d5c:	f06f 0004 	mvn.w	r0, #4
 8005d60:	e657      	b.n	8005a12 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d62:	f06f 0001 	mvn.w	r0, #1
 8005d66:	e654      	b.n	8005a12 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005d68:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005d6c:	e651      	b.n	8005a12 <BSP_QSPI_Init+0x16>
 8005d6e:	bf00      	nop

08005d70 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005d70:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d72:	4604      	mov	r4, r0
 8005d74:	b970      	cbnz	r0, 8005d94 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <BSP_SDRAM_DeInit+0x2c>)
 8005d78:	4809      	ldr	r0, [pc, #36]	@ (8005da0 <BSP_SDRAM_DeInit+0x30>)
 8005d7a:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005d7c:	f006 fd18 	bl	800c7b0 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005d80:	207a      	movs	r0, #122	@ 0x7a
 8005d82:	f001 f915 	bl	8006fb0 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005d86:	4807      	ldr	r0, [pc, #28]	@ (8005da4 <BSP_SDRAM_DeInit+0x34>)
 8005d88:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <BSP_SDRAM_DeInit+0x38>)
 8005d8a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005d8c:	f004 f9f6 	bl	800a17c <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005d90:	4620      	mov	r0, r4
}
 8005d92:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005d94:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005d98:	e7fb      	b.n	8005d92 <BSP_SDRAM_DeInit+0x22>
 8005d9a:	bf00      	nop
 8005d9c:	52004140 	.word	0x52004140
 8005da0:	2400bf24 	.word	0x2400bf24
 8005da4:	2400be2c 	.word	0x2400be2c
 8005da8:	52000040 	.word	0x52000040

08005dac <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005dac:	2201      	movs	r2, #1
 8005dae:	4915      	ldr	r1, [pc, #84]	@ (8005e04 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005db0:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <MX_SDRAM_Init+0x5c>)
{
 8005db2:	b510      	push	{r4, lr}
 8005db4:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005db6:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005db8:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005dba:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005dc6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005dca:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005dd4:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005dd8:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005ddc:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005dde:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005de0:	2207      	movs	r2, #7
 8005de2:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005de4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005de8:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005dea:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005dec:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005df0:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005df4:	f006 fcb4 	bl	800c760 <HAL_SDRAM_Init>
}
 8005df8:	3800      	subs	r0, #0
 8005dfa:	bf18      	it	ne
 8005dfc:	2001      	movne	r0, #1
 8005dfe:	b008      	add	sp, #32
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	bf00      	nop
 8005e04:	52004140 	.word	0x52004140
 8005e08:	2400bf24 	.word	0x2400bf24

08005e0c <BSP_SDRAM_Init>:
{
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005e0e:	4605      	mov	r5, r0
{
 8005e10:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f040 80dd 	bne.w	8005fd2 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e18:	4b71      	ldr	r3, [pc, #452]	@ (8005fe0 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005e1a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e1c:	a909      	add	r1, sp, #36	@ 0x24
 8005e1e:	4871      	ldr	r0, [pc, #452]	@ (8005fe4 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e24:	4c70      	ldr	r4, [pc, #448]	@ (8005fe8 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e2a:	4e70      	ldr	r6, [pc, #448]	@ (8005fec <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e2c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005e30:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005e34:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005e38:	9201      	str	r2, [sp, #4]
 8005e3a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005e3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005e48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005e4c:	f002 0201 	and.w	r2, r2, #1
 8005e50:	9202      	str	r2, [sp, #8]
 8005e52:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e58:	f042 0208 	orr.w	r2, r2, #8
 8005e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e64:	f002 0208 	and.w	r2, r2, #8
 8005e68:	9203      	str	r2, [sp, #12]
 8005e6a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e70:	f042 0210 	orr.w	r2, r2, #16
 8005e74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e7c:	f002 0210 	and.w	r2, r2, #16
 8005e80:	9204      	str	r2, [sp, #16]
 8005e82:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e88:	f042 0220 	orr.w	r2, r2, #32
 8005e8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e94:	f002 0220 	and.w	r2, r2, #32
 8005e98:	9205      	str	r2, [sp, #20]
 8005e9a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ea4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005eac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005eb0:	9206      	str	r2, [sp, #24]
 8005eb2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005eb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ec4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005ec8:	9207      	str	r2, [sp, #28]
 8005eca:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ed8:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee2:	9308      	str	r3, [sp, #32]
 8005ee4:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005eec:	230c      	movs	r3, #12
 8005eee:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005ef2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005ef6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005ef8:	f002 faa8 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005efc:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005f00:	a909      	add	r1, sp, #36	@ 0x24
 8005f02:	483b      	ldr	r0, [pc, #236]	@ (8005ff0 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005f04:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005f06:	f002 faa1 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005f0a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005f0e:	a909      	add	r1, sp, #36	@ 0x24
 8005f10:	4838      	ldr	r0, [pc, #224]	@ (8005ff4 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005f12:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005f14:	f002 fa9a 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005f18:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005f1c:	a909      	add	r1, sp, #36	@ 0x24
 8005f1e:	4836      	ldr	r0, [pc, #216]	@ (8005ff8 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005f20:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005f22:	f002 fa93 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005f26:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005f2a:	a909      	add	r1, sp, #36	@ 0x24
 8005f2c:	4833      	ldr	r0, [pc, #204]	@ (8005ffc <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005f2e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005f30:	f002 fa8c 	bl	800844c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005f34:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005f38:	a909      	add	r1, sp, #36	@ 0x24
 8005f3a:	4831      	ldr	r0, [pc, #196]	@ (8006000 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005f3c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005f3e:	f002 fa85 	bl	800844c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005f42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005f4a:	f240 2002 	movw	r0, #514	@ 0x202
 8005f4e:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005f52:	6334      	str	r4, [r6, #48]	@ 0x30
 8005f54:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005f56:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005f5a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005f5e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005f60:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005f62:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005f64:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005f66:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005f6a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005f6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005f74:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005f76:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005f78:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005f80:	f004 f8fc 	bl	800a17c <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005f84:	4620      	mov	r0, r4
 8005f86:	f004 f88a 	bl	800a09e <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	210f      	movs	r1, #15
 8005f8e:	207a      	movs	r0, #122	@ 0x7a
 8005f90:	f000 ffce 	bl	8006f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005f94:	207a      	movs	r0, #122	@ 0x7a
 8005f96:	f000 fffd 	bl	8006f94 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff ff06 	bl	8005dac <MX_SDRAM_Init>
 8005fa0:	b9d0      	cbnz	r0, 8005fd8 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005fa2:	4919      	ldr	r1, [pc, #100]	@ (8006008 <BSP_SDRAM_Init+0x1fc>)
 8005fa4:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005fa6:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005faa:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005fae:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005fb0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005fb4:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005fb6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005fbe:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005fc0:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005fc2:	f7fe fd2f 	bl	8004a24 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	bf18      	it	ne
 8005fca:	f06f 0004 	mvnne.w	r0, #4
}
 8005fce:	b00f      	add	sp, #60	@ 0x3c
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005fd2:	f06f 0001 	mvn.w	r0, #1
 8005fd6:	e7fa      	b.n	8005fce <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005fdc:	e7f7      	b.n	8005fce <BSP_SDRAM_Init+0x1c2>
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	58020c00 	.word	0x58020c00
 8005fe8:	2400be98 	.word	0x2400be98
 8005fec:	2400bf24 	.word	0x2400bf24
 8005ff0:	58021000 	.word	0x58021000
 8005ff4:	58021400 	.word	0x58021400
 8005ff8:	58021800 	.word	0x58021800
 8005ffc:	58021c00 	.word	0x58021c00
 8006000:	58022000 	.word	0x58022000
 8006004:	52000040 	.word	0x52000040
 8006008:	2400bf04 	.word	0x2400bf04

0800600c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460c      	mov	r4, r1
 8006012:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006014:	4606      	mov	r6, r0
 8006016:	2800      	cmp	r0, #0
 8006018:	d15c      	bne.n	80060d4 <BSP_TS_Init+0xc8>
 800601a:	680b      	ldr	r3, [r1, #0]
 800601c:	1e5a      	subs	r2, r3, #1
 800601e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8006022:	d257      	bcs.n	80060d4 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006024:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006026:	1e51      	subs	r1, r2, #1
 8006028:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800602c:	d252      	bcs.n	80060d4 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800602e:	4293      	cmp	r3, r2
 8006030:	bf28      	it	cs
 8006032:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006034:	68e2      	ldr	r2, [r4, #12]
 8006036:	429a      	cmp	r2, r3
 8006038:	d84c      	bhi.n	80060d4 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800603a:	2370      	movs	r3, #112	@ 0x70
 800603c:	2254      	movs	r2, #84	@ 0x54
 800603e:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006118 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006046:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800604a:	4b2e      	ldr	r3, [pc, #184]	@ (8006104 <BSP_TS_Init+0xf8>)
 800604c:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800604e:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <BSP_TS_Init+0xfc>)
 8006050:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006052:	4b2e      	ldr	r3, [pc, #184]	@ (800610c <BSP_TS_Init+0x100>)
 8006054:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006056:	4b2e      	ldr	r3, [pc, #184]	@ (8006110 <BSP_TS_Init+0x104>)
 8006058:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800605a:	4b2e      	ldr	r3, [pc, #184]	@ (8006114 <BSP_TS_Init+0x108>)
 800605c:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800605e:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006062:	a906      	add	r1, sp, #24
 8006064:	482c      	ldr	r0, [pc, #176]	@ (8006118 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006066:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800606a:	f7fe fbe1 	bl	8004830 <FT6X06_RegisterBusIO>
 800606e:	b9c0      	cbnz	r0, 80060a2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006070:	4669      	mov	r1, sp
 8006072:	4829      	ldr	r0, [pc, #164]	@ (8006118 <BSP_TS_Init+0x10c>)
 8006074:	f7fe fb25 	bl	80046c2 <FT6X06_ReadID>
 8006078:	b998      	cbnz	r0, 80060a2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	2b11      	cmp	r3, #17
 800607e:	d110      	bne.n	80060a2 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006080:	a903      	add	r1, sp, #12
 8006082:	4825      	ldr	r0, [pc, #148]	@ (8006118 <BSP_TS_Init+0x10c>)
 8006084:	f7fe fad1 	bl	800462a <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006088:	4f24      	ldr	r7, [pc, #144]	@ (800611c <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800608a:	4b25      	ldr	r3, [pc, #148]	@ (8006120 <BSP_TS_Init+0x114>)
 800608c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006128 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006090:	4821      	ldr	r0, [pc, #132]	@ (8006118 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006092:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006096:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4798      	blx	r3
 800609e:	4605      	mov	r5, r0
 80060a0:	b1d8      	cbz	r0, 80060da <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80060a2:	b116      	cbz	r6, 80060aa <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80060a4:	f04f 35ff 	mov.w	r5, #4294967295
 80060a8:	e010      	b.n	80060cc <BSP_TS_Init+0xc0>
 80060aa:	2601      	movs	r6, #1
 80060ac:	e7d7      	b.n	800605e <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80060ae:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80060b0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80060b2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80060b4:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80060b6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80060b8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80060be:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80060c0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80060c2:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80060c4:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80060c6:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80060c8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 80060cc:	4628      	mov	r0, r5
 80060ce:	b00c      	add	sp, #48	@ 0x30
 80060d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80060d4:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80060d8:	e7f8      	b.n	80060cc <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80060da:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80060dc:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80060de:	4e11      	ldr	r6, [pc, #68]	@ (8006124 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80060e0:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80060e2:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80060e8:	68a3      	ldr	r3, [r4, #8]
 80060ea:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80060ec:	68e3      	ldr	r3, [r4, #12]
 80060ee:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80060f0:	f8d8 3000 	ldr.w	r3, [r8]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4798      	blx	r3
 80060f8:	2800      	cmp	r0, #0
 80060fa:	dad8      	bge.n	80060ae <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060fc:	f06f 0504 	mvn.w	r5, #4
 8006100:	e7e4      	b.n	80060cc <BSP_TS_Init+0xc0>
 8006102:	bf00      	nop
 8006104:	08005611 	.word	0x08005611
 8006108:	0800557d 	.word	0x0800557d
 800610c:	080058f1 	.word	0x080058f1
 8006110:	080058bd 	.word	0x080058bd
 8006114:	08005925 	.word	0x08005925
 8006118:	2400bf58 	.word	0x2400bf58
 800611c:	2400bf80 	.word	0x2400bf80
 8006120:	24000038 	.word	0x24000038
 8006124:	2400bf84 	.word	0x2400bf84
 8006128:	2400bfac 	.word	0x2400bfac

0800612c <BSP_TS_GetState>:
{
 800612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612e:	460c      	mov	r4, r1
 8006130:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8006132:	2800      	cmp	r0, #0
 8006134:	d14d      	bne.n	80061d2 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006136:	4b28      	ldr	r3, [pc, #160]	@ (80061d8 <BSP_TS_GetState+0xac>)
 8006138:	a901      	add	r1, sp, #4
 800613a:	4a28      	ldr	r2, [pc, #160]	@ (80061dc <BSP_TS_GetState+0xb0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6810      	ldr	r0, [r2, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	4798      	blx	r3
 8006144:	2800      	cmp	r0, #0
 8006146:	db41      	blt.n	80061cc <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006148:	4925      	ldr	r1, [pc, #148]	@ (80061e0 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800614a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800614c:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800614e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006150:	2e00      	cmp	r6, #0
 8006152:	d037      	beq.n	80061c4 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006154:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006156:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800615a:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800615e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006162:	bf02      	ittt	eq
 8006164:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8006166:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8006168:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800616a:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800616e:	bf1c      	itt	ne
 8006170:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006174:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006178:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800617c:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800617e:	bf44      	itt	mi
 8006180:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8006184:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006186:	680f      	ldr	r7, [r1, #0]
 8006188:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800618a:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800618c:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800618e:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006190:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006192:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006196:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800619a:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800619c:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800619e:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80061a0:	bf8c      	ite	hi
 80061a2:	eba2 0c05 	subhi.w	ip, r2, r5
 80061a6:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80061aa:	4283      	cmp	r3, r0
 80061ac:	bf8c      	ite	hi
 80061ae:	1a1e      	subhi	r6, r3, r0
 80061b0:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80061b2:	4567      	cmp	r7, ip
 80061b4:	d301      	bcc.n	80061ba <BSP_TS_GetState+0x8e>
 80061b6:	42b7      	cmp	r7, r6
 80061b8:	d205      	bcs.n	80061c6 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80061ba:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80061bc:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80061be:	2000      	movs	r0, #0
}
 80061c0:	b005      	add	sp, #20
 80061c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 80061c4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80061c6:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80061ca:	e7f8      	b.n	80061be <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061cc:	f06f 0004 	mvn.w	r0, #4
 80061d0:	e7f6      	b.n	80061c0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80061d2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80061d6:	e7f3      	b.n	80061c0 <BSP_TS_GetState+0x94>
 80061d8:	2400bfac 	.word	0x2400bfac
 80061dc:	2400bf80 	.word	0x2400bf80
 80061e0:	2400bf84 	.word	0x2400bf84

080061e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80061e4:	4b2d      	ldr	r3, [pc, #180]	@ (800629c <SystemInit+0xb8>)
 80061e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061ea:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80061ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	f042 0210 	orr.w	r2, r2, #16
 80061f8:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80061fa:	4a29      	ldr	r2, [pc, #164]	@ (80062a0 <SystemInit+0xbc>)
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	2b06      	cmp	r3, #6
 8006204:	d805      	bhi.n	8006212 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	f023 030f 	bic.w	r3, r3, #15
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006212:	4b24      	ldr	r3, [pc, #144]	@ (80062a4 <SystemInit+0xc0>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800621c:	2200      	movs	r2, #0
 800621e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006220:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <SystemInit+0xc4>)
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006226:	491e      	ldr	r1, [pc, #120]	@ (80062a0 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006228:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800622a:	680a      	ldr	r2, [r1, #0]
 800622c:	0712      	lsls	r2, r2, #28
 800622e:	d505      	bpl.n	800623c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006230:	680a      	ldr	r2, [r1, #0]
 8006232:	f022 020f 	bic.w	r2, r2, #15
 8006236:	f042 0207 	orr.w	r2, r2, #7
 800623a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800623c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800623e:	491b      	ldr	r1, [pc, #108]	@ (80062ac <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006240:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006242:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006244:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006246:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006248:	4919      	ldr	r1, [pc, #100]	@ (80062b0 <SystemInit+0xcc>)
 800624a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800624c:	4919      	ldr	r1, [pc, #100]	@ (80062b4 <SystemInit+0xd0>)
 800624e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006252:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006254:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006256:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006260:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006262:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006268:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800626c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006270:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006274:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <SystemInit+0xd4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f36f 030f 	bfc	r3, #0, #16
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006280:	d203      	bcs.n	800628a <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006282:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <SystemInit+0xd8>)
 8006284:	2201      	movs	r2, #1
 8006286:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <SystemInit+0xdc>)
 800628c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006290:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006292:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006296:	4b01      	ldr	r3, [pc, #4]	@ (800629c <SystemInit+0xb8>)
 8006298:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800629a:	4770      	bx	lr
 800629c:	e000ed00 	.word	0xe000ed00
 80062a0:	52002000 	.word	0x52002000
 80062a4:	58024400 	.word	0x58024400
 80062a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80062ac:	02020200 	.word	0x02020200
 80062b0:	01ff0000 	.word	0x01ff0000
 80062b4:	01010280 	.word	0x01010280
 80062b8:	5c001000 	.word	0x5c001000
 80062bc:	51008000 	.word	0x51008000
 80062c0:	52004000 	.word	0x52004000

080062c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062c4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062c6:	2003      	movs	r0, #3
 80062c8:	f000 fe20 	bl	8006f0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062cc:	f004 fea2 	bl	800b014 <HAL_RCC_GetSysClockFreq>
 80062d0:	490f      	ldr	r1, [pc, #60]	@ (8006310 <HAL_Init+0x4c>)
 80062d2:	4a10      	ldr	r2, [pc, #64]	@ (8006314 <HAL_Init+0x50>)
 80062d4:	698b      	ldr	r3, [r1, #24]
 80062d6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80062da:	5cd3      	ldrb	r3, [r2, r3]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062e2:	698b      	ldr	r3, [r1, #24]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006318 <HAL_Init+0x54>)
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	fa20 f303 	lsr.w	r3, r0, r3
 80062f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062f6:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_Init+0x58>)
 80062f8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062fa:	2000      	movs	r0, #0
 80062fc:	f7fb fa64 	bl	80017c8 <HAL_InitTick>
 8006300:	4604      	mov	r4, r0
 8006302:	b918      	cbnz	r0, 800630c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006304:	f7fa feea 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006308:	4620      	mov	r0, r4
 800630a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800630c:	2401      	movs	r4, #1
 800630e:	e7fb      	b.n	8006308 <HAL_Init+0x44>
 8006310:	58024400 	.word	0x58024400
 8006314:	0802818c 	.word	0x0802818c
 8006318:	24000068 	.word	0x24000068
 800631c:	2400006c 	.word	0x2400006c

08006320 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006320:	4a03      	ldr	r2, [pc, #12]	@ (8006330 <HAL_IncTick+0x10>)
 8006322:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <HAL_IncTick+0x14>)
 8006324:	6811      	ldr	r1, [r2, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	440b      	add	r3, r1
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2400bfb0 	.word	0x2400bfb0
 8006334:	24000070 	.word	0x24000070

08006338 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006338:	4b01      	ldr	r3, [pc, #4]	@ (8006340 <HAL_GetTick+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	2400bfb0 	.word	0x2400bfb0

08006344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006348:	f7ff fff6 	bl	8006338 <HAL_GetTick>
 800634c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800634e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006350:	bf1e      	ittt	ne
 8006352:	4b04      	ldrne	r3, [pc, #16]	@ (8006364 <HAL_Delay+0x20>)
 8006354:	781b      	ldrbne	r3, [r3, #0]
 8006356:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006358:	f7ff ffee 	bl	8006338 <HAL_GetTick>
 800635c:	1b43      	subs	r3, r0, r5
 800635e:	42a3      	cmp	r3, r4
 8006360:	d3fa      	bcc.n	8006358 <HAL_Delay+0x14>
  {
  }
}
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	24000070 	.word	0x24000070

08006368 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006368:	4b01      	ldr	r3, [pc, #4]	@ (8006370 <HAL_GetREVID+0x8>)
 800636a:	6818      	ldr	r0, [r3, #0]
}
 800636c:	0c00      	lsrs	r0, r0, #16
 800636e:	4770      	bx	lr
 8006370:	5c001000 	.word	0x5c001000

08006374 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006374:	4a03      	ldr	r2, [pc, #12]	@ (8006384 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8006376:	6853      	ldr	r3, [r2, #4]
 8006378:	ea23 0300 	bic.w	r3, r3, r0
 800637c:	430b      	orrs	r3, r1
 800637e:	6053      	str	r3, [r2, #4]
}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	58000400 	.word	0x58000400

08006388 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006388:	6880      	ldr	r0, [r0, #8]
}
 800638a:	f000 0001 	and.w	r0, r0, #1
 800638e:	4770      	bx	lr

08006390 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006390:	6880      	ldr	r0, [r0, #8]
}
 8006392:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006396:	4770      	bx	lr

08006398 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	4a41      	ldr	r2, [pc, #260]	@ (80064a0 <HAL_ADC_PollForConversion+0x108>)
 800639c:	4293      	cmp	r3, r2
{
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063a6:	d01c      	beq.n	80063e2 <HAL_ADC_PollForConversion+0x4a>
 80063a8:	483e      	ldr	r0, [pc, #248]	@ (80064a4 <HAL_ADC_PollForConversion+0x10c>)
 80063aa:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80063ae:	493e      	ldr	r1, [pc, #248]	@ (80064a8 <HAL_ADC_PollForConversion+0x110>)
 80063b0:	4283      	cmp	r3, r0
 80063b2:	bf18      	it	ne
 80063b4:	460a      	movne	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80063b6:	6925      	ldr	r5, [r4, #16]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063b8:	6897      	ldr	r7, [r2, #8]
 80063ba:	2d08      	cmp	r5, #8
 80063bc:	f007 071f 	and.w	r7, r7, #31
 80063c0:	d022      	beq.n	8006408 <HAL_ADC_PollForConversion+0x70>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063c2:	f240 2221 	movw	r2, #545	@ 0x221
 80063c6:	40fa      	lsrs	r2, r7
 80063c8:	07d1      	lsls	r1, r2, #31
 80063ca:	d50c      	bpl.n	80063e6 <HAL_ADC_PollForConversion+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80063d2:	d018      	beq.n	8006406 <HAL_ADC_PollForConversion+0x6e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80063d6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063d8:	f043 0320 	orr.w	r3, r3, #32
 80063dc:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80063de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063e2:	4a32      	ldr	r2, [pc, #200]	@ (80064ac <HAL_ADC_PollForConversion+0x114>)
 80063e4:	e7e7      	b.n	80063b6 <HAL_ADC_PollForConversion+0x1e>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80063e6:	4a2e      	ldr	r2, [pc, #184]	@ (80064a0 <HAL_ADC_PollForConversion+0x108>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00a      	beq.n	8006402 <HAL_ADC_PollForConversion+0x6a>
 80063ec:	482d      	ldr	r0, [pc, #180]	@ (80064a4 <HAL_ADC_PollForConversion+0x10c>)
 80063ee:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80063f2:	492d      	ldr	r1, [pc, #180]	@ (80064a8 <HAL_ADC_PollForConversion+0x110>)
 80063f4:	4283      	cmp	r3, r0
 80063f6:	bf18      	it	ne
 80063f8:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80063fa:	6893      	ldr	r3, [r2, #8]
 80063fc:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8006400:	e7e7      	b.n	80063d2 <HAL_ADC_PollForConversion+0x3a>
 8006402:	4a2a      	ldr	r2, [pc, #168]	@ (80064ac <HAL_ADC_PollForConversion+0x114>)
 8006404:	e7f9      	b.n	80063fa <HAL_ADC_PollForConversion+0x62>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006406:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8006408:	f7ff ff96 	bl	8006338 <HAL_GetTick>
 800640c:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	422a      	tst	r2, r5
 8006414:	d025      	beq.n	8006462 <HAL_ADC_PollForConversion+0xca>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006416:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800641c:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8006424:	d10f      	bne.n	8006446 <HAL_ADC_PollForConversion+0xae>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006426:	7d62      	ldrb	r2, [r4, #21]
 8006428:	b96a      	cbnz	r2, 8006446 <HAL_ADC_PollForConversion+0xae>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	0716      	lsls	r6, r2, #28
 800642e:	d50a      	bpl.n	8006446 <HAL_ADC_PollForConversion+0xae>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006432:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006436:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800643a:	04d0      	lsls	r0, r2, #19
 800643c:	d403      	bmi.n	8006446 <HAL_ADC_PollForConversion+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800643e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006446:	4a17      	ldr	r2, [pc, #92]	@ (80064a4 <HAL_ADC_PollForConversion+0x10c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d104      	bne.n	8006456 <HAL_ADC_PollForConversion+0xbe>
 800644c:	f240 2221 	movw	r2, #545	@ 0x221
 8006450:	40fa      	lsrs	r2, r7
 8006452:	07d1      	lsls	r1, r2, #31
 8006454:	d51b      	bpl.n	800648e <HAL_ADC_PollForConversion+0xf6>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006456:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006458:	2d08      	cmp	r5, #8
 800645a:	d11b      	bne.n	8006494 <HAL_ADC_PollForConversion+0xfc>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800645c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800645e:	2000      	movs	r0, #0
 8006460:	e7bd      	b.n	80063de <HAL_ADC_PollForConversion+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8006462:	1c72      	adds	r2, r6, #1
 8006464:	d0d4      	beq.n	8006410 <HAL_ADC_PollForConversion+0x78>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006466:	f7ff ff67 	bl	8006338 <HAL_GetTick>
 800646a:	eba0 0008 	sub.w	r0, r0, r8
 800646e:	42b0      	cmp	r0, r6
 8006470:	d801      	bhi.n	8006476 <HAL_ADC_PollForConversion+0xde>
 8006472:	2e00      	cmp	r6, #0
 8006474:	d1cb      	bne.n	800640e <HAL_ADC_PollForConversion+0x76>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	402b      	ands	r3, r5
 800647c:	d1c7      	bne.n	800640e <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800647e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 8006480:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8006482:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006486:	f042 0204 	orr.w	r2, r2, #4
 800648a:	6562      	str	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 800648c:	e7a7      	b.n	80063de <HAL_ADC_PollForConversion+0x46>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800648e:	4a04      	ldr	r2, [pc, #16]	@ (80064a0 <HAL_ADC_PollForConversion+0x108>)
 8006490:	68d2      	ldr	r2, [r2, #12]
 8006492:	e7e1      	b.n	8006458 <HAL_ADC_PollForConversion+0xc0>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006494:	0452      	lsls	r2, r2, #17
 8006496:	d4e2      	bmi.n	800645e <HAL_ADC_PollForConversion+0xc6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006498:	220c      	movs	r2, #12
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e7df      	b.n	800645e <HAL_ADC_PollForConversion+0xc6>
 800649e:	bf00      	nop
 80064a0:	40022000 	.word	0x40022000
 80064a4:	40022100 	.word	0x40022100
 80064a8:	58026300 	.word	0x58026300
 80064ac:	40022300 	.word	0x40022300

080064b0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80064b0:	6803      	ldr	r3, [r0, #0]
 80064b2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80064b8:	2300      	movs	r3, #0
{
 80064ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80064bc:	9301      	str	r3, [sp, #4]
{
 80064be:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064c0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f000 81ec 	beq.w	80068a2 <HAL_ADC_ConfigChannel+0x3ea>
 80064ca:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064cc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80064ce:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff ff5c 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
 80064d8:	2800      	cmp	r0, #0
 80064da:	f040 8180 	bne.w	80067de <HAL_ADC_ConfigChannel+0x326>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80064de:	680a      	ldr	r2, [r1, #0]
 80064e0:	2a00      	cmp	r2, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80064e2:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80064e6:	db07      	blt.n	80064f8 <HAL_ADC_ConfigChannel+0x40>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80064e8:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	d176      	bne.n	80065de <HAL_ADC_ConfigChannel+0x126>
 80064f0:	4084      	lsls	r4, r0
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	4322      	orrs	r2, r4
 80064f6:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80064f8:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80064fa:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 80064fe:	271f      	movs	r7, #31
 8006500:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006504:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8006506:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800650a:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800650e:	40a7      	lsls	r7, r4
 8006510:	40a0      	lsls	r0, r4
 8006512:	f85c 2006 	ldr.w	r2, [ip, r6]
 8006516:	ea22 0207 	bic.w	r2, r2, r7
 800651a:	4302      	orrs	r2, r0
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800651c:	4618      	mov	r0, r3
 800651e:	f84c 2006 	str.w	r2, [ip, r6]
 8006522:	f7ff ff35 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800652c:	4302      	orrs	r2, r0
 800652e:	d14b      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x110>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006530:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006532:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006536:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006538:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 800653a:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800653e:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8006542:	4086      	lsls	r6, r0
 8006544:	593a      	ldr	r2, [r7, r4]
 8006546:	ea22 0206 	bic.w	r2, r2, r6
 800654a:	688e      	ldr	r6, [r1, #8]
 800654c:	4086      	lsls	r6, r0
 800654e:	4332      	orrs	r2, r6
 8006550:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006552:	4aa6      	ldr	r2, [pc, #664]	@ (80067ec <HAL_ADC_ConfigChannel+0x334>)
 8006554:	6948      	ldr	r0, [r1, #20]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800655c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	d145      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x138>
 8006564:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8006568:	0052      	lsls	r2, r2, #1
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800656a:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800656c:	4090      	lsls	r0, r2
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800656e:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006570:	2f04      	cmp	r7, #4
 8006572:	d045      	beq.n	8006600 <HAL_ADC_ConfigChannel+0x148>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006574:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 8006578:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800657c:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8006580:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006584:	4322      	orrs	r2, r4
 8006586:	4302      	orrs	r2, r0
 8006588:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800658c:	7e48      	ldrb	r0, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800658e:	690c      	ldr	r4, [r1, #16]
 8006590:	1e47      	subs	r7, r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006592:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006596:	4278      	negs	r0, r7
 8006598:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800659c:	4178      	adcs	r0, r7
 800659e:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 80065a2:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80065a6:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80065a8:	690c      	ldr	r4, [r1, #16]
 80065aa:	f102 3cff 	add.w	ip, r2, #4294967295
 80065ae:	6918      	ldr	r0, [r3, #16]
 80065b0:	f004 041f 	and.w	r4, r4, #31
 80065b4:	f1dc 0200 	rsbs	r2, ip, #0
 80065b8:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 80065bc:	eb42 020c 	adc.w	r2, r2, ip
 80065c0:	02d2      	lsls	r2, r2, #11
 80065c2:	40a2      	lsls	r2, r4
 80065c4:	4302      	orrs	r2, r0
 80065c6:	611a      	str	r2, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fedd 	bl	8006388 <LL_ADC_IsEnabled>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d03d      	beq.n	800664e <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065d2:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065d4:	2300      	movs	r3, #0
 80065d6:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80065da:	b003      	add	sp, #12
 80065dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065de:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80065e2:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80065e6:	2401      	movs	r4, #1
 80065e8:	f002 021f 	and.w	r2, r2, #31
 80065ec:	4094      	lsls	r4, r2
 80065ee:	e780      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x3a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065f0:	f012 0f10 	tst.w	r2, #16
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	d0b5      	beq.n	8006564 <HAL_ADC_ConfigChannel+0xac>
 80065f8:	0852      	lsrs	r2, r2, #1
 80065fa:	f002 0208 	and.w	r2, r2, #8
 80065fe:	e7b4      	b.n	800656a <HAL_ADC_ConfigChannel+0xb2>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006600:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006602:	06a0      	lsls	r0, r4, #26
 8006604:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8006608:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800660c:	d103      	bne.n	8006616 <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800660e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006610:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006614:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006616:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006618:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800661c:	4290      	cmp	r0, r2
 800661e:	d103      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x170>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006620:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006622:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006626:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006628:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800662a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800662e:	4290      	cmp	r0, r2
 8006630:	d103      	bne.n	800663a <HAL_ADC_ConfigChannel+0x182>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006632:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006634:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006638:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800663a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800663c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8006640:	4290      	cmp	r0, r2
 8006642:	d1c1      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x110>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006644:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006646:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800664c:	e7bc      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800664e:	680c      	ldr	r4, [r1, #0]
 8006650:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006652:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006656:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800665a:	f000 0618 	and.w	r6, r0, #24
 800665e:	ea22 0201 	bic.w	r2, r2, r1
 8006662:	4963      	ldr	r1, [pc, #396]	@ (80067f0 <HAL_ADC_ConfigChannel+0x338>)
 8006664:	40f1      	lsrs	r1, r6
 8006666:	4021      	ands	r1, r4
 8006668:	430a      	orrs	r2, r1
 800666a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800666e:	4a61      	ldr	r2, [pc, #388]	@ (80067f4 <HAL_ADC_ConfigChannel+0x33c>)
 8006670:	4290      	cmp	r0, r2
 8006672:	d161      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x280>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8006674:	4a60      	ldr	r2, [pc, #384]	@ (80067f8 <HAL_ADC_ConfigChannel+0x340>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d12c      	bne.n	80066d4 <HAL_ADC_ConfigChannel+0x21c>
 800667a:	4a60      	ldr	r2, [pc, #384]	@ (80067fc <HAL_ADC_ConfigChannel+0x344>)
 800667c:	4294      	cmp	r4, r2
 800667e:	f000 8093 	beq.w	80067a8 <HAL_ADC_ConfigChannel+0x2f0>
 8006682:	4a5f      	ldr	r2, [pc, #380]	@ (8006800 <HAL_ADC_ConfigChannel+0x348>)
 8006684:	4294      	cmp	r4, r2
 8006686:	f000 8091 	beq.w	80067ac <HAL_ADC_ConfigChannel+0x2f4>
 800668a:	4a5e      	ldr	r2, [pc, #376]	@ (8006804 <HAL_ADC_ConfigChannel+0x34c>)
 800668c:	4294      	cmp	r4, r2
 800668e:	f000 808f 	beq.w	80067b0 <HAL_ADC_ConfigChannel+0x2f8>
 8006692:	4a5d      	ldr	r2, [pc, #372]	@ (8006808 <HAL_ADC_ConfigChannel+0x350>)
 8006694:	4294      	cmp	r4, r2
 8006696:	f000 808d 	beq.w	80067b4 <HAL_ADC_ConfigChannel+0x2fc>
 800669a:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 800669e:	3210      	adds	r2, #16
 80066a0:	4294      	cmp	r4, r2
 80066a2:	f000 8089 	beq.w	80067b8 <HAL_ADC_ConfigChannel+0x300>
 80066a6:	4a59      	ldr	r2, [pc, #356]	@ (800680c <HAL_ADC_ConfigChannel+0x354>)
 80066a8:	4294      	cmp	r4, r2
 80066aa:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80066ae:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80066b2:	d035      	beq.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80066b4:	4294      	cmp	r4, r2
 80066b6:	d032      	beq.n	800671e <HAL_ADC_ConfigChannel+0x266>
 80066b8:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80066bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066c0:	4294      	cmp	r4, r2
 80066c2:	d02a      	beq.n	800671a <HAL_ADC_ConfigChannel+0x262>
 80066c4:	4a52      	ldr	r2, [pc, #328]	@ (8006810 <HAL_ADC_ConfigChannel+0x358>)
 80066c6:	4294      	cmp	r4, r2
 80066c8:	d06c      	beq.n	80067a4 <HAL_ADC_ConfigChannel+0x2ec>
 80066ca:	4a52      	ldr	r2, [pc, #328]	@ (8006814 <HAL_ADC_ConfigChannel+0x35c>)
 80066cc:	4294      	cmp	r4, r2
 80066ce:	d177      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x308>
 80066d0:	4a51      	ldr	r2, [pc, #324]	@ (8006818 <HAL_ADC_ConfigChannel+0x360>)
 80066d2:	e025      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80066d4:	4a51      	ldr	r2, [pc, #324]	@ (800681c <HAL_ADC_ConfigChannel+0x364>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d172      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x308>
 80066da:	4a48      	ldr	r2, [pc, #288]	@ (80067fc <HAL_ADC_ConfigChannel+0x344>)
 80066dc:	4294      	cmp	r4, r2
 80066de:	d063      	beq.n	80067a8 <HAL_ADC_ConfigChannel+0x2f0>
 80066e0:	4a47      	ldr	r2, [pc, #284]	@ (8006800 <HAL_ADC_ConfigChannel+0x348>)
 80066e2:	4294      	cmp	r4, r2
 80066e4:	d062      	beq.n	80067ac <HAL_ADC_ConfigChannel+0x2f4>
 80066e6:	4a47      	ldr	r2, [pc, #284]	@ (8006804 <HAL_ADC_ConfigChannel+0x34c>)
 80066e8:	4294      	cmp	r4, r2
 80066ea:	d061      	beq.n	80067b0 <HAL_ADC_ConfigChannel+0x2f8>
 80066ec:	4a46      	ldr	r2, [pc, #280]	@ (8006808 <HAL_ADC_ConfigChannel+0x350>)
 80066ee:	4294      	cmp	r4, r2
 80066f0:	d060      	beq.n	80067b4 <HAL_ADC_ConfigChannel+0x2fc>
 80066f2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80066f6:	3210      	adds	r2, #16
 80066f8:	4294      	cmp	r4, r2
 80066fa:	d05d      	beq.n	80067b8 <HAL_ADC_ConfigChannel+0x300>
 80066fc:	4a43      	ldr	r2, [pc, #268]	@ (800680c <HAL_ADC_ConfigChannel+0x354>)
 80066fe:	4294      	cmp	r4, r2
 8006700:	d05c      	beq.n	80067bc <HAL_ADC_ConfigChannel+0x304>
 8006702:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8006706:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 800670a:	4294      	cmp	r4, r2
 800670c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8006710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006714:	d004      	beq.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 8006716:	4294      	cmp	r4, r2
 8006718:	d1d7      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x212>
 800671a:	4a41      	ldr	r2, [pc, #260]	@ (8006820 <HAL_ADC_ConfigChannel+0x368>)
 800671c:	e000      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 800671e:	4a41      	ldr	r2, [pc, #260]	@ (8006824 <HAL_ADC_ConfigChannel+0x36c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006720:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8006724:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8006728:	2101      	movs	r1, #1
 800672a:	f002 021f 	and.w	r2, r2, #31
 800672e:	fa01 f202 	lsl.w	r2, r1, r2
 8006732:	69d9      	ldr	r1, [r3, #28]
 8006734:	430a      	orrs	r2, r1
 8006736:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006738:	2c00      	cmp	r4, #0
 800673a:	f6bf af4a 	bge.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800673e:	4a2e      	ldr	r2, [pc, #184]	@ (80067f8 <HAL_ADC_ConfigChannel+0x340>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d13f      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x30c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006744:	f502 7240 	add.w	r2, r2, #768	@ 0x300
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006748:	482b      	ldr	r0, [pc, #172]	@ (80067f8 <HAL_ADC_ConfigChannel+0x340>)
 800674a:	6892      	ldr	r2, [r2, #8]
 800674c:	f7ff fe1c 	bl	8006388 <LL_ADC_IsEnabled>
 8006750:	4601      	mov	r1, r0
 8006752:	4832      	ldr	r0, [pc, #200]	@ (800681c <HAL_ADC_ConfigChannel+0x364>)
 8006754:	f7ff fe18 	bl	8006388 <LL_ADC_IsEnabled>
 8006758:	4301      	orrs	r1, r0
 800675a:	d140      	bne.n	80067de <HAL_ADC_ConfigChannel+0x326>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800675c:	4832      	ldr	r0, [pc, #200]	@ (8006828 <HAL_ADC_ConfigChannel+0x370>)
 800675e:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 8006762:	4284      	cmp	r4, r0
 8006764:	d176      	bne.n	8006854 <HAL_ADC_ConfigChannel+0x39c>
 8006766:	0214      	lsls	r4, r2, #8
 8006768:	f53f af33 	bmi.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800676c:	4a2f      	ldr	r2, [pc, #188]	@ (800682c <HAL_ADC_ConfigChannel+0x374>)
 800676e:	4293      	cmp	r3, r2
 8006770:	f47f af2f 	bne.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006774:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8006778:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800677c:	430b      	orrs	r3, r1
 800677e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006782:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006786:	4b2a      	ldr	r3, [pc, #168]	@ (8006830 <HAL_ADC_ConfigChannel+0x378>)
 8006788:	4a2a      	ldr	r2, [pc, #168]	@ (8006834 <HAL_ADC_ConfigChannel+0x37c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006790:	3301      	adds	r3, #1
 8006792:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8006794:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f43f af1a 	beq.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	e7f7      	b.n	8006794 <HAL_ADC_ConfigChannel+0x2dc>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80067a4:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <HAL_ADC_ConfigChannel+0x380>)
 80067a6:	e7bb      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067a8:	2201      	movs	r2, #1
 80067aa:	e7b9      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067ac:	4a23      	ldr	r2, [pc, #140]	@ (800683c <HAL_ADC_ConfigChannel+0x384>)
 80067ae:	e7b7      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067b0:	4a23      	ldr	r2, [pc, #140]	@ (8006840 <HAL_ADC_ConfigChannel+0x388>)
 80067b2:	e7b5      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067b4:	4a23      	ldr	r2, [pc, #140]	@ (8006844 <HAL_ADC_ConfigChannel+0x38c>)
 80067b6:	e7b3      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067b8:	4a23      	ldr	r2, [pc, #140]	@ (8006848 <HAL_ADC_ConfigChannel+0x390>)
 80067ba:	e7b1      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
 80067bc:	4a23      	ldr	r2, [pc, #140]	@ (800684c <HAL_ADC_ConfigChannel+0x394>)
 80067be:	e7af      	b.n	8006720 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80067c0:	2201      	movs	r2, #1
 80067c2:	e7b6      	b.n	8006732 <HAL_ADC_ConfigChannel+0x27a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067c4:	4a15      	ldr	r2, [pc, #84]	@ (800681c <HAL_ADC_ConfigChannel+0x364>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d102      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x318>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80067ca:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80067ce:	e7bb      	b.n	8006748 <HAL_ADC_ConfigChannel+0x290>
 80067d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006850 <HAL_ADC_ConfigChannel+0x398>)
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067d2:	4816      	ldr	r0, [pc, #88]	@ (800682c <HAL_ADC_ConfigChannel+0x374>)
 80067d4:	6892      	ldr	r2, [r2, #8]
 80067d6:	f7ff fdd7 	bl	8006388 <LL_ADC_IsEnabled>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d0be      	beq.n	800675c <HAL_ADC_ConfigChannel+0x2a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067de:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80067e0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 80067e8:	e6f4      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x11c>
 80067ea:	bf00      	nop
 80067ec:	5c001000 	.word	0x5c001000
 80067f0:	000fffff 	.word	0x000fffff
 80067f4:	47ff0000 	.word	0x47ff0000
 80067f8:	40022000 	.word	0x40022000
 80067fc:	04300002 	.word	0x04300002
 8006800:	08600004 	.word	0x08600004
 8006804:	0c900008 	.word	0x0c900008
 8006808:	10c00010 	.word	0x10c00010
 800680c:	2a000400 	.word	0x2a000400
 8006810:	43210000 	.word	0x43210000
 8006814:	4b840000 	.word	0x4b840000
 8006818:	4fb80000 	.word	0x4fb80000
 800681c:	40022100 	.word	0x40022100
 8006820:	36902000 	.word	0x36902000
 8006824:	32601000 	.word	0x32601000
 8006828:	cb840000 	.word	0xcb840000
 800682c:	58026000 	.word	0x58026000
 8006830:	2400006c 	.word	0x2400006c
 8006834:	00030d40 	.word	0x00030d40
 8006838:	47520000 	.word	0x47520000
 800683c:	19200040 	.word	0x19200040
 8006840:	1d500080 	.word	0x1d500080
 8006844:	21800100 	.word	0x21800100
 8006848:	25b00200 	.word	0x25b00200
 800684c:	2e300800 	.word	0x2e300800
 8006850:	58026300 	.word	0x58026300
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006854:	4814      	ldr	r0, [pc, #80]	@ (80068a8 <HAL_ADC_ConfigChannel+0x3f0>)
 8006856:	4284      	cmp	r4, r0
 8006858:	d110      	bne.n	800687c <HAL_ADC_ConfigChannel+0x3c4>
 800685a:	01d0      	lsls	r0, r2, #7
 800685c:	f53f aeb9 	bmi.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006860:	4a12      	ldr	r2, [pc, #72]	@ (80068ac <HAL_ADC_ConfigChannel+0x3f4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f47f aeb5 	bne.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006868:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 800686c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006870:	430b      	orrs	r3, r1
 8006872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006876:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 800687a:	e6aa      	b.n	80065d2 <HAL_ADC_ConfigChannel+0x11a>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800687c:	480c      	ldr	r0, [pc, #48]	@ (80068b0 <HAL_ADC_ConfigChannel+0x3f8>)
 800687e:	4284      	cmp	r4, r0
 8006880:	f47f aea7 	bne.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
 8006884:	0252      	lsls	r2, r2, #9
 8006886:	f53f aea4 	bmi.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 800688a:	4a08      	ldr	r2, [pc, #32]	@ (80068ac <HAL_ADC_ConfigChannel+0x3f4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	f47f aea0 	bne.w	80065d2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006892:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8006896:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800689a:	430b      	orrs	r3, r1
 800689c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068a0:	e7e9      	b.n	8006876 <HAL_ADC_ConfigChannel+0x3be>
  __HAL_LOCK(hadc);
 80068a2:	2002      	movs	r0, #2
 80068a4:	e699      	b.n	80065da <HAL_ADC_ConfigChannel+0x122>
 80068a6:	bf00      	nop
 80068a8:	c7520000 	.word	0xc7520000
 80068ac:	58026000 	.word	0x58026000
 80068b0:	cfb80000 	.word	0xcfb80000

080068b4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068b4:	6803      	ldr	r3, [r0, #0]
{
 80068b6:	b570      	push	{r4, r5, r6, lr}
 80068b8:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff fd68 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	f002 0208 	and.w	r2, r2, #8
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80068c6:	4302      	orrs	r2, r0
 80068c8:	d101      	bne.n	80068ce <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80068ca:	2000      	movs	r0, #0
}
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	0192      	lsls	r2, r2, #6
 80068d2:	d53a      	bpl.n	800694a <ADC_ConversionStop+0x96>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80068d4:	8aa0      	ldrh	r0, [r4, #20]
 80068d6:	f240 1201 	movw	r2, #257	@ 0x101
 80068da:	4290      	cmp	r0, r2
 80068dc:	d135      	bne.n	800694a <ADC_ConversionStop+0x96>
 80068de:	4a27      	ldr	r2, [pc, #156]	@ (800697c <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	064e      	lsls	r6, r1, #25
 80068e4:	d525      	bpl.n	8006932 <ADC_ConversionStop+0x7e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80068e6:	2240      	movs	r2, #64	@ 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80068e8:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80068ea:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fd4f 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
 80068f2:	b150      	cbz	r0, 800690a <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	0795      	lsls	r5, r2, #30
 80068f8:	d407      	bmi.n	800690a <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006900:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006904:	f042 0210 	orr.w	r2, r2, #16
 8006908:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800690a:	2901      	cmp	r1, #1
 800690c:	d11f      	bne.n	800694e <ADC_ConversionStop+0x9a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800690e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8006910:	f7ff fd12 	bl	8006338 <HAL_GetTick>
 8006914:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	422b      	tst	r3, r5
 800691c:	d0d5      	beq.n	80068ca <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800691e:	f7ff fd0b 	bl	8006338 <HAL_GetTick>
 8006922:	1b80      	subs	r0, r0, r6
 8006924:	2805      	cmp	r0, #5
 8006926:	d9f6      	bls.n	8006916 <ADC_ConversionStop+0x62>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	422b      	tst	r3, r5
 800692e:	d0f2      	beq.n	8006916 <ADC_ConversionStop+0x62>
 8006930:	e001      	b.n	8006936 <ADC_ConversionStop+0x82>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006932:	3a01      	subs	r2, #1
 8006934:	d1d4      	bne.n	80068e0 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006936:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8006938:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800693a:	f043 0310 	orr.w	r3, r3, #16
 800693e:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006940:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8006948:	e7c0      	b.n	80068cc <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800694a:	2902      	cmp	r1, #2
 800694c:	d1ce      	bne.n	80068ec <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	0710      	lsls	r0, r2, #28
 8006952:	d50a      	bpl.n	800696a <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	0792      	lsls	r2, r2, #30
 8006958:	d407      	bmi.n	800696a <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006960:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006964:	f042 0220 	orr.w	r2, r2, #32
 8006968:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800696a:	2902      	cmp	r1, #2
 800696c:	d003      	beq.n	8006976 <ADC_ConversionStop+0xc2>
 800696e:	2903      	cmp	r1, #3
 8006970:	d1cd      	bne.n	800690e <ADC_ConversionStop+0x5a>
 8006972:	250c      	movs	r5, #12
 8006974:	e7cc      	b.n	8006910 <ADC_ConversionStop+0x5c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006976:	2508      	movs	r5, #8
 8006978:	e7ca      	b.n	8006910 <ADC_ConversionStop+0x5c>
 800697a:	bf00      	nop
 800697c:	000cdc01 	.word	0x000cdc01

08006980 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006980:	6802      	ldr	r2, [r0, #0]
{
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006986:	4610      	mov	r0, r2
 8006988:	f7ff fcfe 	bl	8006388 <LL_ADC_IsEnabled>
 800698c:	b108      	cbz	r0, 8006992 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800698e:	2000      	movs	r0, #0
}
 8006990:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006992:	6891      	ldr	r1, [r2, #8]
 8006994:	4b20      	ldr	r3, [pc, #128]	@ (8006a18 <ADC_Enable+0x98>)
 8006996:	4219      	tst	r1, r3
 8006998:	d009      	beq.n	80069ae <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800699a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 800699c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800699e:	f043 0310 	orr.w	r3, r3, #16
 80069a2:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 80069ac:	e7f0      	b.n	8006990 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 80069ae:	6893      	ldr	r3, [r2, #8]
 80069b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80069be:	f7ff fcbb 	bl	8006338 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80069c6:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00c      	beq.n	80069e6 <ADC_Enable+0x66>
 80069cc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d002      	beq.n	80069da <ADC_Enable+0x5a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80069d4:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <ADC_Enable+0xa0>)
 80069d6:	689b      	ldr	r3, [r3, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069d8:	e003      	b.n	80069e2 <ADC_Enable+0x62>
 80069da:	4b12      	ldr	r3, [pc, #72]	@ (8006a24 <ADC_Enable+0xa4>)
 80069dc:	689b      	ldr	r3, [r3, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069de:	06d9      	lsls	r1, r3, #27
 80069e0:	d1d5      	bne.n	800698e <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80069e2:	4e11      	ldr	r6, [pc, #68]	@ (8006a28 <ADC_Enable+0xa8>)
 80069e4:	e013      	b.n	8006a0e <ADC_Enable+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80069e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a24 <ADC_Enable+0xa4>)
 80069e8:	e7f5      	b.n	80069d6 <ADC_Enable+0x56>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7ff fccc 	bl	8006388 <LL_ADC_IsEnabled>
 80069f0:	b920      	cbnz	r0, 80069fc <ADC_Enable+0x7c>
  MODIFY_REG(ADCx->CR,
 80069f2:	6893      	ldr	r3, [r2, #8]
 80069f4:	4033      	ands	r3, r6
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069fc:	f7ff fc9c 	bl	8006338 <HAL_GetTick>
 8006a00:	1b40      	subs	r0, r0, r5
 8006a02:	2802      	cmp	r0, #2
 8006a04:	d903      	bls.n	8006a0e <ADC_Enable+0x8e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	07da      	lsls	r2, r3, #31
 8006a0c:	d5c5      	bpl.n	800699a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d5e9      	bpl.n	80069ea <ADC_Enable+0x6a>
 8006a16:	e7ba      	b.n	800698e <ADC_Enable+0xe>
 8006a18:	8000003f 	.word	0x8000003f
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	58026300 	.word	0x58026300
 8006a24:	40022300 	.word	0x40022300
 8006a28:	7fffffc0 	.word	0x7fffffc0

08006a2c <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b18 <HAL_ADC_Start+0xec>)
{
 8006a2e:	b570      	push	{r4, r5, r6, lr}
 8006a30:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	4298      	cmp	r0, r3
 8006a36:	d055      	beq.n	8006ae4 <HAL_ADC_Start+0xb8>
 8006a38:	4938      	ldr	r1, [pc, #224]	@ (8006b1c <HAL_ADC_Start+0xf0>)
 8006a3a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8006a3e:	4a38      	ldr	r2, [pc, #224]	@ (8006b20 <HAL_ADC_Start+0xf4>)
 8006a40:	4288      	cmp	r0, r1
 8006a42:	bf18      	it	ne
 8006a44:	4613      	movne	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a46:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a48:	f7ff fca2 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d15f      	bne.n	8006b12 <HAL_ADC_Start+0xe6>
    __HAL_LOCK(hadc);
 8006a52:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d05b      	beq.n	8006b12 <HAL_ADC_Start+0xe6>
 8006a5a:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8006a5c:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006a5e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006a62:	f7ff ff8d 	bl	8006980 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d150      	bne.n	8006b0c <HAL_ADC_Start+0xe0>
      ADC_STATE_CLR_SET(hadc->State,
 8006a6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006a6c:	f006 011f 	and.w	r1, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a70:	4a2a      	ldr	r2, [pc, #168]	@ (8006b1c <HAL_ADC_Start+0xf0>)
      ADC_STATE_CLR_SET(hadc->State,
 8006a72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a76:	f023 0301 	bic.w	r3, r3, #1
 8006a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7e:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d130      	bne.n	8006ae8 <HAL_ADC_Start+0xbc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a86:	bb89      	cbnz	r1, 8006aec <HAL_ADC_Start+0xc0>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a88:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006a8c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8006a8e:	f425 1580 	bic.w	r5, r5, #1048576	@ 0x100000
 8006a92:	6565      	str	r5, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a94:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8006a96:	f415 5580 	ands.w	r5, r5, #4096	@ 0x1000
 8006a9a:	d002      	beq.n	8006aa2 <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a9c:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8006a9e:	f025 0506 	bic.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8006aa2:	65a5      	str	r5, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aa4:	251c      	movs	r5, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006aa6:	4293      	cmp	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aa8:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006aaa:	f04f 0500 	mov.w	r5, #0
 8006aae:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ab2:	d005      	beq.n	8006ac0 <HAL_ADC_Start+0x94>
 8006ab4:	f240 2521 	movw	r5, #545	@ 0x221
 8006ab8:	fa25 f101 	lsr.w	r1, r5, r1
 8006abc:	07c9      	lsls	r1, r1, #31
 8006abe:	d517      	bpl.n	8006af0 <HAL_ADC_Start+0xc4>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	0192      	lsls	r2, r2, #6
 8006ac4:	d505      	bpl.n	8006ad2 <HAL_ADC_Start+0xa6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006ac6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006acc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ad0:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006ad8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006adc:	f042 0204 	orr.w	r2, r2, #4
 8006ae0:	609a      	str	r2, [r3, #8]
}
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <HAL_ADC_Start+0xf8>)
 8006ae6:	e7ae      	b.n	8006a46 <HAL_ADC_Start+0x1a>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ae8:	461a      	mov	r2, r3
 8006aea:	e7cf      	b.n	8006a8c <HAL_ADC_Start+0x60>
 8006aec:	4a0a      	ldr	r2, [pc, #40]	@ (8006b18 <HAL_ADC_Start+0xec>)
 8006aee:	e7d1      	b.n	8006a94 <HAL_ADC_Start+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006af0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006af6:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006af8:	68d3      	ldr	r3, [r2, #12]
 8006afa:	019b      	lsls	r3, r3, #6
 8006afc:	d5f1      	bpl.n	8006ae2 <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006afe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b08:	6563      	str	r3, [r4, #84]	@ 0x54
 8006b0a:	e7ea      	b.n	8006ae2 <HAL_ADC_Start+0xb6>
      __HAL_UNLOCK(hadc);
 8006b0c:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8006b10:	e7e7      	b.n	8006ae2 <HAL_ADC_Start+0xb6>
    __HAL_LOCK(hadc);
 8006b12:	2002      	movs	r0, #2
 8006b14:	e7e5      	b.n	8006ae2 <HAL_ADC_Start+0xb6>
 8006b16:	bf00      	nop
 8006b18:	40022000 	.word	0x40022000
 8006b1c:	40022100 	.word	0x40022100
 8006b20:	58026300 	.word	0x58026300
 8006b24:	40022300 	.word	0x40022300

08006b28 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b28:	6802      	ldr	r2, [r0, #0]
{
 8006b2a:	b538      	push	{r3, r4, r5, lr}
 8006b2c:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b2e:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006b30:	6893      	ldr	r3, [r2, #8]
 8006b32:	f7ff fc29 	bl	8006388 <LL_ADC_IsEnabled>
 8006b36:	b908      	cbnz	r0, 8006b3c <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b38:	2000      	movs	r0, #0
}
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b3c:	0799      	lsls	r1, r3, #30
 8006b3e:	d4fb      	bmi.n	8006b38 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b40:	6893      	ldr	r3, [r2, #8]
 8006b42:	f003 030d 	and.w	r3, r3, #13
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d119      	bne.n	8006b7e <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 8006b4a:	6893      	ldr	r3, [r2, #8]
 8006b4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006b5e:	f7ff fbeb 	bl	8006338 <HAL_GetTick>
 8006b62:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	07db      	lsls	r3, r3, #31
 8006b6a:	d5e5      	bpl.n	8006b38 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b6c:	f7ff fbe4 	bl	8006338 <HAL_GetTick>
 8006b70:	1b40      	subs	r0, r0, r5
 8006b72:	2802      	cmp	r0, #2
 8006b74:	d9f6      	bls.n	8006b64 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	07da      	lsls	r2, r3, #31
 8006b7c:	d5f2      	bpl.n	8006b64 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8006b80:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b82:	f043 0310 	orr.w	r3, r3, #16
 8006b86:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8006b90:	e7d3      	b.n	8006b3a <ADC_Disable+0x12>

08006b92 <HAL_ADC_Stop>:
{
 8006b92:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8006b94:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006b98:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d016      	beq.n	8006bcc <HAL_ADC_Stop+0x3a>
 8006b9e:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006ba0:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8006ba2:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006ba6:	f7ff fe85 	bl	80068b4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8006baa:	b958      	cbnz	r0, 8006bc4 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff ffbb 	bl	8006b28 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006bb2:	b938      	cbnz	r0, 8006bc4 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8006bb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006bb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006bca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8006bcc:	2002      	movs	r0, #2
 8006bce:	e7fc      	b.n	8006bca <HAL_ADC_Stop+0x38>

08006bd0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006bd0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006bd2:	4a43      	ldr	r2, [pc, #268]	@ (8006ce0 <ADC_ConfigureBoostMode+0x110>)
{
 8006bd4:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <ADC_ConfigureBoostMode+0x14>
 8006bdc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d125      	bne.n	8006c30 <ADC_ConfigureBoostMode+0x60>
 8006be4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ce4 <ADC_ConfigureBoostMode+0x114>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8006bec:	bf14      	ite	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	2300      	moveq	r3, #0
 8006bf2:	b9fb      	cbnz	r3, 8006c34 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006bf4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f005 fc49 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006bfe:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c00:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006c02:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c06:	d04a      	beq.n	8006c9e <ADC_ConfigureBoostMode+0xce>
 8006c08:	d83f      	bhi.n	8006c8a <ADC_ConfigureBoostMode+0xba>
 8006c0a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c0e:	d044      	beq.n	8006c9a <ADC_ConfigureBoostMode+0xca>
 8006c10:	d836      	bhi.n	8006c80 <ADC_ConfigureBoostMode+0xb0>
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c16:	d008      	beq.n	8006c2a <ADC_ConfigureBoostMode+0x5a>
 8006c18:	d82c      	bhi.n	8006c74 <ADC_ConfigureBoostMode+0xa4>
 8006c1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c1e:	d004      	beq.n	8006c2a <ADC_ConfigureBoostMode+0x5a>
 8006c20:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c24:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8006c28:	d116      	bne.n	8006c58 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c2a:	0c9b      	lsrs	r3, r3, #18
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	e00f      	b.n	8006c50 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006c30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce8 <ADC_ConfigureBoostMode+0x118>)
 8006c32:	e7d8      	b.n	8006be6 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8006c34:	f004 fbb6 	bl	800b3a4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006c38:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006c3a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c40:	d005      	beq.n	8006c4e <ADC_ConfigureBoostMode+0x7e>
 8006c42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c46:	d006      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x86>
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d104      	bne.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c4e:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c50:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8006c54:	e000      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8006c56:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006c58:	f7ff fb86 	bl	8006368 <HAL_GetREVID>
 8006c5c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006c60:	4298      	cmp	r0, r3
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	d823      	bhi.n	8006cae <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8006c66:	4a21      	ldr	r2, [pc, #132]	@ (8006cec <ADC_ConfigureBoostMode+0x11c>)
 8006c68:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006c6a:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8006c6c:	d91b      	bls.n	8006ca6 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c72:	e01a      	b.n	8006caa <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8006c74:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c78:	d0d7      	beq.n	8006c2a <ADC_ConfigureBoostMode+0x5a>
 8006c7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c7e:	e7d3      	b.n	8006c28 <ADC_ConfigureBoostMode+0x58>
 8006c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c84:	d1e8      	bne.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8006c86:	0944      	lsrs	r4, r0, #5
        break;
 8006c88:	e7e6      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8006c8a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c8e:	d008      	beq.n	8006ca2 <ADC_ConfigureBoostMode+0xd2>
 8006c90:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c94:	d1e0      	bne.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8006c96:	0a04      	lsrs	r4, r0, #8
        break;
 8006c98:	e7de      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8006c9a:	0904      	lsrs	r4, r0, #4
        break;
 8006c9c:	e7dc      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8006c9e:	0984      	lsrs	r4, r0, #6
        break;
 8006ca0:	e7da      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8006ca2:	09c4      	lsrs	r4, r0, #7
        break;
 8006ca4:	e7d8      	b.n	8006c58 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006caa:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8006cae:	4a10      	ldr	r2, [pc, #64]	@ (8006cf0 <ADC_ConfigureBoostMode+0x120>)
 8006cb0:	4294      	cmp	r4, r2
 8006cb2:	d803      	bhi.n	8006cbc <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006cba:	e7f6      	b.n	8006caa <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf4 <ADC_ConfigureBoostMode+0x124>)
 8006cbe:	4294      	cmp	r4, r2
 8006cc0:	d803      	bhi.n	8006cca <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006cc8:	e7d1      	b.n	8006c6e <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8006cca:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf8 <ADC_ConfigureBoostMode+0x128>)
 8006ccc:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	bf96      	itet	ls
 8006cd2:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006cd6:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006cda:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006cde:	e7e4      	b.n	8006caa <ADC_ConfigureBoostMode+0xda>
 8006ce0:	40022000 	.word	0x40022000
 8006ce4:	40022300 	.word	0x40022300
 8006ce8:	58026300 	.word	0x58026300
 8006cec:	01312d00 	.word	0x01312d00
 8006cf0:	00bebc21 	.word	0x00bebc21
 8006cf4:	017d7841 	.word	0x017d7841
 8006cf8:	02faf081 	.word	0x02faf081

08006cfc <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8006cfc:	2300      	movs	r3, #0
{
 8006cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8006d00:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006d02:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f000 80ed 	beq.w	8006ee4 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d0a:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8006d0c:	b925      	cbnz	r5, 8006d18 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8006d0e:	f7fa f9fd 	bl	800110c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006d12:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006d14:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d18:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	0090      	lsls	r0, r2, #2
 8006d1e:	d505      	bpl.n	8006d2c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8006d26:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006d2a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	00d1      	lsls	r1, r2, #3
 8006d30:	f140 809e 	bpl.w	8006e70 <HAL_ADC_Init+0x174>
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	00d2      	lsls	r2, r2, #3
 8006d38:	f100 80b0 	bmi.w	8006e9c <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8006d3e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d40:	f042 0210 	orr.w	r2, r2, #16
 8006d44:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d46:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fb1e 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d56:	f002 0210 	and.w	r2, r2, #16
 8006d5a:	4302      	orrs	r2, r0
 8006d5c:	f040 80be 	bne.w	8006edc <HAL_ADC_Init+0x1e0>
    ADC_STATE_CLR_SET(hadc->State,
 8006d60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d62:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8006d64:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8006d68:	f042 0202 	orr.w	r2, r2, #2
 8006d6c:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d6e:	f7ff fb0b 	bl	8006388 <LL_ADC_IsEnabled>
 8006d72:	b988      	cbnz	r0, 8006d98 <HAL_ADC_Init+0x9c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d74:	4a5c      	ldr	r2, [pc, #368]	@ (8006ee8 <HAL_ADC_Init+0x1ec>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_ADC_Init+0x88>
 8006d7a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f040 808e 	bne.w	8006ea0 <HAL_ADC_Init+0x1a4>
 8006d84:	4858      	ldr	r0, [pc, #352]	@ (8006ee8 <HAL_ADC_Init+0x1ec>)
 8006d86:	f7ff faff 	bl	8006388 <LL_ADC_IsEnabled>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4857      	ldr	r0, [pc, #348]	@ (8006eec <HAL_ADC_Init+0x1f0>)
 8006d8e:	f7ff fafb 	bl	8006388 <LL_ADC_IsEnabled>
 8006d92:	4303      	orrs	r3, r0
 8006d94:	f000 8092 	beq.w	8006ebc <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006d98:	f7ff fae6 	bl	8006368 <HAL_GetREVID>
 8006d9c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006da0:	68a2      	ldr	r2, [r4, #8]
 8006da2:	4298      	cmp	r0, r3
 8006da4:	7f21      	ldrb	r1, [r4, #28]
 8006da6:	7d60      	ldrb	r0, [r4, #21]
 8006da8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006daa:	f240 8089 	bls.w	8006ec0 <HAL_ADC_Init+0x1c4>
 8006dae:	2a10      	cmp	r2, #16
 8006db0:	f040 8086 	bne.w	8006ec0 <HAL_ADC_Init+0x1c4>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006db4:	040a      	lsls	r2, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006db6:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006dc0:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006dc2:	bf02      	ittt	eq
 8006dc4:	6a22      	ldreq	r2, [r4, #32]
 8006dc6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006dca:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006dd0:	b122      	cbz	r2, 8006ddc <HAL_ADC_Init+0xe0>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dd2:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006dd6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006dd8:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dda:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	4944      	ldr	r1, [pc, #272]	@ (8006ef0 <HAL_ADC_Init+0x1f4>)
 8006de0:	68d0      	ldr	r0, [r2, #12]
 8006de2:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006de4:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006de6:	4319      	orrs	r1, r3
 8006de8:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dea:	f7ff fad1 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006dee:	6893      	ldr	r3, [r2, #8]
 8006df0:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006df4:	4303      	orrs	r3, r0
 8006df6:	d127      	bne.n	8006e48 <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006df8:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006dfa:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e00:	f023 0303 	bic.w	r3, r3, #3
 8006e04:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8006e08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006e0e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d15a      	bne.n	8006ecc <HAL_ADC_Init+0x1d0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006e16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e18:	6910      	ldr	r0, [r2, #16]
 8006e1a:	1e59      	subs	r1, r3, #1
 8006e1c:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 8006e20:	4333      	orrs	r3, r6
 8006e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	4932      	ldr	r1, [pc, #200]	@ (8006ef4 <HAL_ADC_Init+0x1f8>)
 8006e2c:	4001      	ands	r1, r0
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006e34:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006e36:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006e38:	6913      	ldr	r3, [r2, #16]
 8006e3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e3c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006e44:	f7ff fec4 	bl	8006bd0 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006e48:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006e4a:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d141      	bne.n	8006ed4 <HAL_ADC_Init+0x1d8>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006e50:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006e52:	69a3      	ldr	r3, [r4, #24]
 8006e54:	f021 010f 	bic.w	r1, r1, #15
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006e5c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006e5e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	b002      	add	sp, #8
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006e70:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e72:	4921      	ldr	r1, [pc, #132]	@ (8006ef8 <HAL_ADC_Init+0x1fc>)
 8006e74:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8006e78:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006e7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	4a1e      	ldr	r2, [pc, #120]	@ (8006efc <HAL_ADC_Init+0x200>)
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	fbb2 f2f1 	udiv	r2, r2, r1
 8006e8a:	3201      	adds	r2, #1
      wait_loop_index--;
 8006e8c:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8006e8e:	9a01      	ldr	r2, [sp, #4]
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	f43f af4f 	beq.w	8006d34 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8006e96:	9a01      	ldr	r2, [sp, #4]
 8006e98:	3a01      	subs	r2, #1
 8006e9a:	e7f7      	b.n	8006e8c <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e9c:	2500      	movs	r5, #0
 8006e9e:	e756      	b.n	8006d4e <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ea0:	4817      	ldr	r0, [pc, #92]	@ (8006f00 <HAL_ADC_Init+0x204>)
 8006ea2:	f7ff fa71 	bl	8006388 <LL_ADC_IsEnabled>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f47f af76 	bne.w	8006d98 <HAL_ADC_Init+0x9c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006eac:	4a15      	ldr	r2, [pc, #84]	@ (8006f04 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006eae:	6893      	ldr	r3, [r2, #8]
 8006eb0:	6861      	ldr	r1, [r4, #4]
 8006eb2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	6093      	str	r3, [r2, #8]
}
 8006eba:	e76d      	b.n	8006d98 <HAL_ADC_Init+0x9c>
 8006ebc:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <HAL_ADC_Init+0x20c>)
 8006ebe:	e7f6      	b.n	8006eae <HAL_ADC_Init+0x1b2>
                  hadc->Init.Overrun                                                    |
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006eca:	e779      	b.n	8006dc0 <HAL_ADC_Init+0xc4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ecc:	6913      	ldr	r3, [r2, #16]
 8006ece:	f023 0301 	bic.w	r3, r3, #1
 8006ed2:	e7af      	b.n	8006e34 <HAL_ADC_Init+0x138>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ed4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006ed6:	f023 030f 	bic.w	r3, r3, #15
 8006eda:	e7bf      	b.n	8006e5c <HAL_ADC_Init+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006edc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006ede:	f043 0310 	orr.w	r3, r3, #16
 8006ee2:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8006ee4:	2501      	movs	r5, #1
 8006ee6:	e7c0      	b.n	8006e6a <HAL_ADC_Init+0x16e>
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	40022100 	.word	0x40022100
 8006ef0:	fff0c003 	.word	0xfff0c003
 8006ef4:	fc00f81e 	.word	0xfc00f81e
 8006ef8:	00030d40 	.word	0x00030d40
 8006efc:	2400006c 	.word	0x2400006c
 8006f00:	58026000 	.word	0x58026000
 8006f04:	58026300 	.word	0x58026300
 8006f08:	40022300 	.word	0x40022300

08006f0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f0c:	4907      	ldr	r1, [pc, #28]	@ (8006f2c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f0e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f10:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f1a:	0412      	lsls	r2, r2, #16
 8006f1c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006f28:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006f2a:	4770      	bx	lr
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f30:	4b16      	ldr	r3, [pc, #88]	@ (8006f8c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f32:	b530      	push	{r4, r5, lr}
 8006f34:	68dc      	ldr	r4, [r3, #12]
 8006f36:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	bf28      	it	cs
 8006f44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f46:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f48:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f4c:	bf8c      	ite	hi
 8006f4e:	3c03      	subhi	r4, #3
 8006f50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f52:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006f56:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f58:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f60:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f64:	fa03 f304 	lsl.w	r3, r3, r4
 8006f68:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006f70:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006f72:	db06      	blt.n	8006f82 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f74:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006f78:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006f7c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006f80:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f82:	f000 000f 	and.w	r0, r0, #15
 8006f86:	4a02      	ldr	r2, [pc, #8]	@ (8006f90 <HAL_NVIC_SetPriority+0x60>)
 8006f88:	5413      	strb	r3, [r2, r0]
 8006f8a:	e7f9      	b.n	8006f80 <HAL_NVIC_SetPriority+0x50>
 8006f8c:	e000ed00 	.word	0xe000ed00
 8006f90:	e000ed14 	.word	0xe000ed14

08006f94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006f94:	2800      	cmp	r0, #0
 8006f96:	db07      	blt.n	8006fa8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f98:	2301      	movs	r3, #1
 8006f9a:	0941      	lsrs	r1, r0, #5
 8006f9c:	f000 001f 	and.w	r0, r0, #31
 8006fa0:	4a02      	ldr	r2, [pc, #8]	@ (8006fac <HAL_NVIC_EnableIRQ+0x18>)
 8006fa2:	4083      	lsls	r3, r0
 8006fa4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000e100 	.word	0xe000e100

08006fb0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	db0c      	blt.n	8006fce <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fb4:	0943      	lsrs	r3, r0, #5
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f000 001f 	and.w	r0, r0, #31
 8006fbc:	4904      	ldr	r1, [pc, #16]	@ (8006fd0 <HAL_NVIC_DisableIRQ+0x20>)
 8006fbe:	3320      	adds	r3, #32
 8006fc0:	4082      	lsls	r2, r0
 8006fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006fc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006fca:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006fce:	4770      	bx	lr
 8006fd0:	e000e100 	.word	0xe000e100

08006fd4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006fd4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <HAL_MPU_Disable+0x18>)
 8006fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fdc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006fe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006ff0:	4b06      	ldr	r3, [pc, #24]	@ (800700c <HAL_MPU_Enable+0x1c>)
 8006ff2:	f040 0001 	orr.w	r0, r0, #1
 8006ff6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007000:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007006:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800700a:	4770      	bx	lr
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007010:	7843      	ldrb	r3, [r0, #1]
 8007012:	4a14      	ldr	r2, [pc, #80]	@ (8007064 <HAL_MPU_ConfigRegion+0x54>)
 8007014:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007018:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007024:	6843      	ldr	r3, [r0, #4]
 8007026:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800702a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800702c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800702e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007030:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007034:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007036:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007038:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800703a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800703e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007040:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007044:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007046:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800704a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800704c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007050:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007052:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007056:	7a01      	ldrb	r1, [r0, #8]
 8007058:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800705c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007068:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800706a:	4604      	mov	r4, r0
 800706c:	b908      	cbnz	r0, 8007072 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800706e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007070:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007072:	7f43      	ldrb	r3, [r0, #29]
 8007074:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007078:	b913      	cbnz	r3, 8007080 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800707a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800707c:	f7fa f8ac 	bl	80011d8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007080:	2302      	movs	r3, #2
 8007082:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007084:	7923      	ldrb	r3, [r4, #4]
 8007086:	b9e3      	cbnz	r3, 80070c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	4a13      	ldr	r2, [pc, #76]	@ (80070d8 <HAL_CRC_Init+0x70>)
 800708c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	f022 0218 	bic.w	r2, r2, #24
 8007094:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007096:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007098:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800709a:	b9d2      	cbnz	r2, 80070d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80070a0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80070a2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	6961      	ldr	r1, [r4, #20]
 80070a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070ac:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80070ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80070b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070b8:	430a      	orrs	r2, r1
 80070ba:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80070bc:	2301      	movs	r3, #1
 80070be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80070c0:	e7d6      	b.n	8007070 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80070c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 f808 	bl	80070dc <HAL_CRCEx_Polynomial_Set>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d0e2      	beq.n	8007096 <HAL_CRC_Init+0x2e>
 80070d0:	e7cd      	b.n	800706e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80070d2:	6922      	ldr	r2, [r4, #16]
 80070d4:	e7e4      	b.n	80070a0 <HAL_CRC_Init+0x38>
 80070d6:	bf00      	nop
 80070d8:	04c11db7 	.word	0x04c11db7

080070dc <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80070dc:	07cb      	lsls	r3, r1, #31
{
 80070de:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80070e0:	d50d      	bpl.n	80070fe <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80070e2:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80070e4:	3b01      	subs	r3, #1
 80070e6:	d31d      	bcc.n	8007124 <HAL_CRCEx_Polynomial_Set+0x48>
 80070e8:	fa21 f403 	lsr.w	r4, r1, r3
 80070ec:	07e4      	lsls	r4, r4, #31
 80070ee:	d5f9      	bpl.n	80070e4 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80070f0:	2a10      	cmp	r2, #16
 80070f2:	d013      	beq.n	800711c <HAL_CRCEx_Polynomial_Set+0x40>
 80070f4:	2a10      	cmp	r2, #16
 80070f6:	d804      	bhi.n	8007102 <HAL_CRCEx_Polynomial_Set+0x26>
 80070f8:	b13a      	cbz	r2, 800710a <HAL_CRCEx_Polynomial_Set+0x2e>
 80070fa:	2a08      	cmp	r2, #8
 80070fc:	d010      	beq.n	8007120 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 80070fe:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007100:	e00b      	b.n	800711a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8007102:	2a18      	cmp	r2, #24
 8007104:	d1fb      	bne.n	80070fe <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8007106:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8007108:	d8f9      	bhi.n	80070fe <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800710e:	6883      	ldr	r3, [r0, #8]
 8007110:	f023 0318 	bic.w	r3, r3, #24
 8007114:	4313      	orrs	r3, r2
 8007116:	6083      	str	r3, [r0, #8]
 8007118:	2000      	movs	r0, #0
}
 800711a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800711c:	2b07      	cmp	r3, #7
 800711e:	e7f3      	b.n	8007108 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007120:	2b0f      	cmp	r3, #15
 8007122:	e7f1      	b.n	8007108 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8007124:	2a10      	cmp	r2, #16
 8007126:	d1e5      	bne.n	80070f4 <HAL_CRCEx_Polynomial_Set+0x18>
 8007128:	e7e9      	b.n	80070fe <HAL_CRCEx_Polynomial_Set+0x22>
	...

0800712c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800712c:	6803      	ldr	r3, [r0, #0]
{
 800712e:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007130:	4923      	ldr	r1, [pc, #140]	@ (80071c0 <DMA_CalcBaseAndBitshift+0x94>)
 8007132:	428b      	cmp	r3, r1
{
 8007134:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007136:	d031      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007138:	3118      	adds	r1, #24
 800713a:	428b      	cmp	r3, r1
 800713c:	d02e      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800713e:	3118      	adds	r1, #24
 8007140:	428b      	cmp	r3, r1
 8007142:	d02b      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007144:	3118      	adds	r1, #24
 8007146:	428b      	cmp	r3, r1
 8007148:	d028      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800714a:	3118      	adds	r1, #24
 800714c:	428b      	cmp	r3, r1
 800714e:	d025      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007150:	3118      	adds	r1, #24
 8007152:	428b      	cmp	r3, r1
 8007154:	d022      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007156:	3118      	adds	r1, #24
 8007158:	428b      	cmp	r3, r1
 800715a:	d01f      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800715c:	3118      	adds	r1, #24
 800715e:	428b      	cmp	r3, r1
 8007160:	d01c      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007162:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8007166:	428b      	cmp	r3, r1
 8007168:	d018      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800716a:	3118      	adds	r1, #24
 800716c:	428b      	cmp	r3, r1
 800716e:	d015      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007170:	3118      	adds	r1, #24
 8007172:	428b      	cmp	r3, r1
 8007174:	d012      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007176:	3118      	adds	r1, #24
 8007178:	428b      	cmp	r3, r1
 800717a:	d00f      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800717c:	3118      	adds	r1, #24
 800717e:	428b      	cmp	r3, r1
 8007180:	d00c      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007182:	3118      	adds	r1, #24
 8007184:	428b      	cmp	r3, r1
 8007186:	d009      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 8007188:	3118      	adds	r1, #24
 800718a:	428b      	cmp	r3, r1
 800718c:	d006      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
 800718e:	3118      	adds	r1, #24
 8007190:	428b      	cmp	r3, r1
 8007192:	d003      	beq.n	800719c <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007194:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007198:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 800719a:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800719c:	b2dc      	uxtb	r4, r3
 800719e:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071a0:	4808      	ldr	r0, [pc, #32]	@ (80071c4 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071a2:	3c10      	subs	r4, #16
 80071a4:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071a8:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 80071ac:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071ae:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071b0:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80071b4:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071b8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071ba:	bf88      	it	hi
 80071bc:	3004      	addhi	r0, #4
 80071be:	e7eb      	b.n	8007198 <DMA_CalcBaseAndBitshift+0x6c>
 80071c0:	40020010 	.word	0x40020010
 80071c4:	0802819c 	.word	0x0802819c

080071c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071c8:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071ca:	4920      	ldr	r1, [pc, #128]	@ (800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071cc:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071ce:	428a      	cmp	r2, r1
 80071d0:	d028      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071d2:	3114      	adds	r1, #20
 80071d4:	428a      	cmp	r2, r1
 80071d6:	d025      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071d8:	3114      	adds	r1, #20
 80071da:	428a      	cmp	r2, r1
 80071dc:	d022      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071de:	3114      	adds	r1, #20
 80071e0:	428a      	cmp	r2, r1
 80071e2:	d01f      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071e4:	3114      	adds	r1, #20
 80071e6:	428a      	cmp	r2, r1
 80071e8:	d01c      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071ea:	3114      	adds	r1, #20
 80071ec:	428a      	cmp	r2, r1
 80071ee:	d019      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071f0:	3114      	adds	r1, #20
 80071f2:	428a      	cmp	r2, r1
 80071f4:	d016      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80071f6:	3114      	adds	r1, #20
 80071f8:	428a      	cmp	r2, r1
 80071fa:	d013      	beq.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071fc:	2118      	movs	r1, #24
 80071fe:	3b10      	subs	r3, #16
 8007200:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007204:	4912      	ldr	r1, [pc, #72]	@ (8007250 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8007206:	4411      	add	r1, r2
 8007208:	29a8      	cmp	r1, #168	@ 0xa8
 800720a:	d91c      	bls.n	8007246 <DMA_CalcDMAMUXChannelBaseAndMask+0x7e>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800720c:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007210:	2101      	movs	r1, #1
 8007212:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007216:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	490d      	ldr	r1, [pc, #52]	@ (8007254 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007220:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007222:	e00c      	b.n	800723e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007224:	2214      	movs	r2, #20
 8007226:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007228:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800722a:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800722e:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	4908      	ldr	r1, [pc, #32]	@ (8007258 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007238:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
 800723c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800723e:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007240:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8007244:	4770      	bx	lr
      stream_number += 8U;
 8007246:	3308      	adds	r3, #8
 8007248:	e7e0      	b.n	800720c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 800724a:	bf00      	nop
 800724c:	58025408 	.word	0x58025408
 8007250:	bffdfbf0 	.word	0xbffdfbf0
 8007254:	40020880 	.word	0x40020880
 8007258:	58025880 	.word	0x58025880

0800725c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800725c:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800725e:	1e51      	subs	r1, r2, #1
 8007260:	2907      	cmp	r1, #7
{
 8007262:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007264:	d821      	bhi.n	80072aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007266:	6803      	ldr	r3, [r0, #0]
 8007268:	4c13      	ldr	r4, [pc, #76]	@ (80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 800726a:	42a3      	cmp	r3, r4
 800726c:	d01e      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800726e:	3414      	adds	r4, #20
 8007270:	42a3      	cmp	r3, r4
 8007272:	d01b      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007274:	3414      	adds	r4, #20
 8007276:	42a3      	cmp	r3, r4
 8007278:	d018      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800727a:	3414      	adds	r4, #20
 800727c:	42a3      	cmp	r3, r4
 800727e:	d015      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007280:	3414      	adds	r4, #20
 8007282:	42a3      	cmp	r3, r4
 8007284:	d012      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007286:	3414      	adds	r4, #20
 8007288:	42a3      	cmp	r3, r4
 800728a:	d00f      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800728c:	3414      	adds	r4, #20
 800728e:	42a3      	cmp	r3, r4
 8007290:	d00c      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007292:	3414      	adds	r4, #20
 8007294:	42a3      	cmp	r3, r4
 8007296:	d009      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007298:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 800729a:	4413      	add	r3, r2
 800729c:	4a08      	ldr	r2, [pc, #32]	@ (80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800729e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072a0:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072a4:	2301      	movs	r3, #1
 80072a6:	408b      	lsls	r3, r1
 80072a8:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80072aa:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80072ae:	4413      	add	r3, r2
 80072b0:	4a05      	ldr	r2, [pc, #20]	@ (80072c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80072b2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072b4:	e7f4      	b.n	80072a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 80072b6:	bf00      	nop
 80072b8:	58025408 	.word	0x58025408
 80072bc:	1000823f 	.word	0x1000823f
 80072c0:	40020940 	.word	0x40020940
 80072c4:	1600963f 	.word	0x1600963f
 80072c8:	58025940 	.word	0x58025940

080072cc <HAL_DMA_Init>:
{
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072d0:	f7ff f832 	bl	8006338 <HAL_GetTick>
 80072d4:	4606      	mov	r6, r0
  if(hdma == NULL)
 80072d6:	2c00      	cmp	r4, #0
 80072d8:	f000 80a9 	beq.w	800742e <HAL_DMA_Init+0x162>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	4d6f      	ldr	r5, [pc, #444]	@ (800749c <HAL_DMA_Init+0x1d0>)
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	d064      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 80072e4:	4a6e      	ldr	r2, [pc, #440]	@ (80074a0 <HAL_DMA_Init+0x1d4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d061      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 80072ea:	3218      	adds	r2, #24
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d05e      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 80072f0:	3218      	adds	r2, #24
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d05b      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 80072f6:	3218      	adds	r2, #24
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d058      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 80072fc:	3218      	adds	r2, #24
 80072fe:	4293      	cmp	r3, r2
 8007300:	d055      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007302:	3218      	adds	r2, #24
 8007304:	4293      	cmp	r3, r2
 8007306:	d052      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007308:	3218      	adds	r2, #24
 800730a:	4293      	cmp	r3, r2
 800730c:	d04f      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 800730e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007312:	4293      	cmp	r3, r2
 8007314:	d04b      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007316:	3218      	adds	r2, #24
 8007318:	4293      	cmp	r3, r2
 800731a:	d048      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 800731c:	3218      	adds	r2, #24
 800731e:	4293      	cmp	r3, r2
 8007320:	d045      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007322:	3218      	adds	r2, #24
 8007324:	4293      	cmp	r3, r2
 8007326:	d042      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007328:	3218      	adds	r2, #24
 800732a:	4293      	cmp	r3, r2
 800732c:	d03f      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 800732e:	3218      	adds	r2, #24
 8007330:	4293      	cmp	r3, r2
 8007332:	d03c      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 8007334:	3218      	adds	r2, #24
 8007336:	4293      	cmp	r3, r2
 8007338:	d039      	beq.n	80073ae <HAL_DMA_Init+0xe2>
 800733a:	3218      	adds	r2, #24
 800733c:	4293      	cmp	r3, r2
 800733e:	d036      	beq.n	80073ae <HAL_DMA_Init+0xe2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007340:	4a58      	ldr	r2, [pc, #352]	@ (80074a4 <HAL_DMA_Init+0x1d8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	f040 812f 	bne.w	80075a6 <HAL_DMA_Init+0x2da>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007348:	2202      	movs	r2, #2
 800734a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800734e:	2200      	movs	r2, #0
 8007350:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007354:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007356:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007358:	2a40      	cmp	r2, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800735a:	f36f 1010 	bfc	r0, #4, #13
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800735e:	f000 8140 	beq.w	80075e2 <HAL_DMA_Init+0x316>
 8007362:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007366:	424a      	negs	r2, r1
 8007368:	414a      	adcs	r2, r1
 800736a:	0392      	lsls	r2, r2, #14
 800736c:	e9d4 1603 	ldrd	r1, r6, [r4, #12]
 8007370:	4331      	orrs	r1, r6
 8007372:	6966      	ldr	r6, [r4, #20]
 8007374:	4331      	orrs	r1, r6
 8007376:	69a6      	ldr	r6, [r4, #24]
 8007378:	4331      	orrs	r1, r6
 800737a:	69e6      	ldr	r6, [r4, #28]
 800737c:	4331      	orrs	r1, r6
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800737e:	6a26      	ldr	r6, [r4, #32]
 8007380:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
 8007384:	ea40 01d1 	orr.w	r1, r0, r1, lsr #3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007388:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800738a:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800738c:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800738e:	4a46      	ldr	r2, [pc, #280]	@ (80074a8 <HAL_DMA_Init+0x1dc>)
 8007390:	441a      	add	r2, r3
 8007392:	2314      	movs	r3, #20
 8007394:	fbb2 f2f3 	udiv	r2, r2, r3
 8007398:	0092      	lsls	r2, r2, #2
 800739a:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800739c:	f7ff fec6 	bl	800712c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80073a2:	f003 021f 	and.w	r2, r3, #31
 80073a6:	2301      	movs	r3, #1
 80073a8:	4093      	lsls	r3, r2
 80073aa:	6043      	str	r3, [r0, #4]
 80073ac:	e092      	b.n	80074d4 <HAL_DMA_Init+0x208>
    hdma->State = HAL_DMA_STATE_BUSY;
 80073ae:	2202      	movs	r2, #2
 80073b0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80073b4:	2200      	movs	r2, #0
 80073b6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	6813      	ldr	r3, [r2, #0]
 80073c6:	07db      	lsls	r3, r3, #31
 80073c8:	d427      	bmi.n	800741a <HAL_DMA_Init+0x14e>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80073ca:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073cc:	4837      	ldr	r0, [pc, #220]	@ (80074ac <HAL_DMA_Init+0x1e0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ce:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073d0:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 80073d2:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 80073d6:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d8:	6926      	ldr	r6, [r4, #16]
 80073da:	4333      	orrs	r3, r6
 80073dc:	6966      	ldr	r6, [r4, #20]
 80073de:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e0:	69e6      	ldr	r6, [r4, #28]
 80073e2:	430b      	orrs	r3, r1
 80073e4:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 80073e6:	6a26      	ldr	r6, [r4, #32]
 80073e8:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ea:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80073ec:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 80073ee:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073f2:	bf02      	ittt	eq
 80073f4:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 80073f8:	4338      	orreq	r0, r7
 80073fa:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80073fc:	482c      	ldr	r0, [pc, #176]	@ (80074b0 <HAL_DMA_Init+0x1e4>)
 80073fe:	6800      	ldr	r0, [r0, #0]
 8007400:	f36f 000f 	bfc	r0, #0, #16
 8007404:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8007408:	d31b      	bcc.n	8007442 <HAL_DMA_Init+0x176>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800740a:	6860      	ldr	r0, [r4, #4]
 800740c:	282e      	cmp	r0, #46	@ 0x2e
 800740e:	d810      	bhi.n	8007432 <HAL_DMA_Init+0x166>
 8007410:	2828      	cmp	r0, #40	@ 0x28
 8007412:	d916      	bls.n	8007442 <HAL_DMA_Init+0x176>
        registerValue |= DMA_SxCR_TRBUFF;
 8007414:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007418:	e013      	b.n	8007442 <HAL_DMA_Init+0x176>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800741a:	f7fe ff8d 	bl	8006338 <HAL_GetTick>
 800741e:	1b80      	subs	r0, r0, r6
 8007420:	2805      	cmp	r0, #5
 8007422:	d9ce      	bls.n	80073c2 <HAL_DMA_Init+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007424:	2320      	movs	r3, #32
 8007426:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007428:	2303      	movs	r3, #3
 800742a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
}
 8007430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007432:	383f      	subs	r0, #63	@ 0x3f
 8007434:	2813      	cmp	r0, #19
 8007436:	d804      	bhi.n	8007442 <HAL_DMA_Init+0x176>
 8007438:	4f1e      	ldr	r7, [pc, #120]	@ (80074b4 <HAL_DMA_Init+0x1e8>)
 800743a:	fa27 f000 	lsr.w	r0, r7, r0
 800743e:	07c7      	lsls	r7, r0, #31
 8007440:	d4e8      	bmi.n	8007414 <HAL_DMA_Init+0x148>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007442:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007444:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007446:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007448:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800744c:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007450:	d136      	bne.n	80074c0 <HAL_DMA_Init+0x1f4>
      registerValue |= hdma->Init.FIFOThreshold;
 8007452:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8007456:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007458:	b396      	cbz	r6, 80074c0 <HAL_DMA_Init+0x1f4>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800745a:	b939      	cbnz	r1, 800746c <HAL_DMA_Init+0x1a0>
    switch (hdma->Init.FIFOThreshold)
 800745c:	2801      	cmp	r0, #1
 800745e:	d015      	beq.n	800748c <HAL_DMA_Init+0x1c0>
 8007460:	f030 0102 	bics.w	r1, r0, #2
 8007464:	d12c      	bne.n	80074c0 <HAL_DMA_Init+0x1f4>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007466:	01f0      	lsls	r0, r6, #7
 8007468:	d52a      	bpl.n	80074c0 <HAL_DMA_Init+0x1f4>
 800746a:	e012      	b.n	8007492 <HAL_DMA_Init+0x1c6>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800746c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8007470:	d122      	bne.n	80074b8 <HAL_DMA_Init+0x1ec>
    switch (hdma->Init.FIFOThreshold)
 8007472:	2803      	cmp	r0, #3
 8007474:	d824      	bhi.n	80074c0 <HAL_DMA_Init+0x1f4>
 8007476:	a101      	add	r1, pc, #4	@ (adr r1, 800747c <HAL_DMA_Init+0x1b0>)
 8007478:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800747c:	08007493 	.word	0x08007493
 8007480:	08007467 	.word	0x08007467
 8007484:	08007493 	.word	0x08007493
 8007488:	0800748d 	.word	0x0800748d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800748c:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8007490:	d116      	bne.n	80074c0 <HAL_DMA_Init+0x1f4>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007492:	2340      	movs	r3, #64	@ 0x40
 8007494:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007496:	2301      	movs	r3, #1
 8007498:	e7c7      	b.n	800742a <HAL_DMA_Init+0x15e>
 800749a:	bf00      	nop
 800749c:	40020010 	.word	0x40020010
 80074a0:	40020028 	.word	0x40020028
 80074a4:	58025408 	.word	0x58025408
 80074a8:	a7fdabf8 	.word	0xa7fdabf8
 80074ac:	fe10803f 	.word	0xfe10803f
 80074b0:	5c001000 	.word	0x5c001000
 80074b4:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 80074b8:	2802      	cmp	r0, #2
 80074ba:	d9ea      	bls.n	8007492 <HAL_DMA_Init+0x1c6>
 80074bc:	2803      	cmp	r0, #3
 80074be:	d0d2      	beq.n	8007466 <HAL_DMA_Init+0x19a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80074c0:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fe32 	bl	800712c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074c8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80074ca:	f003 021f 	and.w	r2, r3, #31
 80074ce:	233f      	movs	r3, #63	@ 0x3f
 80074d0:	4093      	lsls	r3, r2
 80074d2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	42ab      	cmp	r3, r5
 80074d8:	d045      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074da:	4a45      	ldr	r2, [pc, #276]	@ (80075f0 <HAL_DMA_Init+0x324>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d042      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074e0:	3218      	adds	r2, #24
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d03f      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074e6:	3218      	adds	r2, #24
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d03c      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074ec:	3218      	adds	r2, #24
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d039      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074f2:	3218      	adds	r2, #24
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d036      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074f8:	3218      	adds	r2, #24
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d033      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 80074fe:	3218      	adds	r2, #24
 8007500:	4293      	cmp	r3, r2
 8007502:	d030      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007504:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007508:	4293      	cmp	r3, r2
 800750a:	d02c      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800750c:	3218      	adds	r2, #24
 800750e:	4293      	cmp	r3, r2
 8007510:	d029      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007512:	3218      	adds	r2, #24
 8007514:	4293      	cmp	r3, r2
 8007516:	d026      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007518:	3218      	adds	r2, #24
 800751a:	4293      	cmp	r3, r2
 800751c:	d023      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800751e:	3218      	adds	r2, #24
 8007520:	4293      	cmp	r3, r2
 8007522:	d020      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007524:	3218      	adds	r2, #24
 8007526:	4293      	cmp	r3, r2
 8007528:	d01d      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800752a:	3218      	adds	r2, #24
 800752c:	4293      	cmp	r3, r2
 800752e:	d01a      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007530:	3218      	adds	r2, #24
 8007532:	4293      	cmp	r3, r2
 8007534:	d017      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007536:	4a2f      	ldr	r2, [pc, #188]	@ (80075f4 <HAL_DMA_Init+0x328>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d014      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800753c:	3214      	adds	r2, #20
 800753e:	4293      	cmp	r3, r2
 8007540:	d011      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007542:	3214      	adds	r2, #20
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007548:	3214      	adds	r2, #20
 800754a:	4293      	cmp	r3, r2
 800754c:	d00b      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800754e:	3214      	adds	r2, #20
 8007550:	4293      	cmp	r3, r2
 8007552:	d008      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007554:	3214      	adds	r2, #20
 8007556:	4293      	cmp	r3, r2
 8007558:	d005      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 800755a:	3214      	adds	r2, #20
 800755c:	4293      	cmp	r3, r2
 800755e:	d002      	beq.n	8007566 <HAL_DMA_Init+0x29a>
 8007560:	3214      	adds	r2, #20
 8007562:	4293      	cmp	r3, r2
 8007564:	d119      	bne.n	800759a <HAL_DMA_Init+0x2ce>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007566:	4620      	mov	r0, r4
 8007568:	2500      	movs	r5, #0
 800756a:	f7ff fe2d 	bl	80071c8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800756e:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007570:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007572:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007574:	bf04      	itt	eq
 8007576:	2300      	moveq	r3, #0
 8007578:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800757a:	6863      	ldr	r3, [r4, #4]
 800757c:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800757e:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007580:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007582:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007584:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8007588:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800758a:	d82c      	bhi.n	80075e6 <HAL_DMA_Init+0x31a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800758c:	f7ff fe66 	bl	800725c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007590:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007592:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007594:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8007598:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800759a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800759c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800759e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80075a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80075a4:	e744      	b.n	8007430 <HAL_DMA_Init+0x164>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80075a6:	4a14      	ldr	r2, [pc, #80]	@ (80075f8 <HAL_DMA_Init+0x32c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	f43f aecd 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075ae:	3214      	adds	r2, #20
 80075b0:	4293      	cmp	r3, r2
 80075b2:	f43f aec9 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075b6:	3214      	adds	r2, #20
 80075b8:	4293      	cmp	r3, r2
 80075ba:	f43f aec5 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075be:	3214      	adds	r2, #20
 80075c0:	4293      	cmp	r3, r2
 80075c2:	f43f aec1 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075c6:	3214      	adds	r2, #20
 80075c8:	4293      	cmp	r3, r2
 80075ca:	f43f aebd 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075ce:	3214      	adds	r2, #20
 80075d0:	4293      	cmp	r3, r2
 80075d2:	f43f aeb9 	beq.w	8007348 <HAL_DMA_Init+0x7c>
 80075d6:	3214      	adds	r2, #20
 80075d8:	4293      	cmp	r3, r2
 80075da:	f43f aeb5 	beq.w	8007348 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075de:	2340      	movs	r3, #64	@ 0x40
 80075e0:	e721      	b.n	8007426 <HAL_DMA_Init+0x15a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075e2:	2210      	movs	r2, #16
 80075e4:	e6c2      	b.n	800736c <HAL_DMA_Init+0xa0>
      hdma->DMAmuxRequestGenStatus = 0U;
 80075e6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80075ea:	6765      	str	r5, [r4, #116]	@ 0x74
 80075ec:	e7d5      	b.n	800759a <HAL_DMA_Init+0x2ce>
 80075ee:	bf00      	nop
 80075f0:	40020028 	.word	0x40020028
 80075f4:	58025408 	.word	0x58025408
 80075f8:	5802541c 	.word	0x5802541c

080075fc <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 80075fc:	2300      	movs	r3, #0
{
 80075fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8007602:	9301      	str	r3, [sp, #4]
{
 8007604:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007606:	4b84      	ldr	r3, [pc, #528]	@ (8007818 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007608:	4f84      	ldr	r7, [pc, #528]	@ (800781c <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800760a:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800760c:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800760e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007610:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8007612:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8007616:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800761a:	d047      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800761c:	4a80      	ldr	r2, [pc, #512]	@ (8007820 <HAL_DMA_IRQHandler+0x224>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d044      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007622:	3218      	adds	r2, #24
 8007624:	4293      	cmp	r3, r2
 8007626:	d041      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007628:	3218      	adds	r2, #24
 800762a:	4293      	cmp	r3, r2
 800762c:	d03e      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800762e:	3218      	adds	r2, #24
 8007630:	4293      	cmp	r3, r2
 8007632:	d03b      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007634:	3218      	adds	r2, #24
 8007636:	4293      	cmp	r3, r2
 8007638:	d038      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800763a:	3218      	adds	r2, #24
 800763c:	4293      	cmp	r3, r2
 800763e:	d035      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007640:	3218      	adds	r2, #24
 8007642:	4293      	cmp	r3, r2
 8007644:	d032      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007646:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800764a:	4293      	cmp	r3, r2
 800764c:	d02e      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800764e:	3218      	adds	r2, #24
 8007650:	4293      	cmp	r3, r2
 8007652:	d02b      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007654:	3218      	adds	r2, #24
 8007656:	4293      	cmp	r3, r2
 8007658:	d028      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800765a:	3218      	adds	r2, #24
 800765c:	4293      	cmp	r3, r2
 800765e:	d025      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007660:	3218      	adds	r2, #24
 8007662:	4293      	cmp	r3, r2
 8007664:	d022      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007666:	3218      	adds	r2, #24
 8007668:	4293      	cmp	r3, r2
 800766a:	d01f      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 800766c:	3218      	adds	r2, #24
 800766e:	4293      	cmp	r3, r2
 8007670:	d01c      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
 8007672:	3218      	adds	r2, #24
 8007674:	4293      	cmp	r3, r2
 8007676:	d019      	beq.n	80076ac <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007678:	4a6a      	ldr	r2, [pc, #424]	@ (8007824 <HAL_DMA_IRQHandler+0x228>)
 800767a:	4293      	cmp	r3, r2
 800767c:	f040 8136 	bne.w	80078ec <HAL_DMA_IRQHandler+0x2f0>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007680:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8007682:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007684:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007686:	f001 011f 	and.w	r1, r1, #31
 800768a:	4088      	lsls	r0, r1
 800768c:	ea10 0f0c 	tst.w	r0, ip
 8007690:	f000 8153 	beq.w	800793a <HAL_DMA_IRQHandler+0x33e>
 8007694:	0756      	lsls	r6, r2, #29
 8007696:	f140 8150 	bpl.w	800793a <HAL_DMA_IRQHandler+0x33e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800769a:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800769c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800769e:	f140 8144 	bpl.w	800792a <HAL_DMA_IRQHandler+0x32e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076a2:	03d3      	lsls	r3, r2, #15
 80076a4:	f100 8147 	bmi.w	8007936 <HAL_DMA_IRQHandler+0x33a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076a8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80076aa:	e0a0      	b.n	80077ee <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076ac:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80076ae:	2108      	movs	r1, #8
 80076b0:	f002 021f 	and.w	r2, r2, #31
 80076b4:	4091      	lsls	r1, r2
 80076b6:	ea11 0f08 	tst.w	r1, r8
 80076ba:	d00b      	beq.n	80076d4 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	0740      	lsls	r0, r0, #29
 80076c0:	d508      	bpl.n	80076d4 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	f020 0004 	bic.w	r0, r0, #4
 80076c8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076ca:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076cc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80076ce:	f041 0101 	orr.w	r1, r1, #1
 80076d2:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076d4:	fa28 f102 	lsr.w	r1, r8, r2
 80076d8:	07c8      	lsls	r0, r1, #31
 80076da:	d509      	bpl.n	80076f0 <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80076dc:	6959      	ldr	r1, [r3, #20]
 80076de:	0609      	lsls	r1, r1, #24
 80076e0:	d506      	bpl.n	80076f0 <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076e2:	2101      	movs	r1, #1
 80076e4:	4091      	lsls	r1, r2
 80076e6:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076e8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80076ea:	f041 0102 	orr.w	r1, r1, #2
 80076ee:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076f0:	2104      	movs	r1, #4
 80076f2:	4091      	lsls	r1, r2
 80076f4:	ea11 0f08 	tst.w	r1, r8
 80076f8:	d007      	beq.n	800770a <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	0780      	lsls	r0, r0, #30
 80076fe:	d504      	bpl.n	800770a <HAL_DMA_IRQHandler+0x10e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007700:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007702:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007704:	f041 0104 	orr.w	r1, r1, #4
 8007708:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800770a:	2110      	movs	r1, #16
 800770c:	fa01 f202 	lsl.w	r2, r1, r2
 8007710:	ea12 0f08 	tst.w	r2, r8
 8007714:	d00f      	beq.n	8007736 <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007716:	6819      	ldr	r1, [r3, #0]
 8007718:	0709      	lsls	r1, r1, #28
 800771a:	d50c      	bpl.n	8007736 <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800771c:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	0350      	lsls	r0, r2, #13
 8007722:	d56c      	bpl.n	80077fe <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	0319      	lsls	r1, r3, #12
 8007728:	d401      	bmi.n	800772e <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 800772a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800772c:	e000      	b.n	8007730 <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800772e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8007730:	b10b      	cbz	r3, 8007736 <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 8007732:	4620      	mov	r0, r4
 8007734:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007736:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8007738:	2120      	movs	r1, #32
 800773a:	f002 021f 	and.w	r2, r2, #31
 800773e:	4091      	lsls	r1, r2
 8007740:	ea11 0f08 	tst.w	r1, r8
 8007744:	d07a      	beq.n	800783c <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	42bb      	cmp	r3, r7
 800774a:	d02d      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800774c:	4834      	ldr	r0, [pc, #208]	@ (8007820 <HAL_DMA_IRQHandler+0x224>)
 800774e:	4283      	cmp	r3, r0
 8007750:	d02a      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007752:	3018      	adds	r0, #24
 8007754:	4283      	cmp	r3, r0
 8007756:	d027      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007758:	3018      	adds	r0, #24
 800775a:	4283      	cmp	r3, r0
 800775c:	d024      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800775e:	3018      	adds	r0, #24
 8007760:	4283      	cmp	r3, r0
 8007762:	d021      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007764:	3018      	adds	r0, #24
 8007766:	4283      	cmp	r3, r0
 8007768:	d01e      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800776a:	3018      	adds	r0, #24
 800776c:	4283      	cmp	r3, r0
 800776e:	d01b      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007770:	3018      	adds	r0, #24
 8007772:	4283      	cmp	r3, r0
 8007774:	d018      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007776:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800777a:	4283      	cmp	r3, r0
 800777c:	d014      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800777e:	3018      	adds	r0, #24
 8007780:	4283      	cmp	r3, r0
 8007782:	d011      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007784:	3018      	adds	r0, #24
 8007786:	4283      	cmp	r3, r0
 8007788:	d00e      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800778a:	3018      	adds	r0, #24
 800778c:	4283      	cmp	r3, r0
 800778e:	d00b      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007790:	3018      	adds	r0, #24
 8007792:	4283      	cmp	r3, r0
 8007794:	d008      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 8007796:	3018      	adds	r0, #24
 8007798:	4283      	cmp	r3, r0
 800779a:	d005      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 800779c:	3018      	adds	r0, #24
 800779e:	4283      	cmp	r3, r0
 80077a0:	d002      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x1ac>
 80077a2:	3018      	adds	r0, #24
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d132      	bne.n	800780e <HAL_DMA_IRQHandler+0x212>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f010 0f10 	tst.w	r0, #16
 80077ae:	d045      	beq.n	800783c <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b0:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077b2:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 80077b6:	2904      	cmp	r1, #4
 80077b8:	d136      	bne.n	8007828 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077ba:	6819      	ldr	r1, [r3, #0]
 80077bc:	f021 0116 	bic.w	r1, r1, #22
 80077c0:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077c2:	6959      	ldr	r1, [r3, #20]
 80077c4:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077c8:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077ca:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80077cc:	b909      	cbnz	r1, 80077d2 <HAL_DMA_IRQHandler+0x1d6>
 80077ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077d0:	b119      	cbz	r1, 80077da <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	f021 0108 	bic.w	r1, r1, #8
 80077d8:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077da:	233f      	movs	r3, #63	@ 0x3f
 80077dc:	4093      	lsls	r3, r2
 80077de:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80077e6:	2300      	movs	r3, #0
 80077e8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80077ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8098 	beq.w	8007924 <HAL_DMA_IRQHandler+0x328>
        hdma->XferErrorCallback(hdma);
 80077f4:	4620      	mov	r0, r4
}
 80077f6:	b002      	add	sp, #8
 80077f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80077fc:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	05d2      	lsls	r2, r2, #23
 8007802:	d492      	bmi.n	800772a <HAL_DMA_IRQHandler+0x12e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f022 0208 	bic.w	r2, r2, #8
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e78d      	b.n	800772a <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f010 0f02 	tst.w	r0, #2
 8007814:	e7cb      	b.n	80077ae <HAL_DMA_IRQHandler+0x1b2>
 8007816:	bf00      	nop
 8007818:	2400006c 	.word	0x2400006c
 800781c:	40020010 	.word	0x40020010
 8007820:	40020028 	.word	0x40020028
 8007824:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	0350      	lsls	r0, r2, #13
 800782c:	d543      	bpl.n	80078b6 <HAL_DMA_IRQHandler+0x2ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	0319      	lsls	r1, r3, #12
 8007832:	d44d      	bmi.n	80078d0 <HAL_DMA_IRQHandler+0x2d4>
            if(hdma->XferM1CpltCallback != NULL)
 8007834:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8007836:	b10b      	cbz	r3, 800783c <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8007838:	4620      	mov	r0, r4
 800783a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800783c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800783e:	2b00      	cmp	r3, #0
 8007840:	d070      	beq.n	8007924 <HAL_DMA_IRQHandler+0x328>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007842:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007844:	07da      	lsls	r2, r3, #31
 8007846:	d54f      	bpl.n	80078e8 <HAL_DMA_IRQHandler+0x2ec>
        hdma->State = HAL_DMA_STATE_ABORT;
 8007848:	2304      	movs	r3, #4
 800784a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	42bb      	cmp	r3, r7
 8007852:	d01e      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007854:	4a4f      	ldr	r2, [pc, #316]	@ (8007994 <HAL_DMA_IRQHandler+0x398>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01b      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 800785a:	3218      	adds	r2, #24
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007860:	3218      	adds	r2, #24
 8007862:	4293      	cmp	r3, r2
 8007864:	d015      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007866:	3218      	adds	r2, #24
 8007868:	4293      	cmp	r3, r2
 800786a:	d012      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 800786c:	3218      	adds	r2, #24
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007872:	3218      	adds	r2, #24
 8007874:	4293      	cmp	r3, r2
 8007876:	d00c      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007878:	3218      	adds	r2, #24
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 800787e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007882:	4293      	cmp	r3, r2
 8007884:	d005      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007886:	3218      	adds	r2, #24
 8007888:	4293      	cmp	r3, r2
 800788a:	d002      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 800788c:	3218      	adds	r2, #24
 800788e:	4293      	cmp	r3, r2
 8007890:	d0ff      	beq.n	8007892 <HAL_DMA_IRQHandler+0x296>
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800789a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800789e:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 80078a2:	9a01      	ldr	r2, [sp, #4]
 80078a4:	3201      	adds	r2, #1
 80078a6:	42b2      	cmp	r2, r6
 80078a8:	9201      	str	r2, [sp, #4]
 80078aa:	d913      	bls.n	80078d4 <HAL_DMA_IRQHandler+0x2d8>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d414      	bmi.n	80078dc <HAL_DMA_IRQHandler+0x2e0>
          hdma->State = HAL_DMA_STATE_READY;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e013      	b.n	80078de <HAL_DMA_IRQHandler+0x2e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80078bc:	d108      	bne.n	80078d0 <HAL_DMA_IRQHandler+0x2d4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	f021 0110 	bic.w	r1, r1, #16
 80078c4:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80078c6:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 80078c8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80078cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 80078d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80078d2:	e7b0      	b.n	8007836 <HAL_DMA_IRQHandler+0x23a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	07d7      	lsls	r7, r2, #31
 80078d8:	d4e3      	bmi.n	80078a2 <HAL_DMA_IRQHandler+0x2a6>
 80078da:	e7e7      	b.n	80078ac <HAL_DMA_IRQHandler+0x2b0>
          hdma->State = HAL_DMA_STATE_ERROR;
 80078dc:	2303      	movs	r3, #3
      hdma->State = HAL_DMA_STATE_READY;
 80078de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80078e2:	2300      	movs	r3, #0
 80078e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 80078e8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80078ea:	e780      	b.n	80077ee <HAL_DMA_IRQHandler+0x1f2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007998 <HAL_DMA_IRQHandler+0x39c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	f43f aec6 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 80078f4:	3214      	adds	r2, #20
 80078f6:	4293      	cmp	r3, r2
 80078f8:	f43f aec2 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 80078fc:	3214      	adds	r2, #20
 80078fe:	4293      	cmp	r3, r2
 8007900:	f43f aebe 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 8007904:	3214      	adds	r2, #20
 8007906:	4293      	cmp	r3, r2
 8007908:	f43f aeba 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 800790c:	3214      	adds	r2, #20
 800790e:	4293      	cmp	r3, r2
 8007910:	f43f aeb6 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 8007914:	3214      	adds	r2, #20
 8007916:	4293      	cmp	r3, r2
 8007918:	f43f aeb2 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
 800791c:	3214      	adds	r2, #20
 800791e:	4293      	cmp	r3, r2
 8007920:	f43f aeae 	beq.w	8007680 <HAL_DMA_IRQHandler+0x84>
}
 8007924:	b002      	add	sp, #8
 8007926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800792a:	0697      	lsls	r7, r2, #26
 800792c:	d403      	bmi.n	8007936 <HAL_DMA_IRQHandler+0x33a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f022 0204 	bic.w	r2, r2, #4
 8007934:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007936:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007938:	e759      	b.n	80077ee <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800793a:	2002      	movs	r0, #2
 800793c:	4088      	lsls	r0, r1
 800793e:	ea10 0f0c 	tst.w	r0, ip
 8007942:	d016      	beq.n	8007972 <HAL_DMA_IRQHandler+0x376>
 8007944:	0796      	lsls	r6, r2, #30
 8007946:	d514      	bpl.n	8007972 <HAL_DMA_IRQHandler+0x376>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007948:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800794a:	0410      	lsls	r0, r2, #16
 800794c:	d503      	bpl.n	8007956 <HAL_DMA_IRQHandler+0x35a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800794e:	03d1      	lsls	r1, r2, #15
 8007950:	d40d      	bmi.n	800796e <HAL_DMA_IRQHandler+0x372>
          if(hdma->XferM1CpltCallback != NULL)
 8007952:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007954:	e74b      	b.n	80077ee <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007956:	f012 0220 	ands.w	r2, r2, #32
 800795a:	d108      	bne.n	800796e <HAL_DMA_IRQHandler+0x372>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800795c:	6819      	ldr	r1, [r3, #0]
 800795e:	f021 010a 	bic.w	r1, r1, #10
 8007962:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007964:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007966:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800796a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800796e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007970:	e73d      	b.n	80077ee <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007972:	2008      	movs	r0, #8
 8007974:	4088      	lsls	r0, r1
 8007976:	ea10 0f0c 	tst.w	r0, ip
 800797a:	d0d3      	beq.n	8007924 <HAL_DMA_IRQHandler+0x328>
 800797c:	0712      	lsls	r2, r2, #28
 800797e:	d5d1      	bpl.n	8007924 <HAL_DMA_IRQHandler+0x328>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f022 020e 	bic.w	r2, r2, #14
 8007986:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007988:	2301      	movs	r3, #1
 800798a:	fa03 f101 	lsl.w	r1, r3, r1
 800798e:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007990:	6563      	str	r3, [r4, #84]	@ 0x54
 8007992:	e7a4      	b.n	80078de <HAL_DMA_IRQHandler+0x2e2>
 8007994:	40020028 	.word	0x40020028
 8007998:	5802541c 	.word	0x5802541c

0800799c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800799c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800799e:	4604      	mov	r4, r0
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d036      	beq.n	8007a12 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80079a4:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80079a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80079ac:	b91b      	cbnz	r3, 80079b6 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80079ae:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80079b2:	f7f9 fc29 	bl	8001208 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079b6:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80079b8:	69e0      	ldr	r0, [r4, #28]
 80079ba:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079bc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80079c4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80079c6:	6819      	ldr	r1, [r3, #0]
 80079c8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80079cc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80079d0:	430a      	orrs	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80079d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80079d6:	68a2      	ldr	r2, [r4, #8]
 80079d8:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80079dc:	4302      	orrs	r2, r0
 80079de:	f021 0101 	bic.w	r1, r1, #1
 80079e2:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079e4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80079e6:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079ea:	f36f 020f 	bfc	r2, #0, #16
 80079ee:	430a      	orrs	r2, r1
 80079f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80079f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80079f4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80079f8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80079fc:	0552      	lsls	r2, r2, #21
 80079fe:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a02:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a04:	430a      	orrs	r2, r1
 8007a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a08:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a0a:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a0c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8007a10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a12:	2001      	movs	r0, #1
 8007a14:	e7fc      	b.n	8007a10 <HAL_DMA2D_Init+0x74>

08007a16 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8007a16:	4770      	bx	lr

08007a18 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8007a18:	4770      	bx	lr

08007a1a <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a1a:	6803      	ldr	r3, [r0, #0]
{
 8007a1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a1e:	685e      	ldr	r6, [r3, #4]
{
 8007a20:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007a22:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a24:	07f2      	lsls	r2, r6, #31
 8007a26:	d514      	bpl.n	8007a52 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007a28:	05e9      	lsls	r1, r5, #23
 8007a2a:	d512      	bpl.n	8007a52 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a32:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a34:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a40:	2304      	movs	r3, #4
 8007a42:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007a46:	2300      	movs	r3, #0
 8007a48:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007a4c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007a4e:	b103      	cbz	r3, 8007a52 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8007a50:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a52:	06b2      	lsls	r2, r6, #26
 8007a54:	d516      	bpl.n	8007a84 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a56:	04ab      	lsls	r3, r5, #18
 8007a58:	d514      	bpl.n	8007a84 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a64:	2220      	movs	r2, #32
 8007a66:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a6a:	f043 0302 	orr.w	r3, r3, #2
 8007a6e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a70:	2304      	movs	r3, #4
 8007a72:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007a76:	2300      	movs	r3, #0
 8007a78:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007a7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a7e:	b10b      	cbz	r3, 8007a84 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8007a80:	4620      	mov	r0, r4
 8007a82:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a84:	0730      	lsls	r0, r6, #28
 8007a86:	d516      	bpl.n	8007ab6 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a88:	0529      	lsls	r1, r5, #20
 8007a8a:	d514      	bpl.n	8007ab6 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a94:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a96:	2208      	movs	r2, #8
 8007a98:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a9c:	f043 0304 	orr.w	r3, r3, #4
 8007aa0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007aae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ab0:	b10b      	cbz	r3, 8007ab6 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ab6:	0772      	lsls	r2, r6, #29
 8007ab8:	d50b      	bpl.n	8007ad2 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007aba:	056b      	lsls	r3, r5, #21
 8007abc:	d509      	bpl.n	8007ad2 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007abe:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ac0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ac8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007aca:	2204      	movs	r2, #4
 8007acc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ace:	f7ff ffa2 	bl	8007a16 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ad2:	07b0      	lsls	r0, r6, #30
 8007ad4:	d514      	bpl.n	8007b00 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007ad6:	05a9      	lsls	r1, r5, #22
 8007ad8:	d512      	bpl.n	8007b00 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aea:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007af2:	2300      	movs	r3, #0
 8007af4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8007af8:	6a23      	ldr	r3, [r4, #32]
 8007afa:	b10b      	cbz	r3, 8007b00 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8007afc:	4620      	mov	r0, r4
 8007afe:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b00:	06f2      	lsls	r2, r6, #27
 8007b02:	d513      	bpl.n	8007b2c <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b04:	04eb      	lsls	r3, r5, #19
 8007b06:	d511      	bpl.n	8007b2c <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b08:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b0a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b12:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b14:	2210      	movs	r2, #16
 8007b16:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b1a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007b22:	2300      	movs	r3, #0
 8007b24:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b28:	f7ff ff76 	bl	8007a18 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}

08007b2e <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	4607      	mov	r7, r0
 8007b34:	460d      	mov	r5, r1
 8007b36:	4614      	mov	r4, r2
 8007b38:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b3a:	f7fe fbfd 	bl	8006338 <HAL_GetTick>
 8007b3e:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007b44:	07d2      	lsls	r2, r2, #31
 8007b46:	d50a      	bpl.n	8007b5e <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007b48:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007b4c:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007b4e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007b50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007b58:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b5e:	f7fe fbeb 	bl	8006338 <HAL_GetTick>
 8007b62:	eba0 0008 	sub.w	r0, r0, r8
 8007b66:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007b6a:	d9e9      	bls.n	8007b40 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007b6c:	2003      	movs	r0, #3
 8007b6e:	e7f4      	b.n	8007b5a <DSI_ShortWrite.constprop.0+0x2c>

08007b70 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007b70:	7c03      	ldrb	r3, [r0, #16]
{
 8007b72:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d05b      	beq.n	8007c30 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8007b78:	6803      	ldr	r3, [r0, #0]
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007b80:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007b84:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007b86:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007b88:	d507      	bpl.n	8007b9a <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007b8a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007b8e:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8007b92:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8007b96:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007b9a:	0788      	lsls	r0, r1, #30
 8007b9c:	d505      	bpl.n	8007baa <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007b9e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007ba2:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8007ba6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007baa:	0748      	lsls	r0, r1, #29
 8007bac:	d505      	bpl.n	8007bba <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007bae:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007bb2:	f040 0001 	orr.w	r0, r0, #1
 8007bb6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007bba:	0708      	lsls	r0, r1, #28
 8007bbc:	d505      	bpl.n	8007bca <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007bbe:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007bc2:	f040 0002 	orr.w	r0, r0, #2
 8007bc6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8007bca:	06c8      	lsls	r0, r1, #27
 8007bcc:	d505      	bpl.n	8007bda <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007bce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007bd2:	f040 000c 	orr.w	r0, r0, #12
 8007bd6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007bda:	0688      	lsls	r0, r1, #26
 8007bdc:	d505      	bpl.n	8007bea <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007bde:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007be2:	f040 0010 	orr.w	r0, r0, #16
 8007be6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007bea:	0648      	lsls	r0, r1, #25
 8007bec:	d505      	bpl.n	8007bfa <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007bee:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007bf2:	f040 0020 	orr.w	r0, r0, #32
 8007bf6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007bfa:	0608      	lsls	r0, r1, #24
 8007bfc:	d505      	bpl.n	8007c0a <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007bfe:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007c02:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8007c06:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007c0a:	05c8      	lsls	r0, r1, #23
 8007c0c:	d505      	bpl.n	8007c1a <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007c0e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007c12:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8007c16:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007c1a:	0589      	lsls	r1, r1, #22
 8007c1c:	d505      	bpl.n	8007c2a <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007c1e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8007c22:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8007c26:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007c2e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007c30:	2002      	movs	r0, #2
}
 8007c32:	4770      	bx	lr

08007c34 <HAL_DSI_Init>:
{
 8007c34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007c36:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f000 80ea 	beq.w	8007e14 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007c40:	7c43      	ldrb	r3, [r0, #17]
 8007c42:	b90b      	cbnz	r3, 8007c48 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007c44:	f7f9 fb04 	bl	8001250 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007c56:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007c5a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007c5e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8007c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007c6a:	f7fe fb65 	bl	8006338 <HAL_GetTick>
 8007c6e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007c70:	6822      	ldr	r2, [r4, #0]
 8007c72:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8007c76:	04d9      	lsls	r1, r3, #19
 8007c78:	d56e      	bpl.n	8007d58 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007c7a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007c7e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8007c82:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8007c86:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007c8a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007c8e:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007c92:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007c94:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007c98:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007c9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007c9e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8007cb6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007cc2:	f7fe fb3f 	bl	8006344 <HAL_Delay>
  tickstart = HAL_GetTick();
 8007cc6:	f7fe fb37 	bl	8006338 <HAL_GetTick>
 8007cca:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007cd2:	05d2      	lsls	r2, r2, #23
 8007cd4:	d548      	bpl.n	8007d68 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8007cd6:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007cd8:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8007cda:	9202      	str	r2, [sp, #8]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	f002 0201 	and.w	r2, r2, #1
 8007cea:	9202      	str	r2, [sp, #8]
 8007cec:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007cf4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007cfa:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007cfc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8007cfe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007d02:	f042 0202 	orr.w	r2, r2, #2
 8007d06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8007d0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007d0e:	f042 0204 	orr.w	r2, r2, #4
 8007d12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007d16:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007d1a:	f022 0203 	bic.w	r2, r2, #3
 8007d1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007d22:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007d26:	430a      	orrs	r2, r1
 8007d28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007d2c:	f7fe fb04 	bl	8006338 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007d30:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007d32:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d38:	079b      	lsls	r3, r3, #30
 8007d3a:	d025      	beq.n	8007d88 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d42:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007d46:	2b94      	cmp	r3, #148	@ 0x94
 8007d48:	d025      	beq.n	8007d96 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007d4a:	f7fe faf5 	bl	8006338 <HAL_GetTick>
 8007d4e:	1b80      	subs	r0, r0, r6
 8007d50:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007d54:	d9f2      	bls.n	8007d3c <HAL_DSI_Init+0x108>
 8007d56:	e014      	b.n	8007d82 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007d58:	f7fe faee 	bl	8006338 <HAL_GetTick>
 8007d5c:	1b80      	subs	r0, r0, r6
 8007d5e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007d62:	d985      	bls.n	8007c70 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007d64:	2003      	movs	r0, #3
 8007d66:	e053      	b.n	8007e10 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007d68:	f7fe fae6 	bl	8006338 <HAL_GetTick>
 8007d6c:	1b80      	subs	r0, r0, r6
 8007d6e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007d72:	d9ab      	bls.n	8007ccc <HAL_DSI_Init+0x98>
 8007d74:	e7f6      	b.n	8007d64 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007d76:	f7fe fadf 	bl	8006338 <HAL_GetTick>
 8007d7a:	1b80      	subs	r0, r0, r6
 8007d7c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007d80:	d902      	bls.n	8007d88 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8007d82:	2300      	movs	r3, #0
 8007d84:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8007d86:	e7ed      	b.n	8007d64 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d8e:	f003 0314 	and.w	r3, r3, #20
 8007d92:	2b14      	cmp	r3, #20
 8007d94:	d1ef      	bne.n	8007d76 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007d96:	686b      	ldr	r3, [r5, #4]
 8007d98:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007e18 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8007d9e:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf38      	it	cc
 8007da4:	2301      	movcc	r3, #1
 8007da6:	435a      	muls	r2, r3
 8007da8:	68ab      	ldr	r3, [r5, #8]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	409a      	lsls	r2, r3
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	434b      	muls	r3, r1
 8007db4:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007dbe:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007dc2:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007dc6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007dca:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007dcc:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007dce:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007dd2:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007dd6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8007dda:	9003      	str	r0, [sp, #12]
 8007ddc:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8007dde:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	f002 0201 	and.w	r2, r2, #1
 8007dec:	9203      	str	r2, [sp, #12]
 8007dee:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007df0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007df4:	f022 0203 	bic.w	r2, r2, #3
 8007df8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007dfc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007e00:	430a      	orrs	r2, r1
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8007e0a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007e0c:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8007e0e:	7463      	strb	r3, [r4, #17]
}
 8007e10:	b004      	add	sp, #16
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007e14:	2001      	movs	r0, #1
 8007e16:	e7fb      	b.n	8007e10 <HAL_DSI_Init+0x1dc>
 8007e18:	003d0900 	.word	0x003d0900

08007e1c <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007e1c:	4770      	bx	lr

08007e1e <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007e1e:	6803      	ldr	r3, [r0, #0]
 8007e20:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007e24:	07d1      	lsls	r1, r2, #31
{
 8007e26:	b510      	push	{r4, lr}
 8007e28:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007e2a:	d508      	bpl.n	8007e3e <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007e2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007e30:	07d2      	lsls	r2, r2, #31
 8007e32:	d504      	bpl.n	8007e3e <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007e34:	2201      	movs	r2, #1
 8007e36:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007e3a:	f7fa f959 	bl	80020f0 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007e44:	0791      	lsls	r1, r2, #30
 8007e46:	d509      	bpl.n	8007e5c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007e48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007e4c:	0792      	lsls	r2, r2, #30
 8007e4e:	d505      	bpl.n	8007e5c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007e50:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007e52:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007e54:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007e58:	f7fa f97e 	bl	8002158 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007e5c:	69a3      	ldr	r3, [r4, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04e      	beq.n	8007f00 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007e62:	6821      	ldr	r1, [r4, #0]
 8007e64:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007e68:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007e6c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007e6e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007e72:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8007e76:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007e78:	b291      	uxth	r1, r2
 8007e7a:	b119      	cbz	r1, 8007e84 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007e7c:	6961      	ldr	r1, [r4, #20]
 8007e7e:	f041 0101 	orr.w	r1, r1, #1
 8007e82:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007e84:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8007e88:	d003      	beq.n	8007e92 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007e8a:	6962      	ldr	r2, [r4, #20]
 8007e8c:	f042 0202 	orr.w	r2, r2, #2
 8007e90:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007e92:	07d8      	lsls	r0, r3, #31
 8007e94:	d503      	bpl.n	8007e9e <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007e96:	6962      	ldr	r2, [r4, #20]
 8007e98:	f042 0204 	orr.w	r2, r2, #4
 8007e9c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007e9e:	0799      	lsls	r1, r3, #30
 8007ea0:	d503      	bpl.n	8007eaa <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007ea2:	6962      	ldr	r2, [r4, #20]
 8007ea4:	f042 0208 	orr.w	r2, r2, #8
 8007ea8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007eaa:	f013 0f0c 	tst.w	r3, #12
 8007eae:	d003      	beq.n	8007eb8 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007eb0:	6962      	ldr	r2, [r4, #20]
 8007eb2:	f042 0210 	orr.w	r2, r2, #16
 8007eb6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007eb8:	06da      	lsls	r2, r3, #27
 8007eba:	d503      	bpl.n	8007ec4 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007ebc:	6962      	ldr	r2, [r4, #20]
 8007ebe:	f042 0220 	orr.w	r2, r2, #32
 8007ec2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007ec4:	0698      	lsls	r0, r3, #26
 8007ec6:	d503      	bpl.n	8007ed0 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007ec8:	6962      	ldr	r2, [r4, #20]
 8007eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ece:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007ed0:	0659      	lsls	r1, r3, #25
 8007ed2:	d503      	bpl.n	8007edc <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007ed4:	6962      	ldr	r2, [r4, #20]
 8007ed6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007eda:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007edc:	061a      	lsls	r2, r3, #24
 8007ede:	d503      	bpl.n	8007ee8 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007ee0:	6962      	ldr	r2, [r4, #20]
 8007ee2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ee6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007ee8:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8007eec:	d003      	beq.n	8007ef6 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007eee:	6963      	ldr	r3, [r4, #20]
 8007ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ef4:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007ef6:	6963      	ldr	r3, [r4, #20]
 8007ef8:	b113      	cbz	r3, 8007f00 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7ff ff8e 	bl	8007e1c <HAL_DSI_ErrorCallback>
}
 8007f00:	bd10      	pop	{r4, pc}

08007f02 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f02:	7c02      	ldrb	r2, [r0, #16]
{
 8007f04:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007f06:	2a01      	cmp	r2, #1
 8007f08:	d00a      	beq.n	8007f20 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8007f0a:	6802      	ldr	r2, [r0, #0]
 8007f0c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007f0e:	f020 0003 	bic.w	r0, r0, #3
 8007f12:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007f14:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007f16:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007f18:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007f1a:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8007f1c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007f1e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007f20:	2002      	movs	r0, #2
}
 8007f22:	4770      	bx	lr

08007f24 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007f24:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f26:	7c03      	ldrb	r3, [r0, #16]
{
 8007f28:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d069      	beq.n	8008002 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007f2e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007f30:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007f3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007f3e:	f022 0201 	bic.w	r2, r2, #1
 8007f42:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007f46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	f022 0203 	bic.w	r2, r2, #3
 8007f58:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	4302      	orrs	r2, r0
 8007f5e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	f022 0207 	bic.w	r2, r2, #7
 8007f66:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007f68:	6958      	ldr	r0, [r3, #20]
 8007f6a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007f6e:	432a      	orrs	r2, r5
 8007f70:	694d      	ldr	r5, [r1, #20]
 8007f72:	432a      	orrs	r2, r5
 8007f74:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007f76:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007f78:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	f022 020f 	bic.w	r2, r2, #15
 8007f80:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	4302      	orrs	r2, r0
 8007f86:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007f88:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007f8c:	f022 020e 	bic.w	r2, r2, #14
 8007f90:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007f94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007f98:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007f9c:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007f9e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007fa2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007fa4:	f36f 020f 	bfc	r2, #0, #16
 8007fa8:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007faa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007fac:	4302      	orrs	r2, r0
 8007fae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007fb0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007fb4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007fb8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007fbc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8007fc0:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8007fc4:	432a      	orrs	r2, r5
 8007fc6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007fc8:	432a      	orrs	r2, r5
 8007fca:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007fcc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007fce:	432a      	orrs	r2, r5
 8007fd0:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fd2:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007fd4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007fd8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007fe0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007fe6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007ff2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007ff6:	f042 0202 	orr.w	r2, r2, #2
 8007ffa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8007ffe:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008000:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008002:	2002      	movs	r0, #2
 8008004:	e7fc      	b.n	8008000 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008008 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008008:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800800a:	7c03      	ldrb	r3, [r0, #16]
{
 800800c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800800e:	2b01      	cmp	r3, #1
 8008010:	d029      	beq.n	8008066 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	4b15      	ldr	r3, [pc, #84]	@ (800806c <HAL_DSI_ConfigCommand+0x64>)
 8008016:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008018:	4023      	ands	r3, r4
 800801a:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800801c:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800801e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008022:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008024:	688d      	ldr	r5, [r1, #8]
 8008026:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008028:	68cd      	ldr	r5, [r1, #12]
 800802a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800802c:	690d      	ldr	r5, [r1, #16]
 800802e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008030:	694d      	ldr	r5, [r1, #20]
 8008032:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008034:	698d      	ldr	r5, [r1, #24]
 8008036:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008038:	69cd      	ldr	r5, [r1, #28]
 800803a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800803c:	6a0d      	ldr	r5, [r1, #32]
 800803e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008040:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008042:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008044:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008046:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008048:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800804a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800804c:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800804e:	4323      	orrs	r3, r4
 8008050:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008052:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008054:	f023 0302 	bic.w	r3, r3, #2
 8008058:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800805a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800805c:	430b      	orrs	r3, r1
 800805e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008060:	2000      	movs	r0, #0
 8008062:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008064:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008066:	2002      	movs	r0, #2
 8008068:	e7fc      	b.n	8008064 <HAL_DSI_ConfigCommand+0x5c>
 800806a:	bf00      	nop
 800806c:	fef080ff 	.word	0xfef080ff

08008070 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008070:	7c02      	ldrb	r2, [r0, #16]
{
 8008072:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008074:	2a01      	cmp	r2, #1
 8008076:	d00a      	beq.n	800808e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800807c:	f020 001f 	bic.w	r0, r0, #31
 8008080:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008082:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008084:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008086:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8008088:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800808a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800808c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800808e:	2002      	movs	r0, #2
}
 8008090:	4770      	bx	lr

08008092 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008092:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008094:	7c03      	ldrb	r3, [r0, #16]
{
 8008096:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008098:	2b01      	cmp	r3, #1
 800809a:	d034      	beq.n	8008106 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800809c:	e9d1 0300 	ldrd	r0, r3, [r1]
 80080a0:	4298      	cmp	r0, r3
 80080a2:	bf38      	it	cc
 80080a4:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80080ac:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80080b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80080b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80080b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80080bc:	4302      	orrs	r2, r0
 80080be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80080c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80080c6:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80080ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080ce:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80080d2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80080d6:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80080dc:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80080de:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080e0:	432a      	orrs	r2, r5
 80080e2:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080e4:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80080ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80080ee:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80080f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80080f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80080fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80080fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8008102:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008104:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008106:	2002      	movs	r0, #2
 8008108:	e7fc      	b.n	8008104 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800810c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800810c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800810e:	7c03      	ldrb	r3, [r0, #16]
{
 8008110:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008112:	2b01      	cmp	r3, #1
 8008114:	d05b      	beq.n	80081ce <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008116:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008118:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800811a:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800811c:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800811e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008122:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800812a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800812c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800812e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008130:	b292      	uxth	r2, r2
 8008132:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008134:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008136:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800813a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800813c:	4a25      	ldr	r2, [pc, #148]	@ (80081d4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800813e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008140:	4010      	ands	r0, r2
 8008142:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008144:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008146:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008148:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800814a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800814c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800814e:	4010      	ands	r0, r2
 8008150:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008152:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008154:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008156:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008158:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800815a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800815e:	4010      	ands	r0, r2
 8008160:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008164:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008168:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800816a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800816c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8008170:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008174:	4010      	ands	r0, r2
 8008176:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800817a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800817e:	4328      	orrs	r0, r5
 8008180:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8008184:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008188:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800818c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8008190:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008194:	698d      	ldr	r5, [r1, #24]
 8008196:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008198:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800819a:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800819c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80081a0:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80081a4:	4010      	ands	r0, r2
 80081a6:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80081aa:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80081ae:	4328      	orrs	r0, r5
 80081b0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80081b4:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80081b8:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081ba:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80081bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80081c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80081c4:	430a      	orrs	r2, r1
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80081ca:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80081cc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80081ce:	2002      	movs	r0, #2
 80081d0:	e7fc      	b.n	80081cc <HAL_DSI_ConfigHostTimeouts+0xc0>
 80081d2:	bf00      	nop
 80081d4:	ffff0000 	.word	0xffff0000

080081d8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80081d8:	7c03      	ldrb	r3, [r0, #16]
{
 80081da:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d01c      	beq.n	800821a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80081e0:	6802      	ldr	r2, [r0, #0]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	6851      	ldr	r1, [r2, #4]
 80081e8:	f041 0101 	orr.w	r1, r1, #1
 80081ec:	6051      	str	r1, [r2, #4]
 80081ee:	6851      	ldr	r1, [r2, #4]
 80081f0:	f001 0101 	and.w	r1, r1, #1
 80081f4:	9100      	str	r1, [sp, #0]
 80081f6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80081fe:	f041 0108 	orr.w	r1, r1, #8
 8008202:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8008206:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800820a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800820c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800820e:	f002 0208 	and.w	r2, r2, #8
 8008212:	9201      	str	r2, [sp, #4]
 8008214:	9a01      	ldr	r2, [sp, #4]
}
 8008216:	b002      	add	sp, #8
 8008218:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800821a:	2002      	movs	r0, #2
 800821c:	e7fb      	b.n	8008216 <HAL_DSI_Start+0x3e>

0800821e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800821e:	7c02      	ldrb	r2, [r0, #16]
{
 8008220:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008222:	2a01      	cmp	r2, #1
 8008224:	d009      	beq.n	800823a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008226:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008228:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800822a:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800822e:	f042 0204 	orr.w	r2, r2, #4
 8008232:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8008236:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008238:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800823a:	2002      	movs	r0, #2
}
 800823c:	4770      	bx	lr

0800823e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800823e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008240:	7c05      	ldrb	r5, [r0, #16]
{
 8008242:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008244:	2d01      	cmp	r5, #1
 8008246:	d009      	beq.n	800825c <HAL_DSI_ShortWrite+0x1e>
 8008248:	2501      	movs	r5, #1
 800824a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800824c:	9d06      	ldr	r5, [sp, #24]
 800824e:	9500      	str	r5, [sp, #0]
 8008250:	f7ff fc6d 	bl	8007b2e <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008254:	2300      	movs	r3, #0
 8008256:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008258:	b003      	add	sp, #12
 800825a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800825c:	2002      	movs	r0, #2
 800825e:	e7fb      	b.n	8008258 <HAL_DSI_ShortWrite+0x1a>

08008260 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8008260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008266:	7c03      	ldrb	r3, [r0, #16]
{
 8008268:	4606      	mov	r6, r0
 800826a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800826c:	2b01      	cmp	r3, #1
{
 800826e:	4615      	mov	r5, r2
 8008270:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8008274:	d052      	beq.n	800831c <HAL_DSI_LongWrite+0xbc>
 8008276:	2301      	movs	r3, #1
 8008278:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800827a:	f7fe f85d 	bl	8006338 <HAL_GetTick>
 800827e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008280:	6832      	ldr	r2, [r6, #0]
 8008282:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008284:	f013 0a01 	ands.w	sl, r3, #1
 8008288:	d019      	beq.n	80082be <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800828a:	2c03      	cmp	r4, #3
 800828c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800828e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8008292:	bf28      	it	cs
 8008294:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8008296:	4283      	cmp	r3, r0
 8008298:	d11d      	bne.n	80082d6 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800829a:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800829c:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800829e:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80082a2:	bb10      	cbnz	r0, 80082ea <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80082a4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80082a6:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80082aa:	0223      	lsls	r3, r4, #8
 80082ac:	0224      	lsls	r4, r4, #8
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80082b4:	431d      	orrs	r5, r3
 80082b6:	4325      	orrs	r5, r4
 80082b8:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80082ba:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80082bc:	e009      	b.n	80082d2 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80082be:	f7fe f83b 	bl	8006338 <HAL_GetTick>
 80082c2:	eba0 000b 	sub.w	r0, r0, fp
 80082c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80082ca:	d9d9      	bls.n	8008280 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80082cc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80082ce:	f886 a010 	strb.w	sl, [r6, #16]
}
 80082d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80082d6:	f818 1003 	ldrb.w	r1, [r8, r3]
 80082da:	3301      	adds	r3, #1
 80082dc:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80082e0:	fa01 f10c 	lsl.w	r1, r1, ip
 80082e4:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80082e8:	e7d5      	b.n	8008296 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082ea:	2804      	cmp	r0, #4
    fifoword = 0U;
 80082ec:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082f0:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 80082f2:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082f4:	bf28      	it	cs
 80082f6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80082fa:	f813 8001 	ldrb.w	r8, [r3, r1]
 80082fe:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8008302:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008304:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8008308:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800830a:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800830e:	d1f4      	bne.n	80082fa <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8008310:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8008314:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8008316:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800831a:	e7c2      	b.n	80082a2 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800831c:	2002      	movs	r0, #2
 800831e:	e7d8      	b.n	80082d2 <HAL_DSI_LongWrite+0x72>

08008320 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008324:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008326:	7c03      	ldrb	r3, [r0, #16]
{
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800832c:	2b01      	cmp	r3, #1
{
 800832e:	4617      	mov	r7, r2
 8008330:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008334:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8008338:	d06f      	beq.n	800841a <HAL_DSI_Read+0xfa>
 800833a:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800833c:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800833e:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8008340:	d90d      	bls.n	800835e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8008342:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008346:	2237      	movs	r2, #55	@ 0x37
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	b2f3      	uxtb	r3, r6
 800834c:	f7ff fbef 	bl	8007b2e <DSI_ShortWrite.constprop.0>
 8008350:	b128      	cbz	r0, 800835e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008352:	2300      	movs	r3, #0

      return HAL_ERROR;
 8008354:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8008356:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8008358:	b003      	add	sp, #12
 800835a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800835e:	f1b9 0f06 	cmp.w	r9, #6
 8008362:	d10f      	bne.n	8008384 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8008366:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800836e:	f043 0306 	orr.w	r3, r3, #6
 8008372:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8008374:	f7fd ffe0 	bl	8006338 <HAL_GetTick>
 8008378:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800837a:	2e00      	cmp	r6, #0
 800837c:	dc27      	bgt.n	80083ce <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800837e:	2000      	movs	r0, #0
 8008380:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8008382:	e7e9      	b.n	8008358 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8008384:	f1b9 0f04 	cmp.w	r9, #4
 8008388:	d105      	bne.n	8008396 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800838a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800838c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800838e:	f044 0404 	orr.w	r4, r4, #4
 8008392:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008394:	e7ee      	b.n	8008374 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8008396:	f1b9 0f14 	cmp.w	r9, #20
 800839a:	d108      	bne.n	80083ae <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800839c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083a0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80083a2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083a4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80083a8:	f044 0414 	orr.w	r4, r4, #20
 80083ac:	e7f1      	b.n	8008392 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80083ae:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80083b2:	d1ce      	bne.n	8008352 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80083b4:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083b8:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80083ba:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80083c0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083c4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80083c8:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80083cc:	e7e1      	b.n	8008392 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80083ce:	682a      	ldr	r2, [r5, #0]
 80083d0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80083d2:	f013 0310 	ands.w	r3, r3, #16
 80083d6:	d10d      	bne.n	80083f4 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80083d8:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80083da:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80083dc:	4632      	mov	r2, r6
 80083de:	bf28      	it	cs
 80083e0:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80083e2:	00d9      	lsls	r1, r3, #3
 80083e4:	fa20 f101 	lsr.w	r1, r0, r1
 80083e8:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80083ea:	3301      	adds	r3, #1
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d1f8      	bne.n	80083e2 <HAL_DSI_Read+0xc2>
 80083f0:	4417      	add	r7, r2
 80083f2:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80083f4:	f7fd ffa0 	bl	8006338 <HAL_GetTick>
 80083f8:	1b00      	subs	r0, r0, r4
 80083fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80083fe:	d903      	bls.n	8008408 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8008400:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008402:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008404:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8008406:	e7a7      	b.n	8008358 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800840c:	0652      	lsls	r2, r2, #25
 800840e:	d4b4      	bmi.n	800837a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8008410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008414:	069b      	lsls	r3, r3, #26
 8008416:	d49c      	bmi.n	8008352 <HAL_DSI_Read+0x32>
 8008418:	e7af      	b.n	800837a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800841a:	2002      	movs	r0, #2
 800841c:	e79c      	b.n	8008358 <HAL_DSI_Read+0x38>

0800841e <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800841e:	7c02      	ldrb	r2, [r0, #16]
{
 8008420:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008422:	2a01      	cmp	r2, #1
 8008424:	d00f      	beq.n	8008446 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008426:	6802      	ldr	r2, [r0, #0]
 8008428:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800842c:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8008430:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008434:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008438:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800843c:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800843e:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8008442:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008444:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008446:	2002      	movs	r0, #2
}
 8008448:	4770      	bx	lr
	...

0800844c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800844c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008450:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008452:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8008618 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008456:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800845a:	680a      	ldr	r2, [r1, #0]
 800845c:	fa32 f503 	lsrs.w	r5, r2, r3
 8008460:	d102      	bne.n	8008468 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8008462:	b003      	add	sp, #12
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008468:	2501      	movs	r5, #1
 800846a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800846e:	ea18 0202 	ands.w	r2, r8, r2
 8008472:	f000 80bb 	beq.w	80085ec <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008476:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008478:	2703      	movs	r7, #3
 800847a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800847e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008482:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008486:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008488:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800848c:	2f01      	cmp	r7, #1
 800848e:	d834      	bhi.n	80084fa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8008490:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008492:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008496:	68cf      	ldr	r7, [r1, #12]
 8008498:	fa07 f70e 	lsl.w	r7, r7, lr
 800849c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80084a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80084a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084a4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084a8:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80084ac:	409f      	lsls	r7, r3
 80084ae:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80084b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80084b4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084b6:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084b8:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084bc:	688f      	ldr	r7, [r1, #8]
 80084be:	fa07 f70e 	lsl.w	r7, r7, lr
 80084c2:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80084c6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084c8:	d119      	bne.n	80084fe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80084ca:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084ce:	f003 0a07 	and.w	sl, r3, #7
 80084d2:	f04f 0b0f 	mov.w	fp, #15
 80084d6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80084da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80084de:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084e2:	fa0b fb0a 	lsl.w	fp, fp, sl
 80084e6:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084ea:	690f      	ldr	r7, [r1, #16]
 80084ec:	fa07 f70a 	lsl.w	r7, r7, sl
 80084f0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80084f4:	f8c8 7020 	str.w	r7, [r8, #32]
 80084f8:	e001      	b.n	80084fe <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084fa:	2d03      	cmp	r5, #3
 80084fc:	d1da      	bne.n	80084b4 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80084fe:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008500:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008504:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008508:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800850c:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008510:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008512:	d06b      	beq.n	80085ec <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008514:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008518:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800851c:	f003 0c03 	and.w	ip, r3, #3
 8008520:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008524:	f045 0502 	orr.w	r5, r5, #2
 8008528:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800852c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008530:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8008534:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008538:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800853c:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008540:	f005 0502 	and.w	r5, r5, #2
 8008544:	9501      	str	r5, [sp, #4]
 8008546:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008548:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800854a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800854e:	4d31      	ldr	r5, [pc, #196]	@ (8008614 <HAL_GPIO_Init+0x1c8>)
 8008550:	42a8      	cmp	r0, r5
 8008552:	d04d      	beq.n	80085f0 <HAL_GPIO_Init+0x1a4>
 8008554:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008558:	42a8      	cmp	r0, r5
 800855a:	d04b      	beq.n	80085f4 <HAL_GPIO_Init+0x1a8>
 800855c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008560:	42a8      	cmp	r0, r5
 8008562:	d049      	beq.n	80085f8 <HAL_GPIO_Init+0x1ac>
 8008564:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008568:	42a8      	cmp	r0, r5
 800856a:	d047      	beq.n	80085fc <HAL_GPIO_Init+0x1b0>
 800856c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008570:	42a8      	cmp	r0, r5
 8008572:	d045      	beq.n	8008600 <HAL_GPIO_Init+0x1b4>
 8008574:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008578:	42a8      	cmp	r0, r5
 800857a:	d043      	beq.n	8008604 <HAL_GPIO_Init+0x1b8>
 800857c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008580:	42a8      	cmp	r0, r5
 8008582:	d041      	beq.n	8008608 <HAL_GPIO_Init+0x1bc>
 8008584:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008588:	42a8      	cmp	r0, r5
 800858a:	d03f      	beq.n	800860c <HAL_GPIO_Init+0x1c0>
 800858c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008590:	42a8      	cmp	r0, r5
 8008592:	d03d      	beq.n	8008610 <HAL_GPIO_Init+0x1c4>
 8008594:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008598:	42a8      	cmp	r0, r5
 800859a:	bf14      	ite	ne
 800859c:	250a      	movne	r5, #10
 800859e:	2509      	moveq	r5, #9
 80085a0:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085a4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085a8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085ac:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80085ae:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80085b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80085b4:	bf0c      	ite	eq
 80085b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80085b8:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085ba:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80085be:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80085c0:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80085c2:	bf0c      	ite	eq
 80085c4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80085c6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085c8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80085cc:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80085ce:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80085d2:	bf0c      	ite	eq
 80085d4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80085d6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085d8:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80085da:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80085de:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80085e2:	bf54      	ite	pl
 80085e4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80085e6:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80085e8:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80085ec:	3301      	adds	r3, #1
 80085ee:	e734      	b.n	800845a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085f0:	2500      	movs	r5, #0
 80085f2:	e7d5      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 80085f4:	2501      	movs	r5, #1
 80085f6:	e7d3      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 80085f8:	2502      	movs	r5, #2
 80085fa:	e7d1      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 80085fc:	2503      	movs	r5, #3
 80085fe:	e7cf      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 8008600:	2504      	movs	r5, #4
 8008602:	e7cd      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 8008604:	2505      	movs	r5, #5
 8008606:	e7cb      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 8008608:	2506      	movs	r5, #6
 800860a:	e7c9      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 800860c:	2507      	movs	r5, #7
 800860e:	e7c7      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 8008610:	2508      	movs	r5, #8
 8008612:	e7c5      	b.n	80085a0 <HAL_GPIO_Init+0x154>
 8008614:	58020000 	.word	0x58020000
 8008618:	58024400 	.word	0x58024400

0800861c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008620:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008622:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008626:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800862a:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800862e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8008632:	fa31 f302 	lsrs.w	r3, r1, r2
 8008636:	d101      	bne.n	800863c <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800863c:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8008640:	ea1c 0601 	ands.w	r6, ip, r1
 8008644:	d070      	beq.n	8008728 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008646:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800864a:	f002 0703 	and.w	r7, r2, #3
 800864e:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8008652:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008654:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008658:	fa08 f907 	lsl.w	r9, r8, r7
 800865c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008660:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008664:	4b3a      	ldr	r3, [pc, #232]	@ (8008750 <HAL_GPIO_DeInit+0x134>)
 8008666:	4298      	cmp	r0, r3
 8008668:	d060      	beq.n	800872c <HAL_GPIO_DeInit+0x110>
 800866a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800866e:	4298      	cmp	r0, r3
 8008670:	d05e      	beq.n	8008730 <HAL_GPIO_DeInit+0x114>
 8008672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008676:	4298      	cmp	r0, r3
 8008678:	d05c      	beq.n	8008734 <HAL_GPIO_DeInit+0x118>
 800867a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800867e:	4298      	cmp	r0, r3
 8008680:	d05a      	beq.n	8008738 <HAL_GPIO_DeInit+0x11c>
 8008682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008686:	4298      	cmp	r0, r3
 8008688:	d058      	beq.n	800873c <HAL_GPIO_DeInit+0x120>
 800868a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800868e:	4298      	cmp	r0, r3
 8008690:	d056      	beq.n	8008740 <HAL_GPIO_DeInit+0x124>
 8008692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008696:	4298      	cmp	r0, r3
 8008698:	d054      	beq.n	8008744 <HAL_GPIO_DeInit+0x128>
 800869a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800869e:	4298      	cmp	r0, r3
 80086a0:	d052      	beq.n	8008748 <HAL_GPIO_DeInit+0x12c>
 80086a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086a6:	4298      	cmp	r0, r3
 80086a8:	d050      	beq.n	800874c <HAL_GPIO_DeInit+0x130>
 80086aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ae:	4298      	cmp	r0, r3
 80086b0:	bf14      	ite	ne
 80086b2:	230a      	movne	r3, #10
 80086b4:	2309      	moveq	r3, #9
 80086b6:	40bb      	lsls	r3, r7
 80086b8:	4573      	cmp	r3, lr
 80086ba:	d117      	bne.n	80086ec <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80086bc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80086c0:	ea23 0306 	bic.w	r3, r3, r6
 80086c4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80086c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80086cc:	ea23 0306 	bic.w	r3, r3, r6
 80086d0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	ea23 0306 	bic.w	r3, r3, r6
 80086da:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	ea23 0306 	bic.w	r3, r3, r6
 80086e2:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80086e4:	68ab      	ldr	r3, [r5, #8]
 80086e6:	ea23 0309 	bic.w	r3, r3, r9
 80086ea:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80086ec:	0053      	lsls	r3, r2, #1
 80086ee:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80086f0:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80086f2:	fa0b f303 	lsl.w	r3, fp, r3
 80086f6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80086fa:	431d      	orrs	r5, r3
 80086fc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80086fe:	f002 0507 	and.w	r5, r2, #7
 8008702:	6a37      	ldr	r7, [r6, #32]
 8008704:	00ad      	lsls	r5, r5, #2
 8008706:	fa08 f505 	lsl.w	r5, r8, r5
 800870a:	ea27 0705 	bic.w	r7, r7, r5
 800870e:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008710:	68c5      	ldr	r5, [r0, #12]
 8008712:	ea25 0503 	bic.w	r5, r5, r3
 8008716:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008718:	6845      	ldr	r5, [r0, #4]
 800871a:	ea25 050c 	bic.w	r5, r5, ip
 800871e:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008720:	6885      	ldr	r5, [r0, #8]
 8008722:	ea25 0303 	bic.w	r3, r5, r3
 8008726:	6083      	str	r3, [r0, #8]
    position++;
 8008728:	3201      	adds	r2, #1
 800872a:	e782      	b.n	8008632 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800872c:	2300      	movs	r3, #0
 800872e:	e7c2      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008730:	2301      	movs	r3, #1
 8008732:	e7c0      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008734:	2302      	movs	r3, #2
 8008736:	e7be      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008738:	2303      	movs	r3, #3
 800873a:	e7bc      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 800873c:	2304      	movs	r3, #4
 800873e:	e7ba      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008740:	2305      	movs	r3, #5
 8008742:	e7b8      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008744:	2306      	movs	r3, #6
 8008746:	e7b6      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008748:	2307      	movs	r3, #7
 800874a:	e7b4      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 800874c:	2308      	movs	r3, #8
 800874e:	e7b2      	b.n	80086b6 <HAL_GPIO_DeInit+0x9a>
 8008750:	58020000 	.word	0x58020000

08008754 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008754:	6903      	ldr	r3, [r0, #16]
 8008756:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008758:	bf14      	ite	ne
 800875a:	2001      	movne	r0, #1
 800875c:	2000      	moveq	r0, #0
 800875e:	4770      	bx	lr

08008760 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008760:	b10a      	cbz	r2, 8008766 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008762:	6181      	str	r1, [r0, #24]
  }
}
 8008764:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008766:	0409      	lsls	r1, r1, #16
 8008768:	e7fb      	b.n	8008762 <HAL_GPIO_WritePin+0x2>

0800876a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800876a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800876c:	ea01 0203 	and.w	r2, r1, r3
 8008770:	ea21 0103 	bic.w	r1, r1, r3
 8008774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008778:	6181      	str	r1, [r0, #24]
}
 800877a:	4770      	bx	lr

0800877c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <HAL_HSEM_FastTake+0x14>)
 800877e:	3020      	adds	r0, #32
 8008780:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <HAL_HSEM_FastTake+0x18>)
 8008786:	1ac0      	subs	r0, r0, r3
 8008788:	bf18      	it	ne
 800878a:	2001      	movne	r0, #1
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	58026400 	.word	0x58026400
 8008794:	80000300 	.word	0x80000300

08008798 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008798:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800879c:	4b01      	ldr	r3, [pc, #4]	@ (80087a4 <HAL_HSEM_Release+0xc>)
 800879e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80087a2:	4770      	bx	lr
 80087a4:	58026400 	.word	0x58026400

080087a8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80087a8:	6803      	ldr	r3, [r0, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	0791      	lsls	r1, r2, #30
 80087ae:	d501      	bpl.n	80087b4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80087b0:	2200      	movs	r2, #0
 80087b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	07d2      	lsls	r2, r2, #31
 80087b8:	d403      	bmi.n	80087c2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80087ba:	699a      	ldr	r2, [r3, #24]
 80087bc:	f042 0201 	orr.w	r2, r2, #1
 80087c0:	619a      	str	r2, [r3, #24]
  }
}
 80087c2:	4770      	bx	lr

080087c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087c4:	b530      	push	{r4, r5, lr}
 80087c6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087c8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087cc:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087ce:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80087d0:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80087d6:	4a05      	ldr	r2, [pc, #20]	@ (80087ec <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80087da:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80087e2:	ea20 0002 	bic.w	r0, r0, r2
 80087e6:	4303      	orrs	r3, r0
 80087e8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087ea:	bd30      	pop	{r4, r5, pc}
 80087ec:	03ff63ff 	.word	0x03ff63ff

080087f0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80087f0:	6803      	ldr	r3, [r0, #0]
{
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80087f6:	699c      	ldr	r4, [r3, #24]
{
 80087f8:	4605      	mov	r5, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80087fe:	f014 0410 	ands.w	r4, r4, #16
 8008802:	d06f      	beq.n	80088e4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008804:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008806:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008808:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800880a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	699a      	ldr	r2, [r3, #24]
 8008810:	0690      	lsls	r0, r2, #26
 8008812:	d461      	bmi.n	80088d8 <I2C_IsErrorOccurred+0xe8>
 8008814:	f1b8 0f00 	cmp.w	r8, #0
 8008818:	d035      	beq.n	8008886 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800881a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800881e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008820:	682e      	ldr	r6, [r5, #0]
 8008822:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008824:	05d9      	lsls	r1, r3, #23
 8008826:	d505      	bpl.n	8008834 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008828:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800882c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008830:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008832:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008834:	055a      	lsls	r2, r3, #21
 8008836:	d505      	bpl.n	8008844 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800883c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008840:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008842:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008844:	059b      	lsls	r3, r3, #22
 8008846:	d54f      	bpl.n	80088e8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008848:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800884c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008850:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8008852:	4628      	mov	r0, r5
 8008854:	f7ff ffa8 	bl	80087a8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008858:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800885a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800885c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8008860:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8008864:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800886e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008870:	4323      	orrs	r3, r4
 8008872:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008874:	2320      	movs	r3, #32
 8008876:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800887a:	2300      	movs	r3, #0
 800887c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8008880:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8008884:	e032      	b.n	80088ec <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8008886:	1c7a      	adds	r2, r7, #1
 8008888:	d0c1      	beq.n	800880e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800888a:	f7fd fd55 	bl	8006338 <HAL_GetTick>
 800888e:	1b80      	subs	r0, r0, r6
 8008890:	42b8      	cmp	r0, r7
 8008892:	d801      	bhi.n	8008898 <I2C_IsErrorOccurred+0xa8>
 8008894:	2f00      	cmp	r7, #0
 8008896:	d1b9      	bne.n	800880c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800889c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088a0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80088a2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088a4:	0400      	lsls	r0, r0, #16
 80088a6:	d50a      	bpl.n	80088be <I2C_IsErrorOccurred+0xce>
 80088a8:	0449      	lsls	r1, r1, #17
 80088aa:	d408      	bmi.n	80088be <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80088ac:	2a20      	cmp	r2, #32
 80088ae:	d006      	beq.n	80088be <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088b6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80088b8:	f7fd fd3e 	bl	8006338 <HAL_GetTick>
 80088bc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	069b      	lsls	r3, r3, #26
 80088c4:	d4a2      	bmi.n	800880c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80088c6:	f7fd fd37 	bl	8006338 <HAL_GetTick>
 80088ca:	1b80      	subs	r0, r0, r6
 80088cc:	2819      	cmp	r0, #25
 80088ce:	d9f6      	bls.n	80088be <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80088d0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80088d2:	f04f 0801 	mov.w	r8, #1
 80088d6:	e799      	b.n	800880c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d19d      	bne.n	800881a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088de:	2220      	movs	r2, #32
 80088e0:	61da      	str	r2, [r3, #28]
 80088e2:	e79a      	b.n	800881a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80088e4:	4620      	mov	r0, r4
 80088e6:	e79b      	b.n	8008820 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1b2      	bne.n	8008852 <I2C_IsErrorOccurred+0x62>
}
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	460d      	mov	r5, r1
 80088f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	079b      	lsls	r3, r3, #30
 80088fe:	d501      	bpl.n	8008904 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008900:	2000      	movs	r0, #0
 8008902:	e01f      	b.n	8008944 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008904:	4632      	mov	r2, r6
 8008906:	4629      	mov	r1, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f7ff ff71 	bl	80087f0 <I2C_IsErrorOccurred>
 800890e:	b9c0      	cbnz	r0, 8008942 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008910:	1c6a      	adds	r2, r5, #1
 8008912:	d0f1      	beq.n	80088f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008914:	f7fd fd10 	bl	8006338 <HAL_GetTick>
 8008918:	1b80      	subs	r0, r0, r6
 800891a:	42a8      	cmp	r0, r5
 800891c:	d801      	bhi.n	8008922 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800891e:	2d00      	cmp	r5, #0
 8008920:	d1ea      	bne.n	80088f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f013 0302 	ands.w	r3, r3, #2
 800892a:	d1e5      	bne.n	80088f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800892c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800892e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008932:	f042 0220 	orr.w	r2, r2, #32
 8008936:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008938:	2220      	movs	r2, #32
 800893a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800893e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008942:	2001      	movs	r0, #1
}
 8008944:	bd70      	pop	{r4, r5, r6, pc}

08008946 <I2C_WaitOnFlagUntilTimeout>:
{
 8008946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800894e:	4604      	mov	r4, r0
 8008950:	460f      	mov	r7, r1
 8008952:	4616      	mov	r6, r2
 8008954:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	ea37 0303 	bics.w	r3, r7, r3
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	42b3      	cmp	r3, r6
 8008966:	d001      	beq.n	800896c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008968:	2000      	movs	r0, #0
 800896a:	e025      	b.n	80089b8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800896c:	4642      	mov	r2, r8
 800896e:	4629      	mov	r1, r5
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ff3d 	bl	80087f0 <I2C_IsErrorOccurred>
 8008976:	b9f0      	cbnz	r0, 80089b6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008978:	1c6b      	adds	r3, r5, #1
 800897a:	d0ec      	beq.n	8008956 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897c:	f7fd fcdc 	bl	8006338 <HAL_GetTick>
 8008980:	eba0 0008 	sub.w	r0, r0, r8
 8008984:	42a8      	cmp	r0, r5
 8008986:	d801      	bhi.n	800898c <I2C_WaitOnFlagUntilTimeout+0x46>
 8008988:	2d00      	cmp	r5, #0
 800898a:	d1e4      	bne.n	8008956 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	ea37 0303 	bics.w	r3, r7, r3
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	42b3      	cmp	r3, r6
 800899c:	d1db      	bne.n	8008956 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800899e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089a6:	2320      	movs	r3, #32
 80089a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80089b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80089b6:	2001      	movs	r0, #1
}
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	069b      	lsls	r3, r3, #26
 80089ca:	d501      	bpl.n	80089d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80089cc:	2000      	movs	r0, #0
 80089ce:	e01d      	b.n	8008a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089d0:	4632      	mov	r2, r6
 80089d2:	4629      	mov	r1, r5
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7ff ff0b 	bl	80087f0 <I2C_IsErrorOccurred>
 80089da:	b9b0      	cbnz	r0, 8008a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089dc:	f7fd fcac 	bl	8006338 <HAL_GetTick>
 80089e0:	1b80      	subs	r0, r0, r6
 80089e2:	42a8      	cmp	r0, r5
 80089e4:	d801      	bhi.n	80089ea <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	d1ec      	bne.n	80089c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f013 0320 	ands.w	r3, r3, #32
 80089f2:	d1e7      	bne.n	80089c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80089f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089fa:	f042 0220 	orr.w	r2, r2, #32
 80089fe:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a00:	2220      	movs	r2, #32
 8008a02:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008a0a:	2001      	movs	r0, #1
}
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}

08008a0e <HAL_I2C_MspInit>:
}
 8008a0e:	4770      	bx	lr

08008a10 <HAL_I2C_Init>:
{
 8008a10:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008a12:	4604      	mov	r4, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d04e      	beq.n	8008ab6 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a18:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008a1c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a20:	b91b      	cbnz	r3, 8008a2a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008a22:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008a26:	f7ff fff2 	bl	8008a0e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a2a:	2324      	movs	r3, #36	@ 0x24
 8008a2c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	f022 0201 	bic.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008a40:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a48:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a4a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a4e:	2901      	cmp	r1, #1
 8008a50:	d106      	bne.n	8008a60 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a56:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a5e:	e007      	b.n	8008a70 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a60:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a64:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a66:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a68:	d1f6      	bne.n	8008a58 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a70:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a72:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a7e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a86:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a88:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008a8c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008a8e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a94:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a96:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	f042 0201 	orr.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008aa6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa8:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008aaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aae:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008ab4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	e7fc      	b.n	8008ab4 <HAL_I2C_Init+0xa4>

08008aba <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8008aba:	4770      	bx	lr

08008abc <HAL_I2C_DeInit>:
{
 8008abc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b198      	cbz	r0, 8008aea <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008ac2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ac4:	2324      	movs	r3, #36	@ 0x24
 8008ac6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008ad2:	f7ff fff2 	bl	8008aba <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008ada:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008ade:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ae2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008ae8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008aea:	2001      	movs	r0, #1
 8008aec:	e7fc      	b.n	8008ae8 <HAL_I2C_DeInit+0x2c>
	...

08008af0 <HAL_I2C_Mem_Write>:
{
 8008af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008af6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008afa:	4604      	mov	r4, r0
 8008afc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008afe:	2b20      	cmp	r3, #32
{
 8008b00:	4616      	mov	r6, r2
 8008b02:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008b06:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0a:	f040 80c6 	bne.w	8008c9a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8008b0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b10:	b113      	cbz	r3, 8008b18 <HAL_I2C_Mem_Write+0x28>
 8008b12:	f1ba 0f00 	cmp.w	sl, #0
 8008b16:	d106      	bne.n	8008b26 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b1c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008b1e:	2001      	movs	r0, #1
}
 8008b20:	b003      	add	sp, #12
 8008b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008b26:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	f000 80b5 	beq.w	8008c9a <HAL_I2C_Mem_Write+0x1aa>
 8008b30:	f04f 0b01 	mov.w	fp, #1
 8008b34:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008b38:	f7fd fbfe 	bl	8006338 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b3c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008b3e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b40:	9000      	str	r0, [sp, #0]
 8008b42:	465a      	mov	r2, fp
 8008b44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff fefc 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d1e5      	bne.n	8008b1e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b52:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008b54:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b56:	fa5f f289 	uxtb.w	r2, r9
 8008b5a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b60:	2340      	movs	r3, #64	@ 0x40
 8008b62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b68:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b6a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008b6c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ca0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008b70:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b7a:	f7ff fe23 	bl	80087c4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4641      	mov	r1, r8
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7ff feb4 	bl	80088f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b88:	bb18      	cbnz	r0, 8008bd2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b8a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b8e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b90:	d115      	bne.n	8008bbe <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b92:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b94:	2200      	movs	r2, #0
 8008b96:	2180      	movs	r1, #128	@ 0x80
 8008b98:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b9a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	9500      	str	r5, [sp, #0]
 8008ba0:	f7ff fed1 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008ba4:	b9a8      	cbnz	r0, 8008bd2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ba6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2bff      	cmp	r3, #255	@ 0xff
 8008bac:	d815      	bhi.n	8008bda <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008bae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	9000      	str	r0, [sp, #0]
 8008bbc:	e012      	b.n	8008be4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bbe:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	f7ff fe92 	bl	80088f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bcc:	b908      	cbnz	r0, 8008bd2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	e7df      	b.n	8008b92 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008bd8:	e7a1      	b.n	8008b1e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bda:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008be0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008be2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008be4:	4639      	mov	r1, r7
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff fdec 	bl	80087c4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bec:	462a      	mov	r2, r5
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7ff fe7d 	bl	80088f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d191      	bne.n	8008b1e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008c02:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008c04:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008c06:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c08:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008c0a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008c0c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8008c0e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008c10:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008c12:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c16:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	b1b3      	cbz	r3, 8008c4a <HAL_I2C_Mem_Write+0x15a>
 8008c1c:	b9aa      	cbnz	r2, 8008c4a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c1e:	4643      	mov	r3, r8
 8008c20:	2180      	movs	r1, #128	@ 0x80
 8008c22:	4620      	mov	r0, r4
 8008c24:	9500      	str	r5, [sp, #0]
 8008c26:	f7ff fe8e 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f47f af77 	bne.w	8008b1e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2bff      	cmp	r3, #255	@ 0xff
 8008c36:	d928      	bls.n	8008c8a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c38:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c3e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c40:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c42:	4639      	mov	r1, r7
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7ff fdbd 	bl	80087c4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008c4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1cc      	bne.n	8008bec <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c52:	462a      	mov	r2, r5
 8008c54:	4641      	mov	r1, r8
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff feb0 	bl	80089bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f47f af5e 	bne.w	8008b1e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	2120      	movs	r1, #32
 8008c66:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008c6e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008c72:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008c76:	f022 0201 	bic.w	r2, r2, #1
 8008c7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c7c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008c80:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c84:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008c88:	e74a      	b.n	8008b20 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008c8a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008c90:	b292      	uxth	r2, r2
 8008c92:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c94:	b2d2      	uxtb	r2, r2
 8008c96:	9000      	str	r0, [sp, #0]
 8008c98:	e7d3      	b.n	8008c42 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008c9a:	2002      	movs	r0, #2
 8008c9c:	e740      	b.n	8008b20 <HAL_I2C_Mem_Write+0x30>
 8008c9e:	bf00      	nop
 8008ca0:	80002000 	.word	0x80002000

08008ca4 <HAL_I2C_Mem_Read>:
{
 8008ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008caa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cb2:	2b20      	cmp	r3, #32
{
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008cba:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cbe:	f040 80c9 	bne.w	8008e54 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8008cc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cc4:	b113      	cbz	r3, 8008ccc <HAL_I2C_Mem_Read+0x28>
 8008cc6:	f1ba 0f00 	cmp.w	sl, #0
 8008cca:	d106      	bne.n	8008cda <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cd0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008cd2:	2001      	movs	r0, #1
}
 8008cd4:	b003      	add	sp, #12
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008cda:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	f000 80b8 	beq.w	8008e54 <HAL_I2C_Mem_Read+0x1b0>
 8008ce4:	f04f 0b01 	mov.w	fp, #1
 8008ce8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008cec:	f7fd fb24 	bl	8006338 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cf0:	2319      	movs	r3, #25
 8008cf2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008cf4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cf6:	465a      	mov	r2, fp
 8008cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f7ff fe22 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d1e4      	bne.n	8008cd2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d08:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8008d0a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d0c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d0e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d12:	2240      	movs	r2, #64	@ 0x40
 8008d14:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008d18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d1a:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d1c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008d1e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d20:	4a4d      	ldr	r2, [pc, #308]	@ (8008e58 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008d22:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d26:	9200      	str	r2, [sp, #0]
 8008d28:	fa5f f289 	uxtb.w	r2, r9
 8008d2c:	f7ff fd4a 	bl	80087c4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d30:	462a      	mov	r2, r5
 8008d32:	4641      	mov	r1, r8
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff fddb 	bl	80088f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d3a:	bb20      	cbnz	r0, 8008d86 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d3c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d40:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d42:	d116      	bne.n	8008d72 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d44:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d46:	2200      	movs	r2, #0
 8008d48:	2140      	movs	r1, #64	@ 0x40
 8008d4a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d4c:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d4e:	4643      	mov	r3, r8
 8008d50:	9500      	str	r5, [sp, #0]
 8008d52:	f7ff fdf8 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008d56:	b9b0      	cbnz	r0, 8008d86 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	2bff      	cmp	r3, #255	@ 0xff
 8008d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e5c <HAL_I2C_Mem_Read+0x1b8>)
 8008d60:	d815      	bhi.n	8008d8e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008d62:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008d64:	b292      	uxth	r2, r2
 8008d66:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d70:	e012      	b.n	8008d98 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d72:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d74:	4641      	mov	r1, r8
 8008d76:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d78:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	f7ff fdb8 	bl	80088f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d80:	b908      	cbnz	r0, 8008d86 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	e7de      	b.n	8008d44 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8008d86:	2300      	movs	r3, #0
 8008d88:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008d8c:	e7a1      	b.n	8008cd2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d8e:	22ff      	movs	r2, #255	@ 0xff
 8008d90:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d98:	4639      	mov	r1, r7
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7ff fd12 	bl	80087c4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008da0:	4643      	mov	r3, r8
 8008da2:	2200      	movs	r2, #0
 8008da4:	2104      	movs	r1, #4
 8008da6:	4620      	mov	r0, r4
 8008da8:	9500      	str	r5, [sp, #0]
 8008daa:	f7ff fdcc 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d18f      	bne.n	8008cd2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008db6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008db8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008dba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008dbc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008dbe:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008dc0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008dc2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008dc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008dc6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008dc8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008dca:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dd0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	b1b3      	cbz	r3, 8008e04 <HAL_I2C_Mem_Read+0x160>
 8008dd6:	b9aa      	cbnz	r2, 8008e04 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dd8:	4643      	mov	r3, r8
 8008dda:	2180      	movs	r1, #128	@ 0x80
 8008ddc:	4620      	mov	r0, r4
 8008dde:	9500      	str	r5, [sp, #0]
 8008de0:	f7ff fdb1 	bl	8008946 <I2C_WaitOnFlagUntilTimeout>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	f47f af74 	bne.w	8008cd2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	2bff      	cmp	r3, #255	@ 0xff
 8008df0:	d928      	bls.n	8008e44 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008df2:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008df8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008dfa:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fce0 	bl	80087c4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008e04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1c9      	bne.n	8008da0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4641      	mov	r1, r8
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7ff fdd3 	bl	80089bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f47f af5b 	bne.w	8008cd2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	2120      	movs	r1, #32
 8008e20:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008e28:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008e2c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008e36:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008e3a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e3e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008e42:	e747      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008e44:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	9000      	str	r0, [sp, #0]
 8008e52:	e7d3      	b.n	8008dfc <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008e54:	2002      	movs	r0, #2
 8008e56:	e73d      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x30>
 8008e58:	80002000 	.word	0x80002000
 8008e5c:	80002400 	.word	0x80002400

08008e60 <HAL_I2C_GetState>:
  return hi2c->State;
 8008e60:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008e64:	4770      	bx	lr

08008e66 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008e66:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008e68:	4770      	bx	lr

08008e6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e6a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e6c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008e70:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e72:	2a20      	cmp	r2, #32
 8008e74:	b2d4      	uxtb	r4, r2
 8008e76:	d11c      	bne.n	8008eb2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e78:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008e7c:	2a01      	cmp	r2, #1
 8008e7e:	d018      	beq.n	8008eb2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e80:	2224      	movs	r2, #36	@ 0x24
 8008e82:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e86:	6802      	ldr	r2, [r0, #0]
 8008e88:	6810      	ldr	r0, [r2, #0]
 8008e8a:	f020 0001 	bic.w	r0, r0, #1
 8008e8e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e90:	6810      	ldr	r0, [r2, #0]
 8008e92:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008e96:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e98:	6810      	ldr	r0, [r2, #0]
 8008e9a:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e9c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e9e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008ea0:	6811      	ldr	r1, [r2, #0]
 8008ea2:	f041 0101 	orr.w	r1, r1, #1
 8008ea6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ea8:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008eac:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008eb0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008eb2:	2002      	movs	r0, #2
 8008eb4:	e7fc      	b.n	8008eb0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08008eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008eb6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008ebc:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ebe:	2a20      	cmp	r2, #32
 8008ec0:	b2d4      	uxtb	r4, r2
 8008ec2:	d11b      	bne.n	8008efc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008ec8:	2a01      	cmp	r2, #1
 8008eca:	d017      	beq.n	8008efc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ecc:	2224      	movs	r2, #36	@ 0x24
 8008ece:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ed2:	6802      	ldr	r2, [r0, #0]
 8008ed4:	6810      	ldr	r0, [r2, #0]
 8008ed6:	f020 0001 	bic.w	r0, r0, #1
 8008eda:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008edc:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ede:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ee2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8008ee8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008eea:	6811      	ldr	r1, [r2, #0]
 8008eec:	f041 0101 	orr.w	r1, r1, #1
 8008ef0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008ef6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008efa:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008efc:	2002      	movs	r0, #2
 8008efe:	e7fc      	b.n	8008efa <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008f00 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008f00:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8008f02:	2401      	movs	r4, #1
 8008f04:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8008f06:	2500      	movs	r5, #0
 8008f08:	194e      	adds	r6, r1, r5
 8008f0a:	443d      	add	r5, r7
 8008f0c:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8008f0e:	42be      	cmp	r6, r7
 8008f10:	d112      	bne.n	8008f38 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8008f12:	2c10      	cmp	r4, #16
 8008f14:	d108      	bne.n	8008f28 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8008f16:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008f18:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8008f1a:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8008f1c:	601d      	str	r5, [r3, #0]
  p = 0;
 8008f1e:	4623      	mov	r3, r4
  si = Huffsize[0];
 8008f20:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8008f22:	5cc8      	ldrb	r0, [r1, r3]
 8008f24:	b9d8      	cbnz	r0, 8008f5e <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8008f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8008f28:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	197e      	adds	r6, r7, r5
 8008f2e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8008f32:	d9e9      	bls.n	8008f08 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8008f34:	2001      	movs	r0, #1
 8008f36:	e7f6      	b.n	8008f26 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8008f38:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008f3c:	e7e7      	b.n	8008f0e <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8008f3e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8008f42:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008f44:	5cc8      	ldrb	r0, [r1, r3]
 8008f46:	19dc      	adds	r4, r3, r7
 8008f48:	42a8      	cmp	r0, r5
 8008f4a:	d0f8      	beq.n	8008f3e <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008f4c:	2d1f      	cmp	r5, #31
 8008f4e:	d8f1      	bhi.n	8008f34 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008f50:	fa06 f005 	lsl.w	r0, r6, r5
 8008f54:	42a0      	cmp	r0, r4
 8008f56:	d9ed      	bls.n	8008f34 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8008f58:	0064      	lsls	r4, r4, #1
    si++;
 8008f5a:	3501      	adds	r5, #1
 8008f5c:	e7e1      	b.n	8008f22 <JPEG_Bits_To_SizeCodes+0x22>
 8008f5e:	1ae7      	subs	r7, r4, r3
 8008f60:	e7f0      	b.n	8008f44 <JPEG_Bits_To_SizeCodes+0x44>

08008f62 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f64:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8008f68:	460d      	mov	r5, r1
 8008f6a:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008f6c:	ab01      	add	r3, sp, #4
 8008f6e:	aa43      	add	r2, sp, #268	@ 0x10c
 8008f70:	a902      	add	r1, sp, #8
 8008f72:	f7ff ffc5 	bl	8008f00 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008f76:	b940      	cbnz	r0, 8008f8a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8008f78:	9e01      	ldr	r6, [sp, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	f104 010f 	add.w	r1, r4, #15
 8008f82:	360f      	adds	r6, #15
 8008f84:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d102      	bne.n	8008f90 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008f8a:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8008f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008f90:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008f94:	2e0b      	cmp	r6, #11
 8008f96:	d80a      	bhi.n	8008fae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008f98:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008f9c:	f853 cb04 	ldr.w	ip, [r3], #4
 8008fa0:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008fa4:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008fa8:	3f01      	subs	r7, #1
 8008faa:	55af      	strb	r7, [r5, r6]
      k++;
 8008fac:	e7eb      	b.n	8008f86 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008fae:	2001      	movs	r0, #1
 8008fb0:	e7eb      	b.n	8008f8a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

08008fb2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008fb8:	681c      	ldr	r4, [r3, #0]
{
 8008fba:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008fbc:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d125      	bne.n	8009010 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008fc4:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008fc8:	a901      	add	r1, sp, #4
 8008fca:	f7ff ffca 	bl	8008f62 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8008fce:	b9e8      	cbnz	r0, 800900c <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8008fd0:	aa01      	add	r2, sp, #4
 8008fd2:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008fd6:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8008fda:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8008fdc:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8008fde:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008fe0:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8008fe2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008fe4:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8008fe8:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008fea:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008fec:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ff0:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8008ff4:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ff6:	7b13      	ldrb	r3, [r2, #12]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ffe:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009000:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009004:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8009008:	42b4      	cmp	r4, r6
 800900a:	d1e9      	bne.n	8008fe0 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800900c:	b011      	add	sp, #68	@ 0x44
 800900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009010:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8009014:	429a      	cmp	r2, r3
 8009016:	d102      	bne.n	800901e <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009018:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800901c:	e7d4      	b.n	8008fc8 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800901e:	2001      	movs	r0, #1
 8009020:	e7f4      	b.n	800900c <JPEG_Set_HuffDC_Mem+0x5a>

08009022 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009026:	6804      	ldr	r4, [r0, #0]
{
 8009028:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800902c:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800902e:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8009032:	429a      	cmp	r2, r3
 8009034:	d149      	bne.n	80090ca <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009036:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800903a:	466b      	mov	r3, sp
 800903c:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8009040:	a901      	add	r1, sp, #4
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ff5c 	bl	8008f00 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009048:	2800      	cmp	r0, #0
 800904a:	d13a      	bne.n	80090c2 <JPEG_Set_HuffAC_Mem+0xa0>
 800904c:	9b00      	ldr	r3, [sp, #0]
 800904e:	460d      	mov	r5, r1
 8009050:	f106 0c0f 	add.w	ip, r6, #15
 8009054:	4617      	mov	r7, r2
 8009056:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8009058:	f04f 0e0a 	mov.w	lr, #10
 800905c:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800905e:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8009060:	4561      	cmp	r1, ip
 8009062:	d139      	bne.n	80090d8 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8009064:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8009068:	a942      	add	r1, sp, #264	@ 0x108
 800906a:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800906e:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8009070:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8009076:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800907a:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800907e:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8009080:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8009084:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8009086:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800908a:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800908c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8009090:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009092:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8009096:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009098:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800909c:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800909e:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80090a0:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80090a4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80090a8:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80090aa:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80090b4:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80090b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ba:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80090be:	42b4      	cmp	r4, r6
 80090c0:	d1e7      	bne.n	8009092 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80090c2:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80090c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80090ca:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d10f      	bne.n	80090f2 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80090d2:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80090d6:	e7b0      	b.n	800903a <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80090d8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80090dc:	b15b      	cbz	r3, 80090f6 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80090de:	2bf0      	cmp	r3, #240	@ 0xf0
 80090e0:	d015      	beq.n	800910e <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80090e2:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80090e4:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80090e8:	3b01      	subs	r3, #1
 80090ea:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80090ee:	2ba1      	cmp	r3, #161	@ 0xa1
 80090f0:	d902      	bls.n	80090f8 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80090f2:	2001      	movs	r0, #1
 80090f4:	e7e5      	b.n	80090c2 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80090f6:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80090f8:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80090fc:	f857 8b04 	ldr.w	r8, [r7], #4
 8009100:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009104:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009108:	3a01      	subs	r2, #1
 800910a:	54f2      	strb	r2, [r6, r3]
      k++;
 800910c:	e7a8      	b.n	8009060 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800910e:	23a1      	movs	r3, #161	@ 0xa1
 8009110:	e7f2      	b.n	80090f8 <JPEG_Set_HuffAC_Mem+0xd6>

08009112 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009112:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009114:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009118:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800911a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800911c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800911e:	f002 0203 	and.w	r2, r2, #3
 8009122:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	bf0c      	ite	eq
 8009128:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800912c:	f022 0208 	bicne.w	r2, r2, #8
 8009130:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	f022 0201 	bic.w	r2, r2, #1
 8009138:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800913a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800913c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009140:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009148:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800914a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800914c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009150:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009154:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009158:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009162:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009164:	f002 020c 	and.w	r2, r2, #12
 8009168:	2a08      	cmp	r2, #8
 800916a:	d104      	bne.n	8009176 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800916c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800916e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009172:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8009174:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009176:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009178:	f002 020c 	and.w	r2, r2, #12
 800917c:	2a0c      	cmp	r2, #12
 800917e:	d1f9      	bne.n	8009174 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009182:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009186:	e7f4      	b.n	8009172 <JPEG_Init_Process+0x60>

08009188 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800918a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800918c:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800918e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009190:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009192:	42aa      	cmp	r2, r5
 8009194:	d313      	bcc.n	80091be <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009196:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009198:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800919a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800919c:	428b      	cmp	r3, r1
 800919e:	d30e      	bcc.n	80091be <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80091a0:	4f18      	ldr	r7, [pc, #96]	@ (8009204 <JPEG_DMA_StartProcess+0x7c>)
 80091a2:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80091a4:	4f18      	ldr	r7, [pc, #96]	@ (8009208 <JPEG_DMA_StartProcess+0x80>)
 80091a6:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80091a8:	4e18      	ldr	r6, [pc, #96]	@ (800920c <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80091aa:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80091ac:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80091ae:	4e18      	ldr	r6, [pc, #96]	@ (8009210 <JPEG_DMA_StartProcess+0x88>)
 80091b0:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80091b2:	b105      	cbz	r5, 80091b6 <JPEG_DMA_StartProcess+0x2e>
 80091b4:	b931      	cbnz	r1, 80091c4 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80091b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80091b8:	f043 0304 	orr.w	r3, r3, #4
 80091bc:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80091be:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80091c0:	b003      	add	sp, #12
 80091c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80091c4:	fbb2 f6f5 	udiv	r6, r2, r5
 80091c8:	fb05 2516 	mls	r5, r5, r6, r2
 80091cc:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80091ce:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80091d0:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80091d2:	fbb3 f2f1 	udiv	r2, r3, r1
 80091d6:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80091da:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80091dc:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80091de:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80091e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80091e2:	9500      	str	r5, [sp, #0]
 80091e4:	69e2      	ldr	r2, [r4, #28]
 80091e6:	f001 f810 	bl	800a20a <HAL_MDMA_Start_IT>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d1e3      	bne.n	80091b6 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	9500      	str	r5, [sp, #0]
 80091f2:	3240      	adds	r2, #64	@ 0x40
 80091f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80091f6:	69a1      	ldr	r1, [r4, #24]
 80091f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80091fa:	f001 f806 	bl	800a20a <HAL_MDMA_Start_IT>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d0de      	beq.n	80091c0 <JPEG_DMA_StartProcess+0x38>
 8009202:	e7d8      	b.n	80091b6 <JPEG_DMA_StartProcess+0x2e>
 8009204:	08009747 	.word	0x08009747
 8009208:	08009643 	.word	0x08009643
 800920c:	08009c05 	.word	0x08009c05
 8009210:	08009bf7 	.word	0x08009bf7

08009214 <HAL_JPEG_Init>:
{
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8009216:	4605      	mov	r5, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	f000 80f2 	beq.w	8009402 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800921e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8009222:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009226:	b91b      	cbnz	r3, 8009230 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8009228:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800922c:	f7f8 f860 	bl	80012f0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8009230:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009232:	2302      	movs	r3, #2
 8009234:	4a86      	ldr	r2, [pc, #536]	@ (8009450 <HAL_JPEG_Init+0x23c>)
 8009236:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800923a:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800923e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009240:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8009244:	f043 0301 	orr.w	r3, r3, #1
 8009248:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009252:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009254:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009258:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800925a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800925c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009260:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009262:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009268:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800926a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800926c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009270:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009272:	4b78      	ldr	r3, [pc, #480]	@ (8009454 <HAL_JPEG_Init+0x240>)
 8009274:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009276:	4b78      	ldr	r3, [pc, #480]	@ (8009458 <HAL_JPEG_Init+0x244>)
 8009278:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800927a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800927c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009280:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8009282:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009284:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009286:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009288:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800928c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800928e:	4333      	orrs	r3, r6
 8009290:	7c56      	ldrb	r6, [r2, #17]
 8009292:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009296:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800929a:	4281      	cmp	r1, r0
 800929c:	d1f0      	bne.n	8009280 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800929e:	4b6f      	ldr	r3, [pc, #444]	@ (800945c <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80092a0:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80092a4:	4a6e      	ldr	r2, [pc, #440]	@ (8009460 <HAL_JPEG_Init+0x24c>)
 80092a6:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80092aa:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80092ae:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80092b2:	4610      	mov	r0, r2
 80092b4:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80092b6:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80092ba:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80092be:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80092c2:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80092c4:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80092c6:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80092ca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80092cc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80092d0:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80092d4:	ea43 030c 	orr.w	r3, r3, ip
 80092d8:	f890 c011 	ldrb.w	ip, [r0, #17]
 80092dc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80092e0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80092e4:	42be      	cmp	r6, r7
 80092e6:	d1ec      	bne.n	80092c2 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80092e8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80092ec:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 80092f0:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80092f4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 80092f8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 80092fc:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009300:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8009304:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009306:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800930a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800930c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009310:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009314:	4333      	orrs	r3, r6
 8009316:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800931a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800931e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8009322:	4281      	cmp	r1, r0
 8009324:	d1ec      	bne.n	8009300 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8009326:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800932a:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800932e:	4a4d      	ldr	r2, [pc, #308]	@ (8009464 <HAL_JPEG_Init+0x250>)
 8009330:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8009334:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009336:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800933a:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800933e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8009342:	4013      	ands	r3, r2
  *address = value;
 8009344:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009348:	2301      	movs	r3, #1
 800934a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800934e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8009352:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8009356:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800935a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800935e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8009364:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8009368:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800936c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800936e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8009372:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8009376:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800937a:	4b3b      	ldr	r3, [pc, #236]	@ (8009468 <HAL_JPEG_Init+0x254>)
 800937c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8009380:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8009384:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8009388:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800938c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800938e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8009392:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8009396:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800939a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800939c:	4a33      	ldr	r2, [pc, #204]	@ (800946c <HAL_JPEG_Init+0x258>)
 800939e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80093a2:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80093a6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80093aa:	4b31      	ldr	r3, [pc, #196]	@ (8009470 <HAL_JPEG_Init+0x25c>)
 80093ac:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80093b0:	4b30      	ldr	r3, [pc, #192]	@ (8009474 <HAL_JPEG_Init+0x260>)
 80093b2:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80093b6:	4b30      	ldr	r3, [pc, #192]	@ (8009478 <HAL_JPEG_Init+0x264>)
 80093b8:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80093bc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80093c0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80093c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80093c6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80093ca:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80093ce:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093d0:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80093d4:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80093d6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80093da:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80093de:	4333      	orrs	r3, r6
 80093e0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80093e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093e8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80093ec:	4281      	cmp	r1, r0
 80093ee:	d1ec      	bne.n	80093ca <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80093f0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80093f4:	491a      	ldr	r1, [pc, #104]	@ (8009460 <HAL_JPEG_Init+0x24c>)
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7ff fe13 	bl	8009022 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80093fc:	b118      	cbz	r0, 8009406 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80093fe:	2301      	movs	r3, #1
 8009400:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8009402:	2001      	movs	r0, #1
}
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009406:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800940a:	4918      	ldr	r1, [pc, #96]	@ (800946c <HAL_JPEG_Init+0x258>)
 800940c:	4628      	mov	r0, r5
 800940e:	f7ff fe08 	bl	8009022 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009412:	2800      	cmp	r0, #0
 8009414:	d1f3      	bne.n	80093fe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009416:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800941a:	490d      	ldr	r1, [pc, #52]	@ (8009450 <HAL_JPEG_Init+0x23c>)
 800941c:	4628      	mov	r0, r5
 800941e:	f7ff fdc8 	bl	8008fb2 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8009422:	2800      	cmp	r0, #0
 8009424:	d1eb      	bne.n	80093fe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009426:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800942a:	4914      	ldr	r1, [pc, #80]	@ (800947c <HAL_JPEG_Init+0x268>)
 800942c:	4628      	mov	r0, r5
 800942e:	f7ff fdc0 	bl	8008fb2 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009432:	2800      	cmp	r0, #0
 8009434:	d1e3      	bne.n	80093fe <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800943c:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800943e:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8009440:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8009442:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009444:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009448:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800944a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800944c:	e7da      	b.n	8009404 <HAL_JPEG_Init+0x1f0>
 800944e:	bf00      	nop
 8009450:	080283e4 	.word	0x080283e4
 8009454:	080281e4 	.word	0x080281e4
 8009458:	080281a4 	.word	0x080281a4
 800945c:	0b0a0908 	.word	0x0b0a0908
 8009460:	08028316 	.word	0x08028316
 8009464:	ffff0000 	.word	0xffff0000
 8009468:	09080706 	.word	0x09080706
 800946c:	08028264 	.word	0x08028264
 8009470:	01000404 	.word	0x01000404
 8009474:	05070403 	.word	0x05070403
 8009478:	04040201 	.word	0x04040201
 800947c:	080283c8 	.word	0x080283c8

08009480 <HAL_JPEG_GetInfo>:
{
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009484:	2800      	cmp	r0, #0
 8009486:	d06f      	beq.n	8009568 <HAL_JPEG_GetInfo+0xe8>
 8009488:	2900      	cmp	r1, #0
 800948a:	d06d      	beq.n	8009568 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800948c:	6804      	ldr	r4, [r0, #0]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d047      	beq.n	8009528 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	f013 0303 	ands.w	r3, r3, #3
 800949e:	d005      	beq.n	80094ac <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	f003 0303 	and.w	r3, r3, #3
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d15e      	bne.n	8009568 <HAL_JPEG_GetInfo+0xe8>
 80094aa:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80094ac:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80094ae:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80094b0:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80094b4:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80094b6:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80094b8:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80094ba:	68e2      	ldr	r2, [r4, #12]
 80094bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80094c0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80094c2:	d13c      	bne.n	800953e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80094c4:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80094c6:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80094c8:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80094cc:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80094ce:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80094d0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80094d2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80094d6:	d129      	bne.n	800952c <HAL_JPEG_GetInfo+0xac>
 80094d8:	4313      	orrs	r3, r2
 80094da:	f013 0f0f 	tst.w	r3, #15
 80094de:	bf0c      	ite	eq
 80094e0:	2301      	moveq	r3, #1
 80094e2:	2300      	movne	r3, #0
 80094e4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80094e6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	3450      	adds	r4, #80	@ 0x50
 80094ec:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800956c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80094f0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80094f2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80094f6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 80094fa:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80094fe:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8009502:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8009504:	fa29 f206 	lsr.w	r2, r9, r6
 8009508:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800950a:	2a01      	cmp	r2, #1
 800950c:	d119      	bne.n	8009542 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800950e:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8009510:	3608      	adds	r6, #8
 8009512:	3701      	adds	r7, #1
 8009514:	2e20      	cmp	r6, #32
 8009516:	d1f5      	bne.n	8009504 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8009518:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800951a:	2d40      	cmp	r5, #64	@ 0x40
 800951c:	d1ed      	bne.n	80094fa <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800951e:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8009520:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009522:	610b      	str	r3, [r1, #16]
}
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	2310      	movs	r3, #16
 800952a:	e7bf      	b.n	80094ac <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800952c:	2d03      	cmp	r5, #3
 800952e:	d106      	bne.n	800953e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009530:	4313      	orrs	r3, r2
 8009532:	f013 0f0f 	tst.w	r3, #15
 8009536:	bf0c      	ite	eq
 8009538:	2301      	moveq	r3, #1
 800953a:	2300      	movne	r3, #0
 800953c:	e7d3      	b.n	80094e6 <HAL_JPEG_GetInfo+0x66>
 800953e:	2300      	movs	r3, #0
 8009540:	e7d1      	b.n	80094e6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8009542:	fb0e fb02 	mul.w	fp, lr, r2
 8009546:	f897 a000 	ldrb.w	sl, [r7]
 800954a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800954c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8009550:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8009554:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8009556:	bf8b      	itete	hi
 8009558:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800955c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8009560:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8009562:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8009566:	e7d3      	b.n	8009510 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8009568:	2001      	movs	r0, #1
 800956a:	e7db      	b.n	8009524 <HAL_JPEG_GetInfo+0xa4>
 800956c:	08028224 	.word	0x08028224

08009570 <HAL_JPEG_Decode_DMA>:
{
 8009570:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009572:	4604      	mov	r4, r0
 8009574:	b348      	cbz	r0, 80095ca <HAL_JPEG_Decode_DMA+0x5a>
 8009576:	b341      	cbz	r1, 80095ca <HAL_JPEG_Decode_DMA+0x5a>
 8009578:	b33b      	cbz	r3, 80095ca <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800957a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800957e:	2d01      	cmp	r5, #1
 8009580:	d028      	beq.n	80095d4 <HAL_JPEG_Decode_DMA+0x64>
 8009582:	2501      	movs	r5, #1
 8009584:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009588:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800958c:	2d01      	cmp	r5, #1
 800958e:	d11e      	bne.n	80095ce <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009590:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8009592:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009594:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009598:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800959a:	f025 050f 	bic.w	r5, r5, #15
 800959e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80095a0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80095a2:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80095a6:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80095aa:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80095ac:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80095ae:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80095b0:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80095b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80095b4:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80095b6:	f7ff fdac 	bl	8009112 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80095ba:	f7ff fde5 	bl	8009188 <JPEG_DMA_StartProcess>
 80095be:	b128      	cbz	r0, 80095cc <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80095c0:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80095c2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80095c6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80095ca:	2001      	movs	r0, #1
}
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80095ce:	2300      	movs	r3, #0
 80095d0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80095d4:	2002      	movs	r0, #2
 80095d6:	e7f9      	b.n	80095cc <HAL_JPEG_Decode_DMA+0x5c>

080095d8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80095d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80095da:	f003 030c 	and.w	r3, r3, #12
 80095de:	2b0c      	cmp	r3, #12
 80095e0:	d10d      	bne.n	80095fe <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80095e2:	07cb      	lsls	r3, r1, #31
 80095e4:	d503      	bpl.n	80095ee <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80095e6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80095e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80095ec:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80095ee:	0789      	lsls	r1, r1, #30
 80095f0:	d503      	bpl.n	80095fa <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80095f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80095f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80095f8:	6543      	str	r3, [r0, #84]	@ 0x54
}
 80095fa:	2000      	movs	r0, #0
 80095fc:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80095fe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009600:	f003 030c 	and.w	r3, r3, #12
 8009604:	2b08      	cmp	r3, #8
 8009606:	d1f8      	bne.n	80095fa <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009608:	f011 0301 	ands.w	r3, r1, #1
 800960c:	d004      	beq.n	8009618 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800960e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009610:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009614:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009616:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009618:	078a      	lsls	r2, r1, #30
 800961a:	d505      	bpl.n	8009628 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800961c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800961e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009622:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009626:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009628:	6801      	ldr	r1, [r0, #0]
 800962a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800962c:	ea22 0303 	bic.w	r3, r2, r3
 8009630:	630b      	str	r3, [r1, #48]	@ 0x30
 8009632:	e7e2      	b.n	80095fa <HAL_JPEG_Pause+0x22>

08009634 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009634:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8009636:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009638:	4770      	bx	lr

0800963a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800963a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800963c:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800963e:	4770      	bx	lr

08009640 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8009640:	4770      	bx	lr

08009642 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009642:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8009644:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009646:	6803      	ldr	r3, [r0, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f022 0201 	bic.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009652:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009656:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009658:	2301      	movs	r3, #1
 800965a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800965e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009660:	f043 0304 	orr.w	r3, r3, #4
 8009664:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8009666:	f7f9 f94f 	bl	8002908 <HAL_JPEG_ErrorCallback>
}
 800966a:	bd08      	pop	{r3, pc}

0800966c <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800966c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800966e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009674:	b922      	cbnz	r2, 8009680 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009676:	2101      	movs	r1, #1
 8009678:	f7ff ffae 	bl	80095d8 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800967c:	2200      	movs	r2, #0
 800967e:	e004      	b.n	800968a <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009680:	6a03      	ldr	r3, [r0, #32]
 8009682:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009684:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009686:	d924      	bls.n	80096d2 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009688:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800968a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800968c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8009690:	d11e      	bne.n	80096d0 <JPEG_ReadInputData+0x64>
 8009692:	b1ea      	cbz	r2, 80096d0 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8009694:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009698:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800969a:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800969e:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 80096a0:	d826      	bhi.n	80096f0 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 80096a2:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80096a4:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80096a6:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80096a8:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 80096aa:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80096ac:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80096ae:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80096b2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80096b6:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80096b8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80096bc:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80096c0:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80096c4:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80096c6:	6a22      	ldr	r2, [r4, #32]
 80096c8:	f102 0204 	add.w	r2, r2, #4
 80096cc:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80096ce:	d1e8      	bne.n	80096a2 <JPEG_ReadInputData+0x36>
}
 80096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1d2      	bne.n	800967c <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80096d6:	6a01      	ldr	r1, [r0, #32]
 80096d8:	f7f9 f8a8 	bl	800282c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80096dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096de:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80096e0:	bf84      	itt	hi
 80096e2:	f023 0303 	bichi.w	r3, r3, #3
 80096e6:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80096e8:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80096ea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80096ec:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80096ee:	e7cc      	b.n	800968a <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 80096f0:	2a03      	cmp	r2, #3
 80096f2:	d917      	bls.n	8009724 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 80096f4:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80096f6:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80096f8:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80096fa:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 80096fc:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80096fe:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009700:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009704:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009708:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800970a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800970e:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009712:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009716:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009718:	6a22      	ldr	r2, [r4, #32]
 800971a:	f102 0204 	add.w	r2, r2, #4
 800971e:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009720:	d8e8      	bhi.n	80096f4 <JPEG_ReadInputData+0x88>
 8009722:	e7d5      	b.n	80096d0 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8009724:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009726:	6a26      	ldr	r6, [r4, #32]
 8009728:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 800972a:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800972c:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 800972e:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009730:	fa06 f607 	lsl.w	r6, r6, r7
 8009734:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8009738:	6a26      	ldr	r6, [r4, #32]
 800973a:	f106 0601 	add.w	r6, r6, #1
 800973e:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8009740:	d1f1      	bne.n	8009726 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8009742:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8009744:	e7c4      	b.n	80096d0 <JPEG_ReadInputData+0x64>

08009746 <JPEG_MDMAInCpltCallback>:
{
 8009746:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009748:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800974e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009752:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8009754:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009756:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800975a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800975e:	041b      	lsls	r3, r3, #16
 8009760:	0c1b      	lsrs	r3, r3, #16
 8009762:	2b0c      	cmp	r3, #12
 8009764:	d11a      	bne.n	800979c <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009766:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009768:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800976a:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800976c:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800976e:	695a      	ldr	r2, [r3, #20]
 8009770:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009772:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800977a:	6a21      	ldr	r1, [r4, #32]
 800977c:	f7f9 f856 	bl	800282c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8009780:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009782:	42ab      	cmp	r3, r5
 8009784:	d327      	bcc.n	80097d6 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8009786:	b95d      	cbnz	r5, 80097a0 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009788:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800978a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800978c:	f043 0304 	orr.w	r3, r3, #4
 8009790:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009792:	2306      	movs	r3, #6
 8009794:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8009798:	f7f9 f8b6 	bl	8002908 <HAL_JPEG_ErrorCallback>
}
 800979c:	b003      	add	sp, #12
 800979e:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80097a0:	fbb3 f2f5 	udiv	r2, r3, r5
 80097a4:	fb05 3212 	mls	r2, r5, r2, r3
 80097a8:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80097aa:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80097ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80097ae:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	d40a      	bmi.n	80097ca <JPEG_MDMAInCpltCallback+0x84>
 80097b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80097b6:	b143      	cbz	r3, 80097ca <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80097b8:	2101      	movs	r1, #1
 80097ba:	3240      	adds	r2, #64	@ 0x40
 80097bc:	9100      	str	r1, [sp, #0]
 80097be:	69a1      	ldr	r1, [r4, #24]
 80097c0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80097c2:	f000 fd22 	bl	800a20a <HAL_MDMA_Start_IT>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d1de      	bne.n	8009788 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80097ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80097d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80097d4:	e7e2      	b.n	800979c <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0e8      	beq.n	80097ac <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80097da:	079a      	lsls	r2, r3, #30
 80097dc:	d0e6      	beq.n	80097ac <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	3304      	adds	r3, #4
 80097e4:	e7e1      	b.n	80097aa <JPEG_MDMAInCpltCallback+0x64>

080097e6 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80097e6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80097ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80097ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 80097f0:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d32a      	bcc.n	800984c <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 80097f6:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80097f8:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 80097fa:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80097fc:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 80097fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009800:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009802:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009804:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009806:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009808:	69e0      	ldr	r0, [r4, #28]
 800980a:	4428      	add	r0, r5
 800980c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009810:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009812:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009814:	69e0      	ldr	r0, [r4, #28]
 8009816:	4428      	add	r0, r5
 8009818:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800981c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009820:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009822:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009824:	69e0      	ldr	r0, [r4, #28]
 8009826:	4428      	add	r0, r5
 8009828:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800982a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800982c:	f103 0304 	add.w	r3, r3, #4
 8009830:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009832:	d1e1      	bne.n	80097f8 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009834:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009836:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009838:	429a      	cmp	r2, r3
 800983a:	d106      	bne.n	800984a <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800983c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800983e:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009840:	4620      	mov	r0, r4
 8009842:	f7f9 f811 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800984a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800984c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800984e:	4293      	cmp	r3, r2
 8009850:	d9fb      	bls.n	800984a <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009852:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009854:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800985a:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800985c:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800985e:	d105      	bne.n	800986c <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009860:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009862:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009864:	429f      	cmp	r7, r3
 8009866:	d119      	bne.n	800989c <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009868:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800986a:	e7e9      	b.n	8009840 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800986c:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800986e:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009872:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009874:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009876:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009878:	69e1      	ldr	r1, [r4, #28]
 800987a:	4429      	add	r1, r5
 800987c:	0a1d      	lsrs	r5, r3, #8
 800987e:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009880:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009882:	69e1      	ldr	r1, [r4, #28]
 8009884:	4429      	add	r1, r5
 8009886:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009888:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800988a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800988c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800988e:	69e1      	ldr	r1, [r4, #28]
 8009890:	4429      	add	r1, r5
 8009892:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8009894:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009896:	3304      	adds	r3, #4
 8009898:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800989a:	e7de      	b.n	800985a <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800989c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800989e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80098a0:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80098a2:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80098a4:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80098a6:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80098a8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80098aa:	d114      	bne.n	80098d6 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80098ac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7f8 ffda 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80098b8:	1d2b      	adds	r3, r5, #4
 80098ba:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d8c4      	bhi.n	800984a <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80098c0:	00da      	lsls	r2, r3, #3
 80098c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80098c4:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80098c6:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80098c8:	fa26 f202 	lsr.w	r2, r6, r2
 80098cc:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80098ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80098d0:	3201      	adds	r2, #1
 80098d2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80098d4:	e7f2      	b.n	80098bc <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80098d6:	f002 0303 	and.w	r3, r2, #3
 80098da:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80098de:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	fa26 f303 	lsr.w	r3, r6, r3
 80098e6:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80098ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80098ec:	3301      	adds	r3, #1
 80098ee:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80098f0:	e7d9      	b.n	80098a6 <JPEG_StoreOutputData+0xc0>

080098f2 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	2b02      	cmp	r3, #2
{
 80098fa:	b510      	push	{r4, lr}
 80098fc:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098fe:	d114      	bne.n	800992a <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009904:	065b      	lsls	r3, r3, #25
 8009906:	d510      	bpl.n	800992a <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009908:	1d01      	adds	r1, r0, #4
 800990a:	f7ff fdb9 	bl	8009480 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800990e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009910:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009912:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009914:	f7f8 ff54 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800991c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009920:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800992a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800992c:	04d9      	lsls	r1, r3, #19
 800992e:	d407      	bmi.n	8009940 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009934:	0792      	lsls	r2, r2, #30
 8009936:	d544      	bpl.n	80099c2 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009938:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff fe96 	bl	800966c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009940:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009942:	0499      	lsls	r1, r3, #18
 8009944:	d407      	bmi.n	8009956 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800994a:	0712      	lsls	r2, r2, #28
 800994c:	d53e      	bpl.n	80099cc <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800994e:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009950:	4620      	mov	r0, r4
 8009952:	f7ff ff48 	bl	80097e6 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800995a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800995e:	2a20      	cmp	r2, #32
 8009960:	d13c      	bne.n	80099dc <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800996a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800996c:	f002 020c 	and.w	r2, r2, #12
 8009970:	2a08      	cmp	r2, #8
 8009972:	d103      	bne.n	800997c <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009976:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800997a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800997c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800997e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009982:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009984:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009986:	b133      	cbz	r3, 8009996 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009988:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800998a:	4620      	mov	r0, r4
 800998c:	69e1      	ldr	r1, [r4, #28]
 800998e:	f7f8 ff6b 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009996:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009998:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800999a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800999c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80099a0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80099a4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80099a6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80099b0:	f04f 0201 	mov.w	r2, #1
 80099b4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80099b8:	d10d      	bne.n	80099d6 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80099ba:	f7f8 ffa7 	bl	800290c <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80099be:	2001      	movs	r0, #1
}
 80099c0:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80099c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c4:	0758      	lsls	r0, r3, #29
 80099c6:	d5bb      	bpl.n	8009940 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80099c8:	2101      	movs	r1, #1
 80099ca:	e7b6      	b.n	800993a <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80099cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ce:	06db      	lsls	r3, r3, #27
 80099d0:	d5c1      	bpl.n	8009956 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80099d2:	2101      	movs	r1, #1
 80099d4:	e7bc      	b.n	8009950 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80099d6:	f7ff fe33 	bl	8009640 <HAL_JPEG_EncodeCpltCallback>
 80099da:	e7f0      	b.n	80099be <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80099dc:	2000      	movs	r0, #0
 80099de:	e7ef      	b.n	80099c0 <JPEG_Process+0xce>

080099e0 <JPEG_DMA_PollResidualData>:
{
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80099e6:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80099e8:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80099ea:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80099ee:	d122      	bne.n	8009a36 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80099f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f2:	06d0      	lsls	r0, r2, #27
 80099f4:	d51f      	bpl.n	8009a36 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80099f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80099f8:	69e1      	ldr	r1, [r4, #28]
 80099fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80099fc:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80099fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009a00:	69e2      	ldr	r2, [r4, #28]
 8009a02:	440a      	add	r2, r1
 8009a04:	0a19      	lsrs	r1, r3, #8
 8009a06:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009a08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009a0a:	69e2      	ldr	r2, [r4, #28]
 8009a0c:	440a      	add	r2, r1
 8009a0e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009a10:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009a12:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009a14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009a16:	69e2      	ldr	r2, [r4, #28]
 8009a18:	440a      	add	r2, r1
 8009a1a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009a1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a1e:	3304      	adds	r3, #4
 8009a20:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009a22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a24:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d105      	bne.n	8009a36 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	69e1      	ldr	r1, [r4, #28]
 8009a30:	f7f8 ff1a 	bl	8002868 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009a34:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009a36:	3e01      	subs	r6, #1
 8009a38:	d1d5      	bne.n	80099e6 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009a3a:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009a3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009a3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009a40:	06c9      	lsls	r1, r1, #27
 8009a42:	d501      	bpl.n	8009a48 <JPEG_DMA_PollResidualData+0x68>
 8009a44:	0492      	lsls	r2, r2, #18
 8009a46:	d420      	bmi.n	8009a8a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009a50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a52:	b133      	cbz	r3, 8009a62 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009a56:	4620      	mov	r0, r4
 8009a58:	69e1      	ldr	r1, [r4, #28]
 8009a5a:	f7f8 ff05 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009a62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009a64:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009a66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a68:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009a6c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a70:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009a72:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009a7c:	f04f 0201 	mov.w	r2, #1
 8009a80:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a84:	d102      	bne.n	8009a8c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009a86:	f7f8 ff41 	bl	800290c <HAL_JPEG_DecodeCpltCallback>
}
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009a8c:	f7ff fdd8 	bl	8009640 <HAL_JPEG_EncodeCpltCallback>
}
 8009a90:	e7fb      	b.n	8009a8a <JPEG_DMA_PollResidualData+0xaa>

08009a92 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009a92:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009a94:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8009a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009a9e:	d014      	beq.n	8009aca <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009aa0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009aa2:	f003 030c 	and.w	r3, r3, #12
 8009aa6:	2b0c      	cmp	r3, #12
 8009aa8:	d146      	bne.n	8009b38 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009aaa:	07cb      	lsls	r3, r1, #31
 8009aac:	d520      	bpl.n	8009af0 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009aae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ab4:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009ab6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009ab8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8009aba:	b941      	cbnz	r1, 8009ace <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009abc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009abe:	f043 0304 	orr.w	r3, r3, #4
 8009ac2:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009ac4:	2306      	movs	r3, #6
 8009ac6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8009aca:	2001      	movs	r0, #1
 8009acc:	e01d      	b.n	8009b0a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8009ace:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ad0:	fbb3 f2f1 	udiv	r2, r3, r1
 8009ad4:	fb01 3212 	mls	r2, r1, r2, r3
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8009adc:	b143      	cbz	r3, 8009af0 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	3240      	adds	r2, #64	@ 0x40
 8009ae4:	9100      	str	r1, [sp, #0]
 8009ae6:	69a1      	ldr	r1, [r4, #24]
 8009ae8:	f000 fb8f 	bl	800a20a <HAL_MDMA_Start_IT>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1e5      	bne.n	8009abc <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009af0:	07a8      	lsls	r0, r5, #30
 8009af2:	d509      	bpl.n	8009b08 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009af4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009afa:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009afc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009afe:	0419      	lsls	r1, r3, #16
 8009b00:	d505      	bpl.n	8009b0e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7ff ff6c 	bl	80099e0 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8009b08:	2000      	movs	r0, #0
}
 8009b0a:	b003      	add	sp, #12
 8009b0c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009b0e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009b10:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8009b12:	2900      	cmp	r1, #0
 8009b14:	d0d2      	beq.n	8009abc <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009b16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009b18:	fbb3 f2f1 	udiv	r2, r3, r1
 8009b1c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009b20:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009b22:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009b24:	2201      	movs	r2, #1
 8009b26:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009b28:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009b2a:	9200      	str	r2, [sp, #0]
 8009b2c:	69e2      	ldr	r2, [r4, #28]
 8009b2e:	f000 fb6c 	bl	800a20a <HAL_MDMA_Start_IT>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0e8      	beq.n	8009b08 <HAL_JPEG_Resume+0x76>
 8009b36:	e7c1      	b.n	8009abc <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009b38:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009b3a:	f003 030c 	and.w	r3, r3, #12
 8009b3e:	2b08      	cmp	r3, #8
 8009b40:	d1e2      	bne.n	8009b08 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009b42:	f011 0301 	ands.w	r3, r1, #1
 8009b46:	d004      	beq.n	8009b52 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009b48:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b4e:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009b50:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009b52:	07aa      	lsls	r2, r5, #30
 8009b54:	d505      	bpl.n	8009b62 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009b56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009b58:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009b5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b60:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009b66:	4313      	orrs	r3, r2
 8009b68:	630b      	str	r3, [r1, #48]	@ 0x30
 8009b6a:	e7cd      	b.n	8009b08 <HAL_JPEG_Resume+0x76>

08009b6c <JPEG_DMA_EndProcess>:
{
 8009b6c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009b6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8009b70:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009b72:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009b80:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d105      	bne.n	8009b92 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b86:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009b88:	69c1      	ldr	r1, [r0, #28]
 8009b8a:	f7f8 fe6d 	bl	8002868 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8009b96:	f015 0510 	ands.w	r5, r5, #16
 8009b9a:	d124      	bne.n	8009be6 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8009b9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b9e:	b12b      	cbz	r3, 8009bac <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ba0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	69e1      	ldr	r1, [r4, #28]
 8009ba6:	f7f8 fe5f 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009baa:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009bac:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009bae:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009bb0:	6813      	ldr	r3, [r2, #0]
 8009bb2:	f023 0301 	bic.w	r3, r3, #1
 8009bb6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8009bb8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009bba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009bbc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009bc0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009bc4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009bc6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009bd0:	f04f 0201 	mov.w	r2, #1
 8009bd4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009bd8:	d102      	bne.n	8009be0 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009bda:	f7f8 fe97 	bl	800290c <HAL_JPEG_DecodeCpltCallback>
}
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009be0:	f7ff fd2e 	bl	8009640 <HAL_JPEG_EncodeCpltCallback>
 8009be4:	e7fb      	b.n	8009bde <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009be6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009be8:	049b      	lsls	r3, r3, #18
 8009bea:	d4f8      	bmi.n	8009bde <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8009bec:	4620      	mov	r0, r4
}
 8009bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009bf2:	f7ff bef5 	b.w	80099e0 <JPEG_DMA_PollResidualData>

08009bf6 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009bf6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009bf8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bfa:	041b      	lsls	r3, r3, #16
 8009bfc:	d501      	bpl.n	8009c02 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8009bfe:	f7ff bfb5 	b.w	8009b6c <JPEG_DMA_EndProcess>
}
 8009c02:	4770      	bx	lr

08009c04 <JPEG_MDMAOutCpltCallback>:
{
 8009c04:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009c06:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c0c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009c10:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8009c12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c14:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8009c18:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009c1c:	0412      	lsls	r2, r2, #16
 8009c1e:	0c12      	lsrs	r2, r2, #16
 8009c20:	2a0c      	cmp	r2, #12
 8009c22:	d125      	bne.n	8009c70 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c26:	069a      	lsls	r2, r3, #26
 8009c28:	d424      	bmi.n	8009c74 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009c2a:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009c30:	695a      	ldr	r2, [r3, #20]
 8009c32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009c34:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009c3c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009c3e:	f7f8 fe13 	bl	8002868 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009c42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c44:	049b      	lsls	r3, r3, #18
 8009c46:	d415      	bmi.n	8009c74 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009c48:	6821      	ldr	r1, [r4, #0]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	3144      	adds	r1, #68	@ 0x44
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009c52:	69e2      	ldr	r2, [r4, #28]
 8009c54:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009c56:	f000 fad8 	bl	800a20a <HAL_MDMA_Start_IT>
 8009c5a:	b158      	cbz	r0, 8009c74 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009c5c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009c5e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009c60:	f043 0304 	orr.w	r3, r3, #4
 8009c64:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009c66:	2306      	movs	r3, #6
 8009c68:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009c6c:	f7f8 fe4c 	bl	8002908 <HAL_JPEG_ErrorCallback>
}
 8009c70:	b002      	add	sp, #8
 8009c72:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009c74:	6822      	ldr	r2, [r4, #0]
 8009c76:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009c78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c7e:	e7f7      	b.n	8009c70 <JPEG_MDMAOutCpltCallback+0x6c>

08009c80 <HAL_JPEG_IRQHandler>:
{
 8009c80:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8009c82:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8009c86:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009c88:	3b03      	subs	r3, #3
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d850      	bhi.n	8009d30 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009c8e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c90:	f003 030c 	and.w	r3, r3, #12
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	d103      	bne.n	8009ca0 <HAL_JPEG_IRQHandler+0x20>
}
 8009c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009c9c:	f7ff be29 	b.w	80098f2 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009ca0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ca2:	f003 030c 	and.w	r3, r3, #12
 8009ca6:	2b0c      	cmp	r3, #12
 8009ca8:	d142      	bne.n	8009d30 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009caa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d114      	bne.n	8009cde <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009cb4:	6803      	ldr	r3, [r0, #0]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb8:	0659      	lsls	r1, r3, #25
 8009cba:	d510      	bpl.n	8009cde <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009cbc:	1d01      	adds	r1, r0, #4
 8009cbe:	f7ff fbdf 	bl	8009480 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009cc2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009cc4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009cc6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009cc8:	f7f8 fd7a 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ce2:	0692      	lsls	r2, r2, #26
 8009ce4:	d524      	bpl.n	8009d30 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009ce6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009ce8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cee:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	f022 0201 	bic.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cfa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009cfe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d02:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009d06:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009d08:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d101      	bne.n	8009d14 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009d10:	f000 fac4 	bl	800a29c <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009d14:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009d16:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d103      	bne.n	8009d26 <HAL_JPEG_IRQHandler+0xa6>
}
 8009d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009d22:	f000 babb 	b.w	800a29c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009d26:	4620      	mov	r0, r4
}
 8009d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009d2c:	f7ff bf1e 	b.w	8009b6c <JPEG_DMA_EndProcess>
}
 8009d30:	bd10      	pop	{r4, pc}
	...

08009d34 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d34:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009d36:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d38:	3284      	adds	r2, #132	@ 0x84
 8009d3a:	1883      	adds	r3, r0, r2
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009d3e:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d40:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009d42:	684c      	ldr	r4, [r1, #4]
 8009d44:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d48:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d4c:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009d4e:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d50:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d52:	f106 0c01 	add.w	ip, r6, #1
 8009d56:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009d58:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d5a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009d5e:	4465      	add	r5, ip
 8009d60:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d64:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009d66:	68c7      	ldr	r7, [r0, #12]
 8009d68:	68cd      	ldr	r5, [r1, #12]
 8009d6a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009d6e:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009d70:	689d      	ldr	r5, [r3, #8]
 8009d72:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8009d76:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d78:	688d      	ldr	r5, [r1, #8]
 8009d7a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009d7e:	3501      	adds	r5, #1
 8009d80:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8009d84:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d86:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d8a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d8e:	698f      	ldr	r7, [r1, #24]
 8009d90:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d94:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d96:	691d      	ldr	r5, [r3, #16]
 8009d98:	f025 0507 	bic.w	r5, r5, #7
 8009d9c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d9e:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009da2:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8009da6:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009daa:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009dae:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009db2:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009db6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8009dba:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009dbc:	695d      	ldr	r5, [r3, #20]
 8009dbe:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8009dc2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009dc4:	694d      	ldr	r5, [r1, #20]
 8009dc6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009dc8:	69dd      	ldr	r5, [r3, #28]
 8009dca:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8009dce:	f025 0507 	bic.w	r5, r5, #7
 8009dd2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009dd4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009dd8:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009ddc:	bf88      	it	hi
 8009dde:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009de0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009de2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8009de4:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009de6:	bf9c      	itt	ls
 8009de8:	4d0c      	ldrls	r5, [pc, #48]	@ (8009e1c <LTDC_SetConfig+0xe8>)
 8009dea:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009dee:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009df0:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009df2:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009df6:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009df8:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009dfa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009dfc:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009dfe:	437d      	muls	r5, r7
 8009e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009e04:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009e06:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009e08:	f36f 040a 	bfc	r4, #0, #11
 8009e0c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009e0e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009e10:	5883      	ldr	r3, [r0, r2]
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	5083      	str	r3, [r0, r2]
}
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	08028400 	.word	0x08028400

08009e20 <HAL_LTDC_Init>:
{
 8009e20:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009e22:	4604      	mov	r4, r0
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d04e      	beq.n	8009ec6 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009e28:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009e2c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009e30:	b91b      	cbnz	r3, 8009e3a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009e32:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009e36:	f7f7 fae1 	bl	80013fc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009e48:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e4a:	6999      	ldr	r1, [r3, #24]
 8009e4c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009e50:	4302      	orrs	r2, r0
 8009e52:	68e0      	ldr	r0, [r4, #12]
 8009e54:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e56:	6920      	ldr	r0, [r4, #16]
 8009e58:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009e5e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8009e62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e66:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009e68:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e70:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009e72:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8009e76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e7a:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009e7c:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8009e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e84:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e88:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e8c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e90:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e96:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8009e98:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8009e9c:	432a      	orrs	r2, r5
 8009e9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ea2:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009ea4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eac:	f042 0206 	orr.w	r2, r2, #6
 8009eb0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	f042 0201 	orr.w	r2, r2, #1
 8009eb8:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8009eba:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ebc:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ec0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	e7fc      	b.n	8009ec4 <HAL_LTDC_Init+0xa4>

08009eca <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8009eca:	4770      	bx	lr

08009ecc <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8009ecc:	4770      	bx	lr

08009ece <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8009ece:	4770      	bx	lr

08009ed0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009ed0:	6803      	ldr	r3, [r0, #0]
{
 8009ed2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009ed4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8009ed6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009ed8:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009eda:	0772      	lsls	r2, r6, #29
 8009edc:	d514      	bpl.n	8009f08 <HAL_LTDC_IRQHandler+0x38>
 8009ede:	0769      	lsls	r1, r5, #29
 8009ee0:	d512      	bpl.n	8009f08 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ee4:	f022 0204 	bic.w	r2, r2, #4
 8009ee8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009eea:	2204      	movs	r2, #4
 8009eec:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009eee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8009efa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009efc:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009f00:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009f04:	f7ff ffe1 	bl	8009eca <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009f08:	07b2      	lsls	r2, r6, #30
 8009f0a:	d516      	bpl.n	8009f3a <HAL_LTDC_IRQHandler+0x6a>
 8009f0c:	07ab      	lsls	r3, r5, #30
 8009f0e:	d514      	bpl.n	8009f3a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009f10:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009f12:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f16:	f022 0202 	bic.w	r2, r2, #2
 8009f1a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009f20:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009f24:	4313      	orrs	r3, r2
 8009f26:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f2a:	2304      	movs	r3, #4
 8009f2c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009f30:	2300      	movs	r3, #0
 8009f32:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009f36:	f7ff ffc8 	bl	8009eca <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009f3a:	07f0      	lsls	r0, r6, #31
 8009f3c:	d510      	bpl.n	8009f60 <HAL_LTDC_IRQHandler+0x90>
 8009f3e:	07e9      	lsls	r1, r5, #31
 8009f40:	d50e      	bpl.n	8009f60 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009f42:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009f44:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f48:	f022 0201 	bic.w	r2, r2, #1
 8009f4c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009f4e:	2201      	movs	r2, #1
 8009f50:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8009f52:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f54:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009f58:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009f5c:	f7ff ffb6 	bl	8009ecc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f60:	0732      	lsls	r2, r6, #28
 8009f62:	d511      	bpl.n	8009f88 <HAL_LTDC_IRQHandler+0xb8>
 8009f64:	072b      	lsls	r3, r5, #28
 8009f66:	d50f      	bpl.n	8009f88 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f68:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f6a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f6e:	f022 0208 	bic.w	r2, r2, #8
 8009f72:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f74:	2208      	movs	r2, #8
 8009f76:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f84:	f7ff ffa3 	bl	8009ece <HAL_LTDC_ReloadEventCallback>
}
 8009f88:	bd70      	pop	{r4, r5, r6, pc}

08009f8a <HAL_LTDC_ConfigLayer>:
{
 8009f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8009f8e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f04f 0002 	mov.w	r0, #2
 8009f9e:	d01f      	beq.n	8009fe0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fa0:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8009fa2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fa6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009fa8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fac:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8009fb0:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fb4:	3438      	adds	r4, #56	@ 0x38
 8009fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fc2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4662      	mov	r2, ip
 8009fc8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fca:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009fcc:	f7ff feb2 	bl	8009d34 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009fd0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8009fd2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009fd4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009fd8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009fdc:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009fe4 <HAL_LTDC_SetPitch>:
{
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009fe8:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 8009fec:	2801      	cmp	r0, #1
 8009fee:	f04f 0002 	mov.w	r0, #2
 8009ff2:	d026      	beq.n	800a042 <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ff4:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009ff8:	2034      	movs	r0, #52	@ 0x34
 8009ffa:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009ffe:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a000:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a002:	3284      	adds	r2, #132	@ 0x84
 800a004:	2807      	cmp	r0, #7
 800a006:	bf96      	itet	ls
 800a008:	4c0e      	ldrls	r4, [pc, #56]	@ (800a044 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a00a:	2401      	movhi	r4, #1
 800a00c:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a00e:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800a010:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a012:	4402      	add	r2, r0
 800a014:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800a016:	f36f 401c 	bfc	r0, #16, #13
 800a01a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a01c:	480a      	ldr	r0, [pc, #40]	@ (800a048 <HAL_LTDC_SetPitch+0x64>)
 800a01e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 800a020:	f045 0501 	orr.w	r5, r5, #1
 800a024:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800a026:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800a028:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800a02c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a02e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a030:	f042 0201 	orr.w	r2, r2, #1
 800a034:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a036:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800a038:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800a03a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a03e:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800a042:	bd30      	pop	{r4, r5, pc}
 800a044:	08028400 	.word	0x08028400
 800a048:	50001000 	.word	0x50001000

0800a04c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a04c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a04e:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a050:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a054:	6965      	ldr	r5, [r4, #20]
 800a056:	f363 0510 	bfi	r5, r3, #0, #17
 800a05a:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a05c:	9d03      	ldr	r5, [sp, #12]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	f105 35ff 	add.w	r5, r5, #4294967295
 800a064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a068:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800a06c:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a06e:	f04f 031f 	mov.w	r3, #31
 800a072:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800a074:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800a076:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a078:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a07a:	bf0c      	ite	eq
 800a07c:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a080:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a084:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a088:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800a08a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a08c:	bf0c      	ite	eq
 800a08e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800a092:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800a096:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800a098:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800a09a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a09c:	bd30      	pop	{r4, r5, pc}

0800a09e <HAL_MDMA_Init>:
{
 800a09e:	b538      	push	{r3, r4, r5, lr}
 800a0a0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a0a2:	f7fc f949 	bl	8006338 <HAL_GetTick>
 800a0a6:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	d061      	beq.n	800a170 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800a0ac:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800a0ae:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800a0b0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800a0ba:	68d3      	ldr	r3, [r2, #12]
 800a0bc:	f023 0301 	bic.w	r3, r3, #1
 800a0c0:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	68da      	ldr	r2, [r3, #12]
 800a0c6:	07d2      	lsls	r2, r2, #31
 800a0c8:	d448      	bmi.n	800a15c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a0ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a0d2:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	69e1      	ldr	r1, [r4, #28]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	6a21      	ldr	r1, [r4, #32]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	68a1      	ldr	r1, [r4, #8]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a0f2:	3901      	subs	r1, #1
 800a0f4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a0fe:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a100:	d103      	bne.n	800a10a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800a108:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a10a:	2200      	movs	r2, #0
 800a10c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a10e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a110:	2a00      	cmp	r2, #0
 800a112:	da04      	bge.n	800a11e <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a114:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a116:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a118:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800a11c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a11e:	b292      	uxth	r2, r2
 800a120:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a122:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a124:	2a00      	cmp	r2, #0
 800a126:	da25      	bge.n	800a174 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a128:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a12a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a12c:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800a130:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a132:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a134:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a138:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a13c:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a13e:	f04f 0200 	mov.w	r2, #0
 800a142:	d019      	beq.n	800a178 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a144:	b2c9      	uxtb	r1, r1
 800a146:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a148:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800a14a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a14c:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800a14e:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800a150:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800a152:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800a156:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800a15a:	e00a      	b.n	800a172 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a15c:	f7fc f8ec 	bl	8006338 <HAL_GetTick>
 800a160:	1b40      	subs	r0, r0, r5
 800a162:	2805      	cmp	r0, #5
 800a164:	d9ad      	bls.n	800a0c2 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a166:	2340      	movs	r3, #64	@ 0x40
 800a168:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a16a:	2303      	movs	r3, #3
 800a16c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800a170:	2001      	movs	r0, #1
}
 800a172:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a174:	6a18      	ldr	r0, [r3, #32]
 800a176:	e7dd      	b.n	800a134 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800a178:	629a      	str	r2, [r3, #40]	@ 0x28
 800a17a:	e7e5      	b.n	800a148 <HAL_MDMA_Init+0xaa>

0800a17c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800a17c:	b1d8      	cbz	r0, 800a1b6 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800a17e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a180:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800a182:	68d3      	ldr	r3, [r2, #12]
 800a184:	f023 0301 	bic.w	r3, r3, #1
 800a188:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800a18e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800a190:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800a192:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800a194:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800a196:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800a198:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800a19a:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800a19c:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800a19e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a1a0:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a1a2:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800a1a4:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800a1a6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800a1aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a1ae:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	4770      	bx	lr
    return HAL_ERROR;
 800a1b6:	2001      	movs	r0, #1
}
 800a1b8:	4770      	bx	lr

0800a1ba <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800a1ba:	4603      	mov	r3, r0
{
 800a1bc:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800a1be:	b300      	cbz	r0, 800a202 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800a1c0:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800a1c4:	2801      	cmp	r0, #1
 800a1c6:	d01e      	beq.n	800a206 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800a1c8:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a1ca:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800a1ce:	42a5      	cmp	r5, r4
 800a1d0:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800a1d2:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a1d6:	d112      	bne.n	800a1fe <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a1d8:	681c      	ldr	r4, [r3, #0]
 800a1da:	6925      	ldr	r5, [r4, #16]
 800a1dc:	006d      	lsls	r5, r5, #1
 800a1de:	d407      	bmi.n	800a1f0 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800a1e0:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a1e2:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a1e4:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800a1e6:	b939      	cbnz	r1, 800a1f8 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a1e8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800a1ec:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a1ee:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a1f6:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a1f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a1fc:	e7f6      	b.n	800a1ec <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800a1fe:	4620      	mov	r0, r4
 800a200:	e7f6      	b.n	800a1f0 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800a202:	2001      	movs	r0, #1
 800a204:	e7f7      	b.n	800a1f6 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800a206:	2002      	movs	r0, #2
 800a208:	e7f5      	b.n	800a1f6 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800a20a <HAL_MDMA_Start_IT>:
{
 800a20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800a20c:	4604      	mov	r4, r0
 800a20e:	2800      	cmp	r0, #0
 800a210:	d042      	beq.n	800a298 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800a212:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800a216:	2d01      	cmp	r5, #1
 800a218:	d03c      	beq.n	800a294 <HAL_MDMA_Start_IT+0x8a>
 800a21a:	2501      	movs	r5, #1
 800a21c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a220:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800a224:	2d01      	cmp	r5, #1
 800a226:	f04f 0500 	mov.w	r5, #0
 800a22a:	d131      	bne.n	800a290 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a22c:	2602      	movs	r6, #2
 800a22e:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a232:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800a234:	6805      	ldr	r5, [r0, #0]
 800a236:	68ee      	ldr	r6, [r5, #12]
 800a238:	f026 0601 	bic.w	r6, r6, #1
 800a23c:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a23e:	9e06      	ldr	r6, [sp, #24]
 800a240:	9600      	str	r6, [sp, #0]
 800a242:	f7ff ff03 	bl	800a04c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a246:	68eb      	ldr	r3, [r5, #12]
 800a248:	f043 0306 	orr.w	r3, r3, #6
 800a24c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800a24e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a250:	b11b      	cbz	r3, 800a25a <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a252:	68eb      	ldr	r3, [r5, #12]
 800a254:	f043 0310 	orr.w	r3, r3, #16
 800a258:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a25a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a25c:	b11b      	cbz	r3, 800a266 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a25e:	68eb      	ldr	r3, [r5, #12]
 800a260:	f043 0308 	orr.w	r3, r3, #8
 800a264:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800a266:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a268:	b11b      	cbz	r3, 800a272 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a26a:	68eb      	ldr	r3, [r5, #12]
 800a26c:	f043 0320 	orr.w	r3, r3, #32
 800a270:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800a272:	68eb      	ldr	r3, [r5, #12]
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a280:	d103      	bne.n	800a28a <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a282:	68eb      	ldr	r3, [r5, #12]
 800a284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a288:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800a28a:	2000      	movs	r0, #0
}
 800a28c:	b002      	add	sp, #8
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800a290:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800a294:	2002      	movs	r0, #2
 800a296:	e7f9      	b.n	800a28c <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800a298:	2001      	movs	r0, #1
 800a29a:	e7f7      	b.n	800a28c <HAL_MDMA_Start_IT+0x82>

0800a29c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800a29c:	b128      	cbz	r0, 800a2aa <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a29e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d003      	beq.n	800a2ae <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a2a6:	2380      	movs	r3, #128	@ 0x80
 800a2a8:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800a2ae:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800a2b6:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800a2b8:	68d3      	ldr	r3, [r2, #12]
 800a2ba:	f023 0301 	bic.w	r3, r3, #1
 800a2be:	60d3      	str	r3, [r2, #12]
}
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a2c4:	2300      	movs	r3, #0
{
 800a2c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800a2c8:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a2ca:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2ce:	4b58      	ldr	r3, [pc, #352]	@ (800a430 <HAL_MDMA_IRQHandler+0x16c>)
{
 800a2d0:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a2d2:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2d4:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a2d6:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a2d8:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a2da:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800a2de:	3a40      	subs	r2, #64	@ 0x40
 800a2e0:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800a2e4:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a2e8:	4202      	tst	r2, r0
 800a2ea:	f000 809e 	beq.w	800a42a <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	07d1      	lsls	r1, r2, #31
 800a2f2:	d529      	bpl.n	800a348 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	0792      	lsls	r2, r2, #30
 800a2f8:	d526      	bpl.n	800a348 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	f022 0202 	bic.w	r2, r2, #2
 800a300:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800a302:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a304:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a306:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a308:	bf54      	ite	pl
 800a30a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a30e:	f041 0102 	orrmi.w	r1, r1, #2
 800a312:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a314:	0591      	lsls	r1, r2, #22
 800a316:	d503      	bpl.n	800a320 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a318:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a31a:	f041 0104 	orr.w	r1, r1, #4
 800a31e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a320:	05d0      	lsls	r0, r2, #23
 800a322:	d503      	bpl.n	800a32c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a324:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a326:	f041 0108 	orr.w	r1, r1, #8
 800a32a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a32c:	0551      	lsls	r1, r2, #21
 800a32e:	d503      	bpl.n	800a338 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a330:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a332:	f041 0110 	orr.w	r1, r1, #16
 800a336:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a338:	0512      	lsls	r2, r2, #20
 800a33a:	d503      	bpl.n	800a344 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a33c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a33e:	f042 0220 	orr.w	r2, r2, #32
 800a342:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a344:	2201      	movs	r2, #1
 800a346:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	06d0      	lsls	r0, r2, #27
 800a34c:	d508      	bpl.n	800a360 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	0691      	lsls	r1, r2, #26
 800a352:	d505      	bpl.n	800a360 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a354:	2210      	movs	r2, #16
 800a356:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800a358:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a35a:	b10b      	cbz	r3, 800a360 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800a35c:	4620      	mov	r0, r4
 800a35e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	0712      	lsls	r2, r2, #28
 800a366:	d508      	bpl.n	800a37a <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	06d0      	lsls	r0, r2, #27
 800a36c:	d505      	bpl.n	800a37a <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a36e:	2208      	movs	r2, #8
 800a370:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800a372:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a374:	b10b      	cbz	r3, 800a37a <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800a376:	4620      	mov	r0, r4
 800a378:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	0751      	lsls	r1, r2, #29
 800a380:	d508      	bpl.n	800a394 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	0712      	lsls	r2, r2, #28
 800a386:	d505      	bpl.n	800a394 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a388:	2204      	movs	r2, #4
 800a38a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a38c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a38e:	b10b      	cbz	r3, 800a394 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a390:	4620      	mov	r0, r4
 800a392:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	0790      	lsls	r0, r2, #30
 800a39a:	d524      	bpl.n	800a3e6 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	0751      	lsls	r1, r2, #29
 800a3a0:	d521      	bpl.n	800a3e6 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a3a8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a3aa:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800a3ae:	2a04      	cmp	r2, #4
 800a3b0:	f04f 0200 	mov.w	r2, #0
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800a3b6:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800a3b8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800a3bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800a3c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d031      	beq.n	800a42a <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800a3c6:	4620      	mov	r0, r4
}
 800a3c8:	b003      	add	sp, #12
 800a3ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800a3ce:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800a3d4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800a3d6:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800a3da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800a3de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a3e0:	b10b      	cbz	r3, 800a3e6 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a3e6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a3e8:	b1fb      	cbz	r3, 800a42a <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3ea:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800a3ee:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	f022 0201 	bic.w	r2, r2, #1
 800a400:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	3201      	adds	r2, #1
 800a406:	42aa      	cmp	r2, r5
 800a408:	9201      	str	r2, [sp, #4]
 800a40a:	d802      	bhi.n	800a412 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	07d2      	lsls	r2, r2, #31
 800a410:	d4f7      	bmi.n	800a402 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800a412:	2200      	movs	r2, #0
 800a414:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a41c:	bf4c      	ite	mi
 800a41e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800a420:	2301      	movpl	r3, #1
 800a422:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800a426:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a428:	e7cb      	b.n	800a3c2 <HAL_MDMA_IRQHandler+0xfe>
}
 800a42a:	b003      	add	sp, #12
 800a42c:	bd30      	pop	{r4, r5, pc}
 800a42e:	bf00      	nop
 800a430:	2400006c 	.word	0x2400006c

0800a434 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a434:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a436:	4d1c      	ldr	r5, [pc, #112]	@ (800a4a8 <HAL_PWREx_ConfigSupply+0x74>)
{
 800a438:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a43a:	68eb      	ldr	r3, [r5, #12]
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	2b06      	cmp	r3, #6
 800a442:	d006      	beq.n	800a452 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a444:	68e8      	ldr	r0, [r5, #12]
 800a446:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a44a:	1b00      	subs	r0, r0, r4
 800a44c:	bf18      	it	ne
 800a44e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a450:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a452:	68eb      	ldr	r3, [r5, #12]
 800a454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a458:	4303      	orrs	r3, r0
 800a45a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800a45c:	f7fb ff6c 	bl	8006338 <HAL_GetTick>
 800a460:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a462:	686b      	ldr	r3, [r5, #4]
 800a464:	049a      	lsls	r2, r3, #18
 800a466:	d508      	bpl.n	800a47a <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a468:	f1a4 031d 	sub.w	r3, r4, #29
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d90c      	bls.n	800a48a <HAL_PWREx_ConfigSupply+0x56>
 800a470:	3c2d      	subs	r4, #45	@ 0x2d
 800a472:	2c01      	cmp	r4, #1
 800a474:	d909      	bls.n	800a48a <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800a476:	2000      	movs	r0, #0
 800a478:	e7ea      	b.n	800a450 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a47a:	f7fb ff5d 	bl	8006338 <HAL_GetTick>
 800a47e:	1b80      	subs	r0, r0, r6
 800a480:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a484:	d9ed      	bls.n	800a462 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800a486:	2001      	movs	r0, #1
 800a488:	e7e2      	b.n	800a450 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800a48a:	f7fb ff55 	bl	8006338 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a48e:	4d06      	ldr	r5, [pc, #24]	@ (800a4a8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800a490:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a492:	68eb      	ldr	r3, [r5, #12]
 800a494:	03db      	lsls	r3, r3, #15
 800a496:	d4ee      	bmi.n	800a476 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a498:	f7fb ff4e 	bl	8006338 <HAL_GetTick>
 800a49c:	1b00      	subs	r0, r0, r4
 800a49e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a4a2:	d9f6      	bls.n	800a492 <HAL_PWREx_ConfigSupply+0x5e>
 800a4a4:	e7ef      	b.n	800a486 <HAL_PWREx_ConfigSupply+0x52>
 800a4a6:	bf00      	nop
 800a4a8:	58024800 	.word	0x58024800

0800a4ac <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a4b0:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800a4b2:	b134      	cbz	r4, 800a4c2 <QSPI_Config+0x16>
 800a4b4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800a4b8:	d003      	beq.n	800a4c2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a4ba:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a4bc:	6805      	ldr	r5, [r0, #0]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a4c2:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a4c6:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a4ca:	f1ba 0f00 	cmp.w	sl, #0
 800a4ce:	d052      	beq.n	800a576 <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4d0:	694f      	ldr	r7, [r1, #20]
 800a4d2:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a4d6:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4d8:	04bf      	lsls	r7, r7, #18
 800a4da:	680b      	ldr	r3, [r1, #0]
 800a4dc:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 800a4e0:	ea4a 0a02 	orr.w	sl, sl, r2
 800a4e4:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a4e8:	b34e      	cbz	r6, 800a53e <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a4ea:	688c      	ldr	r4, [r1, #8]
 800a4ec:	ea4a 0006 	orr.w	r0, sl, r6
 800a4f0:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4f2:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a4f4:	f1bc 0f00 	cmp.w	ip, #0
 800a4f8:	d013      	beq.n	800a522 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4fa:	ea43 030c 	orr.w	r3, r3, ip
 800a4fe:	ea43 0309 	orr.w	r3, r3, r9
 800a502:	ea43 0308 	orr.w	r3, r3, r8
 800a506:	ea43 030e 	orr.w	r3, r3, lr
 800a50a:	4323      	orrs	r3, r4
 800a50c:	68cc      	ldr	r4, [r1, #12]
 800a50e:	4323      	orrs	r3, r4
 800a510:	433b      	orrs	r3, r7
 800a512:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a514:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a518:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a51a:	d00e      	beq.n	800a53a <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a51c:	684b      	ldr	r3, [r1, #4]
 800a51e:	61ab      	str	r3, [r5, #24]
 800a520:	e00b      	b.n	800a53a <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a522:	ea43 0309 	orr.w	r3, r3, r9
 800a526:	ea43 0308 	orr.w	r3, r3, r8
 800a52a:	ea43 030e 	orr.w	r3, r3, lr
 800a52e:	4323      	orrs	r3, r4
 800a530:	433b      	orrs	r3, r7
 800a532:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a534:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a536:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a53e:	f1bc 0f00 	cmp.w	ip, #0
 800a542:	d00d      	beq.n	800a560 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a544:	ea43 030c 	orr.w	r3, r3, ip
 800a548:	68c8      	ldr	r0, [r1, #12]
 800a54a:	ea43 0309 	orr.w	r3, r3, r9
 800a54e:	ea43 0308 	orr.w	r3, r3, r8
 800a552:	ea43 030e 	orr.w	r3, r3, lr
 800a556:	4303      	orrs	r3, r0
 800a558:	433b      	orrs	r3, r7
 800a55a:	ea43 030a 	orr.w	r3, r3, sl
 800a55e:	e7d9      	b.n	800a514 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a560:	ea43 0309 	orr.w	r3, r3, r9
 800a564:	ea43 0308 	orr.w	r3, r3, r8
 800a568:	ea43 000e 	orr.w	r0, r3, lr
 800a56c:	ea40 0307 	orr.w	r3, r0, r7
 800a570:	ea43 030a 	orr.w	r3, r3, sl
 800a574:	e7de      	b.n	800a534 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a576:	b316      	cbz	r6, 800a5be <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a578:	688b      	ldr	r3, [r1, #8]
 800a57a:	4326      	orrs	r6, r4
 800a57c:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a57e:	694f      	ldr	r7, [r1, #20]
 800a580:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a582:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a584:	04bf      	lsls	r7, r7, #18
 800a586:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a588:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800a58a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a58e:	f1bc 0f00 	cmp.w	ip, #0
 800a592:	d00b      	beq.n	800a5ac <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a594:	ea43 030c 	orr.w	r3, r3, ip
 800a598:	68c8      	ldr	r0, [r1, #12]
 800a59a:	ea43 0308 	orr.w	r3, r3, r8
 800a59e:	ea43 030e 	orr.w	r3, r3, lr
 800a5a2:	4323      	orrs	r3, r4
 800a5a4:	4303      	orrs	r3, r0
 800a5a6:	433b      	orrs	r3, r7
 800a5a8:	4333      	orrs	r3, r6
 800a5aa:	e7b3      	b.n	800a514 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5ac:	ea43 0208 	orr.w	r2, r3, r8
 800a5b0:	ea42 020e 	orr.w	r2, r2, lr
 800a5b4:	4322      	orrs	r2, r4
 800a5b6:	433a      	orrs	r2, r7
 800a5b8:	4332      	orrs	r2, r6
 800a5ba:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a5bc:	e7bb      	b.n	800a536 <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a5be:	f1bc 0f00 	cmp.w	ip, #0
 800a5c2:	d01a      	beq.n	800a5fa <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5c4:	ea44 030c 	orr.w	r3, r4, ip
 800a5c8:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800a5ca:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a5cc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5d0:	ea43 0302 	orr.w	r3, r3, r2
 800a5d4:	ea43 0304 	orr.w	r3, r3, r4
 800a5d8:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800a5da:	ea43 0304 	orr.w	r3, r3, r4
 800a5de:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800a5e0:	ea43 0304 	orr.w	r3, r3, r4
 800a5e4:	68cc      	ldr	r4, [r1, #12]
 800a5e6:	ea43 0304 	orr.w	r3, r3, r4
 800a5ea:	694c      	ldr	r4, [r1, #20]
 800a5ec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800a5f0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a5f2:	d0a2      	beq.n	800a53a <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a5f4:	684b      	ldr	r3, [r1, #4]
 800a5f6:	6183      	str	r3, [r0, #24]
 800a5f8:	e79f      	b.n	800a53a <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	d09d      	beq.n	800a53a <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5fe:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a600:	6800      	ldr	r0, [r0, #0]
 800a602:	4323      	orrs	r3, r4
 800a604:	4313      	orrs	r3, r2
 800a606:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a608:	4313      	orrs	r3, r2
 800a60a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a60c:	4313      	orrs	r3, r2
 800a60e:	694a      	ldr	r2, [r1, #20]
 800a610:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800a614:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800a616:	f8c0 c018 	str.w	ip, [r0, #24]
}
 800a61a:	e78e      	b.n	800a53a <QSPI_Config+0x8e>

0800a61c <QSPI_WaitFlagStateUntilTimeout>:
{
 800a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a620:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a624:	4604      	mov	r4, r0
 800a626:	460e      	mov	r6, r1
 800a628:	4615      	mov	r5, r2
 800a62a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	6893      	ldr	r3, [r2, #8]
 800a630:	4233      	tst	r3, r6
 800a632:	bf14      	ite	ne
 800a634:	2301      	movne	r3, #1
 800a636:	2300      	moveq	r3, #0
 800a638:	42ab      	cmp	r3, r5
 800a63a:	d101      	bne.n	800a640 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800a63c:	2000      	movs	r0, #0
 800a63e:	e00f      	b.n	800a660 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800a640:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a644:	d0f3      	beq.n	800a62e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a646:	f7fb fe77 	bl	8006338 <HAL_GetTick>
 800a64a:	1bc0      	subs	r0, r0, r7
 800a64c:	4540      	cmp	r0, r8
 800a64e:	d909      	bls.n	800a664 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a650:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a652:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a654:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a658:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a65a:	f043 0301 	orr.w	r3, r3, #1
 800a65e:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a664:	f1b8 0f00 	cmp.w	r8, #0
 800a668:	d1e0      	bne.n	800a62c <QSPI_WaitFlagStateUntilTimeout+0x10>
 800a66a:	e7f1      	b.n	800a650 <QSPI_WaitFlagStateUntilTimeout+0x34>

0800a66c <HAL_QSPI_Init>:
{
 800a66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a66e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a670:	f7fb fe62 	bl	8006338 <HAL_GetTick>
 800a674:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800a676:	2c00      	cmp	r4, #0
 800a678:	d03f      	beq.n	800a6fa <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a67a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a67e:	b92b      	cbnz	r3, 800a68c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800a680:	4620      	mov	r0, r4
 800a682:	f7f6 fef9 	bl	8001478 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800a686:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a68a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a68c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a68e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	680a      	ldr	r2, [r1, #0]
 800a694:	3b01      	subs	r3, #1
 800a696:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800a69a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a69e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a6a0:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	2120      	movs	r1, #32
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7ff ffb7 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800a6ae:	bb10      	cbnz	r0, 800a6f6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	69e5      	ldr	r5, [r4, #28]
 800a6b4:	68e3      	ldr	r3, [r4, #12]
 800a6b6:	6811      	ldr	r1, [r2, #0]
 800a6b8:	432b      	orrs	r3, r5
 800a6ba:	6a25      	ldr	r5, [r4, #32]
 800a6bc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800a6c0:	432b      	orrs	r3, r5
 800a6c2:	6865      	ldr	r5, [r4, #4]
 800a6c4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800a6c8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a6d0:	6855      	ldr	r5, [r2, #4]
 800a6d2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6921      	ldr	r1, [r4, #16]
 800a6da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a6de:	4908      	ldr	r1, [pc, #32]	@ (800a700 <HAL_QSPI_Init+0x94>)
 800a6e0:	4029      	ands	r1, r5
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800a6e6:	6813      	ldr	r3, [r2, #0]
 800a6e8:	f043 0301 	orr.w	r3, r3, #1
 800a6ec:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800a6ee:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a6f0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800a6f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800a6f6:	b003      	add	sp, #12
 800a6f8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	e7fb      	b.n	800a6f6 <HAL_QSPI_Init+0x8a>
 800a6fe:	bf00      	nop
 800a700:	ffe0f8fe 	.word	0xffe0f8fe

0800a704 <HAL_QSPI_Command>:
{
 800a704:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	468a      	mov	sl, r1
 800a70c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800a70e:	f7fb fe13 	bl	8006338 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a712:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a716:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d035      	beq.n	800a788 <HAL_QSPI_Command+0x84>
 800a71c:	2301      	movs	r3, #1
 800a71e:	2602      	movs	r6, #2
 800a720:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a724:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a728:	2b01      	cmp	r3, #1
 800a72a:	fa5f f983 	uxtb.w	r9, r3
 800a72e:	d129      	bne.n	800a784 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a730:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a732:	4603      	mov	r3, r0
 800a734:	2120      	movs	r1, #32
 800a736:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a738:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a73a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a73e:	f8cd 8000 	str.w	r8, [sp]
 800a742:	f7ff ff6b 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a746:	4605      	mov	r5, r0
 800a748:	b9a8      	cbnz	r0, 800a776 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a74a:	4602      	mov	r2, r0
 800a74c:	4651      	mov	r1, sl
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff feac 	bl	800a4ac <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800a754:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800a758:	b95b      	cbnz	r3, 800a772 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a75a:	463b      	mov	r3, r7
 800a75c:	464a      	mov	r2, r9
 800a75e:	4631      	mov	r1, r6
 800a760:	4620      	mov	r0, r4
 800a762:	f8cd 8000 	str.w	r8, [sp]
 800a766:	f7ff ff59 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a76a:	4605      	mov	r5, r0
 800a76c:	b918      	cbnz	r0, 800a776 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a772:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a776:	2300      	movs	r3, #0
 800a778:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a77c:	4628      	mov	r0, r5
 800a77e:	b002      	add	sp, #8
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800a784:	4635      	mov	r5, r6
 800a786:	e7f6      	b.n	800a776 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 800a788:	2502      	movs	r5, #2
 800a78a:	e7f7      	b.n	800a77c <HAL_QSPI_Command+0x78>

0800a78c <HAL_QSPI_Transmit>:
{
 800a78c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	4688      	mov	r8, r1
 800a794:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800a796:	f7fb fdcf 	bl	8006338 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a79a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a79e:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a7a0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d04c      	beq.n	800a840 <HAL_QSPI_Transmit+0xb4>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a7ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	b2d8      	uxtb	r0, r3
 800a7b4:	d142      	bne.n	800a83c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a7ba:	f1b8 0f00 	cmp.w	r8, #0
 800a7be:	d038      	beq.n	800a832 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a7c0:	2312      	movs	r3, #18
 800a7c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a7c6:	692b      	ldr	r3, [r5, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a7cc:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800a7ce:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a7d6:	696b      	ldr	r3, [r5, #20]
 800a7d8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800a7dc:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800a7de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a7e0:	b99b      	cbnz	r3, 800a80a <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a7e2:	4633      	mov	r3, r6
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	9700      	str	r7, [sp, #0]
 800a7ec:	f7ff ff16 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a7f0:	b910      	cbnz	r0, 800a7f8 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a7fe:	2300      	movs	r3, #0
 800a800:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a804:	b002      	add	sp, #8
 800a806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a80a:	4633      	mov	r3, r6
 800a80c:	2201      	movs	r2, #1
 800a80e:	2104      	movs	r1, #4
 800a810:	4620      	mov	r0, r4
 800a812:	9700      	str	r7, [sp, #0]
 800a814:	f7ff ff02 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a818:	2800      	cmp	r0, #0
 800a81a:	d1ed      	bne.n	800a7f8 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a81c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a824:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a826:	3301      	adds	r3, #1
 800a828:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a82a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a82c:	3b01      	subs	r3, #1
 800a82e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a830:	e7d5      	b.n	800a7de <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a832:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a834:	f043 0308 	orr.w	r3, r3, #8
 800a838:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a83a:	e7e0      	b.n	800a7fe <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800a83c:	2002      	movs	r0, #2
 800a83e:	e7de      	b.n	800a7fe <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800a840:	2002      	movs	r0, #2
 800a842:	e7df      	b.n	800a804 <HAL_QSPI_Transmit+0x78>

0800a844 <HAL_QSPI_Receive>:
{
 800a844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a848:	4604      	mov	r4, r0
 800a84a:	4617      	mov	r7, r2
 800a84c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a84e:	f7fb fd73 	bl	8006338 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a852:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a854:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a856:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800a858:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d04f      	beq.n	800a900 <HAL_QSPI_Receive+0xbc>
 800a860:	2301      	movs	r3, #1
 800a862:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a866:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	b2d8      	uxtb	r0, r3
 800a86e:	d145      	bne.n	800a8fc <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a870:	2300      	movs	r3, #0
 800a872:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a874:	f1b8 0f00 	cmp.w	r8, #0
 800a878:	d03b      	beq.n	800a8f2 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a87a:	2322      	movs	r3, #34	@ 0x22
 800a87c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a880:	692b      	ldr	r3, [r5, #16]
 800a882:	3301      	adds	r3, #1
 800a884:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a886:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800a888:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a88c:	3301      	adds	r3, #1
 800a88e:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a890:	6969      	ldr	r1, [r5, #20]
 800a892:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a896:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800a89a:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a89c:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800a89e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a8a0:	b99b      	cbnz	r3, 800a8ca <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a8a2:	4633      	mov	r3, r6
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	9700      	str	r7, [sp, #0]
 800a8ac:	f7ff feb6 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800a8b0:	b910      	cbnz	r0, 800a8b8 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a8c4:	b002      	add	sp, #8
 800a8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a8ca:	4633      	mov	r3, r6
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	2106      	movs	r1, #6
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	9700      	str	r7, [sp, #0]
 800a8d4:	f7ff fea2 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d1ed      	bne.n	800a8b8 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a8dc:	f895 2020 	ldrb.w	r2, [r5, #32]
 800a8e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a8e2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a8e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800a8ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a8f0:	e7d5      	b.n	800a89e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a8f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a8f4:	f043 0308 	orr.w	r3, r3, #8
 800a8f8:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a8fa:	e7e0      	b.n	800a8be <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800a8fc:	2002      	movs	r0, #2
 800a8fe:	e7de      	b.n	800a8be <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800a900:	2002      	movs	r0, #2
 800a902:	e7df      	b.n	800a8c4 <HAL_QSPI_Receive+0x80>

0800a904 <HAL_QSPI_AutoPolling>:
{
 800a904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	461f      	mov	r7, r3
 800a90c:	4689      	mov	r9, r1
 800a90e:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800a910:	f7fb fd12 	bl	8006338 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a914:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a918:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d041      	beq.n	800a9a2 <HAL_QSPI_AutoPolling+0x9e>
 800a91e:	2301      	movs	r3, #1
 800a920:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a924:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a928:	2b01      	cmp	r3, #1
 800a92a:	fa5f f883 	uxtb.w	r8, r3
 800a92e:	d136      	bne.n	800a99e <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a930:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a932:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a934:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a936:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a938:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a93c:	4603      	mov	r3, r0
 800a93e:	9700      	str	r7, [sp, #0]
 800a940:	4620      	mov	r0, r4
 800a942:	f7ff fe6b 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a946:	bb20      	cbnz	r0, 800a992 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a948:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a94a:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a94c:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a94e:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a950:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a952:	686b      	ldr	r3, [r5, #4]
 800a954:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a956:	68ab      	ldr	r3, [r5, #8]
 800a958:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a960:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a962:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a964:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a968:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a96a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800a96e:	68eb      	ldr	r3, [r5, #12]
 800a970:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a974:	f7ff fd9a 	bl	800a4ac <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a978:	4633      	mov	r3, r6
 800a97a:	4642      	mov	r2, r8
 800a97c:	2108      	movs	r1, #8
 800a97e:	4620      	mov	r0, r4
 800a980:	9700      	str	r7, [sp, #0]
 800a982:	f7ff fe4b 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a986:	b920      	cbnz	r0, 800a992 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	2208      	movs	r2, #8
 800a98c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a98e:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a992:	2300      	movs	r3, #0
 800a994:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a998:	b003      	add	sp, #12
 800a99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a99e:	2002      	movs	r0, #2
 800a9a0:	e7f7      	b.n	800a992 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800a9a2:	2002      	movs	r0, #2
 800a9a4:	e7f8      	b.n	800a998 <HAL_QSPI_AutoPolling+0x94>

0800a9a6 <HAL_QSPI_MemoryMapped>:
{
 800a9a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	4616      	mov	r6, r2
 800a9ac:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a9ae:	f7fb fcc3 	bl	8006338 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a9b2:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a9b6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a9b8:	2a01      	cmp	r2, #1
 800a9ba:	d033      	beq.n	800aa24 <HAL_QSPI_MemoryMapped+0x7e>
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a9c2:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a9c6:	2a01      	cmp	r2, #1
 800a9c8:	d12a      	bne.n	800aa20 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9ca:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a9cc:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a9ce:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9d0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a9d2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a9d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a9d8:	9100      	str	r1, [sp, #0]
 800a9da:	2120      	movs	r1, #32
 800a9dc:	f7ff fe1e 	bl	800a61c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	b9b8      	cbnz	r0, 800aa14 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	6872      	ldr	r2, [r6, #4]
 800a9e8:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a9ea:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a9ec:	f020 0008 	bic.w	r0, r0, #8
 800a9f0:	ea40 0002 	orr.w	r0, r0, r2
 800a9f4:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a9f6:	d107      	bne.n	800aa08 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a9f8:	6832      	ldr	r2, [r6, #0]
 800a9fa:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a9fc:	2210      	movs	r2, #16
 800a9fe:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800aa06:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800aa08:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff fd4c 	bl	800a4ac <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800aa14:	2300      	movs	r3, #0
 800aa16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800aa20:	2502      	movs	r5, #2
 800aa22:	e7f7      	b.n	800aa14 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800aa24:	2502      	movs	r5, #2
 800aa26:	e7f8      	b.n	800aa1a <HAL_QSPI_MemoryMapped+0x74>

0800aa28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d074      	beq.n	800ab1a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa30:	6803      	ldr	r3, [r0, #0]
 800aa32:	07d8      	lsls	r0, r3, #31
 800aa34:	d45e      	bmi.n	800aaf4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	0799      	lsls	r1, r3, #30
 800aa3a:	f100 80ad 	bmi.w	800ab98 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	06da      	lsls	r2, r3, #27
 800aa42:	d527      	bpl.n	800aa94 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa44:	4a9c      	ldr	r2, [pc, #624]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800aa46:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa4e:	2b08      	cmp	r3, #8
 800aa50:	d007      	beq.n	800aa62 <HAL_RCC_OscConfig+0x3a>
 800aa52:	2b18      	cmp	r3, #24
 800aa54:	f040 8103 	bne.w	800ac5e <HAL_RCC_OscConfig+0x236>
 800aa58:	f001 0303 	and.w	r3, r1, #3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	f040 80fe 	bne.w	800ac5e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	05db      	lsls	r3, r3, #23
 800aa66:	d502      	bpl.n	800aa6e <HAL_RCC_OscConfig+0x46>
 800aa68:	69e3      	ldr	r3, [r4, #28]
 800aa6a:	2b80      	cmp	r3, #128	@ 0x80
 800aa6c:	d155      	bne.n	800ab1a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa6e:	f7fb fc7b 	bl	8006368 <HAL_GetREVID>
 800aa72:	f241 0303 	movw	r3, #4099	@ 0x1003
 800aa76:	6a21      	ldr	r1, [r4, #32]
 800aa78:	4298      	cmp	r0, r3
 800aa7a:	4b8f      	ldr	r3, [pc, #572]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800aa7c:	f200 80e8 	bhi.w	800ac50 <HAL_RCC_OscConfig+0x228>
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	2920      	cmp	r1, #32
 800aa84:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800aa88:	bf0c      	ite	eq
 800aa8a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800aa8e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800aa92:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	0719      	lsls	r1, r3, #28
 800aa98:	f100 8123 	bmi.w	800ace2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	069a      	lsls	r2, r3, #26
 800aaa0:	f100 8144 	bmi.w	800ad2c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	075d      	lsls	r5, r3, #29
 800aaa8:	d51e      	bpl.n	800aae8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aaaa:	4d84      	ldr	r5, [pc, #528]	@ (800acbc <HAL_RCC_OscConfig+0x294>)
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aab2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aab4:	f7fb fc40 	bl	8006338 <HAL_GetTick>
 800aab8:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	05da      	lsls	r2, r3, #23
 800aabe:	f140 815a 	bpl.w	800ad76 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	4d7c      	ldr	r5, [pc, #496]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	f040 815c 	bne.w	800ad84 <HAL_RCC_OscConfig+0x35c>
 800aacc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800aad8:	f7fb fc2e 	bl	8006338 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aadc:	4e76      	ldr	r6, [pc, #472]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800aade:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aae0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800aae2:	079b      	lsls	r3, r3, #30
 800aae4:	f140 8174 	bpl.w	800add0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aae8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aaea:	2900      	cmp	r1, #0
 800aaec:	f040 8177 	bne.w	800adde <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e02b      	b.n	800ab4c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaf4:	4a70      	ldr	r2, [pc, #448]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800aaf6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aaf8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aafa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d005      	beq.n	800ab0e <HAL_RCC_OscConfig+0xe6>
 800ab02:	2b18      	cmp	r3, #24
 800ab04:	d10b      	bne.n	800ab1e <HAL_RCC_OscConfig+0xf6>
 800ab06:	f001 0303 	and.w	r3, r1, #3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d107      	bne.n	800ab1e <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab0e:	6813      	ldr	r3, [r2, #0]
 800ab10:	039a      	lsls	r2, r3, #14
 800ab12:	d590      	bpl.n	800aa36 <HAL_RCC_OscConfig+0xe>
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d18d      	bne.n	800aa36 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e016      	b.n	800ab4c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab1e:	6863      	ldr	r3, [r4, #4]
 800ab20:	4d65      	ldr	r5, [pc, #404]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800ab22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab26:	d112      	bne.n	800ab4e <HAL_RCC_OscConfig+0x126>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ab30:	f7fb fc02 	bl	8006338 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab34:	4e60      	ldr	r6, [pc, #384]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800ab36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab38:	6833      	ldr	r3, [r6, #0]
 800ab3a:	039b      	lsls	r3, r3, #14
 800ab3c:	f53f af7b 	bmi.w	800aa36 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab40:	f7fb fbfa 	bl	8006338 <HAL_GetTick>
 800ab44:	1b40      	subs	r0, r0, r5
 800ab46:	2864      	cmp	r0, #100	@ 0x64
 800ab48:	d9f6      	bls.n	800ab38 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800ab4a:	2003      	movs	r0, #3
}
 800ab4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab4e:	b9a3      	cbnz	r3, 800ab7a <HAL_RCC_OscConfig+0x152>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ab60:	f7fb fbea 	bl	8006338 <HAL_GetTick>
 800ab64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	039f      	lsls	r7, r3, #14
 800ab6a:	f57f af64 	bpl.w	800aa36 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab6e:	f7fb fbe3 	bl	8006338 <HAL_GetTick>
 800ab72:	1b80      	subs	r0, r0, r6
 800ab74:	2864      	cmp	r0, #100	@ 0x64
 800ab76:	d9f6      	bls.n	800ab66 <HAL_RCC_OscConfig+0x13e>
 800ab78:	e7e7      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab7e:	682b      	ldr	r3, [r5, #0]
 800ab80:	d103      	bne.n	800ab8a <HAL_RCC_OscConfig+0x162>
 800ab82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab86:	602b      	str	r3, [r5, #0]
 800ab88:	e7ce      	b.n	800ab28 <HAL_RCC_OscConfig+0x100>
 800ab8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab8e:	602b      	str	r3, [r5, #0]
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab96:	e7ca      	b.n	800ab2e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab98:	4947      	ldr	r1, [pc, #284]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800ab9a:	68e2      	ldr	r2, [r4, #12]
 800ab9c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab9e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aba0:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800aba4:	d003      	beq.n	800abae <HAL_RCC_OscConfig+0x186>
 800aba6:	2b18      	cmp	r3, #24
 800aba8:	d12a      	bne.n	800ac00 <HAL_RCC_OscConfig+0x1d8>
 800abaa:	0780      	lsls	r0, r0, #30
 800abac:	d128      	bne.n	800ac00 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abae:	680b      	ldr	r3, [r1, #0]
 800abb0:	075b      	lsls	r3, r3, #29
 800abb2:	d501      	bpl.n	800abb8 <HAL_RCC_OscConfig+0x190>
 800abb4:	2a00      	cmp	r2, #0
 800abb6:	d0b0      	beq.n	800ab1a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abb8:	4d3f      	ldr	r5, [pc, #252]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	f023 0319 	bic.w	r3, r3, #25
 800abc0:	4313      	orrs	r3, r2
 800abc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800abc4:	f7fb fbb8 	bl	8006338 <HAL_GetTick>
 800abc8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	075f      	lsls	r7, r3, #29
 800abce:	d511      	bpl.n	800abf4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abd0:	f7fb fbca 	bl	8006368 <HAL_GetREVID>
 800abd4:	f241 0303 	movw	r3, #4099	@ 0x1003
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	4298      	cmp	r0, r3
 800abdc:	686b      	ldr	r3, [r5, #4]
 800abde:	d822      	bhi.n	800ac26 <HAL_RCC_OscConfig+0x1fe>
 800abe0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800abe4:	2a40      	cmp	r2, #64	@ 0x40
 800abe6:	bf0c      	ite	eq
 800abe8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800abec:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800abf0:	606b      	str	r3, [r5, #4]
 800abf2:	e724      	b.n	800aa3e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abf4:	f7fb fba0 	bl	8006338 <HAL_GetTick>
 800abf8:	1b80      	subs	r0, r0, r6
 800abfa:	2802      	cmp	r0, #2
 800abfc:	d9e5      	bls.n	800abca <HAL_RCC_OscConfig+0x1a2>
 800abfe:	e7a4      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac00:	4d2d      	ldr	r5, [pc, #180]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac02:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac04:	b1a2      	cbz	r2, 800ac30 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac06:	f023 0319 	bic.w	r3, r3, #25
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac0e:	f7fb fb93 	bl	8006338 <HAL_GetTick>
 800ac12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	0758      	lsls	r0, r3, #29
 800ac18:	d4da      	bmi.n	800abd0 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac1a:	f7fb fb8d 	bl	8006338 <HAL_GetTick>
 800ac1e:	1b80      	subs	r0, r0, r6
 800ac20:	2802      	cmp	r0, #2
 800ac22:	d9f7      	bls.n	800ac14 <HAL_RCC_OscConfig+0x1ec>
 800ac24:	e791      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac26:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ac2e:	e7df      	b.n	800abf0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800ac30:	f023 0301 	bic.w	r3, r3, #1
 800ac34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac36:	f7fb fb7f 	bl	8006338 <HAL_GetTick>
 800ac3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	0759      	lsls	r1, r3, #29
 800ac40:	f57f aefd 	bpl.w	800aa3e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac44:	f7fb fb78 	bl	8006338 <HAL_GetTick>
 800ac48:	1b80      	subs	r0, r0, r6
 800ac4a:	2802      	cmp	r0, #2
 800ac4c:	d9f6      	bls.n	800ac3c <HAL_RCC_OscConfig+0x214>
 800ac4e:	e77c      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac50:	68da      	ldr	r2, [r3, #12]
 800ac52:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800ac56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac5a:	60da      	str	r2, [r3, #12]
 800ac5c:	e71a      	b.n	800aa94 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ac5e:	69e3      	ldr	r3, [r4, #28]
 800ac60:	4d15      	ldr	r5, [pc, #84]	@ (800acb8 <HAL_RCC_OscConfig+0x290>)
 800ac62:	b36b      	cbz	r3, 800acc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac6c:	f7fb fb64 	bl	8006338 <HAL_GetTick>
 800ac70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	05df      	lsls	r7, r3, #23
 800ac76:	d511      	bpl.n	800ac9c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac78:	f7fb fb76 	bl	8006368 <HAL_GetREVID>
 800ac7c:	f241 0303 	movw	r3, #4099	@ 0x1003
 800ac80:	6a22      	ldr	r2, [r4, #32]
 800ac82:	4298      	cmp	r0, r3
 800ac84:	d810      	bhi.n	800aca8 <HAL_RCC_OscConfig+0x280>
 800ac86:	686b      	ldr	r3, [r5, #4]
 800ac88:	2a20      	cmp	r2, #32
 800ac8a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ac8e:	bf0c      	ite	eq
 800ac90:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800ac94:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800ac98:	606b      	str	r3, [r5, #4]
 800ac9a:	e6fb      	b.n	800aa94 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac9c:	f7fb fb4c 	bl	8006338 <HAL_GetTick>
 800aca0:	1b80      	subs	r0, r0, r6
 800aca2:	2802      	cmp	r0, #2
 800aca4:	d9e5      	bls.n	800ac72 <HAL_RCC_OscConfig+0x24a>
 800aca6:	e750      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aca8:	68eb      	ldr	r3, [r5, #12]
 800acaa:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800acae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800acb2:	60eb      	str	r3, [r5, #12]
 800acb4:	e6ee      	b.n	800aa94 <HAL_RCC_OscConfig+0x6c>
 800acb6:	bf00      	nop
 800acb8:	58024400 	.word	0x58024400
 800acbc:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800acc8:	f7fb fb36 	bl	8006338 <HAL_GetTick>
 800accc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	05d8      	lsls	r0, r3, #23
 800acd2:	f57f aedf 	bpl.w	800aa94 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800acd6:	f7fb fb2f 	bl	8006338 <HAL_GetTick>
 800acda:	1b80      	subs	r0, r0, r6
 800acdc:	2802      	cmp	r0, #2
 800acde:	d9f6      	bls.n	800acce <HAL_RCC_OscConfig+0x2a6>
 800ace0:	e733      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ace2:	6963      	ldr	r3, [r4, #20]
 800ace4:	4da3      	ldr	r5, [pc, #652]	@ (800af74 <HAL_RCC_OscConfig+0x54c>)
 800ace6:	b183      	cbz	r3, 800ad0a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800ace8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800acf0:	f7fb fb22 	bl	8006338 <HAL_GetTick>
 800acf4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acf6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800acf8:	079b      	lsls	r3, r3, #30
 800acfa:	f53f aecf 	bmi.w	800aa9c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acfe:	f7fb fb1b 	bl	8006338 <HAL_GetTick>
 800ad02:	1b80      	subs	r0, r0, r6
 800ad04:	2802      	cmp	r0, #2
 800ad06:	d9f6      	bls.n	800acf6 <HAL_RCC_OscConfig+0x2ce>
 800ad08:	e71f      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800ad0a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ad0c:	f023 0301 	bic.w	r3, r3, #1
 800ad10:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ad12:	f7fb fb11 	bl	8006338 <HAL_GetTick>
 800ad16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad18:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ad1a:	079f      	lsls	r7, r3, #30
 800ad1c:	f57f aebe 	bpl.w	800aa9c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad20:	f7fb fb0a 	bl	8006338 <HAL_GetTick>
 800ad24:	1b80      	subs	r0, r0, r6
 800ad26:	2802      	cmp	r0, #2
 800ad28:	d9f6      	bls.n	800ad18 <HAL_RCC_OscConfig+0x2f0>
 800ad2a:	e70e      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ad2c:	69a3      	ldr	r3, [r4, #24]
 800ad2e:	4d91      	ldr	r5, [pc, #580]	@ (800af74 <HAL_RCC_OscConfig+0x54c>)
 800ad30:	b183      	cbz	r3, 800ad54 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800ad32:	682b      	ldr	r3, [r5, #0]
 800ad34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad38:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ad3a:	f7fb fafd 	bl	8006338 <HAL_GetTick>
 800ad3e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	0498      	lsls	r0, r3, #18
 800ad44:	f53f aeae 	bmi.w	800aaa4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad48:	f7fb faf6 	bl	8006338 <HAL_GetTick>
 800ad4c:	1b80      	subs	r0, r0, r6
 800ad4e:	2802      	cmp	r0, #2
 800ad50:	d9f6      	bls.n	800ad40 <HAL_RCC_OscConfig+0x318>
 800ad52:	e6fa      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ad5c:	f7fb faec 	bl	8006338 <HAL_GetTick>
 800ad60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	0499      	lsls	r1, r3, #18
 800ad66:	f57f ae9d 	bpl.w	800aaa4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad6a:	f7fb fae5 	bl	8006338 <HAL_GetTick>
 800ad6e:	1b80      	subs	r0, r0, r6
 800ad70:	2802      	cmp	r0, #2
 800ad72:	d9f6      	bls.n	800ad62 <HAL_RCC_OscConfig+0x33a>
 800ad74:	e6e9      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad76:	f7fb fadf 	bl	8006338 <HAL_GetTick>
 800ad7a:	1b80      	subs	r0, r0, r6
 800ad7c:	2864      	cmp	r0, #100	@ 0x64
 800ad7e:	f67f ae9c 	bls.w	800aaba <HAL_RCC_OscConfig+0x92>
 800ad82:	e6e2      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad84:	b9b3      	cbnz	r3, 800adb4 <HAL_RCC_OscConfig+0x38c>
 800ad86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad88:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	672b      	str	r3, [r5, #112]	@ 0x70
 800ad92:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ad94:	f023 0304 	bic.w	r3, r3, #4
 800ad98:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800ad9a:	f7fb facd 	bl	8006338 <HAL_GetTick>
 800ad9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ada0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ada2:	0798      	lsls	r0, r3, #30
 800ada4:	f57f aea0 	bpl.w	800aae8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ada8:	f7fb fac6 	bl	8006338 <HAL_GetTick>
 800adac:	1b80      	subs	r0, r0, r6
 800adae:	42b8      	cmp	r0, r7
 800adb0:	d9f6      	bls.n	800ada0 <HAL_RCC_OscConfig+0x378>
 800adb2:	e6ca      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adb4:	2b05      	cmp	r3, #5
 800adb6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800adb8:	d103      	bne.n	800adc2 <HAL_RCC_OscConfig+0x39a>
 800adba:	f043 0304 	orr.w	r3, r3, #4
 800adbe:	672b      	str	r3, [r5, #112]	@ 0x70
 800adc0:	e684      	b.n	800aacc <HAL_RCC_OscConfig+0xa4>
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	672b      	str	r3, [r5, #112]	@ 0x70
 800adc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800adca:	f023 0304 	bic.w	r3, r3, #4
 800adce:	e680      	b.n	800aad2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800add0:	f7fb fab2 	bl	8006338 <HAL_GetTick>
 800add4:	1b40      	subs	r0, r0, r5
 800add6:	42b8      	cmp	r0, r7
 800add8:	f67f ae82 	bls.w	800aae0 <HAL_RCC_OscConfig+0xb8>
 800addc:	e6b5      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800adde:	4d65      	ldr	r5, [pc, #404]	@ (800af74 <HAL_RCC_OscConfig+0x54c>)
 800ade0:	692b      	ldr	r3, [r5, #16]
 800ade2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ade6:	2b18      	cmp	r3, #24
 800ade8:	d078      	beq.n	800aedc <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800adea:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adec:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800adee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adf2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adf4:	d165      	bne.n	800aec2 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800adf6:	f7fb fa9f 	bl	8006338 <HAL_GetTick>
 800adfa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	0199      	lsls	r1, r3, #6
 800ae00:	d459      	bmi.n	800aeb6 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae02:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800ae04:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ae06:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae12:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ae16:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ae18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae1a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	3a01      	subs	r2, #1
 800ae20:	025b      	lsls	r3, r3, #9
 800ae22:	0412      	lsls	r2, r2, #16
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae34:	4313      	orrs	r3, r2
 800ae36:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ae38:	3a01      	subs	r2, #1
 800ae3a:	0612      	lsls	r2, r2, #24
 800ae3c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ae40:	4313      	orrs	r3, r2
 800ae42:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae44:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae46:	f023 0301 	bic.w	r3, r3, #1
 800ae4a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae4c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ae4e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800ae50:	f36f 03cf 	bfc	r3, #3, #13
 800ae54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ae58:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae5a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ae5e:	f023 030c 	bic.w	r3, r3, #12
 800ae62:	4313      	orrs	r3, r2
 800ae64:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae66:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae68:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ae6a:	f023 0302 	bic.w	r3, r3, #2
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae78:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae80:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae88:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800ae8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ae8c:	f043 0301 	orr.w	r3, r3, #1
 800ae90:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ae92:	682b      	ldr	r3, [r5, #0]
 800ae94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ae98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ae9a:	f7fb fa4d 	bl	8006338 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae9e:	4d35      	ldr	r5, [pc, #212]	@ (800af74 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800aea0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	019a      	lsls	r2, r3, #6
 800aea6:	f53f ae23 	bmi.w	800aaf0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeaa:	f7fb fa45 	bl	8006338 <HAL_GetTick>
 800aeae:	1b00      	subs	r0, r0, r4
 800aeb0:	2802      	cmp	r0, #2
 800aeb2:	d9f6      	bls.n	800aea2 <HAL_RCC_OscConfig+0x47a>
 800aeb4:	e649      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeb6:	f7fb fa3f 	bl	8006338 <HAL_GetTick>
 800aeba:	1b80      	subs	r0, r0, r6
 800aebc:	2802      	cmp	r0, #2
 800aebe:	d99d      	bls.n	800adfc <HAL_RCC_OscConfig+0x3d4>
 800aec0:	e643      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800aec2:	f7fb fa39 	bl	8006338 <HAL_GetTick>
 800aec6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	019b      	lsls	r3, r3, #6
 800aecc:	f57f ae10 	bpl.w	800aaf0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aed0:	f7fb fa32 	bl	8006338 <HAL_GetTick>
 800aed4:	1b00      	subs	r0, r0, r4
 800aed6:	2802      	cmp	r0, #2
 800aed8:	d9f6      	bls.n	800aec8 <HAL_RCC_OscConfig+0x4a0>
 800aeda:	e636      	b.n	800ab4a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aedc:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aede:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aee0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aee2:	f43f ae1a 	beq.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aee6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aeea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800aeec:	4281      	cmp	r1, r0
 800aeee:	f47f ae14 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aef2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aef6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aef8:	428a      	cmp	r2, r1
 800aefa:	f47f ae0e 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aefe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800af00:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800af04:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af06:	4291      	cmp	r1, r2
 800af08:	f47f ae07 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af0c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800af0e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800af12:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af14:	4291      	cmp	r1, r2
 800af16:	f47f ae00 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af1a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800af1c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800af20:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af22:	4291      	cmp	r1, r2
 800af24:	f47f adf9 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af28:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800af2a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800af2e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af30:	4293      	cmp	r3, r2
 800af32:	f47f adf2 	bne.w	800ab1a <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af36:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af38:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af3a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af3e:	429a      	cmp	r2, r3
 800af40:	f43f add6 	beq.w	800aaf0 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800af44:	4d0b      	ldr	r5, [pc, #44]	@ (800af74 <HAL_RCC_OscConfig+0x54c>)
 800af46:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800af4e:	f7fb f9f3 	bl	8006338 <HAL_GetTick>
 800af52:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800af54:	f7fb f9f0 	bl	8006338 <HAL_GetTick>
 800af58:	42b0      	cmp	r0, r6
 800af5a:	d0fb      	beq.n	800af54 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af5c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800af5e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800af60:	f36f 03cf 	bfc	r3, #3, #13
 800af64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800af68:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800af6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800af72:	e5bd      	b.n	800aaf0 <HAL_RCC_OscConfig+0xc8>
 800af74:	58024400 	.word	0x58024400

0800af78 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	4c23      	ldr	r4, [pc, #140]	@ (800b008 <HAL_RCC_MCOConfig+0x90>)
 800af7c:	b088      	sub	sp, #32
 800af7e:	460e      	mov	r6, r1
 800af80:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800af82:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800af86:	b9f8      	cbnz	r0, 800afc8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800af88:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af8c:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800af90:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800af92:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800af96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af9a:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afa4:	2302      	movs	r3, #2
 800afa6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afaa:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afac:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800afb0:	4816      	ldr	r0, [pc, #88]	@ (800b00c <HAL_RCC_MCOConfig+0x94>)
 800afb2:	f7fd fa4b 	bl	800844c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800afbc:	ea43 0106 	orr.w	r1, r3, r6
 800afc0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800afc2:	6121      	str	r1, [r4, #16]
  }
}
 800afc4:	b008      	add	sp, #32
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800afc8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afd0:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800afd2:	480f      	ldr	r0, [pc, #60]	@ (800b010 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800afd4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800afd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe4:	2302      	movs	r3, #2
 800afe6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afea:	2300      	movs	r3, #0
 800afec:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800aff0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800aff2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800aff4:	f7fd fa2a 	bl	800844c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800affe:	ea43 0106 	orr.w	r1, r3, r6
 800b002:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800b006:	e7dc      	b.n	800afc2 <HAL_RCC_MCOConfig+0x4a>
 800b008:	58024400 	.word	0x58024400
 800b00c:	58020000 	.word	0x58020000
 800b010:	58020800 	.word	0x58020800

0800b014 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b014:	4b49      	ldr	r3, [pc, #292]	@ (800b13c <HAL_RCC_GetSysClockFreq+0x128>)
 800b016:	691a      	ldr	r2, [r3, #16]
 800b018:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800b01c:	2a10      	cmp	r2, #16
{
 800b01e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b020:	f000 8088 	beq.w	800b134 <HAL_RCC_GetSysClockFreq+0x120>
 800b024:	2a18      	cmp	r2, #24
 800b026:	d00c      	beq.n	800b042 <HAL_RCC_GetSysClockFreq+0x2e>
 800b028:	2a00      	cmp	r2, #0
 800b02a:	f040 8085 	bne.w	800b138 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4843      	ldr	r0, [pc, #268]	@ (800b140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b032:	f012 0f20 	tst.w	r2, #32
 800b036:	d003      	beq.n	800b040 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b03e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b040:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b042:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b044:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b046:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800b048:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b04c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800b052:	d0f5      	beq.n	800b040 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b054:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b058:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b05c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b060:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b064:	4362      	muls	r2, r4
 800b066:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800b06a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b06c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b070:	ee06 2a90 	vmov	s13, r2
 800b074:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800b078:	d04e      	beq.n	800b118 <HAL_RCC_GetSysClockFreq+0x104>
 800b07a:	2902      	cmp	r1, #2
 800b07c:	d03e      	beq.n	800b0fc <HAL_RCC_GetSysClockFreq+0xe8>
 800b07e:	2900      	cmp	r1, #0
 800b080:	d14a      	bne.n	800b118 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	0692      	lsls	r2, r2, #26
 800b086:	d527      	bpl.n	800b0d8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b088:	6819      	ldr	r1, [r3, #0]
 800b08a:	4a2d      	ldr	r2, [pc, #180]	@ (800b140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b08c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b092:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b098:	ee07 2a90 	vmov	s15, r2
 800b09c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b0a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b0a4:	ee07 3a10 	vmov	s14, r3
 800b0a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b0b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b0b8:	4b20      	ldr	r3, [pc, #128]	@ (800b13c <HAL_RCC_GetSysClockFreq+0x128>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b0c0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b0c2:	ee07 3a10 	vmov	s14, r3
 800b0c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b0ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b0ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b0d2:	ee17 0a90 	vmov	r0, s15
 800b0d6:	e7b3      	b.n	800b040 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b0ee:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b144 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0f2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b0f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800b0fa:	e7dd      	b.n	800b0b8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b112:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800b148 <HAL_RCC_GetSysClockFreq+0x134>
 800b116:	e7ec      	b.n	800b0f2 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b12e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800b14c <HAL_RCC_GetSysClockFreq+0x138>
 800b132:	e7de      	b.n	800b0f2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b134:	4806      	ldr	r0, [pc, #24]	@ (800b150 <HAL_RCC_GetSysClockFreq+0x13c>)
 800b136:	e783      	b.n	800b040 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800b138:	4806      	ldr	r0, [pc, #24]	@ (800b154 <HAL_RCC_GetSysClockFreq+0x140>)
 800b13a:	e781      	b.n	800b040 <HAL_RCC_GetSysClockFreq+0x2c>
 800b13c:	58024400 	.word	0x58024400
 800b140:	03d09000 	.word	0x03d09000
 800b144:	4c742400 	.word	0x4c742400
 800b148:	4bbebc20 	.word	0x4bbebc20
 800b14c:	4a742400 	.word	0x4a742400
 800b150:	017d7840 	.word	0x017d7840
 800b154:	003d0900 	.word	0x003d0900

0800b158 <HAL_RCC_ClockConfig>:
{
 800b158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800b15e:	4604      	mov	r4, r0
 800b160:	b910      	cbnz	r0, 800b168 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b162:	2001      	movs	r0, #1
}
 800b164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b168:	4a88      	ldr	r2, [pc, #544]	@ (800b38c <HAL_RCC_ClockConfig+0x234>)
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	f003 030f 	and.w	r3, r3, #15
 800b170:	428b      	cmp	r3, r1
 800b172:	f0c0 8093 	bcc.w	800b29c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	075f      	lsls	r7, r3, #29
 800b17a:	f100 809b 	bmi.w	800b2b4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b17e:	071e      	lsls	r6, r3, #28
 800b180:	d50b      	bpl.n	800b19a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b182:	4983      	ldr	r1, [pc, #524]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b184:	6960      	ldr	r0, [r4, #20]
 800b186:	69ca      	ldr	r2, [r1, #28]
 800b188:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b18c:	4290      	cmp	r0, r2
 800b18e:	d904      	bls.n	800b19a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b190:	69ca      	ldr	r2, [r1, #28]
 800b192:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b196:	4302      	orrs	r2, r0
 800b198:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b19a:	06d8      	lsls	r0, r3, #27
 800b19c:	d50b      	bpl.n	800b1b6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b19e:	497c      	ldr	r1, [pc, #496]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b1a0:	69a0      	ldr	r0, [r4, #24]
 800b1a2:	69ca      	ldr	r2, [r1, #28]
 800b1a4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b1a8:	4290      	cmp	r0, r2
 800b1aa:	d904      	bls.n	800b1b6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1ac:	69ca      	ldr	r2, [r1, #28]
 800b1ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b1b2:	4302      	orrs	r2, r0
 800b1b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1b6:	0699      	lsls	r1, r3, #26
 800b1b8:	d50b      	bpl.n	800b1d2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1ba:	4975      	ldr	r1, [pc, #468]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b1bc:	69e0      	ldr	r0, [r4, #28]
 800b1be:	6a0a      	ldr	r2, [r1, #32]
 800b1c0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b1c4:	4290      	cmp	r0, r2
 800b1c6:	d904      	bls.n	800b1d2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1c8:	6a0a      	ldr	r2, [r1, #32]
 800b1ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b1ce:	4302      	orrs	r2, r0
 800b1d0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1d2:	079a      	lsls	r2, r3, #30
 800b1d4:	d50b      	bpl.n	800b1ee <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b1d6:	496e      	ldr	r1, [pc, #440]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b1d8:	68e0      	ldr	r0, [r4, #12]
 800b1da:	698a      	ldr	r2, [r1, #24]
 800b1dc:	f002 020f 	and.w	r2, r2, #15
 800b1e0:	4290      	cmp	r0, r2
 800b1e2:	d904      	bls.n	800b1ee <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1e4:	698a      	ldr	r2, [r1, #24]
 800b1e6:	f022 020f 	bic.w	r2, r2, #15
 800b1ea:	4302      	orrs	r2, r0
 800b1ec:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1ee:	07df      	lsls	r7, r3, #31
 800b1f0:	d46e      	bmi.n	800b2d0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	079e      	lsls	r6, r3, #30
 800b1f6:	f100 80a1 	bmi.w	800b33c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1fa:	4964      	ldr	r1, [pc, #400]	@ (800b38c <HAL_RCC_ClockConfig+0x234>)
 800b1fc:	680a      	ldr	r2, [r1, #0]
 800b1fe:	f002 020f 	and.w	r2, r2, #15
 800b202:	42aa      	cmp	r2, r5
 800b204:	f200 80a8 	bhi.w	800b358 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b208:	0758      	lsls	r0, r3, #29
 800b20a:	f100 80b1 	bmi.w	800b370 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b20e:	0719      	lsls	r1, r3, #28
 800b210:	d50b      	bpl.n	800b22a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b212:	495f      	ldr	r1, [pc, #380]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b214:	6960      	ldr	r0, [r4, #20]
 800b216:	69ca      	ldr	r2, [r1, #28]
 800b218:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b21c:	4290      	cmp	r0, r2
 800b21e:	d204      	bcs.n	800b22a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b220:	69ca      	ldr	r2, [r1, #28]
 800b222:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b226:	4302      	orrs	r2, r0
 800b228:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b22a:	06da      	lsls	r2, r3, #27
 800b22c:	d50b      	bpl.n	800b246 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b22e:	4958      	ldr	r1, [pc, #352]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b230:	69a0      	ldr	r0, [r4, #24]
 800b232:	69ca      	ldr	r2, [r1, #28]
 800b234:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b238:	4290      	cmp	r0, r2
 800b23a:	d204      	bcs.n	800b246 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b23c:	69ca      	ldr	r2, [r1, #28]
 800b23e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b242:	4302      	orrs	r2, r0
 800b244:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b246:	069b      	lsls	r3, r3, #26
 800b248:	d50b      	bpl.n	800b262 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b24a:	4a51      	ldr	r2, [pc, #324]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b24c:	69e1      	ldr	r1, [r4, #28]
 800b24e:	6a13      	ldr	r3, [r2, #32]
 800b250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b254:	4299      	cmp	r1, r3
 800b256:	d204      	bcs.n	800b262 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b258:	6a13      	ldr	r3, [r2, #32]
 800b25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b25e:	430b      	orrs	r3, r1
 800b260:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b262:	f7ff fed7 	bl	800b014 <HAL_RCC_GetSysClockFreq>
 800b266:	494a      	ldr	r1, [pc, #296]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b268:	4a4a      	ldr	r2, [pc, #296]	@ (800b394 <HAL_RCC_ClockConfig+0x23c>)
 800b26a:	698b      	ldr	r3, [r1, #24]
 800b26c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b270:	5cd3      	ldrb	r3, [r2, r3]
 800b272:	f003 031f 	and.w	r3, r3, #31
 800b276:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b278:	698b      	ldr	r3, [r1, #24]
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	5cd3      	ldrb	r3, [r2, r3]
 800b280:	4a45      	ldr	r2, [pc, #276]	@ (800b398 <HAL_RCC_ClockConfig+0x240>)
 800b282:	f003 031f 	and.w	r3, r3, #31
 800b286:	fa20 f303 	lsr.w	r3, r0, r3
 800b28a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b28c:	4b43      	ldr	r3, [pc, #268]	@ (800b39c <HAL_RCC_ClockConfig+0x244>)
 800b28e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800b290:	4b43      	ldr	r3, [pc, #268]	@ (800b3a0 <HAL_RCC_ClockConfig+0x248>)
}
 800b292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b296:	6818      	ldr	r0, [r3, #0]
 800b298:	f7f6 ba96 	b.w	80017c8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b29c:	6813      	ldr	r3, [r2, #0]
 800b29e:	f023 030f 	bic.w	r3, r3, #15
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2a6:	6813      	ldr	r3, [r2, #0]
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	428b      	cmp	r3, r1
 800b2ae:	f47f af58 	bne.w	800b162 <HAL_RCC_ClockConfig+0xa>
 800b2b2:	e760      	b.n	800b176 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2b4:	4936      	ldr	r1, [pc, #216]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b2b6:	6920      	ldr	r0, [r4, #16]
 800b2b8:	698a      	ldr	r2, [r1, #24]
 800b2ba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b2be:	4290      	cmp	r0, r2
 800b2c0:	f67f af5d 	bls.w	800b17e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2c4:	698a      	ldr	r2, [r1, #24]
 800b2c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b2ca:	4302      	orrs	r2, r0
 800b2cc:	618a      	str	r2, [r1, #24]
 800b2ce:	e756      	b.n	800b17e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b2d0:	4b2f      	ldr	r3, [pc, #188]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b2d2:	68a1      	ldr	r1, [r4, #8]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2de:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2e0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2e2:	2902      	cmp	r1, #2
 800b2e4:	d11d      	bne.n	800b322 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2e6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2ea:	f43f af3a 	beq.w	800b162 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2ee:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2f0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f4:	4f26      	ldr	r7, [pc, #152]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2f6:	f022 0207 	bic.w	r2, r2, #7
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800b2fe:	f7fb f81b 	bl	8006338 <HAL_GetTick>
 800b302:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6862      	ldr	r2, [r4, #4]
 800b308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b30c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b310:	f43f af6f 	beq.w	800b1f2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b314:	f7fb f810 	bl	8006338 <HAL_GetTick>
 800b318:	1b80      	subs	r0, r0, r6
 800b31a:	4540      	cmp	r0, r8
 800b31c:	d9f2      	bls.n	800b304 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800b31e:	2003      	movs	r0, #3
 800b320:	e720      	b.n	800b164 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b322:	2903      	cmp	r1, #3
 800b324:	d102      	bne.n	800b32c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b326:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b32a:	e7de      	b.n	800b2ea <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b32c:	2901      	cmp	r1, #1
 800b32e:	d102      	bne.n	800b336 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b330:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b334:	e7d9      	b.n	800b2ea <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b336:	f012 0f04 	tst.w	r2, #4
 800b33a:	e7d6      	b.n	800b2ea <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b33c:	4914      	ldr	r1, [pc, #80]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b33e:	68e0      	ldr	r0, [r4, #12]
 800b340:	698a      	ldr	r2, [r1, #24]
 800b342:	f002 020f 	and.w	r2, r2, #15
 800b346:	4290      	cmp	r0, r2
 800b348:	f4bf af57 	bcs.w	800b1fa <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b34c:	698a      	ldr	r2, [r1, #24]
 800b34e:	f022 020f 	bic.w	r2, r2, #15
 800b352:	4302      	orrs	r2, r0
 800b354:	618a      	str	r2, [r1, #24]
 800b356:	e750      	b.n	800b1fa <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b358:	680a      	ldr	r2, [r1, #0]
 800b35a:	f022 020f 	bic.w	r2, r2, #15
 800b35e:	432a      	orrs	r2, r5
 800b360:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b362:	680a      	ldr	r2, [r1, #0]
 800b364:	f002 020f 	and.w	r2, r2, #15
 800b368:	42aa      	cmp	r2, r5
 800b36a:	f47f aefa 	bne.w	800b162 <HAL_RCC_ClockConfig+0xa>
 800b36e:	e74b      	b.n	800b208 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b370:	4907      	ldr	r1, [pc, #28]	@ (800b390 <HAL_RCC_ClockConfig+0x238>)
 800b372:	6920      	ldr	r0, [r4, #16]
 800b374:	698a      	ldr	r2, [r1, #24]
 800b376:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b37a:	4290      	cmp	r0, r2
 800b37c:	f4bf af47 	bcs.w	800b20e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b380:	698a      	ldr	r2, [r1, #24]
 800b382:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b386:	4302      	orrs	r2, r0
 800b388:	618a      	str	r2, [r1, #24]
 800b38a:	e740      	b.n	800b20e <HAL_RCC_ClockConfig+0xb6>
 800b38c:	52002000 	.word	0x52002000
 800b390:	58024400 	.word	0x58024400
 800b394:	0802818c 	.word	0x0802818c
 800b398:	24000068 	.word	0x24000068
 800b39c:	2400006c 	.word	0x2400006c
 800b3a0:	24000074 	.word	0x24000074

0800b3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3a4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3a6:	f7ff fe35 	bl	800b014 <HAL_RCC_GetSysClockFreq>
 800b3aa:	4a0b      	ldr	r2, [pc, #44]	@ (800b3d8 <HAL_RCC_GetHCLKFreq+0x34>)
 800b3ac:	490b      	ldr	r1, [pc, #44]	@ (800b3dc <HAL_RCC_GetHCLKFreq+0x38>)
 800b3ae:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3b0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3b2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3b6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3ba:	5ccb      	ldrb	r3, [r1, r3]
 800b3bc:	f003 031f 	and.w	r3, r3, #31
 800b3c0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3c4:	5c88      	ldrb	r0, [r1, r2]
 800b3c6:	4a06      	ldr	r2, [pc, #24]	@ (800b3e0 <HAL_RCC_GetHCLKFreq+0x3c>)
 800b3c8:	f000 001f 	and.w	r0, r0, #31
 800b3cc:	fa23 f000 	lsr.w	r0, r3, r0
 800b3d0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3d2:	4a04      	ldr	r2, [pc, #16]	@ (800b3e4 <HAL_RCC_GetHCLKFreq+0x40>)
 800b3d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b3d6:	bd08      	pop	{r3, pc}
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	0802818c 	.word	0x0802818c
 800b3e0:	24000068 	.word	0x24000068
 800b3e4:	2400006c 	.word	0x2400006c

0800b3e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b3e8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b3ea:	f7ff ffdb 	bl	800b3a4 <HAL_RCC_GetHCLKFreq>
 800b3ee:	4b05      	ldr	r3, [pc, #20]	@ (800b404 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b3f0:	4a05      	ldr	r2, [pc, #20]	@ (800b408 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b3f8:	5cd3      	ldrb	r3, [r2, r3]
 800b3fa:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b3fe:	40d8      	lsrs	r0, r3
 800b400:	bd08      	pop	{r3, pc}
 800b402:	bf00      	nop
 800b404:	58024400 	.word	0x58024400
 800b408:	0802818c 	.word	0x0802818c

0800b40c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b40c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b40e:	f7ff ffc9 	bl	800b3a4 <HAL_RCC_GetHCLKFreq>
 800b412:	4b05      	ldr	r3, [pc, #20]	@ (800b428 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b414:	4a05      	ldr	r2, [pc, #20]	@ (800b42c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b41c:	5cd3      	ldrb	r3, [r2, r3]
 800b41e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b422:	40d8      	lsrs	r0, r3
 800b424:	bd08      	pop	{r3, pc}
 800b426:	bf00      	nop
 800b428:	58024400 	.word	0x58024400
 800b42c:	0802818c 	.word	0x0802818c

0800b430 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b430:	233f      	movs	r3, #63	@ 0x3f
 800b432:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b434:	4b11      	ldr	r3, [pc, #68]	@ (800b47c <HAL_RCC_GetClockConfig+0x4c>)
 800b436:	691a      	ldr	r2, [r3, #16]
 800b438:	f002 0207 	and.w	r2, r2, #7
 800b43c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b43e:	699a      	ldr	r2, [r3, #24]
 800b440:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800b444:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b446:	699a      	ldr	r2, [r3, #24]
 800b448:	f002 020f 	and.w	r2, r2, #15
 800b44c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b44e:	699a      	ldr	r2, [r3, #24]
 800b450:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b454:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b456:	69da      	ldr	r2, [r3, #28]
 800b458:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b45c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b45e:	69da      	ldr	r2, [r3, #28]
 800b460:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b464:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b46c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b46e:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <HAL_RCC_GetClockConfig+0x50>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	600b      	str	r3, [r1, #0]
}
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	58024400 	.word	0x58024400
 800b480:	52002000 	.word	0x52002000

0800b484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b486:	4c39      	ldr	r4, [pc, #228]	@ (800b56c <RCCEx_PLL2_Config+0xe8>)
{
 800b488:	4606      	mov	r6, r0
 800b48a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b48c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b48e:	f003 0303 	and.w	r3, r3, #3
 800b492:	2b03      	cmp	r3, #3
 800b494:	d067      	beq.n	800b566 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b49c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49e:	f7fa ff4b 	bl	8006338 <HAL_GetTick>
 800b4a2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	011a      	lsls	r2, r3, #4
 800b4a8:	d449      	bmi.n	800b53e <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b4ac:	6832      	ldr	r2, [r6, #0]
 800b4ae:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b4b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b4b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4b8:	68b3      	ldr	r3, [r6, #8]
 800b4ba:	68f2      	ldr	r2, [r6, #12]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	3a01      	subs	r2, #1
 800b4c0:	025b      	lsls	r3, r3, #9
 800b4c2:	0412      	lsls	r2, r2, #16
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	6872      	ldr	r2, [r6, #4]
 800b4ce:	3a01      	subs	r2, #1
 800b4d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	6932      	ldr	r2, [r6, #16]
 800b4d8:	3a01      	subs	r2, #1
 800b4da:	0612      	lsls	r2, r2, #24
 800b4dc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4e6:	6972      	ldr	r2, [r6, #20]
 800b4e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b4f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4f2:	69b2      	ldr	r2, [r6, #24]
 800b4f4:	f023 0320 	bic.w	r3, r3, #32
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b4fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b504:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b506:	69f2      	ldr	r2, [r6, #28]
 800b508:	f36f 03cf 	bfc	r3, #3, #13
 800b50c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b510:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b512:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b514:	f043 0310 	orr.w	r3, r3, #16
 800b518:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b51a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b51c:	b9b5      	cbnz	r5, 800b54c <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b51e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b522:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b524:	4c11      	ldr	r4, [pc, #68]	@ (800b56c <RCCEx_PLL2_Config+0xe8>)
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b52c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b52e:	f7fa ff03 	bl	8006338 <HAL_GetTick>
 800b532:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	d50f      	bpl.n	800b55a <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800b53a:	2000      	movs	r0, #0
 800b53c:	e005      	b.n	800b54a <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b53e:	f7fa fefb 	bl	8006338 <HAL_GetTick>
 800b542:	1bc0      	subs	r0, r0, r7
 800b544:	2802      	cmp	r0, #2
 800b546:	d9ad      	bls.n	800b4a4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800b548:	2003      	movs	r0, #3
}
 800b54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b54c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b54e:	bf0c      	ite	eq
 800b550:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b554:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b558:	e7e3      	b.n	800b522 <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b55a:	f7fa feed 	bl	8006338 <HAL_GetTick>
 800b55e:	1b40      	subs	r0, r0, r5
 800b560:	2802      	cmp	r0, #2
 800b562:	d9e7      	bls.n	800b534 <RCCEx_PLL2_Config+0xb0>
 800b564:	e7f0      	b.n	800b548 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800b566:	2001      	movs	r0, #1
 800b568:	e7ef      	b.n	800b54a <RCCEx_PLL2_Config+0xc6>
 800b56a:	bf00      	nop
 800b56c:	58024400 	.word	0x58024400

0800b570 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b572:	4c39      	ldr	r4, [pc, #228]	@ (800b658 <RCCEx_PLL3_Config+0xe8>)
{
 800b574:	4606      	mov	r6, r0
 800b576:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b578:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d067      	beq.n	800b652 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b588:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b58a:	f7fa fed5 	bl	8006338 <HAL_GetTick>
 800b58e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	009a      	lsls	r2, r3, #2
 800b594:	d449      	bmi.n	800b62a <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b596:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b598:	6832      	ldr	r2, [r6, #0]
 800b59a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b59e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b5a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5a4:	68b3      	ldr	r3, [r6, #8]
 800b5a6:	68f2      	ldr	r2, [r6, #12]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	3a01      	subs	r2, #1
 800b5ac:	025b      	lsls	r3, r3, #9
 800b5ae:	0412      	lsls	r2, r2, #16
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	6872      	ldr	r2, [r6, #4]
 800b5ba:	3a01      	subs	r2, #1
 800b5bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	6932      	ldr	r2, [r6, #16]
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	0612      	lsls	r2, r2, #24
 800b5c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5d2:	6972      	ldr	r2, [r6, #20]
 800b5d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5de:	69b2      	ldr	r2, [r6, #24]
 800b5e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b5f2:	69f2      	ldr	r2, [r6, #28]
 800b5f4:	f36f 03cf 	bfc	r3, #3, #13
 800b5f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b5fc:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b604:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b606:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b608:	b9b5      	cbnz	r5, 800b638 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b60a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b60e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b610:	4c11      	ldr	r4, [pc, #68]	@ (800b658 <RCCEx_PLL3_Config+0xe8>)
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b618:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b61a:	f7fa fe8d 	bl	8006338 <HAL_GetTick>
 800b61e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	d50f      	bpl.n	800b646 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800b626:	2000      	movs	r0, #0
 800b628:	e005      	b.n	800b636 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b62a:	f7fa fe85 	bl	8006338 <HAL_GetTick>
 800b62e:	1bc0      	subs	r0, r0, r7
 800b630:	2802      	cmp	r0, #2
 800b632:	d9ad      	bls.n	800b590 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800b634:	2003      	movs	r0, #3
}
 800b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b638:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b63a:	bf0c      	ite	eq
 800b63c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b640:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800b644:	e7e3      	b.n	800b60e <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b646:	f7fa fe77 	bl	8006338 <HAL_GetTick>
 800b64a:	1b40      	subs	r0, r0, r5
 800b64c:	2802      	cmp	r0, #2
 800b64e:	d9e7      	bls.n	800b620 <RCCEx_PLL3_Config+0xb0>
 800b650:	e7f0      	b.n	800b634 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800b652:	2001      	movs	r0, #1
 800b654:	e7ef      	b.n	800b636 <RCCEx_PLL3_Config+0xc6>
 800b656:	bf00      	nop
 800b658:	58024400 	.word	0x58024400

0800b65c <HAL_RCCEx_PeriphCLKConfig>:
{
 800b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b660:	6803      	ldr	r3, [r0, #0]
{
 800b662:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b664:	011c      	lsls	r4, r3, #4
 800b666:	d51e      	bpl.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b668:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b66a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b66e:	d02a      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b670:	d80f      	bhi.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800b672:	b1d3      	cbz	r3, 800b6aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800b674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b678:	d01d      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800b67a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	05d8      	lsls	r0, r3, #23
 800b680:	d54f      	bpl.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b682:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800b684:	2b04      	cmp	r3, #4
 800b686:	d84b      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800b688:	e8df f003 	tbb	[pc, r3]
 800b68c:	27443d22 	.word	0x27443d22
 800b690:	27          	.byte	0x27
 800b691:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b696:	d1f0      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b698:	4a86      	ldr	r2, [pc, #536]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b69a:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800b69c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b69e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	e7e8      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6aa:	4a82      	ldr	r2, [pc, #520]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b6ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b6ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b6b4:	e7f0      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	3008      	adds	r0, #8
 800b6ba:	f7ff fee3 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6be:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d1db      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800b6c4:	e7e8      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6c6:	2102      	movs	r1, #2
 800b6c8:	3028      	adds	r0, #40	@ 0x28
 800b6ca:	f7ff ff51 	bl	800b570 <RCCEx_PLL3_Config>
 800b6ce:	e7f6      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6d0:	4a78      	ldr	r2, [pc, #480]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b6d2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b6d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6da:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800b6dc:	bb1c      	cbnz	r4, 800b726 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6de:	4a75      	ldr	r2, [pc, #468]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b6e0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800b6e2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b6e4:	f023 0307 	bic.w	r3, r3, #7
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	0599      	lsls	r1, r3, #22
 800b6f0:	d528      	bpl.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b6f2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800b6f4:	2b80      	cmp	r3, #128	@ 0x80
 800b6f6:	d043      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800b6f8:	d817      	bhi.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800b6fa:	b3a3      	cbz	r3, 800b766 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800b6fc:	2b40      	cmp	r3, #64	@ 0x40
 800b6fe:	d038      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b700:	2601      	movs	r6, #1
 800b702:	4634      	mov	r4, r6
 800b704:	e01e      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b706:	2100      	movs	r1, #0
 800b708:	f105 0008 	add.w	r0, r5, #8
 800b70c:	f7ff feba 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b710:	4604      	mov	r4, r0
        break;
 800b712:	e7e3      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b714:	2100      	movs	r1, #0
 800b716:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b71a:	f7ff ff29 	bl	800b570 <RCCEx_PLL3_Config>
 800b71e:	e7f7      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b720:	2601      	movs	r6, #1
 800b722:	4634      	mov	r4, r6
 800b724:	e7e2      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800b726:	4626      	mov	r6, r4
 800b728:	e7e0      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b72a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b72c:	d002      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800b72e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b732:	d1e5      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800b734:	bb54      	cbnz	r4, 800b78c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b736:	4a5f      	ldr	r2, [pc, #380]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b738:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b73a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b73c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800b740:	430b      	orrs	r3, r1
 800b742:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	055a      	lsls	r2, r3, #21
 800b748:	d531      	bpl.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b74a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800b74e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b752:	d049      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b754:	d81c      	bhi.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800b756:	2b00      	cmp	r3, #0
 800b758:	d039      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 800b75a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b75e:	d03c      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800b760:	2601      	movs	r6, #1
 800b762:	4634      	mov	r4, r6
 800b764:	e023      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b766:	4a53      	ldr	r2, [pc, #332]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b768:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b76a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b76e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b770:	e7e0      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b772:	2100      	movs	r1, #0
 800b774:	f105 0008 	add.w	r0, r5, #8
 800b778:	f7ff fe84 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b77c:	4604      	mov	r4, r0
        break;
 800b77e:	e7d9      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b780:	2100      	movs	r1, #0
 800b782:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b786:	f7ff fef3 	bl	800b570 <RCCEx_PLL3_Config>
 800b78a:	e7f7      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800b78c:	4626      	mov	r6, r4
 800b78e:	e7d9      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b790:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b794:	d002      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800b796:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b79a:	d1e1      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800b79c:	bb54      	cbnz	r4, 800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b79e:	4a45      	ldr	r2, [pc, #276]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b7a0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800b7a4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b7a6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b7ae:	682b      	ldr	r3, [r5, #0]
 800b7b0:	051b      	lsls	r3, r3, #20
 800b7b2:	d530      	bpl.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b7b4:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800b7b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7bc:	d045      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b7be:	d81b      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800b7c0:	b3b3      	cbz	r3, 800b830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b7c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7c6:	d039      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800b7c8:	2601      	movs	r6, #1
 800b7ca:	4634      	mov	r4, r6
 800b7cc:	e023      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ce:	4a39      	ldr	r2, [pc, #228]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b7d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b7d8:	e7e0      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7da:	2100      	movs	r1, #0
 800b7dc:	f105 0008 	add.w	r0, r5, #8
 800b7e0:	f7ff fe50 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7e4:	4604      	mov	r4, r0
        break;
 800b7e6:	e7d9      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7ee:	f7ff febf 	bl	800b570 <RCCEx_PLL3_Config>
 800b7f2:	e7f7      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800b7f4:	4626      	mov	r6, r4
 800b7f6:	e7da      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b7f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7fc:	d002      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b7fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b802:	d1e1      	bne.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800b804:	bb3c      	cbnz	r4, 800b856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b806:	4a2b      	ldr	r2, [pc, #172]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b808:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800b80c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b80e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800b812:	430b      	orrs	r3, r1
 800b814:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b816:	682b      	ldr	r3, [r5, #0]
 800b818:	019f      	lsls	r7, r3, #6
 800b81a:	d528      	bpl.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800b81c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d03e      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b822:	d81a      	bhi.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b824:	b1db      	cbz	r3, 800b85e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b826:	2b10      	cmp	r3, #16
 800b828:	d034      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800b82a:	2601      	movs	r6, #1
 800b82c:	4634      	mov	r4, r6
 800b82e:	e01e      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b830:	4a20      	ldr	r2, [pc, #128]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b832:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b838:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b83a:	e7e3      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b83c:	2100      	movs	r1, #0
 800b83e:	f105 0008 	add.w	r0, r5, #8
 800b842:	f7ff fe1f 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b846:	4604      	mov	r4, r0
        break;
 800b848:	e7dc      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b84a:	2100      	movs	r1, #0
 800b84c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b850:	f7ff fe8e 	bl	800b570 <RCCEx_PLL3_Config>
 800b854:	e7f7      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800b856:	4626      	mov	r6, r4
 800b858:	e7dd      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800b85a:	2b30      	cmp	r3, #48	@ 0x30
 800b85c:	d1e5      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800b85e:	bb34      	cbnz	r4, 800b8ae <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b860:	4a14      	ldr	r2, [pc, #80]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b862:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b864:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b866:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b86a:	430b      	orrs	r3, r1
 800b86c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	04d8      	lsls	r0, r3, #19
 800b872:	d530      	bpl.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b87a:	f000 8095 	beq.w	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b87e:	d81b      	bhi.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 8084 	beq.w	800b98e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b88a:	f000 8086 	beq.w	800b99a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b88e:	2601      	movs	r6, #1
 800b890:	4634      	mov	r4, r6
 800b892:	e020      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b894:	4a07      	ldr	r2, [pc, #28]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b896:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b89c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b89e:	e7de      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	f105 0008 	add.w	r0, r5, #8
 800b8a6:	f7ff fded 	bl	800b484 <RCCEx_PLL2_Config>
 800b8aa:	4604      	mov	r4, r0
        break;
 800b8ac:	e7d7      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800b8ae:	4626      	mov	r6, r4
 800b8b0:	e7dd      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800b8b2:	bf00      	nop
 800b8b4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800b8b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b8bc:	d002      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8c2:	d1e4      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800b8c4:	2c00      	cmp	r4, #0
 800b8c6:	d175      	bne.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8c8:	4a93      	ldr	r2, [pc, #588]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b8ca:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800b8cc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b8ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8d2:	430b      	orrs	r3, r1
 800b8d4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8d6:	682b      	ldr	r3, [r5, #0]
 800b8d8:	0499      	lsls	r1, r3, #18
 800b8da:	d50c      	bpl.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b8dc:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800b8de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8e2:	f000 8081 	beq.w	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b8e6:	d867      	bhi.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d06d      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b8ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8f0:	d073      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b8f2:	2601      	movs	r6, #1
 800b8f4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b8f6:	682b      	ldr	r3, [r5, #0]
 800b8f8:	045a      	lsls	r2, r3, #17
 800b8fa:	d50e      	bpl.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b8fc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800b900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b904:	f000 8091 	beq.w	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b908:	d876      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d07c      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b90e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b912:	f000 8083 	beq.w	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b916:	2601      	movs	r6, #1
 800b918:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	015b      	lsls	r3, r3, #5
 800b91e:	d515      	bpl.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800b920:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b922:	b14b      	cbz	r3, 800b938 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b928:	f040 8087 	bne.w	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b92c:	2101      	movs	r1, #1
 800b92e:	f105 0008 	add.w	r0, r5, #8
 800b932:	f7ff fda7 	bl	800b484 <RCCEx_PLL2_Config>
 800b936:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b938:	2c00      	cmp	r4, #0
 800b93a:	f040 8081 	bne.w	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b93e:	4a76      	ldr	r2, [pc, #472]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b940:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b942:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b948:	430b      	orrs	r3, r1
 800b94a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	041f      	lsls	r7, r3, #16
 800b950:	d511      	bpl.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800b952:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b958:	d074      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b95a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b95e:	d077      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d17c      	bne.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800b964:	2c00      	cmp	r4, #0
 800b966:	d17d      	bne.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b968:	4a6b      	ldr	r2, [pc, #428]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b96a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b96c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b96e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b972:	430b      	orrs	r3, r1
 800b974:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	01d8      	lsls	r0, r3, #7
 800b97a:	f140 8083 	bpl.w	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800b97e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800b980:	2b03      	cmp	r3, #3
 800b982:	f200 80c4 	bhi.w	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b986:	e8df f003 	tbb	[pc, r3]
 800b98a:	6f74      	.short	0x6f74
 800b98c:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b98e:	4a62      	ldr	r2, [pc, #392]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b990:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b996:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b998:	e794      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b99a:	2100      	movs	r1, #0
 800b99c:	f105 0008 	add.w	r0, r5, #8
 800b9a0:	f7ff fd70 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9a4:	4604      	mov	r4, r0
        break;
 800b9a6:	e78d      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b9ae:	f7ff fddf 	bl	800b570 <RCCEx_PLL3_Config>
 800b9b2:	e7f7      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800b9b4:	4626      	mov	r6, r4
 800b9b6:	e78e      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b9b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9bc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800b9c0:	d002      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b9c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b9c6:	d194      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800b9c8:	b9a4      	cbnz	r4, 800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9ca:	4a53      	ldr	r2, [pc, #332]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b9cc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800b9ce:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b9d0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9d8:	e78d      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9da:	2101      	movs	r1, #1
 800b9dc:	f105 0008 	add.w	r0, r5, #8
 800b9e0:	f7ff fd50 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e4:	4604      	mov	r4, r0
        break;
 800b9e6:	e7ef      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b9ee:	f7ff fdbf 	bl	800b570 <RCCEx_PLL3_Config>
 800b9f2:	e7f7      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800b9f4:	4626      	mov	r6, r4
 800b9f6:	e77e      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b9f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b9fc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ba00:	d002      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ba02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba06:	d186      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800ba08:	b9ac      	cbnz	r4, 800ba36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba0a:	4a43      	ldr	r2, [pc, #268]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ba0c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800ba10:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ba12:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ba16:	430b      	orrs	r3, r1
 800ba18:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba1a:	e77e      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	f105 0008 	add.w	r0, r5, #8
 800ba22:	f7ff fd2f 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba26:	4604      	mov	r4, r0
        break;
 800ba28:	e7ee      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ba30:	f7ff fd9e 	bl	800b570 <RCCEx_PLL3_Config>
 800ba34:	e7f7      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800ba36:	4626      	mov	r6, r4
 800ba38:	e76f      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800ba3a:	2601      	movs	r6, #1
 800ba3c:	4634      	mov	r4, r6
 800ba3e:	e785      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800ba40:	4626      	mov	r6, r4
 800ba42:	e783      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba44:	4a34      	ldr	r2, [pc, #208]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ba46:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ba48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ba4e:	e789      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba50:	2101      	movs	r1, #1
 800ba52:	f105 0008 	add.w	r0, r5, #8
 800ba56:	f7ff fd15 	bl	800b484 <RCCEx_PLL2_Config>
 800ba5a:	4604      	mov	r4, r0
        break;
 800ba5c:	e782      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800ba5e:	2601      	movs	r6, #1
 800ba60:	4634      	mov	r4, r6
 800ba62:	e788      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800ba64:	4626      	mov	r6, r4
 800ba66:	e786      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba68:	4a2b      	ldr	r2, [pc, #172]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ba6a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ba6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	d14e      	bne.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ba76:	4a28      	ldr	r2, [pc, #160]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ba78:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ba7a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	430b      	orrs	r3, r1
 800ba82:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	0259      	lsls	r1, r3, #9
 800ba88:	d554      	bpl.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba8a:	4f24      	ldr	r7, [pc, #144]	@ (800bb1c <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba92:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ba94:	f7fa fc50 	bl	8006338 <HAL_GetTick>
 800ba98:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	05da      	lsls	r2, r3, #23
 800ba9e:	d541      	bpl.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800baa0:	2c00      	cmp	r4, #0
 800baa2:	d174      	bne.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800baa4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800baa6:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800baaa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800baac:	4042      	eors	r2, r0
 800baae:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800bab2:	d00b      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bab4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800bab6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bab8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800babc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800bac0:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bac2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bac4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800bac8:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800baca:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bacc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bad0:	d048      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bad2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800bad6:	4910      	ldr	r1, [pc, #64]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800bad8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800badc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bae0:	d151      	bne.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bae2:	6908      	ldr	r0, [r1, #16]
 800bae4:	4a0e      	ldr	r2, [pc, #56]	@ (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800bae6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800baea:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800baee:	4302      	orrs	r2, r0
 800baf0:	610a      	str	r2, [r1, #16]
 800baf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baf6:	4a08      	ldr	r2, [pc, #32]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800baf8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bafa:	430b      	orrs	r3, r1
 800bafc:	6713      	str	r3, [r2, #112]	@ 0x70
 800bafe:	e019      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb00:	2102      	movs	r1, #2
 800bb02:	f105 0008 	add.w	r0, r5, #8
 800bb06:	f7ff fcbd 	bl	800b484 <RCCEx_PLL2_Config>
 800bb0a:	4604      	mov	r4, r0
        break;
 800bb0c:	e7b1      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800bb0e:	2601      	movs	r6, #1
 800bb10:	4634      	mov	r4, r6
 800bb12:	e7b7      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800bb14:	4626      	mov	r6, r4
 800bb16:	e7b5      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800bb18:	58024400 	.word	0x58024400
 800bb1c:	58024800 	.word	0x58024800
 800bb20:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb24:	f7fa fc08 	bl	8006338 <HAL_GetTick>
 800bb28:	eba0 0008 	sub.w	r0, r0, r8
 800bb2c:	2864      	cmp	r0, #100	@ 0x64
 800bb2e:	d9b4      	bls.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800bb30:	2603      	movs	r6, #3
 800bb32:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	07d8      	lsls	r0, r3, #31
 800bb38:	d509      	bpl.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb3a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800bb3e:	2b10      	cmp	r3, #16
 800bb40:	d03e      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800bb42:	d826      	bhi.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800bb44:	b35b      	cbz	r3, 800bb9e <HAL_RCCEx_PeriphCLKConfig+0x542>
 800bb46:	2b08      	cmp	r3, #8
 800bb48:	d033      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800bb4a:	2601      	movs	r6, #1
 800bb4c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb4e:	682b      	ldr	r3, [r5, #0]
 800bb50:	0799      	lsls	r1, r3, #30
 800bb52:	d54b      	bpl.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb54:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d85e      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb5a:	e8df f003 	tbb	[pc, r3]
 800bb5e:	393f      	.short	0x393f
 800bb60:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800bb64:	f7fa fbe8 	bl	8006338 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb68:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800bb6c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb6e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb72:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800bb76:	079b      	lsls	r3, r3, #30
 800bb78:	d4ab      	bmi.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb7a:	f7fa fbdd 	bl	8006338 <HAL_GetTick>
 800bb7e:	1bc0      	subs	r0, r0, r7
 800bb80:	4548      	cmp	r0, r9
 800bb82:	d9f6      	bls.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800bb84:	e7d4      	b.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb86:	690a      	ldr	r2, [r1, #16]
 800bb88:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800bb8c:	e7b0      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800bb8e:	4626      	mov	r6, r4
 800bb90:	e7d0      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb92:	f023 0208 	bic.w	r2, r3, #8
 800bb96:	2a20      	cmp	r2, #32
 800bb98:	d001      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x542>
 800bb9a:	2b18      	cmp	r3, #24
 800bb9c:	d1d5      	bne.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800bb9e:	b9ac      	cbnz	r4, 800bbcc <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bba0:	4a20      	ldr	r2, [pc, #128]	@ (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bba2:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800bba6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bba8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800bbac:	430b      	orrs	r3, r1
 800bbae:	6553      	str	r3, [r2, #84]	@ 0x54
 800bbb0:	e7cd      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	f105 0008 	add.w	r0, r5, #8
 800bbb8:	f7ff fc64 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbbc:	4604      	mov	r4, r0
        break;
 800bbbe:	e7ee      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bbc6:	f7ff fcd3 	bl	800b570 <RCCEx_PLL3_Config>
 800bbca:	e7f7      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800bbcc:	4626      	mov	r6, r4
 800bbce:	e7be      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	f105 0008 	add.w	r0, r5, #8
 800bbd6:	f7ff fc55 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbda:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bbdc:	b9fc      	cbnz	r4, 800bc1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bbde:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbe0:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800bbe2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bbe4:	f023 0307 	bic.w	r3, r3, #7
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	075a      	lsls	r2, r3, #29
 800bbf0:	d52b      	bpl.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbf2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	f200 816e 	bhi.w	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800bbfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc00:	0014001a 	.word	0x0014001a
 800bc04:	001a0166 	.word	0x001a0166
 800bc08:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bc12:	f7ff fcad 	bl	800b570 <RCCEx_PLL3_Config>
 800bc16:	e7e0      	b.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc18:	2601      	movs	r6, #1
 800bc1a:	4634      	mov	r4, r6
 800bc1c:	e7e6      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800bc1e:	4626      	mov	r6, r4
 800bc20:	e7e4      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x590>
 800bc22:	bf00      	nop
 800bc24:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc28:	2101      	movs	r1, #1
 800bc2a:	f105 0008 	add.w	r0, r5, #8
 800bc2e:	f7ff fc29 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc32:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bc34:	2c00      	cmp	r4, #0
 800bc36:	f040 8152 	bne.w	800bede <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc3a:	4aaa      	ldr	r2, [pc, #680]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc3c:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800bc40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bc42:	f023 0307 	bic.w	r3, r3, #7
 800bc46:	430b      	orrs	r3, r1
 800bc48:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc4a:	682b      	ldr	r3, [r5, #0]
 800bc4c:	069b      	lsls	r3, r3, #26
 800bc4e:	d510      	bpl.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc50:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800bc54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc58:	f000 8160 	beq.w	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800bc5c:	f200 8144 	bhi.w	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 814a 	beq.w	800befa <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800bc66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc6a:	f000 8150 	beq.w	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800bc6e:	2601      	movs	r6, #1
 800bc70:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	065f      	lsls	r7, r3, #25
 800bc76:	d510      	bpl.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc78:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800bc7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc80:	f000 816e 	beq.w	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800bc84:	f200 8152 	bhi.w	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8158 	beq.w	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bc8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc92:	f000 815e 	beq.w	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800bc96:	2601      	movs	r6, #1
 800bc98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	0618      	lsls	r0, r3, #24
 800bc9e:	d510      	bpl.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bca0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800bca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bca8:	f000 817c 	beq.w	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800bcac:	f200 8160 	bhi.w	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8166 	beq.w	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800bcb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcba:	f000 816c 	beq.w	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800bcbe:	2601      	movs	r6, #1
 800bcc0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	0719      	lsls	r1, r3, #28
 800bcc6:	d514      	bpl.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bcc8:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800bccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcd0:	d107      	bne.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcd2:	2102      	movs	r1, #2
 800bcd4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bcd8:	f7ff fc4a 	bl	800b570 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	bf18      	it	ne
 800bce0:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bce2:	4a80      	ldr	r2, [pc, #512]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bce4:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800bce8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bcea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bcee:	430b      	orrs	r3, r1
 800bcf0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	06da      	lsls	r2, r3, #27
 800bcf6:	d514      	bpl.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bcf8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800bcfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd00:	d107      	bne.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd02:	2102      	movs	r1, #2
 800bd04:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bd08:	f7ff fc32 	bl	800b570 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	bf18      	it	ne
 800bd10:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd12:	4a74      	ldr	r2, [pc, #464]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bd14:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800bd18:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bd1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd1e:	430b      	orrs	r3, r1
 800bd20:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd22:	682b      	ldr	r3, [r5, #0]
 800bd24:	031b      	lsls	r3, r3, #12
 800bd26:	d51b      	bpl.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800bd28:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bd2c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800bd30:	f000 8140 	beq.w	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800bd34:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800bd38:	d007      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800bd3a:	2900      	cmp	r1, #0
 800bd3c:	f040 8140 	bne.w	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd40:	f105 0008 	add.w	r0, r5, #8
 800bd44:	f7ff fb9e 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd48:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	f040 813b 	bne.w	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd50:	4a64      	ldr	r2, [pc, #400]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bd52:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bd56:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bd58:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	035f      	lsls	r7, r3, #13
 800bd64:	d50f      	bpl.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800bd66:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800bd6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd6e:	f000 813b 	beq.w	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bd72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd76:	f000 812d 	beq.w	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800bd7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd7e:	f000 8124 	beq.w	800bfca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800bd82:	2601      	movs	r6, #1
 800bd84:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	03d8      	lsls	r0, r3, #15
 800bd8a:	d509      	bpl.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bd8c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 8133 	beq.w	800bffa <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800bd94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd98:	f000 813d 	beq.w	800c016 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bd9c:	2601      	movs	r6, #1
 800bd9e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	0099      	lsls	r1, r3, #2
 800bda4:	d507      	bpl.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda6:	2102      	movs	r1, #2
 800bda8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bdac:	f7ff fbe0 	bl	800b570 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	bf18      	it	ne
 800bdb4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdb6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800bdba:	039a      	lsls	r2, r3, #14
 800bdbc:	f140 8143 	bpl.w	800c046 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800bdc0:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800bdc4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bdc8:	f000 813f 	beq.w	800c04a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800bdcc:	f200 812c 	bhi.w	800c028 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	f000 812f 	beq.w	800c034 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800bdd6:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bdd8:	02df      	lsls	r7, r3, #11
 800bdda:	d506      	bpl.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bddc:	4841      	ldr	r0, [pc, #260]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bdde:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800bde0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bde2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bde6:	4332      	orrs	r2, r6
 800bde8:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bdea:	00de      	lsls	r6, r3, #3
 800bdec:	d507      	bpl.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bdee:	483d      	ldr	r0, [pc, #244]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bdf0:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800bdf4:	6902      	ldr	r2, [r0, #16]
 800bdf6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bdfa:	4332      	orrs	r2, r6
 800bdfc:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bdfe:	0298      	lsls	r0, r3, #10
 800be00:	d506      	bpl.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be02:	4838      	ldr	r0, [pc, #224]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800be04:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800be06:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800be08:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800be0c:	4332      	orrs	r2, r6
 800be0e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800be10:	005a      	lsls	r2, r3, #1
 800be12:	d509      	bpl.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be14:	4a33      	ldr	r2, [pc, #204]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800be16:	6910      	ldr	r0, [r2, #16]
 800be18:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800be1c:	6110      	str	r0, [r2, #16]
 800be1e:	6910      	ldr	r0, [r2, #16]
 800be20:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800be24:	4330      	orrs	r0, r6
 800be26:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da06      	bge.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800be2c:	482d      	ldr	r0, [pc, #180]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800be2e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800be30:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800be32:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800be36:	4332      	orrs	r2, r6
 800be38:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be3a:	021f      	lsls	r7, r3, #8
 800be3c:	d507      	bpl.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be3e:	4a29      	ldr	r2, [pc, #164]	@ (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800be40:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800be44:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800be46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800be4a:	4303      	orrs	r3, r0
 800be4c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be4e:	07ce      	lsls	r6, r1, #31
 800be50:	d506      	bpl.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be52:	2100      	movs	r1, #0
 800be54:	f105 0008 	add.w	r0, r5, #8
 800be58:	f7ff fb14 	bl	800b484 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800be5c:	4607      	mov	r7, r0
 800be5e:	b900      	cbnz	r0, 800be62 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800be60:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be62:	686b      	ldr	r3, [r5, #4]
 800be64:	079c      	lsls	r4, r3, #30
 800be66:	d506      	bpl.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be68:	2101      	movs	r1, #1
 800be6a:	f105 0008 	add.w	r0, r5, #8
 800be6e:	f7ff fb09 	bl	800b484 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800be72:	4606      	mov	r6, r0
 800be74:	b900      	cbnz	r0, 800be78 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800be76:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800be78:	686b      	ldr	r3, [r5, #4]
 800be7a:	0758      	lsls	r0, r3, #29
 800be7c:	d506      	bpl.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be7e:	2102      	movs	r1, #2
 800be80:	f105 0008 	add.w	r0, r5, #8
 800be84:	f7ff fafe 	bl	800b484 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800be88:	4604      	mov	r4, r0
 800be8a:	b900      	cbnz	r0, 800be8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800be8c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800be8e:	686b      	ldr	r3, [r5, #4]
 800be90:	0719      	lsls	r1, r3, #28
 800be92:	d506      	bpl.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be94:	2100      	movs	r1, #0
 800be96:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be9a:	f7ff fb69 	bl	800b570 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800be9e:	4606      	mov	r6, r0
 800bea0:	b900      	cbnz	r0, 800bea4 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800bea2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bea4:	686b      	ldr	r3, [r5, #4]
 800bea6:	06da      	lsls	r2, r3, #27
 800bea8:	d506      	bpl.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beaa:	2101      	movs	r1, #1
 800beac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800beb0:	f7ff fb5e 	bl	800b570 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800beb4:	4604      	mov	r4, r0
 800beb6:	b900      	cbnz	r0, 800beba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800beb8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800beba:	686b      	ldr	r3, [r5, #4]
 800bebc:	069b      	lsls	r3, r3, #26
 800bebe:	f100 80ca 	bmi.w	800c056 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800bec2:	1e20      	subs	r0, r4, #0
 800bec4:	bf18      	it	ne
 800bec6:	2001      	movne	r0, #1
}
 800bec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800becc:	2101      	movs	r1, #1
 800bece:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bed2:	f7ff fb4d 	bl	800b570 <RCCEx_PLL3_Config>
 800bed6:	e6ac      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bed8:	2601      	movs	r6, #1
 800beda:	4634      	mov	r4, r6
 800bedc:	e6b5      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800bede:	4626      	mov	r6, r4
 800bee0:	e6b3      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800bee2:	bf00      	nop
 800bee4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bee8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800beec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800bef0:	d003      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800bef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bef6:	f47f aeba 	bne.w	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800befa:	b9ac      	cbnz	r4, 800bf28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800befc:	4a5b      	ldr	r2, [pc, #364]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800befe:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800bf02:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bf04:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800bf08:	430b      	orrs	r3, r1
 800bf0a:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf0c:	e6b1      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf0e:	2100      	movs	r1, #0
 800bf10:	f105 0008 	add.w	r0, r5, #8
 800bf14:	f7ff fab6 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf18:	4604      	mov	r4, r0
        break;
 800bf1a:	e7ee      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf1c:	2102      	movs	r1, #2
 800bf1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bf22:	f7ff fb25 	bl	800b570 <RCCEx_PLL3_Config>
 800bf26:	e7f7      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800bf28:	4626      	mov	r6, r4
 800bf2a:	e6a2      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf2c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bf30:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800bf34:	d003      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bf36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf3a:	f47f aeac 	bne.w	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800bf3e:	b9ac      	cbnz	r4, 800bf6c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf40:	4a4a      	ldr	r2, [pc, #296]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bf42:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800bf46:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bf48:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800bf4c:	430b      	orrs	r3, r1
 800bf4e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf50:	e6a3      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf52:	2100      	movs	r1, #0
 800bf54:	f105 0008 	add.w	r0, r5, #8
 800bf58:	f7ff fa94 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf5c:	4604      	mov	r4, r0
        break;
 800bf5e:	e7ee      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf60:	2102      	movs	r1, #2
 800bf62:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bf66:	f7ff fb03 	bl	800b570 <RCCEx_PLL3_Config>
 800bf6a:	e7f7      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800bf6c:	4626      	mov	r6, r4
 800bf6e:	e694      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bf74:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bf78:	d003      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800bf7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bf7e:	f47f ae9e 	bne.w	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800bf82:	b9ac      	cbnz	r4, 800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bf84:	4a39      	ldr	r2, [pc, #228]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bf86:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800bf8a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bf8c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bf90:	430b      	orrs	r3, r1
 800bf92:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf94:	e695      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf96:	2100      	movs	r1, #0
 800bf98:	f105 0008 	add.w	r0, r5, #8
 800bf9c:	f7ff fa72 	bl	800b484 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfa0:	4604      	mov	r4, r0
        break;
 800bfa2:	e7ee      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfa4:	2102      	movs	r1, #2
 800bfa6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bfaa:	f7ff fae1 	bl	800b570 <RCCEx_PLL3_Config>
 800bfae:	e7f7      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800bfb0:	4626      	mov	r6, r4
 800bfb2:	e686      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfb4:	2102      	movs	r1, #2
 800bfb6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bfba:	f7ff fad9 	bl	800b570 <RCCEx_PLL3_Config>
 800bfbe:	e6c3      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800bfc0:	2601      	movs	r6, #1
 800bfc2:	4634      	mov	r4, r6
 800bfc4:	e6cc      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800bfc6:	4626      	mov	r6, r4
 800bfc8:	e6ca      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfca:	4a28      	ldr	r2, [pc, #160]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bfcc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bfce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bfd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bfd4:	b97c      	cbnz	r4, 800bff6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfd6:	4a25      	ldr	r2, [pc, #148]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bfd8:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800bfdc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bfde:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	6553      	str	r3, [r2, #84]	@ 0x54
 800bfe6:	e6ce      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe8:	2101      	movs	r1, #1
 800bfea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bfee:	f7ff fabf 	bl	800b570 <RCCEx_PLL3_Config>
 800bff2:	4604      	mov	r4, r0
        break;
 800bff4:	e7ee      	b.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800bff6:	4626      	mov	r6, r4
 800bff8:	e6c5      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bffa:	4a1c      	ldr	r2, [pc, #112]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bffc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c002:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c004:	b974      	cbnz	r4, 800c024 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c006:	4a19      	ldr	r2, [pc, #100]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800c008:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800c00a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c00c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c010:	430b      	orrs	r3, r1
 800c012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c014:	e6c4      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c016:	2102      	movs	r1, #2
 800c018:	f105 0008 	add.w	r0, r5, #8
 800c01c:	f7ff fa32 	bl	800b484 <RCCEx_PLL2_Config>
 800c020:	4604      	mov	r4, r0
        break;
 800c022:	e7ef      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800c024:	4626      	mov	r6, r4
 800c026:	e6bb      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800c028:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800c02c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800c030:	f47f aed1 	bne.w	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800c034:	2c00      	cmp	r4, #0
 800c036:	f47f aecf 	bne.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c03a:	4c0c      	ldr	r4, [pc, #48]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800c03c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c03e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c042:	4302      	orrs	r2, r0
 800c044:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800c046:	4634      	mov	r4, r6
 800c048:	e6c6      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c04a:	4f08      	ldr	r7, [pc, #32]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800c04c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c04e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c052:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800c054:	e7ee      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c056:	2102      	movs	r1, #2
 800c058:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c05c:	f7ff fa88 	bl	800b570 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c060:	2800      	cmp	r0, #0
 800c062:	f43f af2e 	beq.w	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800c066:	2001      	movs	r0, #1
 800c068:	e72e      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800c06a:	bf00      	nop
 800c06c:	58024400 	.word	0x58024400

0800c070 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c070:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c072:	f7ff f997 	bl	800b3a4 <HAL_RCC_GetHCLKFreq>
 800c076:	4b05      	ldr	r3, [pc, #20]	@ (800c08c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c078:	4a05      	ldr	r2, [pc, #20]	@ (800c090 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c080:	5cd3      	ldrb	r3, [r2, r3]
 800c082:	f003 031f 	and.w	r3, r3, #31
}
 800c086:	40d8      	lsrs	r0, r3
 800c088:	bd08      	pop	{r3, pc}
 800c08a:	bf00      	nop
 800c08c:	58024400 	.word	0x58024400
 800c090:	0802818c 	.word	0x0802818c

0800c094 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c094:	494f      	ldr	r1, [pc, #316]	@ (800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c096:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c098:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c09a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c09c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800c09e:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c0a2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c0a6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800c0a8:	f000 8090 	beq.w	800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0ac:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c0b0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c0b4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0b8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c0c0:	4353      	muls	r3, r2
    switch (pllsource)
 800c0c2:	2c01      	cmp	r4, #1
 800c0c4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0c8:	ee06 3a90 	vmov	s13, r3
 800c0cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c0d0:	d06e      	beq.n	800c1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800c0d2:	2c02      	cmp	r4, #2
 800c0d4:	d05e      	beq.n	800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800c0d6:	2c00      	cmp	r4, #0
 800c0d8:	d16a      	bne.n	800c1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0da:	680b      	ldr	r3, [r1, #0]
 800c0dc:	069b      	lsls	r3, r3, #26
 800c0de:	d547      	bpl.n	800c170 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0e0:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0e2:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0e4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c0e8:	4a3b      	ldr	r2, [pc, #236]	@ (800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ee:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0f0:	ee07 2a90 	vmov	s15, r2
 800c0f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c0f8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c0fc:	ee07 3a10 	vmov	s14, r3
 800c100:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c104:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c108:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c10c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c110:	4a30      	ldr	r2, [pc, #192]	@ (800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c112:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c114:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c118:	ee07 3a10 	vmov	s14, r3
 800c11c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c120:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c124:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c128:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c12c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c130:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c132:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c136:	ee07 3a10 	vmov	s14, r3
 800c13a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c13e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c146:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c14a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c14e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c150:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c154:	ee06 3a90 	vmov	s13, r3
 800c158:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c15c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c160:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c164:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c168:	ee17 3a90 	vmov	r3, s15
 800c16c:	6083      	str	r3, [r0, #8]
}
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c170:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c172:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c1dc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c186:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c18a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c18e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c192:	e7bd      	b.n	800c110 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c194:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c196:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c1ae:	e7ec      	b.n	800c18a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1b0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c1b2:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800c1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c1ca:	e7de      	b.n	800c18a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c1cc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c1d0:	e7cc      	b.n	800c16c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800c1d2:	bf00      	nop
 800c1d4:	58024400 	.word	0x58024400
 800c1d8:	03d09000 	.word	0x03d09000
 800c1dc:	4c742400 	.word	0x4c742400
 800c1e0:	4bbebc20 	.word	0x4bbebc20
 800c1e4:	4a742400 	.word	0x4a742400

0800c1e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1e8:	494f      	ldr	r1, [pc, #316]	@ (800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c1ea:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1ec:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c1ee:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c1f0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800c1f2:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c1f6:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c1fa:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800c1fc:	f000 8090 	beq.w	800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c200:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c204:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c208:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c20c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c214:	4353      	muls	r3, r2
    switch (pllsource)
 800c216:	2c01      	cmp	r4, #1
 800c218:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c21c:	ee06 3a90 	vmov	s13, r3
 800c220:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c224:	d06e      	beq.n	800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800c226:	2c02      	cmp	r4, #2
 800c228:	d05e      	beq.n	800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	d16a      	bne.n	800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c22e:	680b      	ldr	r3, [r1, #0]
 800c230:	069b      	lsls	r3, r3, #26
 800c232:	d547      	bpl.n	800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c234:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c236:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c238:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c23c:	4a3b      	ldr	r2, [pc, #236]	@ (800c32c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c242:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c244:	ee07 2a90 	vmov	s15, r2
 800c248:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c24c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c250:	ee07 3a10 	vmov	s14, r3
 800c254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c258:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c25c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c260:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c264:	4a30      	ldr	r2, [pc, #192]	@ (800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c266:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c268:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c26c:	ee07 3a10 	vmov	s14, r3
 800c270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c274:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c278:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c27c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c280:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c284:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c286:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c28a:	ee07 3a10 	vmov	s14, r3
 800c28e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c292:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c29a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c29e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c2a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c2a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c2a8:	ee06 3a90 	vmov	s13, r3
 800c2ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c2b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c2b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c2b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c2bc:	ee17 3a90 	vmov	r3, s15
 800c2c0:	6083      	str	r3, [r0, #8]
}
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2c6:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c330 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ce:	ee07 3a90 	vmov	s15, r3
 800c2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2da:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2de:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c2e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c2e6:	e7bd      	b.n	800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2ea:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c334 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800c2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c302:	e7ec      	b.n	800c2de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c304:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c306:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c31a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c31e:	e7de      	b.n	800c2de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c320:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c324:	e7cc      	b.n	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800c326:	bf00      	nop
 800c328:	58024400 	.word	0x58024400
 800c32c:	03d09000 	.word	0x03d09000
 800c330:	4c742400 	.word	0x4c742400
 800c334:	4bbebc20 	.word	0x4bbebc20
 800c338:	4a742400 	.word	0x4a742400

0800c33c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c33c:	494f      	ldr	r1, [pc, #316]	@ (800c47c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800c33e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c340:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c342:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c344:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 800c346:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c34a:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c34e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 800c350:	f000 8090 	beq.w	800c474 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c354:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c358:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c35c:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c360:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c368:	4353      	muls	r3, r2
    switch (pllsource)
 800c36a:	2c01      	cmp	r4, #1
 800c36c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c370:	ee06 3a90 	vmov	s13, r3
 800c374:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c378:	d04e      	beq.n	800c418 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800c37a:	2c02      	cmp	r4, #2
 800c37c:	d05e      	beq.n	800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800c37e:	2c00      	cmp	r4, #0
 800c380:	d16a      	bne.n	800c458 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c382:	680b      	ldr	r3, [r1, #0]
 800c384:	069b      	lsls	r3, r3, #26
 800c386:	d567      	bpl.n	800c458 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c388:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c38a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c38c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c390:	4a3b      	ldr	r2, [pc, #236]	@ (800c480 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c396:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c398:	ee07 2a90 	vmov	s15, r2
 800c39c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c3a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c3a4:	ee07 3a10 	vmov	s14, r3
 800c3a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c3b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c3b8:	4a30      	ldr	r2, [pc, #192]	@ (800c47c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800c3ba:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c3bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c3c0:	ee07 3a10 	vmov	s14, r3
 800c3c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c3d0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c3d4:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c3d8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c3da:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c3de:	ee07 3a10 	vmov	s14, r3
 800c3e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c3ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c3f2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c3f6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c3f8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c3fc:	ee06 3a90 	vmov	s13, r3
 800c400:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c404:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c40c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c410:	ee17 3a90 	vmov	r3, s15
 800c414:	6083      	str	r3, [r0, #8]
}
 800c416:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c418:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800c41a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c484 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c42e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c432:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c436:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c43a:	e7bd      	b.n	800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c43c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800c43e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800c442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c446:	ee07 3a90 	vmov	s15, r3
 800c44a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c456:	e7ec      	b.n	800c432 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c458:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800c45a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c48c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800c45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c46e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c472:	e7de      	b.n	800c432 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c474:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c478:	e7cc      	b.n	800c414 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800c47a:	bf00      	nop
 800c47c:	58024400 	.word	0x58024400
 800c480:	03d09000 	.word	0x03d09000
 800c484:	4a742400 	.word	0x4a742400
 800c488:	4bbebc20 	.word	0x4bbebc20
 800c48c:	4c742400 	.word	0x4c742400

0800c490 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800c490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c492:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800c496:	430b      	orrs	r3, r1
 800c498:	d115      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c49a:	4b9d      	ldr	r3, [pc, #628]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c49c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c49e:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800c4a2:	2a04      	cmp	r2, #4
 800c4a4:	d82d      	bhi.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800c4a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c4aa:	001c      	.short	0x001c
 800c4ac:	000500e1 	.word	0x000500e1
 800c4b0:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800c4ba:	f000 80df 	beq.w	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4be:	a801      	add	r0, sp, #4
 800c4c0:	f7ff fe92 	bl	800c1e8 <HAL_RCCEx_GetPLL3ClockFreq>
 800c4c4:	e0d9      	b.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c4c6:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	d11b      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c4ce:	4b90      	ldr	r3, [pc, #576]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c4d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c4d2:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800c4d6:	2a80      	cmp	r2, #128	@ 0x80
 800c4d8:	d0ec      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800c4da:	d80c      	bhi.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	f040 80c5 	bne.w	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4e2:	6818      	ldr	r0, [r3, #0]
 800c4e4:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800c4e8:	f000 80c8 	beq.w	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ec:	a801      	add	r0, sp, #4
 800c4ee:	f7ff ff25 	bl	800c33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4f2:	9802      	ldr	r0, [sp, #8]
 800c4f4:	e0c2      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 800c4f6:	2ac0      	cmp	r2, #192	@ 0xc0
 800c4f8:	f000 8128 	beq.w	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800c4fc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 800c500:	d014      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 800c502:	2000      	movs	r0, #0
 800c504:	e0ba      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c506:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800c50a:	430b      	orrs	r3, r1
 800c50c:	d12e      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c50e:	4b80      	ldr	r3, [pc, #512]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c512:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 800c516:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800c51a:	d0cb      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800c51c:	d9de      	bls.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800c51e:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 800c522:	f000 8113 	beq.w	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800c526:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800c52a:	e7e9      	b.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c52c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c52e:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c530:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c534:	0748      	lsls	r0, r1, #29
 800c536:	d506      	bpl.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c538:	b92a      	cbnz	r2, 800c546 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53a:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c540:	4874      	ldr	r0, [pc, #464]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c542:	40d8      	lsrs	r0, r3
 800c544:	e09a      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c546:	4b72      	ldr	r3, [pc, #456]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c548:	6819      	ldr	r1, [r3, #0]
 800c54a:	05c9      	lsls	r1, r1, #23
 800c54c:	d503      	bpl.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800c54e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800c552:	f000 80fd 	beq.w	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800c55c:	f000 808e 	beq.w	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 800c560:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800c564:	486c      	ldr	r0, [pc, #432]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c566:	bf18      	it	ne
 800c568:	2000      	movne	r0, #0
 800c56a:	e087      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c56c:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800c570:	430b      	orrs	r3, r1
 800c572:	d11f      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c574:	4b66      	ldr	r3, [pc, #408]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c576:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c578:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 800c57c:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800c580:	d098      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800c582:	d9ab      	bls.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800c584:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800c588:	f000 80e0 	beq.w	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800c58c:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 800c590:	d1b7      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c594:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c596:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c59a:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c59c:	0748      	lsls	r0, r1, #29
 800c59e:	d501      	bpl.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d0cb      	beq.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5a4:	05d9      	lsls	r1, r3, #23
 800c5a6:	d503      	bpl.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c5a8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800c5ac:	f000 80d0 	beq.w	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5b0:	4b57      	ldr	r3, [pc, #348]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c5b2:	e7d0      	b.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c5b4:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	d10f      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c5bc:	4b54      	ldr	r3, [pc, #336]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c5be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5c0:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 800c5c4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800c5c8:	f43f af74 	beq.w	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800c5cc:	d986      	bls.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800c5ce:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800c5d2:	f000 80bb 	beq.w	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800c5d6:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800c5da:	e7d9      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c5dc:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	d132      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c5e4:	4a4a      	ldr	r2, [pc, #296]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c5e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c5e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800c5ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c5f0:	f000 8081 	beq.w	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c5f4:	d80d      	bhi.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800c5f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5fa:	d016      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800c5fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c600:	d01b      	beq.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c602:	2b00      	cmp	r3, #0
 800c604:	f47f af7d 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 800c608:	b005      	add	sp, #20
 800c60a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800c60e:	f7fe beeb 	b.w	800b3e8 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 800c612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c616:	d074      	beq.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 800c61c:	f47f af71 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c620:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 800c622:	4b3d      	ldr	r3, [pc, #244]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c624:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800c628:	e06f      	b.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c62a:	6810      	ldr	r0, [r2, #0]
 800c62c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800c630:	d024      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c632:	a801      	add	r0, sp, #4
 800c634:	f7ff fd2e 	bl	800c094 <HAL_RCCEx_GetPLL2ClockFreq>
 800c638:	e75b      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c63a:	6810      	ldr	r0, [r2, #0]
 800c63c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800c640:	d01c      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c642:	a801      	add	r0, sp, #4
 800c644:	f7ff fdd0 	bl	800c1e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c648:	e753      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c64a:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800c64e:	430b      	orrs	r3, r1
 800c650:	d120      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c652:	4b2f      	ldr	r3, [pc, #188]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c654:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c656:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800c65a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c65e:	d010      	beq.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 800c660:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800c664:	d095      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800c666:	2a00      	cmp	r2, #0
 800c668:	f47f af4b 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800c672:	d003      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c674:	a801      	add	r0, sp, #4
 800c676:	f7ff fd0d 	bl	800c094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c67a:	9801      	ldr	r0, [sp, #4]
}
 800c67c:	b005      	add	sp, #20
 800c67e:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800c688:	d0f8      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68a:	a801      	add	r0, sp, #4
 800c68c:	f7ff fdac 	bl	800c1e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c690:	9803      	ldr	r0, [sp, #12]
 800c692:	e7f3      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c694:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800c698:	430b      	orrs	r3, r1
 800c69a:	d10c      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c69c:	4b1c      	ldr	r3, [pc, #112]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c69e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800c6a0:	03d2      	lsls	r2, r2, #15
 800c6a2:	f57f af1e 	bpl.w	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6a6:	6818      	ldr	r0, [r3, #0]
 800c6a8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800c6ac:	d0e6      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ae:	a801      	add	r0, sp, #4
 800c6b0:	f7ff fcf0 	bl	800c094 <HAL_RCCEx_GetPLL2ClockFreq>
 800c6b4:	e7ec      	b.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6b6:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800c6ba:	430b      	orrs	r3, r1
 800c6bc:	d130      	bne.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c6be:	4a14      	ldr	r2, [pc, #80]	@ (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c6c0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c6c2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800c6c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c6ca:	d014      	beq.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c6cc:	d80d      	bhi.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c6ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6d2:	d0aa      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800c6d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6d8:	d0af      	beq.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f47f af11 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 800c6e0:	b005      	add	sp, #20
 800c6e2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c6e6:	f7ff bcc3 	b.w	800c070 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 800c6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ee:	d008      	beq.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c6f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6f4:	e792      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6f6:	6810      	ldr	r0, [r2, #0]
 800c6f8:	f010 0004 	ands.w	r0, r0, #4
 800c6fc:	d0be      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6fe:	6813      	ldr	r3, [r2, #0]
 800c700:	e71c      	b.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c702:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c706:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 800c70a:	bf18      	it	ne
 800c70c:	4618      	movne	r0, r3
 800c70e:	e7b5      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 800c710:	58024400 	.word	0x58024400
 800c714:	03d09000 	.word	0x03d09000
 800c718:	017d7840 	.word	0x017d7840
 800c71c:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c720:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800c724:	4308      	orrs	r0, r1
 800c726:	f47f aeec 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c72a:	4a0a      	ldr	r2, [pc, #40]	@ (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c72c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c72e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800c732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c736:	d007      	beq.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800c738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c73c:	f43f af75 	beq.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800c740:	2b00      	cmp	r3, #0
 800c742:	f47f aede 	bne.w	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800c746:	e76b      	b.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c748:	6810      	ldr	r0, [r2, #0]
 800c74a:	e6cb      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c74c:	4802      	ldr	r0, [pc, #8]	@ (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800c74e:	e795      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 800c750:	4802      	ldr	r0, [pc, #8]	@ (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c752:	e793      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 800c754:	58024400 	.word	0x58024400
 800c758:	00bb8000 	.word	0x00bb8000
 800c75c:	003d0900 	.word	0x003d0900

0800c760 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c764:	4604      	mov	r4, r0
 800c766:	b1f0      	cbz	r0, 800c7a6 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c768:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c76c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c770:	b91b      	cbnz	r3, 800c77a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c772:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c776:	f7f4 ff43 	bl	8001600 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c77a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c77c:	1d21      	adds	r1, r4, #4
 800c77e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c780:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c784:	f000 f9fd 	bl	800cb82 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c788:	6862      	ldr	r2, [r4, #4]
 800c78a:	4629      	mov	r1, r5
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	f000 fa2e 	bl	800cbee <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c792:	4a06      	ldr	r2, [pc, #24]	@ (800c7ac <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800c794:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c796:	6813      	ldr	r3, [r2, #0]
 800c798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c79c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	e7fc      	b.n	800c7a4 <HAL_SDRAM_Init+0x44>
 800c7aa:	bf00      	nop
 800c7ac:	52004000 	.word	0x52004000

0800c7b0 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800c7b4:	f7f4 ffbe 	bl	8001734 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800c7b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7bc:	f000 fa4d 	bl	800cc5a <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800c7c6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800c7ca:	bd10      	pop	{r4, pc}

0800c7cc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c7cc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c7ce:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c7d6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c7d8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c7da:	d010      	beq.n	800c7fe <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c7dc:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c7e0:	2c01      	cmp	r4, #1
 800c7e2:	d110      	bne.n	800c806 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7e4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c7e6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7e8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c7ec:	f000 fa44 	bl	800cc78 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c7f0:	6833      	ldr	r3, [r6, #0]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d104      	bne.n	800c800 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c7f6:	2305      	movs	r3, #5
 800c7f8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c7fc:	2000      	movs	r0, #0
}
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c800:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c804:	e7fa      	b.n	800c7fc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c806:	2001      	movs	r0, #1
 800c808:	e7f9      	b.n	800c7fe <HAL_SDRAM_SendCommand+0x32>

0800c80a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c80a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c80c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c810:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c812:	2b02      	cmp	r3, #2
 800c814:	b2d8      	uxtb	r0, r3
 800c816:	d00d      	beq.n	800c834 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c818:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	b2dd      	uxtb	r5, r3
 800c820:	d109      	bne.n	800c836 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c822:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c824:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c826:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c82a:	f000 fa37 	bl	800cc9c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c82e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c830:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c834:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c836:	2001      	movs	r0, #1
 800c838:	e7fc      	b.n	800c834 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c83a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c83a:	4770      	bx	lr

0800c83c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c83c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c840:	2b01      	cmp	r3, #1
 800c842:	d12f      	bne.n	800c8a4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c844:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c846:	4a18      	ldr	r2, [pc, #96]	@ (800c8a8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c848:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c84c:	6803      	ldr	r3, [r0, #0]
 800c84e:	4293      	cmp	r3, r2
 800c850:	d01a      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c856:	d017      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c858:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d013      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c860:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c864:	4293      	cmp	r3, r2
 800c866:	d00f      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c868:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d00b      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c870:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c874:	4293      	cmp	r3, r2
 800c876:	d007      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c878:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d003      	beq.n	800c888 <HAL_TIM_Base_Start+0x4c>
 800c880:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c884:	4293      	cmp	r3, r2
 800c886:	d107      	bne.n	800c898 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c888:	6899      	ldr	r1, [r3, #8]
 800c88a:	4a08      	ldr	r2, [pc, #32]	@ (800c8ac <HAL_TIM_Base_Start+0x70>)
 800c88c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c88e:	2a06      	cmp	r2, #6
 800c890:	d006      	beq.n	800c8a0 <HAL_TIM_Base_Start+0x64>
 800c892:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c896:	d003      	beq.n	800c8a0 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	f042 0201 	orr.w	r2, r2, #1
 800c89e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	4770      	bx	lr
    return HAL_ERROR;
 800c8a4:	2001      	movs	r0, #1
}
 800c8a6:	4770      	bx	lr
 800c8a8:	40010000 	.word	0x40010000
 800c8ac:	00010007 	.word	0x00010007

0800c8b0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d133      	bne.n	800c920 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8be:	6803      	ldr	r3, [r0, #0]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	f042 0201 	orr.w	r2, r2, #1
 800c8c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8c8:	4a16      	ldr	r2, [pc, #88]	@ (800c924 <HAL_TIM_Base_Start_IT+0x74>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d01a      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8d2:	d017      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d013      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00f      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d00b      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8ec:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d007      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8f4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d003      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x54>
 800c8fc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c900:	4293      	cmp	r3, r2
 800c902:	d107      	bne.n	800c914 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c904:	6899      	ldr	r1, [r3, #8]
 800c906:	4a08      	ldr	r2, [pc, #32]	@ (800c928 <HAL_TIM_Base_Start_IT+0x78>)
 800c908:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c90a:	2a06      	cmp	r2, #6
 800c90c:	d006      	beq.n	800c91c <HAL_TIM_Base_Start_IT+0x6c>
 800c90e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c912:	d003      	beq.n	800c91c <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	f042 0201 	orr.w	r2, r2, #1
 800c91a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c91c:	2000      	movs	r0, #0
 800c91e:	4770      	bx	lr
    return HAL_ERROR;
 800c920:	2001      	movs	r0, #1
}
 800c922:	4770      	bx	lr
 800c924:	40010000 	.word	0x40010000
 800c928:	00010007 	.word	0x00010007

0800c92c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c92c:	4770      	bx	lr

0800c92e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c92e:	4770      	bx	lr

0800c930 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c930:	4770      	bx	lr

0800c932 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c932:	4770      	bx	lr

0800c934 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c934:	6803      	ldr	r3, [r0, #0]
{
 800c936:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c938:	68dd      	ldr	r5, [r3, #12]
{
 800c93a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c93c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c93e:	07b2      	lsls	r2, r6, #30
 800c940:	d50d      	bpl.n	800c95e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c942:	07a9      	lsls	r1, r5, #30
 800c944:	d50b      	bpl.n	800c95e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c946:	f06f 0202 	mvn.w	r2, #2
 800c94a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c94c:	2201      	movs	r2, #1
 800c94e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	079a      	lsls	r2, r3, #30
 800c954:	d075      	beq.n	800ca42 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c956:	f7ff ffea 	bl	800c92e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c95a:	2300      	movs	r3, #0
 800c95c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c95e:	0773      	lsls	r3, r6, #29
 800c960:	d510      	bpl.n	800c984 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c962:	0768      	lsls	r0, r5, #29
 800c964:	d50e      	bpl.n	800c984 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c96c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c96e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c970:	2202      	movs	r2, #2
 800c972:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c97a:	d068      	beq.n	800ca4e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c97c:	f7ff ffd7 	bl	800c92e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c980:	2300      	movs	r3, #0
 800c982:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c984:	0731      	lsls	r1, r6, #28
 800c986:	d50f      	bpl.n	800c9a8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c988:	072a      	lsls	r2, r5, #28
 800c98a:	d50d      	bpl.n	800c9a8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c992:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c996:	2204      	movs	r2, #4
 800c998:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	079b      	lsls	r3, r3, #30
 800c99e:	d05c      	beq.n	800ca5a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9a0:	f7ff ffc5 	bl	800c92e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c9a8:	06f1      	lsls	r1, r6, #27
 800c9aa:	d510      	bpl.n	800c9ce <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c9ac:	06ea      	lsls	r2, r5, #27
 800c9ae:	d50e      	bpl.n	800c9ce <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c9b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9ba:	2208      	movs	r2, #8
 800c9bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c9c4:	d04f      	beq.n	800ca66 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9c6:	f7ff ffb2 	bl	800c92e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c9ce:	07f3      	lsls	r3, r6, #31
 800c9d0:	d508      	bpl.n	800c9e4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c9d2:	07e8      	lsls	r0, r5, #31
 800c9d4:	d506      	bpl.n	800c9e4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c9de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9e0:	f7f4 fb70 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c9e4:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800c9e8:	d008      	beq.n	800c9fc <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9ea:	0629      	lsls	r1, r5, #24
 800c9ec:	d506      	bpl.n	800c9fc <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800c9f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c9f8:	f000 f8c1 	bl	800cb7e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9fc:	05f2      	lsls	r2, r6, #23
 800c9fe:	d508      	bpl.n	800ca12 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca00:	062b      	lsls	r3, r5, #24
 800ca02:	d506      	bpl.n	800ca12 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ca0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ca0e:	f000 f8b7 	bl	800cb80 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ca12:	0670      	lsls	r0, r6, #25
 800ca14:	d508      	bpl.n	800ca28 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ca16:	0669      	lsls	r1, r5, #25
 800ca18:	d506      	bpl.n	800ca28 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800ca20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca24:	f7ff ff85 	bl	800c932 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca28:	06b2      	lsls	r2, r6, #26
 800ca2a:	d522      	bpl.n	800ca72 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca2c:	06ab      	lsls	r3, r5, #26
 800ca2e:	d520      	bpl.n	800ca72 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ca36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca38:	611a      	str	r2, [r3, #16]
}
 800ca3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ca3e:	f000 b89d 	b.w	800cb7c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca42:	f7ff ff73 	bl	800c92c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7ff ff72 	bl	800c930 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca4c:	e785      	b.n	800c95a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca4e:	f7ff ff6d 	bl	800c92c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff ff6c 	bl	800c930 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca58:	e792      	b.n	800c980 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca5a:	f7ff ff67 	bl	800c92c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7ff ff66 	bl	800c930 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca64:	e79e      	b.n	800c9a4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca66:	f7ff ff61 	bl	800c92c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff ff60 	bl	800c930 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca70:	e7ab      	b.n	800c9ca <HAL_TIM_IRQHandler+0x96>
}
 800ca72:	bd70      	pop	{r4, r5, r6, pc}

0800ca74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca74:	4a27      	ldr	r2, [pc, #156]	@ (800cb14 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800ca76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca78:	4290      	cmp	r0, r2
 800ca7a:	d012      	beq.n	800caa2 <TIM_Base_SetConfig+0x2e>
 800ca7c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ca80:	d00f      	beq.n	800caa2 <TIM_Base_SetConfig+0x2e>
 800ca82:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ca86:	4290      	cmp	r0, r2
 800ca88:	d00b      	beq.n	800caa2 <TIM_Base_SetConfig+0x2e>
 800ca8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca8e:	4290      	cmp	r0, r2
 800ca90:	d007      	beq.n	800caa2 <TIM_Base_SetConfig+0x2e>
 800ca92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca96:	4290      	cmp	r0, r2
 800ca98:	d003      	beq.n	800caa2 <TIM_Base_SetConfig+0x2e>
 800ca9a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ca9e:	4290      	cmp	r0, r2
 800caa0:	d108      	bne.n	800cab4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800caa6:	684a      	ldr	r2, [r1, #4]
 800caa8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caae:	68ca      	ldr	r2, [r1, #12]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	e00a      	b.n	800caca <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cab4:	4a18      	ldr	r2, [pc, #96]	@ (800cb18 <TIM_Base_SetConfig+0xa4>)
 800cab6:	4290      	cmp	r0, r2
 800cab8:	d0f7      	beq.n	800caaa <TIM_Base_SetConfig+0x36>
 800caba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cabe:	4290      	cmp	r0, r2
 800cac0:	d0f3      	beq.n	800caaa <TIM_Base_SetConfig+0x36>
 800cac2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cac6:	4290      	cmp	r0, r2
 800cac8:	d0ef      	beq.n	800caaa <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800caca:	694a      	ldr	r2, [r1, #20]
 800cacc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cad0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cad2:	688a      	ldr	r2, [r1, #8]
 800cad4:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cad6:	680a      	ldr	r2, [r1, #0]
 800cad8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cada:	4a0e      	ldr	r2, [pc, #56]	@ (800cb14 <TIM_Base_SetConfig+0xa0>)
 800cadc:	4290      	cmp	r0, r2
 800cade:	d00f      	beq.n	800cb00 <TIM_Base_SetConfig+0x8c>
 800cae0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cae4:	4290      	cmp	r0, r2
 800cae6:	d00b      	beq.n	800cb00 <TIM_Base_SetConfig+0x8c>
 800cae8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800caec:	4290      	cmp	r0, r2
 800caee:	d007      	beq.n	800cb00 <TIM_Base_SetConfig+0x8c>
 800caf0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800caf4:	4290      	cmp	r0, r2
 800caf6:	d003      	beq.n	800cb00 <TIM_Base_SetConfig+0x8c>
 800caf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cafc:	4290      	cmp	r0, r2
 800cafe:	d101      	bne.n	800cb04 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb00:	690a      	ldr	r2, [r1, #16]
 800cb02:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cb04:	6802      	ldr	r2, [r0, #0]
 800cb06:	f042 0204 	orr.w	r2, r2, #4
 800cb0a:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800cb10:	6003      	str	r3, [r0, #0]
}
 800cb12:	4770      	bx	lr
 800cb14:	40010000 	.word	0x40010000
 800cb18:	40014000 	.word	0x40014000

0800cb1c <HAL_TIM_Base_Init>:
{
 800cb1c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800cb1e:	4604      	mov	r4, r0
 800cb20:	b350      	cbz	r0, 800cb78 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cb22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cb26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cb2a:	b91b      	cbnz	r3, 800cb34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800cb2c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cb30:	f7ff fe83 	bl	800c83a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800cb34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb36:	6820      	ldr	r0, [r4, #0]
 800cb38:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cb3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb3e:	f7ff ff99 	bl	800ca74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb42:	2301      	movs	r3, #1
  return HAL_OK;
 800cb44:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb46:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb4a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cb4e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800cb52:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cb56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cb5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cb66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cb6a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800cb6e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cb72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800cb76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800cb78:	2001      	movs	r0, #1
 800cb7a:	e7fc      	b.n	800cb76 <HAL_TIM_Base_Init+0x5a>

0800cb7c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cb7c:	4770      	bx	lr

0800cb7e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cb7e:	4770      	bx	lr

0800cb80 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cb80:	4770      	bx	lr

0800cb82 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800cb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb86:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800cb8a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800cb8e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800cb92:	ea43 0308 	orr.w	r3, r3, r8
 800cb96:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800cb9a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cb9e:	6809      	ldr	r1, [r1, #0]
 800cba0:	b981      	cbnz	r1, 800cbc4 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cba2:	ea43 030e 	orr.w	r3, r3, lr
 800cba6:	6801      	ldr	r1, [r0, #0]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	f36f 010e 	bfc	r1, #0, #15
 800cbae:	ea43 030c 	orr.w	r3, r3, ip
 800cbb2:	433b      	orrs	r3, r7
 800cbb4:	4333      	orrs	r3, r6
 800cbb6:	432b      	orrs	r3, r5
 800cbb8:	4323      	orrs	r3, r4
 800cbba:	430b      	orrs	r3, r1
 800cbbc:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cbc4:	6801      	ldr	r1, [r0, #0]
 800cbc6:	ea43 030e 	orr.w	r3, r3, lr
 800cbca:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cbd2:	ea42 030c 	orr.w	r3, r2, ip
 800cbd6:	6841      	ldr	r1, [r0, #4]
 800cbd8:	433b      	orrs	r3, r7
 800cbda:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800cbde:	4333      	orrs	r3, r6
 800cbe0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800cbe4:	432b      	orrs	r3, r5
 800cbe6:	4323      	orrs	r3, r4
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	6043      	str	r3, [r0, #4]
 800cbec:	e7e7      	b.n	800cbbe <FMC_SDRAM_Init+0x3c>

0800cbee <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbee:	68cb      	ldr	r3, [r1, #12]
 800cbf0:	f103 3cff 	add.w	ip, r3, #4294967295
 800cbf4:	694b      	ldr	r3, [r1, #20]
{
 800cbf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	684c      	ldr	r4, [r1, #4]
 800cbfc:	688f      	ldr	r7, [r1, #8]
 800cbfe:	690e      	ldr	r6, [r1, #16]
 800cc00:	051b      	lsls	r3, r3, #20
 800cc02:	698d      	ldr	r5, [r1, #24]
 800cc04:	3c01      	subs	r4, #1
 800cc06:	3f01      	subs	r7, #1
 800cc08:	3e01      	subs	r6, #1
 800cc0a:	3d01      	subs	r5, #1
 800cc0c:	6809      	ldr	r1, [r1, #0]
 800cc0e:	0124      	lsls	r4, r4, #4
 800cc10:	023f      	lsls	r7, r7, #8
 800cc12:	3901      	subs	r1, #1
 800cc14:	0436      	lsls	r6, r6, #16
 800cc16:	062d      	lsls	r5, r5, #24
 800cc18:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cc1c:	b95a      	cbnz	r2, 800cc36 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc1e:	430b      	orrs	r3, r1
 800cc20:	6882      	ldr	r2, [r0, #8]
 800cc22:	4323      	orrs	r3, r4
 800cc24:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cc28:	433b      	orrs	r3, r7
 800cc2a:	4333      	orrs	r3, r6
 800cc2c:	432b      	orrs	r3, r5
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cc32:	2000      	movs	r0, #0
 800cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc36:	6882      	ldr	r2, [r0, #8]
 800cc38:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cc3c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cc40:	4313      	orrs	r3, r2
 800cc42:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cc44:	ea44 0307 	orr.w	r3, r4, r7
 800cc48:	68c2      	ldr	r2, [r0, #12]
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cc50:	4333      	orrs	r3, r6
 800cc52:	432b      	orrs	r3, r5
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60c3      	str	r3, [r0, #12]
 800cc58:	e7eb      	b.n	800cc32 <FMC_SDRAM_Timing_Init+0x44>

0800cc5a <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800cc60:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800cc64:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800cc68:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800cc6a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800cc6e:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800cc70:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800cc72:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800cc74:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800cc76:	4770      	bx	lr

0800cc78 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cc78:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cc7a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cc7e:	6902      	ldr	r2, [r0, #16]
 800cc80:	4323      	orrs	r3, r4
 800cc82:	68cc      	ldr	r4, [r1, #12]
 800cc84:	f36f 0215 	bfc	r2, #0, #22
 800cc88:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	688a      	ldr	r2, [r1, #8]
 800cc90:	3a01      	subs	r2, #1
 800cc92:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cc96:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cc98:	2000      	movs	r0, #0
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cc9c:	6943      	ldr	r3, [r0, #20]
 800cc9e:	f36f 034d 	bfc	r3, #1, #13
 800cca2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cca6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cca8:	2000      	movs	r0, #0
 800ccaa:	4770      	bx	lr

0800ccac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ccac:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800ccae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ccb2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ccb4:	f001 ff38 	bl	800eb28 <xTaskGetSchedulerState>
 800ccb8:	2801      	cmp	r0, #1
 800ccba:	d003      	beq.n	800ccc4 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ccbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ccc0:	f000 bc60 	b.w	800d584 <xPortSysTickHandler>
}
 800ccc4:	bd08      	pop	{r3, pc}
	...

0800ccc8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cccc:	b92b      	cbnz	r3, 800ccda <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccce:	4b06      	ldr	r3, [pc, #24]	@ (800cce8 <osKernelInitialize+0x20>)
 800ccd0:	6818      	ldr	r0, [r3, #0]
 800ccd2:	b928      	cbnz	r0, 800cce0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccd8:	4770      	bx	lr
    stat = osErrorISR;
 800ccda:	f06f 0005 	mvn.w	r0, #5
 800ccde:	4770      	bx	lr
    } else {
      stat = osError;
 800cce0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	2400c674 	.word	0x2400c674

0800ccec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ccec:	b510      	push	{r4, lr}
 800ccee:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccf2:	b95c      	cbnz	r4, 800cd0c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ccf4:	4b08      	ldr	r3, [pc, #32]	@ (800cd18 <osKernelStart+0x2c>)
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	2a01      	cmp	r2, #1
 800ccfa:	d10a      	bne.n	800cd12 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccfc:	4a07      	ldr	r2, [pc, #28]	@ (800cd1c <osKernelStart+0x30>)
 800ccfe:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd00:	2202      	movs	r2, #2
 800cd02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd04:	f001 fdb0 	bl	800e868 <vTaskStartScheduler>
      stat = osOK;
 800cd08:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800cd0a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800cd0c:	f06f 0005 	mvn.w	r0, #5
 800cd10:	e7fb      	b.n	800cd0a <osKernelStart+0x1e>
      stat = osError;
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cd16:	e7f8      	b.n	800cd0a <osKernelStart+0x1e>
 800cd18:	2400c674 	.word	0x2400c674
 800cd1c:	e000ed00 	.word	0xe000ed00

0800cd20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	4614      	mov	r4, r2
 800cd24:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd26:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd28:	460b      	mov	r3, r1
  hTask = NULL;
 800cd2a:	9205      	str	r2, [sp, #20]
 800cd2c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cd30:	b9fa      	cbnz	r2, 800cd72 <osThreadNew+0x52>
 800cd32:	b1f0      	cbz	r0, 800cd72 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cd34:	b354      	cbz	r4, 800cd8c <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800cd36:	69a5      	ldr	r5, [r4, #24]
 800cd38:	b125      	cbz	r5, 800cd44 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd3a:	1e69      	subs	r1, r5, #1
 800cd3c:	2937      	cmp	r1, #55	@ 0x37
 800cd3e:	d902      	bls.n	800cd46 <osThreadNew+0x26>
        return (NULL);
 800cd40:	2000      	movs	r0, #0
 800cd42:	e017      	b.n	800cd74 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800cd44:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd46:	6862      	ldr	r2, [r4, #4]
 800cd48:	07d2      	lsls	r2, r2, #31
 800cd4a:	d4f9      	bmi.n	800cd40 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800cd4c:	6966      	ldr	r6, [r4, #20]
 800cd4e:	b19e      	cbz	r6, 800cd78 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd50:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cd52:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd54:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800cd58:	b187      	cbz	r7, 800cd7c <osThreadNew+0x5c>
 800cd5a:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800cd5e:	d908      	bls.n	800cd72 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd60:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd62:	b134      	cbz	r4, 800cd72 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd64:	b12e      	cbz	r6, 800cd72 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd66:	9500      	str	r5, [sp, #0]
 800cd68:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cd6c:	f001 fbbd 	bl	800e4ea <xTaskCreateStatic>
 800cd70:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd72:	9805      	ldr	r0, [sp, #20]
}
 800cd74:	b007      	add	sp, #28
 800cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cd78:	2280      	movs	r2, #128	@ 0x80
 800cd7a:	e7ea      	b.n	800cd52 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd7c:	f1bc 0f00 	cmp.w	ip, #0
 800cd80:	d1f7      	bne.n	800cd72 <osThreadNew+0x52>
 800cd82:	6924      	ldr	r4, [r4, #16]
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	d1f4      	bne.n	800cd72 <osThreadNew+0x52>
 800cd88:	460c      	mov	r4, r1
 800cd8a:	e001      	b.n	800cd90 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800cd8c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800cd8e:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd90:	a905      	add	r1, sp, #20
 800cd92:	b292      	uxth	r2, r2
 800cd94:	e9cd 5100 	strd	r5, r1, [sp]
 800cd98:	4621      	mov	r1, r4
 800cd9a:	f001 fbde 	bl	800e55a <xTaskCreate>
 800cd9e:	2801      	cmp	r0, #1
            hTask = NULL;
 800cda0:	bf1c      	itt	ne
 800cda2:	2300      	movne	r3, #0
 800cda4:	9305      	strne	r3, [sp, #20]
 800cda6:	e7e4      	b.n	800cd72 <osThreadNew+0x52>

0800cda8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cda8:	b508      	push	{r3, lr}
 800cdaa:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdae:	b922      	cbnz	r2, 800cdba <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800cdb0:	b108      	cbz	r0, 800cdb6 <osDelay+0xe>
      vTaskDelay(ticks);
 800cdb2:	f001 fd19 	bl	800e7e8 <vTaskDelay>
    stat = osOK;
 800cdb6:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800cdb8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800cdba:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 800cdbe:	e7fb      	b.n	800cdb8 <osDelay+0x10>

0800cdc0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800cdc8:	b117      	cbz	r7, 800cdd0 <osMutexNew+0x10>
  hMutex = NULL;
 800cdca:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800cdcc:	4620      	mov	r0, r4
 800cdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800cdd0:	b320      	cbz	r0, 800ce1c <osMutexNew+0x5c>
      type = attr->attr_bits;
 800cdd2:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800cdd4:	0733      	lsls	r3, r6, #28
 800cdd6:	d4f8      	bmi.n	800cdca <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cdd8:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cddc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800cde0:	b199      	cbz	r1, 800ce0a <osMutexNew+0x4a>
 800cde2:	2b4f      	cmp	r3, #79	@ 0x4f
 800cde4:	d9f1      	bls.n	800cdca <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cde6:	b1be      	cbz	r6, 800ce18 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cde8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdea:	f000 fed2 	bl	800db92 <xQueueCreateMutexStatic>
 800cdee:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d0ea      	beq.n	800cdca <osMutexNew+0xa>
          name = attr->name;
 800cdf4:	682d      	ldr	r5, [r5, #0]
 800cdf6:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f001 f9b0 	bl	800e160 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce00:	2f00      	cmp	r7, #0
 800ce02:	d0e3      	beq.n	800cdcc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce04:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800ce08:	e7e0      	b.n	800cdcc <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1dd      	bne.n	800cdca <osMutexNew+0xa>
            if (rmtx != 0U) {
 800ce0e:	b12e      	cbz	r6, 800ce1c <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce10:	2004      	movs	r0, #4
 800ce12:	f000 fef2 	bl	800dbfa <xQueueCreateMutex>
 800ce16:	e7ea      	b.n	800cdee <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce18:	2001      	movs	r0, #1
 800ce1a:	e7e6      	b.n	800cdea <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	f000 feec 	bl	800dbfa <xQueueCreateMutex>
      if (hMutex != NULL) {
 800ce22:	4604      	mov	r4, r0
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0d0      	beq.n	800cdca <osMutexNew+0xa>
        if (attr != NULL) {
 800ce28:	2d00      	cmp	r5, #0
 800ce2a:	d0e5      	beq.n	800cdf8 <osMutexNew+0x38>
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	e7e1      	b.n	800cdf4 <osMutexNew+0x34>

0800ce30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4603      	mov	r3, r0
 800ce34:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce36:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800ce3a:	f003 0201 	and.w	r2, r3, #1
 800ce3e:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce42:	b995      	cbnz	r5, 800ce6a <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d913      	bls.n	800ce70 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800ce48:	b162      	cbz	r2, 800ce64 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce4a:	f001 f8fc 	bl	800e046 <xQueueTakeMutexRecursive>
 800ce4e:	2801      	cmp	r0, #1
 800ce50:	d101      	bne.n	800ce56 <osMutexAcquire+0x26>
  stat = osOK;
 800ce52:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	bf14      	ite	ne
 800ce5a:	f06f 0001 	mvnne.w	r0, #1
 800ce5e:	f06f 0002 	mvneq.w	r0, #2
 800ce62:	e7f7      	b.n	800ce54 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ce64:	f001 f832 	bl	800decc <xQueueSemaphoreTake>
 800ce68:	e7f1      	b.n	800ce4e <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800ce6a:	f06f 0005 	mvn.w	r0, #5
 800ce6e:	e7f1      	b.n	800ce54 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800ce70:	f06f 0003 	mvn.w	r0, #3
 800ce74:	e7ee      	b.n	800ce54 <osMutexAcquire+0x24>

0800ce76 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce76:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce78:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce7c:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800ce7e:	f002 0301 	and.w	r3, r2, #1
 800ce82:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce86:	b979      	cbnz	r1, 800cea8 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800ce88:	2a01      	cmp	r2, #1
 800ce8a:	d910      	bls.n	800ceae <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800ce8c:	b13b      	cbz	r3, 800ce9e <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ce8e:	f000 fe95 	bl	800dbbc <xQueueGiveMutexRecursive>
 800ce92:	2801      	cmp	r0, #1
  stat = osOK;
 800ce94:	bf0c      	ite	eq
 800ce96:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800ce98:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ce9c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ce9e:	461a      	mov	r2, r3
 800cea0:	4619      	mov	r1, r3
 800cea2:	f000 fdc4 	bl	800da2e <xQueueGenericSend>
 800cea6:	e7f4      	b.n	800ce92 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800cea8:	f06f 0005 	mvn.w	r0, #5
 800ceac:	e7f6      	b.n	800ce9c <osMutexRelease+0x26>
    stat = osErrorParameter;
 800ceae:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ceb2:	e7f3      	b.n	800ce9c <osMutexRelease+0x26>

0800ceb4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ceb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	460e      	mov	r6, r1
 800ceba:	4615      	mov	r5, r2
 800cebc:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cec0:	b942      	cbnz	r2, 800ced4 <osSemaphoreNew+0x20>
 800cec2:	b138      	cbz	r0, 800ced4 <osSemaphoreNew+0x20>
 800cec4:	4288      	cmp	r0, r1
 800cec6:	d305      	bcc.n	800ced4 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800cec8:	b155      	cbz	r5, 800cee0 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ceca:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800cece:	b12b      	cbz	r3, 800cedc <osSemaphoreNew+0x28>
 800ced0:	2f4f      	cmp	r7, #79	@ 0x4f
 800ced2:	d822      	bhi.n	800cf1a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800ced4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ced6:	4620      	mov	r0, r4
 800ced8:	b003      	add	sp, #12
 800ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cedc:	2f00      	cmp	r7, #0
 800cede:	d1f9      	bne.n	800ced4 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800cee0:	2c01      	cmp	r4, #1
 800cee2:	d00c      	beq.n	800cefe <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cee4:	4620      	mov	r0, r4
 800cee6:	4631      	mov	r1, r6
 800cee8:	f000 fd83 	bl	800d9f2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ceec:	4604      	mov	r4, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d0f0      	beq.n	800ced4 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800cef2:	b985      	cbnz	r5, 800cf16 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800cef4:	4629      	mov	r1, r5
 800cef6:	4620      	mov	r0, r4
 800cef8:	f001 f932 	bl	800e160 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800cefc:	e7eb      	b.n	800ced6 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800cefe:	2203      	movs	r2, #3
 800cf00:	2100      	movs	r1, #0
 800cf02:	2001      	movs	r0, #1
 800cf04:	f000 fd2c 	bl	800d960 <xQueueGenericCreate>
 800cf08:	e00e      	b.n	800cf28 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f000 fd4f 	bl	800d9ae <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800cf10:	4604      	mov	r4, r0
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d0de      	beq.n	800ced4 <osSemaphoreNew+0x20>
          name = attr->name;
 800cf16:	682d      	ldr	r5, [r5, #0]
 800cf18:	e7ec      	b.n	800cef4 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800cf1a:	2801      	cmp	r0, #1
 800cf1c:	d1f5      	bne.n	800cf0a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf1e:	2103      	movs	r1, #3
 800cf20:	9100      	str	r1, [sp, #0]
 800cf22:	4611      	mov	r1, r2
 800cf24:	f000 fcce 	bl	800d8c4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800cf28:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d0d2      	beq.n	800ced4 <osSemaphoreNew+0x20>
 800cf2e:	2e00      	cmp	r6, #0
 800cf30:	d0df      	beq.n	800cef2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf32:	2300      	movs	r3, #0
 800cf34:	461a      	mov	r2, r3
 800cf36:	4619      	mov	r1, r3
 800cf38:	f000 fd79 	bl	800da2e <xQueueGenericSend>
 800cf3c:	2801      	cmp	r0, #1
 800cf3e:	d0d8      	beq.n	800cef2 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800cf40:	4620      	mov	r0, r4
 800cf42:	f001 f937 	bl	800e1b4 <vQueueDelete>
      if (hSemaphore != NULL) {
 800cf46:	e7c5      	b.n	800ced4 <osSemaphoreNew+0x20>

0800cf48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cf48:	b513      	push	{r0, r1, r4, lr}
 800cf4a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cf4c:	b328      	cbz	r0, 800cf9a <osSemaphoreAcquire+0x52>
 800cf4e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cf52:	b1cb      	cbz	r3, 800cf88 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800cf54:	bb09      	cbnz	r1, 800cf9a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf56:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cf58:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf5a:	f001 f895 	bl	800e088 <xQueueReceiveFromISR>
 800cf5e:	2801      	cmp	r0, #1
 800cf60:	d003      	beq.n	800cf6a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800cf62:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cf66:	b002      	add	sp, #8
 800cf68:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800cf6a:	9b01      	ldr	r3, [sp, #4]
 800cf6c:	b90b      	cbnz	r3, 800cf72 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e7f9      	b.n	800cf66 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800cf72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	e7f2      	b.n	800cf6e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cf88:	f000 ffa0 	bl	800decc <xQueueSemaphoreTake>
 800cf8c:	2801      	cmp	r0, #1
 800cf8e:	d0ee      	beq.n	800cf6e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800cf90:	2c00      	cmp	r4, #0
 800cf92:	d0e6      	beq.n	800cf62 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800cf94:	f06f 0001 	mvn.w	r0, #1
 800cf98:	e7e5      	b.n	800cf66 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800cf9a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cf9e:	e7e2      	b.n	800cf66 <osSemaphoreAcquire+0x1e>

0800cfa0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cfa0:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cfa2:	b318      	cbz	r0, 800cfec <osSemaphoreRelease+0x4c>
 800cfa4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cfa8:	b1cb      	cbz	r3, 800cfde <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800cfaa:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cfac:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800cfae:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cfb0:	f000 fe9d 	bl	800dcee <xQueueGiveFromISR>
 800cfb4:	2801      	cmp	r0, #1
 800cfb6:	d004      	beq.n	800cfc2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800cfb8:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800cfbc:	b003      	add	sp, #12
 800cfbe:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	b14b      	cbz	r3, 800cfda <osSemaphoreRelease+0x3a>
 800cfc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cfca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800cfda:	2000      	movs	r0, #0
 800cfdc:	e7ee      	b.n	800cfbc <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfde:	461a      	mov	r2, r3
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f000 fd24 	bl	800da2e <xQueueGenericSend>
 800cfe6:	2801      	cmp	r0, #1
 800cfe8:	d0f7      	beq.n	800cfda <osSemaphoreRelease+0x3a>
 800cfea:	e7e5      	b.n	800cfb8 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800cfec:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cff0:	e7e4      	b.n	800cfbc <osSemaphoreRelease+0x1c>

0800cff2 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 800cff2:	b130      	cbz	r0, 800d002 <osSemaphoreGetCount+0x10>
 800cff4:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800cff8:	b10b      	cbz	r3, 800cffe <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800cffa:	f001 b8a5 	b.w	800e148 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800cffe:	f001 b890 	b.w	800e122 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800d002:	4770      	bx	lr

0800d004 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d006:	4605      	mov	r5, r0
 800d008:	460e      	mov	r6, r1
 800d00a:	4614      	mov	r4, r2
 800d00c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d010:	b11f      	cbz	r7, 800d01a <osMessageQueueNew+0x16>
  hQueue = NULL;
 800d012:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d014:	4628      	mov	r0, r5
 800d016:	b003      	add	sp, #12
 800d018:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0f9      	beq.n	800d012 <osMessageQueueNew+0xe>
 800d01e:	2900      	cmp	r1, #0
 800d020:	d0f7      	beq.n	800d012 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800d022:	b1da      	cbz	r2, 800d05c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d024:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800d028:	b183      	cbz	r3, 800d04c <osMessageQueueNew+0x48>
 800d02a:	2a4f      	cmp	r2, #79	@ 0x4f
 800d02c:	d9f1      	bls.n	800d012 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d02e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d030:	2a00      	cmp	r2, #0
 800d032:	d0ee      	beq.n	800d012 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d034:	434d      	muls	r5, r1
 800d036:	6966      	ldr	r6, [r4, #20]
 800d038:	42ae      	cmp	r6, r5
 800d03a:	d3ea      	bcc.n	800d012 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d03c:	9700      	str	r7, [sp, #0]
 800d03e:	f000 fc41 	bl	800d8c4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d042:	4605      	mov	r5, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	d0e4      	beq.n	800d012 <osMessageQueueNew+0xe>
        name = attr->name;
 800d048:	6824      	ldr	r4, [r4, #0]
 800d04a:	e011      	b.n	800d070 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d1e0      	bne.n	800d012 <osMessageQueueNew+0xe>
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1dd      	bne.n	800d012 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d056:	6963      	ldr	r3, [r4, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1da      	bne.n	800d012 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800d05c:	4628      	mov	r0, r5
 800d05e:	2200      	movs	r2, #0
 800d060:	4631      	mov	r1, r6
 800d062:	f000 fc7d 	bl	800d960 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d066:	4605      	mov	r5, r0
 800d068:	2800      	cmp	r0, #0
 800d06a:	d0d2      	beq.n	800d012 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800d06c:	2c00      	cmp	r4, #0
 800d06e:	d1eb      	bne.n	800d048 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800d070:	4621      	mov	r1, r4
 800d072:	4628      	mov	r0, r5
 800d074:	f001 f874 	bl	800e160 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d078:	e7cc      	b.n	800d014 <osMessageQueueNew+0x10>

0800d07a <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d07c:	461c      	mov	r4, r3
 800d07e:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d082:	b1de      	cbz	r6, 800d0bc <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d084:	b338      	cbz	r0, 800d0d6 <osMessageQueuePut+0x5c>
 800d086:	b331      	cbz	r1, 800d0d6 <osMessageQueuePut+0x5c>
 800d088:	bb2b      	cbnz	r3, 800d0d6 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d08a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d08c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d08e:	f000 fdd1 	bl	800dc34 <xQueueGenericSendFromISR>
 800d092:	2801      	cmp	r0, #1
 800d094:	d003      	beq.n	800d09e <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800d096:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d09a:	b002      	add	sp, #8
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	b90b      	cbnz	r3, 800d0a6 <osMessageQueuePut+0x2c>
  stat = osOK;
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e7f9      	b.n	800d09a <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800d0a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	e7f2      	b.n	800d0a2 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0bc:	b158      	cbz	r0, 800d0d6 <osMessageQueuePut+0x5c>
 800d0be:	b151      	cbz	r1, 800d0d6 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d0c0:	4633      	mov	r3, r6
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	f000 fcb3 	bl	800da2e <xQueueGenericSend>
 800d0c8:	2801      	cmp	r0, #1
 800d0ca:	d0ea      	beq.n	800d0a2 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d0e2      	beq.n	800d096 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800d0d0:	f06f 0001 	mvn.w	r0, #1
 800d0d4:	e7e1      	b.n	800d09a <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800d0d6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d0da:	e7de      	b.n	800d09a <osMessageQueuePut+0x20>

0800d0dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0de:	461c      	mov	r4, r3
 800d0e0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d0e4:	b1db      	cbz	r3, 800d11e <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0e6:	b330      	cbz	r0, 800d136 <osMessageQueueGet+0x5a>
 800d0e8:	b329      	cbz	r1, 800d136 <osMessageQueueGet+0x5a>
 800d0ea:	bb24      	cbnz	r4, 800d136 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0ec:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d0ee:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0f0:	f000 ffca 	bl	800e088 <xQueueReceiveFromISR>
 800d0f4:	2801      	cmp	r0, #1
 800d0f6:	d003      	beq.n	800d100 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800d0f8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d0fc:	b003      	add	sp, #12
 800d0fe:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800d100:	9b01      	ldr	r3, [sp, #4]
 800d102:	b90b      	cbnz	r3, 800d108 <osMessageQueueGet+0x2c>
  stat = osOK;
 800d104:	2000      	movs	r0, #0
 800d106:	e7f9      	b.n	800d0fc <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800d108:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d110:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	e7f2      	b.n	800d104 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d11e:	b150      	cbz	r0, 800d136 <osMessageQueueGet+0x5a>
 800d120:	b149      	cbz	r1, 800d136 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d122:	4622      	mov	r2, r4
 800d124:	f000 fe34 	bl	800dd90 <xQueueReceive>
 800d128:	2801      	cmp	r0, #1
 800d12a:	d0eb      	beq.n	800d104 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800d12c:	2c00      	cmp	r4, #0
 800d12e:	d0e3      	beq.n	800d0f8 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800d130:	f06f 0001 	mvn.w	r0, #1
 800d134:	e7e2      	b.n	800d0fc <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800d136:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d13a:	e7df      	b.n	800d0fc <osMessageQueueGet+0x20>

0800d13c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d13c:	f7ff bf59 	b.w	800cff2 <osSemaphoreGetCount>

0800d140 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d140:	4b03      	ldr	r3, [pc, #12]	@ (800d150 <vApplicationGetIdleTaskMemory+0x10>)
 800d142:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d144:	4b03      	ldr	r3, [pc, #12]	@ (800d154 <vApplicationGetIdleTaskMemory+0x14>)
 800d146:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d148:	2380      	movs	r3, #128	@ 0x80
 800d14a:	6013      	str	r3, [r2, #0]
}
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	2400c614 	.word	0x2400c614
 800d154:	2400c414 	.word	0x2400c414

0800d158 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d158:	4b03      	ldr	r3, [pc, #12]	@ (800d168 <vApplicationGetTimerTaskMemory+0x10>)
 800d15a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d15c:	4b03      	ldr	r3, [pc, #12]	@ (800d16c <vApplicationGetTimerTaskMemory+0x14>)
 800d15e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d164:	6013      	str	r3, [r2, #0]
}
 800d166:	4770      	bx	lr
 800d168:	2400c3b4 	.word	0x2400c3b4
 800d16c:	2400bfb4 	.word	0x2400bfb4

0800d170 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d170:	4b10      	ldr	r3, [pc, #64]	@ (800d1b4 <prvInsertBlockIntoFreeList+0x44>)
{
 800d172:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d174:	461a      	mov	r2, r3
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4283      	cmp	r3, r0
 800d17a:	d3fb      	bcc.n	800d174 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d17c:	6854      	ldr	r4, [r2, #4]
 800d17e:	1911      	adds	r1, r2, r4
 800d180:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d182:	bf01      	itttt	eq
 800d184:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800d186:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d188:	1909      	addeq	r1, r1, r4
 800d18a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d18c:	6844      	ldr	r4, [r0, #4]
 800d18e:	1901      	adds	r1, r0, r4
 800d190:	428b      	cmp	r3, r1
 800d192:	d10c      	bne.n	800d1ae <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d194:	4908      	ldr	r1, [pc, #32]	@ (800d1b8 <prvInsertBlockIntoFreeList+0x48>)
 800d196:	6809      	ldr	r1, [r1, #0]
 800d198:	428b      	cmp	r3, r1
 800d19a:	d003      	beq.n	800d1a4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d19c:	6859      	ldr	r1, [r3, #4]
 800d19e:	4421      	add	r1, r4
 800d1a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1a2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1a4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1a6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1a8:	bf18      	it	ne
 800d1aa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	e7f8      	b.n	800d1a4 <prvInsertBlockIntoFreeList+0x34>
 800d1b2:	bf00      	nop
 800d1b4:	2400c690 	.word	0x2400c690
 800d1b8:	2400c68c 	.word	0x2400c68c

0800d1bc <pvPortMalloc>:
{
 800d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d1c2:	f001 f9f9 	bl	800e5b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d1c6:	4940      	ldr	r1, [pc, #256]	@ (800d2c8 <pvPortMalloc+0x10c>)
 800d1c8:	4d40      	ldr	r5, [pc, #256]	@ (800d2cc <pvPortMalloc+0x110>)
 800d1ca:	680b      	ldr	r3, [r1, #0]
 800d1cc:	b9f3      	cbnz	r3, 800d20c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d1ce:	4a40      	ldr	r2, [pc, #256]	@ (800d2d0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d1d0:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1d2:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1d4:	4e3f      	ldr	r6, [pc, #252]	@ (800d2d4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1d6:	bf1b      	ittet	ne
 800d1d8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1da:	4b3f      	ldrne	r3, [pc, #252]	@ (800d2d8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1dc:	4b3f      	ldreq	r3, [pc, #252]	@ (800d2dc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1de:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d1e2:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1e4:	bf18      	it	ne
 800d1e6:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1e8:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d1ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1ee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d1f2:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1f6:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d1f8:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1fa:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1fe:	4b38      	ldr	r3, [pc, #224]	@ (800d2e0 <pvPortMalloc+0x124>)
 800d200:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d202:	4b38      	ldr	r3, [pc, #224]	@ (800d2e4 <pvPortMalloc+0x128>)
 800d204:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d206:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d20a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d20c:	682e      	ldr	r6, [r5, #0]
 800d20e:	4226      	tst	r6, r4
 800d210:	d155      	bne.n	800d2be <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800d212:	2c00      	cmp	r4, #0
 800d214:	d046      	beq.n	800d2a4 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800d216:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d21a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d21c:	bf1c      	itt	ne
 800d21e:	f023 0307 	bicne.w	r3, r3, #7
 800d222:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d224:	2b00      	cmp	r3, #0
 800d226:	d04a      	beq.n	800d2be <pvPortMalloc+0x102>
 800d228:	4f2e      	ldr	r7, [pc, #184]	@ (800d2e4 <pvPortMalloc+0x128>)
 800d22a:	683c      	ldr	r4, [r7, #0]
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d346      	bcc.n	800d2be <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800d230:	4a28      	ldr	r2, [pc, #160]	@ (800d2d4 <pvPortMalloc+0x118>)
 800d232:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d234:	6868      	ldr	r0, [r5, #4]
 800d236:	4298      	cmp	r0, r3
 800d238:	d204      	bcs.n	800d244 <pvPortMalloc+0x88>
 800d23a:	f8d5 c000 	ldr.w	ip, [r5]
 800d23e:	f1bc 0f00 	cmp.w	ip, #0
 800d242:	d115      	bne.n	800d270 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d244:	6809      	ldr	r1, [r1, #0]
 800d246:	42a9      	cmp	r1, r5
 800d248:	d039      	beq.n	800d2be <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d24a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d24c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d250:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d252:	1ac2      	subs	r2, r0, r3
 800d254:	2a10      	cmp	r2, #16
 800d256:	d912      	bls.n	800d27e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d258:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d25a:	0741      	lsls	r1, r0, #29
 800d25c:	d00b      	beq.n	800d276 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	e7fe      	b.n	800d26e <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800d270:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800d272:	4665      	mov	r5, ip
 800d274:	e7de      	b.n	800d234 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d276:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d278:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d27a:	f7ff ff79 	bl	800d170 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d27e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d280:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d282:	4917      	ldr	r1, [pc, #92]	@ (800d2e0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d284:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d286:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d288:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800d28a:	4a17      	ldr	r2, [pc, #92]	@ (800d2e8 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d28c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800d28e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800d290:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d292:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800d294:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d298:	bf38      	it	cc
 800d29a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d29c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2a0:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800d2a2:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800d2a4:	f001 fa2c 	bl	800e700 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2a8:	0763      	lsls	r3, r4, #29
 800d2aa:	d00a      	beq.n	800d2c2 <pvPortMalloc+0x106>
 800d2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	e7fe      	b.n	800d2bc <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800d2be:	2400      	movs	r4, #0
 800d2c0:	e7f0      	b.n	800d2a4 <pvPortMalloc+0xe8>
}
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	2400c68c 	.word	0x2400c68c
 800d2cc:	2400c678 	.word	0x2400c678
 800d2d0:	2400c698 	.word	0x2400c698
 800d2d4:	2400c690 	.word	0x2400c690
 800d2d8:	24024d38 	.word	0x24024d38
 800d2dc:	000186a0 	.word	0x000186a0
 800d2e0:	2400c684 	.word	0x2400c684
 800d2e4:	2400c688 	.word	0x2400c688
 800d2e8:	2400c680 	.word	0x2400c680

0800d2ec <vPortFree>:
{
 800d2ec:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b390      	cbz	r0, 800d358 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2f2:	4a1a      	ldr	r2, [pc, #104]	@ (800d35c <vPortFree+0x70>)
 800d2f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d2f8:	6812      	ldr	r2, [r2, #0]
 800d2fa:	4213      	tst	r3, r2
 800d2fc:	d108      	bne.n	800d310 <vPortFree+0x24>
 800d2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	e7fe      	b.n	800d30e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d310:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d314:	b141      	cbz	r1, 800d328 <vPortFree+0x3c>
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	e7fe      	b.n	800d326 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d328:	ea23 0302 	bic.w	r3, r3, r2
 800d32c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d330:	f001 f942 	bl	800e5b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d334:	4a0a      	ldr	r2, [pc, #40]	@ (800d360 <vPortFree+0x74>)
 800d336:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d33a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d33e:	6811      	ldr	r1, [r2, #0]
 800d340:	440b      	add	r3, r1
 800d342:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d344:	f7ff ff14 	bl	800d170 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d348:	4a06      	ldr	r2, [pc, #24]	@ (800d364 <vPortFree+0x78>)
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	3301      	adds	r3, #1
}
 800d34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800d352:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800d354:	f001 b9d4 	b.w	800e700 <xTaskResumeAll>
}
 800d358:	bd10      	pop	{r4, pc}
 800d35a:	bf00      	nop
 800d35c:	2400c678 	.word	0x2400c678
 800d360:	2400c688 	.word	0x2400c688
 800d364:	2400c67c 	.word	0x2400c67c

0800d368 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d368:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d36c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d370:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d372:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d374:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d37c:	4770      	bx	lr

0800d37e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d382:	4770      	bx	lr

0800d384 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d384:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d386:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d388:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d38a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d38c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d38e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d390:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d392:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d394:	3301      	adds	r3, #1
 800d396:	6003      	str	r3, [r0, #0]
}
 800d398:	4770      	bx	lr

0800d39a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d39a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d39c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d39e:	1c63      	adds	r3, r4, #1
 800d3a0:	d10a      	bne.n	800d3b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d3a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d3aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d3ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d3ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d3b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	6003      	str	r3, [r0, #0]
}
 800d3b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3b8:	f100 0208 	add.w	r2, r0, #8
 800d3bc:	4613      	mov	r3, r2
 800d3be:	6852      	ldr	r2, [r2, #4]
 800d3c0:	6815      	ldr	r5, [r2, #0]
 800d3c2:	42a5      	cmp	r5, r4
 800d3c4:	d9fa      	bls.n	800d3bc <vListInsert+0x22>
 800d3c6:	e7ed      	b.n	800d3a4 <vListInsert+0xa>

0800d3c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d3c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d3ca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d3ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d3d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d3d2:	6859      	ldr	r1, [r3, #4]
 800d3d4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3d6:	bf08      	it	eq
 800d3d8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3da:	2200      	movs	r2, #0
 800d3dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	3a01      	subs	r2, #1
 800d3e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3e4:	6818      	ldr	r0, [r3, #0]
}
 800d3e6:	4770      	bx	lr

0800d3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3e8:	4808      	ldr	r0, [pc, #32]	@ (800d40c <prvPortStartFirstTask+0x24>)
 800d3ea:	6800      	ldr	r0, [r0, #0]
 800d3ec:	6800      	ldr	r0, [r0, #0]
 800d3ee:	f380 8808 	msr	MSP, r0
 800d3f2:	f04f 0000 	mov.w	r0, #0
 800d3f6:	f380 8814 	msr	CONTROL, r0
 800d3fa:	b662      	cpsie	i
 800d3fc:	b661      	cpsie	f
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	df00      	svc	0
 800d408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d40a:	0000      	.short	0x0000
 800d40c:	e000ed08 	.word	0xe000ed08

0800d410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d410:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d420 <vPortEnableVFP+0x10>
 800d414:	6801      	ldr	r1, [r0, #0]
 800d416:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d41a:	6001      	str	r1, [r0, #0]
 800d41c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d41e:	0000      	.short	0x0000
 800d420:	e000ed88 	.word	0xe000ed88

0800d424 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d424:	2300      	movs	r3, #0
{
 800d426:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d428:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d42a:	4b0d      	ldr	r3, [pc, #52]	@ (800d460 <prvTaskExitError+0x3c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3301      	adds	r3, #1
 800d430:	d008      	beq.n	800d444 <prvTaskExitError+0x20>
 800d432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	e7fe      	b.n	800d442 <prvTaskExitError+0x1e>
 800d444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800d454:	9b01      	ldr	r3, [sp, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0fc      	beq.n	800d454 <prvTaskExitError+0x30>
}
 800d45a:	b002      	add	sp, #8
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	24000078 	.word	0x24000078

0800d464 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d468:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d46c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d470:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d472:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d474:	4b03      	ldr	r3, [pc, #12]	@ (800d484 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d476:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d478:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d47a:	f06f 0302 	mvn.w	r3, #2
 800d47e:	6203      	str	r3, [r0, #32]
}
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	0800d425 	.word	0x0800d425
	...

0800d490 <SVC_Handler>:
	__asm volatile (
 800d490:	4b07      	ldr	r3, [pc, #28]	@ (800d4b0 <pxCurrentTCBConst2>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6808      	ldr	r0, [r1, #0]
 800d496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	f380 8809 	msr	PSP, r0
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8811 	msr	BASEPRI, r0
 800d4aa:	4770      	bx	lr
 800d4ac:	f3af 8000 	nop.w

0800d4b0 <pxCurrentTCBConst2>:
 800d4b0:	24025278 	.word	0x24025278

0800d4b4 <vPortEnterCritical>:
 800d4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d4c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d4f0 <vPortEnterCritical+0x3c>)
 800d4c6:	6813      	ldr	r3, [r2, #0]
 800d4c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d4ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d4cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d4ce:	d10e      	bne.n	800d4ee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	b143      	cbz	r3, 800d4ee <vPortEnterCritical+0x3a>
 800d4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e0:	f383 8811 	msr	BASEPRI, r3
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	f3bf 8f4f 	dsb	sy
 800d4ec:	e7fe      	b.n	800d4ec <vPortEnterCritical+0x38>
}
 800d4ee:	4770      	bx	lr
 800d4f0:	24000078 	.word	0x24000078

0800d4f4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d4f4:	4a08      	ldr	r2, [pc, #32]	@ (800d518 <vPortExitCritical+0x24>)
 800d4f6:	6813      	ldr	r3, [r2, #0]
 800d4f8:	b943      	cbnz	r3, 800d50c <vPortExitCritical+0x18>
 800d4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	e7fe      	b.n	800d50a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d50c:	3b01      	subs	r3, #1
 800d50e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d510:	b90b      	cbnz	r3, 800d516 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d512:	f383 8811 	msr	BASEPRI, r3
}
 800d516:	4770      	bx	lr
 800d518:	24000078 	.word	0x24000078
 800d51c:	00000000 	.word	0x00000000

0800d520 <PendSV_Handler>:
	__asm volatile
 800d520:	f3ef 8009 	mrs	r0, PSP
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	4b15      	ldr	r3, [pc, #84]	@ (800d580 <pxCurrentTCBConst>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	f01e 0f10 	tst.w	lr, #16
 800d530:	bf08      	it	eq
 800d532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	6010      	str	r0, [r2, #0]
 800d53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d540:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d544:	f380 8811 	msr	BASEPRI, r0
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f001 f9d8 	bl	800e904 <vTaskSwitchContext>
 800d554:	f04f 0000 	mov.w	r0, #0
 800d558:	f380 8811 	msr	BASEPRI, r0
 800d55c:	bc09      	pop	{r0, r3}
 800d55e:	6819      	ldr	r1, [r3, #0]
 800d560:	6808      	ldr	r0, [r1, #0]
 800d562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d566:	f01e 0f10 	tst.w	lr, #16
 800d56a:	bf08      	it	eq
 800d56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d570:	f380 8809 	msr	PSP, r0
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst>:
 800d580:	24025278 	.word	0x24025278

0800d584 <xPortSysTickHandler>:
{
 800d584:	b508      	push	{r3, lr}
	__asm volatile
 800d586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d596:	f001 f81d 	bl	800e5d4 <xTaskIncrementTick>
 800d59a:	b128      	cbz	r0, 800d5a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d59c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f383 8811 	msr	BASEPRI, r3
}
 800d5ae:	bd08      	pop	{r3, pc}

0800d5b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d5b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5ba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5be:	4b04      	ldr	r3, [pc, #16]	@ (800d5d0 <vPortSetupTimerInterrupt+0x20>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ca:	2307      	movs	r3, #7
 800d5cc:	6113      	str	r3, [r2, #16]
}
 800d5ce:	4770      	bx	lr
 800d5d0:	2400006c 	.word	0x2400006c

0800d5d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5da:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d5de:	4a38      	ldr	r2, [pc, #224]	@ (800d6c0 <xPortStartScheduler+0xec>)
 800d5e0:	4291      	cmp	r1, r2
 800d5e2:	d108      	bne.n	800d5f6 <xPortStartScheduler+0x22>
	__asm volatile
 800d5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d5fa:	4b32      	ldr	r3, [pc, #200]	@ (800d6c4 <xPortStartScheduler+0xf0>)
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d108      	bne.n	800d612 <xPortStartScheduler+0x3e>
 800d600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	e7fe      	b.n	800d610 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d612:	4b2d      	ldr	r3, [pc, #180]	@ (800d6c8 <xPortStartScheduler+0xf4>)
 800d614:	781a      	ldrb	r2, [r3, #0]
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d61a:	22ff      	movs	r2, #255	@ 0xff
 800d61c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d61e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d620:	4a2a      	ldr	r2, [pc, #168]	@ (800d6cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d628:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d62c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d630:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d632:	2307      	movs	r3, #7
 800d634:	4a26      	ldr	r2, [pc, #152]	@ (800d6d0 <xPortStartScheduler+0xfc>)
 800d636:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d638:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d63c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d63e:	0609      	lsls	r1, r1, #24
 800d640:	d40a      	bmi.n	800d658 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d642:	2b03      	cmp	r3, #3
 800d644:	d011      	beq.n	800d66a <xPortStartScheduler+0x96>
 800d646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	e7fe      	b.n	800d656 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d658:	3b01      	subs	r3, #1
 800d65a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d65c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f88d 3003 	strb.w	r3, [sp, #3]
 800d668:	e7e6      	b.n	800d638 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d66a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d66e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d672:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d674:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d676:	9b01      	ldr	r3, [sp, #4]
 800d678:	4a13      	ldr	r2, [pc, #76]	@ (800d6c8 <xPortStartScheduler+0xf4>)
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d67e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d686:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d68a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d692:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d696:	f7ff ff8b 	bl	800d5b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d69a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6d4 <xPortStartScheduler+0x100>)
 800d69c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d69e:	f7ff feb7 	bl	800d410 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6a2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d6a6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d6aa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d6ae:	f7ff fe9b 	bl	800d3e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d6b2:	f001 f927 	bl	800e904 <vTaskSwitchContext>
}
 800d6b6:	4628      	mov	r0, r5
	prvTaskExitError();
 800d6b8:	f7ff feb4 	bl	800d424 <prvTaskExitError>
}
 800d6bc:	b003      	add	sp, #12
 800d6be:	bd30      	pop	{r4, r5, pc}
 800d6c0:	410fc271 	.word	0x410fc271
 800d6c4:	410fc270 	.word	0x410fc270
 800d6c8:	e000e400 	.word	0xe000e400
 800d6cc:	24024d3c 	.word	0x24024d3c
 800d6d0:	24024d38 	.word	0x24024d38
 800d6d4:	24000078 	.word	0x24000078

0800d6d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6dc:	2b0f      	cmp	r3, #15
 800d6de:	d90e      	bls.n	800d6fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6e0:	4a11      	ldr	r2, [pc, #68]	@ (800d728 <vPortValidateInterruptPriority+0x50>)
 800d6e2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6e4:	4a11      	ldr	r2, [pc, #68]	@ (800d72c <vPortValidateInterruptPriority+0x54>)
 800d6e6:	7812      	ldrb	r2, [r2, #0]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d908      	bls.n	800d6fe <vPortValidateInterruptPriority+0x26>
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	e7fe      	b.n	800d6fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d702:	4a0b      	ldr	r2, [pc, #44]	@ (800d730 <vPortValidateInterruptPriority+0x58>)
 800d704:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d708:	6812      	ldr	r2, [r2, #0]
 800d70a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d70e:	4293      	cmp	r3, r2
 800d710:	d908      	bls.n	800d724 <vPortValidateInterruptPriority+0x4c>
 800d712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	e7fe      	b.n	800d722 <vPortValidateInterruptPriority+0x4a>
	}
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	e000e3f0 	.word	0xe000e3f0
 800d72c:	24024d3c 	.word	0x24024d3c
 800d730:	24024d38 	.word	0x24024d38

0800d734 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d734:	b510      	push	{r4, lr}
 800d736:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d738:	f7ff febc 	bl	800d4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d73c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d73e:	f7ff fed9 	bl	800d4f4 <vPortExitCritical>

	return xReturn;
}
 800d742:	fab4 f084 	clz	r0, r4
 800d746:	0940      	lsrs	r0, r0, #5
 800d748:	bd10      	pop	{r4, pc}

0800d74a <prvCopyDataToQueue>:
{
 800d74a:	b570      	push	{r4, r5, r6, lr}
 800d74c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d74e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d750:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d752:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d754:	b942      	cbnz	r2, 800d768 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d756:	6806      	ldr	r6, [r0, #0]
 800d758:	b99e      	cbnz	r6, 800d782 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d75a:	6880      	ldr	r0, [r0, #8]
 800d75c:	f001 fa32 	bl	800ebc4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d760:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d762:	3501      	adds	r5, #1
 800d764:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d766:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d768:	b96e      	cbnz	r6, 800d786 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d76a:	6840      	ldr	r0, [r0, #4]
 800d76c:	f017 fb0d 	bl	8024d8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d774:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d776:	68a2      	ldr	r2, [r4, #8]
 800d778:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d77a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d77c:	bf24      	itt	cs
 800d77e:	6823      	ldrcs	r3, [r4, #0]
 800d780:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d782:	2000      	movs	r0, #0
 800d784:	e7ed      	b.n	800d762 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d786:	68c0      	ldr	r0, [r0, #12]
 800d788:	f017 faff 	bl	8024d8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d78c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d78e:	68e3      	ldr	r3, [r4, #12]
 800d790:	4251      	negs	r1, r2
 800d792:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d794:	6822      	ldr	r2, [r4, #0]
 800d796:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d798:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d79a:	bf3e      	ittt	cc
 800d79c:	68a3      	ldrcc	r3, [r4, #8]
 800d79e:	185b      	addcc	r3, r3, r1
 800d7a0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d7a2:	2e02      	cmp	r6, #2
 800d7a4:	d1ed      	bne.n	800d782 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7a6:	b10d      	cbz	r5, 800d7ac <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d7a8:	3d01      	subs	r5, #1
 800d7aa:	e7ea      	b.n	800d782 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	e7d8      	b.n	800d762 <prvCopyDataToQueue+0x18>

0800d7b0 <prvCopyDataFromQueue>:
{
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d7b6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7b8:	b162      	cbz	r2, 800d7d4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7ba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7bc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7be:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7c0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7c2:	60dc      	str	r4, [r3, #12]
}
 800d7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7c8:	bf24      	itt	cs
 800d7ca:	6819      	ldrcs	r1, [r3, #0]
 800d7cc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7ce:	68d9      	ldr	r1, [r3, #12]
 800d7d0:	f017 badb 	b.w	8024d8a <memcpy>
}
 800d7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <prvUnlockQueue>:
{
 800d7da:	b570      	push	{r4, r5, r6, lr}
 800d7dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d7de:	f7ff fe69 	bl	800d4b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d7e2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7e6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d7ea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7ec:	2d00      	cmp	r5, #0
 800d7ee:	dd01      	ble.n	800d7f4 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d7f2:	b9b3      	cbnz	r3, 800d822 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800d7f4:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d7fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d7fe:	f7ff fe79 	bl	800d4f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d802:	f7ff fe57 	bl	800d4b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d806:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d80a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	dd01      	ble.n	800d814 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d810:	6923      	ldr	r3, [r4, #16]
 800d812:	b97b      	cbnz	r3, 800d834 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d814:	23ff      	movs	r3, #255	@ 0xff
 800d816:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d81e:	f7ff be69 	b.w	800d4f4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d822:	4630      	mov	r0, r6
 800d824:	f001 f8ea 	bl	800e9fc <xTaskRemoveFromEventList>
 800d828:	b108      	cbz	r0, 800d82e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800d82a:	f001 f971 	bl	800eb10 <vTaskMissedYield>
			--cTxLock;
 800d82e:	3d01      	subs	r5, #1
 800d830:	b26d      	sxtb	r5, r5
 800d832:	e7db      	b.n	800d7ec <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d834:	4630      	mov	r0, r6
 800d836:	f001 f8e1 	bl	800e9fc <xTaskRemoveFromEventList>
 800d83a:	b108      	cbz	r0, 800d840 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d83c:	f001 f968 	bl	800eb10 <vTaskMissedYield>
				--cRxLock;
 800d840:	3d01      	subs	r5, #1
 800d842:	b26d      	sxtb	r5, r5
 800d844:	e7e2      	b.n	800d80c <prvUnlockQueue+0x32>

0800d846 <xQueueGenericReset>:
{
 800d846:	b538      	push	{r3, r4, r5, lr}
 800d848:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d84a:	4604      	mov	r4, r0
 800d84c:	b940      	cbnz	r0, 800d860 <xQueueGenericReset+0x1a>
 800d84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	e7fe      	b.n	800d85e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d860:	f7ff fe28 	bl	800d4b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d864:	6822      	ldr	r2, [r4, #0]
 800d866:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d86a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d86c:	434b      	muls	r3, r1
 800d86e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d870:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d872:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d874:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d876:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d878:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d87a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d87c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d87e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d882:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d886:	b9a5      	cbnz	r5, 800d8b2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	b173      	cbz	r3, 800d8aa <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d88c:	f104 0010 	add.w	r0, r4, #16
 800d890:	f001 f8b4 	bl	800e9fc <xTaskRemoveFromEventList>
 800d894:	b148      	cbz	r0, 800d8aa <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d896:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d89a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d89e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d8aa:	f7ff fe23 	bl	800d4f4 <vPortExitCritical>
}
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d8b2:	f104 0010 	add.w	r0, r4, #16
 800d8b6:	f7ff fd57 	bl	800d368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d8ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d8be:	f7ff fd53 	bl	800d368 <vListInitialise>
 800d8c2:	e7f2      	b.n	800d8aa <xQueueGenericReset+0x64>

0800d8c4 <xQueueGenericCreateStatic>:
	{
 800d8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8c6:	460d      	mov	r5, r1
 800d8c8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8ca:	b940      	cbnz	r0, 800d8de <xQueueGenericCreateStatic+0x1a>
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	e7fe      	b.n	800d8dc <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d8de:	b943      	cbnz	r3, 800d8f2 <xQueueGenericCreateStatic+0x2e>
 800d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8f2:	b14a      	cbz	r2, 800d908 <xQueueGenericCreateStatic+0x44>
 800d8f4:	b991      	cbnz	r1, 800d91c <xQueueGenericCreateStatic+0x58>
 800d8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	e7fe      	b.n	800d906 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d908:	b141      	cbz	r1, 800d91c <xQueueGenericCreateStatic+0x58>
 800d90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	e7fe      	b.n	800d91a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d91c:	2350      	movs	r3, #80	@ 0x50
 800d91e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d920:	9b01      	ldr	r3, [sp, #4]
 800d922:	2b50      	cmp	r3, #80	@ 0x50
 800d924:	d008      	beq.n	800d938 <xQueueGenericCreateStatic+0x74>
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	e7fe      	b.n	800d936 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d938:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	bf08      	it	eq
 800d93e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d940:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d942:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d946:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d948:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7ff ff7a 	bl	800d846 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d952:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d956:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d958:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d95c:	b003      	add	sp, #12
 800d95e:	bd30      	pop	{r4, r5, pc}

0800d960 <xQueueGenericCreate>:
	{
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	460d      	mov	r5, r1
 800d964:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d966:	4606      	mov	r6, r0
 800d968:	b940      	cbnz	r0, 800d97c <xQueueGenericCreate+0x1c>
 800d96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	e7fe      	b.n	800d97a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d97c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d97e:	3050      	adds	r0, #80	@ 0x50
 800d980:	f7ff fc1c 	bl	800d1bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d984:	4604      	mov	r4, r0
 800d986:	b170      	cbz	r0, 800d9a6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d988:	2300      	movs	r3, #0
 800d98a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d98e:	b165      	cbz	r5, 800d9aa <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d990:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d994:	2101      	movs	r1, #1
 800d996:	4620      	mov	r0, r4
 800d998:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d99a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d99e:	f7ff ff52 	bl	800d846 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d9a2:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	e7f2      	b.n	800d994 <xQueueGenericCreate+0x34>

0800d9ae <xQueueCreateCountingSemaphoreStatic>:
	{
 800d9ae:	b513      	push	{r0, r1, r4, lr}
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d9b4:	b940      	cbnz	r0, 800d9c8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	e7fe      	b.n	800d9c6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d9c8:	4288      	cmp	r0, r1
 800d9ca:	d208      	bcs.n	800d9de <xQueueCreateCountingSemaphoreStatic+0x30>
 800d9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	e7fe      	b.n	800d9dc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d9de:	2202      	movs	r2, #2
 800d9e0:	9200      	str	r2, [sp, #0]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	f7ff ff6d 	bl	800d8c4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d9ea:	b100      	cbz	r0, 800d9ee <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d9ec:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d9ee:	b002      	add	sp, #8
 800d9f0:	bd10      	pop	{r4, pc}

0800d9f2 <xQueueCreateCountingSemaphore>:
	{
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d9f6:	b940      	cbnz	r0, 800da0a <xQueueCreateCountingSemaphore+0x18>
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	e7fe      	b.n	800da08 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800da0a:	4288      	cmp	r0, r1
 800da0c:	d208      	bcs.n	800da20 <xQueueCreateCountingSemaphore+0x2e>
 800da0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	e7fe      	b.n	800da1e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da20:	2202      	movs	r2, #2
 800da22:	2100      	movs	r1, #0
 800da24:	f7ff ff9c 	bl	800d960 <xQueueGenericCreate>
		if( xHandle != NULL )
 800da28:	b100      	cbz	r0, 800da2c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da2a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800da2c:	bd10      	pop	{r4, pc}

0800da2e <xQueueGenericSend>:
{
 800da2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800da32:	460f      	mov	r7, r1
 800da34:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800da36:	4604      	mov	r4, r0
{
 800da38:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800da3a:	b940      	cbnz	r0, 800da4e <xQueueGenericSend+0x20>
 800da3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	e7fe      	b.n	800da4c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da4e:	b951      	cbnz	r1, 800da66 <xQueueGenericSend+0x38>
 800da50:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800da52:	b143      	cbz	r3, 800da66 <xQueueGenericSend+0x38>
 800da54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	e7fe      	b.n	800da64 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da66:	2e02      	cmp	r6, #2
 800da68:	d10b      	bne.n	800da82 <xQueueGenericSend+0x54>
 800da6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d008      	beq.n	800da82 <xQueueGenericSend+0x54>
 800da70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	e7fe      	b.n	800da80 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da82:	f001 f851 	bl	800eb28 <xTaskGetSchedulerState>
 800da86:	4605      	mov	r5, r0
 800da88:	b320      	cbz	r0, 800dad4 <xQueueGenericSend+0xa6>
 800da8a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800da8c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800da90:	f7ff fd10 	bl	800d4b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800da96:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da98:	429a      	cmp	r2, r3
 800da9a:	d227      	bcs.n	800daec <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da9c:	4632      	mov	r2, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff fe52 	bl	800d74a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800daa8:	b11b      	cbz	r3, 800dab2 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daaa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800daae:	f000 ffa5 	bl	800e9fc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800dab2:	b148      	cbz	r0, 800dac8 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800dab4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dabc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dac8:	f7ff fd14 	bl	800d4f4 <vPortExitCritical>
				return pdPASS;
 800dacc:	2001      	movs	r0, #1
}
 800dace:	b004      	add	sp, #16
 800dad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dad4:	9b01      	ldr	r3, [sp, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0d8      	beq.n	800da8c <xQueueGenericSend+0x5e>
 800dada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	e7fe      	b.n	800daea <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daec:	2e02      	cmp	r6, #2
 800daee:	d0d5      	beq.n	800da9c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	b91b      	cbnz	r3, 800dafc <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800daf4:	f7ff fcfe 	bl	800d4f4 <vPortExitCritical>
					return errQUEUE_FULL;
 800daf8:	2000      	movs	r0, #0
 800dafa:	e7e8      	b.n	800dace <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800dafc:	b915      	cbnz	r5, 800db04 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dafe:	a802      	add	r0, sp, #8
 800db00:	f000 ffbe 	bl	800ea80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800db04:	f7ff fcf6 	bl	800d4f4 <vPortExitCritical>
		vTaskSuspendAll();
 800db08:	f000 fd56 	bl	800e5b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db0c:	f7ff fcd2 	bl	800d4b4 <vPortEnterCritical>
 800db10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800db14:	2bff      	cmp	r3, #255	@ 0xff
 800db16:	d101      	bne.n	800db1c <xQueueGenericSend+0xee>
 800db18:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800db1c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800db20:	2bff      	cmp	r3, #255	@ 0xff
 800db22:	d101      	bne.n	800db28 <xQueueGenericSend+0xfa>
 800db24:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800db28:	f7ff fce4 	bl	800d4f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db2c:	a901      	add	r1, sp, #4
 800db2e:	a802      	add	r0, sp, #8
 800db30:	f000 ffb2 	bl	800ea98 <xTaskCheckForTimeOut>
 800db34:	bb38      	cbnz	r0, 800db86 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db36:	f7ff fcbd 	bl	800d4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db3a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800db3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db3e:	429a      	cmp	r2, r3
 800db40:	d10e      	bne.n	800db60 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800db42:	f7ff fcd7 	bl	800d4f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db46:	9901      	ldr	r1, [sp, #4]
 800db48:	f104 0010 	add.w	r0, r4, #16
 800db4c:	f000 ff1e 	bl	800e98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db50:	4620      	mov	r0, r4
 800db52:	f7ff fe42 	bl	800d7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db56:	f000 fdd3 	bl	800e700 <xTaskResumeAll>
 800db5a:	b148      	cbz	r0, 800db70 <xQueueGenericSend+0x142>
 800db5c:	2501      	movs	r5, #1
 800db5e:	e797      	b.n	800da90 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800db60:	f7ff fcc8 	bl	800d4f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800db64:	4620      	mov	r0, r4
 800db66:	f7ff fe38 	bl	800d7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db6a:	f000 fdc9 	bl	800e700 <xTaskResumeAll>
 800db6e:	e7f5      	b.n	800db5c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800db70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	e7ea      	b.n	800db5c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800db86:	4620      	mov	r0, r4
 800db88:	f7ff fe27 	bl	800d7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db8c:	f000 fdb8 	bl	800e700 <xTaskResumeAll>
			return errQUEUE_FULL;
 800db90:	e7b2      	b.n	800daf8 <xQueueGenericSend+0xca>

0800db92 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db92:	2200      	movs	r2, #0
	{
 800db94:	460b      	mov	r3, r1
 800db96:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db98:	4611      	mov	r1, r2
 800db9a:	9000      	str	r0, [sp, #0]
 800db9c:	2001      	movs	r0, #1
 800db9e:	f7ff fe91 	bl	800d8c4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800dba2:	4604      	mov	r4, r0
 800dba4:	b138      	cbz	r0, 800dbb6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dba6:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbac:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dbae:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dbb0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dbb2:	f7ff ff3c 	bl	800da2e <xQueueGenericSend>
	}
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	b002      	add	sp, #8
 800dbba:	bd10      	pop	{r4, pc}

0800dbbc <xQueueGiveMutexRecursive>:
	{
 800dbbc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	b940      	cbnz	r0, 800dbd4 <xQueueGiveMutexRecursive+0x18>
 800dbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	e7fe      	b.n	800dbd2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dbd4:	6885      	ldr	r5, [r0, #8]
 800dbd6:	f000 ffa1 	bl	800eb1c <xTaskGetCurrentTaskHandle>
 800dbda:	4285      	cmp	r5, r0
 800dbdc:	d10b      	bne.n	800dbf6 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dbde:	68e3      	ldr	r3, [r4, #12]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dbe4:	b10b      	cbz	r3, 800dbea <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800dbe6:	2001      	movs	r0, #1
	}
 800dbe8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dbea:	461a      	mov	r2, r3
 800dbec:	4619      	mov	r1, r3
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7ff ff1d 	bl	800da2e <xQueueGenericSend>
 800dbf4:	e7f7      	b.n	800dbe6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800dbf6:	2000      	movs	r0, #0
		return xReturn;
 800dbf8:	e7f6      	b.n	800dbe8 <xQueueGiveMutexRecursive+0x2c>

0800dbfa <xQueueCreateMutex>:
	{
 800dbfa:	b570      	push	{r4, r5, r6, lr}
 800dbfc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbfe:	2050      	movs	r0, #80	@ 0x50
 800dc00:	f7ff fadc 	bl	800d1bc <pvPortMalloc>
 800dc04:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800dc06:	b198      	cbz	r0, 800dc30 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc08:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800dc0a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc0c:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc0e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dc12:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc16:	f7ff fe16 	bl	800d846 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc1a:	462b      	mov	r3, r5
 800dc1c:	462a      	mov	r2, r5
 800dc1e:	4629      	mov	r1, r5
 800dc20:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dc22:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc26:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc28:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc2a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc2c:	f7ff feff 	bl	800da2e <xQueueGenericSend>
	}
 800dc30:	4620      	mov	r0, r4
 800dc32:	bd70      	pop	{r4, r5, r6, pc}

0800dc34 <xQueueGenericSendFromISR>:
{
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	4689      	mov	r9, r1
 800dc3a:	4617      	mov	r7, r2
 800dc3c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800dc3e:	4604      	mov	r4, r0
 800dc40:	b940      	cbnz	r0, 800dc54 <xQueueGenericSendFromISR+0x20>
 800dc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	e7fe      	b.n	800dc52 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc54:	b951      	cbnz	r1, 800dc6c <xQueueGenericSendFromISR+0x38>
 800dc56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dc58:	b143      	cbz	r3, 800dc6c <xQueueGenericSendFromISR+0x38>
 800dc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	e7fe      	b.n	800dc6a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc6c:	2e02      	cmp	r6, #2
 800dc6e:	d10b      	bne.n	800dc88 <xQueueGenericSendFromISR+0x54>
 800dc70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d008      	beq.n	800dc88 <xQueueGenericSendFromISR+0x54>
 800dc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	e7fe      	b.n	800dc86 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc88:	f7ff fd26 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800dc8c:	f3ef 8811 	mrs	r8, BASEPRI
 800dc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dca0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dca2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d301      	bcc.n	800dcac <xQueueGenericSendFromISR+0x78>
 800dca8:	2e02      	cmp	r6, #2
 800dcaa:	d11e      	bne.n	800dcea <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcac:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcb6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcb8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcba:	f7ff fd46 	bl	800d74a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800dcbe:	1c6b      	adds	r3, r5, #1
 800dcc0:	d10e      	bne.n	800dce0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dcc4:	b13b      	cbz	r3, 800dcd6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcc6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dcca:	f000 fe97 	bl	800e9fc <xTaskRemoveFromEventList>
 800dcce:	b110      	cbz	r0, 800dcd6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800dcd0:	b10f      	cbz	r7, 800dcd6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800dcd6:	2001      	movs	r0, #1
	__asm volatile
 800dcd8:	f388 8811 	msr	BASEPRI, r8
}
 800dcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dce0:	3501      	adds	r5, #1
 800dce2:	b26d      	sxtb	r5, r5
 800dce4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800dce8:	e7f5      	b.n	800dcd6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7f4      	b.n	800dcd8 <xQueueGenericSendFromISR+0xa4>

0800dcee <xQueueGiveFromISR>:
{
 800dcee:	b570      	push	{r4, r5, r6, lr}
 800dcf0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	b940      	cbnz	r0, 800dd08 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	e7fe      	b.n	800dd06 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd08:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dd0a:	b143      	cbz	r3, 800dd1e <xQueueGiveFromISR+0x30>
 800dd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	e7fe      	b.n	800dd1c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dd1e:	6803      	ldr	r3, [r0, #0]
 800dd20:	b953      	cbnz	r3, 800dd38 <xQueueGiveFromISR+0x4a>
 800dd22:	6883      	ldr	r3, [r0, #8]
 800dd24:	b143      	cbz	r3, 800dd38 <xQueueGiveFromISR+0x4a>
 800dd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	e7fe      	b.n	800dd36 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd38:	f7ff fcce 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800dd3c:	f3ef 8611 	mrs	r6, BASEPRI
 800dd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dd52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d919      	bls.n	800dd8c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd5c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800dd5e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd60:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd62:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800dd64:	d10d      	bne.n	800dd82 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dd68:	b13b      	cbz	r3, 800dd7a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd6a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dd6e:	f000 fe45 	bl	800e9fc <xTaskRemoveFromEventList>
 800dd72:	b110      	cbz	r0, 800dd7a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd74:	b10d      	cbz	r5, 800dd7a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd76:	2301      	movs	r3, #1
 800dd78:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800dd7a:	2001      	movs	r0, #1
	__asm volatile
 800dd7c:	f386 8811 	msr	BASEPRI, r6
}
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd82:	3301      	adds	r3, #1
 800dd84:	b25b      	sxtb	r3, r3
 800dd86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dd8a:	e7f6      	b.n	800dd7a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e7f5      	b.n	800dd7c <xQueueGiveFromISR+0x8e>

0800dd90 <xQueueReceive>:
{
 800dd90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dd94:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800dd96:	4604      	mov	r4, r0
{
 800dd98:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dd9a:	b940      	cbnz	r0, 800ddae <xQueueReceive+0x1e>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	e7fe      	b.n	800ddac <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddae:	b951      	cbnz	r1, 800ddc6 <xQueueReceive+0x36>
 800ddb0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ddb2:	b143      	cbz	r3, 800ddc6 <xQueueReceive+0x36>
 800ddb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	e7fe      	b.n	800ddc4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddc6:	f000 feaf 	bl	800eb28 <xTaskGetSchedulerState>
 800ddca:	4605      	mov	r5, r0
 800ddcc:	b318      	cbz	r0, 800de16 <xQueueReceive+0x86>
 800ddce:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ddd0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800ddd4:	f7ff fb6e 	bl	800d4b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddd8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddda:	b347      	cbz	r7, 800de2e <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dddc:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ddde:	4631      	mov	r1, r6
 800dde0:	4620      	mov	r0, r4
 800dde2:	f7ff fce5 	bl	800d7b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dde6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	b173      	cbz	r3, 800de0a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddec:	f104 0010 	add.w	r0, r4, #16
 800ddf0:	f000 fe04 	bl	800e9fc <xTaskRemoveFromEventList>
 800ddf4:	b148      	cbz	r0, 800de0a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800ddf6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ddfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddfe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800de0a:	f7ff fb73 	bl	800d4f4 <vPortExitCritical>
				return pdPASS;
 800de0e:	2001      	movs	r0, #1
}
 800de10:	b004      	add	sp, #16
 800de12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de16:	9b01      	ldr	r3, [sp, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d0d9      	beq.n	800ddd0 <xQueueReceive+0x40>
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	e7fe      	b.n	800de2c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	b91b      	cbnz	r3, 800de3a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800de32:	f7ff fb5f 	bl	800d4f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800de36:	2000      	movs	r0, #0
 800de38:	e7ea      	b.n	800de10 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800de3a:	b915      	cbnz	r5, 800de42 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de3c:	a802      	add	r0, sp, #8
 800de3e:	f000 fe1f 	bl	800ea80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800de42:	f7ff fb57 	bl	800d4f4 <vPortExitCritical>
		vTaskSuspendAll();
 800de46:	f000 fbb7 	bl	800e5b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de4a:	f7ff fb33 	bl	800d4b4 <vPortEnterCritical>
 800de4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800de52:	2bff      	cmp	r3, #255	@ 0xff
 800de54:	d101      	bne.n	800de5a <xQueueReceive+0xca>
 800de56:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800de5a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800de5e:	2bff      	cmp	r3, #255	@ 0xff
 800de60:	d101      	bne.n	800de66 <xQueueReceive+0xd6>
 800de62:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800de66:	f7ff fb45 	bl	800d4f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de6a:	a901      	add	r1, sp, #4
 800de6c:	a802      	add	r0, sp, #8
 800de6e:	f000 fe13 	bl	800ea98 <xTaskCheckForTimeOut>
 800de72:	bb00      	cbnz	r0, 800deb6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff fc5d 	bl	800d734 <prvIsQueueEmpty>
 800de7a:	b1b0      	cbz	r0, 800deaa <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de7c:	9901      	ldr	r1, [sp, #4]
 800de7e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800de82:	f000 fd83 	bl	800e98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de86:	4620      	mov	r0, r4
 800de88:	f7ff fca7 	bl	800d7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de8c:	f000 fc38 	bl	800e700 <xTaskResumeAll>
 800de90:	b948      	cbnz	r0, 800dea6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800de92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800de96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	2501      	movs	r5, #1
 800dea8:	e794      	b.n	800ddd4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800deaa:	4620      	mov	r0, r4
 800deac:	f7ff fc95 	bl	800d7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deb0:	f000 fc26 	bl	800e700 <xTaskResumeAll>
 800deb4:	e7f7      	b.n	800dea6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7ff fc8f 	bl	800d7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800debc:	f000 fc20 	bl	800e700 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dec0:	4620      	mov	r0, r4
 800dec2:	f7ff fc37 	bl	800d734 <prvIsQueueEmpty>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d0ed      	beq.n	800dea6 <xQueueReceive+0x116>
 800deca:	e7b4      	b.n	800de36 <xQueueReceive+0xa6>

0800decc <xQueueSemaphoreTake>:
{
 800decc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dece:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800ded0:	4604      	mov	r4, r0
{
 800ded2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ded4:	b940      	cbnz	r0, 800dee8 <xQueueSemaphoreTake+0x1c>
 800ded6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	e7fe      	b.n	800dee6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dee8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800deea:	b145      	cbz	r5, 800defe <xQueueSemaphoreTake+0x32>
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	e7fe      	b.n	800defc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800defe:	f000 fe13 	bl	800eb28 <xTaskGetSchedulerState>
 800df02:	4606      	mov	r6, r0
 800df04:	b320      	cbz	r0, 800df50 <xQueueSemaphoreTake+0x84>
 800df06:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800df08:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800df0a:	f7ff fad3 	bl	800d4b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df10:	b353      	cbz	r3, 800df68 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df12:	3b01      	subs	r3, #1
 800df14:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	b913      	cbnz	r3, 800df20 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800df1a:	f000 fee3 	bl	800ece4 <pvTaskIncrementMutexHeldCount>
 800df1e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df20:	6923      	ldr	r3, [r4, #16]
 800df22:	b173      	cbz	r3, 800df42 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df24:	f104 0010 	add.w	r0, r4, #16
 800df28:	f000 fd68 	bl	800e9fc <xTaskRemoveFromEventList>
 800df2c:	b148      	cbz	r0, 800df42 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800df2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800df42:	f7ff fad7 	bl	800d4f4 <vPortExitCritical>
				return pdPASS;
 800df46:	2001      	movs	r0, #1
}
 800df48:	b005      	add	sp, #20
 800df4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df4c:	4635      	mov	r5, r6
 800df4e:	e7db      	b.n	800df08 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df50:	9b01      	ldr	r3, [sp, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0fa      	beq.n	800df4c <xQueueSemaphoreTake+0x80>
 800df56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	e7fe      	b.n	800df66 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df68:	9b01      	ldr	r3, [sp, #4]
 800df6a:	b953      	cbnz	r3, 800df82 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df6c:	2d00      	cmp	r5, #0
 800df6e:	d066      	beq.n	800e03e <xQueueSemaphoreTake+0x172>
 800df70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	e7fe      	b.n	800df80 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800df82:	b916      	cbnz	r6, 800df8a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df84:	a802      	add	r0, sp, #8
 800df86:	f000 fd7b 	bl	800ea80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800df8a:	f7ff fab3 	bl	800d4f4 <vPortExitCritical>
		vTaskSuspendAll();
 800df8e:	f000 fb13 	bl	800e5b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df92:	f7ff fa8f 	bl	800d4b4 <vPortEnterCritical>
 800df96:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df9a:	2bff      	cmp	r3, #255	@ 0xff
 800df9c:	d101      	bne.n	800dfa2 <xQueueSemaphoreTake+0xd6>
 800df9e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800dfa2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dfa6:	2bff      	cmp	r3, #255	@ 0xff
 800dfa8:	d101      	bne.n	800dfae <xQueueSemaphoreTake+0xe2>
 800dfaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfae:	f7ff faa1 	bl	800d4f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfb2:	a901      	add	r1, sp, #4
 800dfb4:	a802      	add	r0, sp, #8
 800dfb6:	f000 fd6f 	bl	800ea98 <xTaskCheckForTimeOut>
 800dfba:	bb50      	cbnz	r0, 800e012 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7ff fbb9 	bl	800d734 <prvIsQueueEmpty>
 800dfc2:	b300      	cbz	r0, 800e006 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	b93b      	cbnz	r3, 800dfd8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800dfc8:	f7ff fa74 	bl	800d4b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfcc:	68a0      	ldr	r0, [r4, #8]
 800dfce:	f000 fdbb 	bl	800eb48 <xTaskPriorityInherit>
 800dfd2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800dfd4:	f7ff fa8e 	bl	800d4f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfd8:	9901      	ldr	r1, [sp, #4]
 800dfda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dfde:	f000 fcd5 	bl	800e98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f7ff fbf9 	bl	800d7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfe8:	f000 fb8a 	bl	800e700 <xTaskResumeAll>
 800dfec:	b948      	cbnz	r0, 800e002 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800dfee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dff6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	2601      	movs	r6, #1
 800e004:	e781      	b.n	800df0a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800e006:	4620      	mov	r0, r4
 800e008:	f7ff fbe7 	bl	800d7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e00c:	f000 fb78 	bl	800e700 <xTaskResumeAll>
 800e010:	e7f7      	b.n	800e002 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff fbe1 	bl	800d7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e018:	f000 fb72 	bl	800e700 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff fb89 	bl	800d734 <prvIsQueueEmpty>
 800e022:	2800      	cmp	r0, #0
 800e024:	d0ed      	beq.n	800e002 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800e026:	b165      	cbz	r5, 800e042 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800e028:	f7ff fa44 	bl	800d4b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e02c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e02e:	b119      	cbz	r1, 800e038 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e030:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e038:	68a0      	ldr	r0, [r4, #8]
 800e03a:	f000 fe05 	bl	800ec48 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e03e:	f7ff fa59 	bl	800d4f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e042:	2000      	movs	r0, #0
 800e044:	e780      	b.n	800df48 <xQueueSemaphoreTake+0x7c>

0800e046 <xQueueTakeMutexRecursive>:
	{
 800e046:	b570      	push	{r4, r5, r6, lr}
 800e048:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800e04a:	4604      	mov	r4, r0
 800e04c:	b940      	cbnz	r0, 800e060 <xQueueTakeMutexRecursive+0x1a>
 800e04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	e7fe      	b.n	800e05e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e060:	6886      	ldr	r6, [r0, #8]
 800e062:	f000 fd5b 	bl	800eb1c <xTaskGetCurrentTaskHandle>
 800e066:	4286      	cmp	r6, r0
 800e068:	d104      	bne.n	800e074 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e06a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e06c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e06e:	3301      	adds	r3, #1
 800e070:	60e3      	str	r3, [r4, #12]
	}
 800e072:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e074:	4629      	mov	r1, r5
 800e076:	4620      	mov	r0, r4
 800e078:	f7ff ff28 	bl	800decc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d0f8      	beq.n	800e072 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e080:	68e3      	ldr	r3, [r4, #12]
 800e082:	3301      	adds	r3, #1
 800e084:	60e3      	str	r3, [r4, #12]
 800e086:	e7f4      	b.n	800e072 <xQueueTakeMutexRecursive+0x2c>

0800e088 <xQueueReceiveFromISR>:
{
 800e088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e08c:	4689      	mov	r9, r1
 800e08e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e090:	4604      	mov	r4, r0
 800e092:	b940      	cbnz	r0, 800e0a6 <xQueueReceiveFromISR+0x1e>
 800e094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	e7fe      	b.n	800e0a4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0a6:	b951      	cbnz	r1, 800e0be <xQueueReceiveFromISR+0x36>
 800e0a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e0aa:	b143      	cbz	r3, 800e0be <xQueueReceiveFromISR+0x36>
 800e0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	e7fe      	b.n	800e0bc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0be:	f7ff fb0b 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800e0c2:	f3ef 8711 	mrs	r7, BASEPRI
 800e0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0d6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0d8:	b30d      	cbz	r5, 800e11e <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e0da:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0de:	4649      	mov	r1, r9
 800e0e0:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0e2:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e0e4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0e6:	f7ff fb63 	bl	800d7b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0ea:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e0ec:	1c73      	adds	r3, r6, #1
 800e0ee:	d111      	bne.n	800e114 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	b153      	cbz	r3, 800e10a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0f4:	f104 0010 	add.w	r0, r4, #16
 800e0f8:	f000 fc80 	bl	800e9fc <xTaskRemoveFromEventList>
 800e0fc:	b128      	cbz	r0, 800e10a <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800e0fe:	f1b8 0f00 	cmp.w	r8, #0
 800e102:	d002      	beq.n	800e10a <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e104:	2301      	movs	r3, #1
 800e106:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e10a:	2001      	movs	r0, #1
	__asm volatile
 800e10c:	f387 8811 	msr	BASEPRI, r7
}
 800e110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e114:	3601      	adds	r6, #1
 800e116:	b276      	sxtb	r6, r6
 800e118:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e11c:	e7f5      	b.n	800e10a <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800e11e:	4628      	mov	r0, r5
 800e120:	e7f4      	b.n	800e10c <xQueueReceiveFromISR+0x84>

0800e122 <uxQueueMessagesWaiting>:
{
 800e122:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 800e124:	4604      	mov	r4, r0
 800e126:	b940      	cbnz	r0, 800e13a <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	e7fe      	b.n	800e138 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800e13a:	f7ff f9bb 	bl	800d4b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e13e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800e140:	f7ff f9d8 	bl	800d4f4 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e144:	4620      	mov	r0, r4
 800e146:	bd10      	pop	{r4, pc}

0800e148 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 800e148:	b940      	cbnz	r0, 800e15c <uxQueueMessagesWaitingFromISR+0x14>
 800e14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	e7fe      	b.n	800e15a <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e15c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e15e:	4770      	bx	lr

0800e160 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e160:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e162:	4a07      	ldr	r2, [pc, #28]	@ (800e180 <vQueueAddToRegistry+0x20>)
	{
 800e164:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e166:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e16a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e16e:	b91d      	cbnz	r5, 800e178 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e170:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e174:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e176:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e178:	3301      	adds	r3, #1
 800e17a:	2b08      	cmp	r3, #8
 800e17c:	d1f3      	bne.n	800e166 <vQueueAddToRegistry+0x6>
 800e17e:	e7fa      	b.n	800e176 <vQueueAddToRegistry+0x16>
 800e180:	24024d40 	.word	0x24024d40

0800e184 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e184:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e186:	4a09      	ldr	r2, [pc, #36]	@ (800e1ac <vQueueUnregisterQueue+0x28>)
	{
 800e188:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e18a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e18e:	00dc      	lsls	r4, r3, #3
 800e190:	4281      	cmp	r1, r0
 800e192:	d106      	bne.n	800e1a2 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e194:	4a06      	ldr	r2, [pc, #24]	@ (800e1b0 <vQueueUnregisterQueue+0x2c>)
 800e196:	2100      	movs	r1, #0
 800e198:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e19c:	4422      	add	r2, r4
 800e19e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e1a0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	2b08      	cmp	r3, #8
 800e1a6:	d1f0      	bne.n	800e18a <vQueueUnregisterQueue+0x6>
 800e1a8:	e7fa      	b.n	800e1a0 <vQueueUnregisterQueue+0x1c>
 800e1aa:	bf00      	nop
 800e1ac:	24024d44 	.word	0x24024d44
 800e1b0:	24024d40 	.word	0x24024d40

0800e1b4 <vQueueDelete>:
{
 800e1b4:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e1b6:	b940      	cbnz	r0, 800e1ca <vQueueDelete+0x16>
 800e1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	e7fe      	b.n	800e1c8 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800e1ca:	f7ff ffdb 	bl	800e184 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e1ce:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e1d2:	b91b      	cbnz	r3, 800e1dc <vQueueDelete+0x28>
}
 800e1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e1d8:	f7ff b888 	b.w	800d2ec <vPortFree>
}
 800e1dc:	bd10      	pop	{r4, pc}

0800e1de <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e1de:	b570      	push	{r4, r5, r6, lr}
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e1e6:	f7ff f965 	bl	800d4b4 <vPortEnterCritical>
 800e1ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e1ee:	2bff      	cmp	r3, #255	@ 0xff
 800e1f0:	d102      	bne.n	800e1f8 <vQueueWaitForMessageRestricted+0x1a>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e1f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e1fc:	2bff      	cmp	r3, #255	@ 0xff
 800e1fe:	d102      	bne.n	800e206 <vQueueWaitForMessageRestricted+0x28>
 800e200:	2300      	movs	r3, #0
 800e202:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e206:	f7ff f975 	bl	800d4f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e20a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e20c:	b92b      	cbnz	r3, 800e21a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e20e:	4632      	mov	r2, r6
 800e210:	4629      	mov	r1, r5
 800e212:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e216:	f000 fbd3 	bl	800e9c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e21a:	4620      	mov	r0, r4
	}
 800e21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e220:	f7ff badb 	b.w	800d7da <prvUnlockQueue>

0800e224 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e22a:	f7ff f943 	bl	800d4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e22e:	4b2f      	ldr	r3, [pc, #188]	@ (800e2ec <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e230:	4e2f      	ldr	r6, [pc, #188]	@ (800e2f0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	4f2f      	ldr	r7, [pc, #188]	@ (800e2f4 <prvAddNewTaskToReadyList+0xd0>)
 800e236:	3201      	adds	r2, #1
 800e238:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e23a:	6835      	ldr	r5, [r6, #0]
 800e23c:	2d00      	cmp	r5, #0
 800e23e:	d14a      	bne.n	800e2d6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e240:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d11f      	bne.n	800e288 <prvAddNewTaskToReadyList+0x64>
 800e248:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e24c:	4640      	mov	r0, r8
 800e24e:	f7ff f88b 	bl	800d368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e252:	f108 0814 	add.w	r8, r8, #20
 800e256:	2d38      	cmp	r5, #56	@ 0x38
 800e258:	d1f7      	bne.n	800e24a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e25a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e31c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e25e:	4d26      	ldr	r5, [pc, #152]	@ (800e2f8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e260:	4640      	mov	r0, r8
 800e262:	f7ff f881 	bl	800d368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e266:	4628      	mov	r0, r5
 800e268:	f7ff f87e 	bl	800d368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e26c:	4823      	ldr	r0, [pc, #140]	@ (800e2fc <prvAddNewTaskToReadyList+0xd8>)
 800e26e:	f7ff f87b 	bl	800d368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e272:	4823      	ldr	r0, [pc, #140]	@ (800e300 <prvAddNewTaskToReadyList+0xdc>)
 800e274:	f7ff f878 	bl	800d368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e278:	4822      	ldr	r0, [pc, #136]	@ (800e304 <prvAddNewTaskToReadyList+0xe0>)
 800e27a:	f7ff f875 	bl	800d368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e27e:	4b22      	ldr	r3, [pc, #136]	@ (800e308 <prvAddNewTaskToReadyList+0xe4>)
 800e280:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e284:	4b21      	ldr	r3, [pc, #132]	@ (800e30c <prvAddNewTaskToReadyList+0xe8>)
 800e286:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e288:	4a21      	ldr	r2, [pc, #132]	@ (800e310 <prvAddNewTaskToReadyList+0xec>)
 800e28a:	6813      	ldr	r3, [r2, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e290:	4a20      	ldr	r2, [pc, #128]	@ (800e314 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e292:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e294:	6811      	ldr	r1, [r2, #0]
 800e296:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e298:	428b      	cmp	r3, r1
 800e29a:	d900      	bls.n	800e29e <prvAddNewTaskToReadyList+0x7a>
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	2014      	movs	r0, #20
 800e2a0:	1d21      	adds	r1, r4, #4
 800e2a2:	fb00 7003 	mla	r0, r0, r3, r7
 800e2a6:	f7ff f86d 	bl	800d384 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e2aa:	f7ff f923 	bl	800d4f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e318 <prvAddNewTaskToReadyList+0xf4>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	b173      	cbz	r3, 800e2d2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2b4:	6833      	ldr	r3, [r6, #0]
 800e2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d209      	bcs.n	800e2d2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e2be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e2c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	f3bf 8f6f 	isb	sy
}
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e2d6:	4b10      	ldr	r3, [pc, #64]	@ (800e318 <prvAddNewTaskToReadyList+0xf4>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	d1d3      	bne.n	800e288 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2e0:	6832      	ldr	r2, [r6, #0]
 800e2e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d8cf      	bhi.n	800e288 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e2e8:	6034      	str	r4, [r6, #0]
 800e2ea:	e7cd      	b.n	800e288 <prvAddNewTaskToReadyList+0x64>
 800e2ec:	24024da4 	.word	0x24024da4
 800e2f0:	24025278 	.word	0x24025278
 800e2f4:	24024e18 	.word	0x24024e18
 800e2f8:	24024df0 	.word	0x24024df0
 800e2fc:	24024dd4 	.word	0x24024dd4
 800e300:	24024dc0 	.word	0x24024dc0
 800e304:	24024da8 	.word	0x24024da8
 800e308:	24024dec 	.word	0x24024dec
 800e30c:	24024de8 	.word	0x24024de8
 800e310:	24024d88 	.word	0x24024d88
 800e314:	24024d9c 	.word	0x24024d9c
 800e318:	24024d98 	.word	0x24024d98
 800e31c:	24024e04 	.word	0x24024e04

0800e320 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e322:	4b15      	ldr	r3, [pc, #84]	@ (800e378 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e324:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e326:	4d15      	ldr	r5, [pc, #84]	@ (800e37c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e328:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e32a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e32c:	6828      	ldr	r0, [r5, #0]
 800e32e:	3004      	adds	r0, #4
 800e330:	f7ff f84a 	bl	800d3c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e334:	1c73      	adds	r3, r6, #1
 800e336:	d107      	bne.n	800e348 <prvAddCurrentTaskToDelayedList+0x28>
 800e338:	b137      	cbz	r7, 800e348 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e33a:	6829      	ldr	r1, [r5, #0]
 800e33c:	4810      	ldr	r0, [pc, #64]	@ (800e380 <prvAddCurrentTaskToDelayedList+0x60>)
 800e33e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e344:	f7ff b81e 	b.w	800d384 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e348:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e34e:	d307      	bcc.n	800e360 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e350:	4b0c      	ldr	r3, [pc, #48]	@ (800e384 <prvAddCurrentTaskToDelayedList+0x64>)
 800e352:	6818      	ldr	r0, [r3, #0]
 800e354:	6829      	ldr	r1, [r5, #0]
}
 800e356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e35a:	3104      	adds	r1, #4
 800e35c:	f7ff b81d 	b.w	800d39a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e360:	4b09      	ldr	r3, [pc, #36]	@ (800e388 <prvAddCurrentTaskToDelayedList+0x68>)
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	6829      	ldr	r1, [r5, #0]
 800e366:	3104      	adds	r1, #4
 800e368:	f7ff f817 	bl	800d39a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e36c:	4b07      	ldr	r3, [pc, #28]	@ (800e38c <prvAddCurrentTaskToDelayedList+0x6c>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	42a2      	cmp	r2, r4
 800e372:	d900      	bls.n	800e376 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e374:	601c      	str	r4, [r3, #0]
}
 800e376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e378:	24024da0 	.word	0x24024da0
 800e37c:	24025278 	.word	0x24025278
 800e380:	24024da8 	.word	0x24024da8
 800e384:	24024de8 	.word	0x24024de8
 800e388:	24024dec 	.word	0x24024dec
 800e38c:	24024d84 	.word	0x24024d84

0800e390 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e390:	4a06      	ldr	r2, [pc, #24]	@ (800e3ac <prvResetNextTaskUnblockTime+0x1c>)
 800e392:	6813      	ldr	r3, [r2, #0]
 800e394:	6819      	ldr	r1, [r3, #0]
 800e396:	4b06      	ldr	r3, [pc, #24]	@ (800e3b0 <prvResetNextTaskUnblockTime+0x20>)
 800e398:	b919      	cbnz	r1, 800e3a2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e39a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e39e:	601a      	str	r2, [r3, #0]
}
 800e3a0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a2:	6812      	ldr	r2, [r2, #0]
 800e3a4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3a6:	68d2      	ldr	r2, [r2, #12]
 800e3a8:	6852      	ldr	r2, [r2, #4]
 800e3aa:	e7f8      	b.n	800e39e <prvResetNextTaskUnblockTime+0xe>
 800e3ac:	24024dec 	.word	0x24024dec
 800e3b0:	24024d84 	.word	0x24024d84

0800e3b4 <prvDeleteTCB>:
	{
 800e3b4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3b6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800e3ba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3bc:	b93b      	cbnz	r3, 800e3ce <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800e3be:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e3c0:	f7fe ff94 	bl	800d2ec <vPortFree>
				vPortFree( pxTCB );
 800e3c4:	4620      	mov	r0, r4
	}
 800e3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e3ca:	f7fe bf8f 	b.w	800d2ec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d0f9      	beq.n	800e3c6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d008      	beq.n	800e3e8 <prvDeleteTCB+0x34>
 800e3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	e7fe      	b.n	800e3e6 <prvDeleteTCB+0x32>
	}
 800e3e8:	bd10      	pop	{r4, pc}
	...

0800e3ec <prvIdleTask>:
{
 800e3ec:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3ee:	4c14      	ldr	r4, [pc, #80]	@ (800e440 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f0:	4f14      	ldr	r7, [pc, #80]	@ (800e444 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e3f2:	4d15      	ldr	r5, [pc, #84]	@ (800e448 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	b983      	cbnz	r3, 800e41a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3f8:	4b14      	ldr	r3, [pc, #80]	@ (800e44c <prvIdleTask+0x60>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d909      	bls.n	800e414 <prvIdleTask+0x28>
				taskYIELD();
 800e400:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e408:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e414:	f7f2 f970 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e418:	e7eb      	b.n	800e3f2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e41a:	f7ff f84b 	bl	800d4b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e422:	1d30      	adds	r0, r6, #4
 800e424:	f7fe ffd0 	bl	800d3c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e428:	682b      	ldr	r3, [r5, #0]
 800e42a:	3b01      	subs	r3, #1
 800e42c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	3b01      	subs	r3, #1
 800e432:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e434:	f7ff f85e 	bl	800d4f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff ffbb 	bl	800e3b4 <prvDeleteTCB>
 800e43e:	e7d9      	b.n	800e3f4 <prvIdleTask+0x8>
 800e440:	24024dbc 	.word	0x24024dbc
 800e444:	24024dc0 	.word	0x24024dc0
 800e448:	24024da4 	.word	0x24024da4
 800e44c:	24024e18 	.word	0x24024e18

0800e450 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e454:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e456:	4607      	mov	r7, r0
 800e458:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e45a:	21a5      	movs	r1, #165	@ 0xa5
 800e45c:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e45e:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e460:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e462:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e466:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e468:	f016 fbae 	bl	8024bc8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e46c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e46e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e470:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e474:	b3b5      	cbz	r5, 800e4e4 <prvInitialiseNewTask.constprop.0+0x94>
 800e476:	1e6b      	subs	r3, r5, #1
 800e478:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e47c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e47e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e482:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e486:	b109      	cbz	r1, 800e48c <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e488:	42ab      	cmp	r3, r5
 800e48a:	d1f8      	bne.n	800e47e <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e48c:	2300      	movs	r3, #0
 800e48e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e492:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e494:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e498:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e49a:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e49c:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e4a0:	bf28      	it	cs
 800e4a2:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e4a4:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e4a6:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a8:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e4ac:	f7fe ff67 	bl	800d37e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e4b0:	f104 0018 	add.w	r0, r4, #24
 800e4b4:	f7fe ff63 	bl	800d37e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e4b8:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e4bc:	4642      	mov	r2, r8
 800e4be:	4639      	mov	r1, r7
 800e4c0:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e4c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4c4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e4c6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e4c8:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4cc:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e4d0:	f7fe ffc8 	bl	800d464 <pxPortInitialiseStack>
 800e4d4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e4d6:	f1b9 0f00 	cmp.w	r9, #0
 800e4da:	d001      	beq.n	800e4e0 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e4dc:	f8c9 4000 	str.w	r4, [r9]
}
 800e4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e4e4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e4e8:	e7d3      	b.n	800e492 <prvInitialiseNewTask.constprop.0+0x42>

0800e4ea <xTaskCreateStatic>:
	{
 800e4ea:	b570      	push	{r4, r5, r6, lr}
 800e4ec:	b086      	sub	sp, #24
 800e4ee:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e4f2:	b945      	cbnz	r5, 800e506 <xTaskCreateStatic+0x1c>
 800e4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	e7fe      	b.n	800e504 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800e506:	b944      	cbnz	r4, 800e51a <xTaskCreateStatic+0x30>
 800e508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	e7fe      	b.n	800e518 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e51a:	2660      	movs	r6, #96	@ 0x60
 800e51c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e51e:	9e05      	ldr	r6, [sp, #20]
 800e520:	2e60      	cmp	r6, #96	@ 0x60
 800e522:	d008      	beq.n	800e536 <xTaskCreateStatic+0x4c>
 800e524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	e7fe      	b.n	800e534 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e536:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e538:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e53a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e53c:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e540:	ad04      	add	r5, sp, #16
 800e542:	9402      	str	r4, [sp, #8]
 800e544:	9501      	str	r5, [sp, #4]
 800e546:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e548:	9500      	str	r5, [sp, #0]
 800e54a:	f7ff ff81 	bl	800e450 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e54e:	4620      	mov	r0, r4
 800e550:	f7ff fe68 	bl	800e224 <prvAddNewTaskToReadyList>
	}
 800e554:	9804      	ldr	r0, [sp, #16]
 800e556:	b006      	add	sp, #24
 800e558:	bd70      	pop	{r4, r5, r6, pc}

0800e55a <xTaskCreate>:
	{
 800e55a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e55e:	4607      	mov	r7, r0
 800e560:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e562:	0090      	lsls	r0, r2, #2
	{
 800e564:	4688      	mov	r8, r1
 800e566:	4616      	mov	r6, r2
 800e568:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e56a:	f7fe fe27 	bl	800d1bc <pvPortMalloc>
			if( pxStack != NULL )
 800e56e:	4605      	mov	r5, r0
 800e570:	b920      	cbnz	r0, 800e57c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e572:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e576:	b005      	add	sp, #20
 800e578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e57c:	2060      	movs	r0, #96	@ 0x60
 800e57e:	f7fe fe1d 	bl	800d1bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e582:	4604      	mov	r4, r0
 800e584:	b198      	cbz	r0, 800e5ae <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e586:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e588:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e58a:	4632      	mov	r2, r6
 800e58c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e58e:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e594:	9002      	str	r0, [sp, #8]
 800e596:	4638      	mov	r0, r7
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	464b      	mov	r3, r9
 800e5a0:	f7ff ff56 	bl	800e450 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f7ff fe3d 	bl	800e224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5aa:	2001      	movs	r0, #1
 800e5ac:	e7e3      	b.n	800e576 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f7fe fe9c 	bl	800d2ec <vPortFree>
		if( pxNewTCB != NULL )
 800e5b4:	e7dd      	b.n	800e572 <xTaskCreate+0x18>
	...

0800e5b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e5b8:	4a02      	ldr	r2, [pc, #8]	@ (800e5c4 <vTaskSuspendAll+0xc>)
 800e5ba:	6813      	ldr	r3, [r2, #0]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	6013      	str	r3, [r2, #0]
}
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	24024d80 	.word	0x24024d80

0800e5c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e5c8:	4b01      	ldr	r3, [pc, #4]	@ (800e5d0 <xTaskGetTickCount+0x8>)
 800e5ca:	6818      	ldr	r0, [r3, #0]
}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	24024da0 	.word	0x24024da0

0800e5d4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d4:	4b3f      	ldr	r3, [pc, #252]	@ (800e6d4 <xTaskIncrementTick+0x100>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
{
 800e5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d172      	bne.n	800e6c6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5e0:	4b3d      	ldr	r3, [pc, #244]	@ (800e6d8 <xTaskIncrementTick+0x104>)
 800e5e2:	681c      	ldr	r4, [r3, #0]
 800e5e4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e5e6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5e8:	b9bc      	cbnz	r4, 800e61a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e5ea:	4b3c      	ldr	r3, [pc, #240]	@ (800e6dc <xTaskIncrementTick+0x108>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	6812      	ldr	r2, [r2, #0]
 800e5f0:	b142      	cbz	r2, 800e604 <xTaskIncrementTick+0x30>
 800e5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	e7fe      	b.n	800e602 <xTaskIncrementTick+0x2e>
 800e604:	4a36      	ldr	r2, [pc, #216]	@ (800e6e0 <xTaskIncrementTick+0x10c>)
 800e606:	6819      	ldr	r1, [r3, #0]
 800e608:	6810      	ldr	r0, [r2, #0]
 800e60a:	6018      	str	r0, [r3, #0]
 800e60c:	6011      	str	r1, [r2, #0]
 800e60e:	4a35      	ldr	r2, [pc, #212]	@ (800e6e4 <xTaskIncrementTick+0x110>)
 800e610:	6813      	ldr	r3, [r2, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	f7ff febb 	bl	800e390 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e61a:	4d33      	ldr	r5, [pc, #204]	@ (800e6e8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e61c:	f04f 0b00 	mov.w	fp, #0
 800e620:	4e32      	ldr	r6, [pc, #200]	@ (800e6ec <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	4f32      	ldr	r7, [pc, #200]	@ (800e6f0 <xTaskIncrementTick+0x11c>)
 800e626:	429c      	cmp	r4, r3
 800e628:	d212      	bcs.n	800e650 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	2114      	movs	r1, #20
 800e62e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e630:	434a      	muls	r2, r1
 800e632:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e634:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e636:	4a2f      	ldr	r2, [pc, #188]	@ (800e6f4 <xTaskIncrementTick+0x120>)
 800e638:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e63a:	bf28      	it	cs
 800e63c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e640:	2a00      	cmp	r2, #0
 800e642:	bf18      	it	ne
 800e644:	f04f 0b01 	movne.w	fp, #1
}
 800e648:	4658      	mov	r0, fp
 800e64a:	b003      	add	sp, #12
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e650:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e6dc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e654:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e6fc <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e658:	f8d9 2000 	ldr.w	r2, [r9]
 800e65c:	6812      	ldr	r2, [r2, #0]
 800e65e:	b91a      	cbnz	r2, 800e668 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e660:	f04f 32ff 	mov.w	r2, #4294967295
 800e664:	602a      	str	r2, [r5, #0]
					break;
 800e666:	e7e0      	b.n	800e62a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e668:	f8d9 2000 	ldr.w	r2, [r9]
 800e66c:	68d2      	ldr	r2, [r2, #12]
 800e66e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e672:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e676:	428c      	cmp	r4, r1
 800e678:	d201      	bcs.n	800e67e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e67a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e67c:	e7d5      	b.n	800e62a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e67e:	f108 0304 	add.w	r3, r8, #4
 800e682:	4618      	mov	r0, r3
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	f7fe fe9f 	bl	800d3c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e68a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e68e:	b119      	cbz	r1, 800e698 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e690:	f108 0018 	add.w	r0, r8, #24
 800e694:	f7fe fe98 	bl	800d3c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e698:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e69c:	f8da 1000 	ldr.w	r1, [sl]
 800e6a0:	4288      	cmp	r0, r1
 800e6a2:	d901      	bls.n	800e6a8 <xTaskIncrementTick+0xd4>
 800e6a4:	f8ca 0000 	str.w	r0, [sl]
 800e6a8:	2314      	movs	r3, #20
 800e6aa:	9901      	ldr	r1, [sp, #4]
 800e6ac:	fb03 6000 	mla	r0, r3, r0, r6
 800e6b0:	f7fe fe68 	bl	800d384 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6b4:	6838      	ldr	r0, [r7, #0]
 800e6b6:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e6ba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e6bc:	4291      	cmp	r1, r2
 800e6be:	bf28      	it	cs
 800e6c0:	f04f 0b01 	movcs.w	fp, #1
 800e6c4:	e7c8      	b.n	800e658 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6f8 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e6c8:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e6cc:	6813      	ldr	r3, [r2, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	6013      	str	r3, [r2, #0]
 800e6d2:	e7b9      	b.n	800e648 <xTaskIncrementTick+0x74>
 800e6d4:	24024d80 	.word	0x24024d80
 800e6d8:	24024da0 	.word	0x24024da0
 800e6dc:	24024dec 	.word	0x24024dec
 800e6e0:	24024de8 	.word	0x24024de8
 800e6e4:	24024d8c 	.word	0x24024d8c
 800e6e8:	24024d84 	.word	0x24024d84
 800e6ec:	24024e18 	.word	0x24024e18
 800e6f0:	24025278 	.word	0x24025278
 800e6f4:	24024d90 	.word	0x24024d90
 800e6f8:	24024d94 	.word	0x24024d94
 800e6fc:	24024d9c 	.word	0x24024d9c

0800e700 <xTaskResumeAll>:
{
 800e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e704:	4c30      	ldr	r4, [pc, #192]	@ (800e7c8 <xTaskResumeAll+0xc8>)
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	b943      	cbnz	r3, 800e71c <xTaskResumeAll+0x1c>
 800e70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70e:	f383 8811 	msr	BASEPRI, r3
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	f3bf 8f4f 	dsb	sy
 800e71a:	e7fe      	b.n	800e71a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e71c:	f7fe feca 	bl	800d4b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	3b01      	subs	r3, #1
 800e724:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e726:	6824      	ldr	r4, [r4, #0]
 800e728:	b12c      	cbz	r4, 800e736 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e72a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e72c:	f7fe fee2 	bl	800d4f4 <vPortExitCritical>
}
 800e730:	4620      	mov	r0, r4
 800e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e736:	4b25      	ldr	r3, [pc, #148]	@ (800e7cc <xTaskResumeAll+0xcc>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0f5      	beq.n	800e72a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e73e:	4d24      	ldr	r5, [pc, #144]	@ (800e7d0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e740:	4e24      	ldr	r6, [pc, #144]	@ (800e7d4 <xTaskResumeAll+0xd4>)
 800e742:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e7e4 <xTaskResumeAll+0xe4>
 800e746:	e01d      	b.n	800e784 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e748:	68eb      	ldr	r3, [r5, #12]
 800e74a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e74c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e74e:	f104 0018 	add.w	r0, r4, #24
 800e752:	f7fe fe39 	bl	800d3c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e756:	4638      	mov	r0, r7
 800e758:	f7fe fe36 	bl	800d3c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e75c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e75e:	6832      	ldr	r2, [r6, #0]
 800e760:	4293      	cmp	r3, r2
 800e762:	d900      	bls.n	800e766 <xTaskResumeAll+0x66>
 800e764:	6033      	str	r3, [r6, #0]
 800e766:	2014      	movs	r0, #20
 800e768:	4639      	mov	r1, r7
 800e76a:	fb00 8003 	mla	r0, r0, r3, r8
 800e76e:	f7fe fe09 	bl	800d384 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e772:	4b19      	ldr	r3, [pc, #100]	@ (800e7d8 <xTaskResumeAll+0xd8>)
 800e774:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d302      	bcc.n	800e784 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e77e:	4b17      	ldr	r3, [pc, #92]	@ (800e7dc <xTaskResumeAll+0xdc>)
 800e780:	2201      	movs	r2, #1
 800e782:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1de      	bne.n	800e748 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e78a:	b10c      	cbz	r4, 800e790 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e78c:	f7ff fe00 	bl	800e390 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e790:	4d13      	ldr	r5, [pc, #76]	@ (800e7e0 <xTaskResumeAll+0xe0>)
 800e792:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e794:	b144      	cbz	r4, 800e7a8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e796:	4e11      	ldr	r6, [pc, #68]	@ (800e7dc <xTaskResumeAll+0xdc>)
 800e798:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e79a:	f7ff ff1b 	bl	800e5d4 <xTaskIncrementTick>
 800e79e:	b100      	cbz	r0, 800e7a2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e7a0:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e7a2:	3c01      	subs	r4, #1
 800e7a4:	d1f9      	bne.n	800e79a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e7a6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e7dc <xTaskResumeAll+0xdc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d0bc      	beq.n	800e72a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e7b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e7b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e7c4:	2401      	movs	r4, #1
 800e7c6:	e7b1      	b.n	800e72c <xTaskResumeAll+0x2c>
 800e7c8:	24024d80 	.word	0x24024d80
 800e7cc:	24024da4 	.word	0x24024da4
 800e7d0:	24024dd4 	.word	0x24024dd4
 800e7d4:	24024d9c 	.word	0x24024d9c
 800e7d8:	24025278 	.word	0x24025278
 800e7dc:	24024d90 	.word	0x24024d90
 800e7e0:	24024d94 	.word	0x24024d94
 800e7e4:	24024e18 	.word	0x24024e18

0800e7e8 <vTaskDelay>:
	{
 800e7e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e7ea:	b950      	cbnz	r0, 800e802 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800e7ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	f3bf 8f6f 	isb	sy
	}
 800e800:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e802:	4b0a      	ldr	r3, [pc, #40]	@ (800e82c <vTaskDelay+0x44>)
 800e804:	6819      	ldr	r1, [r3, #0]
 800e806:	b141      	cbz	r1, 800e81a <vTaskDelay+0x32>
 800e808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	e7fe      	b.n	800e818 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e81a:	f7ff fecd 	bl	800e5b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e81e:	f7ff fd7f 	bl	800e320 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e822:	f7ff ff6d 	bl	800e700 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e826:	2800      	cmp	r0, #0
 800e828:	d0e0      	beq.n	800e7ec <vTaskDelay+0x4>
 800e82a:	e7e9      	b.n	800e800 <vTaskDelay+0x18>
 800e82c:	24024d80 	.word	0x24024d80

0800e830 <vTaskSetApplicationTaskTag>:
	{
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e834:	4604      	mov	r4, r0
 800e836:	b908      	cbnz	r0, 800e83c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e838:	4b04      	ldr	r3, [pc, #16]	@ (800e84c <vTaskSetApplicationTaskTag+0x1c>)
 800e83a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e83c:	f7fe fe3a 	bl	800d4b4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e840:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e846:	f7fe be55 	b.w	800d4f4 <vPortExitCritical>
 800e84a:	bf00      	nop
 800e84c:	24025278 	.word	0x24025278

0800e850 <xTaskCallApplicationTaskHook>:
	{
 800e850:	4603      	mov	r3, r0
 800e852:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e854:	b90b      	cbnz	r3, 800e85a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e856:	4b03      	ldr	r3, [pc, #12]	@ (800e864 <xTaskCallApplicationTaskHook+0x14>)
 800e858:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e85c:	b103      	cbz	r3, 800e860 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e85e:	4718      	bx	r3
	}
 800e860:	4618      	mov	r0, r3
 800e862:	4770      	bx	lr
 800e864:	24025278 	.word	0x24025278

0800e868 <vTaskStartScheduler>:
{
 800e868:	b510      	push	{r4, lr}
 800e86a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e86c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e86e:	aa07      	add	r2, sp, #28
 800e870:	a906      	add	r1, sp, #24
 800e872:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e874:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e878:	f7fe fc62 	bl	800d140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e87c:	9b05      	ldr	r3, [sp, #20]
 800e87e:	9a07      	ldr	r2, [sp, #28]
 800e880:	9302      	str	r3, [sp, #8]
 800e882:	9b06      	ldr	r3, [sp, #24]
 800e884:	4919      	ldr	r1, [pc, #100]	@ (800e8ec <vTaskStartScheduler+0x84>)
 800e886:	481a      	ldr	r0, [pc, #104]	@ (800e8f0 <vTaskStartScheduler+0x88>)
 800e888:	e9cd 4300 	strd	r4, r3, [sp]
 800e88c:	4623      	mov	r3, r4
 800e88e:	f7ff fe2c 	bl	800e4ea <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e892:	b340      	cbz	r0, 800e8e6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e894:	f000 fa84 	bl	800eda0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e898:	2801      	cmp	r0, #1
 800e89a:	d119      	bne.n	800e8d0 <vTaskStartScheduler+0x68>
 800e89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b0:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e8b2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e8b6:	4b10      	ldr	r3, [pc, #64]	@ (800e8f8 <vTaskStartScheduler+0x90>)
 800e8b8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e8ba:	4b10      	ldr	r3, [pc, #64]	@ (800e8fc <vTaskStartScheduler+0x94>)
 800e8bc:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e8be:	4b10      	ldr	r3, [pc, #64]	@ (800e900 <vTaskStartScheduler+0x98>)
 800e8c0:	6818      	ldr	r0, [r3, #0]
 800e8c2:	f7ff ffc5 	bl	800e850 <xTaskCallApplicationTaskHook>
}
 800e8c6:	b008      	add	sp, #32
 800e8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e8cc:	f7fe be82 	b.w	800d5d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	d108      	bne.n	800e8e6 <vTaskStartScheduler+0x7e>
 800e8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	e7fe      	b.n	800e8e4 <vTaskStartScheduler+0x7c>
}
 800e8e6:	b008      	add	sp, #32
 800e8e8:	bd10      	pop	{r4, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0802746d 	.word	0x0802746d
 800e8f0:	0800e3ed 	.word	0x0800e3ed
 800e8f4:	24024d84 	.word	0x24024d84
 800e8f8:	24024d98 	.word	0x24024d98
 800e8fc:	24024da0 	.word	0x24024da0
 800e900:	24025278 	.word	0x24025278

0800e904 <vTaskSwitchContext>:
{
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e906:	4b1c      	ldr	r3, [pc, #112]	@ (800e978 <vTaskSwitchContext+0x74>)
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	4b1c      	ldr	r3, [pc, #112]	@ (800e97c <vTaskSwitchContext+0x78>)
 800e90c:	b112      	cbz	r2, 800e914 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e90e:	2201      	movs	r2, #1
 800e910:	601a      	str	r2, [r3, #0]
}
 800e912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e914:	4c1a      	ldr	r4, [pc, #104]	@ (800e980 <vTaskSwitchContext+0x7c>)
 800e916:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e918:	4e1a      	ldr	r6, [pc, #104]	@ (800e984 <vTaskSwitchContext+0x80>)
 800e91a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e91c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e91e:	6820      	ldr	r0, [r4, #0]
 800e920:	f7ff ff96 	bl	800e850 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e924:	6832      	ldr	r2, [r6, #0]
 800e926:	4918      	ldr	r1, [pc, #96]	@ (800e988 <vTaskSwitchContext+0x84>)
 800e928:	fb07 f302 	mul.w	r3, r7, r2
 800e92c:	58cd      	ldr	r5, [r1, r3]
 800e92e:	18c8      	adds	r0, r1, r3
 800e930:	b1ad      	cbz	r5, 800e95e <vTaskSwitchContext+0x5a>
 800e932:	6845      	ldr	r5, [r0, #4]
 800e934:	3308      	adds	r3, #8
 800e936:	686d      	ldr	r5, [r5, #4]
 800e938:	440b      	add	r3, r1
 800e93a:	429d      	cmp	r5, r3
 800e93c:	6045      	str	r5, [r0, #4]
 800e93e:	bf04      	itt	eq
 800e940:	686b      	ldreq	r3, [r5, #4]
 800e942:	6043      	streq	r3, [r0, #4]
 800e944:	2314      	movs	r3, #20
 800e946:	fb03 1102 	mla	r1, r3, r2, r1
 800e94a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e94c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e954:	6820      	ldr	r0, [r4, #0]
}
 800e956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e95a:	f7ff bf79 	b.w	800e850 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e95e:	b942      	cbnz	r2, 800e972 <vTaskSwitchContext+0x6e>
 800e960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	e7fe      	b.n	800e970 <vTaskSwitchContext+0x6c>
 800e972:	3a01      	subs	r2, #1
 800e974:	e7d8      	b.n	800e928 <vTaskSwitchContext+0x24>
 800e976:	bf00      	nop
 800e978:	24024d80 	.word	0x24024d80
 800e97c:	24024d90 	.word	0x24024d90
 800e980:	24025278 	.word	0x24025278
 800e984:	24024d9c 	.word	0x24024d9c
 800e988:	24024e18 	.word	0x24024e18

0800e98c <vTaskPlaceOnEventList>:
{
 800e98c:	b510      	push	{r4, lr}
 800e98e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e990:	b940      	cbnz	r0, 800e9a4 <vTaskPlaceOnEventList+0x18>
 800e992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	e7fe      	b.n	800e9a2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9a4:	4b05      	ldr	r3, [pc, #20]	@ (800e9bc <vTaskPlaceOnEventList+0x30>)
 800e9a6:	6819      	ldr	r1, [r3, #0]
 800e9a8:	3118      	adds	r1, #24
 800e9aa:	f7fe fcf6 	bl	800d39a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	2101      	movs	r1, #1
}
 800e9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9b6:	f7ff bcb3 	b.w	800e320 <prvAddCurrentTaskToDelayedList>
 800e9ba:	bf00      	nop
 800e9bc:	24025278 	.word	0x24025278

0800e9c0 <vTaskPlaceOnEventListRestricted>:
	{
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	460d      	mov	r5, r1
 800e9c4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e9c6:	b940      	cbnz	r0, 800e9da <vTaskPlaceOnEventListRestricted+0x1a>
 800e9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	e7fe      	b.n	800e9d8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9da:	4b07      	ldr	r3, [pc, #28]	@ (800e9f8 <vTaskPlaceOnEventListRestricted+0x38>)
 800e9dc:	6819      	ldr	r1, [r3, #0]
 800e9de:	3118      	adds	r1, #24
 800e9e0:	f7fe fcd0 	bl	800d384 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e9e4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	bf0c      	ite	eq
 800e9ea:	4628      	moveq	r0, r5
 800e9ec:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9f4:	f7ff bc94 	b.w	800e320 <prvAddCurrentTaskToDelayedList>
 800e9f8:	24025278 	.word	0x24025278

0800e9fc <xTaskRemoveFromEventList>:
{
 800e9fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9fe:	68c3      	ldr	r3, [r0, #12]
 800ea00:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ea02:	b944      	cbnz	r4, 800ea16 <xTaskRemoveFromEventList+0x1a>
 800ea04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	e7fe      	b.n	800ea14 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea16:	f104 0518 	add.w	r5, r4, #24
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f7fe fcd4 	bl	800d3c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea20:	4b11      	ldr	r3, [pc, #68]	@ (800ea68 <xTaskRemoveFromEventList+0x6c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	b9d3      	cbnz	r3, 800ea5c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea26:	1d25      	adds	r5, r4, #4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f7fe fccd 	bl	800d3c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea2e:	4a0f      	ldr	r2, [pc, #60]	@ (800ea6c <xTaskRemoveFromEventList+0x70>)
 800ea30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea32:	6811      	ldr	r1, [r2, #0]
 800ea34:	428b      	cmp	r3, r1
 800ea36:	d900      	bls.n	800ea3a <xTaskRemoveFromEventList+0x3e>
 800ea38:	6013      	str	r3, [r2, #0]
 800ea3a:	2014      	movs	r0, #20
 800ea3c:	4a0c      	ldr	r2, [pc, #48]	@ (800ea70 <xTaskRemoveFromEventList+0x74>)
 800ea3e:	4629      	mov	r1, r5
 800ea40:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea44:	f7fe fc9e 	bl	800d384 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea48:	4b0a      	ldr	r3, [pc, #40]	@ (800ea74 <xTaskRemoveFromEventList+0x78>)
 800ea4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d906      	bls.n	800ea62 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800ea54:	2001      	movs	r0, #1
 800ea56:	4b08      	ldr	r3, [pc, #32]	@ (800ea78 <xTaskRemoveFromEventList+0x7c>)
 800ea58:	6018      	str	r0, [r3, #0]
}
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4807      	ldr	r0, [pc, #28]	@ (800ea7c <xTaskRemoveFromEventList+0x80>)
 800ea60:	e7f0      	b.n	800ea44 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800ea62:	2000      	movs	r0, #0
	return xReturn;
 800ea64:	e7f9      	b.n	800ea5a <xTaskRemoveFromEventList+0x5e>
 800ea66:	bf00      	nop
 800ea68:	24024d80 	.word	0x24024d80
 800ea6c:	24024d9c 	.word	0x24024d9c
 800ea70:	24024e18 	.word	0x24024e18
 800ea74:	24025278 	.word	0x24025278
 800ea78:	24024d90 	.word	0x24024d90
 800ea7c:	24024dd4 	.word	0x24024dd4

0800ea80 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea80:	4b03      	ldr	r3, [pc, #12]	@ (800ea90 <vTaskInternalSetTimeOutState+0x10>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea86:	4b03      	ldr	r3, [pc, #12]	@ (800ea94 <vTaskInternalSetTimeOutState+0x14>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6043      	str	r3, [r0, #4]
}
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	24024d8c 	.word	0x24024d8c
 800ea94:	24024da0 	.word	0x24024da0

0800ea98 <xTaskCheckForTimeOut>:
{
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	b940      	cbnz	r0, 800eab2 <xTaskCheckForTimeOut+0x1a>
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	e7fe      	b.n	800eab0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800eab2:	b941      	cbnz	r1, 800eac6 <xTaskCheckForTimeOut+0x2e>
 800eab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	e7fe      	b.n	800eac4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800eac6:	f7fe fcf5 	bl	800d4b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800eaca:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <xTaskCheckForTimeOut+0x70>)
 800eacc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	d010      	beq.n	800eaf6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ead4:	480d      	ldr	r0, [pc, #52]	@ (800eb0c <xTaskCheckForTimeOut+0x74>)
 800ead6:	682e      	ldr	r6, [r5, #0]
 800ead8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eada:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eadc:	4286      	cmp	r6, r0
 800eade:	d001      	beq.n	800eae4 <xTaskCheckForTimeOut+0x4c>
 800eae0:	428a      	cmp	r2, r1
 800eae2:	d90f      	bls.n	800eb04 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eae4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eae6:	4283      	cmp	r3, r0
 800eae8:	d90a      	bls.n	800eb00 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800eaea:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eaec:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800eaee:	4413      	add	r3, r2
 800eaf0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eaf2:	f7ff ffc5 	bl	800ea80 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800eaf6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800eaf8:	f7fe fcfc 	bl	800d4f4 <vPortExitCritical>
}
 800eafc:	4620      	mov	r0, r4
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800eb00:	2300      	movs	r3, #0
 800eb02:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800eb04:	2401      	movs	r4, #1
 800eb06:	e7f7      	b.n	800eaf8 <xTaskCheckForTimeOut+0x60>
 800eb08:	24024da0 	.word	0x24024da0
 800eb0c:	24024d8c 	.word	0x24024d8c

0800eb10 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eb10:	4b01      	ldr	r3, [pc, #4]	@ (800eb18 <vTaskMissedYield+0x8>)
 800eb12:	2201      	movs	r2, #1
 800eb14:	601a      	str	r2, [r3, #0]
}
 800eb16:	4770      	bx	lr
 800eb18:	24024d90 	.word	0x24024d90

0800eb1c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800eb1c:	4b01      	ldr	r3, [pc, #4]	@ (800eb24 <xTaskGetCurrentTaskHandle+0x8>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
	}
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	24025278 	.word	0x24025278

0800eb28 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eb28:	4b05      	ldr	r3, [pc, #20]	@ (800eb40 <xTaskGetSchedulerState+0x18>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	b133      	cbz	r3, 800eb3c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb2e:	4b05      	ldr	r3, [pc, #20]	@ (800eb44 <xTaskGetSchedulerState+0x1c>)
 800eb30:	6818      	ldr	r0, [r3, #0]
 800eb32:	fab0 f080 	clz	r0, r0
 800eb36:	0940      	lsrs	r0, r0, #5
 800eb38:	0040      	lsls	r0, r0, #1
 800eb3a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb3c:	2001      	movs	r0, #1
	}
 800eb3e:	4770      	bx	lr
 800eb40:	24024d98 	.word	0x24024d98
 800eb44:	24024d80 	.word	0x24024d80

0800eb48 <xTaskPriorityInherit>:
	{
 800eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	b338      	cbz	r0, 800eb9e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb4e:	4d1a      	ldr	r5, [pc, #104]	@ (800ebb8 <xTaskPriorityInherit+0x70>)
 800eb50:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800eb52:	682a      	ldr	r2, [r5, #0]
 800eb54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d226      	bcs.n	800eba8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb5a:	6982      	ldr	r2, [r0, #24]
 800eb5c:	2a00      	cmp	r2, #0
 800eb5e:	db04      	blt.n	800eb6a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb60:	682a      	ldr	r2, [r5, #0]
 800eb62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800eb64:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800eb68:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb6a:	2214      	movs	r2, #20
 800eb6c:	4e13      	ldr	r6, [pc, #76]	@ (800ebbc <xTaskPriorityInherit+0x74>)
 800eb6e:	fb02 6303 	mla	r3, r2, r3, r6
 800eb72:	6962      	ldr	r2, [r4, #20]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d113      	bne.n	800eba0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb78:	1d27      	adds	r7, r4, #4
 800eb7a:	4638      	mov	r0, r7
 800eb7c:	f7fe fc24 	bl	800d3c8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb80:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb82:	4a0f      	ldr	r2, [pc, #60]	@ (800ebc0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb86:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb88:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb8a:	428b      	cmp	r3, r1
 800eb8c:	d900      	bls.n	800eb90 <xTaskPriorityInherit+0x48>
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	2014      	movs	r0, #20
 800eb92:	4639      	mov	r1, r7
 800eb94:	fb00 6003 	mla	r0, r0, r3, r6
 800eb98:	f7fe fbf4 	bl	800d384 <vListInsertEnd>
				xReturn = pdTRUE;
 800eb9c:	2001      	movs	r0, #1
	}
 800eb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eba6:	e7f9      	b.n	800eb9c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800ebac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebae:	4298      	cmp	r0, r3
 800ebb0:	bf2c      	ite	cs
 800ebb2:	2000      	movcs	r0, #0
 800ebb4:	2001      	movcc	r0, #1
 800ebb6:	e7f2      	b.n	800eb9e <xTaskPriorityInherit+0x56>
 800ebb8:	24025278 	.word	0x24025278
 800ebbc:	24024e18 	.word	0x24024e18
 800ebc0:	24024d9c 	.word	0x24024d9c

0800ebc4 <xTaskPriorityDisinherit>:
	{
 800ebc4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ebc6:	b908      	cbnz	r0, 800ebcc <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800ebc8:	2000      	movs	r0, #0
	}
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ebcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ec3c <xTaskPriorityDisinherit+0x78>)
 800ebce:	681c      	ldr	r4, [r3, #0]
 800ebd0:	4284      	cmp	r4, r0
 800ebd2:	d008      	beq.n	800ebe6 <xTaskPriorityDisinherit+0x22>
 800ebd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	e7fe      	b.n	800ebe4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebe6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ebe8:	b943      	cbnz	r3, 800ebfc <xTaskPriorityDisinherit+0x38>
 800ebea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	e7fe      	b.n	800ebfa <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebfc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ebfe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec00:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ec02:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec04:	4291      	cmp	r1, r2
 800ec06:	d0df      	beq.n	800ebc8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1dd      	bne.n	800ebc8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec0c:	1d25      	adds	r5, r4, #4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f7fe fbda 	bl	800d3c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec14:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec1c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec1e:	4a08      	ldr	r2, [pc, #32]	@ (800ec40 <xTaskPriorityDisinherit+0x7c>)
 800ec20:	6811      	ldr	r1, [r2, #0]
 800ec22:	428b      	cmp	r3, r1
 800ec24:	d900      	bls.n	800ec28 <xTaskPriorityDisinherit+0x64>
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	4a06      	ldr	r2, [pc, #24]	@ (800ec44 <xTaskPriorityDisinherit+0x80>)
 800ec2a:	2014      	movs	r0, #20
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	fb00 2003 	mla	r0, r0, r3, r2
 800ec32:	f7fe fba7 	bl	800d384 <vListInsertEnd>
					xReturn = pdTRUE;
 800ec36:	2001      	movs	r0, #1
		return xReturn;
 800ec38:	e7c7      	b.n	800ebca <xTaskPriorityDisinherit+0x6>
 800ec3a:	bf00      	nop
 800ec3c:	24025278 	.word	0x24025278
 800ec40:	24024d9c 	.word	0x24024d9c
 800ec44:	24024e18 	.word	0x24024e18

0800ec48 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ec48:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d042      	beq.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec50:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ec52:	b942      	cbnz	r2, 800ec66 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800ec54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	e7fe      	b.n	800ec64 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec66:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ec68:	4299      	cmp	r1, r3
 800ec6a:	bf38      	it	cc
 800ec6c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec6e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ec70:	428b      	cmp	r3, r1
 800ec72:	d030      	beq.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec74:	2a01      	cmp	r2, #1
 800ec76:	d12e      	bne.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800ec78:	4a17      	ldr	r2, [pc, #92]	@ (800ecd8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800ec7a:	6812      	ldr	r2, [r2, #0]
 800ec7c:	4282      	cmp	r2, r0
 800ec7e:	d108      	bne.n	800ec92 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ec80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	e7fe      	b.n	800ec90 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec92:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec94:	4d11      	ldr	r5, [pc, #68]	@ (800ecdc <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec96:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec98:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ec9c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec9e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca2:	bfa8      	it	ge
 800eca4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eca8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecaa:	bfa8      	it	ge
 800ecac:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d111      	bne.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecb2:	1d06      	adds	r6, r0, #4
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	f7fe fb87 	bl	800d3c8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ecba:	4a09      	ldr	r2, [pc, #36]	@ (800ece0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ecbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ecbe:	6811      	ldr	r1, [r2, #0]
 800ecc0:	428b      	cmp	r3, r1
 800ecc2:	d900      	bls.n	800ecc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	2014      	movs	r0, #20
 800ecc8:	4631      	mov	r1, r6
 800ecca:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ecce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ecd2:	f7fe bb57 	b.w	800d384 <vListInsertEnd>
	}
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	24025278 	.word	0x24025278
 800ecdc:	24024e18 	.word	0x24024e18
 800ece0:	24024d9c 	.word	0x24024d9c

0800ece4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ece4:	4b04      	ldr	r3, [pc, #16]	@ (800ecf8 <pvTaskIncrementMutexHeldCount+0x14>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	b11a      	cbz	r2, 800ecf2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecea:	6819      	ldr	r1, [r3, #0]
 800ecec:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ecee:	3201      	adds	r2, #1
 800ecf0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ecf2:	6818      	ldr	r0, [r3, #0]
	}
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	24025278 	.word	0x24025278

0800ecfc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ecfc:	4291      	cmp	r1, r2
{
 800ecfe:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed00:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed02:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ed04:	d80a      	bhi.n	800ed1c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed06:	1ad2      	subs	r2, r2, r3
 800ed08:	6983      	ldr	r3, [r0, #24]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d20d      	bcs.n	800ed2a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed0e:	1d01      	adds	r1, r0, #4
 800ed10:	4b07      	ldr	r3, [pc, #28]	@ (800ed30 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	f7fe fb41 	bl	800d39a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ed18:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ed1a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d201      	bcs.n	800ed24 <prvInsertTimerInActiveList+0x28>
 800ed20:	4299      	cmp	r1, r3
 800ed22:	d202      	bcs.n	800ed2a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed24:	1d01      	adds	r1, r0, #4
 800ed26:	4b03      	ldr	r3, [pc, #12]	@ (800ed34 <prvInsertTimerInActiveList+0x38>)
 800ed28:	e7f3      	b.n	800ed12 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ed2a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ed2c:	e7f5      	b.n	800ed1a <prvInsertTimerInActiveList+0x1e>
 800ed2e:	bf00      	nop
 800ed30:	24025378 	.word	0x24025378
 800ed34:	2402537c 	.word	0x2402537c

0800ed38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ed3a:	4c11      	ldr	r4, [pc, #68]	@ (800ed80 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ed3c:	f7fe fbba 	bl	800d4b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ed40:	6825      	ldr	r5, [r4, #0]
 800ed42:	b9bd      	cbnz	r5, 800ed74 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed44:	4f0f      	ldr	r7, [pc, #60]	@ (800ed84 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ed46:	4e10      	ldr	r6, [pc, #64]	@ (800ed88 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7fe fb0d 	bl	800d368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f7fe fb0a 	bl	800d368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed54:	4b0d      	ldr	r3, [pc, #52]	@ (800ed8c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed56:	4a0e      	ldr	r2, [pc, #56]	@ (800ed90 <prvCheckForValidListAndQueue+0x58>)
 800ed58:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ed5a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed5c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ed5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed94 <prvCheckForValidListAndQueue+0x5c>)
 800ed60:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed62:	4b0d      	ldr	r3, [pc, #52]	@ (800ed98 <prvCheckForValidListAndQueue+0x60>)
 800ed64:	9500      	str	r5, [sp, #0]
 800ed66:	f7fe fdad 	bl	800d8c4 <xQueueGenericCreateStatic>
 800ed6a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed6c:	b110      	cbz	r0, 800ed74 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed6e:	490b      	ldr	r1, [pc, #44]	@ (800ed9c <prvCheckForValidListAndQueue+0x64>)
 800ed70:	f7ff f9f6 	bl	800e160 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ed74:	b003      	add	sp, #12
 800ed76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ed7a:	f7fe bbbb 	b.w	800d4f4 <vPortExitCritical>
 800ed7e:	bf00      	nop
 800ed80:	24025374 	.word	0x24025374
 800ed84:	24025394 	.word	0x24025394
 800ed88:	24025380 	.word	0x24025380
 800ed8c:	2402537c 	.word	0x2402537c
 800ed90:	240252cc 	.word	0x240252cc
 800ed94:	24025378 	.word	0x24025378
 800ed98:	2402527c 	.word	0x2402527c
 800ed9c:	08027472 	.word	0x08027472

0800eda0 <xTimerCreateTimerTask>:
{
 800eda0:	b510      	push	{r4, lr}
 800eda2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800eda4:	f7ff ffc8 	bl	800ed38 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eda8:	4b12      	ldr	r3, [pc, #72]	@ (800edf4 <xTimerCreateTimerTask+0x54>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	b1b3      	cbz	r3, 800eddc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edae:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edb0:	aa07      	add	r2, sp, #28
 800edb2:	a906      	add	r1, sp, #24
 800edb4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edb6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edba:	f7fe f9cd 	bl	800d158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800edbe:	9b05      	ldr	r3, [sp, #20]
 800edc0:	9a07      	ldr	r2, [sp, #28]
 800edc2:	9302      	str	r3, [sp, #8]
 800edc4:	9b06      	ldr	r3, [sp, #24]
 800edc6:	490c      	ldr	r1, [pc, #48]	@ (800edf8 <xTimerCreateTimerTask+0x58>)
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	2302      	movs	r3, #2
 800edcc:	480b      	ldr	r0, [pc, #44]	@ (800edfc <xTimerCreateTimerTask+0x5c>)
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4623      	mov	r3, r4
 800edd2:	f7ff fb8a 	bl	800e4ea <xTaskCreateStatic>
 800edd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ee00 <xTimerCreateTimerTask+0x60>)
 800edd8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800edda:	b940      	cbnz	r0, 800edee <xTimerCreateTimerTask+0x4e>
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800edec:	e7fe      	b.n	800edec <xTimerCreateTimerTask+0x4c>
}
 800edee:	2001      	movs	r0, #1
 800edf0:	b008      	add	sp, #32
 800edf2:	bd10      	pop	{r4, pc}
 800edf4:	24025374 	.word	0x24025374
 800edf8:	08027477 	.word	0x08027477
 800edfc:	0800eefd 	.word	0x0800eefd
 800ee00:	24025370 	.word	0x24025370

0800ee04 <xTimerGenericCommand>:
{
 800ee04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ee06:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800ee08:	4604      	mov	r4, r0
{
 800ee0a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800ee0c:	b940      	cbnz	r0, 800ee20 <xTimerGenericCommand+0x1c>
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	e7fe      	b.n	800ee1e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800ee20:	4d0c      	ldr	r5, [pc, #48]	@ (800ee54 <xTimerGenericCommand+0x50>)
 800ee22:	6828      	ldr	r0, [r5, #0]
 800ee24:	b178      	cbz	r0, 800ee46 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee26:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ee28:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ee2a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee2e:	dc0c      	bgt.n	800ee4a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee30:	f7ff fe7a 	bl	800eb28 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee34:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee36:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee38:	4669      	mov	r1, sp
 800ee3a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee3c:	bf0c      	ite	eq
 800ee3e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee40:	461a      	movne	r2, r3
 800ee42:	f7fe fdf4 	bl	800da2e <xQueueGenericSend>
}
 800ee46:	b004      	add	sp, #16
 800ee48:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	4669      	mov	r1, sp
 800ee4e:	f7fe fef1 	bl	800dc34 <xQueueGenericSendFromISR>
 800ee52:	e7f8      	b.n	800ee46 <xTimerGenericCommand+0x42>
 800ee54:	24025374 	.word	0x24025374

0800ee58 <prvSampleTimeNow>:
{
 800ee58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800ee5c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800eef8 <prvSampleTimeNow+0xa0>
{
 800ee60:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800ee62:	f7ff fbb1 	bl	800e5c8 <xTaskGetTickCount>
 800ee66:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800ee68:	f8d8 3000 	ldr.w	r3, [r8]
 800ee6c:	4283      	cmp	r3, r0
 800ee6e:	d909      	bls.n	800ee84 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee70:	4f1f      	ldr	r7, [pc, #124]	@ (800eef0 <prvSampleTimeNow+0x98>)
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	b96a      	cbnz	r2, 800ee94 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800ee78:	4a1e      	ldr	r2, [pc, #120]	@ (800eef4 <prvSampleTimeNow+0x9c>)
 800ee7a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee7c:	6013      	str	r3, [r2, #0]
 800ee7e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800ee80:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800ee82:	e000      	b.n	800ee86 <prvSampleTimeNow+0x2e>
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800ee88:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800ee8a:	f8c8 5000 	str.w	r5, [r8]
}
 800ee8e:	b002      	add	sp, #8
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee94:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee96:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee98:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee9c:	f104 0a04 	add.w	sl, r4, #4
 800eea0:	4650      	mov	r0, sl
 800eea2:	f7fe fa91 	bl	800d3c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eea6:	6a23      	ldr	r3, [r4, #32]
 800eea8:	4620      	mov	r0, r4
 800eeaa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eeb0:	075b      	lsls	r3, r3, #29
 800eeb2:	d5de      	bpl.n	800ee72 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eeb4:	69a3      	ldr	r3, [r4, #24]
 800eeb6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800eeb8:	4599      	cmp	r9, r3
 800eeba:	d206      	bcs.n	800eeca <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eebc:	4651      	mov	r1, sl
 800eebe:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eec0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eec2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eec4:	f7fe fa69 	bl	800d39a <vListInsert>
 800eec8:	e7d3      	b.n	800ee72 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eeca:	2300      	movs	r3, #0
 800eecc:	464a      	mov	r2, r9
 800eece:	4620      	mov	r0, r4
 800eed0:	4619      	mov	r1, r3
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	f7ff ff96 	bl	800ee04 <xTimerGenericCommand>
				configASSERT( xResult );
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d1ca      	bne.n	800ee72 <prvSampleTimeNow+0x1a>
 800eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	e7fe      	b.n	800eeec <prvSampleTimeNow+0x94>
 800eeee:	bf00      	nop
 800eef0:	2402537c 	.word	0x2402537c
 800eef4:	24025378 	.word	0x24025378
 800eef8:	2402536c 	.word	0x2402536c

0800eefc <prvTimerTask>:
{
 800eefc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef00:	4d6e      	ldr	r5, [pc, #440]	@ (800f0bc <prvTimerTask+0x1c0>)
{
 800ef02:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef04:	4e6e      	ldr	r6, [pc, #440]	@ (800f0c0 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef06:	682b      	ldr	r3, [r5, #0]
 800ef08:	f8d3 8000 	ldr.w	r8, [r3]
 800ef0c:	f1b8 0f00 	cmp.w	r8, #0
 800ef10:	d035      	beq.n	800ef7e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef12:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef14:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef16:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800ef1a:	f7ff fb4d 	bl	800e5b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef1e:	a804      	add	r0, sp, #16
 800ef20:	f7ff ff9a 	bl	800ee58 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ef24:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef26:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d169      	bne.n	800f000 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ef2c:	2c00      	cmp	r4, #0
 800ef2e:	d14c      	bne.n	800efca <prvTimerTask+0xce>
 800ef30:	4540      	cmp	r0, r8
 800ef32:	d350      	bcc.n	800efd6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800ef34:	f7ff fbe4 	bl	800e700 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef3e:	1d38      	adds	r0, r7, #4
 800ef40:	f7fe fa42 	bl	800d3c8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ef48:	0758      	lsls	r0, r3, #29
 800ef4a:	d51a      	bpl.n	800ef82 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef4c:	69b9      	ldr	r1, [r7, #24]
 800ef4e:	4643      	mov	r3, r8
 800ef50:	464a      	mov	r2, r9
 800ef52:	4638      	mov	r0, r7
 800ef54:	4441      	add	r1, r8
 800ef56:	f7ff fed1 	bl	800ecfc <prvInsertTimerInActiveList>
 800ef5a:	b1b0      	cbz	r0, 800ef8a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef5c:	4623      	mov	r3, r4
 800ef5e:	4642      	mov	r2, r8
 800ef60:	4621      	mov	r1, r4
 800ef62:	4638      	mov	r0, r7
 800ef64:	9400      	str	r4, [sp, #0]
 800ef66:	f7ff ff4d 	bl	800ee04 <xTimerGenericCommand>
			configASSERT( xResult );
 800ef6a:	b970      	cbnz	r0, 800ef8a <prvTimerTask+0x8e>
 800ef6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	e7fe      	b.n	800ef7c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef7e:	2401      	movs	r4, #1
 800ef80:	e7cb      	b.n	800ef1a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef82:	f023 0301 	bic.w	r3, r3, #1
 800ef86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef90:	2200      	movs	r2, #0
 800ef92:	a904      	add	r1, sp, #16
 800ef94:	6830      	ldr	r0, [r6, #0]
 800ef96:	f7fe fefb 	bl	800dd90 <xQueueReceive>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d0b3      	beq.n	800ef06 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ef9e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800efa0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	db2f      	blt.n	800f006 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800efa6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800efa8:	6963      	ldr	r3, [r4, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d132      	bne.n	800f014 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efae:	a803      	add	r0, sp, #12
 800efb0:	f7ff ff52 	bl	800ee58 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800efb4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efb6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800efb8:	2b09      	cmp	r3, #9
 800efba:	d8e9      	bhi.n	800ef90 <prvTimerTask+0x94>
 800efbc:	e8df f003 	tbb	[pc, r3]
 800efc0:	572e2e2e 	.word	0x572e2e2e
 800efc4:	2e2e765e 	.word	0x2e2e765e
 800efc8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800efca:	4b3e      	ldr	r3, [pc, #248]	@ (800f0c4 <prvTimerTask+0x1c8>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681c      	ldr	r4, [r3, #0]
 800efd0:	fab4 f484 	clz	r4, r4
 800efd4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800efd6:	4622      	mov	r2, r4
 800efd8:	eba8 0109 	sub.w	r1, r8, r9
 800efdc:	6830      	ldr	r0, [r6, #0]
 800efde:	f7ff f8fe 	bl	800e1de <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800efe2:	f7ff fb8d 	bl	800e700 <xTaskResumeAll>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d1d2      	bne.n	800ef90 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800efea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800efee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eff2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	e7c7      	b.n	800ef90 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800f000:	f7ff fb7e 	bl	800e700 <xTaskResumeAll>
}
 800f004:	e7c4      	b.n	800ef90 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f006:	9b05      	ldr	r3, [sp, #20]
 800f008:	9907      	ldr	r1, [sp, #28]
 800f00a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f00c:	9b04      	ldr	r3, [sp, #16]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dbbe      	blt.n	800ef90 <prvTimerTask+0x94>
 800f012:	e7c8      	b.n	800efa6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f014:	1d20      	adds	r0, r4, #4
 800f016:	f7fe f9d7 	bl	800d3c8 <uxListRemove>
 800f01a:	e7c8      	b.n	800efae <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f01c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f020:	4620      	mov	r0, r4
 800f022:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f024:	f043 0301 	orr.w	r3, r3, #1
 800f028:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f02c:	9b05      	ldr	r3, [sp, #20]
 800f02e:	4419      	add	r1, r3
 800f030:	f7ff fe64 	bl	800ecfc <prvInsertTimerInActiveList>
 800f034:	2800      	cmp	r0, #0
 800f036:	d0ab      	beq.n	800ef90 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f038:	6a23      	ldr	r3, [r4, #32]
 800f03a:	4620      	mov	r0, r4
 800f03c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f03e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f042:	0759      	lsls	r1, r3, #29
 800f044:	d5a4      	bpl.n	800ef90 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f046:	69a2      	ldr	r2, [r4, #24]
 800f048:	2300      	movs	r3, #0
 800f04a:	9905      	ldr	r1, [sp, #20]
 800f04c:	4620      	mov	r0, r4
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	440a      	add	r2, r1
 800f052:	4619      	mov	r1, r3
 800f054:	f7ff fed6 	bl	800ee04 <xTimerGenericCommand>
							configASSERT( xResult );
 800f058:	2800      	cmp	r0, #0
 800f05a:	d199      	bne.n	800ef90 <prvTimerTask+0x94>
 800f05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	e7fe      	b.n	800f06c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f06e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f072:	f023 0301 	bic.w	r3, r3, #1
 800f076:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800f07a:	e789      	b.n	800ef90 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f07c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f080:	f043 0301 	orr.w	r3, r3, #1
 800f084:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f088:	9905      	ldr	r1, [sp, #20]
 800f08a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f08c:	b941      	cbnz	r1, 800f0a0 <prvTimerTask+0x1a4>
 800f08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	e7fe      	b.n	800f09e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	4401      	add	r1, r0
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f7ff fe29 	bl	800ecfc <prvInsertTimerInActiveList>
					break;
 800f0aa:	e771      	b.n	800ef90 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f0ac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f0b0:	079a      	lsls	r2, r3, #30
 800f0b2:	d4de      	bmi.n	800f072 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f7fe f919 	bl	800d2ec <vPortFree>
 800f0ba:	e769      	b.n	800ef90 <prvTimerTask+0x94>
 800f0bc:	2402537c 	.word	0x2402537c
 800f0c0:	24025374 	.word	0x24025374
 800f0c4:	24025378 	.word	0x24025378

0800f0c8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f0c8:	8880      	ldrh	r0, [r0, #4]
 800f0ca:	4770      	bx	lr

0800f0cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d8:	4798      	blx	r3
 800f0da:	4606      	mov	r6, r0
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	4628      	mov	r0, r5
 800f0e0:	1ba4      	subs	r4, r4, r6
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	b2a4      	uxth	r4, r4
 800f0e6:	4798      	blx	r3
 800f0e8:	fbb4 f0f0 	udiv	r0, r4, r0
 800f0ec:	bd70      	pop	{r4, r5, r6, pc}

0800f0ee <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	8083      	strh	r3, [r0, #4]
 800f0f2:	4770      	bx	lr

0800f0f4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	6803      	ldr	r3, [r0, #0]
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	8881      	ldrh	r1, [r0, #4]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fe:	4798      	blx	r3
 800f100:	88a3      	ldrh	r3, [r4, #4]
 800f102:	3301      	adds	r3, #1
 800f104:	80a3      	strh	r3, [r4, #4]
 800f106:	bd10      	pop	{r4, pc}

0800f108 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f108:	6803      	ldr	r3, [r0, #0]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10c:	4718      	bx	r3

0800f10e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f10e:	4770      	bx	lr

0800f110 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f110:	4a02      	ldr	r2, [pc, #8]	@ (800f11c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f112:	6002      	str	r2, [r0, #0]
 800f114:	2200      	movs	r2, #0
 800f116:	8082      	strh	r2, [r0, #4]
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	08028410 	.word	0x08028410

0800f120 <_ZN8touchgfx9Container13getFirstChildEv>:
 800f120:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800f122:	4770      	bx	lr

0800f124 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800f124:	b510      	push	{r4, lr}
 800f126:	6803      	ldr	r3, [r0, #0]
 800f128:	4604      	mov	r4, r0
 800f12a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f12e:	4798      	blx	r3
 800f130:	b110      	cbz	r0, 800f138 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 800f132:	4620      	mov	r0, r4
 800f134:	f7f4 fa79 	bl	800362a <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f138:	bd10      	pop	{r4, pc}

0800f13a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800f13a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800f13e:	4770      	bx	lr

0800f140 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800f140:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800f144:	4770      	bx	lr

0800f146 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800f146:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800f14a:	4770      	bx	lr

0800f14c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800f14c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800f150:	4770      	bx	lr

0800f152 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800f152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f154:	461e      	mov	r6, r3
 800f156:	6803      	ldr	r3, [r0, #0]
 800f158:	460f      	mov	r7, r1
 800f15a:	4604      	mov	r4, r0
 800f15c:	4615      	mov	r5, r2
 800f15e:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800f162:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800f166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f16a:	4798      	blx	r3
 800f16c:	b93e      	cbnz	r6, 800f17e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800f16e:	1bed      	subs	r5, r5, r7
 800f170:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800f174:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f178:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f17e:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800f182:	e7f7      	b.n	800f174 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800f184 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800f184:	b510      	push	{r4, lr}
 800f186:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f18a:	600c      	str	r4, [r1, #0]
 800f18c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f196:	801a      	strh	r2, [r3, #0]
 800f198:	9b02      	ldr	r3, [sp, #8]
 800f19a:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800f19e:	801a      	strh	r2, [r3, #0]
 800f1a0:	bd10      	pop	{r4, pc}

0800f1a2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800f1a2:	b510      	push	{r4, lr}
 800f1a4:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f1a8:	600c      	str	r4, [r1, #0]
 800f1aa:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f1ae:	6011      	str	r1, [r2, #0]
 800f1b0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f1b4:	801a      	strh	r2, [r3, #0]
 800f1b6:	bd10      	pop	{r4, pc}

0800f1b8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800f1b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f1bc:	600b      	str	r3, [r1, #0]
 800f1be:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	4770      	bx	lr

0800f1c6 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800f1c6:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800f1ca:	4770      	bx	lr

0800f1cc <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800f1cc:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800f1d0:	4770      	bx	lr

0800f1d2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800f1d2:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800f1d6:	4770      	bx	lr

0800f1d8 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800f1d8:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800f1dc:	4770      	bx	lr

0800f1de <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800f1de:	4770      	bx	lr

0800f1e0 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	21b4      	movs	r1, #180	@ 0xb4
 800f1e6:	f014 feda 	bl	8023f9e <_ZdlPvj>
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	bd10      	pop	{r4, pc}

0800f1ee <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800f1ee:	b570      	push	{r4, r5, r6, lr}
 800f1f0:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	4616      	mov	r6, r2
 800f1f8:	428d      	cmp	r5, r1
 800f1fa:	bfb8      	it	lt
 800f1fc:	460d      	movlt	r5, r1
 800f1fe:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f202:	428d      	cmp	r5, r1
 800f204:	bfa8      	it	ge
 800f206:	460d      	movge	r5, r1
 800f208:	b99a      	cbnz	r2, 800f232 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800f20a:	6803      	ldr	r3, [r0, #0]
 800f20c:	4629      	mov	r1, r5
 800f20e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f212:	4798      	blx	r3
 800f214:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f218:	b368      	cbz	r0, 800f276 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f21a:	6803      	ldr	r3, [r0, #0]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	4798      	blx	r3
 800f220:	b348      	cbz	r0, 800f276 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f222:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f226:	4621      	mov	r1, r4
 800f228:	6803      	ldr	r3, [r0, #0]
 800f22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	4718      	bx	r3
 800f232:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800f236:	2b00      	cmp	r3, #0
 800f238:	dd08      	ble.n	800f24c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800f23a:	f005 f96b 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800f23e:	4621      	mov	r1, r4
 800f240:	3004      	adds	r0, #4
 800f242:	f005 f98c 	bl	801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f246:	2300      	movs	r3, #0
 800f248:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	4620      	mov	r0, r4
 800f250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f254:	4798      	blx	r3
 800f256:	2300      	movs	r3, #0
 800f258:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800f25c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800f260:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800f264:	f005 f956 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800f268:	4621      	mov	r1, r4
 800f26a:	3004      	adds	r0, #4
 800f26c:	f005 fa20 	bl	80146b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800f270:	2301      	movs	r3, #1
 800f272:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f27e:	4604      	mov	r4, r0
 800f280:	4299      	cmp	r1, r3
 800f282:	bfb8      	it	lt
 800f284:	4619      	movlt	r1, r3
 800f286:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f28a:	4299      	cmp	r1, r3
 800f28c:	bfa8      	it	ge
 800f28e:	4619      	movge	r1, r3
 800f290:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800f294:	428b      	cmp	r3, r1
 800f296:	d010      	beq.n	800f2ba <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f298:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800f29c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800f2a0:	b158      	cbz	r0, 800f2ba <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f2a2:	6803      	ldr	r3, [r0, #0]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	4798      	blx	r3
 800f2a8:	b138      	cbz	r0, 800f2ba <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f2aa:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	6803      	ldr	r3, [r0, #0]
 800f2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	4718      	bx	r3
 800f2ba:	bd10      	pop	{r4, pc}

0800f2bc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800f2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2be:	4604      	mov	r4, r0
 800f2c0:	460d      	mov	r5, r1
 800f2c2:	b1a9      	cbz	r1, 800f2f0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800f2c4:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800f2c8:	ab01      	add	r3, sp, #4
 800f2ca:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800f2ce:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800f2d2:	1b89      	subs	r1, r1, r6
 800f2d4:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800f2d8:	1a12      	subs	r2, r2, r0
 800f2da:	1a38      	subs	r0, r7, r0
 800f2dc:	f007 f894 	bl	8016408 <_ZN8touchgfx6muldivElllRl>
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	ab01      	add	r3, sp, #4
 800f2e4:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800f2e8:	4430      	add	r0, r6
 800f2ea:	f007 f88d 	bl	8016408 <_ZN8touchgfx6muldivElllRl>
 800f2ee:	b285      	uxth	r5, r0
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	b003      	add	sp, #12
 800f2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2f6 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800f2f6:	b570      	push	{r4, r5, r6, lr}
 800f2f8:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d035      	beq.n	800f36e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f302:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800f306:	2100      	movs	r1, #0
 800f308:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800f30c:	3001      	adds	r0, #1
 800f30e:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800f312:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800f316:	b280      	uxth	r0, r0
 800f318:	1ad2      	subs	r2, r2, r3
 800f31a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f31e:	b212      	sxth	r2, r2
 800f320:	47a8      	blx	r5
 800f322:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	4401      	add	r1, r0
 800f32a:	4620      	mov	r0, r4
 800f32c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f330:	4798      	blx	r3
 800f332:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800f336:	429a      	cmp	r2, r3
 800f338:	db19      	blt.n	800f36e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f33a:	2500      	movs	r5, #0
 800f33c:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f340:	f005 f8e8 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800f344:	4621      	mov	r1, r4
 800f346:	3004      	adds	r0, #4
 800f348:	f005 f909 	bl	801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f34c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f350:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f354:	b158      	cbz	r0, 800f36e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f356:	6803      	ldr	r3, [r0, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	4798      	blx	r3
 800f35c:	b138      	cbz	r0, 800f36e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f35e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f362:	4621      	mov	r1, r4
 800f364:	6803      	ldr	r3, [r0, #0]
 800f366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	4718      	bx	r3
 800f36e:	bd70      	pop	{r4, r5, r6, pc}

0800f370 <_ZN8touchgfx8DrawableC1Ev>:
 800f370:	4a0a      	ldr	r2, [pc, #40]	@ (800f39c <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800f372:	6002      	str	r2, [r0, #0]
 800f374:	2200      	movs	r2, #0
 800f376:	8082      	strh	r2, [r0, #4]
 800f378:	80c2      	strh	r2, [r0, #6]
 800f37a:	8102      	strh	r2, [r0, #8]
 800f37c:	8142      	strh	r2, [r0, #10]
 800f37e:	8182      	strh	r2, [r0, #12]
 800f380:	81c2      	strh	r2, [r0, #14]
 800f382:	8202      	strh	r2, [r0, #16]
 800f384:	8242      	strh	r2, [r0, #18]
 800f386:	61c2      	str	r2, [r0, #28]
 800f388:	8402      	strh	r2, [r0, #32]
 800f38a:	8442      	strh	r2, [r0, #34]	@ 0x22
 800f38c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800f390:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f394:	2201      	movs	r2, #1
 800f396:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800f39a:	4770      	bx	lr
 800f39c:	080289a4 	.word	0x080289a4

0800f3a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	6803      	ldr	r3, [r0, #0]
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	4615      	mov	r5, r2
 800f3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3aa:	4798      	blx	r3
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b8:	4718      	bx	r3

0800f3ba <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800f3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3be:	4604      	mov	r4, r0
 800f3c0:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800f3c4:	4698      	mov	r8, r3
 800f3c6:	460e      	mov	r6, r1
 800f3c8:	4615      	mov	r5, r2
 800f3ca:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800f3ce:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	463a      	mov	r2, r7
 800f3d6:	3058      	adds	r0, #88	@ 0x58
 800f3d8:	f7ff ffe2 	bl	800f3a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f3dc:	4446      	add	r6, r8
 800f3de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f3e2:	443d      	add	r5, r7
 800f3e4:	42b3      	cmp	r3, r6
 800f3e6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f3ea:	bfb8      	it	lt
 800f3ec:	8126      	strhlt	r6, [r4, #8]
 800f3ee:	42ab      	cmp	r3, r5
 800f3f0:	bfb8      	it	lt
 800f3f2:	8165      	strhlt	r5, [r4, #10]
 800f3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3f8 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	302c      	adds	r0, #44	@ 0x2c
 800f3fe:	f003 f938 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f402:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800f406:	4620      	mov	r0, r4
 800f408:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800f40c:	f7ff ffc8 	bl	800f3a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f410:	bd10      	pop	{r4, pc}
	...

0800f414 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800f414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f416:	4604      	mov	r4, r0
 800f418:	2500      	movs	r5, #0
 800f41a:	f7ff ffa9 	bl	800f370 <_ZN8touchgfx8DrawableC1Ev>
 800f41e:	4b24      	ldr	r3, [pc, #144]	@ (800f4b0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800f420:	4626      	mov	r6, r4
 800f422:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800f426:	2226      	movs	r2, #38	@ 0x26
 800f428:	4629      	mov	r1, r5
 800f42a:	62a5      	str	r5, [r4, #40]	@ 0x28
 800f42c:	f846 3b2c 	str.w	r3, [r6], #44
 800f430:	4630      	mov	r0, r6
 800f432:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f436:	f015 fbc7 	bl	8024bc8 <memset>
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7ff ff98 	bl	800f370 <_ZN8touchgfx8DrawableC1Ev>
 800f440:	a902      	add	r1, sp, #8
 800f442:	4b1c      	ldr	r3, [pc, #112]	@ (800f4b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800f444:	4630      	mov	r0, r6
 800f446:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800f44a:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800f44e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f450:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800f454:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f458:	f003 f90b 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f45c:	4638      	mov	r0, r7
 800f45e:	f7ff ff87 	bl	800f370 <_ZN8touchgfx8DrawableC1Ev>
 800f462:	4b15      	ldr	r3, [pc, #84]	@ (800f4b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800f464:	4629      	mov	r1, r5
 800f466:	4630      	mov	r0, r6
 800f468:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f46a:	2364      	movs	r3, #100	@ 0x64
 800f46c:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f470:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800f474:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800f478:	4b10      	ldr	r3, [pc, #64]	@ (800f4bc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800f47a:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800f47e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800f482:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800f486:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f48a:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800f48e:	f7f4 f803 	bl	8003498 <_ZN8touchgfx8Drawable4setXEs>
 800f492:	4629      	mov	r1, r5
 800f494:	4630      	mov	r0, r6
 800f496:	f7f4 f801 	bl	800349c <_ZN8touchgfx8Drawable4setYEs>
 800f49a:	4631      	mov	r1, r6
 800f49c:	4620      	mov	r0, r4
 800f49e:	f000 f819 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f000 f815 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	b003      	add	sp, #12
 800f4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b0:	08028444 	.word	0x08028444
 800f4b4:	080288d4 	.word	0x080288d4
 800f4b8:	08028518 	.word	0x08028518
 800f4bc:	08016a7d 	.word	0x08016a7d

0800f4c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f4c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	b12b      	cbz	r3, 800f4d2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f4c6:	b920      	cbnz	r0, 800f4d2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f4c8:	1a5a      	subs	r2, r3, r1
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	4250      	negs	r0, r2
 800f4ce:	4150      	adcs	r0, r2
 800f4d0:	e7f8      	b.n	800f4c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f4d2:	4770      	bx	lr

0800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	6148      	str	r0, [r1, #20]
 800f4d8:	618b      	str	r3, [r1, #24]
 800f4da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f4dc:	b913      	cbnz	r3, 800f4e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f4de:	6281      	str	r1, [r0, #40]	@ 0x28
 800f4e0:	4770      	bx	lr
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	699a      	ldr	r2, [r3, #24]
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	d1fb      	bne.n	800f4e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f4ea:	6199      	str	r1, [r3, #24]
 800f4ec:	4770      	bx	lr

0800f4ee <_ZN8touchgfx9Container9removeAllEv>:
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f4f2:	b123      	cbz	r3, 800f4fe <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f4f4:	6999      	ldr	r1, [r3, #24]
 800f4f6:	6281      	str	r1, [r0, #40]	@ 0x28
 800f4f8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f4fc:	e7f8      	b.n	800f4f0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f4fe:	4770      	bx	lr

0800f500 <_ZN8touchgfx9Container6unlinkEv>:
 800f500:	2300      	movs	r3, #0
 800f502:	6283      	str	r3, [r0, #40]	@ 0x28
 800f504:	4770      	bx	lr

0800f506 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f506:	2200      	movs	r2, #0
 800f508:	8002      	strh	r2, [r0, #0]
 800f50a:	8042      	strh	r2, [r0, #2]
 800f50c:	8082      	strh	r2, [r0, #4]
 800f50e:	80c2      	strh	r2, [r0, #6]
 800f510:	4770      	bx	lr

0800f512 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f512:	b570      	push	{r4, r5, r6, lr}
 800f514:	460d      	mov	r5, r1
 800f516:	4616      	mov	r6, r2
 800f518:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f51a:	b13c      	cbz	r4, 800f52c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	4620      	mov	r0, r4
 800f520:	4632      	mov	r2, r6
 800f522:	4629      	mov	r1, r5
 800f524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f526:	4798      	blx	r3
 800f528:	69a4      	ldr	r4, [r4, #24]
 800f52a:	e7f6      	b.n	800f51a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f52c:	bd70      	pop	{r4, r5, r6, pc}

0800f52e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f52e:	b538      	push	{r3, r4, r5, lr}
 800f530:	460d      	mov	r5, r1
 800f532:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f534:	b134      	cbz	r4, 800f544 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f536:	682b      	ldr	r3, [r5, #0]
 800f538:	4621      	mov	r1, r4
 800f53a:	4628      	mov	r0, r5
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	4798      	blx	r3
 800f540:	69a4      	ldr	r4, [r4, #24]
 800f542:	e7f7      	b.n	800f534 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f544:	bd38      	pop	{r3, r4, r5, pc}

0800f546 <_ZN8touchgfx9ContainerD1Ev>:
 800f546:	4770      	bx	lr

0800f548 <_ZN8touchgfx9ContainerD0Ev>:
 800f548:	b510      	push	{r4, lr}
 800f54a:	4604      	mov	r4, r0
 800f54c:	212c      	movs	r1, #44	@ 0x2c
 800f54e:	f014 fd26 	bl	8023f9e <_ZdlPvj>
 800f552:	4620      	mov	r0, r4
 800f554:	bd10      	pop	{r4, pc}

0800f556 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f556:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f558:	b19b      	cbz	r3, 800f582 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f55a:	428b      	cmp	r3, r1
 800f55c:	d109      	bne.n	800f572 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f55e:	699a      	ldr	r2, [r3, #24]
 800f560:	2100      	movs	r1, #0
 800f562:	6159      	str	r1, [r3, #20]
 800f564:	6282      	str	r2, [r0, #40]	@ 0x28
 800f566:	b902      	cbnz	r2, 800f56a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f568:	4770      	bx	lr
 800f56a:	6199      	str	r1, [r3, #24]
 800f56c:	4770      	bx	lr
 800f56e:	4613      	mov	r3, r2
 800f570:	b13a      	cbz	r2, 800f582 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f572:	699a      	ldr	r2, [r3, #24]
 800f574:	428a      	cmp	r2, r1
 800f576:	d1fa      	bne.n	800f56e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f578:	698a      	ldr	r2, [r1, #24]
 800f57a:	619a      	str	r2, [r3, #24]
 800f57c:	2300      	movs	r3, #0
 800f57e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f582:	4770      	bx	lr

0800f584 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f584:	b410      	push	{r4}
 800f586:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f588:	4604      	mov	r4, r0
 800f58a:	b92b      	cbnz	r3, 800f598 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f58c:	6803      	ldr	r3, [r0, #0]
 800f58e:	4611      	mov	r1, r2
 800f590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f596:	4718      	bx	r3
 800f598:	b941      	cbnz	r1, 800f5ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f59a:	6193      	str	r3, [r2, #24]
 800f59c:	6282      	str	r2, [r0, #40]	@ 0x28
 800f59e:	6154      	str	r4, [r2, #20]
 800f5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d0f9      	beq.n	800f5a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f5ac:	4299      	cmp	r1, r3
 800f5ae:	6998      	ldr	r0, [r3, #24]
 800f5b0:	d1f9      	bne.n	800f5a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f5b2:	6190      	str	r0, [r2, #24]
 800f5b4:	618a      	str	r2, [r1, #24]
 800f5b6:	e7f2      	b.n	800f59e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f5b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	461f      	mov	r7, r3
 800f5be:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	4616      	mov	r6, r2
 800f5c6:	b103      	cbz	r3, 800f5ca <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f5c8:	6038      	str	r0, [r7, #0]
 800f5ca:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f5cc:	b314      	cbz	r4, 800f614 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f5ce:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f5d2:	b1eb      	cbz	r3, 800f610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f5d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f5d8:	428d      	cmp	r5, r1
 800f5da:	db19      	blt.n	800f610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f5dc:	b289      	uxth	r1, r1
 800f5de:	8923      	ldrh	r3, [r4, #8]
 800f5e0:	440b      	add	r3, r1
 800f5e2:	b21b      	sxth	r3, r3
 800f5e4:	429d      	cmp	r5, r3
 800f5e6:	da13      	bge.n	800f610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f5e8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f5ec:	4296      	cmp	r6, r2
 800f5ee:	db0f      	blt.n	800f610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f5f0:	b292      	uxth	r2, r2
 800f5f2:	8963      	ldrh	r3, [r4, #10]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	b21b      	sxth	r3, r3
 800f5f8:	429e      	cmp	r6, r3
 800f5fa:	da09      	bge.n	800f610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	1ab2      	subs	r2, r6, r2
 800f600:	1a69      	subs	r1, r5, r1
 800f602:	4620      	mov	r0, r4
 800f604:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800f608:	b212      	sxth	r2, r2
 800f60a:	463b      	mov	r3, r7
 800f60c:	b209      	sxth	r1, r1
 800f60e:	47c0      	blx	r8
 800f610:	69a4      	ldr	r4, [r4, #24]
 800f612:	e7db      	b.n	800f5cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f618 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	4c6d      	ldr	r4, [pc, #436]	@ (800f7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f61e:	b0a1      	sub	sp, #132	@ 0x84
 800f620:	4606      	mov	r6, r0
 800f622:	6824      	ldr	r4, [r4, #0]
 800f624:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800f626:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800f62a:	2400      	movs	r4, #0
 800f62c:	9303      	str	r3, [sp, #12]
 800f62e:	802c      	strh	r4, [r5, #0]
 800f630:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800f632:	802c      	strh	r4, [r5, #0]
 800f634:	601c      	str	r4, [r3, #0]
 800f636:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f63a:	f7ff ffbd 	bl	800f5b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f63e:	f1b9 0f03 	cmp.w	r9, #3
 800f642:	f340 80c1 	ble.w	800f7c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f646:	4631      	mov	r1, r6
 800f648:	a80c      	add	r0, sp, #48	@ 0x30
 800f64a:	f006 fa01 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f64e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800f652:	9306      	str	r3, [sp, #24]
 800f654:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f658:	9307      	str	r3, [sp, #28]
 800f65a:	9b03      	ldr	r3, [sp, #12]
 800f65c:	f8d3 a000 	ldr.w	sl, [r3]
 800f660:	f1ba 0f00 	cmp.w	sl, #0
 800f664:	f000 80b3 	beq.w	800f7ce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f668:	4651      	mov	r1, sl
 800f66a:	a810      	add	r0, sp, #64	@ 0x40
 800f66c:	f006 f9f0 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f670:	2002      	movs	r0, #2
 800f672:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800f676:	9b01      	ldr	r3, [sp, #4]
 800f678:	9a06      	ldr	r2, [sp, #24]
 800f67a:	fb91 f1f0 	sdiv	r1, r1, r0
 800f67e:	189d      	adds	r5, r3, r2
 800f680:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4419      	add	r1, r3
 800f688:	9b02      	ldr	r3, [sp, #8]
 800f68a:	4413      	add	r3, r2
 800f68c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800f690:	1a6d      	subs	r5, r5, r1
 800f692:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800f696:	fb92 f2f0 	sdiv	r2, r2, r0
 800f69a:	440a      	add	r2, r1
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	435b      	muls	r3, r3
 800f6a0:	fb05 3505 	mla	r5, r5, r5, r3
 800f6a4:	4f4c      	ldr	r7, [pc, #304]	@ (800f7d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f6a6:	ac10      	add	r4, sp, #64	@ 0x40
 800f6a8:	f1b9 0f0c 	cmp.w	r9, #12
 800f6ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f6ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f6b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f6b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6b8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f6bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f6c0:	f04f 0303 	mov.w	r3, #3
 800f6c4:	bfd8      	it	le
 800f6c6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f6ca:	f04f 0400 	mov.w	r4, #0
 800f6ce:	f8cd 9000 	str.w	r9, [sp]
 800f6d2:	bfcc      	ite	gt
 800f6d4:	4698      	movgt	r8, r3
 800f6d6:	fb92 f8f3 	sdivle	r8, r2, r3
 800f6da:	1c63      	adds	r3, r4, #1
 800f6dc:	aa10      	add	r2, sp, #64	@ 0x40
 800f6de:	f004 0401 	and.w	r4, r4, #1
 800f6e2:	f04f 0b00 	mov.w	fp, #0
 800f6e6:	9308      	str	r3, [sp, #32]
 800f6e8:	9b00      	ldr	r3, [sp, #0]
 800f6ea:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f6ee:	fb93 f3f8 	sdiv	r3, r3, r8
 800f6f2:	3404      	adds	r4, #4
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	9304      	str	r3, [sp, #16]
 800f6f8:	9a04      	ldr	r2, [sp, #16]
 800f6fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f6fe:	fb13 f302 	smulbb	r3, r3, r2
 800f702:	9a01      	ldr	r2, [sp, #4]
 800f704:	b29b      	uxth	r3, r3
 800f706:	1899      	adds	r1, r3, r2
 800f708:	9305      	str	r3, [sp, #20]
 800f70a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f70e:	b209      	sxth	r1, r1
 800f710:	4299      	cmp	r1, r3
 800f712:	db4d      	blt.n	800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f714:	8932      	ldrh	r2, [r6, #8]
 800f716:	4413      	add	r3, r2
 800f718:	b21b      	sxth	r3, r3
 800f71a:	4299      	cmp	r1, r3
 800f71c:	da48      	bge.n	800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f71e:	9b04      	ldr	r3, [sp, #16]
 800f720:	6827      	ldr	r7, [r4, #0]
 800f722:	fb17 f703 	smulbb	r7, r7, r3
 800f726:	9b02      	ldr	r3, [sp, #8]
 800f728:	b2bf      	uxth	r7, r7
 800f72a:	18fa      	adds	r2, r7, r3
 800f72c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f730:	b212      	sxth	r2, r2
 800f732:	429a      	cmp	r2, r3
 800f734:	db3c      	blt.n	800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f736:	8970      	ldrh	r0, [r6, #10]
 800f738:	4403      	add	r3, r0
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	429a      	cmp	r2, r3
 800f73e:	da37      	bge.n	800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f740:	2300      	movs	r3, #0
 800f742:	4630      	mov	r0, r6
 800f744:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f746:	ab0b      	add	r3, sp, #44	@ 0x2c
 800f748:	f7ff ff36 	bl	800f5b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f74c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f74e:	b37a      	cbz	r2, 800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f750:	4552      	cmp	r2, sl
 800f752:	d02d      	beq.n	800f7b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f754:	4611      	mov	r1, r2
 800f756:	a80e      	add	r0, sp, #56	@ 0x38
 800f758:	9209      	str	r2, [sp, #36]	@ 0x24
 800f75a:	f006 f979 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f75e:	f04f 0e02 	mov.w	lr, #2
 800f762:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800f766:	9a06      	ldr	r2, [sp, #24]
 800f768:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800f76c:	9b01      	ldr	r3, [sp, #4]
 800f76e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800f772:	4413      	add	r3, r2
 800f774:	9a07      	ldr	r2, [sp, #28]
 800f776:	fb91 f1fe 	sdiv	r1, r1, lr
 800f77a:	fb9c fcfe 	sdiv	ip, ip, lr
 800f77e:	4401      	add	r1, r0
 800f780:	1a58      	subs	r0, r3, r1
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800f788:	4413      	add	r3, r2
 800f78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f78c:	448c      	add	ip, r1
 800f78e:	eba3 030c 	sub.w	r3, r3, ip
 800f792:	435b      	muls	r3, r3
 800f794:	fb00 3300 	mla	r3, r0, r0, r3
 800f798:	42ab      	cmp	r3, r5
 800f79a:	d208      	bcs.n	800f7ae <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f79e:	461d      	mov	r5, r3
 800f7a0:	9803      	ldr	r0, [sp, #12]
 800f7a2:	6001      	str	r1, [r0, #0]
 800f7a4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f7a6:	9805      	ldr	r0, [sp, #20]
 800f7a8:	8008      	strh	r0, [r1, #0]
 800f7aa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800f7ac:	800f      	strh	r7, [r1, #0]
 800f7ae:	4692      	mov	sl, r2
 800f7b0:	f10b 0b01 	add.w	fp, fp, #1
 800f7b4:	3408      	adds	r4, #8
 800f7b6:	f1bb 0f04 	cmp.w	fp, #4
 800f7ba:	d19d      	bne.n	800f6f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f7bc:	9b00      	ldr	r3, [sp, #0]
 800f7be:	9c08      	ldr	r4, [sp, #32]
 800f7c0:	444b      	add	r3, r9
 800f7c2:	4544      	cmp	r4, r8
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	d188      	bne.n	800f6da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f7c8:	b021      	add	sp, #132	@ 0x84
 800f7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ce:	f04f 35ff 	mov.w	r5, #4294967295
 800f7d2:	e767      	b.n	800f6a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f7d4:	240253b4 	.word	0x240253b4
 800f7d8:	08025708 	.word	0x08025708

0800f7dc <_ZN8touchgfx4RectaNERKS0_>:
 800f7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f7e4:	888c      	ldrh	r4, [r1, #4]
 800f7e6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f7ea:	443c      	add	r4, r7
 800f7ec:	b2a4      	uxth	r4, r4
 800f7ee:	fa0f f884 	sxth.w	r8, r4
 800f7f2:	45c1      	cmp	r9, r8
 800f7f4:	da2f      	bge.n	800f856 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f7f6:	8882      	ldrh	r2, [r0, #4]
 800f7f8:	444a      	add	r2, r9
 800f7fa:	b292      	uxth	r2, r2
 800f7fc:	fa0f fe82 	sxth.w	lr, r2
 800f800:	4577      	cmp	r7, lr
 800f802:	da28      	bge.n	800f856 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f804:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f808:	88cb      	ldrh	r3, [r1, #6]
 800f80a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f80e:	442b      	add	r3, r5
 800f810:	b21b      	sxth	r3, r3
 800f812:	429e      	cmp	r6, r3
 800f814:	da1f      	bge.n	800f856 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f816:	88c3      	ldrh	r3, [r0, #6]
 800f818:	4433      	add	r3, r6
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	fa0f fc83 	sxth.w	ip, r3
 800f820:	4565      	cmp	r5, ip
 800f822:	da18      	bge.n	800f856 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f824:	454f      	cmp	r7, r9
 800f826:	bfb8      	it	lt
 800f828:	464f      	movlt	r7, r9
 800f82a:	42b5      	cmp	r5, r6
 800f82c:	bfb8      	it	lt
 800f82e:	4635      	movlt	r5, r6
 800f830:	45f0      	cmp	r8, lr
 800f832:	bfd8      	it	le
 800f834:	4622      	movle	r2, r4
 800f836:	1bd2      	subs	r2, r2, r7
 800f838:	8082      	strh	r2, [r0, #4]
 800f83a:	884a      	ldrh	r2, [r1, #2]
 800f83c:	88c9      	ldrh	r1, [r1, #6]
 800f83e:	8007      	strh	r7, [r0, #0]
 800f840:	440a      	add	r2, r1
 800f842:	8045      	strh	r5, [r0, #2]
 800f844:	b292      	uxth	r2, r2
 800f846:	b211      	sxth	r1, r2
 800f848:	458c      	cmp	ip, r1
 800f84a:	bfa8      	it	ge
 800f84c:	4613      	movge	r3, r2
 800f84e:	1b5b      	subs	r3, r3, r5
 800f850:	80c3      	strh	r3, [r0, #6]
 800f852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f856:	2300      	movs	r3, #0
 800f858:	8003      	strh	r3, [r0, #0]
 800f85a:	8043      	strh	r3, [r0, #2]
 800f85c:	8083      	strh	r3, [r0, #4]
 800f85e:	80c3      	strh	r3, [r0, #6]
 800f860:	e7f7      	b.n	800f852 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f862 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f862:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	dd06      	ble.n	800f878 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f86a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f86e:	2800      	cmp	r0, #0
 800f870:	bfcc      	ite	gt
 800f872:	2000      	movgt	r0, #0
 800f874:	2001      	movle	r0, #1
 800f876:	4770      	bx	lr
 800f878:	2001      	movs	r0, #1
 800f87a:	4770      	bx	lr

0800f87c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f880:	2300      	movs	r3, #0
 800f882:	4604      	mov	r4, r0
 800f884:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f886:	8003      	strh	r3, [r0, #0]
 800f888:	8043      	strh	r3, [r0, #2]
 800f88a:	8083      	strh	r3, [r0, #4]
 800f88c:	80c3      	strh	r3, [r0, #6]
 800f88e:	2d00      	cmp	r5, #0
 800f890:	d040      	beq.n	800f914 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f892:	1d28      	adds	r0, r5, #4
 800f894:	f7ff ffe5 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f898:	b988      	cbnz	r0, 800f8be <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f89a:	4620      	mov	r0, r4
 800f89c:	f7ff ffe1 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f8a0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f8a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f8a8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f8ac:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f8b0:	b138      	cbz	r0, 800f8c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f8b2:	8022      	strh	r2, [r4, #0]
 800f8b4:	8063      	strh	r3, [r4, #2]
 800f8b6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f8ba:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f8be:	69ad      	ldr	r5, [r5, #24]
 800f8c0:	e7e5      	b.n	800f88e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f8c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f8c6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f8ca:	4290      	cmp	r0, r2
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f8d2:	460e      	mov	r6, r1
 800f8d4:	bfa8      	it	ge
 800f8d6:	4617      	movge	r7, r2
 800f8d8:	4299      	cmp	r1, r3
 800f8da:	4472      	add	r2, lr
 800f8dc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f8e0:	bfa8      	it	ge
 800f8e2:	461e      	movge	r6, r3
 800f8e4:	4440      	add	r0, r8
 800f8e6:	4471      	add	r1, lr
 800f8e8:	4463      	add	r3, ip
 800f8ea:	b200      	sxth	r0, r0
 800f8ec:	8027      	strh	r7, [r4, #0]
 800f8ee:	b212      	sxth	r2, r2
 800f8f0:	8066      	strh	r6, [r4, #2]
 800f8f2:	b209      	sxth	r1, r1
 800f8f4:	b21b      	sxth	r3, r3
 800f8f6:	4290      	cmp	r0, r2
 800f8f8:	bfac      	ite	ge
 800f8fa:	ebc7 0200 	rsbge	r2, r7, r0
 800f8fe:	ebc7 0202 	rsblt	r2, r7, r2
 800f902:	4299      	cmp	r1, r3
 800f904:	bfac      	ite	ge
 800f906:	ebc6 0301 	rsbge	r3, r6, r1
 800f90a:	ebc6 0303 	rsblt	r3, r6, r3
 800f90e:	80a2      	strh	r2, [r4, #4]
 800f910:	80e3      	strh	r3, [r4, #6]
 800f912:	e7d4      	b.n	800f8be <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f914:	4620      	mov	r0, r4
 800f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f91a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f91a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f91e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f922:	b383      	cbz	r3, 800f986 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f924:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f926:	b374      	cbz	r4, 800f986 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f928:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f92c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f930:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f934:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f938:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f93c:	b303      	cbz	r3, 800f980 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f93e:	4668      	mov	r0, sp
 800f940:	1d21      	adds	r1, r4, #4
 800f942:	f8ad 5000 	strh.w	r5, [sp]
 800f946:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f94a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f94e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f952:	f7ff ff43 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 800f956:	4668      	mov	r0, sp
 800f958:	f7ff ff83 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f95c:	b980      	cbnz	r0, 800f980 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f95e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f962:	4669      	mov	r1, sp
 800f964:	88a2      	ldrh	r2, [r4, #4]
 800f966:	4620      	mov	r0, r4
 800f968:	1a9b      	subs	r3, r3, r2
 800f96a:	88e2      	ldrh	r2, [r4, #6]
 800f96c:	f8ad 3000 	strh.w	r3, [sp]
 800f970:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f974:	1a9b      	subs	r3, r3, r2
 800f976:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	4798      	blx	r3
 800f980:	69a4      	ldr	r4, [r4, #24]
 800f982:	2c00      	cmp	r4, #0
 800f984:	d1d8      	bne.n	800f938 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f986:	b002      	add	sp, #8
 800f988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f98c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f98c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f98e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f992:	460d      	mov	r5, r1
 800f994:	4616      	mov	r6, r2
 800f996:	b323      	cbz	r3, 800f9e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f998:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f99a:	b314      	cbz	r4, 800f9e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f99c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f9a0:	b1eb      	cbz	r3, 800f9de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f9a2:	6828      	ldr	r0, [r5, #0]
 800f9a4:	466b      	mov	r3, sp
 800f9a6:	6869      	ldr	r1, [r5, #4]
 800f9a8:	c303      	stmia	r3!, {r0, r1}
 800f9aa:	4668      	mov	r0, sp
 800f9ac:	1d21      	adds	r1, r4, #4
 800f9ae:	f7ff ff15 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 800f9b2:	4668      	mov	r0, sp
 800f9b4:	f7ff ff55 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f9b8:	b988      	cbnz	r0, 800f9de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f9ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9be:	4669      	mov	r1, sp
 800f9c0:	88a2      	ldrh	r2, [r4, #4]
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	1a9b      	subs	r3, r3, r2
 800f9c6:	88e2      	ldrh	r2, [r4, #6]
 800f9c8:	f8ad 3000 	strh.w	r3, [sp]
 800f9cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f9d0:	1a9b      	subs	r3, r3, r2
 800f9d2:	4632      	mov	r2, r6
 800f9d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9dc:	4798      	blx	r3
 800f9de:	69a4      	ldr	r4, [r4, #24]
 800f9e0:	e7db      	b.n	800f99a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f9e2:	b002      	add	sp, #8
 800f9e4:	bd70      	pop	{r4, r5, r6, pc}

0800f9e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f9e6:	6803      	ldr	r3, [r0, #0]
 800f9e8:	b513      	push	{r0, r1, r4, lr}
 800f9ea:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e9cd 3300 	strd	r3, r3, [sp]
 800f9f4:	466b      	mov	r3, sp
 800f9f6:	47a0      	blx	r4
 800f9f8:	b002      	add	sp, #8
 800f9fa:	bd10      	pop	{r4, pc}

0800f9fc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800fa02:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800fa06:	4770      	bx	lr

0800fa08 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800fa08:	2301      	movs	r3, #1
 800fa0a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800fa0e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800fa12:	4770      	bx	lr

0800fa14 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800fa14:	6843      	ldr	r3, [r0, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	725a      	strb	r2, [r3, #9]
 800fa1a:	6840      	ldr	r0, [r0, #4]
 800fa1c:	6803      	ldr	r3, [r0, #0]
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	4718      	bx	r3

0800fa22 <_ZN8touchgfx3HAL8flushDMAEv>:
 800fa22:	6840      	ldr	r0, [r0, #4]
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	4718      	bx	r3

0800fa2a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800fa2a:	b530      	push	{r4, r5, lr}
 800fa2c:	b08b      	sub	sp, #44	@ 0x2c
 800fa2e:	6804      	ldr	r4, [r0, #0]
 800fa30:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800fa34:	9509      	str	r5, [sp, #36]	@ 0x24
 800fa36:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800fa3a:	9508      	str	r5, [sp, #32]
 800fa3c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800fa40:	9507      	str	r5, [sp, #28]
 800fa42:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800fa46:	9506      	str	r5, [sp, #24]
 800fa48:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800fa4c:	9505      	str	r5, [sp, #20]
 800fa4e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800fa52:	9504      	str	r5, [sp, #16]
 800fa54:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800fa58:	9503      	str	r5, [sp, #12]
 800fa5a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800fa5e:	9502      	str	r5, [sp, #8]
 800fa60:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800fa64:	e9cd 3500 	strd	r3, r5, [sp]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	47a0      	blx	r4
 800fa70:	b00b      	add	sp, #44	@ 0x2c
 800fa72:	bd30      	pop	{r4, r5, pc}

0800fa74 <_ZN8touchgfx3HAL10beginFrameEv>:
 800fa74:	4b04      	ldr	r3, [pc, #16]	@ (800fa88 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	b123      	cbz	r3, 800fa84 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800fa7a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800fa7e:	f080 0001 	eor.w	r0, r0, #1
 800fa82:	4770      	bx	lr
 800fa84:	2001      	movs	r0, #1
 800fa86:	4770      	bx	lr
 800fa88:	240253b2 	.word	0x240253b2

0800fa8c <_ZN8touchgfx3HAL8endFrameEv>:
 800fa8c:	b510      	push	{r4, lr}
 800fa8e:	4604      	mov	r4, r0
 800fa90:	6840      	ldr	r0, [r0, #4]
 800fa92:	6803      	ldr	r3, [r0, #0]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	4798      	blx	r3
 800fa98:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800fa9c:	b113      	cbz	r3, 800faa4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800faa4:	bd10      	pop	{r4, pc}

0800faa6 <_ZN8touchgfx3HAL10initializeEv>:
 800faa6:	b510      	push	{r4, lr}
 800faa8:	4604      	mov	r4, r0
 800faaa:	f7f3 f8a9 	bl	8002c00 <_ZN8touchgfx10OSWrappers10initializeEv>
 800faae:	f7f2 f8ef 	bl	8001c90 <_ZN8touchgfx4GPIO4initEv>
 800fab2:	6860      	ldr	r0, [r4, #4]
 800fab4:	6803      	ldr	r3, [r0, #0]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	4798      	blx	r3
 800faba:	68e0      	ldr	r0, [r4, #12]
 800fabc:	6803      	ldr	r3, [r0, #0]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	4798      	blx	r3
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	4620      	mov	r0, r4
 800fac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800facc:	4718      	bx	r3
	...

0800fad0 <_ZN8touchgfx3HAL4tickEv>:
 800fad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fad2:	6803      	ldr	r3, [r0, #0]
 800fad4:	4604      	mov	r4, r0
 800fad6:	4d62      	ldr	r5, [pc, #392]	@ (800fc60 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800fad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fadc:	4798      	blx	r3
 800fade:	2800      	cmp	r0, #0
 800fae0:	f000 809e 	beq.w	800fc20 <_ZN8touchgfx3HAL4tickEv+0x150>
 800fae4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d002      	beq.n	800faf2 <_ZN8touchgfx3HAL4tickEv+0x22>
 800faec:	2001      	movs	r0, #1
 800faee:	f7f2 f835 	bl	8001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800faf2:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800faf6:	2600      	movs	r6, #0
 800faf8:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800fafc:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800fb00:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800fb04:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800fb08:	b133      	cbz	r3, 800fb18 <_ZN8touchgfx3HAL4tickEv+0x48>
 800fb0a:	6823      	ldr	r3, [r4, #0]
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800fb12:	4798      	blx	r3
 800fb14:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800fb18:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800fb1c:	2601      	movs	r6, #1
 800fb1e:	6862      	ldr	r2, [r4, #4]
 800fb20:	f083 0301 	eor.w	r3, r3, #1
 800fb24:	702e      	strb	r6, [r5, #0]
 800fb26:	7253      	strb	r3, [r2, #9]
 800fb28:	f004 fcf4 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800fb2c:	6803      	ldr	r3, [r0, #0]
 800fb2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb30:	4798      	blx	r3
 800fb32:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800fb36:	b90b      	cbnz	r3, 800fb3c <_ZN8touchgfx3HAL4tickEv+0x6c>
 800fb38:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800fb3c:	f004 fcea 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800fb40:	6803      	ldr	r3, [r0, #0]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	4798      	blx	r3
 800fb46:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800fb48:	6803      	ldr	r3, [r0, #0]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	4798      	blx	r3
 800fb4e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800fb52:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800fb56:	3b01      	subs	r3, #1
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800fb5e:	b10a      	cbz	r2, 800fb64 <_ZN8touchgfx3HAL4tickEv+0x94>
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1eb      	bne.n	800fb3c <_ZN8touchgfx3HAL4tickEv+0x6c>
 800fb64:	4a3f      	ldr	r2, [pc, #252]	@ (800fc64 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800fb66:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800fb6a:	7813      	ldrb	r3, [r2, #0]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	b25b      	sxtb	r3, r3
 800fb70:	4299      	cmp	r1, r3
 800fb72:	7013      	strb	r3, [r2, #0]
 800fb74:	dc10      	bgt.n	800fb98 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800fb76:	2300      	movs	r3, #0
 800fb78:	68e0      	ldr	r0, [r4, #12]
 800fb7a:	a902      	add	r1, sp, #8
 800fb7c:	7013      	strb	r3, [r2, #0]
 800fb7e:	aa03      	add	r2, sp, #12
 800fb80:	6803      	ldr	r3, [r0, #0]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	4798      	blx	r3
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d059      	beq.n	800fc40 <_ZN8touchgfx3HAL4tickEv+0x170>
 800fb8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fb90:	4620      	mov	r0, r4
 800fb92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800fb96:	4798      	blx	r3
 800fb98:	2300      	movs	r3, #0
 800fb9a:	6960      	ldr	r0, [r4, #20]
 800fb9c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fba0:	b158      	cbz	r0, 800fbba <_ZN8touchgfx3HAL4tickEv+0xea>
 800fba2:	6803      	ldr	r3, [r0, #0]
 800fba4:	f10d 0107 	add.w	r1, sp, #7
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	4798      	blx	r3
 800fbac:	b128      	cbz	r0, 800fbba <_ZN8touchgfx3HAL4tickEv+0xea>
 800fbae:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800fbb0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fbb4:	6803      	ldr	r3, [r0, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	4798      	blx	r3
 800fbba:	f104 001c 	add.w	r0, r4, #28
 800fbbe:	f012 f81f 	bl	8021c00 <_ZN8touchgfx8Gestures4tickEv>
 800fbc2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800fbc6:	b30b      	cbz	r3, 800fc0c <_ZN8touchgfx3HAL4tickEv+0x13c>
 800fbc8:	6920      	ldr	r0, [r4, #16]
 800fbca:	6803      	ldr	r3, [r0, #0]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	4798      	blx	r3
 800fbd0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800fbd2:	4606      	mov	r6, r0
 800fbd4:	b903      	cbnz	r3, 800fbd8 <_ZN8touchgfx3HAL4tickEv+0x108>
 800fbd6:	6760      	str	r0, [r4, #116]	@ 0x74
 800fbd8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800fbda:	4a23      	ldr	r2, [pc, #140]	@ (800fc68 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800fbdc:	1af3      	subs	r3, r6, r3
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d914      	bls.n	800fc0c <_ZN8touchgfx3HAL4tickEv+0x13c>
 800fbe2:	6920      	ldr	r0, [r4, #16]
 800fbe4:	6803      	ldr	r3, [r0, #0]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	4798      	blx	r3
 800fbea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800fbec:	2264      	movs	r2, #100	@ 0x64
 800fbee:	1af3      	subs	r3, r6, r3
 800fbf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbf4:	fbb0 f0f3 	udiv	r0, r0, r3
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	dc26      	bgt.n	800fc4a <_ZN8touchgfx3HAL4tickEv+0x17a>
 800fbfc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800fc00:	6920      	ldr	r0, [r4, #16]
 800fc02:	2100      	movs	r1, #0
 800fc04:	6803      	ldr	r3, [r0, #0]
 800fc06:	69db      	ldr	r3, [r3, #28]
 800fc08:	4798      	blx	r3
 800fc0a:	6766      	str	r6, [r4, #116]	@ 0x74
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc14:	4798      	blx	r3
 800fc16:	f004 fc7d 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 800fc1a:	6803      	ldr	r3, [r0, #0]
 800fc1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc1e:	4798      	blx	r3
 800fc20:	6823      	ldr	r3, [r4, #0]
 800fc22:	4620      	mov	r0, r4
 800fc24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fc28:	4798      	blx	r3
 800fc2a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d002      	beq.n	800fc38 <_ZN8touchgfx3HAL4tickEv+0x168>
 800fc32:	2001      	movs	r0, #1
 800fc34:	f7f1 ffc2 	bl	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	702b      	strb	r3, [r5, #0]
 800fc3c:	b004      	add	sp, #16
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
 800fc40:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800fc44:	4620      	mov	r0, r4
 800fc46:	4798      	blx	r3
 800fc48:	e7a6      	b.n	800fb98 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800fc4a:	2863      	cmp	r0, #99	@ 0x63
 800fc4c:	bfcb      	itete	gt
 800fc4e:	2300      	movgt	r3, #0
 800fc50:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800fc54:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800fc58:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800fc5c:	e7d0      	b.n	800fc00 <_ZN8touchgfx3HAL4tickEv+0x130>
 800fc5e:	bf00      	nop
 800fc60:	240253b8 	.word	0x240253b8
 800fc64:	240253b9 	.word	0x240253b9
 800fc68:	05f5e100 	.word	0x05f5e100

0800fc6c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	4604      	mov	r4, r0
 800fc70:	f7f2 fff6 	bl	8002c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800fc74:	2200      	movs	r2, #0
 800fc76:	6863      	ldr	r3, [r4, #4]
 800fc78:	729a      	strb	r2, [r3, #10]
 800fc7a:	bd10      	pop	{r4, pc}

0800fc7c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800fc7c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800fc7e:	301c      	adds	r0, #28
 800fc80:	f011 bfbc 	b.w	8021bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800fc84 <_ZN8touchgfx3HAL5touchEll>:
 800fc84:	b530      	push	{r4, r5, lr}
 800fc86:	b087      	sub	sp, #28
 800fc88:	4604      	mov	r4, r0
 800fc8a:	a804      	add	r0, sp, #16
 800fc8c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800fc90:	f004 fa0c 	bl	80140ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800fc94:	9b04      	ldr	r3, [sp, #16]
 800fc96:	a906      	add	r1, sp, #24
 800fc98:	a803      	add	r0, sp, #12
 800fc9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fc9e:	9b05      	ldr	r3, [sp, #20]
 800fca0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800fca4:	f004 fa54 	bl	8014150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800fca8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800fcac:	f104 001c 	add.w	r0, r4, #28
 800fcb0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800fcb4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fcb8:	b189      	cbz	r1, 800fcde <_ZN8touchgfx3HAL5touchEll+0x5a>
 800fcba:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800fcc6:	462a      	mov	r2, r5
 800fcc8:	f011 ffa8 	bl	8021c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800fccc:	b128      	cbz	r0, 800fcda <_ZN8touchgfx3HAL5touchEll+0x56>
 800fcce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fcd2:	6623      	str	r3, [r4, #96]	@ 0x60
 800fcd4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fcd8:	6663      	str	r3, [r4, #100]	@ 0x64
 800fcda:	b007      	add	sp, #28
 800fcdc:	bd30      	pop	{r4, r5, pc}
 800fcde:	f011 ffdd 	bl	8021c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fce2:	2301      	movs	r3, #1
 800fce4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800fce8:	e7f1      	b.n	800fcce <_ZN8touchgfx3HAL5touchEll+0x4a>

0800fcea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800fcea:	b510      	push	{r4, lr}
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d046      	beq.n	800fd7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fcf0:	ea81 0002 	eor.w	r0, r1, r2
 800fcf4:	07c4      	lsls	r4, r0, #31
 800fcf6:	d508      	bpl.n	800fd0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800fcf8:	440b      	add	r3, r1
 800fcfa:	3a01      	subs	r2, #1
 800fcfc:	428b      	cmp	r3, r1
 800fcfe:	d93e      	bls.n	800fd7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fd00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fd04:	f801 0b01 	strb.w	r0, [r1], #1
 800fd08:	e7f8      	b.n	800fcfc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800fd0a:	07d0      	lsls	r0, r2, #31
 800fd0c:	bf42      	ittt	mi
 800fd0e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800fd12:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800fd16:	f801 0b01 	strbmi.w	r0, [r1], #1
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d911      	bls.n	800fd42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fd1e:	ea81 0402 	eor.w	r4, r1, r2
 800fd22:	4610      	mov	r0, r2
 800fd24:	07a4      	lsls	r4, r4, #30
 800fd26:	d022      	beq.n	800fd6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800fd28:	f023 0401 	bic.w	r4, r3, #1
 800fd2c:	440c      	add	r4, r1
 800fd2e:	428c      	cmp	r4, r1
 800fd30:	4602      	mov	r2, r0
 800fd32:	d904      	bls.n	800fd3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800fd34:	8812      	ldrh	r2, [r2, #0]
 800fd36:	3002      	adds	r0, #2
 800fd38:	f821 2b02 	strh.w	r2, [r1], #2
 800fd3c:	e7f7      	b.n	800fd2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	f023 0003 	bic.w	r0, r3, #3
 800fd46:	4408      	add	r0, r1
 800fd48:	4288      	cmp	r0, r1
 800fd4a:	4614      	mov	r4, r2
 800fd4c:	d904      	bls.n	800fd58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800fd4e:	6824      	ldr	r4, [r4, #0]
 800fd50:	3204      	adds	r2, #4
 800fd52:	f841 4b04 	str.w	r4, [r1], #4
 800fd56:	e7f7      	b.n	800fd48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800fd58:	f003 0303 	and.w	r3, r3, #3
 800fd5c:	3a01      	subs	r2, #1
 800fd5e:	440b      	add	r3, r1
 800fd60:	428b      	cmp	r3, r1
 800fd62:	d90c      	bls.n	800fd7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fd64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fd68:	f801 0b01 	strb.w	r0, [r1], #1
 800fd6c:	e7f8      	b.n	800fd60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800fd6e:	0790      	lsls	r0, r2, #30
 800fd70:	d0e7      	beq.n	800fd42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fd72:	f832 0b02 	ldrh.w	r0, [r2], #2
 800fd76:	3b02      	subs	r3, #2
 800fd78:	f821 0b02 	strh.w	r0, [r1], #2
 800fd7c:	e7e1      	b.n	800fd42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fd7e:	2001      	movs	r0, #1
 800fd80:	bd10      	pop	{r4, pc}

0800fd82 <_ZN8touchgfx3HAL7noTouchEv>:
 800fd82:	b510      	push	{r4, lr}
 800fd84:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800fd88:	4604      	mov	r4, r0
 800fd8a:	b153      	cbz	r3, 800fda2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800fd8c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800fd90:	2101      	movs	r1, #1
 800fd92:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800fd96:	301c      	adds	r0, #28
 800fd98:	f011 ff80 	bl	8021c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800fda2:	bd10      	pop	{r4, pc}

0800fda4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800fda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fda8:	b085      	sub	sp, #20
 800fdaa:	4604      	mov	r4, r0
 800fdac:	2000      	movs	r0, #0
 800fdae:	4699      	mov	r9, r3
 800fdb0:	ad04      	add	r5, sp, #16
 800fdb2:	460f      	mov	r7, r1
 800fdb4:	4690      	mov	r8, r2
 800fdb6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800fdba:	69a0      	ldr	r0, [r4, #24]
 800fdbc:	6806      	ldr	r6, [r0, #0]
 800fdbe:	9501      	str	r5, [sp, #4]
 800fdc0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800fdc4:	9500      	str	r5, [sp, #0]
 800fdc6:	6835      	ldr	r5, [r6, #0]
 800fdc8:	47a8      	blx	r5
 800fdca:	4d10      	ldr	r5, [pc, #64]	@ (800fe0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800fdcc:	4606      	mov	r6, r0
 800fdce:	f8a5 9000 	strh.w	r9, [r5]
 800fdd2:	f7f4 f847 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 800fdd6:	6803      	ldr	r3, [r0, #0]
 800fdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdda:	4798      	blx	r3
 800fddc:	b128      	cbz	r0, 800fdea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800fdde:	2801      	cmp	r0, #1
 800fde0:	d00b      	beq.n	800fdfa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800fde2:	4630      	mov	r0, r6
 800fde4:	b005      	add	sp, #20
 800fde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdea:	882b      	ldrh	r3, [r5, #0]
 800fdec:	fb08 7203 	mla	r2, r8, r3, r7
 800fdf0:	9b03      	ldr	r3, [sp, #12]
 800fdf2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800fdf6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800fdf8:	e7f3      	b.n	800fde2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fdfa:	882a      	ldrh	r2, [r5, #0]
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	fb08 7202 	mla	r2, r8, r2, r7
 800fe02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fe06:	1a9a      	subs	r2, r3, r2
 800fe08:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800fe0a:	e7ea      	b.n	800fde2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fe0c:	240253ae 	.word	0x240253ae

0800fe10 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	4b15      	ldr	r3, [pc, #84]	@ (800fe68 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800fe14:	460f      	mov	r7, r1
 800fe16:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800fe20:	fb93 f4f4 	sdiv	r4, r3, r4
 800fe24:	f7f4 f81e 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 800fe28:	6803      	ldr	r3, [r0, #0]
 800fe2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe2c:	4798      	blx	r3
 800fe2e:	2801      	cmp	r0, #1
 800fe30:	d00b      	beq.n	800fe4a <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800fe32:	d303      	bcc.n	800fe3c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800fe34:	2802      	cmp	r0, #2
 800fe36:	d010      	beq.n	800fe5a <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800fe38:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800fe3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe6c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fe3e:	437c      	muls	r4, r7
 800fe40:	8819      	ldrh	r1, [r3, #0]
 800fe42:	434c      	muls	r4, r1
 800fe44:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800fe48:	e7f6      	b.n	800fe38 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fe4a:	4b08      	ldr	r3, [pc, #32]	@ (800fe6c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fe4c:	437c      	muls	r4, r7
 800fe4e:	8819      	ldrh	r1, [r3, #0]
 800fe50:	434c      	muls	r4, r1
 800fe52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fe56:	1b2d      	subs	r5, r5, r4
 800fe58:	e7ee      	b.n	800fe38 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fe5a:	4b04      	ldr	r3, [pc, #16]	@ (800fe6c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fe5c:	437c      	muls	r4, r7
 800fe5e:	8819      	ldrh	r1, [r3, #0]
 800fe60:	434c      	muls	r4, r1
 800fe62:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800fe66:	e7e7      	b.n	800fe38 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fe68:	240253b0 	.word	0x240253b0
 800fe6c:	240253ae 	.word	0x240253ae

0800fe70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	b08b      	sub	sp, #44	@ 0x2c
 800fe74:	4617      	mov	r7, r2
 800fe76:	4604      	mov	r4, r0
 800fe78:	460e      	mov	r6, r1
 800fe7a:	461d      	mov	r5, r3
 800fe7c:	f7f3 fff2 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 800fe80:	6803      	ldr	r3, [r0, #0]
 800fe82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe84:	4798      	blx	r3
 800fe86:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800fe8a:	9007      	str	r0, [sp, #28]
 800fe8c:	4631      	mov	r1, r6
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fe94:	4b0c      	ldr	r3, [pc, #48]	@ (800fec8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800fe96:	4620      	mov	r0, r4
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	9306      	str	r3, [sp, #24]
 800fe9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800fea0:	9305      	str	r3, [sp, #20]
 800fea2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800fea6:	9304      	str	r3, [sp, #16]
 800fea8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800feac:	9303      	str	r3, [sp, #12]
 800feae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800feb2:	9302      	str	r3, [sp, #8]
 800feb4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800feb8:	e9cd 5300 	strd	r5, r3, [sp]
 800febc:	463b      	mov	r3, r7
 800febe:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800fec0:	2200      	movs	r2, #0
 800fec2:	47a8      	blx	r5
 800fec4:	b00b      	add	sp, #44	@ 0x2c
 800fec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec8:	240253ae 	.word	0x240253ae

0800fecc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800fecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fed0:	4698      	mov	r8, r3
 800fed2:	6803      	ldr	r3, [r0, #0]
 800fed4:	b08b      	sub	sp, #44	@ 0x2c
 800fed6:	4617      	mov	r7, r2
 800fed8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800feda:	460e      	mov	r6, r1
 800fedc:	4b13      	ldr	r3, [pc, #76]	@ (800ff2c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800fede:	4604      	mov	r4, r0
 800fee0:	f8b3 9000 	ldrh.w	r9, [r3]
 800fee4:	f7f3 ffbe 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 800fee8:	6803      	ldr	r3, [r0, #0]
 800feea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feec:	4798      	blx	r3
 800feee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800fef2:	2200      	movs	r2, #0
 800fef4:	4631      	mov	r1, r6
 800fef6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fefa:	2302      	movs	r3, #2
 800fefc:	4620      	mov	r0, r4
 800fefe:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800ff02:	2301      	movs	r3, #1
 800ff04:	9305      	str	r3, [sp, #20]
 800ff06:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ff10:	9303      	str	r3, [sp, #12]
 800ff12:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ff16:	9302      	str	r3, [sp, #8]
 800ff18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ff1c:	e9cd 8300 	strd	r8, r3, [sp]
 800ff20:	463b      	mov	r3, r7
 800ff22:	47a8      	blx	r5
 800ff24:	b00b      	add	sp, #44	@ 0x2c
 800ff26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff2a:	bf00      	nop
 800ff2c:	240253ae 	.word	0x240253ae

0800ff30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800ff30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff34:	4698      	mov	r8, r3
 800ff36:	6803      	ldr	r3, [r0, #0]
 800ff38:	b087      	sub	sp, #28
 800ff3a:	460e      	mov	r6, r1
 800ff3c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800ff3e:	4617      	mov	r7, r2
 800ff40:	4b0f      	ldr	r3, [pc, #60]	@ (800ff80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800ff42:	4604      	mov	r4, r0
 800ff44:	f8b3 9000 	ldrh.w	r9, [r3]
 800ff48:	f7f3 ff8c 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 800ff4c:	6803      	ldr	r3, [r0, #0]
 800ff4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff50:	4798      	blx	r3
 800ff52:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800ff56:	463a      	mov	r2, r7
 800ff58:	4631      	mov	r1, r6
 800ff5a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff5e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800ff62:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800ff66:	4620      	mov	r0, r4
 800ff68:	9302      	str	r3, [sp, #8]
 800ff6a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800ff6e:	9301      	str	r3, [sp, #4]
 800ff70:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	4643      	mov	r3, r8
 800ff78:	47a8      	blx	r5
 800ff7a:	b007      	add	sp, #28
 800ff7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff80:	240253ae 	.word	0x240253ae

0800ff84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800ff84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff88:	4604      	mov	r4, r0
 800ff8a:	b08f      	sub	sp, #60	@ 0x3c
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	460d      	mov	r5, r1
 800ff90:	4691      	mov	r9, r2
 800ff92:	461e      	mov	r6, r3
 800ff94:	f007 fce6 	bl	8017964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	f000 809d 	beq.w	80100d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f8df b198 	ldr.w	fp, [pc, #408]	@ 801013c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800ffa6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800ffaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffac:	4798      	blx	r3
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8010140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb8:	4798      	blx	r3
 800ffba:	f8bb 3000 	ldrh.w	r3, [fp]
 800ffbe:	4f5c      	ldr	r7, [pc, #368]	@ (8010130 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ffc0:	9301      	str	r3, [sp, #4]
 800ffc2:	f8ba 3000 	ldrh.w	r3, [sl]
 800ffc6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800ffca:	4640      	mov	r0, r8
 800ffcc:	9302      	str	r3, [sp, #8]
 800ffce:	883b      	ldrh	r3, [r7, #0]
 800ffd0:	9303      	str	r3, [sp, #12]
 800ffd2:	4b58      	ldr	r3, [pc, #352]	@ (8010134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ffd4:	881a      	ldrh	r2, [r3, #0]
 800ffd6:	9305      	str	r3, [sp, #20]
 800ffd8:	9204      	str	r2, [sp, #16]
 800ffda:	f007 fe13 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ffde:	8038      	strh	r0, [r7, #0]
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	f007 fe43 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ffe6:	9b05      	ldr	r3, [sp, #20]
 800ffe8:	b280      	uxth	r0, r0
 800ffea:	8018      	strh	r0, [r3, #0]
 800ffec:	4b52      	ldr	r3, [pc, #328]	@ (8010138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d174      	bne.n	80100de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800fff4:	883b      	ldrh	r3, [r7, #0]
 800fff6:	f8aa 0000 	strh.w	r0, [sl]
 800fffa:	f8ab 3000 	strh.w	r3, [fp]
 800fffe:	4648      	mov	r0, r9
 8010000:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8010004:	f007 fcae 	bl	8017964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010008:	2200      	movs	r2, #0
 801000a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801000e:	4611      	mov	r1, r2
 8010010:	4628      	mov	r0, r5
 8010012:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010016:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801001a:	f7f3 ffe4 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
 801001e:	2301      	movs	r3, #1
 8010020:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8010024:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010028:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	dd5c      	ble.n	80100ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010030:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010034:	2b00      	cmp	r3, #0
 8010036:	dd58      	ble.n	80100ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010038:	462a      	mov	r2, r5
 801003a:	ab0a      	add	r3, sp, #40	@ 0x28
 801003c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010040:	6851      	ldr	r1, [r2, #4]
 8010042:	c303      	stmia	r3!, {r0, r1}
 8010044:	4631      	mov	r1, r6
 8010046:	a80a      	add	r0, sp, #40	@ 0x28
 8010048:	f7ff fbc8 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801004c:	4b38      	ldr	r3, [pc, #224]	@ (8010130 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801004e:	2100      	movs	r1, #0
 8010050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010054:	4b37      	ldr	r3, [pc, #220]	@ (8010134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010056:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801005a:	aa0a      	add	r2, sp, #40	@ 0x28
 801005c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010060:	910c      	str	r1, [sp, #48]	@ 0x30
 8010062:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010066:	ab08      	add	r3, sp, #32
 8010068:	e892 0003 	ldmia.w	r2, {r0, r1}
 801006c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010070:	4618      	mov	r0, r3
 8010072:	a90c      	add	r1, sp, #48	@ 0x30
 8010074:	f7ff fbb2 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8010078:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801007a:	2b00      	cmp	r3, #0
 801007c:	d13c      	bne.n	80100f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801007e:	2000      	movs	r0, #0
 8010080:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8010084:	2600      	movs	r6, #0
 8010086:	696b      	ldr	r3, [r5, #20]
 8010088:	a908      	add	r1, sp, #32
 801008a:	682a      	ldr	r2, [r5, #0]
 801008c:	4628      	mov	r0, r5
 801008e:	9305      	str	r3, [sp, #20]
 8010090:	616e      	str	r6, [r5, #20]
 8010092:	6892      	ldr	r2, [r2, #8]
 8010094:	4790      	blx	r2
 8010096:	9b05      	ldr	r3, [sp, #20]
 8010098:	4652      	mov	r2, sl
 801009a:	4649      	mov	r1, r9
 801009c:	616b      	str	r3, [r5, #20]
 801009e:	4628      	mov	r0, r5
 80100a0:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80100a4:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80100a8:	f7f3 ff9d 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
 80100ac:	9a01      	ldr	r2, [sp, #4]
 80100ae:	4b23      	ldr	r3, [pc, #140]	@ (801013c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80100b0:	4620      	mov	r0, r4
 80100b2:	801a      	strh	r2, [r3, #0]
 80100b4:	9a02      	ldr	r2, [sp, #8]
 80100b6:	4b22      	ldr	r3, [pc, #136]	@ (8010140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80100b8:	801a      	strh	r2, [r3, #0]
 80100ba:	9a03      	ldr	r2, [sp, #12]
 80100bc:	4b1c      	ldr	r3, [pc, #112]	@ (8010130 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80100be:	801a      	strh	r2, [r3, #0]
 80100c0:	4b1c      	ldr	r3, [pc, #112]	@ (8010134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80100c2:	9a04      	ldr	r2, [sp, #16]
 80100c4:	801a      	strh	r2, [r3, #0]
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80100cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ce:	4798      	blx	r3
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	4620      	mov	r0, r4
 80100d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100d6:	4798      	blx	r3
 80100d8:	b00f      	add	sp, #60	@ 0x3c
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	883b      	ldrh	r3, [r7, #0]
 80100e0:	f8ab 0000 	strh.w	r0, [fp]
 80100e4:	f8aa 3000 	strh.w	r3, [sl]
 80100e8:	e789      	b.n	800fffe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80100ea:	462a      	mov	r2, r5
 80100ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80100ee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80100f2:	6851      	ldr	r1, [r2, #4]
 80100f4:	c303      	stmia	r3!, {r0, r1}
 80100f6:	e7a9      	b.n	801004c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80100f8:	a807      	add	r0, sp, #28
 80100fa:	f007 fef9 	bl	8017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80100fe:	4606      	mov	r6, r0
 8010100:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8010102:	6803      	ldr	r3, [r0, #0]
 8010104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010106:	4798      	blx	r3
 8010108:	4286      	cmp	r6, r0
 801010a:	d1b8      	bne.n	801007e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801010c:	f7f3 feaa 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8010110:	6803      	ldr	r3, [r0, #0]
 8010112:	4606      	mov	r6, r0
 8010114:	a807      	add	r0, sp, #28
 8010116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010118:	9305      	str	r3, [sp, #20]
 801011a:	f007 fee9 	bl	8017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801011e:	9b05      	ldr	r3, [sp, #20]
 8010120:	4601      	mov	r1, r0
 8010122:	4630      	mov	r0, r6
 8010124:	4798      	blx	r3
 8010126:	f080 0001 	eor.w	r0, r0, #1
 801012a:	b2c0      	uxtb	r0, r0
 801012c:	e7a8      	b.n	8010080 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801012e:	bf00      	nop
 8010130:	240253a8 	.word	0x240253a8
 8010134:	240253aa 	.word	0x240253aa
 8010138:	240253ac 	.word	0x240253ac
 801013c:	240253ae 	.word	0x240253ae
 8010140:	240253b0 	.word	0x240253b0

08010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010144:	4b07      	ldr	r3, [pc, #28]	@ (8010164 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010146:	b510      	push	{r4, lr}
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	4604      	mov	r4, r0
 801014c:	b13b      	cbz	r3, 801015e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801014e:	6803      	ldr	r3, [r0, #0]
 8010150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010152:	4798      	blx	r3
 8010154:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010156:	4283      	cmp	r3, r0
 8010158:	d101      	bne.n	801015e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801015a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801015c:	bd10      	pop	{r4, pc}
 801015e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010160:	e7fc      	b.n	801015c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010162:	bf00      	nop
 8010164:	240253b2 	.word	0x240253b2

08010168 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016c:	461d      	mov	r5, r3
 801016e:	b08a      	sub	sp, #40	@ 0x28
 8010170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010174:	4690      	mov	r8, r2
 8010176:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801017a:	2400      	movs	r4, #0
 801017c:	4607      	mov	r7, r0
 801017e:	fb06 8505 	mla	r5, r6, r5, r8
 8010182:	9404      	str	r4, [sp, #16]
 8010184:	f88d 4020 	strb.w	r4, [sp, #32]
 8010188:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801018c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010190:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010194:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010198:	f8ad 301a 	strh.w	r3, [sp, #26]
 801019c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80101a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80101a4:	f7ff ffce 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80101a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f8ad 601e 	strh.w	r6, [sp, #30]
 80101b2:	a901      	add	r1, sp, #4
 80101b4:	9505      	str	r5, [sp, #20]
 80101b6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80101ba:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80101be:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80101c2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80101c6:	6803      	ldr	r3, [r0, #0]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	4798      	blx	r3
 80101cc:	b00a      	add	sp, #40	@ 0x28
 80101ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101d2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80101d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101d6:	b08b      	sub	sp, #44	@ 0x2c
 80101d8:	2400      	movs	r4, #0
 80101da:	4691      	mov	r9, r2
 80101dc:	461d      	mov	r5, r3
 80101de:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80101e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80101e6:	4688      	mov	r8, r1
 80101e8:	4607      	mov	r7, r0
 80101ea:	9404      	str	r4, [sp, #16]
 80101ec:	fb06 9505 	mla	r5, r6, r5, r9
 80101f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101f4:	f7ff ffa6 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80101f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80101fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010206:	a901      	add	r1, sp, #4
 8010208:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801020c:	9505      	str	r5, [sp, #20]
 801020e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010212:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010216:	f8ad 601e 	strh.w	r6, [sp, #30]
 801021a:	f8cd 8010 	str.w	r8, [sp, #16]
 801021e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010222:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010226:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801022a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801022e:	6803      	ldr	r3, [r0, #0]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	4798      	blx	r3
 8010234:	b00b      	add	sp, #44	@ 0x2c
 8010236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801023c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010240:	b08a      	sub	sp, #40	@ 0x28
 8010242:	4698      	mov	r8, r3
 8010244:	2300      	movs	r3, #0
 8010246:	4606      	mov	r6, r0
 8010248:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801024c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8010250:	2d0b      	cmp	r5, #11
 8010252:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8010256:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801025a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801025e:	9304      	str	r3, [sp, #16]
 8010260:	d137      	bne.n	80102d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010262:	2380      	movs	r3, #128	@ 0x80
 8010264:	f88d 0020 	strb.w	r0, [sp, #32]
 8010268:	4630      	mov	r0, r6
 801026a:	9203      	str	r2, [sp, #12]
 801026c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010270:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010274:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010278:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801027c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010280:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010284:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010288:	f7ff ff5c 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801028c:	2c0b      	cmp	r4, #11
 801028e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010292:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010296:	bf94      	ite	ls
 8010298:	4b19      	ldrls	r3, [pc, #100]	@ (8010300 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801029a:	2100      	movhi	r1, #0
 801029c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80102a0:	bf98      	it	ls
 80102a2:	5d19      	ldrbls	r1, [r3, r4]
 80102a4:	fb02 8307 	mla	r3, r2, r7, r8
 80102a8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80102ac:	10c9      	asrs	r1, r1, #3
 80102ae:	fb01 0003 	mla	r0, r1, r3, r0
 80102b2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80102b6:	a901      	add	r1, sp, #4
 80102b8:	9005      	str	r0, [sp, #20]
 80102ba:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80102be:	2300      	movs	r3, #0
 80102c0:	6870      	ldr	r0, [r6, #4]
 80102c2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80102c6:	6803      	ldr	r3, [r0, #0]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	4798      	blx	r3
 80102cc:	b00a      	add	sp, #40	@ 0x28
 80102ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d2:	2d02      	cmp	r5, #2
 80102d4:	d109      	bne.n	80102ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80102d6:	28ff      	cmp	r0, #255	@ 0xff
 80102d8:	d105      	bne.n	80102e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80102da:	f1bc 0f00 	cmp.w	ip, #0
 80102de:	bf14      	ite	ne
 80102e0:	2340      	movne	r3, #64	@ 0x40
 80102e2:	2320      	moveq	r3, #32
 80102e4:	e7be      	b.n	8010264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80102e6:	2340      	movs	r3, #64	@ 0x40
 80102e8:	e7bc      	b.n	8010264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80102ea:	28ff      	cmp	r0, #255	@ 0xff
 80102ec:	d105      	bne.n	80102fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80102ee:	f1bc 0f00 	cmp.w	ip, #0
 80102f2:	bf14      	ite	ne
 80102f4:	2304      	movne	r3, #4
 80102f6:	2301      	moveq	r3, #1
 80102f8:	e7b4      	b.n	8010264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80102fa:	2304      	movs	r3, #4
 80102fc:	e7b2      	b.n	8010264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80102fe:	bf00      	nop
 8010300:	080285a0 	.word	0x080285a0

08010304 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010308:	b08b      	sub	sp, #44	@ 0x2c
 801030a:	461d      	mov	r5, r3
 801030c:	2400      	movs	r4, #0
 801030e:	4688      	mov	r8, r1
 8010310:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8010314:	4693      	mov	fp, r2
 8010316:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801031a:	4607      	mov	r7, r0
 801031c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010320:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8010324:	9404      	str	r4, [sp, #16]
 8010326:	bf14      	ite	ne
 8010328:	2308      	movne	r3, #8
 801032a:	2302      	moveq	r3, #2
 801032c:	fb05 b50a 	mla	r5, r5, sl, fp
 8010330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010334:	f7ff ff06 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010338:	2e0b      	cmp	r6, #11
 801033a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801033e:	a901      	add	r1, sp, #4
 8010340:	bf98      	it	ls
 8010342:	4b13      	ldrls	r3, [pc, #76]	@ (8010390 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010344:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010348:	bf98      	it	ls
 801034a:	5d9c      	ldrbls	r4, [r3, r6]
 801034c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010350:	10e4      	asrs	r4, r4, #3
 8010352:	f8cd 8010 	str.w	r8, [sp, #16]
 8010356:	f8ad 3018 	strh.w	r3, [sp, #24]
 801035a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801035e:	fb04 0405 	mla	r4, r4, r5, r0
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010368:	2300      	movs	r3, #0
 801036a:	9405      	str	r4, [sp, #20]
 801036c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010370:	f88d 9020 	strb.w	r9, [sp, #32]
 8010374:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010378:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801037c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8010380:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010384:	6803      	ldr	r3, [r0, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	4798      	blx	r3
 801038a:	b00b      	add	sp, #44	@ 0x2c
 801038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010390:	080285a0 	.word	0x080285a0

08010394 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	461e      	mov	r6, r3
 801039a:	4b0a      	ldr	r3, [pc, #40]	@ (80103c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801039c:	460f      	mov	r7, r1
 801039e:	4690      	mov	r8, r2
 80103a0:	881d      	ldrh	r5, [r3, #0]
 80103a2:	f7f3 fd5f 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 80103a6:	6803      	ldr	r3, [r0, #0]
 80103a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103aa:	4798      	blx	r3
 80103ac:	280b      	cmp	r0, #11
 80103ae:	bf96      	itet	ls
 80103b0:	4b05      	ldrls	r3, [pc, #20]	@ (80103c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80103b2:	2400      	movhi	r4, #0
 80103b4:	5c1c      	ldrbls	r4, [r3, r0]
 80103b6:	fb08 7005 	mla	r0, r8, r5, r7
 80103ba:	10e4      	asrs	r4, r4, #3
 80103bc:	fb04 6000 	mla	r0, r4, r0, r6
 80103c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c4:	240253ae 	.word	0x240253ae
 80103c8:	080285a0 	.word	0x080285a0

080103cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80103cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ce:	b08b      	sub	sp, #44	@ 0x2c
 80103d0:	461f      	mov	r7, r3
 80103d2:	4604      	mov	r4, r0
 80103d4:	4616      	mov	r6, r2
 80103d6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80103da:	2500      	movs	r5, #0
 80103dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80103e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80103e4:	9504      	str	r5, [sp, #16]
 80103e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80103ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80103ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80103f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80103f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80103fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80103fe:	f88d 3020 	strb.w	r3, [sp, #32]
 8010402:	f7ff fe9f 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010406:	463a      	mov	r2, r7
 8010408:	4631      	mov	r1, r6
 801040a:	4603      	mov	r3, r0
 801040c:	4620      	mov	r0, r4
 801040e:	f7ff ffc1 	bl	8010394 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010412:	4b0e      	ldr	r3, [pc, #56]	@ (801044c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010414:	9005      	str	r0, [sp, #20]
 8010416:	881b      	ldrh	r3, [r3, #0]
 8010418:	f8ad 301e 	strh.w	r3, [sp, #30]
 801041c:	f7f3 fd22 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8010420:	6803      	ldr	r3, [r0, #0]
 8010422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010424:	4798      	blx	r3
 8010426:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010428:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 801042c:	a901      	add	r1, sp, #4
 801042e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010432:	9304      	str	r3, [sp, #16]
 8010434:	6860      	ldr	r0, [r4, #4]
 8010436:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801043a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801043e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	4798      	blx	r3
 8010448:	b00b      	add	sp, #44	@ 0x2c
 801044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801044c:	240253ae 	.word	0x240253ae

08010450 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010452:	b08d      	sub	sp, #52	@ 0x34
 8010454:	2501      	movs	r5, #1
 8010456:	4604      	mov	r4, r0
 8010458:	466b      	mov	r3, sp
 801045a:	9503      	str	r5, [sp, #12]
 801045c:	e883 0006 	stmia.w	r3, {r1, r2}
 8010460:	2300      	movs	r3, #0
 8010462:	f8bd 6000 	ldrh.w	r6, [sp]
 8010466:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801046a:	9306      	str	r3, [sp, #24]
 801046c:	6803      	ldr	r3, [r0, #0]
 801046e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010470:	4798      	blx	r3
 8010472:	463a      	mov	r2, r7
 8010474:	4631      	mov	r1, r6
 8010476:	4603      	mov	r3, r0
 8010478:	4620      	mov	r0, r4
 801047a:	f7ff ff8b 	bl	8010394 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801047e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010480:	9004      	str	r0, [sp, #16]
 8010482:	9307      	str	r3, [sp, #28]
 8010484:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010488:	f8ad 3020 	strh.w	r3, [sp, #32]
 801048c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010490:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010494:	4b0e      	ldr	r3, [pc, #56]	@ (80104d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801049c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80104a0:	f7f3 fce0 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 80104a4:	6803      	ldr	r3, [r0, #0]
 80104a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a8:	4798      	blx	r3
 80104aa:	23ff      	movs	r3, #255	@ 0xff
 80104ac:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80104b0:	a903      	add	r1, sp, #12
 80104b2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80104b6:	6860      	ldr	r0, [r4, #4]
 80104b8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80104bc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80104c0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80104c4:	6803      	ldr	r3, [r0, #0]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	4798      	blx	r3
 80104ca:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80104cc:	b00d      	add	sp, #52	@ 0x34
 80104ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d0:	240253ae 	.word	0x240253ae

080104d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80104d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d8:	b08c      	sub	sp, #48	@ 0x30
 80104da:	461e      	mov	r6, r3
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	466d      	mov	r5, sp
 80104e2:	9306      	str	r3, [sp, #24]
 80104e4:	6803      	ldr	r3, [r0, #0]
 80104e6:	e885 0006 	stmia.w	r5, {r1, r2}
 80104ea:	2501      	movs	r5, #1
 80104ec:	f8bd 7000 	ldrh.w	r7, [sp]
 80104f0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80104f4:	9503      	str	r5, [sp, #12]
 80104f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104f8:	4798      	blx	r3
 80104fa:	4642      	mov	r2, r8
 80104fc:	4639      	mov	r1, r7
 80104fe:	4603      	mov	r3, r0
 8010500:	4620      	mov	r0, r4
 8010502:	f7ff ff47 	bl	8010394 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010506:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801050a:	9004      	str	r0, [sp, #16]
 801050c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010510:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010514:	9607      	str	r6, [sp, #28]
 8010516:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801051a:	4b10      	ldr	r3, [pc, #64]	@ (801055c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010522:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010524:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010528:	f7f3 fc9c 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 801052c:	6803      	ldr	r3, [r0, #0]
 801052e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010530:	4798      	blx	r3
 8010532:	23ff      	movs	r3, #255	@ 0xff
 8010534:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010538:	a903      	add	r1, sp, #12
 801053a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801053e:	6860      	ldr	r0, [r4, #4]
 8010540:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010544:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010548:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801054c:	6803      	ldr	r3, [r0, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	4798      	blx	r3
 8010552:	4630      	mov	r0, r6
 8010554:	b00c      	add	sp, #48	@ 0x30
 8010556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801055a:	bf00      	nop
 801055c:	240253ae 	.word	0x240253ae

08010560 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010562:	b085      	sub	sp, #20
 8010564:	4605      	mov	r5, r0
 8010566:	ac02      	add	r4, sp, #8
 8010568:	e884 0006 	stmia.w	r4, {r1, r2}
 801056c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010570:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010574:	f7ff fde6 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010578:	4631      	mov	r1, r6
 801057a:	4603      	mov	r3, r0
 801057c:	463a      	mov	r2, r7
 801057e:	4628      	mov	r0, r5
 8010580:	f7ff ff08 	bl	8010394 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010584:	4a05      	ldr	r2, [pc, #20]	@ (801059c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010586:	682b      	ldr	r3, [r5, #0]
 8010588:	8812      	ldrh	r2, [r2, #0]
 801058a:	9200      	str	r2, [sp, #0]
 801058c:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801058e:	4603      	mov	r3, r0
 8010590:	4628      	mov	r0, r5
 8010592:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010596:	47b0      	blx	r6
 8010598:	b005      	add	sp, #20
 801059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801059c:	240253ae 	.word	0x240253ae

080105a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80105a0:	b570      	push	{r4, r5, r6, lr}
 80105a2:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80105a6:	4604      	mov	r4, r0
 80105a8:	b19b      	cbz	r3, 80105d2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80105aa:	2002      	movs	r0, #2
 80105ac:	f7f1 fb36 	bl	8001c1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80105b0:	2300      	movs	r3, #0
 80105b2:	4620      	mov	r0, r4
 80105b4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80105b8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 80105c2:	f7ff fdbf 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80105c6:	4601      	mov	r1, r0
 80105c8:	4620      	mov	r0, r4
 80105ca:	462b      	mov	r3, r5
 80105cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105d0:	4718      	bx	r3
 80105d2:	bd70      	pop	{r4, r5, r6, pc}

080105d4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80105d4:	b570      	push	{r4, r5, r6, lr}
 80105d6:	4605      	mov	r5, r0
 80105d8:	460c      	mov	r4, r1
 80105da:	2003      	movs	r0, #3
 80105dc:	b149      	cbz	r1, 80105f2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80105de:	f7f1 fabd 	bl	8001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80105e2:	6928      	ldr	r0, [r5, #16]
 80105e4:	b168      	cbz	r0, 8010602 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80105e6:	6803      	ldr	r3, [r0, #0]
 80105e8:	2101      	movs	r1, #1
 80105ea:	695b      	ldr	r3, [r3, #20]
 80105ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105f0:	4718      	bx	r3
 80105f2:	f7f1 fae3 	bl	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80105f6:	6928      	ldr	r0, [r5, #16]
 80105f8:	b118      	cbz	r0, 8010602 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80105fa:	6803      	ldr	r3, [r0, #0]
 80105fc:	4621      	mov	r1, r4
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	e7f4      	b.n	80105ec <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010602:	bd70      	pop	{r4, r5, r6, pc}

08010604 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801060a:	4604      	mov	r4, r0
 801060c:	460d      	mov	r5, r1
 801060e:	428b      	cmp	r3, r1
 8010610:	d006      	beq.n	8010620 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010612:	6803      	ldr	r3, [r0, #0]
 8010614:	b929      	cbnz	r1, 8010622 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801061a:	4798      	blx	r3
 801061c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8010620:	bd38      	pop	{r3, r4, r5, pc}
 8010622:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010626:	e7f8      	b.n	801061a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010628 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010628:	4b0c      	ldr	r3, [pc, #48]	@ (801065c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 801062a:	b510      	push	{r4, lr}
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	4604      	mov	r4, r0
 8010630:	b953      	cbnz	r3, 8010648 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8010632:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8010636:	b93b      	cbnz	r3, 8010648 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8010638:	6840      	ldr	r0, [r0, #4]
 801063a:	f000 f919 	bl	8010870 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801063e:	b118      	cbz	r0, 8010648 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8010640:	6862      	ldr	r2, [r4, #4]
 8010642:	7a53      	ldrb	r3, [r2, #9]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d0fc      	beq.n	8010642 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8010648:	f7f2 fb02 	bl	8002c50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801064c:	4620      	mov	r0, r4
 801064e:	2100      	movs	r1, #0
 8010650:	f7ff ffd8 	bl	8010604 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010654:	4620      	mov	r0, r4
 8010656:	f7ff fd75 	bl	8010144 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801065a:	bd10      	pop	{r4, pc}
 801065c:	240253b2 	.word	0x240253b2

08010660 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8010660:	b570      	push	{r4, r5, r6, lr}
 8010662:	4604      	mov	r4, r0
 8010664:	6803      	ldr	r3, [r0, #0]
 8010666:	b919      	cbnz	r1, 8010670 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801066a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801066e:	4718      	bx	r3
 8010670:	2200      	movs	r2, #0
 8010672:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8010676:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801067a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801067c:	4798      	blx	r3
 801067e:	6863      	ldr	r3, [r4, #4]
 8010680:	2101      	movs	r1, #1
 8010682:	4605      	mov	r5, r0
 8010684:	4620      	mov	r0, r4
 8010686:	7299      	strb	r1, [r3, #10]
 8010688:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801068c:	f7ff ffba 	bl	8010604 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010690:	4628      	mov	r0, r5
 8010692:	bd70      	pop	{r4, r5, r6, pc}

08010694 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010694:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010698:	1a13      	subs	r3, r2, r0
 801069a:	4258      	negs	r0, r3
 801069c:	4158      	adcs	r0, r3
 801069e:	4770      	bx	lr

080106a0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80106a0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80106a4:	1a9b      	subs	r3, r3, r2
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	bfdc      	itt	le
 80106aa:	6882      	ldrle	r2, [r0, #8]
 80106ac:	189b      	addle	r3, r3, r2
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	bfcc      	ite	gt
 80106b2:	2000      	movgt	r0, #0
 80106b4:	2001      	movle	r0, #1
 80106b6:	4770      	bx	lr

080106b8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80106b8:	6902      	ldr	r2, [r0, #16]
 80106ba:	6843      	ldr	r3, [r0, #4]
 80106bc:	2024      	movs	r0, #36	@ 0x24
 80106be:	fb00 3002 	mla	r0, r0, r2, r3
 80106c2:	4770      	bx	lr

080106c4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80106c4:	6803      	ldr	r3, [r0, #0]
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	4718      	bx	r3

080106ca <_ZN8touchgfx13DMA_Interface7executeEv>:
 80106ca:	2301      	movs	r3, #1
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	7203      	strb	r3, [r0, #8]
 80106d0:	4604      	mov	r4, r0
 80106d2:	6840      	ldr	r0, [r0, #4]
 80106d4:	6803      	ldr	r3, [r0, #0]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	4798      	blx	r3
 80106da:	6803      	ldr	r3, [r0, #0]
 80106dc:	4605      	mov	r5, r0
 80106de:	2b40      	cmp	r3, #64	@ 0x40
 80106e0:	d00c      	beq.n	80106fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80106e2:	d810      	bhi.n	8010706 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d01d      	beq.n	8010724 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80106e8:	d804      	bhi.n	80106f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d006      	beq.n	80106fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d02c      	beq.n	801074c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	2b08      	cmp	r3, #8
 80106f6:	d01d      	beq.n	8010734 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80106f8:	2b20      	cmp	r3, #32
 80106fa:	d1fa      	bne.n	80106f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	4620      	mov	r0, r4
 8010700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010702:	4798      	blx	r3
 8010704:	e013      	b.n	801072e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801070a:	d0f7      	beq.n	80106fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801070c:	d804      	bhi.n	8010718 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801070e:	2b80      	cmp	r3, #128	@ 0x80
 8010710:	d0f4      	beq.n	80106fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010716:	e7f0      	b.n	80106fa <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801071c:	d0ee      	beq.n	80106fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801071e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010722:	e7e5      	b.n	80106f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	7f01      	ldrb	r1, [r0, #28]
 8010728:	4620      	mov	r0, r4
 801072a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801072c:	4798      	blx	r3
 801072e:	6823      	ldr	r3, [r4, #0]
 8010730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010732:	e006      	b.n	8010742 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	7f01      	ldrb	r1, [r0, #28]
 8010738:	4620      	mov	r0, r4
 801073a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801073c:	4798      	blx	r3
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010742:	4629      	mov	r1, r5
 8010744:	4620      	mov	r0, r4
 8010746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801074a:	4718      	bx	r3
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	4620      	mov	r0, r4
 8010750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010752:	4798      	blx	r3
 8010754:	e7f3      	b.n	801073e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010756 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010756:	4770      	bx	lr

08010758 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010758:	4770      	bx	lr

0801075a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801075a:	4770      	bx	lr

0801075c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801075c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010760:	b510      	push	{r4, lr}
 8010762:	1ad2      	subs	r2, r2, r3
 8010764:	2a00      	cmp	r2, #0
 8010766:	bfdc      	itt	le
 8010768:	6884      	ldrle	r4, [r0, #8]
 801076a:	1912      	addle	r2, r2, r4
 801076c:	2a01      	cmp	r2, #1
 801076e:	dd16      	ble.n	801079e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010770:	6842      	ldr	r2, [r0, #4]
 8010772:	2424      	movs	r4, #36	@ 0x24
 8010774:	fb04 2303 	mla	r3, r4, r3, r2
 8010778:	f101 0220 	add.w	r2, r1, #32
 801077c:	f851 4b04 	ldr.w	r4, [r1], #4
 8010780:	4291      	cmp	r1, r2
 8010782:	f843 4b04 	str.w	r4, [r3], #4
 8010786:	d1f9      	bne.n	801077c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010788:	780a      	ldrb	r2, [r1, #0]
 801078a:	701a      	strb	r2, [r3, #0]
 801078c:	68c3      	ldr	r3, [r0, #12]
 801078e:	6882      	ldr	r2, [r0, #8]
 8010790:	f3bf 8f5b 	dmb	ish
 8010794:	3301      	adds	r3, #1
 8010796:	429a      	cmp	r2, r3
 8010798:	bfd8      	it	le
 801079a:	1a9b      	suble	r3, r3, r2
 801079c:	60c3      	str	r3, [r0, #12]
 801079e:	bd10      	pop	{r4, pc}

080107a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80107a0:	6903      	ldr	r3, [r0, #16]
 80107a2:	6882      	ldr	r2, [r0, #8]
 80107a4:	f3bf 8f5b 	dmb	ish
 80107a8:	3301      	adds	r3, #1
 80107aa:	429a      	cmp	r2, r3
 80107ac:	bfd8      	it	le
 80107ae:	1a9b      	suble	r3, r3, r2
 80107b0:	6103      	str	r3, [r0, #16]
 80107b2:	4770      	bx	lr

080107b4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	460e      	mov	r6, r1
 80107ba:	6860      	ldr	r0, [r4, #4]
 80107bc:	6803      	ldr	r3, [r0, #0]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	4798      	blx	r3
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d1f9      	bne.n	80107ba <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80107c6:	4d0d      	ldr	r5, [pc, #52]	@ (80107fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80107c8:	6828      	ldr	r0, [r5, #0]
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107d0:	4798      	blx	r3
 80107d2:	f7f2 fa4b 	bl	8002c6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80107d6:	6828      	ldr	r0, [r5, #0]
 80107d8:	2101      	movs	r1, #1
 80107da:	f7ff ff13 	bl	8010604 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80107de:	6860      	ldr	r0, [r4, #4]
 80107e0:	4631      	mov	r1, r6
 80107e2:	6803      	ldr	r3, [r0, #0]
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	4798      	blx	r3
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	4620      	mov	r0, r4
 80107ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ee:	4798      	blx	r3
 80107f0:	6828      	ldr	r0, [r5, #0]
 80107f2:	6803      	ldr	r3, [r0, #0]
 80107f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107fa:	4718      	bx	r3
 80107fc:	240253b4 	.word	0x240253b4

08010800 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010800:	b508      	push	{r3, lr}
 8010802:	f7f2 fa25 	bl	8002c50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801080a:	f7f2 ba29 	b.w	8002c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801080e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801080e:	b510      	push	{r4, lr}
 8010810:	4604      	mov	r4, r0
 8010812:	2114      	movs	r1, #20
 8010814:	f013 fbc3 	bl	8023f9e <_ZdlPvj>
 8010818:	4620      	mov	r0, r4
 801081a:	bd10      	pop	{r4, pc}

0801081c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	4604      	mov	r4, r0
 8010820:	6840      	ldr	r0, [r0, #4]
 8010822:	6803      	ldr	r3, [r0, #0]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4798      	blx	r3
 8010828:	4605      	mov	r5, r0
 801082a:	b930      	cbnz	r0, 801083a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801082c:	7a23      	ldrb	r3, [r4, #8]
 801082e:	b123      	cbz	r3, 801083a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010830:	6860      	ldr	r0, [r4, #4]
 8010832:	6803      	ldr	r3, [r0, #0]
 8010834:	695b      	ldr	r3, [r3, #20]
 8010836:	4798      	blx	r3
 8010838:	7225      	strb	r5, [r4, #8]
 801083a:	6860      	ldr	r0, [r4, #4]
 801083c:	6803      	ldr	r3, [r0, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4798      	blx	r3
 8010842:	b928      	cbnz	r0, 8010850 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	4620      	mov	r0, r4
 8010848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801084a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801084e:	4718      	bx	r3
 8010850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010854:	f7f2 ba12 	b.w	8002c7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010858 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010858:	b510      	push	{r4, lr}
 801085a:	6082      	str	r2, [r0, #8]
 801085c:	2200      	movs	r2, #0
 801085e:	4c03      	ldr	r4, [pc, #12]	@ (801086c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010860:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010864:	e9c0 4100 	strd	r4, r1, [r0]
 8010868:	bd10      	pop	{r4, pc}
 801086a:	bf00      	nop
 801086c:	080285b4 	.word	0x080285b4

08010870 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010870:	6840      	ldr	r0, [r0, #4]
 8010872:	6803      	ldr	r3, [r0, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4718      	bx	r3

08010878 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8010878:	2300      	movs	r3, #0
 801087a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801087c:	8503      	strh	r3, [r0, #40]	@ 0x28
 801087e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8010880:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010882:	6980      	ldr	r0, [r0, #24]
 8010884:	b110      	cbz	r0, 801088c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8010886:	6803      	ldr	r3, [r0, #0]
 8010888:	691b      	ldr	r3, [r3, #16]
 801088a:	4718      	bx	r3
 801088c:	4770      	bx	lr

0801088e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801088e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8010892:	4770      	bx	lr

08010894 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	0e0b      	lsrs	r3, r1, #24
 8010898:	4604      	mov	r4, r0
 801089a:	460d      	mov	r5, r1
 801089c:	7783      	strb	r3, [r0, #30]
 801089e:	6803      	ldr	r3, [r0, #0]
 80108a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108a2:	4798      	blx	r3
 80108a4:	6803      	ldr	r3, [r0, #0]
 80108a6:	4629      	mov	r1, r5
 80108a8:	689b      	ldr	r3, [r3, #8]
 80108aa:	4798      	blx	r3
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	4620      	mov	r0, r4
 80108b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108b2:	4798      	blx	r3
 80108b4:	61a0      	str	r0, [r4, #24]
 80108b6:	bd38      	pop	{r3, r4, r5, pc}

080108b8 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80108b8:	7741      	strb	r1, [r0, #29]
 80108ba:	4770      	bx	lr

080108bc <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80108bc:	b530      	push	{r4, r5, lr}
 80108be:	460d      	mov	r5, r1
 80108c0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80108c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	6023      	str	r3, [r4, #0]
 80108d0:	bd30      	pop	{r4, r5, pc}

080108d2 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80108d2:	b538      	push	{r3, r4, r5, lr}
 80108d4:	4604      	mov	r4, r0
 80108d6:	1d03      	adds	r3, r0, #4
 80108d8:	6808      	ldr	r0, [r1, #0]
 80108da:	2500      	movs	r5, #0
 80108dc:	6849      	ldr	r1, [r1, #4]
 80108de:	c303      	stmia	r3!, {r0, r1}
 80108e0:	6813      	ldr	r3, [r2, #0]
 80108e2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80108e6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80108ea:	6853      	ldr	r3, [r2, #4]
 80108ec:	61a5      	str	r5, [r4, #24]
 80108ee:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80108f2:	f005 fb9f 	bl	8016034 <_ZN8touchgfx9Matrix3x35resetEv>
 80108f6:	23ff      	movs	r3, #255	@ 0xff
 80108f8:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80108fc:	7763      	strb	r3, [r4, #29]
 80108fe:	77a3      	strb	r3, [r4, #30]
 8010900:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010904:	6323      	str	r3, [r4, #48]	@ 0x30
 8010906:	2301      	movs	r3, #1
 8010908:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801090c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010910 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8010910:	ee70 7a41 	vsub.f32	s15, s0, s2
 8010914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010918:	eef5 7a40 	vcmp.f32	s15, #0.0
 801091c:	4605      	mov	r5, r0
 801091e:	ed2d 8b0a 	vpush	{d8-d12}
 8010922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010926:	b087      	sub	sp, #28
 8010928:	eef0 9a40 	vmov.f32	s19, s0
 801092c:	6802      	ldr	r2, [r0, #0]
 801092e:	eeb0 aa60 	vmov.f32	s20, s1
 8010932:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010936:	eeb0 9a41 	vmov.f32	s18, s2
 801093a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801093c:	eef0 8a61 	vmov.f32	s17, s3
 8010940:	eeb0 ca42 	vmov.f32	s24, s4
 8010944:	eef0 ca62 	vmov.f32	s25, s5
 8010948:	d112      	bne.n	8010970 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801094a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801094e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010956:	d10b      	bne.n	8010970 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8010958:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801095c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801095e:	3901      	subs	r1, #1
 8010960:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8010964:	b007      	add	sp, #28
 8010966:	ecbd 8b0a 	vpop	{d8-d12}
 801096a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801096e:	4710      	bx	r2
 8010970:	23ff      	movs	r3, #255	@ 0xff
 8010972:	4628      	mov	r0, r5
 8010974:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8010978:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 8010c40 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 801097c:	77ab      	strb	r3, [r5, #30]
 801097e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8010980:	4798      	blx	r3
 8010982:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8010986:	eeb0 0a69 	vmov.f32	s0, s19
 801098a:	4604      	mov	r4, r0
 801098c:	80c3      	strh	r3, [r0, #6]
 801098e:	eef0 0a4a 	vmov.f32	s1, s20
 8010992:	4640      	mov	r0, r8
 8010994:	f005 fbfd 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010998:	eeb0 ba40 	vmov.f32	s22, s0
 801099c:	ed8d 0a00 	vstr	s0, [sp]
 80109a0:	eeb0 0a49 	vmov.f32	s0, s18
 80109a4:	eef0 ba60 	vmov.f32	s23, s1
 80109a8:	edcd 0a01 	vstr	s1, [sp, #4]
 80109ac:	4640      	mov	r0, r8
 80109ae:	eef0 0a68 	vmov.f32	s1, s17
 80109b2:	f005 fbee 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80109b6:	eeb4 ba40 	vcmp.f32	s22, s0
 80109ba:	eeb0 8a40 	vmov.f32	s16, s0
 80109be:	ed8d 0a02 	vstr	s0, [sp, #8]
 80109c2:	eef0 aa60 	vmov.f32	s21, s1
 80109c6:	edcd 0a03 	vstr	s1, [sp, #12]
 80109ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ce:	eef4 ba60 	vcmp.f32	s23, s1
 80109d2:	bf0c      	ite	eq
 80109d4:	2301      	moveq	r3, #1
 80109d6:	2300      	movne	r3, #0
 80109d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109dc:	eeb4 ba40 	vcmp.f32	s22, s0
 80109e0:	7463      	strb	r3, [r4, #17]
 80109e2:	bf0c      	ite	eq
 80109e4:	2301      	moveq	r3, #1
 80109e6:	2300      	movne	r3, #0
 80109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ec:	74a3      	strb	r3, [r4, #18]
 80109ee:	d031      	beq.n	8010a54 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 80109f0:	eef4 ba60 	vcmp.f32	s23, s1
 80109f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f8:	d02c      	beq.n	8010a54 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 80109fa:	ee39 9a69 	vsub.f32	s18, s18, s19
 80109fe:	4640      	mov	r0, r8
 8010a00:	ee78 8aca 	vsub.f32	s17, s17, s20
 8010a04:	eef0 0a4a 	vmov.f32	s1, s20
 8010a08:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 8010a0c:	eec8 7aac 	vdiv.f32	s15, s17, s25
 8010a10:	eeb0 0a69 	vmov.f32	s0, s19
 8010a14:	eeec 0a87 	vfma.f32	s1, s25, s14
 8010a18:	eea7 0acc 	vfms.f32	s0, s15, s24
 8010a1c:	f005 fbb9 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010a20:	f899 3000 	ldrb.w	r3, [r9]
 8010a24:	edcd 0a05 	vstr	s1, [sp, #20]
 8010a28:	ee70 0aeb 	vsub.f32	s1, s1, s23
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	bf08      	it	eq
 8010a30:	eef1 7a60 	vnegeq.f32	s15, s1
 8010a34:	ed8d 0a04 	vstr	s0, [sp, #16]
 8010a38:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8010a3c:	bf04      	itt	eq
 8010a3e:	eef0 0a40 	vmoveq.f32	s1, s0
 8010a42:	eeb0 0a67 	vmoveq.f32	s0, s15
 8010a46:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4e:	d135      	bne.n	8010abc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 8010a50:	2301      	movs	r3, #1
 8010a52:	74a3      	strb	r3, [r4, #18]
 8010a54:	f899 2000 	ldrb.w	r2, [r9]
 8010a58:	7c63      	ldrb	r3, [r4, #17]
 8010a5a:	2a01      	cmp	r2, #1
 8010a5c:	f040 80a3 	bne.w	8010ba6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d073      	beq.n	8010b4c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 8010a64:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010a68:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8010c38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010a6c:	eef4 baea 	vcmpe.f32	s23, s21
 8010a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a78:	edc4 7a08 	vstr	s15, [r4, #32]
 8010a7c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8010a80:	ee17 3a90 	vmov	r3, s15
 8010a84:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010a88:	b21a      	sxth	r2, r3
 8010a8a:	ee17 3a90 	vmov	r3, s15
 8010a8e:	bf48      	it	mi
 8010a90:	8162      	strhmi	r2, [r4, #10]
 8010a92:	b21b      	sxth	r3, r3
 8010a94:	bf56      	itet	pl
 8010a96:	8122      	strhpl	r2, [r4, #8]
 8010a98:	8123      	strhmi	r3, [r4, #8]
 8010a9a:	8163      	strhpl	r3, [r4, #10]
 8010a9c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010aa0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010aa4:	1a9b      	subs	r3, r3, r2
 8010aa6:	ee07 3a90 	vmov	s15, r3
 8010aaa:	2300      	movs	r3, #0
 8010aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ab0:	7463      	strb	r3, [r4, #17]
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	edc4 7a07 	vstr	s15, [r4, #28]
 8010ab8:	74a3      	strb	r3, [r4, #18]
 8010aba:	e03f      	b.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010abc:	ee80 7a80 	vdiv.f32	s14, s1, s0
 8010ac0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ac4:	ed84 7a05 	vstr	s14, [r4, #20]
 8010ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010acc:	d102      	bne.n	8010ad4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	7463      	strb	r3, [r4, #17]
 8010ad2:	e7bf      	b.n	8010a54 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	ee38 8a4b 	vsub.f32	s16, s16, s22
 8010ada:	ee7a aaeb 	vsub.f32	s21, s21, s23
 8010ade:	bf0b      	itete	eq
 8010ae0:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 8010ae4:	eef0 7a6b 	vmovne.f32	s15, s23
 8010ae8:	ee07 2a90 	vmoveq	s15, r2
 8010aec:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 8010af0:	bf02      	ittt	eq
 8010af2:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 8010af6:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 8010afa:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	edc4 7a06 	vstr	s15, [r4, #24]
 8010b04:	bf02      	ittt	eq
 8010b06:	eef1 7a48 	vnegeq.f32	s15, s16
 8010b0a:	eeb0 8a6a 	vmoveq.f32	s16, s21
 8010b0e:	eef0 aa67 	vmoveq.f32	s21, s15
 8010b12:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8010b16:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010c3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8010b1a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010b1e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8010b22:	ed84 8a07 	vstr	s16, [r4, #28]
 8010b26:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	edc4 7a08 	vstr	s15, [r4, #32]
 8010b32:	d503      	bpl.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010b34:	eeb1 8a48 	vneg.f32	s16, s16
 8010b38:	ed84 8a07 	vstr	s16, [r4, #28]
 8010b3c:	60e7      	str	r7, [r4, #12]
 8010b3e:	7426      	strb	r6, [r4, #16]
 8010b40:	61ac      	str	r4, [r5, #24]
 8010b42:	b007      	add	sp, #28
 8010b44:	ecbd 8b0a 	vpop	{d8-d12}
 8010b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b4c:	7ca3      	ldrb	r3, [r4, #18]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d0f4      	beq.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010b52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010b56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8010c38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010b5a:	ee00 3a10 	vmov	s0, r3
 8010b5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8010b62:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010b66:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8010b6a:	ee38 7a40 	vsub.f32	s14, s16, s0
 8010b6e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8010b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7a:	edc4 7a08 	vstr	s15, [r4, #32]
 8010b7e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010b82:	ee17 3a90 	vmov	r3, s15
 8010b86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010b8a:	b21a      	sxth	r2, r3
 8010b8c:	ee17 3a90 	vmov	r3, s15
 8010b90:	bfc8      	it	gt
 8010b92:	8162      	strhgt	r2, [r4, #10]
 8010b94:	b21b      	sxth	r3, r3
 8010b96:	bfd6      	itet	le
 8010b98:	8122      	strhle	r2, [r4, #8]
 8010b9a:	8123      	strhgt	r3, [r4, #8]
 8010b9c:	8163      	strhle	r3, [r4, #10]
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	7463      	strb	r3, [r4, #17]
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e788      	b.n	8010ab8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 8010ba6:	b1e3      	cbz	r3, 8010be2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 8010ba8:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010bac:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8010c38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010bb0:	eef4 baea 	vcmpe.f32	s23, s21
 8010bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbc:	edc4 7a08 	vstr	s15, [r4, #32]
 8010bc0:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8010bc4:	ee17 3a90 	vmov	r3, s15
 8010bc8:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010bcc:	b21a      	sxth	r2, r3
 8010bce:	ee17 3a90 	vmov	r3, s15
 8010bd2:	bf48      	it	mi
 8010bd4:	8162      	strhmi	r2, [r4, #10]
 8010bd6:	b21b      	sxth	r3, r3
 8010bd8:	bf56      	itet	pl
 8010bda:	8122      	strhpl	r2, [r4, #8]
 8010bdc:	8123      	strhmi	r3, [r4, #8]
 8010bde:	8163      	strhpl	r3, [r4, #10]
 8010be0:	e7ac      	b.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010be2:	7ca3      	ldrb	r3, [r4, #18]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d0a9      	beq.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010be8:	ee38 7a4b 	vsub.f32	s14, s16, s22
 8010bec:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8010c38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010bf0:	eeb4 bac8 	vcmpe.f32	s22, s16
 8010bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	edc4 7a08 	vstr	s15, [r4, #32]
 8010c00:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010c04:	ee17 3a90 	vmov	r3, s15
 8010c08:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8010c0c:	b21a      	sxth	r2, r3
 8010c0e:	ee17 3a90 	vmov	r3, s15
 8010c12:	bf48      	it	mi
 8010c14:	8162      	strhmi	r2, [r4, #10]
 8010c16:	b21b      	sxth	r3, r3
 8010c18:	bf56      	itet	pl
 8010c1a:	8122      	strhpl	r2, [r4, #8]
 8010c1c:	8123      	strhmi	r3, [r4, #8]
 8010c1e:	8163      	strhpl	r3, [r4, #10]
 8010c20:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010c24:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010c28:	1a9b      	subs	r3, r3, r2
 8010c2a:	ee07 3a90 	vmov	s15, r3
 8010c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c32:	edc4 7a07 	vstr	s15, [r4, #28]
 8010c36:	e781      	b.n	8010b3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010c38:	447ffffe 	.word	0x447ffffe
 8010c3c:	44800000 	.word	0x44800000
 8010c40:	240253ac 	.word	0x240253ac

08010c44 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8010c44:	b510      	push	{r4, lr}
 8010c46:	ed2d 8b02 	vpush	{d8}
 8010c4a:	eef0 8a62 	vmov.f32	s17, s5
 8010c4e:	2100      	movs	r1, #0
 8010c50:	4604      	mov	r4, r0
 8010c52:	eeb0 8a42 	vmov.f32	s16, s4
 8010c56:	f011 fb61 	bl	802231c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8010c5a:	eef0 7a68 	vmov.f32	s15, s17
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	4620      	mov	r0, r4
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010c68:	ee17 2a90 	vmov	r2, s15
 8010c6c:	eef0 7a48 	vmov.f32	s15, s16
 8010c70:	ecbd 8b02 	vpop	{d8}
 8010c74:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7c:	ee17 1a90 	vmov	r1, s15
 8010c80:	4718      	bx	r3

08010c82 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8010c82:	b510      	push	{r4, lr}
 8010c84:	ed2d 8b02 	vpush	{d8}
 8010c88:	eef0 8a63 	vmov.f32	s17, s7
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	4604      	mov	r4, r0
 8010c90:	eeb0 8a43 	vmov.f32	s16, s6
 8010c94:	f011 fc04 	bl	80224a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010c98:	eef0 7a68 	vmov.f32	s15, s17
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010ca6:	ee17 2a90 	vmov	r2, s15
 8010caa:	eef0 7a48 	vmov.f32	s15, s16
 8010cae:	ecbd 8b02 	vpop	{d8}
 8010cb2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cba:	ee17 1a90 	vmov	r1, s15
 8010cbe:	4718      	bx	r3

08010cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8010cc0:	b513      	push	{r0, r1, r4, lr}
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8010cc6:	f005 fa64 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010cca:	eef0 7a60 	vmov.f32	s15, s1
 8010cce:	4620      	mov	r0, r4
 8010cd0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010cd4:	ee17 2a90 	vmov	r2, s15
 8010cd8:	eef0 7a40 	vmov.f32	s15, s0
 8010cdc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010ce0:	ee17 1a90 	vmov	r1, s15
 8010ce4:	b002      	add	sp, #8
 8010ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cea:	f011 ba71 	b.w	80221d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8010cee:	b513      	push	{r0, r1, r4, lr}
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8010cf4:	f005 fa4d 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010cf8:	eef0 7a60 	vmov.f32	s15, s1
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010d02:	ee17 2a90 	vmov	r2, s15
 8010d06:	eef0 7a40 	vmov.f32	s15, s0
 8010d0a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010d0e:	ee17 1a90 	vmov	r1, s15
 8010d12:	b002      	add	sp, #8
 8010d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d18:	f011 baa7 	b.w	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08010d1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8010d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d1e:	2400      	movs	r4, #0
 8010d20:	9f07      	ldr	r7, [sp, #28]
 8010d22:	f04f 0e01 	mov.w	lr, #1
 8010d26:	4626      	mov	r6, r4
 8010d28:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8010d2c:	4463      	add	r3, ip
 8010d2e:	4563      	cmp	r3, ip
 8010d30:	d02d      	beq.n	8010d8e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8010d32:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8010d36:	2d06      	cmp	r5, #6
 8010d38:	d8f9      	bhi.n	8010d2e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010d3a:	fa0e f505 	lsl.w	r5, lr, r5
 8010d3e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8010d42:	d10d      	bne.n	8010d60 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8010d44:	f015 0f10 	tst.w	r5, #16
 8010d48:	d117      	bne.n	8010d7a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8010d4a:	072d      	lsls	r5, r5, #28
 8010d4c:	d5ef      	bpl.n	8010d2e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010d4e:	3801      	subs	r0, #1
 8010d50:	b91e      	cbnz	r6, 8010d5a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8010d52:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8010d56:	682d      	ldr	r5, [r5, #0]
 8010d58:	600d      	str	r5, [r1, #0]
 8010d5a:	b96c      	cbnz	r4, 8010d78 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010d5c:	2601      	movs	r6, #1
 8010d5e:	e7e6      	b.n	8010d2e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010d60:	b926      	cbnz	r6, 8010d6c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8010d62:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8010d66:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8010d6a:	600b      	str	r3, [r1, #0]
 8010d6c:	b924      	cbnz	r4, 8010d78 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010d6e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010d72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d7a:	3801      	subs	r0, #1
 8010d7c:	b91c      	cbnz	r4, 8010d86 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8010d7e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8010d82:	6824      	ldr	r4, [r4, #0]
 8010d84:	6014      	str	r4, [r2, #0]
 8010d86:	2e00      	cmp	r6, #0
 8010d88:	d1f6      	bne.n	8010d78 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010d8a:	2401      	movs	r4, #1
 8010d8c:	e7cf      	b.n	8010d2e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010d8e:	b90e      	cbnz	r6, 8010d94 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8010d90:	2300      	movs	r3, #0
 8010d92:	600b      	str	r3, [r1, #0]
 8010d94:	2c00      	cmp	r4, #0
 8010d96:	d1ef      	bne.n	8010d78 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	e7ec      	b.n	8010d76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08010d9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	ed2d 8b0a 	vpush	{d8-d12}
 8010da2:	eef0 ba40 	vmov.f32	s23, s0
 8010da6:	4604      	mov	r4, r0
 8010da8:	eeb0 ca60 	vmov.f32	s24, s1
 8010dac:	460d      	mov	r5, r1
 8010dae:	eef0 aa41 	vmov.f32	s21, s2
 8010db2:	eeb0 ba61 	vmov.f32	s22, s3
 8010db6:	eeb0 9a42 	vmov.f32	s18, s4
 8010dba:	eef0 9a62 	vmov.f32	s19, s5
 8010dbe:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8010dc2:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8010dc6:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8010dca:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8010dce:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8010dd2:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8010dd6:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8010dda:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010dde:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8010de2:	f013 f907 	bl	8023ff4 <sqrtf>
 8010de6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dee:	d12e      	bne.n	8010e4e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8010df0:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8010df4:	ee39 7acb 	vsub.f32	s14, s19, s22
 8010df8:	eeb0 8a6a 	vmov.f32	s16, s21
 8010dfc:	eef0 8a4b 	vmov.f32	s17, s22
 8010e00:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8010e04:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8010e08:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8010e0c:	eee7 8aca 	vfms.f32	s17, s15, s20
 8010e10:	2d02      	cmp	r5, #2
 8010e12:	dc2f      	bgt.n	8010e74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8010e14:	3501      	adds	r5, #1
 8010e16:	eef0 1a4b 	vmov.f32	s3, s22
 8010e1a:	eeb0 1a6a 	vmov.f32	s2, s21
 8010e1e:	4620      	mov	r0, r4
 8010e20:	4629      	mov	r1, r5
 8010e22:	eef0 2a68 	vmov.f32	s5, s17
 8010e26:	eeb0 2a48 	vmov.f32	s4, s16
 8010e2a:	eef0 0a4c 	vmov.f32	s1, s24
 8010e2e:	eeb0 0a6b 	vmov.f32	s0, s23
 8010e32:	f7ff ffb3 	bl	8010d9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010e36:	eef0 0a68 	vmov.f32	s1, s17
 8010e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f7ff ff55 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010e44:	eeb0 ba68 	vmov.f32	s22, s17
 8010e48:	eef0 aa48 	vmov.f32	s21, s16
 8010e4c:	e7b9      	b.n	8010dc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8010e4e:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8010e52:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010e56:	ee78 8acc 	vsub.f32	s17, s17, s24
 8010e5a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8010e5e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010e62:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8010e66:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8010e6a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8010e6e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8010e72:	e7cd      	b.n	8010e10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8010e74:	eef0 0a68 	vmov.f32	s1, s17
 8010e78:	4620      	mov	r0, r4
 8010e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8010e7e:	f7ff ff36 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010e82:	ecbd 8b0a 	vpop	{d8-d12}
 8010e86:	bd38      	pop	{r3, r4, r5, pc}

08010e88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010e88:	b510      	push	{r4, lr}
 8010e8a:	ed2d 8b0a 	vpush	{d8-d12}
 8010e8e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010e92:	4604      	mov	r4, r0
 8010e94:	eeb0 ca40 	vmov.f32	s24, s0
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	eeb0 9a60 	vmov.f32	s18, s1
 8010e9e:	eef0 9a41 	vmov.f32	s19, s2
 8010ea2:	eef0 8a61 	vmov.f32	s17, s3
 8010ea6:	eeb0 ba42 	vmov.f32	s22, s4
 8010eaa:	eef0 ba62 	vmov.f32	s23, s5
 8010eae:	eeb0 aa43 	vmov.f32	s20, s6
 8010eb2:	eef0 aa63 	vmov.f32	s21, s7
 8010eb6:	eeb0 8a44 	vmov.f32	s16, s8
 8010eba:	eef0 ca64 	vmov.f32	s25, s9
 8010ebe:	d12c      	bne.n	8010f1a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8010ec0:	eef0 0a62 	vmov.f32	s1, s5
 8010ec4:	eeb0 0a42 	vmov.f32	s0, s4
 8010ec8:	f7ff ff11 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010ecc:	ee79 9acb 	vsub.f32	s19, s19, s22
 8010ed0:	ee7a caec 	vsub.f32	s25, s21, s25
 8010ed4:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010ed8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010edc:	ee69 9aac 	vmul.f32	s19, s19, s25
 8010ee0:	ee28 8a88 	vmul.f32	s16, s17, s16
 8010ee4:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	db0f      	blt.n	8010f0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8010eee:	2101      	movs	r1, #1
 8010ef0:	eef0 2a6a 	vmov.f32	s5, s21
 8010ef4:	eeb0 2a4a 	vmov.f32	s4, s20
 8010ef8:	4620      	mov	r0, r4
 8010efa:	eef0 1a6b 	vmov.f32	s3, s23
 8010efe:	eeb0 1a4b 	vmov.f32	s2, s22
 8010f02:	eef0 0a49 	vmov.f32	s1, s18
 8010f06:	eeb0 0a4c 	vmov.f32	s0, s24
 8010f0a:	f7ff ff47 	bl	8010d9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010f0e:	eef0 0a6a 	vmov.f32	s1, s21
 8010f12:	4620      	mov	r0, r4
 8010f14:	eeb0 0a4a 	vmov.f32	s0, s20
 8010f18:	e035      	b.n	8010f86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d138      	bne.n	8010f90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010f1e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8010f22:	ee33 6a48 	vsub.f32	s12, s6, s16
 8010f26:	ee71 7a42 	vsub.f32	s15, s2, s4
 8010f2a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8010f2e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8010f32:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010f36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3e:	d027      	beq.n	8010f90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010f40:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8010f44:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8010f48:	eea4 8a83 	vfma.f32	s16, s9, s6
 8010f4c:	eee1 8a22 	vfma.f32	s17, s2, s5
 8010f50:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8010f54:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010f58:	eee6 7a28 	vfma.f32	s15, s12, s17
 8010f5c:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8010f60:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010f64:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010f68:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8010f6c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8010f70:	ee39 9a60 	vsub.f32	s18, s18, s1
 8010f74:	ee29 9a09 	vmul.f32	s18, s18, s18
 8010f78:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8010f7c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f84:	db04      	blt.n	8010f90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010f86:	f7ff feb2 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010f8a:	ecbd 8b0a 	vpop	{d8-d12}
 8010f8e:	bd10      	pop	{r4, pc}
 8010f90:	eef0 0a6b 	vmov.f32	s1, s23
 8010f94:	4620      	mov	r0, r4
 8010f96:	eeb0 0a4b 	vmov.f32	s0, s22
 8010f9a:	f7ff fea8 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010f9e:	e7b6      	b.n	8010f0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08010fa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8010fa0:	b510      	push	{r4, lr}
 8010fa2:	ed2d 8b0c 	vpush	{d8-d13}
 8010fa6:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8010faa:	4604      	mov	r4, r0
 8010fac:	eeb0 9a40 	vmov.f32	s18, s0
 8010fb0:	eef0 9a60 	vmov.f32	s19, s1
 8010fb4:	eef0 aa41 	vmov.f32	s21, s2
 8010fb8:	eeb0 ba61 	vmov.f32	s22, s3
 8010fbc:	b933      	cbnz	r3, 8010fcc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8010fbe:	f7ff fe96 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010fc2:	eef0 0a4b 	vmov.f32	s1, s22
 8010fc6:	eeb0 0a6a 	vmov.f32	s0, s21
 8010fca:	e015      	b.n	8010ff8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8010fcc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	ee71 8a40 	vsub.f32	s17, s2, s0
 8010fd6:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8010fda:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010fde:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010fe2:	d10f      	bne.n	8011004 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8010fe4:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010fe8:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010fec:	f7ff fe7f 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010ff0:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8010ff4:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f7ff fe78 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010ffe:	ecbd 8b0c 	vpop	{d8-d13}
 8011002:	bd10      	pop	{r4, pc}
 8011004:	f7ff fe73 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011008:	eef0 0a69 	vmov.f32	s1, s19
 801100c:	eeb0 0a49 	vmov.f32	s0, s18
 8011010:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8011140 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8011014:	eeb1 aa68 	vneg.f32	s20, s17
 8011018:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8011144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 801101c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011020:	4620      	mov	r0, r4
 8011022:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011026:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8011148 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801102a:	eddf ca48 	vldr	s25, [pc, #288]	@ 801114c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 801102e:	ed9f da48 	vldr	s26, [pc, #288]	@ 8011150 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8011032:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8011036:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801103a:	f7ff fe58 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801103e:	eef0 0a69 	vmov.f32	s1, s19
 8011042:	eeb0 0a49 	vmov.f32	s0, s18
 8011046:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011154 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801104a:	4620      	mov	r0, r4
 801104c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011050:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011054:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8011058:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801105c:	f7ff fe47 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011060:	eef0 0a69 	vmov.f32	s1, s19
 8011064:	eeb0 0a49 	vmov.f32	s0, s18
 8011068:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011158 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801106c:	4620      	mov	r0, r4
 801106e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011072:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011076:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801107a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801107e:	f7ff fe36 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011082:	eef0 0a69 	vmov.f32	s1, s19
 8011086:	eeb0 0a49 	vmov.f32	s0, s18
 801108a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801115c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801108e:	4620      	mov	r0, r4
 8011090:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011094:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011098:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801109c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80110a0:	f7ff fe25 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80110a4:	ee79 0a88 	vadd.f32	s1, s19, s16
 80110a8:	ee39 0a28 	vadd.f32	s0, s18, s17
 80110ac:	4620      	mov	r0, r4
 80110ae:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80110b2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80110b6:	f7ff fe1a 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80110ba:	eef0 0a69 	vmov.f32	s1, s19
 80110be:	eeb0 0a49 	vmov.f32	s0, s18
 80110c2:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8011160 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80110c6:	4620      	mov	r0, r4
 80110c8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80110cc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80110d0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80110d4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80110d8:	f7ff fe09 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80110dc:	eef0 0a69 	vmov.f32	s1, s19
 80110e0:	eeb0 0a49 	vmov.f32	s0, s18
 80110e4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8011164 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80110e8:	4620      	mov	r0, r4
 80110ea:	eee8 0a27 	vfma.f32	s1, s16, s15
 80110ee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80110f2:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80110f6:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80110fa:	f7ff fdf8 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80110fe:	eef0 0a69 	vmov.f32	s1, s19
 8011102:	eeb0 0a49 	vmov.f32	s0, s18
 8011106:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8011168 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801110a:	4620      	mov	r0, r4
 801110c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011110:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011114:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8011118:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801111c:	f7ff fde7 	bl	8010cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011120:	eef0 0a69 	vmov.f32	s1, s19
 8011124:	eeb0 0a49 	vmov.f32	s0, s18
 8011128:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801116c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 801112c:	4620      	mov	r0, r4
 801112e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011132:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011136:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801113a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801113e:	e73e      	b.n	8010fbe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8011140:	3d23d70a 	.word	0x3d23d70a
 8011144:	3e8f5c29 	.word	0x3e8f5c29
 8011148:	3f19999a 	.word	0x3f19999a
 801114c:	3f4ccccd 	.word	0x3f4ccccd
 8011150:	3f75c28f 	.word	0x3f75c28f
 8011154:	3e4ccccd 	.word	0x3e4ccccd
 8011158:	3ecccccd 	.word	0x3ecccccd
 801115c:	3f3851ec 	.word	0x3f3851ec
 8011160:	3fa3d70a 	.word	0x3fa3d70a
 8011164:	3fcccccd 	.word	0x3fcccccd
 8011168:	3fe66666 	.word	0x3fe66666
 801116c:	3ffae148 	.word	0x3ffae148

08011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8011170:	b570      	push	{r4, r5, r6, lr}
 8011172:	ed2d 8b06 	vpush	{d8-d10}
 8011176:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801117a:	eef0 aa40 	vmov.f32	s21, s0
 801117e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8011182:	4604      	mov	r4, r0
 8011184:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8011188:	ee30 9a49 	vsub.f32	s18, s0, s18
 801118c:	eeb0 aa60 	vmov.f32	s20, s1
 8011190:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011194:	eea9 0a09 	vfma.f32	s0, s18, s18
 8011198:	f012 ff2c 	bl	8023ff4 <sqrtf>
 801119c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80111a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a4:	dd36      	ble.n	8011214 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80111a6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80111aa:	2600      	movs	r6, #0
 80111ac:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80111b0:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80111b4:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 80111b8:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80111bc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80111c0:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80111c4:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80111c8:	ee70 9a28 	vadd.f32	s19, s0, s17
 80111cc:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80111d0:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80111d4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80111d8:	b1fd      	cbz	r5, 801121a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80111da:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80111de:	eef0 0a49 	vmov.f32	s1, s18
 80111e2:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80111e6:	eeb0 0a69 	vmov.f32	s0, s19
 80111ea:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80111ee:	4620      	mov	r0, r4
 80111f0:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80111f4:	f7ff fd64 	bl	8010cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80111f8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80111fc:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8011200:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8011204:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8011208:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 801120c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8011210:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8011214:	ecbd 8b06 	vpop	{d8-d10}
 8011218:	bd70      	pop	{r4, r5, r6, pc}
 801121a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 801121e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8011222:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8011226:	b16b      	cbz	r3, 8011244 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8011228:	eef0 1a49 	vmov.f32	s3, s18
 801122c:	4620      	mov	r0, r4
 801122e:	eeb0 1a69 	vmov.f32	s2, s19
 8011232:	eef0 0a62 	vmov.f32	s1, s5
 8011236:	eeb0 0a42 	vmov.f32	s0, s4
 801123a:	f7ff feb1 	bl	8010fa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801123e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8011242:	e7db      	b.n	80111fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8011244:	eef0 4a48 	vmov.f32	s9, s16
 8011248:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801124c:	eeb0 4a68 	vmov.f32	s8, s17
 8011250:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8011254:	eef0 3a49 	vmov.f32	s7, s18
 8011258:	4620      	mov	r0, r4
 801125a:	eeb0 3a69 	vmov.f32	s6, s19
 801125e:	f7ff fe13 	bl	8010e88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8011262:	e7cb      	b.n	80111fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08011264 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8011264:	ee07 2a90 	vmov	s15, r2
 8011268:	ee07 1a10 	vmov	s14, r1
 801126c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8011270:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8011284 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8011274:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8011278:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801127c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011280:	f7ff bf76 	b.w	8011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011284:	3d000000 	.word	0x3d000000

08011288 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	ed2d 8b02 	vpush	{d8}
 801128e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8011292:	4604      	mov	r4, r0
 8011294:	b31d      	cbz	r5, 80112de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8011296:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801129a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801129e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80112a2:	ee78 8a67 	vsub.f32	s17, s16, s15
 80112a6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80112aa:	eef0 0a68 	vmov.f32	s1, s17
 80112ae:	f7ff fd07 	bl	8010cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80112b2:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80112b6:	eef0 1a48 	vmov.f32	s3, s16
 80112ba:	4620      	mov	r0, r4
 80112bc:	eeb0 0a41 	vmov.f32	s0, s2
 80112c0:	eef0 0a68 	vmov.f32	s1, s17
 80112c4:	f7ff fe6c 	bl	8010fa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80112c8:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80112cc:	eef0 1a68 	vmov.f32	s3, s17
 80112d0:	4620      	mov	r0, r4
 80112d2:	eef0 0a48 	vmov.f32	s1, s16
 80112d6:	eeb0 0a41 	vmov.f32	s0, s2
 80112da:	f7ff fe61 	bl	8010fa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80112de:	4628      	mov	r0, r5
 80112e0:	ecbd 8b02 	vpop	{d8}
 80112e4:	bd38      	pop	{r3, r4, r5, pc}

080112e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80112e6:	b510      	push	{r4, lr}
 80112e8:	ed2d 8b02 	vpush	{d8}
 80112ec:	4604      	mov	r4, r0
 80112ee:	eeb0 8a40 	vmov.f32	s16, s0
 80112f2:	eef0 8a60 	vmov.f32	s17, s1
 80112f6:	f7ff ffc7 	bl	8011288 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80112fa:	b9d0      	cbnz	r0, 8011332 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80112fc:	4620      	mov	r0, r4
 80112fe:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8011302:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8011306:	eef0 0a68 	vmov.f32	s1, s17
 801130a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801130e:	eeb0 0a48 	vmov.f32	s0, s16
 8011312:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8011316:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801131a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801131e:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8011322:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8011326:	f7ff fdaf 	bl	8010e88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801132a:	2001      	movs	r0, #1
 801132c:	ecbd 8b02 	vpop	{d8}
 8011330:	bd10      	pop	{r4, pc}
 8011332:	2000      	movs	r0, #0
 8011334:	e7fa      	b.n	801132c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08011336 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8011336:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801133a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801133e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8011342:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8011346:	f7ff be2b 	b.w	8010fa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0801134c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	b089      	sub	sp, #36	@ 0x24
 8011352:	461c      	mov	r4, r3
 8011354:	4682      	mov	sl, r0
 8011356:	4615      	mov	r5, r2
 8011358:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801135c:	f10d 0820 	add.w	r8, sp, #32
 8011360:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011362:	9304      	str	r3, [sp, #16]
 8011364:	2300      	movs	r3, #0
 8011366:	9105      	str	r1, [sp, #20]
 8011368:	9306      	str	r3, [sp, #24]
 801136a:	f848 3d04 	str.w	r3, [r8, #-4]!
 801136e:	9b04      	ldr	r3, [sp, #16]
 8011370:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8011374:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8011378:	9b05      	ldr	r3, [sp, #20]
 801137a:	429d      	cmp	r5, r3
 801137c:	d96d      	bls.n	801145a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801137e:	3d01      	subs	r5, #1
 8011380:	f819 3005 	ldrb.w	r3, [r9, r5]
 8011384:	2b06      	cmp	r3, #6
 8011386:	d8f7      	bhi.n	8011378 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8011388:	a201      	add	r2, pc, #4	@ (adr r2, 8011390 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138e:	bf00      	nop
 8011390:	080113af 	.word	0x080113af
 8011394:	08011379 	.word	0x08011379
 8011398:	080113ad 	.word	0x080113ad
 801139c:	080113d1 	.word	0x080113d1
 80113a0:	080113d1 	.word	0x080113d1
 80113a4:	080113d5 	.word	0x080113d5
 80113a8:	08011415 	.word	0x08011415
 80113ac:	3c02      	subs	r4, #2
 80113ae:	4650      	mov	r0, sl
 80113b0:	9400      	str	r4, [sp, #0]
 80113b2:	462b      	mov	r3, r5
 80113b4:	4642      	mov	r2, r8
 80113b6:	a906      	add	r1, sp, #24
 80113b8:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80113bc:	f7ff fcae 	bl	8010d1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80113c0:	eddd 0a07 	vldr	s1, [sp, #28]
 80113c4:	ed9d 0a06 	vldr	s0, [sp, #24]
 80113c8:	4630      	mov	r0, r6
 80113ca:	f7ff fed1 	bl	8011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80113ce:	e7d3      	b.n	8011378 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80113d0:	3c01      	subs	r4, #1
 80113d2:	e7ec      	b.n	80113ae <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80113d4:	f1a4 0b04 	sub.w	fp, r4, #4
 80113d8:	3c02      	subs	r4, #2
 80113da:	4650      	mov	r0, sl
 80113dc:	462b      	mov	r3, r5
 80113de:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80113e2:	f8cd b000 	str.w	fp, [sp]
 80113e6:	4642      	mov	r2, r8
 80113e8:	a906      	add	r1, sp, #24
 80113ea:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80113ee:	f7ff fc95 	bl	8010d1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80113f2:	eddd 2a07 	vldr	s5, [sp, #28]
 80113f6:	ed9d 2a06 	vldr	s4, [sp, #24]
 80113fa:	4630      	mov	r0, r6
 80113fc:	ed54 1a01 	vldr	s3, [r4, #-4]
 8011400:	ed14 1a02 	vldr	s2, [r4, #-8]
 8011404:	edd4 0a01 	vldr	s1, [r4, #4]
 8011408:	ed94 0a00 	vldr	s0, [r4]
 801140c:	f7ff fc1a 	bl	8010c44 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8011410:	465c      	mov	r4, fp
 8011412:	e7b1      	b.n	8011378 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8011414:	f1a4 0b06 	sub.w	fp, r4, #6
 8011418:	3c02      	subs	r4, #2
 801141a:	4650      	mov	r0, sl
 801141c:	462b      	mov	r3, r5
 801141e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8011422:	f8cd b000 	str.w	fp, [sp]
 8011426:	4642      	mov	r2, r8
 8011428:	a906      	add	r1, sp, #24
 801142a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801142e:	f7ff fc75 	bl	8010d1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8011432:	eddd 3a07 	vldr	s7, [sp, #28]
 8011436:	ed9d 3a06 	vldr	s6, [sp, #24]
 801143a:	4630      	mov	r0, r6
 801143c:	ed54 2a03 	vldr	s5, [r4, #-12]
 8011440:	ed14 2a04 	vldr	s4, [r4, #-16]
 8011444:	ed54 1a01 	vldr	s3, [r4, #-4]
 8011448:	ed14 1a02 	vldr	s2, [r4, #-8]
 801144c:	edd4 0a01 	vldr	s1, [r4, #4]
 8011450:	ed94 0a00 	vldr	s0, [r4]
 8011454:	f7ff fc15 	bl	8010c82 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011458:	e7da      	b.n	8011410 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801145a:	9b04      	ldr	r3, [sp, #16]
 801145c:	b113      	cbz	r3, 8011464 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ff69 	bl	8011336 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8011464:	b009      	add	sp, #36	@ 0x24
 8011466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146a:	bf00      	nop

0801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801146c:	eef0 7a60 	vmov.f32	s15, s1
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011478:	ee17 2a90 	vmov	r2, s15
 801147c:	eef0 7a40 	vmov.f32	s15, s0
 8011480:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011484:	ee17 1a90 	vmov	r1, s15
 8011488:	4718      	bx	r3
	...

0801148c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801148c:	4b04      	ldr	r3, [pc, #16]	@ (80114a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801148e:	b510      	push	{r4, lr}
 8011490:	4604      	mov	r4, r0
 8011492:	f840 3b14 	str.w	r3, [r0], #20
 8011496:	f001 f95f 	bl	8012758 <_ZN8touchgfx7OutlineD1Ev>
 801149a:	4620      	mov	r0, r4
 801149c:	bd10      	pop	{r4, pc}
 801149e:	bf00      	nop
 80114a0:	08028d40 	.word	0x08028d40

080114a4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a8:	ed2d 8b04 	vpush	{d8-d9}
 80114ac:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80114b0:	b0b5      	sub	sp, #212	@ 0xd4
 80114b2:	4605      	mov	r5, r0
 80114b4:	468b      	mov	fp, r1
 80114b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114ba:	9206      	str	r2, [sp, #24]
 80114bc:	461e      	mov	r6, r3
 80114be:	2400      	movs	r4, #0
 80114c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c4:	f240 814f 	bls.w	8011766 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80114c8:	23ff      	movs	r3, #255	@ 0xff
 80114ca:	1d02      	adds	r2, r0, #4
 80114cc:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 801176c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80114d0:	f04f 0800 	mov.w	r8, #0
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	af08      	add	r7, sp, #32
 80114d8:	6981      	ldr	r1, [r0, #24]
 80114da:	a808      	add	r0, sp, #32
 80114dc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80114de:	eef0 9a49 	vmov.f32	s19, s18
 80114e2:	f010 fd29 	bl	8021f38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80114e6:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80114ea:	4ba1      	ldr	r3, [pc, #644]	@ (8011770 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80114ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80114f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114f4:	2201      	movs	r2, #1
 80114f6:	9308      	str	r3, [sp, #32]
 80114f8:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80114fc:	edd5 6a08 	vldr	s13, [r5, #32]
 8011500:	eeb0 8a49 	vmov.f32	s16, s18
 8011504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011508:	9325      	str	r3, [sp, #148]	@ 0x94
 801150a:	f04f 0300 	mov.w	r3, #0
 801150e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8011512:	7f6a      	ldrb	r2, [r5, #29]
 8011514:	eef0 8a49 	vmov.f32	s17, s18
 8011518:	bf48      	it	mi
 801151a:	eef1 7a67 	vnegmi.f32	s15, s15
 801151e:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8011522:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8011526:	46c1      	mov	r9, r8
 8011528:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801152c:	f04f 0a01 	mov.w	sl, #1
 8011530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011534:	7fab      	ldrb	r3, [r5, #30]
 8011536:	942a      	str	r4, [sp, #168]	@ 0xa8
 8011538:	435a      	muls	r2, r3
 801153a:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801153e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011542:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8011546:	1c53      	adds	r3, r2, #1
 8011548:	942b      	str	r4, [sp, #172]	@ 0xac
 801154a:	942c      	str	r4, [sp, #176]	@ 0xb0
 801154c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011550:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011554:	942d      	str	r4, [sp, #180]	@ 0xb4
 8011556:	942e      	str	r4, [sp, #184]	@ 0xb8
 8011558:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011560:	942f      	str	r4, [sp, #188]	@ 0xbc
 8011562:	9430      	str	r4, [sp, #192]	@ 0xc0
 8011564:	9431      	str	r4, [sp, #196]	@ 0xc4
 8011566:	9432      	str	r4, [sp, #200]	@ 0xc8
 8011568:	9433      	str	r4, [sp, #204]	@ 0xcc
 801156a:	4644      	mov	r4, r8
 801156c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8011570:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8011574:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8011578:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 801157c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8011580:	9b06      	ldr	r3, [sp, #24]
 8011582:	454b      	cmp	r3, r9
 8011584:	f000 80cc 	beq.w	8011720 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8011588:	f109 0301 	add.w	r3, r9, #1
 801158c:	9305      	str	r3, [sp, #20]
 801158e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011592:	2b06      	cmp	r3, #6
 8011594:	d839      	bhi.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011596:	e8df f003 	tbb	[pc, r3]
 801159a:	3b04      	.short	0x3b04
 801159c:	817c6f60 	.word	0x817c6f60
 80115a0:	a0          	.byte	0xa0
 80115a1:	00          	.byte	0x00
 80115a2:	45c1      	cmp	r9, r8
 80115a4:	d92b      	bls.n	80115fe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80115a6:	eef0 0a49 	vmov.f32	s1, s18
 80115aa:	4638      	mov	r0, r7
 80115ac:	eeb0 0a69 	vmov.f32	s0, s19
 80115b0:	f7ff fdde 	bl	8011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80115b4:	4638      	mov	r0, r7
 80115b6:	f7ff fe67 	bl	8011288 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80115ba:	4681      	mov	r9, r0
 80115bc:	b9f8      	cbnz	r0, 80115fe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80115be:	eef0 0a49 	vmov.f32	s1, s18
 80115c2:	4638      	mov	r0, r7
 80115c4:	eeb0 0a69 	vmov.f32	s0, s19
 80115c8:	f7ff fe8d 	bl	80112e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80115cc:	4628      	mov	r0, r5
 80115ce:	4623      	mov	r3, r4
 80115d0:	9a05      	ldr	r2, [sp, #20]
 80115d2:	4641      	mov	r1, r8
 80115d4:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80115d8:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80115dc:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80115e0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80115e4:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80115e8:	e9cd b600 	strd	fp, r6, [sp]
 80115ec:	f7ff feae 	bl	801134c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80115f0:	eef0 0a49 	vmov.f32	s1, s18
 80115f4:	eeb0 0a69 	vmov.f32	s0, s19
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7ff fe74 	bl	80112e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80115fe:	eeb0 8a49 	vmov.f32	s16, s18
 8011602:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011606:	eef0 8a69 	vmov.f32	s17, s19
 801160a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801160e:	e7b7      	b.n	8011580 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8011610:	45c1      	cmp	r9, r8
 8011612:	d90d      	bls.n	8011630 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011614:	4638      	mov	r0, r7
 8011616:	f7ff fe37 	bl	8011288 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801161a:	b948      	cbnz	r0, 8011630 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801161c:	4623      	mov	r3, r4
 801161e:	464a      	mov	r2, r9
 8011620:	4641      	mov	r1, r8
 8011622:	4628      	mov	r0, r5
 8011624:	e9cd a702 	strd	sl, r7, [sp, #8]
 8011628:	e9cd b600 	strd	fp, r6, [sp]
 801162c:	f7ff fe8e 	bl	801134c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011630:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011634:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8011638:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801163c:	3402      	adds	r4, #2
 801163e:	edd3 8a00 	vldr	s17, [r3]
 8011642:	46c8      	mov	r8, r9
 8011644:	ed93 8a01 	vldr	s16, [r3, #4]
 8011648:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 801164c:	eef0 9a68 	vmov.f32	s19, s17
 8011650:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8011654:	eeb0 9a48 	vmov.f32	s18, s16
 8011658:	e7d7      	b.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801165a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801165e:	4638      	mov	r0, r7
 8011660:	3402      	adds	r4, #2
 8011662:	edd3 8a00 	vldr	s17, [r3]
 8011666:	ed93 8a01 	vldr	s16, [r3, #4]
 801166a:	eeb0 0a68 	vmov.f32	s0, s17
 801166e:	eef0 0a48 	vmov.f32	s1, s16
 8011672:	f7ff fd7d 	bl	8011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011676:	e7c8      	b.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011678:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801167c:	edd3 8a00 	vldr	s17, [r3]
 8011680:	eef0 0a48 	vmov.f32	s1, s16
 8011684:	4638      	mov	r0, r7
 8011686:	eeb0 0a68 	vmov.f32	s0, s17
 801168a:	3401      	adds	r4, #1
 801168c:	f7ff fd70 	bl	8011170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011690:	e7bb      	b.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011692:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011696:	ed93 8a00 	vldr	s16, [r3]
 801169a:	e7f1      	b.n	8011680 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 801169c:	00a3      	lsls	r3, r4, #2
 801169e:	eef0 0a48 	vmov.f32	s1, s16
 80116a2:	eeb0 0a68 	vmov.f32	s0, s17
 80116a6:	4638      	mov	r0, r7
 80116a8:	f103 0208 	add.w	r2, r3, #8
 80116ac:	f103 090c 	add.w	r9, r3, #12
 80116b0:	4433      	add	r3, r6
 80116b2:	3404      	adds	r4, #4
 80116b4:	4432      	add	r2, r6
 80116b6:	44b1      	add	r9, r6
 80116b8:	edd3 1a01 	vldr	s3, [r3, #4]
 80116bc:	ed92 2a00 	vldr	s4, [r2]
 80116c0:	edd9 2a00 	vldr	s5, [r9]
 80116c4:	ed93 1a00 	vldr	s2, [r3]
 80116c8:	9207      	str	r2, [sp, #28]
 80116ca:	f7ff fabb 	bl	8010c44 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80116ce:	9a07      	ldr	r2, [sp, #28]
 80116d0:	ed99 8a00 	vldr	s16, [r9]
 80116d4:	edd2 8a00 	vldr	s17, [r2]
 80116d8:	e797      	b.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80116da:	00a3      	lsls	r3, r4, #2
 80116dc:	eef0 0a48 	vmov.f32	s1, s16
 80116e0:	eeb0 0a68 	vmov.f32	s0, s17
 80116e4:	4638      	mov	r0, r7
 80116e6:	f103 0210 	add.w	r2, r3, #16
 80116ea:	f103 0914 	add.w	r9, r3, #20
 80116ee:	4433      	add	r3, r6
 80116f0:	3406      	adds	r4, #6
 80116f2:	4432      	add	r2, r6
 80116f4:	44b1      	add	r9, r6
 80116f6:	edd3 2a03 	vldr	s5, [r3, #12]
 80116fa:	ed92 3a00 	vldr	s6, [r2]
 80116fe:	edd9 3a00 	vldr	s7, [r9]
 8011702:	ed93 2a02 	vldr	s4, [r3, #8]
 8011706:	edd3 1a01 	vldr	s3, [r3, #4]
 801170a:	ed93 1a00 	vldr	s2, [r3]
 801170e:	9207      	str	r2, [sp, #28]
 8011710:	f7ff fab7 	bl	8010c82 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011714:	9a07      	ldr	r2, [sp, #28]
 8011716:	ed99 8a00 	vldr	s16, [r9]
 801171a:	edd2 8a00 	vldr	s17, [r2]
 801171e:	e774      	b.n	801160a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011720:	9b06      	ldr	r3, [sp, #24]
 8011722:	af08      	add	r7, sp, #32
 8011724:	4543      	cmp	r3, r8
 8011726:	d90f      	bls.n	8011748 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8011728:	4638      	mov	r0, r7
 801172a:	f7ff fdad 	bl	8011288 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801172e:	b958      	cbnz	r0, 8011748 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8011730:	2301      	movs	r3, #1
 8011732:	9703      	str	r7, [sp, #12]
 8011734:	f8cd b000 	str.w	fp, [sp]
 8011738:	4641      	mov	r1, r8
 801173a:	9a06      	ldr	r2, [sp, #24]
 801173c:	4628      	mov	r0, r5
 801173e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8011742:	4623      	mov	r3, r4
 8011744:	f7ff fe02 	bl	801134c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011748:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 801174c:	4638      	mov	r0, r7
 801174e:	f010 fc87 	bl	8022060 <_ZN8touchgfx6Canvas6renderEh>
 8011752:	4604      	mov	r4, r0
 8011754:	4638      	mov	r0, r7
 8011756:	f7ff fe99 	bl	801148c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801175a:	4620      	mov	r0, r4
 801175c:	b035      	add	sp, #212	@ 0xd4
 801175e:	ecbd 8b04 	vpop	{d8-d9}
 8011762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011766:	2401      	movs	r4, #1
 8011768:	e7f7      	b.n	801175a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801176a:	bf00      	nop
 801176c:	00000000 	.word	0x00000000
 8011770:	080285d8 	.word	0x080285d8

08011774 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8011774:	b510      	push	{r4, lr}
 8011776:	4604      	mov	r4, r0
 8011778:	f7ff fe88 	bl	801148c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801177c:	21b0      	movs	r1, #176	@ 0xb0
 801177e:	4620      	mov	r0, r4
 8011780:	f012 fc0d 	bl	8023f9e <_ZdlPvj>
 8011784:	4620      	mov	r0, r4
 8011786:	bd10      	pop	{r4, pc}

08011788 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8011788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801178c:	4698      	mov	r8, r3
 801178e:	23ff      	movs	r3, #255	@ 0xff
 8011790:	4607      	mov	r7, r0
 8011792:	4689      	mov	r9, r1
 8011794:	4692      	mov	sl, r2
 8011796:	1d02      	adds	r2, r0, #4
 8011798:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801179c:	2400      	movs	r4, #0
 801179e:	44ca      	add	sl, r9
 80117a0:	ed2d 8b06 	vpush	{d8-d10}
 80117a4:	b0aa      	sub	sp, #168	@ 0xa8
 80117a6:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 80119ac <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	eef0 8a48 	vmov.f32	s17, s16
 80117b0:	6981      	ldr	r1, [r0, #24]
 80117b2:	a80d      	add	r0, sp, #52	@ 0x34
 80117b4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80117b6:	f010 fbbf 	bl	8021f38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80117ba:	7f3b      	ldrb	r3, [r7, #28]
 80117bc:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 80119ac <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80117c0:	4628      	mov	r0, r5
 80117c2:	1e5a      	subs	r2, r3, #1
 80117c4:	eeb0 0a60 	vmov.f32	s0, s1
 80117c8:	4253      	negs	r3, r2
 80117ca:	4153      	adcs	r3, r2
 80117cc:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80117d0:	f004 fcdf 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80117d4:	eeb0 9a40 	vmov.f32	s18, s0
 80117d8:	eef0 9a60 	vmov.f32	s19, s1
 80117dc:	45ca      	cmp	sl, r9
 80117de:	f000 80cd 	beq.w	801197c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80117e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80117e6:	2b06      	cmp	r3, #6
 80117e8:	d8f8      	bhi.n	80117dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80117ea:	e8df f003 	tbb	[pc, r3]
 80117ee:	0804      	.short	0x0804
 80117f0:	58533f2a 	.word	0x58533f2a
 80117f4:	8a          	.byte	0x8a
 80117f5:	00          	.byte	0x00
 80117f6:	a80d      	add	r0, sp, #52	@ 0x34
 80117f8:	f010 fc10 	bl	802201c <_ZN8touchgfx6Canvas5closeEv>
 80117fc:	e7ee      	b.n	80117dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80117fe:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011802:	4628      	mov	r0, r5
 8011804:	ed93 8a01 	vldr	s16, [r3, #4]
 8011808:	edd3 8a00 	vldr	s17, [r3]
 801180c:	eef0 0a48 	vmov.f32	s1, s16
 8011810:	eeb0 0a68 	vmov.f32	s0, s17
 8011814:	f004 fcbd 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011818:	a80d      	add	r0, sp, #52	@ 0x34
 801181a:	eef0 7a60 	vmov.f32	s15, s1
 801181e:	eeb0 9a40 	vmov.f32	s18, s0
 8011822:	eef0 9a60 	vmov.f32	s19, s1
 8011826:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801182a:	ee17 2a90 	vmov	r2, s15
 801182e:	eef0 7a40 	vmov.f32	s15, s0
 8011832:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011836:	ee17 1a90 	vmov	r1, s15
 801183a:	f010 fcc9 	bl	80221d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801183e:	3402      	adds	r4, #2
 8011840:	e7cc      	b.n	80117dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011842:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011846:	4628      	mov	r0, r5
 8011848:	edd3 8a00 	vldr	s17, [r3]
 801184c:	ed93 8a01 	vldr	s16, [r3, #4]
 8011850:	eeb0 0a68 	vmov.f32	s0, s17
 8011854:	eef0 0a48 	vmov.f32	s1, s16
 8011858:	f004 fc9b 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801185c:	a80d      	add	r0, sp, #52	@ 0x34
 801185e:	eeb0 9a40 	vmov.f32	s18, s0
 8011862:	eef0 9a60 	vmov.f32	s19, s1
 8011866:	f7ff fe01 	bl	801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801186a:	e7e8      	b.n	801183e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801186c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011870:	edd3 8a00 	vldr	s17, [r3]
 8011874:	eef0 0a48 	vmov.f32	s1, s16
 8011878:	4628      	mov	r0, r5
 801187a:	eeb0 0a68 	vmov.f32	s0, s17
 801187e:	3401      	adds	r4, #1
 8011880:	f004 fc87 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011884:	a80d      	add	r0, sp, #52	@ 0x34
 8011886:	eef0 9a60 	vmov.f32	s19, s1
 801188a:	eeb0 9a40 	vmov.f32	s18, s0
 801188e:	f7ff fded 	bl	801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8011892:	e7a3      	b.n	80117dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011894:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011898:	ed93 8a00 	vldr	s16, [r3]
 801189c:	e7ea      	b.n	8011874 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801189e:	1ca3      	adds	r3, r4, #2
 80118a0:	4628      	mov	r0, r5
 80118a2:	3404      	adds	r4, #4
 80118a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80118a8:	ed53 0a01 	vldr	s1, [r3, #-4]
 80118ac:	ed13 0a02 	vldr	s0, [r3, #-8]
 80118b0:	edd3 8a00 	vldr	s17, [r3]
 80118b4:	ed93 8a01 	vldr	s16, [r3, #4]
 80118b8:	f004 fc6b 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80118bc:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80118c0:	eeb0 0a68 	vmov.f32	s0, s17
 80118c4:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80118c8:	eef0 0a48 	vmov.f32	s1, s16
 80118cc:	4628      	mov	r0, r5
 80118ce:	f004 fc60 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80118d2:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 80118d6:	eef0 2a60 	vmov.f32	s5, s1
 80118da:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 80118de:	eeb0 2a40 	vmov.f32	s4, s0
 80118e2:	a80d      	add	r0, sp, #52	@ 0x34
 80118e4:	eeb0 aa40 	vmov.f32	s20, s0
 80118e8:	eef0 aa60 	vmov.f32	s21, s1
 80118ec:	eeb0 0a49 	vmov.f32	s0, s18
 80118f0:	eef0 0a69 	vmov.f32	s1, s19
 80118f4:	f7ff f9a6 	bl	8010c44 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80118f8:	eef0 9a6a 	vmov.f32	s19, s21
 80118fc:	eeb0 9a4a 	vmov.f32	s18, s20
 8011900:	e76c      	b.n	80117dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011902:	1d26      	adds	r6, r4, #4
 8011904:	4628      	mov	r0, r5
 8011906:	3406      	adds	r4, #6
 8011908:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801190c:	ed56 0a03 	vldr	s1, [r6, #-12]
 8011910:	ed16 0a04 	vldr	s0, [r6, #-16]
 8011914:	edd6 8a00 	vldr	s17, [r6]
 8011918:	ed96 8a01 	vldr	s16, [r6, #4]
 801191c:	f004 fc39 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011920:	ed8d 0a07 	vstr	s0, [sp, #28]
 8011924:	4628      	mov	r0, r5
 8011926:	ed16 0a02 	vldr	s0, [r6, #-8]
 801192a:	edcd 0a08 	vstr	s1, [sp, #32]
 801192e:	ed56 0a01 	vldr	s1, [r6, #-4]
 8011932:	f004 fc2e 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011936:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801193a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801193e:	eeb0 0a68 	vmov.f32	s0, s17
 8011942:	eef0 0a48 	vmov.f32	s1, s16
 8011946:	4628      	mov	r0, r5
 8011948:	f004 fc23 	bl	8016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801194c:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8011950:	eeb0 3a40 	vmov.f32	s6, s0
 8011954:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8011958:	eef0 3a60 	vmov.f32	s7, s1
 801195c:	eddd 1a08 	vldr	s3, [sp, #32]
 8011960:	eeb0 aa40 	vmov.f32	s20, s0
 8011964:	ed9d 1a07 	vldr	s2, [sp, #28]
 8011968:	eef0 aa60 	vmov.f32	s21, s1
 801196c:	a80d      	add	r0, sp, #52	@ 0x34
 801196e:	eef0 0a69 	vmov.f32	s1, s19
 8011972:	eeb0 0a49 	vmov.f32	s0, s18
 8011976:	f7ff f984 	bl	8010c82 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801197a:	e7bd      	b.n	80118f8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801197c:	7f7b      	ldrb	r3, [r7, #29]
 801197e:	a80d      	add	r0, sp, #52	@ 0x34
 8011980:	7fb9      	ldrb	r1, [r7, #30]
 8011982:	4359      	muls	r1, r3
 8011984:	1c4b      	adds	r3, r1, #1
 8011986:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801198a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801198e:	f010 fb67 	bl	8022060 <_ZN8touchgfx6Canvas6renderEh>
 8011992:	4b07      	ldr	r3, [pc, #28]	@ (80119b0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8011994:	4604      	mov	r4, r0
 8011996:	a812      	add	r0, sp, #72	@ 0x48
 8011998:	930d      	str	r3, [sp, #52]	@ 0x34
 801199a:	f000 fedd 	bl	8012758 <_ZN8touchgfx7OutlineD1Ev>
 801199e:	4620      	mov	r0, r4
 80119a0:	b02a      	add	sp, #168	@ 0xa8
 80119a2:	ecbd 8b06 	vpop	{d8-d10}
 80119a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119aa:	bf00      	nop
 80119ac:	00000000 	.word	0x00000000
 80119b0:	08028d40 	.word	0x08028d40

080119b4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80119b4:	b410      	push	{r4}
 80119b6:	7f04      	ldrb	r4, [r0, #28]
 80119b8:	b11c      	cbz	r4, 80119c2 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 80119ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119be:	f7ff bee3 	b.w	8011788 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 80119c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c6:	f7ff bd6d 	b.w	80114a4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

080119cc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 80119cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	4691      	mov	r9, r2
 80119d2:	4602      	mov	r2, r0
 80119d4:	b085      	sub	sp, #20
 80119d6:	4605      	mov	r5, r0
 80119d8:	f852 0f26 	ldr.w	r0, [r2, #38]!
 80119dc:	4688      	mov	r8, r1
 80119de:	469a      	mov	sl, r3
 80119e0:	ab02      	add	r3, sp, #8
 80119e2:	6851      	ldr	r1, [r2, #4]
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80119ea:	c303      	stmia	r3!, {r0, r1}
 80119ec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	dd08      	ble.n	8011a06 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80119f4:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80119f8:	2c00      	cmp	r4, #0
 80119fa:	dd04      	ble.n	8011a06 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80119fc:	4a2e      	ldr	r2, [pc, #184]	@ (8011ab8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 80119fe:	7812      	ldrb	r2, [r2, #0]
 8011a00:	b122      	cbz	r2, 8011a0c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8011a02:	2a01      	cmp	r2, #1
 8011a04:	d02d      	beq.n	8011a62 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8011a06:	b005      	add	sp, #20
 8011a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011a10:	441c      	add	r4, r3
 8011a12:	b2a4      	uxth	r4, r4
 8011a14:	b226      	sxth	r6, r4
 8011a16:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011a1a:	42b3      	cmp	r3, r6
 8011a1c:	daf3      	bge.n	8011a06 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011a1e:	4653      	mov	r3, sl
 8011a20:	464a      	mov	r2, r9
 8011a22:	4641      	mov	r1, r8
 8011a24:	4628      	mov	r0, r5
 8011a26:	e9cd b700 	strd	fp, r7, [sp]
 8011a2a:	f7ff ffc3 	bl	80119b4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8011a2e:	b940      	cbnz	r0, 8011a42 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8011a30:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d004      	beq.n	8011a42 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8011a38:	3301      	adds	r3, #1
 8011a3a:	105b      	asrs	r3, r3, #1
 8011a3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011a40:	e7ed      	b.n	8011a1e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8011a42:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011a46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	441a      	add	r2, r3
 8011a50:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011a54:	b212      	sxth	r2, r2
 8011a56:	4296      	cmp	r6, r2
 8011a58:	dadd      	bge.n	8011a16 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8011a5a:	1ae3      	subs	r3, r4, r3
 8011a5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011a60:	e7d9      	b.n	8011a16 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8011a62:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8011a66:	441c      	add	r4, r3
 8011a68:	b2a4      	uxth	r4, r4
 8011a6a:	b226      	sxth	r6, r4
 8011a6c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011a70:	42b3      	cmp	r3, r6
 8011a72:	dac8      	bge.n	8011a06 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011a74:	4653      	mov	r3, sl
 8011a76:	464a      	mov	r2, r9
 8011a78:	4641      	mov	r1, r8
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	e9cd b700 	strd	fp, r7, [sp]
 8011a80:	f7ff ff98 	bl	80119b4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8011a84:	b940      	cbnz	r0, 8011a98 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8011a86:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d004      	beq.n	8011a98 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8011a8e:	3301      	adds	r3, #1
 8011a90:	105b      	asrs	r3, r3, #1
 8011a92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a96:	e7ed      	b.n	8011a74 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8011a98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011a9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	441a      	add	r2, r3
 8011aa6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011aaa:	b212      	sxth	r2, r2
 8011aac:	4296      	cmp	r6, r2
 8011aae:	dadd      	bge.n	8011a6c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8011ab0:	1ae3      	subs	r3, r4, r3
 8011ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011ab6:	e7d9      	b.n	8011a6c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8011ab8:	240253ac 	.word	0x240253ac

08011abc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011abc:	0c0b      	lsrs	r3, r1, #16
 8011abe:	60c1      	str	r1, [r0, #12]
 8011ac0:	7481      	strb	r1, [r0, #18]
 8011ac2:	7403      	strb	r3, [r0, #16]
 8011ac4:	0a0b      	lsrs	r3, r1, #8
 8011ac6:	7443      	strb	r3, [r0, #17]
 8011ac8:	4770      	bx	lr

08011aca <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011aca:	f1a0 0008 	sub.w	r0, r0, #8
 8011ace:	e7f5      	b.n	8011abc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08011ad0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8011ad0:	b508      	push	{r3, lr}
 8011ad2:	4b05      	ldr	r3, [pc, #20]	@ (8011ae8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8011ad4:	6818      	ldr	r0, [r3, #0]
 8011ad6:	6803      	ldr	r3, [r0, #0]
 8011ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011adc:	4798      	blx	r3
 8011ade:	1e43      	subs	r3, r0, #1
 8011ae0:	4258      	negs	r0, r3
 8011ae2:	4158      	adcs	r0, r3
 8011ae4:	bd08      	pop	{r3, pc}
 8011ae6:	bf00      	nop
 8011ae8:	240253b4 	.word	0x240253b4

08011aec <_ZN8touchgfx13PainterRGB888D1Ev>:
 8011aec:	4770      	bx	lr

08011aee <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8011aee:	3808      	subs	r0, #8
 8011af0:	4770      	bx	lr

08011af2 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8011af2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011af6:	b410      	push	{r4}
 8011af8:	188c      	adds	r4, r1, r2
 8011afa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011afe:	68c2      	ldr	r2, [r0, #12]
 8011b00:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011b04:	4620      	mov	r0, r4
 8011b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b0a:	f7f1 bb15 	b.w	8003138 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08011b0e <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8011b0e:	f7f1 baef 	b.w	80030f0 <_ZN8touchgfx5paint8tearDownEv>

08011b12 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011b12:	b510      	push	{r4, lr}
 8011b14:	4604      	mov	r4, r0
 8011b16:	2114      	movs	r1, #20
 8011b18:	f012 fa41 	bl	8023f9e <_ZdlPvj>
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	bd10      	pop	{r4, pc}

08011b20 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8011b20:	f1a0 0008 	sub.w	r0, r0, #8
 8011b24:	e7f5      	b.n	8011b12 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08011b28 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8011b28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b30:	4411      	add	r1, r2
 8011b32:	7c42      	ldrb	r2, [r0, #17]
 8011b34:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8011b38:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8011b3c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8011b40:	2a00      	cmp	r2, #0
 8011b42:	f000 8084 	beq.w	8011c4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8011b46:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011b4a:	ed90 7a08 	vldr	s14, [r0, #32]
 8011b4e:	42a2      	cmp	r2, r4
 8011b50:	68c3      	ldr	r3, [r0, #12]
 8011b52:	db20      	blt.n	8011b96 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8011b54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011b58:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b60:	bfc8      	it	gt
 8011b62:	2200      	movgt	r2, #0
 8011b64:	589a      	ldr	r2, [r3, r2]
 8011b66:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011b6a:	7c03      	ldrb	r3, [r0, #16]
 8011b6c:	fa5f fc82 	uxtb.w	ip, r2
 8011b70:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011b74:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8011b78:	440e      	add	r6, r1
 8011b7a:	b36b      	cbz	r3, 8011bd8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011b7c:	2dff      	cmp	r5, #255	@ 0xff
 8011b7e:	d12b      	bne.n	8011bd8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011b80:	42b1      	cmp	r1, r6
 8011b82:	f080 8204 	bcs.w	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011b86:	f881 c000 	strb.w	ip, [r1]
 8011b8a:	3103      	adds	r1, #3
 8011b8c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8011b90:	f801 4c01 	strb.w	r4, [r1, #-1]
 8011b94:	e7f4      	b.n	8011b80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8011b96:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8011b9a:	42a7      	cmp	r7, r4
 8011b9c:	dc08      	bgt.n	8011bb0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8011b9e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011ba2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011baa:	bfd8      	it	le
 8011bac:	2200      	movle	r2, #0
 8011bae:	e7d9      	b.n	8011b64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8011bb0:	1aa2      	subs	r2, r4, r2
 8011bb2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011bb6:	ee07 2a90 	vmov	s15, r2
 8011bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bca:	ee17 2a90 	vmov	r2, s15
 8011bce:	bfd8      	it	le
 8011bd0:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8011bd4:	0092      	lsls	r2, r2, #2
 8011bd6:	e7c5      	b.n	8011b64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8011bd8:	0e12      	lsrs	r2, r2, #24
 8011bda:	4355      	muls	r5, r2
 8011bdc:	1c6a      	adds	r2, r5, #1
 8011bde:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8011be2:	122d      	asrs	r5, r5, #8
 8011be4:	43e8      	mvns	r0, r5
 8011be6:	b2ad      	uxth	r5, r5
 8011be8:	fb1c fc05 	smulbb	ip, ip, r5
 8011bec:	b2c0      	uxtb	r0, r0
 8011bee:	fb17 f705 	smulbb	r7, r7, r5
 8011bf2:	fb14 f505 	smulbb	r5, r4, r5
 8011bf6:	fa1f fc8c 	uxth.w	ip, ip
 8011bfa:	b2bf      	uxth	r7, r7
 8011bfc:	b2ad      	uxth	r5, r5
 8011bfe:	428e      	cmp	r6, r1
 8011c00:	f101 0303 	add.w	r3, r1, #3
 8011c04:	f240 81c3 	bls.w	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011c08:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8011c0c:	fb02 c200 	mla	r2, r2, r0, ip
 8011c10:	b292      	uxth	r2, r2
 8011c12:	1c51      	adds	r1, r2, #1
 8011c14:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011c18:	1212      	asrs	r2, r2, #8
 8011c1a:	f803 2c03 	strb.w	r2, [r3, #-3]
 8011c1e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8011c22:	fb02 7200 	mla	r2, r2, r0, r7
 8011c26:	b292      	uxth	r2, r2
 8011c28:	1c51      	adds	r1, r2, #1
 8011c2a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011c2e:	1212      	asrs	r2, r2, #8
 8011c30:	f803 2c02 	strb.w	r2, [r3, #-2]
 8011c34:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011c38:	fb02 5200 	mla	r2, r2, r0, r5
 8011c3c:	b292      	uxth	r2, r2
 8011c3e:	1c51      	adds	r1, r2, #1
 8011c40:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011c44:	4619      	mov	r1, r3
 8011c46:	1212      	asrs	r2, r2, #8
 8011c48:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011c4c:	e7d7      	b.n	8011bfe <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8011c4e:	7c82      	ldrb	r2, [r0, #18]
 8011c50:	2a00      	cmp	r2, #0
 8011c52:	d047      	beq.n	8011ce4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8011c54:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011c58:	ee07 2a10 	vmov	s14, r2
 8011c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c60:	ee07 3a90 	vmov	s15, r3
 8011c64:	461a      	mov	r2, r3
 8011c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011c6a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	f200 808e 	bhi.w	8011d92 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8011c76:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c7a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011c7e:	68c7      	ldr	r7, [r0, #12]
 8011c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c88:	ee06 6a90 	vmov	s13, r6
 8011c8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011c90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	bf4a      	itet	mi
 8011c9a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8011c9e:	4634      	movpl	r4, r6
 8011ca0:	ee17 4a90 	vmovmi	r4, s15
 8011ca4:	edd0 7a08 	vldr	s15, [r0, #32]
 8011ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011cac:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8011cb0:	448e      	add	lr, r1
 8011cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb6:	bfc8      	it	gt
 8011cb8:	2200      	movgt	r2, #0
 8011cba:	58bf      	ldr	r7, [r7, r2]
 8011cbc:	7c02      	ldrb	r2, [r0, #16]
 8011cbe:	fa5f f987 	uxtb.w	r9, r7
 8011cc2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8011cc6:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8011cca:	b31a      	cbz	r2, 8011d14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8011ccc:	2dff      	cmp	r5, #255	@ 0xff
 8011cce:	d121      	bne.n	8011d14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8011cd0:	4571      	cmp	r1, lr
 8011cd2:	d25d      	bcs.n	8011d90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8011cd4:	f881 9000 	strb.w	r9, [r1]
 8011cd8:	3103      	adds	r1, #3
 8011cda:	f801 8c02 	strb.w	r8, [r1, #-2]
 8011cde:	f801 cc01 	strb.w	ip, [r1, #-1]
 8011ce2:	e7f5      	b.n	8011cd0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8011ce4:	ee07 4a90 	vmov	s15, r4
 8011ce8:	ed90 7a06 	vldr	s14, [r0, #24]
 8011cec:	edd0 6a05 	vldr	s13, [r0, #20]
 8011cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cf8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011cfc:	edd0 7a08 	vldr	s15, [r0, #32]
 8011d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d08:	bf44      	itt	mi
 8011d0a:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8011d0e:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8011d12:	e7a5      	b.n	8011c60 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8011d14:	0e3f      	lsrs	r7, r7, #24
 8011d16:	436f      	muls	r7, r5
 8011d18:	1c7a      	adds	r2, r7, #1
 8011d1a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8011d1e:	1212      	asrs	r2, r2, #8
 8011d20:	ea6f 0a02 	mvn.w	sl, r2
 8011d24:	b292      	uxth	r2, r2
 8011d26:	fb19 f902 	smulbb	r9, r9, r2
 8011d2a:	fa5f fa8a 	uxtb.w	sl, sl
 8011d2e:	fb18 f802 	smulbb	r8, r8, r2
 8011d32:	fb1c fc02 	smulbb	ip, ip, r2
 8011d36:	fa1f f989 	uxth.w	r9, r9
 8011d3a:	fa1f f888 	uxth.w	r8, r8
 8011d3e:	fa1f fc8c 	uxth.w	ip, ip
 8011d42:	458e      	cmp	lr, r1
 8011d44:	f101 0203 	add.w	r2, r1, #3
 8011d48:	d922      	bls.n	8011d90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8011d4a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011d4e:	fb01 910a 	mla	r1, r1, sl, r9
 8011d52:	b289      	uxth	r1, r1
 8011d54:	1c4f      	adds	r7, r1, #1
 8011d56:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011d5a:	1209      	asrs	r1, r1, #8
 8011d5c:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011d60:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011d64:	fb01 810a 	mla	r1, r1, sl, r8
 8011d68:	b289      	uxth	r1, r1
 8011d6a:	1c4f      	adds	r7, r1, #1
 8011d6c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011d70:	1209      	asrs	r1, r1, #8
 8011d72:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011d76:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011d7a:	fb01 c10a 	mla	r1, r1, sl, ip
 8011d7e:	b289      	uxth	r1, r1
 8011d80:	1c4f      	adds	r7, r1, #1
 8011d82:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011d86:	1209      	asrs	r1, r1, #8
 8011d88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	e7d8      	b.n	8011d42 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8011d90:	191a      	adds	r2, r3, r4
 8011d92:	4433      	add	r3, r6
 8011d94:	b21b      	sxth	r3, r3
 8011d96:	4293      	cmp	r3, r2
 8011d98:	f340 80f9 	ble.w	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011d9c:	edd0 7a07 	vldr	s15, [r0, #28]
 8011da0:	ee06 2a90 	vmov	s13, r2
 8011da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011da8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011dac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db4:	f340 80b0 	ble.w	8011f18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8011db8:	ee06 3a10 	vmov	s12, r3
 8011dbc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011dc0:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8011f94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8011dc4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011dc8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011dcc:	ed90 6a08 	vldr	s12, [r0, #32]
 8011dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011dd8:	bfd6      	itet	le
 8011dda:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8011dde:	469c      	movgt	ip, r3
 8011de0:	ee17 ca90 	vmovle	ip, s15
 8011de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de8:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011f98 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011dec:	ebac 0202 	sub.w	r2, ip, r2
 8011df0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8011df4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011df8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011dfc:	188c      	adds	r4, r1, r2
 8011dfe:	7c02      	ldrb	r2, [r0, #16]
 8011e00:	b1d2      	cbz	r2, 8011e38 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8011e02:	2dff      	cmp	r5, #255	@ 0xff
 8011e04:	d118      	bne.n	8011e38 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8011e06:	42a1      	cmp	r1, r4
 8011e08:	d261      	bcs.n	8011ece <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011e0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e0e:	68c6      	ldr	r6, [r0, #12]
 8011e10:	3103      	adds	r1, #3
 8011e12:	ee17 7a10 	vmov	r7, s14
 8011e16:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011e1a:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8011e1e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8011e22:	7856      	ldrb	r6, [r2, #1]
 8011e24:	f801 6c02 	strb.w	r6, [r1, #-2]
 8011e28:	7892      	ldrb	r2, [r2, #2]
 8011e2a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011e2e:	ed90 7a08 	vldr	s14, [r0, #32]
 8011e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e36:	e7e6      	b.n	8011e06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8011e38:	68c2      	ldr	r2, [r0, #12]
 8011e3a:	428c      	cmp	r4, r1
 8011e3c:	f101 0e03 	add.w	lr, r1, #3
 8011e40:	d945      	bls.n	8011ece <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011e42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e46:	ee17 9a10 	vmov	r9, s14
 8011e4a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8011e4e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8011e52:	fb07 f605 	mul.w	r6, r7, r5
 8011e56:	1c77      	adds	r7, r6, #1
 8011e58:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8011e5c:	123f      	asrs	r7, r7, #8
 8011e5e:	b2b9      	uxth	r1, r7
 8011e60:	43ff      	mvns	r7, r7
 8011e62:	b2fe      	uxtb	r6, r7
 8011e64:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011e68:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8011e6c:	fb19 f906 	smulbb	r9, r9, r6
 8011e70:	fb07 9701 	mla	r7, r7, r1, r9
 8011e74:	b2bf      	uxth	r7, r7
 8011e76:	f107 0901 	add.w	r9, r7, #1
 8011e7a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011e7e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8011e82:	fb19 f906 	smulbb	r9, r9, r6
 8011e86:	123f      	asrs	r7, r7, #8
 8011e88:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8011e8c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8011e90:	fb07 9701 	mla	r7, r7, r1, r9
 8011e94:	b2bf      	uxth	r7, r7
 8011e96:	f107 0901 	add.w	r9, r7, #1
 8011e9a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011e9e:	123f      	asrs	r7, r7, #8
 8011ea0:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8011ea4:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8011ea8:	f898 8002 	ldrb.w	r8, [r8, #2]
 8011eac:	fb17 f606 	smulbb	r6, r7, r6
 8011eb0:	fb08 6601 	mla	r6, r8, r1, r6
 8011eb4:	b2b6      	uxth	r6, r6
 8011eb6:	1c71      	adds	r1, r6, #1
 8011eb8:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8011ebc:	4671      	mov	r1, lr
 8011ebe:	1236      	asrs	r6, r6, #8
 8011ec0:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8011ec4:	ed90 7a08 	vldr	s14, [r0, #32]
 8011ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ecc:	e7b5      	b.n	8011e3a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8011ece:	4563      	cmp	r3, ip
 8011ed0:	dd5d      	ble.n	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011ed2:	edd0 7a08 	vldr	s15, [r0, #32]
 8011ed6:	eba3 030c 	sub.w	r3, r3, ip
 8011eda:	68c4      	ldr	r4, [r0, #12]
 8011edc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ee8:	7c00      	ldrb	r0, [r0, #16]
 8011eea:	440b      	add	r3, r1
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	bfd8      	it	le
 8011ef2:	2200      	movle	r2, #0
 8011ef4:	58a2      	ldr	r2, [r4, r2]
 8011ef6:	b2d4      	uxtb	r4, r2
 8011ef8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8011efc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011f00:	b160      	cbz	r0, 8011f1c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011f02:	2dff      	cmp	r5, #255	@ 0xff
 8011f04:	d10a      	bne.n	8011f1c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011f06:	4299      	cmp	r1, r3
 8011f08:	d241      	bcs.n	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011f0a:	700c      	strb	r4, [r1, #0]
 8011f0c:	3103      	adds	r1, #3
 8011f0e:	f801 cc02 	strb.w	ip, [r1, #-2]
 8011f12:	f801 7c01 	strb.w	r7, [r1, #-1]
 8011f16:	e7f6      	b.n	8011f06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8011f18:	4694      	mov	ip, r2
 8011f1a:	e7da      	b.n	8011ed2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8011f1c:	0e12      	lsrs	r2, r2, #24
 8011f1e:	436a      	muls	r2, r5
 8011f20:	1c55      	adds	r5, r2, #1
 8011f22:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8011f26:	122d      	asrs	r5, r5, #8
 8011f28:	43ee      	mvns	r6, r5
 8011f2a:	b2ad      	uxth	r5, r5
 8011f2c:	fb14 f405 	smulbb	r4, r4, r5
 8011f30:	b2f6      	uxtb	r6, r6
 8011f32:	fb1c f005 	smulbb	r0, ip, r5
 8011f36:	fb17 f505 	smulbb	r5, r7, r5
 8011f3a:	b2a4      	uxth	r4, r4
 8011f3c:	b280      	uxth	r0, r0
 8011f3e:	b2ad      	uxth	r5, r5
 8011f40:	428b      	cmp	r3, r1
 8011f42:	f101 0203 	add.w	r2, r1, #3
 8011f46:	d922      	bls.n	8011f8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011f48:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011f4c:	fb01 4106 	mla	r1, r1, r6, r4
 8011f50:	b289      	uxth	r1, r1
 8011f52:	1c4f      	adds	r7, r1, #1
 8011f54:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011f58:	1209      	asrs	r1, r1, #8
 8011f5a:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011f5e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011f62:	fb01 0106 	mla	r1, r1, r6, r0
 8011f66:	b289      	uxth	r1, r1
 8011f68:	1c4f      	adds	r7, r1, #1
 8011f6a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011f6e:	1209      	asrs	r1, r1, #8
 8011f70:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011f74:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011f78:	fb01 5106 	mla	r1, r1, r6, r5
 8011f7c:	b289      	uxth	r1, r1
 8011f7e:	1c4f      	adds	r7, r1, #1
 8011f80:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011f84:	1209      	asrs	r1, r1, #8
 8011f86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	e7d8      	b.n	8011f40 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8011f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f92:	bf00      	nop
 8011f94:	447ffffe 	.word	0x447ffffe
 8011f98:	00000000 	.word	0x00000000

08011f9c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8011f9c:	4770      	bx	lr

08011f9e <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8011f9e:	4770      	bx	lr

08011fa0 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8011fa0:	b510      	push	{r4, lr}
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	2124      	movs	r1, #36	@ 0x24
 8011fa6:	f011 fffa 	bl	8023f9e <_ZdlPvj>
 8011faa:	4620      	mov	r0, r4
 8011fac:	bd10      	pop	{r4, pc}
	...

08011fb0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	460d      	mov	r5, r1
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	4601      	mov	r1, r0
 8011fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011fbc:	a802      	add	r0, sp, #8
 8011fbe:	4798      	blx	r3
 8011fc0:	6828      	ldr	r0, [r5, #0]
 8011fc2:	6869      	ldr	r1, [r5, #4]
 8011fc4:	466b      	mov	r3, sp
 8011fc6:	c303      	stmia	r3!, {r0, r1}
 8011fc8:	4668      	mov	r0, sp
 8011fca:	4619      	mov	r1, r3
 8011fcc:	f7fd fc06 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8011fd0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011fd2:	b188      	cbz	r0, 8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011fd4:	6803      	ldr	r3, [r0, #0]
 8011fd6:	1d21      	adds	r1, r4, #4
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	4798      	blx	r3
 8011fdc:	b160      	cbz	r0, 8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011fde:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	dd08      	ble.n	8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011fe6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011fea:	2d00      	cmp	r5, #0
 8011fec:	dd04      	ble.n	8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011fee:	4a2b      	ldr	r2, [pc, #172]	@ (801209c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011ff0:	7812      	ldrb	r2, [r2, #0]
 8011ff2:	b11a      	cbz	r2, 8011ffc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8011ff4:	2a01      	cmp	r2, #1
 8011ff6:	d029      	beq.n	801204c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011ff8:	b004      	add	sp, #16
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}
 8011ffc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012000:	441d      	add	r5, r3
 8012002:	b2ad      	uxth	r5, r5
 8012004:	b22e      	sxth	r6, r5
 8012006:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801200a:	42b3      	cmp	r3, r6
 801200c:	daf4      	bge.n	8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	4669      	mov	r1, sp
 8012012:	4620      	mov	r0, r4
 8012014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012016:	4798      	blx	r3
 8012018:	b940      	cbnz	r0, 801202c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801201a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d004      	beq.n	801202c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012022:	3301      	adds	r3, #1
 8012024:	105b      	asrs	r3, r3, #1
 8012026:	f8ad 3006 	strh.w	r3, [sp, #6]
 801202a:	e7f0      	b.n	801200e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801202c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012030:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012034:	4413      	add	r3, r2
 8012036:	b29b      	uxth	r3, r3
 8012038:	441a      	add	r2, r3
 801203a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801203e:	b212      	sxth	r2, r2
 8012040:	4296      	cmp	r6, r2
 8012042:	dae0      	bge.n	8012006 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012044:	1aeb      	subs	r3, r5, r3
 8012046:	f8ad 3006 	strh.w	r3, [sp, #6]
 801204a:	e7dc      	b.n	8012006 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801204c:	f8bd 5000 	ldrh.w	r5, [sp]
 8012050:	441d      	add	r5, r3
 8012052:	b2ad      	uxth	r5, r5
 8012054:	b22e      	sxth	r6, r5
 8012056:	f9bd 3000 	ldrsh.w	r3, [sp]
 801205a:	42b3      	cmp	r3, r6
 801205c:	dacc      	bge.n	8011ff8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	4669      	mov	r1, sp
 8012062:	4620      	mov	r0, r4
 8012064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012066:	4798      	blx	r3
 8012068:	b940      	cbnz	r0, 801207c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801206a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801206e:	2b01      	cmp	r3, #1
 8012070:	d004      	beq.n	801207c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8012072:	3301      	adds	r3, #1
 8012074:	105b      	asrs	r3, r3, #1
 8012076:	f8ad 3004 	strh.w	r3, [sp, #4]
 801207a:	e7f0      	b.n	801205e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801207c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012080:	f8bd 3000 	ldrh.w	r3, [sp]
 8012084:	4413      	add	r3, r2
 8012086:	b29b      	uxth	r3, r3
 8012088:	441a      	add	r2, r3
 801208a:	f8ad 3000 	strh.w	r3, [sp]
 801208e:	b212      	sxth	r2, r2
 8012090:	4296      	cmp	r6, r2
 8012092:	dae0      	bge.n	8012056 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8012094:	1aeb      	subs	r3, r5, r3
 8012096:	f8ad 3004 	strh.w	r3, [sp, #4]
 801209a:	e7dc      	b.n	8012056 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801209c:	240253ac 	.word	0x240253ac

080120a0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80120a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120a2:	6803      	ldr	r3, [r0, #0]
 80120a4:	4604      	mov	r4, r0
 80120a6:	4601      	mov	r1, r0
 80120a8:	4668      	mov	r0, sp
 80120aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80120ac:	4798      	blx	r3
 80120ae:	2100      	movs	r1, #0
 80120b0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80120b4:	4668      	mov	r0, sp
 80120b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80120ba:	9102      	str	r1, [sp, #8]
 80120bc:	a902      	add	r1, sp, #8
 80120be:	f8ad 200c 	strh.w	r2, [sp, #12]
 80120c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80120c6:	f7fd fb89 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	4669      	mov	r1, sp
 80120ce:	4620      	mov	r0, r4
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	4798      	blx	r3
 80120d4:	b004      	add	sp, #16
 80120d6:	bd10      	pop	{r4, pc}

080120d8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80120d8:	2101      	movs	r1, #1
 80120da:	2200      	movs	r2, #0
 80120dc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80120e0:	490a      	ldr	r1, [pc, #40]	@ (801210c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80120e2:	8082      	strh	r2, [r0, #4]
 80120e4:	6001      	str	r1, [r0, #0]
 80120e6:	21ff      	movs	r1, #255	@ 0xff
 80120e8:	80c2      	strh	r2, [r0, #6]
 80120ea:	8102      	strh	r2, [r0, #8]
 80120ec:	8142      	strh	r2, [r0, #10]
 80120ee:	8182      	strh	r2, [r0, #12]
 80120f0:	81c2      	strh	r2, [r0, #14]
 80120f2:	8202      	strh	r2, [r0, #16]
 80120f4:	8242      	strh	r2, [r0, #18]
 80120f6:	61c2      	str	r2, [r0, #28]
 80120f8:	8402      	strh	r2, [r0, #32]
 80120fa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80120fc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012100:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8012104:	6282      	str	r2, [r0, #40]	@ 0x28
 8012106:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801210a:	4770      	bx	lr
 801210c:	08028690 	.word	0x08028690

08012110 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 8012110:	880b      	ldrh	r3, [r1, #0]
 8012112:	8643      	strh	r3, [r0, #50]	@ 0x32
 8012114:	4770      	bx	lr

08012116 <_ZN8touchgfx13AnimatedImageD1Ev>:
 8012116:	4770      	bx	lr

08012118 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 8012118:	880b      	ldrh	r3, [r1, #0]
 801211a:	8603      	strh	r3, [r0, #48]	@ 0x30
 801211c:	f000 baa9 	b.w	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

08012120 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 8012120:	b513      	push	{r0, r1, r4, lr}
 8012122:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8012126:	4604      	mov	r4, r0
 8012128:	b143      	cbz	r3, 801213c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
 801212a:	f002 f9f3 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 801212e:	4621      	mov	r1, r4
 8012130:	3004      	adds	r0, #4
 8012132:	f002 fa14 	bl	801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012136:	2300      	movs	r3, #0
 8012138:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 801213c:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8012140:	b163      	cbz	r3, 801215c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
 8012142:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012144:	a901      	add	r1, sp, #4
 8012146:	4620      	mov	r0, r4
 8012148:	f8ad 3004 	strh.w	r3, [sp, #4]
 801214c:	f000 fa91 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	4620      	mov	r0, r4
 8012154:	695b      	ldr	r3, [r3, #20]
 8012156:	4798      	blx	r3
 8012158:	b002      	add	sp, #8
 801215a:	bd10      	pop	{r4, pc}
 801215c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801215e:	e7f1      	b.n	8012144 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

08012160 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 8012160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012162:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8012166:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 8012168:	4604      	mov	r4, r0
 801216a:	42bd      	cmp	r5, r7
 801216c:	d01a      	beq.n	80121a4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 801216e:	8e46      	ldrh	r6, [r0, #50]	@ 0x32
 8012170:	42be      	cmp	r6, r7
 8012172:	d017      	beq.n	80121a4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 8012174:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 8012178:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
 801217c:	b1a1      	cbz	r1, 80121a8 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
 801217e:	b142      	cbz	r2, 8012192 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 8012180:	a902      	add	r1, sp, #8
 8012182:	f821 6d04 	strh.w	r6, [r1, #-4]!
 8012186:	f000 fa74 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801218a:	6823      	ldr	r3, [r4, #0]
 801218c:	4620      	mov	r0, r4
 801218e:	695b      	ldr	r3, [r3, #20]
 8012190:	4798      	blx	r3
 8012192:	f002 f9bf 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 8012196:	4621      	mov	r1, r4
 8012198:	3004      	adds	r0, #4
 801219a:	f002 fa89 	bl	80146b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801219e:	2301      	movs	r3, #1
 80121a0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80121a4:	b003      	add	sp, #12
 80121a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a8:	2a00      	cmp	r2, #0
 80121aa:	d0f2      	beq.n	8012192 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 80121ac:	a902      	add	r1, sp, #8
 80121ae:	f821 5d04 	strh.w	r5, [r1, #-4]!
 80121b2:	e7e8      	b.n	8012186 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

080121b4 <_ZN8touchgfx13AnimatedImageD0Ev>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	4604      	mov	r4, r0
 80121b8:	213c      	movs	r1, #60	@ 0x3c
 80121ba:	f011 fef0 	bl	8023f9e <_ZdlPvj>
 80121be:	4620      	mov	r0, r4
 80121c0:	bd10      	pop	{r4, pc}

080121c2 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 80121c2:	b510      	push	{r4, lr}
 80121c4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80121c8:	4604      	mov	r4, r0
 80121ca:	b14b      	cbz	r3, 80121e0 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
 80121cc:	f002 f9a2 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 80121d0:	4621      	mov	r1, r4
 80121d2:	3004      	adds	r0, #4
 80121d4:	f002 f9c3 	bl	801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80121d8:	2300      	movs	r3, #0
 80121da:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80121de:	bd10      	pop	{r4, pc}
 80121e0:	f002 f998 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 80121e4:	4621      	mov	r1, r4
 80121e6:	3004      	adds	r0, #4
 80121e8:	f002 fa62 	bl	80146b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80121ec:	2301      	movs	r3, #1
 80121ee:	e7f4      	b.n	80121da <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

080121f0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 80121f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121f2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80121f6:	4604      	mov	r4, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d042      	beq.n	8012282 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 80121fc:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8012200:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8012204:	3301      	adds	r3, #1
 8012206:	b2db      	uxtb	r3, r3
 8012208:	429a      	cmp	r2, r3
 801220a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 801220e:	d138      	bne.n	8012282 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8012210:	2300      	movs	r3, #0
 8012212:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 8012214:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8012218:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 801221c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 801221e:	4299      	cmp	r1, r3
 8012220:	d100      	bne.n	8012224 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 8012222:	b122      	cbz	r2, 801222e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 8012224:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8012226:	4299      	cmp	r1, r3
 8012228:	d12f      	bne.n	801228a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
 801222a:	2a00      	cmp	r2, #0
 801222c:	d034      	beq.n	8012298 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 801222e:	f894 5037 	ldrb.w	r5, [r4, #55]	@ 0x37
 8012232:	b93d      	cbnz	r5, 8012244 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
 8012234:	f002 f96e 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 8012238:	4621      	mov	r1, r4
 801223a:	3004      	adds	r0, #4
 801223c:	f002 f98f 	bl	801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012240:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
 8012244:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012246:	b140      	cbz	r0, 801225a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 8012248:	6803      	ldr	r3, [r0, #0]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	4798      	blx	r3
 801224e:	b120      	cbz	r0, 801225a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 8012250:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012252:	4621      	mov	r1, r4
 8012254:	6803      	ldr	r3, [r0, #0]
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	4798      	blx	r3
 801225a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801225e:	b183      	cbz	r3, 8012282 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8012260:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8012264:	b16b      	cbz	r3, 8012282 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8012266:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 801226a:	b163      	cbz	r3, 8012286 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
 801226c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801226e:	a901      	add	r1, sp, #4
 8012270:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012274:	4620      	mov	r0, r4
 8012276:	f000 f9fc 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	4620      	mov	r0, r4
 801227e:	695b      	ldr	r3, [r3, #20]
 8012280:	4798      	blx	r3
 8012282:	b003      	add	sp, #12
 8012284:	bd30      	pop	{r4, r5, pc}
 8012286:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012288:	e7f1      	b.n	801226e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
 801228a:	b12a      	cbz	r2, 8012298 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 801228c:	3b01      	subs	r3, #1
 801228e:	b29b      	uxth	r3, r3
 8012290:	a902      	add	r1, sp, #8
 8012292:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8012296:	e7ed      	b.n	8012274 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
 8012298:	3301      	adds	r3, #1
 801229a:	e7f8      	b.n	801228e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

0801229c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801229c:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80122a0:	b12a      	cbz	r2, 80122ae <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80122a2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80122a6:	b112      	cbz	r2, 80122ae <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80122a8:	6803      	ldr	r3, [r0, #0]
 80122aa:	695b      	ldr	r3, [r3, #20]
 80122ac:	4718      	bx	r3
 80122ae:	4770      	bx	lr

080122b0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 80122b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122b2:	ac02      	add	r4, sp, #8
 80122b4:	6803      	ldr	r3, [r0, #0]
 80122b6:	4605      	mov	r5, r0
 80122b8:	4616      	mov	r6, r2
 80122ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122bc:	f824 1d04 	strh.w	r1, [r4, #-4]!
 80122c0:	4621      	mov	r1, r4
 80122c2:	4798      	blx	r3
 80122c4:	682b      	ldr	r3, [r5, #0]
 80122c6:	4621      	mov	r1, r4
 80122c8:	4628      	mov	r0, r5
 80122ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122cc:	f8ad 6004 	strh.w	r6, [sp, #4]
 80122d0:	4798      	blx	r3
 80122d2:	b002      	add	sp, #8
 80122d4:	bd70      	pop	{r4, r5, r6, pc}

080122d6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 80122d6:	2300      	movs	r3, #0
 80122d8:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 80122dc:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 80122e0:	4770      	bx	lr

080122e2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80122e2:	2300      	movs	r3, #0
 80122e4:	8083      	strh	r3, [r0, #4]
 80122e6:	80c3      	strh	r3, [r0, #6]
 80122e8:	8003      	strh	r3, [r0, #0]
 80122ea:	8043      	strh	r3, [r0, #2]
 80122ec:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80122f0:	2bff      	cmp	r3, #255	@ 0xff
 80122f2:	bf01      	itttt	eq
 80122f4:	890b      	ldrheq	r3, [r1, #8]
 80122f6:	8083      	strheq	r3, [r0, #4]
 80122f8:	894b      	ldrheq	r3, [r1, #10]
 80122fa:	80c3      	strheq	r3, [r0, #6]
 80122fc:	4770      	bx	lr
	...

08012300 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012302:	4604      	mov	r4, r0
 8012304:	466b      	mov	r3, sp
 8012306:	6808      	ldr	r0, [r1, #0]
 8012308:	6849      	ldr	r1, [r1, #4]
 801230a:	c303      	stmia	r3!, {r0, r1}
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	4669      	mov	r1, sp
 8012310:	4620      	mov	r0, r4
 8012312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012314:	4798      	blx	r3
 8012316:	4b08      	ldr	r3, [pc, #32]	@ (8012338 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801231e:	b10a      	cbz	r2, 8012324 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012320:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012322:	b900      	cbnz	r0, 8012326 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012324:	6898      	ldr	r0, [r3, #8]
 8012326:	6803      	ldr	r3, [r0, #0]
 8012328:	4669      	mov	r1, sp
 801232a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801232c:	6a1d      	ldr	r5, [r3, #32]
 801232e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8012332:	47a8      	blx	r5
 8012334:	b003      	add	sp, #12
 8012336:	bd30      	pop	{r4, r5, pc}
 8012338:	240253b4 	.word	0x240253b4

0801233c <_ZN8touchgfx3BoxD1Ev>:
 801233c:	4770      	bx	lr

0801233e <_ZN8touchgfx3BoxD0Ev>:
 801233e:	b510      	push	{r4, lr}
 8012340:	4604      	mov	r4, r0
 8012342:	212c      	movs	r1, #44	@ 0x2c
 8012344:	f011 fe2b 	bl	8023f9e <_ZdlPvj>
 8012348:	4620      	mov	r0, r4
 801234a:	bd10      	pop	{r4, pc}

0801234c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801234c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8012350:	b12a      	cbz	r2, 801235e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012352:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8012356:	b112      	cbz	r2, 801235e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012358:	6803      	ldr	r3, [r0, #0]
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	4718      	bx	r3
 801235e:	4770      	bx	lr

08012360 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 8012360:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	@ 0x150
 8012364:	600b      	str	r3, [r1, #0]
 8012366:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	@ 0x152
 801236a:	6013      	str	r3, [r2, #0]
 801236c:	4770      	bx	lr

0801236e <_ZN8touchgfx5Gauge8setWidthEs>:
 801236e:	8101      	strh	r1, [r0, #8]
 8012370:	f8a0 10bc 	strh.w	r1, [r0, #188]	@ 0xbc
 8012374:	f8a0 1160 	strh.w	r1, [r0, #352]	@ 0x160
 8012378:	4770      	bx	lr

0801237a <_ZN8touchgfx5Gauge9setHeightEs>:
 801237a:	8141      	strh	r1, [r0, #10]
 801237c:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
 8012380:	f8a0 1162 	strh.w	r1, [r0, #354]	@ 0x162
 8012384:	4770      	bx	lr

08012386 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8012386:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 801238a:	4770      	bx	lr

0801238c <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801238c:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8012390:	4770      	bx	lr

08012392 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8012392:	4770      	bx	lr

08012394 <_ZN8touchgfx5GaugeD1Ev>:
 8012394:	4770      	bx	lr

08012396 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8012396:	b538      	push	{r3, r4, r5, lr}
 8012398:	4604      	mov	r4, r0
 801239a:	460d      	mov	r5, r1
 801239c:	f7fc ff19 	bl	800f1d2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80123a0:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 80123a4:	f884 517e 	strb.w	r5, [r4, #382]	@ 0x17e
 80123a8:	bd38      	pop	{r3, r4, r5, pc}

080123aa <_ZN8touchgfx5GaugeD0Ev>:
 80123aa:	b510      	push	{r4, lr}
 80123ac:	4604      	mov	r4, r0
 80123ae:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80123b2:	f011 fdf4 	bl	8023f9e <_ZdlPvj>
 80123b6:	4620      	mov	r0, r4
 80123b8:	bd10      	pop	{r4, pc}

080123ba <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 80123ba:	b510      	push	{r4, lr}
 80123bc:	6803      	ldr	r3, [r0, #0]
 80123be:	4604      	mov	r4, r0
 80123c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80123c4:	4798      	blx	r3
 80123c6:	b170      	cbz	r0, 80123e6 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	4620      	mov	r0, r4
 80123cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80123d0:	4798      	blx	r3
 80123d2:	b140      	cbz	r0, 80123e6 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 80123d4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80123d8:	b12b      	cbz	r3, 80123e6 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	4620      	mov	r0, r4
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123e4:	4718      	bx	r3
 80123e6:	bd10      	pop	{r4, pc}

080123e8 <_ZN8touchgfx5GaugeC1Ev>:
 80123e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123ea:	4604      	mov	r4, r0
 80123ec:	f7fd f812 	bl	800f414 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80123f0:	4b18      	ldr	r3, [pc, #96]	@ (8012454 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 80123f2:	a902      	add	r1, sp, #8
 80123f4:	4626      	mov	r6, r4
 80123f6:	2500      	movs	r5, #0
 80123f8:	f504 77ac 	add.w	r7, r4, #344	@ 0x158
 80123fc:	f846 3bb4 	str.w	r3, [r6], #180
 8012400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012404:	4630      	mov	r0, r6
 8012406:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801240a:	f010 ffed 	bl	80233e8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801240e:	2301      	movs	r3, #1
 8012410:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8012414:	4638      	mov	r0, r7
 8012416:	f884 3144 	strb.w	r3, [r4, #324]	@ 0x144
 801241a:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
 801241e:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 8012422:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 8012426:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 801242a:	f010 fa3b 	bl	80228a4 <_ZN8touchgfx6CircleC1Ev>
 801242e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012432:	4620      	mov	r0, r4
 8012434:	f7fd f88f 	bl	800f556 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8012438:	4639      	mov	r1, r7
 801243a:	4620      	mov	r0, r4
 801243c:	f7fd f84a 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012440:	4620      	mov	r0, r4
 8012442:	4631      	mov	r1, r6
 8012444:	f7fd f846 	bl	800f4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012448:	4620      	mov	r0, r4
 801244a:	f884 517d 	strb.w	r5, [r4, #381]	@ 0x17d
 801244e:	b003      	add	sp, #12
 8012450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012452:	bf00      	nop
 8012454:	080287ec 	.word	0x080287ec

08012458 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8012458:	f880 1144 	strb.w	r1, [r0, #324]	@ 0x144
 801245c:	4770      	bx	lr

0801245e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801245e:	f880 1145 	strb.w	r1, [r0, #325]	@ 0x145
 8012462:	4770      	bx	lr

08012464 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	8902      	ldrh	r2, [r0, #8]
 8012468:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 801246c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012470:	4604      	mov	r4, r0
 8012472:	f8a0 20bc 	strh.w	r2, [r0, #188]	@ 0xbc
 8012476:	2200      	movs	r2, #0
 8012478:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
 801247c:	4628      	mov	r0, r5
 801247e:	4611      	mov	r1, r2
 8012480:	f7f1 fdb1 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
 8012484:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	@ 0x156
 8012488:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 801248c:	4628      	mov	r0, r5
 801248e:	1a9b      	subs	r3, r3, r2
 8012490:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	@ 0x154
 8012494:	ee07 3a90 	vmov	s15, r3
 8012498:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	@ 0x150
 801249c:	1a9b      	subs	r3, r3, r2
 801249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124a2:	ee07 3a10 	vmov	s14, r3
 80124a6:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
 80124aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124ae:	ed84 7a38 	vstr	s14, [r4, #224]	@ 0xe0
 80124b2:	f010 ffe5 	bl	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80124b6:	4b16      	ldr	r3, [pc, #88]	@ (8012510 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 80124b8:	4628      	mov	r0, r5
 80124ba:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 80124be:	f010 ffdf 	bl	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80124c2:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 80124c6:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	@ 0x150
 80124ca:	4628      	mov	r0, r5
 80124cc:	ee07 3a90 	vmov	s15, r3
 80124d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 80124d4:	ee07 2a10 	vmov	s14, r2
 80124d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124dc:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80124e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124e4:	edc4 7a3f 	vstr	s15, [r4, #252]	@ 0xfc
 80124e8:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
 80124ec:	f010 ffc8 	bl	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80124f0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
 80124f4:	f8d4 20f8 	ldr.w	r2, [r4, #248]	@ 0xf8
 80124f8:	4628      	mov	r0, r5
 80124fa:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
 80124fe:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 8012502:	f010 ffbd 	bl	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8012506:	2301      	movs	r3, #1
 8012508:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 801250c:	bd38      	pop	{r3, r4, r5, pc}
 801250e:	bf00      	nop
 8012510:	43960000 	.word	0x43960000

08012514 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8012514:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012516:	4604      	mov	r4, r0
 8012518:	a802      	add	r0, sp, #8
 801251a:	4616      	mov	r6, r2
 801251c:	461d      	mov	r5, r3
 801251e:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8012522:	4601      	mov	r1, r0
 8012524:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8012528:	f011 f900 	bl	802372c <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801252c:	4620      	mov	r0, r4
 801252e:	f8a4 6154 	strh.w	r6, [r4, #340]	@ 0x154
 8012532:	f8a4 5156 	strh.w	r5, [r4, #342]	@ 0x156
 8012536:	f7ff ff95 	bl	8012464 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801253a:	b002      	add	sp, #8
 801253c:	bd70      	pop	{r4, r5, r6, pc}

0801253e <_ZN8touchgfx5Gauge9setCenterEii>:
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	4606      	mov	r6, r0
 8012542:	460d      	mov	r5, r1
 8012544:	4614      	mov	r4, r2
 8012546:	f8a6 1150 	strh.w	r1, [r6, #336]	@ 0x150
 801254a:	f8a6 2152 	strh.w	r2, [r6, #338]	@ 0x152
 801254e:	f7ff ff89 	bl	8012464 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8012552:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	@ 0x15e
 8012556:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	@ 0x15c
 801255a:	1aa4      	subs	r4, r4, r2
 801255c:	1a6d      	subs	r5, r5, r1
 801255e:	0164      	lsls	r4, r4, #5
 8012560:	016d      	lsls	r5, r5, #5
 8012562:	3410      	adds	r4, #16
 8012564:	3510      	adds	r5, #16
 8012566:	f8c6 4188 	str.w	r4, [r6, #392]	@ 0x188
 801256a:	f8c6 5184 	str.w	r5, [r6, #388]	@ 0x184
 801256e:	bd70      	pop	{r4, r5, r6, pc}

08012570 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8012570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012572:	0149      	lsls	r1, r1, #5
 8012574:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012576:	4604      	mov	r4, r0
 8012578:	4299      	cmp	r1, r3
 801257a:	9101      	str	r1, [sp, #4]
 801257c:	d00b      	beq.n	8012596 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801257e:	4601      	mov	r1, r0
 8012580:	aa01      	add	r2, sp, #4
 8012582:	a802      	add	r0, sp, #8
 8012584:	f010 fb8a 	bl	8022c9c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8012588:	9b01      	ldr	r3, [sp, #4]
 801258a:	a902      	add	r1, sp, #8
 801258c:	4620      	mov	r0, r4
 801258e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8012590:	6823      	ldr	r3, [r4, #0]
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	4798      	blx	r3
 8012596:	b004      	add	sp, #16
 8012598:	bd10      	pop	{r4, pc}
	...

0801259c <_ZN8touchgfx5Gauge8setValueEi>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	4604      	mov	r4, r0
 80125a0:	f7fc fe6a 	bl	800f278 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80125a4:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 80125a8:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 80125ac:	4620      	mov	r0, r4
 80125ae:	429a      	cmp	r2, r3
 80125b0:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 80125b4:	bfac      	ite	ge
 80125b6:	f894 3145 	ldrbge.w	r3, [r4, #325]	@ 0x145
 80125ba:	f894 3144 	ldrblt.w	r3, [r4, #324]	@ 0x144
 80125be:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 80125c2:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80125c6:	1ac9      	subs	r1, r1, r3
 80125c8:	2900      	cmp	r1, #0
 80125ca:	bfb8      	it	lt
 80125cc:	4249      	neglt	r1, r1
 80125ce:	b289      	uxth	r1, r1
 80125d0:	f7fc fe74 	bl	800f2bc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80125d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80125d8:	f8d4 214c 	ldr.w	r2, [r4, #332]	@ 0x14c
 80125dc:	4605      	mov	r5, r0
 80125de:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8012640 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 80125e2:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 80125e6:	429a      	cmp	r2, r3
 80125e8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8012644 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 80125ec:	da15      	bge.n	801261a <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 80125ee:	1b5b      	subs	r3, r3, r5
 80125f0:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 80125f4:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 80125f8:	ee07 3a90 	vmov	s15, r3
 80125fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012600:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8012604:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012608:	f010 fea8 	bl	802335c <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801260c:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 8012610:	1b49      	subs	r1, r1, r5
 8012612:	4630      	mov	r0, r6
 8012614:	f7ff ffac 	bl	8012570 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8012618:	bd70      	pop	{r4, r5, r6, pc}
 801261a:	442b      	add	r3, r5
 801261c:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 8012620:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 8012624:	ee07 3a90 	vmov	s15, r3
 8012628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801262c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8012630:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012634:	f010 fe92 	bl	802335c <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8012638:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 801263c:	4429      	add	r1, r5
 801263e:	e7e8      	b.n	8012612 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8012640:	43340000 	.word	0x43340000
 8012644:	40490fdb 	.word	0x40490fdb

08012648 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8012648:	b510      	push	{r4, lr}
 801264a:	f8c0 1148 	str.w	r1, [r0, #328]	@ 0x148
 801264e:	0149      	lsls	r1, r1, #5
 8012650:	f8c0 214c 	str.w	r2, [r0, #332]	@ 0x14c
 8012654:	0152      	lsls	r2, r2, #5
 8012656:	4604      	mov	r4, r0
 8012658:	f8c0 1190 	str.w	r1, [r0, #400]	@ 0x190
 801265c:	f8c0 2194 	str.w	r2, [r0, #404]	@ 0x194
 8012660:	f7fc fdb4 	bl	800f1cc <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8012664:	4601      	mov	r1, r0
 8012666:	4620      	mov	r0, r4
 8012668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801266c:	f7ff bf96 	b.w	801259c <_ZN8touchgfx5Gauge8setValueEi>

08012670 <_ZN8touchgfx5ImageD1Ev>:
 8012670:	4770      	bx	lr

08012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8012672:	b570      	push	{r4, r5, r6, lr}
 8012674:	880b      	ldrh	r3, [r1, #0]
 8012676:	460d      	mov	r5, r1
 8012678:	4604      	mov	r4, r0
 801267a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801267c:	4608      	mov	r0, r1
 801267e:	f005 fac1 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012682:	4606      	mov	r6, r0
 8012684:	4628      	mov	r0, r5
 8012686:	f005 faf1 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	4605      	mov	r5, r0
 801268e:	4631      	mov	r1, r6
 8012690:	4620      	mov	r0, r4
 8012692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012694:	4798      	blx	r3
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	4629      	mov	r1, r5
 801269a:	4620      	mov	r0, r4
 801269c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801269e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126a2:	4718      	bx	r3

080126a4 <_ZN8touchgfx5ImageD0Ev>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4604      	mov	r4, r0
 80126a8:	212c      	movs	r1, #44	@ 0x2c
 80126aa:	f011 fc78 	bl	8023f9e <_ZdlPvj>
 80126ae:	4620      	mov	r0, r4
 80126b0:	bd10      	pop	{r4, pc}

080126b2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80126b2:	b510      	push	{r4, lr}
 80126b4:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80126b8:	4604      	mov	r4, r0
 80126ba:	2bff      	cmp	r3, #255	@ 0xff
 80126bc:	d006      	beq.n	80126cc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80126be:	2300      	movs	r3, #0
 80126c0:	8003      	strh	r3, [r0, #0]
 80126c2:	8043      	strh	r3, [r0, #2]
 80126c4:	8083      	strh	r3, [r0, #4]
 80126c6:	80c3      	strh	r3, [r0, #6]
 80126c8:	4620      	mov	r0, r4
 80126ca:	bd10      	pop	{r4, pc}
 80126cc:	3126      	adds	r1, #38	@ 0x26
 80126ce:	f005 fb01 	bl	8017cd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80126d2:	e7f9      	b.n	80126c8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080126d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80126d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126d8:	4604      	mov	r4, r0
 80126da:	b088      	sub	sp, #32
 80126dc:	2500      	movs	r5, #0
 80126de:	460f      	mov	r7, r1
 80126e0:	f854 3b26 	ldr.w	r3, [r4], #38
 80126e4:	a904      	add	r1, sp, #16
 80126e6:	4606      	mov	r6, r0
 80126e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80126ee:	4798      	blx	r3
 80126f0:	4620      	mov	r0, r4
 80126f2:	f005 fa87 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80126f6:	4680      	mov	r8, r0
 80126f8:	4620      	mov	r0, r4
 80126fa:	f005 fab7 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80126fe:	9506      	str	r5, [sp, #24]
 8012700:	ad06      	add	r5, sp, #24
 8012702:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012706:	4639      	mov	r1, r7
 8012708:	f8ad 801c 	strh.w	r8, [sp, #28]
 801270c:	4628      	mov	r0, r5
 801270e:	f7fd f865 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8012712:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012716:	2b00      	cmp	r3, #0
 8012718:	dd19      	ble.n	801274e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801271a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801271e:	2b00      	cmp	r3, #0
 8012720:	dd15      	ble.n	801274e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012722:	4b0c      	ldr	r3, [pc, #48]	@ (8012754 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801272a:	b10a      	cbz	r2, 8012730 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801272c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801272e:	b900      	cbnz	r0, 8012732 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012730:	6898      	ldr	r0, [r3, #8]
 8012732:	2701      	movs	r7, #1
 8012734:	6801      	ldr	r1, [r0, #0]
 8012736:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801273a:	9702      	str	r7, [sp, #8]
 801273c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8012740:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012744:	e9cd 5600 	strd	r5, r6, [sp]
 8012748:	688d      	ldr	r5, [r1, #8]
 801274a:	4621      	mov	r1, r4
 801274c:	47a8      	blx	r5
 801274e:	b008      	add	sp, #32
 8012750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012754:	240253b4 	.word	0x240253b4

08012758 <_ZN8touchgfx7OutlineD1Ev>:
 8012758:	4770      	bx	lr

0801275a <_ZN8touchgfx7OutlineD0Ev>:
 801275a:	b510      	push	{r4, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	2130      	movs	r1, #48	@ 0x30
 8012760:	f011 fc1d 	bl	8023f9e <_ZdlPvj>
 8012764:	4620      	mov	r0, r4
 8012766:	bd10      	pop	{r4, pc}

08012768 <_ZN8touchgfx7Outline5resetEv>:
 8012768:	b510      	push	{r4, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	f000 fe72 	bl	8013454 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8012770:	60e0      	str	r0, [r4, #12]
 8012772:	f000 fe75 	bl	8013460 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8012776:	68e3      	ldr	r3, [r4, #12]
 8012778:	08c0      	lsrs	r0, r0, #3
 801277a:	2200      	movs	r2, #0
 801277c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8012780:	6123      	str	r3, [r4, #16]
 8012782:	3801      	subs	r0, #1
 8012784:	60a2      	str	r2, [r4, #8]
 8012786:	6060      	str	r0, [r4, #4]
 8012788:	8019      	strh	r1, [r3, #0]
 801278a:	8059      	strh	r1, [r3, #2]
 801278c:	809a      	strh	r2, [r3, #4]
 801278e:	80da      	strh	r2, [r3, #6]
 8012790:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012792:	f023 0301 	bic.w	r3, r3, #1
 8012796:	f043 0302 	orr.w	r3, r3, #2
 801279a:	6263      	str	r3, [r4, #36]	@ 0x24
 801279c:	bd10      	pop	{r4, pc}
	...

080127a0 <_ZN8touchgfx7OutlineC1Ev>:
 80127a0:	4b0a      	ldr	r3, [pc, #40]	@ (80127cc <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80127a2:	b510      	push	{r4, lr}
 80127a4:	6003      	str	r3, [r0, #0]
 80127a6:	2300      	movs	r3, #0
 80127a8:	4604      	mov	r4, r0
 80127aa:	6243      	str	r3, [r0, #36]	@ 0x24
 80127ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80127b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127b4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80127b8:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80127bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80127c0:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80127c4:	f7ff ffd0 	bl	8012768 <_ZN8touchgfx7Outline5resetEv>
 80127c8:	4620      	mov	r0, r4
 80127ca:	bd10      	pop	{r4, pc}
 80127cc:	08028940 	.word	0x08028940

080127d0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	b093      	sub	sp, #76	@ 0x4c
 80127d6:	1156      	asrs	r6, r2, #5
 80127d8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80127da:	9305      	str	r3, [sp, #20]
 80127dc:	1153      	asrs	r3, r2, #5
 80127de:	f004 051f 	and.w	r5, r4, #31
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	1163      	asrs	r3, r4, #5
 80127e6:	9504      	str	r5, [sp, #16]
 80127e8:	1165      	asrs	r5, r4, #5
 80127ea:	9306      	str	r3, [sp, #24]
 80127ec:	f002 031f 	and.w	r3, r2, #31
 80127f0:	42ae      	cmp	r6, r5
 80127f2:	f040 80f4 	bne.w	80129de <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80127f6:	9c04      	ldr	r4, [sp, #16]
 80127f8:	9a05      	ldr	r2, [sp, #20]
 80127fa:	42a3      	cmp	r3, r4
 80127fc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8012800:	6902      	ldr	r2, [r0, #16]
 8012802:	d125      	bne.n	8012850 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8012804:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012808:	459e      	cmp	lr, r3
 801280a:	d103      	bne.n	8012814 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801280c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012810:	429e      	cmp	r6, r3
 8012812:	d035      	beq.n	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012814:	88d1      	ldrh	r1, [r2, #6]
 8012816:	8893      	ldrh	r3, [r2, #4]
 8012818:	430b      	orrs	r3, r1
 801281a:	d010      	beq.n	801283e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801281c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012820:	2b00      	cmp	r3, #0
 8012822:	db0c      	blt.n	801283e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8012824:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012826:	428b      	cmp	r3, r1
 8012828:	da09      	bge.n	801283e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801282a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801282e:	428b      	cmp	r3, r1
 8012830:	f103 0301 	add.w	r3, r3, #1
 8012834:	bf38      	it	cc
 8012836:	3208      	addcc	r2, #8
 8012838:	6083      	str	r3, [r0, #8]
 801283a:	bf38      	it	cc
 801283c:	6102      	strcc	r2, [r0, #16]
 801283e:	6903      	ldr	r3, [r0, #16]
 8012840:	9a03      	ldr	r2, [sp, #12]
 8012842:	f8a3 e000 	strh.w	lr, [r3]
 8012846:	805a      	strh	r2, [r3, #2]
 8012848:	2200      	movs	r2, #0
 801284a:	809a      	strh	r2, [r3, #4]
 801284c:	80da      	strh	r2, [r3, #6]
 801284e:	e017      	b.n	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012850:	9c05      	ldr	r4, [sp, #20]
 8012852:	114e      	asrs	r6, r1, #5
 8012854:	f001 0c1f 	and.w	ip, r1, #31
 8012858:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801285c:	f004 041f 	and.w	r4, r4, #31
 8012860:	4576      	cmp	r6, lr
 8012862:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8012866:	9402      	str	r4, [sp, #8]
 8012868:	9c04      	ldr	r4, [sp, #16]
 801286a:	eba4 0403 	sub.w	r4, r4, r3
 801286e:	d10a      	bne.n	8012886 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8012870:	9b02      	ldr	r3, [sp, #8]
 8012872:	44a0      	add	r8, r4
 8012874:	449c      	add	ip, r3
 8012876:	f8a2 8004 	strh.w	r8, [r2, #4]
 801287a:	fb04 a40c 	mla	r4, r4, ip, sl
 801287e:	80d4      	strh	r4, [r2, #6]
 8012880:	b013      	add	sp, #76	@ 0x4c
 8012882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012886:	9d05      	ldr	r5, [sp, #20]
 8012888:	1a69      	subs	r1, r5, r1
 801288a:	bf51      	iteee	pl
 801288c:	f1cc 0520 	rsbpl	r5, ip, #32
 8012890:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012894:	4249      	negmi	r1, r1
 8012896:	2500      	movmi	r5, #0
 8012898:	bf5d      	ittte	pl
 801289a:	436c      	mulpl	r4, r5
 801289c:	2520      	movpl	r5, #32
 801289e:	f04f 0901 	movpl.w	r9, #1
 80128a2:	f04f 39ff 	movmi.w	r9, #4294967295
 80128a6:	9501      	str	r5, [sp, #4]
 80128a8:	9f01      	ldr	r7, [sp, #4]
 80128aa:	444e      	add	r6, r9
 80128ac:	fb94 f5f1 	sdiv	r5, r4, r1
 80128b0:	fb01 4415 	mls	r4, r1, r5, r4
 80128b4:	44bc      	add	ip, r7
 80128b6:	2c00      	cmp	r4, #0
 80128b8:	bfbc      	itt	lt
 80128ba:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80128be:	1864      	addlt	r4, r4, r1
 80128c0:	44a8      	add	r8, r5
 80128c2:	fb05 ac0c 	mla	ip, r5, ip, sl
 80128c6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80128ca:	f8a2 c006 	strh.w	ip, [r2, #6]
 80128ce:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80128d2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80128d6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80128da:	ea58 0202 	orrs.w	r2, r8, r2
 80128de:	d011      	beq.n	8012904 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80128e0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80128e4:	f1b8 0f00 	cmp.w	r8, #0
 80128e8:	db0c      	blt.n	8012904 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80128ea:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80128ec:	4590      	cmp	r8, r2
 80128ee:	da09      	bge.n	8012904 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80128f0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80128f4:	4590      	cmp	r8, r2
 80128f6:	bf3c      	itt	cc
 80128f8:	f10c 0208 	addcc.w	r2, ip, #8
 80128fc:	6102      	strcc	r2, [r0, #16]
 80128fe:	f108 0201 	add.w	r2, r8, #1
 8012902:	6082      	str	r2, [r0, #8]
 8012904:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012908:	2700      	movs	r7, #0
 801290a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801290e:	45b6      	cmp	lr, r6
 8012910:	f8ac 6000 	strh.w	r6, [ip]
 8012914:	442b      	add	r3, r5
 8012916:	f8ac 2002 	strh.w	r2, [ip, #2]
 801291a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801291e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012922:	d04b      	beq.n	80129bc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8012924:	9f04      	ldr	r7, [sp, #16]
 8012926:	1a64      	subs	r4, r4, r1
 8012928:	f04f 0a00 	mov.w	sl, #0
 801292c:	1aff      	subs	r7, r7, r3
 801292e:	443d      	add	r5, r7
 8012930:	016d      	lsls	r5, r5, #5
 8012932:	fb95 f8f1 	sdiv	r8, r5, r1
 8012936:	fb01 5518 	mls	r5, r1, r8, r5
 801293a:	2d00      	cmp	r5, #0
 801293c:	bfbc      	itt	lt
 801293e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012942:	186d      	addlt	r5, r5, r1
 8012944:	f108 0701 	add.w	r7, r8, #1
 8012948:	9703      	str	r7, [sp, #12]
 801294a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801294e:	1964      	adds	r4, r4, r5
 8012950:	444e      	add	r6, r9
 8012952:	bf54      	ite	pl
 8012954:	9f03      	ldrpl	r7, [sp, #12]
 8012956:	4647      	movmi	r7, r8
 8012958:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801295c:	bf58      	it	pl
 801295e:	1a64      	subpl	r4, r4, r1
 8012960:	443b      	add	r3, r7
 8012962:	44bb      	add	fp, r7
 8012964:	f8ac b004 	strh.w	fp, [ip, #4]
 8012968:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801296c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012970:	f8ac b006 	strh.w	fp, [ip, #6]
 8012974:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012978:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801297c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012980:	ea5b 0707 	orrs.w	r7, fp, r7
 8012984:	d011      	beq.n	80129aa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012986:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801298a:	f1bb 0f00 	cmp.w	fp, #0
 801298e:	db0c      	blt.n	80129aa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012990:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012992:	45bb      	cmp	fp, r7
 8012994:	da09      	bge.n	80129aa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012996:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801299a:	45bb      	cmp	fp, r7
 801299c:	bf3c      	itt	cc
 801299e:	f10c 0708 	addcc.w	r7, ip, #8
 80129a2:	6107      	strcc	r7, [r0, #16]
 80129a4:	f10b 0701 	add.w	r7, fp, #1
 80129a8:	6087      	str	r7, [r0, #8]
 80129aa:	6907      	ldr	r7, [r0, #16]
 80129ac:	45b6      	cmp	lr, r6
 80129ae:	803e      	strh	r6, [r7, #0]
 80129b0:	807a      	strh	r2, [r7, #2]
 80129b2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80129b6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80129ba:	d1c6      	bne.n	801294a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80129bc:	9a04      	ldr	r2, [sp, #16]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	6902      	ldr	r2, [r0, #16]
 80129c2:	8891      	ldrh	r1, [r2, #4]
 80129c4:	88d6      	ldrh	r6, [r2, #6]
 80129c6:	4419      	add	r1, r3
 80129c8:	8091      	strh	r1, [r2, #4]
 80129ca:	9902      	ldr	r1, [sp, #8]
 80129cc:	f101 0c20 	add.w	ip, r1, #32
 80129d0:	9901      	ldr	r1, [sp, #4]
 80129d2:	ebac 0c01 	sub.w	ip, ip, r1
 80129d6:	fb03 630c 	mla	r3, r3, ip, r6
 80129da:	80d3      	strh	r3, [r2, #6]
 80129dc:	e750      	b.n	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80129de:	9d05      	ldr	r5, [sp, #20]
 80129e0:	1aa2      	subs	r2, r4, r2
 80129e2:	eba5 0501 	sub.w	r5, r5, r1
 80129e6:	9202      	str	r2, [sp, #8]
 80129e8:	9508      	str	r5, [sp, #32]
 80129ea:	f140 8128 	bpl.w	8012c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80129ee:	9a03      	ldr	r2, [sp, #12]
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	f6ff af45 	blt.w	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80129f6:	9a02      	ldr	r2, [sp, #8]
 80129f8:	f04f 34ff 	mov.w	r4, #4294967295
 80129fc:	4252      	negs	r2, r2
 80129fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012a00:	2400      	movs	r4, #0
 8012a02:	9202      	str	r2, [sp, #8]
 8012a04:	9a06      	ldr	r2, [sp, #24]
 8012a06:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8012a0a:	9206      	str	r2, [sp, #24]
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	435a      	muls	r2, r3
 8012a10:	9401      	str	r4, [sp, #4]
 8012a12:	9c02      	ldr	r4, [sp, #8]
 8012a14:	9d02      	ldr	r5, [sp, #8]
 8012a16:	fb92 f4f4 	sdiv	r4, r2, r4
 8012a1a:	fb05 2214 	mls	r2, r5, r4, r2
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	9207      	str	r2, [sp, #28]
 8012a22:	bfbc      	itt	lt
 8012a24:	1952      	addlt	r2, r2, r5
 8012a26:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8012a2a:	6905      	ldr	r5, [r0, #16]
 8012a2c:	bfb8      	it	lt
 8012a2e:	9207      	strlt	r2, [sp, #28]
 8012a30:	eb04 0901 	add.w	r9, r4, r1
 8012a34:	9a01      	ldr	r2, [sp, #4]
 8012a36:	ea4f 1669 	mov.w	r6, r9, asr #5
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	f040 8111 	bne.w	8012c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8012a40:	f9b5 3000 	ldrsh.w	r3, [r5]
 8012a44:	429e      	cmp	r6, r3
 8012a46:	d104      	bne.n	8012a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8012a48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012a4c:	9a03      	ldr	r2, [sp, #12]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d01b      	beq.n	8012a8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012a52:	88ea      	ldrh	r2, [r5, #6]
 8012a54:	88ab      	ldrh	r3, [r5, #4]
 8012a56:	4313      	orrs	r3, r2
 8012a58:	d010      	beq.n	8012a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8012a5a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012a5e:	2a00      	cmp	r2, #0
 8012a60:	db0c      	blt.n	8012a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8012a62:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012a64:	429a      	cmp	r2, r3
 8012a66:	da09      	bge.n	8012a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8012a68:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	f102 0201 	add.w	r2, r2, #1
 8012a72:	bf38      	it	cc
 8012a74:	3508      	addcc	r5, #8
 8012a76:	6082      	str	r2, [r0, #8]
 8012a78:	bf38      	it	cc
 8012a7a:	6105      	strcc	r5, [r0, #16]
 8012a7c:	6903      	ldr	r3, [r0, #16]
 8012a7e:	9a03      	ldr	r2, [sp, #12]
 8012a80:	801e      	strh	r6, [r3, #0]
 8012a82:	805a      	strh	r2, [r3, #2]
 8012a84:	2200      	movs	r2, #0
 8012a86:	809a      	strh	r2, [r3, #4]
 8012a88:	80da      	strh	r2, [r3, #6]
 8012a8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a8c:	9a03      	ldr	r2, [sp, #12]
 8012a8e:	6901      	ldr	r1, [r0, #16]
 8012a90:	441a      	add	r2, r3
 8012a92:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012a96:	42b3      	cmp	r3, r6
 8012a98:	d103      	bne.n	8012aa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8012a9a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d01a      	beq.n	8012ad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8012aa2:	88cc      	ldrh	r4, [r1, #6]
 8012aa4:	888b      	ldrh	r3, [r1, #4]
 8012aa6:	4323      	orrs	r3, r4
 8012aa8:	d010      	beq.n	8012acc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012aaa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012aae:	2c00      	cmp	r4, #0
 8012ab0:	db0c      	blt.n	8012acc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012ab2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	da09      	bge.n	8012acc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012ab8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012abc:	429c      	cmp	r4, r3
 8012abe:	f104 0401 	add.w	r4, r4, #1
 8012ac2:	bf38      	it	cc
 8012ac4:	3108      	addcc	r1, #8
 8012ac6:	6084      	str	r4, [r0, #8]
 8012ac8:	bf38      	it	cc
 8012aca:	6101      	strcc	r1, [r0, #16]
 8012acc:	6903      	ldr	r3, [r0, #16]
 8012ace:	2100      	movs	r1, #0
 8012ad0:	801e      	strh	r6, [r3, #0]
 8012ad2:	805a      	strh	r2, [r3, #2]
 8012ad4:	8099      	strh	r1, [r3, #4]
 8012ad6:	80d9      	strh	r1, [r3, #6]
 8012ad8:	9b06      	ldr	r3, [sp, #24]
 8012ada:	4293      	cmp	r3, r2
 8012adc:	f000 8082 	beq.w	8012be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8012ae0:	9b08      	ldr	r3, [sp, #32]
 8012ae2:	9902      	ldr	r1, [sp, #8]
 8012ae4:	015b      	lsls	r3, r3, #5
 8012ae6:	9c02      	ldr	r4, [sp, #8]
 8012ae8:	fb93 f1f1 	sdiv	r1, r3, r1
 8012aec:	fb04 3311 	mls	r3, r4, r1, r3
 8012af0:	9103      	str	r1, [sp, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	9308      	str	r3, [sp, #32]
 8012af6:	da04      	bge.n	8012b02 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8012af8:	1e4b      	subs	r3, r1, #1
 8012afa:	9303      	str	r3, [sp, #12]
 8012afc:	9b08      	ldr	r3, [sp, #32]
 8012afe:	4423      	add	r3, r4
 8012b00:	9308      	str	r3, [sp, #32]
 8012b02:	9b07      	ldr	r3, [sp, #28]
 8012b04:	464f      	mov	r7, r9
 8012b06:	9902      	ldr	r1, [sp, #8]
 8012b08:	2600      	movs	r6, #0
 8012b0a:	1a5b      	subs	r3, r3, r1
 8012b0c:	9307      	str	r3, [sp, #28]
 8012b0e:	9b01      	ldr	r3, [sp, #4]
 8012b10:	f1c3 0320 	rsb	r3, r3, #32
 8012b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8012b16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012b18:	9b01      	ldr	r3, [sp, #4]
 8012b1a:	1a5b      	subs	r3, r3, r1
 8012b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b1e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8012b22:	185b      	adds	r3, r3, r1
 8012b24:	bf58      	it	pl
 8012b26:	9902      	ldrpl	r1, [sp, #8]
 8012b28:	9307      	str	r3, [sp, #28]
 8012b2a:	bf57      	itett	pl
 8012b2c:	1a5b      	subpl	r3, r3, r1
 8012b2e:	9903      	ldrmi	r1, [sp, #12]
 8012b30:	9307      	strpl	r3, [sp, #28]
 8012b32:	9b03      	ldrpl	r3, [sp, #12]
 8012b34:	bf58      	it	pl
 8012b36:	1c59      	addpl	r1, r3, #1
 8012b38:	2a00      	cmp	r2, #0
 8012b3a:	4489      	add	r9, r1
 8012b3c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8012b40:	db2e      	blt.n	8012ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012b42:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012b44:	4293      	cmp	r3, r2
 8012b46:	dd2b      	ble.n	8012ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012b48:	9c01      	ldr	r4, [sp, #4]
 8012b4a:	6905      	ldr	r5, [r0, #16]
 8012b4c:	46a0      	mov	r8, r4
 8012b4e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8012b50:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8012b54:	45a0      	cmp	r8, r4
 8012b56:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8012b5a:	f040 814c 	bne.w	8012df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8012b5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012b62:	4551      	cmp	r1, sl
 8012b64:	d103      	bne.n	8012b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8012b66:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8012b6a:	4291      	cmp	r1, r2
 8012b6c:	d018      	beq.n	8012ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012b6e:	ea5c 010e 	orrs.w	r1, ip, lr
 8012b72:	d00f      	beq.n	8012b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8012b74:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8012b78:	2900      	cmp	r1, #0
 8012b7a:	db0b      	blt.n	8012b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8012b7c:	428b      	cmp	r3, r1
 8012b7e:	dd09      	ble.n	8012b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8012b80:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8012b84:	4299      	cmp	r1, r3
 8012b86:	f101 0101 	add.w	r1, r1, #1
 8012b8a:	bf38      	it	cc
 8012b8c:	3508      	addcc	r5, #8
 8012b8e:	6081      	str	r1, [r0, #8]
 8012b90:	bf38      	it	cc
 8012b92:	6105      	strcc	r5, [r0, #16]
 8012b94:	6903      	ldr	r3, [r0, #16]
 8012b96:	f8a3 a000 	strh.w	sl, [r3]
 8012b9a:	805a      	strh	r2, [r3, #2]
 8012b9c:	809e      	strh	r6, [r3, #4]
 8012b9e:	80de      	strh	r6, [r3, #6]
 8012ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ba2:	6901      	ldr	r1, [r0, #16]
 8012ba4:	441a      	add	r2, r3
 8012ba6:	88cc      	ldrh	r4, [r1, #6]
 8012ba8:	888b      	ldrh	r3, [r1, #4]
 8012baa:	4323      	orrs	r3, r4
 8012bac:	d010      	beq.n	8012bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012bae:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012bb2:	2c00      	cmp	r4, #0
 8012bb4:	db0c      	blt.n	8012bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012bb6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012bb8:	429c      	cmp	r4, r3
 8012bba:	da09      	bge.n	8012bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012bbc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012bc0:	429c      	cmp	r4, r3
 8012bc2:	f104 0401 	add.w	r4, r4, #1
 8012bc6:	bf38      	it	cc
 8012bc8:	3108      	addcc	r1, #8
 8012bca:	6084      	str	r4, [r0, #8]
 8012bcc:	bf38      	it	cc
 8012bce:	6101      	strcc	r1, [r0, #16]
 8012bd0:	6903      	ldr	r3, [r0, #16]
 8012bd2:	464f      	mov	r7, r9
 8012bd4:	f8a3 a000 	strh.w	sl, [r3]
 8012bd8:	805a      	strh	r2, [r3, #2]
 8012bda:	809e      	strh	r6, [r3, #4]
 8012bdc:	80de      	strh	r6, [r3, #6]
 8012bde:	9b06      	ldr	r3, [sp, #24]
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d19c      	bne.n	8012b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8012be4:	9b01      	ldr	r3, [sp, #4]
 8012be6:	6907      	ldr	r7, [r0, #16]
 8012be8:	f1c3 0620 	rsb	r6, r3, #32
 8012bec:	9b05      	ldr	r3, [sp, #20]
 8012bee:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8012bf2:	9b04      	ldr	r3, [sp, #16]
 8012bf4:	429e      	cmp	r6, r3
 8012bf6:	f040 81c7 	bne.w	8012f88 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8012bfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012bfe:	459e      	cmp	lr, r3
 8012c00:	d104      	bne.n	8012c0c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8012c02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	f43f ae3a 	beq.w	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012c0c:	88f9      	ldrh	r1, [r7, #6]
 8012c0e:	88bb      	ldrh	r3, [r7, #4]
 8012c10:	430b      	orrs	r3, r1
 8012c12:	d010      	beq.n	8012c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	db0c      	blt.n	8012c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012c1c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012c1e:	428b      	cmp	r3, r1
 8012c20:	da09      	bge.n	8012c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012c22:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8012c26:	428b      	cmp	r3, r1
 8012c28:	f103 0301 	add.w	r3, r3, #1
 8012c2c:	bf38      	it	cc
 8012c2e:	3708      	addcc	r7, #8
 8012c30:	6083      	str	r3, [r0, #8]
 8012c32:	bf38      	it	cc
 8012c34:	6107      	strcc	r7, [r0, #16]
 8012c36:	6903      	ldr	r3, [r0, #16]
 8012c38:	f8a3 e000 	strh.w	lr, [r3]
 8012c3c:	e603      	b.n	8012846 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8012c3e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8012c40:	9c03      	ldr	r4, [sp, #12]
 8012c42:	42a2      	cmp	r2, r4
 8012c44:	f6ff ae1c 	blt.w	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012c48:	9c06      	ldr	r4, [sp, #24]
 8012c4a:	42a2      	cmp	r2, r4
 8012c4c:	9c08      	ldr	r4, [sp, #32]
 8012c4e:	bfbc      	itt	lt
 8012c50:	3201      	addlt	r2, #1
 8012c52:	9206      	strlt	r2, [sp, #24]
 8012c54:	f1c3 0220 	rsb	r2, r3, #32
 8012c58:	4362      	muls	r2, r4
 8012c5a:	2401      	movs	r4, #1
 8012c5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012c5e:	2420      	movs	r4, #32
 8012c60:	e6d6      	b.n	8012a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8012c62:	ea4f 1861 	mov.w	r8, r1, asr #5
 8012c66:	f009 021f 	and.w	r2, r9, #31
 8012c6a:	f001 011f 	and.w	r1, r1, #31
 8012c6e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8012c72:	920c      	str	r2, [sp, #48]	@ 0x30
 8012c74:	45b0      	cmp	r8, r6
 8012c76:	9a01      	ldr	r2, [sp, #4]
 8012c78:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8012c7c:	eba2 0203 	sub.w	r2, r2, r3
 8012c80:	d108      	bne.n	8012c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8012c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c84:	4496      	add	lr, r2
 8012c86:	4419      	add	r1, r3
 8012c88:	f8a5 e004 	strh.w	lr, [r5, #4]
 8012c8c:	fb02 a101 	mla	r1, r2, r1, sl
 8012c90:	80e9      	strh	r1, [r5, #6]
 8012c92:	e6fa      	b.n	8012a8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012c94:	2c00      	cmp	r4, #0
 8012c96:	f2c0 80a7 	blt.w	8012de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8012c9a:	2701      	movs	r7, #1
 8012c9c:	f1c1 0c20 	rsb	ip, r1, #32
 8012ca0:	970a      	str	r7, [sp, #40]	@ 0x28
 8012ca2:	2720      	movs	r7, #32
 8012ca4:	fb02 f20c 	mul.w	r2, r2, ip
 8012ca8:	9709      	str	r7, [sp, #36]	@ 0x24
 8012caa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012cac:	fb92 fcf4 	sdiv	ip, r2, r4
 8012cb0:	fb04 221c 	mls	r2, r4, ip, r2
 8012cb4:	4439      	add	r1, r7
 8012cb6:	2a00      	cmp	r2, #0
 8012cb8:	bfbc      	itt	lt
 8012cba:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8012cbe:	1912      	addlt	r2, r2, r4
 8012cc0:	fb0c a101 	mla	r1, ip, r1, sl
 8012cc4:	44e6      	add	lr, ip
 8012cc6:	80e9      	strh	r1, [r5, #6]
 8012cc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012cca:	f8a5 e004 	strh.w	lr, [r5, #4]
 8012cce:	eb08 0501 	add.w	r5, r8, r1
 8012cd2:	6901      	ldr	r1, [r0, #16]
 8012cd4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8012cd8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8012cdc:	ea58 070e 	orrs.w	r7, r8, lr
 8012ce0:	d010      	beq.n	8012d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012ce2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8012ce6:	f1be 0f00 	cmp.w	lr, #0
 8012cea:	db0b      	blt.n	8012d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012cec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012cee:	45be      	cmp	lr, r7
 8012cf0:	da08      	bge.n	8012d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012cf2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8012cf6:	45be      	cmp	lr, r7
 8012cf8:	bf3c      	itt	cc
 8012cfa:	3108      	addcc	r1, #8
 8012cfc:	6101      	strcc	r1, [r0, #16]
 8012cfe:	f10e 0101 	add.w	r1, lr, #1
 8012d02:	6081      	str	r1, [r0, #8]
 8012d04:	6901      	ldr	r1, [r0, #16]
 8012d06:	f04f 0e00 	mov.w	lr, #0
 8012d0a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8012d0e:	42ae      	cmp	r6, r5
 8012d10:	800d      	strh	r5, [r1, #0]
 8012d12:	4463      	add	r3, ip
 8012d14:	f8a1 8002 	strh.w	r8, [r1, #2]
 8012d18:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012d1c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8012d20:	d053      	beq.n	8012dca <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8012d22:	9901      	ldr	r1, [sp, #4]
 8012d24:	1b12      	subs	r2, r2, r4
 8012d26:	1ac9      	subs	r1, r1, r3
 8012d28:	4461      	add	r1, ip
 8012d2a:	0149      	lsls	r1, r1, #5
 8012d2c:	fb91 fef4 	sdiv	lr, r1, r4
 8012d30:	fb04 111e 	mls	r1, r4, lr, r1
 8012d34:	2900      	cmp	r1, #0
 8012d36:	bfbc      	itt	lt
 8012d38:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8012d3c:	1909      	addlt	r1, r1, r4
 8012d3e:	f10e 0701 	add.w	r7, lr, #1
 8012d42:	970d      	str	r7, [sp, #52]	@ 0x34
 8012d44:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8012d48:	1852      	adds	r2, r2, r1
 8012d4a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8012d4c:	bf54      	ite	pl
 8012d4e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8012d52:	46f4      	movmi	ip, lr
 8012d54:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8012d58:	bf58      	it	pl
 8012d5a:	1b12      	subpl	r2, r2, r4
 8012d5c:	4463      	add	r3, ip
 8012d5e:	443d      	add	r5, r7
 8012d60:	44e3      	add	fp, ip
 8012d62:	f8aa b004 	strh.w	fp, [sl, #4]
 8012d66:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8012d6a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8012d6e:	f8aa b006 	strh.w	fp, [sl, #6]
 8012d72:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012d76:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012d7a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8012d7e:	ea5b 070a 	orrs.w	r7, fp, sl
 8012d82:	d014      	beq.n	8012dae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012d84:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8012d88:	f1ba 0f00 	cmp.w	sl, #0
 8012d8c:	db0f      	blt.n	8012dae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012d8e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012d90:	45ba      	cmp	sl, r7
 8012d92:	da0c      	bge.n	8012dae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012d94:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8012d98:	45ba      	cmp	sl, r7
 8012d9a:	f10a 0a01 	add.w	sl, sl, #1
 8012d9e:	bf38      	it	cc
 8012da0:	f10c 0c08 	addcc.w	ip, ip, #8
 8012da4:	f8c0 a008 	str.w	sl, [r0, #8]
 8012da8:	bf38      	it	cc
 8012daa:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8012dae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012db2:	f04f 0700 	mov.w	r7, #0
 8012db6:	42ae      	cmp	r6, r5
 8012db8:	f8ac 5000 	strh.w	r5, [ip]
 8012dbc:	f8ac 8002 	strh.w	r8, [ip, #2]
 8012dc0:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012dc4:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012dc8:	d1bc      	bne.n	8012d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8012dca:	6904      	ldr	r4, [r0, #16]
 8012dcc:	9a01      	ldr	r2, [sp, #4]
 8012dce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	88a2      	ldrh	r2, [r4, #4]
 8012dd4:	3120      	adds	r1, #32
 8012dd6:	441a      	add	r2, r3
 8012dd8:	80a2      	strh	r2, [r4, #4]
 8012dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ddc:	1a89      	subs	r1, r1, r2
 8012dde:	88e2      	ldrh	r2, [r4, #6]
 8012de0:	fb03 2301 	mla	r3, r3, r1, r2
 8012de4:	80e3      	strh	r3, [r4, #6]
 8012de6:	e650      	b.n	8012a8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012de8:	f04f 37ff 	mov.w	r7, #4294967295
 8012dec:	434a      	muls	r2, r1
 8012dee:	4264      	negs	r4, r4
 8012df0:	970a      	str	r7, [sp, #40]	@ 0x28
 8012df2:	2700      	movs	r7, #0
 8012df4:	e758      	b.n	8012ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8012df6:	ea4f 1867 	mov.w	r8, r7, asr #5
 8012dfa:	f009 031f 	and.w	r3, r9, #31
 8012dfe:	f007 071f 	and.w	r7, r7, #31
 8012e02:	fa1f fc8c 	uxth.w	ip, ip
 8012e06:	45d0      	cmp	r8, sl
 8012e08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012e0a:	fa1f fe8e 	uxth.w	lr, lr
 8012e0e:	d10a      	bne.n	8012e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8012e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e12:	449c      	add	ip, r3
 8012e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e16:	441f      	add	r7, r3
 8012e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e1a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012e1e:	fb03 e707 	mla	r7, r3, r7, lr
 8012e22:	80ef      	strh	r7, [r5, #6]
 8012e24:	e6bc      	b.n	8012ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012e26:	2900      	cmp	r1, #0
 8012e28:	f2c0 80a6 	blt.w	8012f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8012e2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012e2e:	f1c7 0320 	rsb	r3, r7, #32
 8012e32:	4363      	muls	r3, r4
 8012e34:	2401      	movs	r4, #1
 8012e36:	940d      	str	r4, [sp, #52]	@ 0x34
 8012e38:	2420      	movs	r4, #32
 8012e3a:	940c      	str	r4, [sp, #48]	@ 0x30
 8012e3c:	fb93 f4f1 	sdiv	r4, r3, r1
 8012e40:	fb01 3b14 	mls	fp, r1, r4, r3
 8012e44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e46:	f1bb 0f00 	cmp.w	fp, #0
 8012e4a:	441f      	add	r7, r3
 8012e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e4e:	bfbc      	itt	lt
 8012e50:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8012e54:	448b      	addlt	fp, r1
 8012e56:	fb04 e707 	mla	r7, r4, r7, lr
 8012e5a:	44a4      	add	ip, r4
 8012e5c:	80ef      	strh	r7, [r5, #6]
 8012e5e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012e62:	eb08 0503 	add.w	r5, r8, r3
 8012e66:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012e6a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8012e6e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012e72:	ea5e 0307 	orrs.w	r3, lr, r7
 8012e76:	d011      	beq.n	8012e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012e78:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8012e7c:	f1be 0f00 	cmp.w	lr, #0
 8012e80:	db0c      	blt.n	8012e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012e82:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012e84:	45be      	cmp	lr, r7
 8012e86:	da09      	bge.n	8012e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012e88:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8012e8c:	45be      	cmp	lr, r7
 8012e8e:	bf3c      	itt	cc
 8012e90:	f10c 0708 	addcc.w	r7, ip, #8
 8012e94:	6107      	strcc	r7, [r0, #16]
 8012e96:	f10e 0701 	add.w	r7, lr, #1
 8012e9a:	6087      	str	r7, [r0, #8]
 8012e9c:	6907      	ldr	r7, [r0, #16]
 8012e9e:	b213      	sxth	r3, r2
 8012ea0:	4555      	cmp	r5, sl
 8012ea2:	9310      	str	r3, [sp, #64]	@ 0x40
 8012ea4:	807b      	strh	r3, [r7, #2]
 8012ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ea8:	803d      	strh	r5, [r7, #0]
 8012eaa:	80be      	strh	r6, [r7, #4]
 8012eac:	eb04 0c03 	add.w	ip, r4, r3
 8012eb0:	80fe      	strh	r6, [r7, #6]
 8012eb2:	d050      	beq.n	8012f56 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8012eb4:	9b01      	ldr	r3, [sp, #4]
 8012eb6:	eba3 070c 	sub.w	r7, r3, ip
 8012eba:	ebab 0301 	sub.w	r3, fp, r1
 8012ebe:	443c      	add	r4, r7
 8012ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec2:	0164      	lsls	r4, r4, #5
 8012ec4:	fb94 f8f1 	sdiv	r8, r4, r1
 8012ec8:	fb01 4418 	mls	r4, r1, r8, r4
 8012ecc:	2c00      	cmp	r4, #0
 8012ece:	bfbc      	itt	lt
 8012ed0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012ed4:	1864      	addlt	r4, r4, r1
 8012ed6:	f108 0701 	add.w	r7, r8, #1
 8012eda:	9711      	str	r7, [sp, #68]	@ 0x44
 8012edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ede:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012ee2:	191b      	adds	r3, r3, r4
 8012ee4:	f8be b004 	ldrh.w	fp, [lr, #4]
 8012ee8:	bf54      	ite	pl
 8012eea:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8012eec:	4647      	movmi	r7, r8
 8012eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ef0:	bf58      	it	pl
 8012ef2:	1a5b      	subpl	r3, r3, r1
 8012ef4:	44bb      	add	fp, r7
 8012ef6:	44bc      	add	ip, r7
 8012ef8:	bf58      	it	pl
 8012efa:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8012efc:	f8ae b004 	strh.w	fp, [lr, #4]
 8012f00:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012f04:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012f08:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8012f0a:	f8ae b006 	strh.w	fp, [lr, #6]
 8012f0e:	443d      	add	r5, r7
 8012f10:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012f14:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012f18:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8012f1c:	ea5b 0307 	orrs.w	r3, fp, r7
 8012f20:	d011      	beq.n	8012f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012f22:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8012f26:	f1bb 0f00 	cmp.w	fp, #0
 8012f2a:	db0c      	blt.n	8012f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012f2c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012f2e:	45bb      	cmp	fp, r7
 8012f30:	da09      	bge.n	8012f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012f32:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012f36:	45bb      	cmp	fp, r7
 8012f38:	bf3c      	itt	cc
 8012f3a:	f10e 0708 	addcc.w	r7, lr, #8
 8012f3e:	6107      	strcc	r7, [r0, #16]
 8012f40:	f10b 0701 	add.w	r7, fp, #1
 8012f44:	6087      	str	r7, [r0, #8]
 8012f46:	6907      	ldr	r7, [r0, #16]
 8012f48:	4555      	cmp	r5, sl
 8012f4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012f4c:	803d      	strh	r5, [r7, #0]
 8012f4e:	807b      	strh	r3, [r7, #2]
 8012f50:	80be      	strh	r6, [r7, #4]
 8012f52:	80fe      	strh	r6, [r7, #6]
 8012f54:	d1c2      	bne.n	8012edc <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8012f56:	9b01      	ldr	r3, [sp, #4]
 8012f58:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8012f5a:	eba3 0c0c 	sub.w	ip, r3, ip
 8012f5e:	6903      	ldr	r3, [r0, #16]
 8012f60:	3720      	adds	r7, #32
 8012f62:	8899      	ldrh	r1, [r3, #4]
 8012f64:	4461      	add	r1, ip
 8012f66:	8099      	strh	r1, [r3, #4]
 8012f68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012f6a:	1a7f      	subs	r7, r7, r1
 8012f6c:	88d9      	ldrh	r1, [r3, #6]
 8012f6e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8012f72:	f8a3 c006 	strh.w	ip, [r3, #6]
 8012f76:	e613      	b.n	8012ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012f78:	f04f 34ff 	mov.w	r4, #4294967295
 8012f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f7e:	4249      	negs	r1, r1
 8012f80:	940d      	str	r4, [sp, #52]	@ 0x34
 8012f82:	2400      	movs	r4, #0
 8012f84:	437b      	muls	r3, r7
 8012f86:	e758      	b.n	8012e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8012f88:	9905      	ldr	r1, [sp, #20]
 8012f8a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8012f8e:	f009 0c1f 	and.w	ip, r9, #31
 8012f92:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8012f96:	f001 011f 	and.w	r1, r1, #31
 8012f9a:	45f3      	cmp	fp, lr
 8012f9c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8012fa0:	9102      	str	r1, [sp, #8]
 8012fa2:	9904      	ldr	r1, [sp, #16]
 8012fa4:	eba1 0406 	sub.w	r4, r1, r6
 8012fa8:	d108      	bne.n	8012fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8012faa:	9b02      	ldr	r3, [sp, #8]
 8012fac:	44a0      	add	r8, r4
 8012fae:	449c      	add	ip, r3
 8012fb0:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012fb4:	fb04 a40c 	mla	r4, r4, ip, sl
 8012fb8:	80fc      	strh	r4, [r7, #6]
 8012fba:	e461      	b.n	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012fbc:	9905      	ldr	r1, [sp, #20]
 8012fbe:	ebb1 0109 	subs.w	r1, r1, r9
 8012fc2:	bf51      	iteee	pl
 8012fc4:	f1cc 0520 	rsbpl	r5, ip, #32
 8012fc8:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012fcc:	4249      	negmi	r1, r1
 8012fce:	2500      	movmi	r5, #0
 8012fd0:	bf5d      	ittte	pl
 8012fd2:	436c      	mulpl	r4, r5
 8012fd4:	2520      	movpl	r5, #32
 8012fd6:	f04f 0901 	movpl.w	r9, #1
 8012fda:	f04f 39ff 	movmi.w	r9, #4294967295
 8012fde:	9501      	str	r5, [sp, #4]
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	fb94 f5f1 	sdiv	r5, r4, r1
 8012fe6:	fb01 4415 	mls	r4, r1, r5, r4
 8012fea:	449c      	add	ip, r3
 8012fec:	eb0b 0309 	add.w	r3, fp, r9
 8012ff0:	2c00      	cmp	r4, #0
 8012ff2:	bfbc      	itt	lt
 8012ff4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012ff8:	1864      	addlt	r4, r4, r1
 8012ffa:	44a8      	add	r8, r5
 8012ffc:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013000:	f8a7 8004 	strh.w	r8, [r7, #4]
 8013004:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013008:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801300c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013010:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013014:	ea58 0707 	orrs.w	r7, r8, r7
 8013018:	d011      	beq.n	801303e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801301a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801301e:	f1b8 0f00 	cmp.w	r8, #0
 8013022:	db0c      	blt.n	801303e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8013024:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013026:	45b8      	cmp	r8, r7
 8013028:	da09      	bge.n	801303e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801302a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801302e:	45b8      	cmp	r8, r7
 8013030:	bf3c      	itt	cc
 8013032:	f10c 0708 	addcc.w	r7, ip, #8
 8013036:	6107      	strcc	r7, [r0, #16]
 8013038:	f108 0701 	add.w	r7, r8, #1
 801303c:	6087      	str	r7, [r0, #8]
 801303e:	6907      	ldr	r7, [r0, #16]
 8013040:	f04f 0c00 	mov.w	ip, #0
 8013044:	b212      	sxth	r2, r2
 8013046:	459e      	cmp	lr, r3
 8013048:	803b      	strh	r3, [r7, #0]
 801304a:	442e      	add	r6, r5
 801304c:	807a      	strh	r2, [r7, #2]
 801304e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8013052:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013056:	d04b      	beq.n	80130f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8013058:	9f04      	ldr	r7, [sp, #16]
 801305a:	1a64      	subs	r4, r4, r1
 801305c:	f04f 0a00 	mov.w	sl, #0
 8013060:	1bbf      	subs	r7, r7, r6
 8013062:	443d      	add	r5, r7
 8013064:	016d      	lsls	r5, r5, #5
 8013066:	fb95 f8f1 	sdiv	r8, r5, r1
 801306a:	fb01 5518 	mls	r5, r1, r8, r5
 801306e:	4565      	cmp	r5, ip
 8013070:	bfbc      	itt	lt
 8013072:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013076:	186d      	addlt	r5, r5, r1
 8013078:	f108 0701 	add.w	r7, r8, #1
 801307c:	9703      	str	r7, [sp, #12]
 801307e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013082:	1964      	adds	r4, r4, r5
 8013084:	444b      	add	r3, r9
 8013086:	bf54      	ite	pl
 8013088:	9f03      	ldrpl	r7, [sp, #12]
 801308a:	4647      	movmi	r7, r8
 801308c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013090:	bf58      	it	pl
 8013092:	1a64      	subpl	r4, r4, r1
 8013094:	443e      	add	r6, r7
 8013096:	44bb      	add	fp, r7
 8013098:	f8ac b004 	strh.w	fp, [ip, #4]
 801309c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80130a0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80130a4:	f8ac b006 	strh.w	fp, [ip, #6]
 80130a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80130ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80130b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80130b4:	ea5b 0707 	orrs.w	r7, fp, r7
 80130b8:	d011      	beq.n	80130de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80130ba:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80130be:	f1bb 0f00 	cmp.w	fp, #0
 80130c2:	db0c      	blt.n	80130de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80130c4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80130c6:	45bb      	cmp	fp, r7
 80130c8:	da09      	bge.n	80130de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80130ca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80130ce:	45bb      	cmp	fp, r7
 80130d0:	bf3c      	itt	cc
 80130d2:	f10c 0708 	addcc.w	r7, ip, #8
 80130d6:	6107      	strcc	r7, [r0, #16]
 80130d8:	f10b 0701 	add.w	r7, fp, #1
 80130dc:	6087      	str	r7, [r0, #8]
 80130de:	6907      	ldr	r7, [r0, #16]
 80130e0:	459e      	cmp	lr, r3
 80130e2:	803b      	strh	r3, [r7, #0]
 80130e4:	807a      	strh	r2, [r7, #2]
 80130e6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80130ea:	f8a7 a006 	strh.w	sl, [r7, #6]
 80130ee:	d1c6      	bne.n	801307e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80130f0:	9b04      	ldr	r3, [sp, #16]
 80130f2:	1b9e      	subs	r6, r3, r6
 80130f4:	6903      	ldr	r3, [r0, #16]
 80130f6:	889a      	ldrh	r2, [r3, #4]
 80130f8:	4432      	add	r2, r6
 80130fa:	809a      	strh	r2, [r3, #4]
 80130fc:	9a02      	ldr	r2, [sp, #8]
 80130fe:	f102 0c20 	add.w	ip, r2, #32
 8013102:	9a01      	ldr	r2, [sp, #4]
 8013104:	ebac 0c02 	sub.w	ip, ip, r2
 8013108:	88da      	ldrh	r2, [r3, #6]
 801310a:	fb06 260c 	mla	r6, r6, ip, r2
 801310e:	80de      	strh	r6, [r3, #6]
 8013110:	f7ff bbb6 	b.w	8012880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08013114 <_ZN8touchgfx7Outline6lineToEii>:
 8013114:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013116:	079b      	lsls	r3, r3, #30
 8013118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801311a:	460e      	mov	r6, r1
 801311c:	4615      	mov	r5, r2
 801311e:	d511      	bpl.n	8013144 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013120:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8013124:	ea86 0701 	eor.w	r7, r6, r1
 8013128:	ea85 0302 	eor.w	r3, r5, r2
 801312c:	433b      	orrs	r3, r7
 801312e:	d009      	beq.n	8013144 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013130:	4633      	mov	r3, r6
 8013132:	9500      	str	r5, [sp, #0]
 8013134:	f7ff fb4c 	bl	80127d0 <_ZN8touchgfx7Outline10renderLineEiiii>
 8013138:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801313a:	f043 0301 	orr.w	r3, r3, #1
 801313e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8013142:	6243      	str	r3, [r0, #36]	@ 0x24
 8013144:	b003      	add	sp, #12
 8013146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013148 <_ZN8touchgfx7Outline6moveToEii>:
 8013148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801314c:	4615      	mov	r5, r2
 801314e:	4604      	mov	r4, r0
 8013150:	460e      	mov	r6, r1
 8013152:	079a      	lsls	r2, r3, #30
 8013154:	d401      	bmi.n	801315a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8013156:	f7ff fb07 	bl	8012768 <_ZN8touchgfx7Outline5resetEv>
 801315a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801315c:	07db      	lsls	r3, r3, #31
 801315e:	d504      	bpl.n	801316a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8013160:	4620      	mov	r0, r4
 8013162:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8013166:	f7ff ffd5 	bl	8013114 <_ZN8touchgfx7Outline6lineToEii>
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	1170      	asrs	r0, r6, #5
 801316e:	1169      	asrs	r1, r5, #5
 8013170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013174:	4290      	cmp	r0, r2
 8013176:	d103      	bne.n	8013180 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8013178:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801317c:	4291      	cmp	r1, r2
 801317e:	d01a      	beq.n	80131b6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8013180:	88df      	ldrh	r7, [r3, #6]
 8013182:	889a      	ldrh	r2, [r3, #4]
 8013184:	433a      	orrs	r2, r7
 8013186:	d010      	beq.n	80131aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013188:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801318c:	2a00      	cmp	r2, #0
 801318e:	db0c      	blt.n	80131aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013190:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013192:	42ba      	cmp	r2, r7
 8013194:	da09      	bge.n	80131aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013196:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801319a:	42ba      	cmp	r2, r7
 801319c:	f102 0201 	add.w	r2, r2, #1
 80131a0:	bf38      	it	cc
 80131a2:	3308      	addcc	r3, #8
 80131a4:	60a2      	str	r2, [r4, #8]
 80131a6:	bf38      	it	cc
 80131a8:	6123      	strcc	r3, [r4, #16]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	2200      	movs	r2, #0
 80131ae:	8018      	strh	r0, [r3, #0]
 80131b0:	8059      	strh	r1, [r3, #2]
 80131b2:	809a      	strh	r2, [r3, #4]
 80131b4:	80da      	strh	r2, [r3, #6]
 80131b6:	6166      	str	r6, [r4, #20]
 80131b8:	6225      	str	r5, [r4, #32]
 80131ba:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80131be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80131c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131c4:	b0d0      	sub	sp, #320	@ 0x140
 80131c6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80131ca:	466c      	mov	r4, sp
 80131cc:	4627      	mov	r7, r4
 80131ce:	1a0d      	subs	r5, r1, r0
 80131d0:	f100 0308 	add.w	r3, r0, #8
 80131d4:	2d48      	cmp	r5, #72	@ 0x48
 80131d6:	f340 80d5 	ble.w	8013384 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80131da:	112d      	asrs	r5, r5, #4
 80131dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80131e0:	f9b0 9000 	ldrsh.w	r9, [r0]
 80131e4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80131e8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80131ec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80131f0:	6816      	ldr	r6, [r2, #0]
 80131f2:	6006      	str	r6, [r0, #0]
 80131f4:	6856      	ldr	r6, [r2, #4]
 80131f6:	6046      	str	r6, [r0, #4]
 80131f8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80131fc:	f8a2 8002 	strh.w	r8, [r2, #2]
 8013200:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013204:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013208:	f1a1 0208 	sub.w	r2, r1, #8
 801320c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8013210:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8013214:	4565      	cmp	r5, ip
 8013216:	db06      	blt.n	8013226 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8013218:	d119      	bne.n	801324e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801321a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801321e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8013222:	42ae      	cmp	r6, r5
 8013224:	dd13      	ble.n	801324e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8013226:	460e      	mov	r6, r1
 8013228:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801322c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8013230:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8013234:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8013238:	601d      	str	r5, [r3, #0]
 801323a:	6875      	ldr	r5, [r6, #4]
 801323c:	605d      	str	r5, [r3, #4]
 801323e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8013242:	f821 cc06 	strh.w	ip, [r1, #-6]
 8013246:	f821 8c04 	strh.w	r8, [r1, #-4]
 801324a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801324e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013252:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8013256:	42ae      	cmp	r6, r5
 8013258:	db06      	blt.n	8013268 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801325a:	d116      	bne.n	801328a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801325c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013260:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8013264:	45ac      	cmp	ip, r5
 8013266:	da10      	bge.n	801328a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8013268:	681d      	ldr	r5, [r3, #0]
 801326a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801326e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8013272:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8013276:	6005      	str	r5, [r0, #0]
 8013278:	685d      	ldr	r5, [r3, #4]
 801327a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801327e:	6045      	str	r5, [r0, #4]
 8013280:	8146      	strh	r6, [r0, #10]
 8013282:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8013286:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801328a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801328e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8013292:	4565      	cmp	r5, ip
 8013294:	db06      	blt.n	80132a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8013296:	d119      	bne.n	80132cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013298:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801329c:	f9b0 5000 	ldrsh.w	r5, [r0]
 80132a0:	42ae      	cmp	r6, r5
 80132a2:	da13      	bge.n	80132cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80132a4:	460e      	mov	r6, r1
 80132a6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80132aa:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80132ae:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80132b2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80132b6:	6005      	str	r5, [r0, #0]
 80132b8:	6875      	ldr	r5, [r6, #4]
 80132ba:	6045      	str	r5, [r0, #4]
 80132bc:	f821 9c08 	strh.w	r9, [r1, #-8]
 80132c0:	f821 cc06 	strh.w	ip, [r1, #-6]
 80132c4:	f821 8c04 	strh.w	r8, [r1, #-4]
 80132c8:	f821 ec02 	strh.w	lr, [r1, #-2]
 80132cc:	3308      	adds	r3, #8
 80132ce:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80132d2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80132d6:	45e6      	cmp	lr, ip
 80132d8:	dbf8      	blt.n	80132cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80132da:	d105      	bne.n	80132e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80132dc:	f9b3 6000 	ldrsh.w	r6, [r3]
 80132e0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80132e4:	42ae      	cmp	r6, r5
 80132e6:	dbf1      	blt.n	80132cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80132e8:	4615      	mov	r5, r2
 80132ea:	3a08      	subs	r2, #8
 80132ec:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80132f0:	45b4      	cmp	ip, r6
 80132f2:	dbf9      	blt.n	80132e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80132f4:	d105      	bne.n	8013302 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80132f6:	f9b0 8000 	ldrsh.w	r8, [r0]
 80132fa:	f9b2 6000 	ldrsh.w	r6, [r2]
 80132fe:	45b0      	cmp	r8, r6
 8013300:	dbf2      	blt.n	80132e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013302:	4293      	cmp	r3, r2
 8013304:	f1a5 0608 	sub.w	r6, r5, #8
 8013308:	d816      	bhi.n	8013338 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801330a:	f8d6 c000 	ldr.w	ip, [r6]
 801330e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8013312:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8013316:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801331a:	f8c3 c000 	str.w	ip, [r3]
 801331e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8013322:	f8c3 c004 	str.w	ip, [r3, #4]
 8013326:	f825 ac08 	strh.w	sl, [r5, #-8]
 801332a:	f825 ec06 	strh.w	lr, [r5, #-6]
 801332e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013332:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013336:	e7c9      	b.n	80132cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013338:	f8d6 e000 	ldr.w	lr, [r6]
 801333c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8013340:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8013344:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8013348:	f8c0 e000 	str.w	lr, [r0]
 801334c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8013350:	1a16      	subs	r6, r2, r0
 8013352:	f8c0 e004 	str.w	lr, [r0, #4]
 8013356:	f825 ac08 	strh.w	sl, [r5, #-8]
 801335a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801335e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013362:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013366:	1acd      	subs	r5, r1, r3
 8013368:	10ed      	asrs	r5, r5, #3
 801336a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801336e:	bfb5      	itete	lt
 8013370:	e9c4 0200 	strdlt	r0, r2, [r4]
 8013374:	e9c4 3100 	strdge	r3, r1, [r4]
 8013378:	460a      	movlt	r2, r1
 801337a:	4603      	movge	r3, r0
 801337c:	3408      	adds	r4, #8
 801337e:	4618      	mov	r0, r3
 8013380:	4611      	mov	r1, r2
 8013382:	e724      	b.n	80131ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8013384:	4299      	cmp	r1, r3
 8013386:	d927      	bls.n	80133d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8013388:	f1a3 0210 	sub.w	r2, r3, #16
 801338c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8013390:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8013394:	45ac      	cmp	ip, r5
 8013396:	db06      	blt.n	80133a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8013398:	d11c      	bne.n	80133d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801339a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801339e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80133a2:	42ae      	cmp	r6, r5
 80133a4:	da16      	bge.n	80133d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80133a6:	4615      	mov	r5, r2
 80133a8:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80133ac:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80133b0:	3a08      	subs	r2, #8
 80133b2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80133b6:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80133ba:	6196      	str	r6, [r2, #24]
 80133bc:	42a8      	cmp	r0, r5
 80133be:	686e      	ldr	r6, [r5, #4]
 80133c0:	f8a2 9010 	strh.w	r9, [r2, #16]
 80133c4:	61d6      	str	r6, [r2, #28]
 80133c6:	f8a2 c012 	strh.w	ip, [r2, #18]
 80133ca:	f8a2 8014 	strh.w	r8, [r2, #20]
 80133ce:	f8a2 e016 	strh.w	lr, [r2, #22]
 80133d2:	d1db      	bne.n	801338c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80133d4:	3308      	adds	r3, #8
 80133d6:	e7d5      	b.n	8013384 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80133d8:	42bc      	cmp	r4, r7
 80133da:	d903      	bls.n	80133e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80133dc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80133e0:	3c08      	subs	r4, #8
 80133e2:	e6f4      	b.n	80131ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80133e4:	b050      	add	sp, #320	@ 0x140
 80133e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080133ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80133ea:	b510      	push	{r4, lr}
 80133ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80133ee:	4604      	mov	r4, r0
 80133f0:	07da      	lsls	r2, r3, #31
 80133f2:	d507      	bpl.n	8013404 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80133f4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80133f8:	f7ff fe8c 	bl	8013114 <_ZN8touchgfx7Outline6lineToEii>
 80133fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80133fe:	f023 0301 	bic.w	r3, r3, #1
 8013402:	6243      	str	r3, [r0, #36]	@ 0x24
 8013404:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013406:	079b      	lsls	r3, r3, #30
 8013408:	d521      	bpl.n	801344e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801340a:	6923      	ldr	r3, [r4, #16]
 801340c:	88d9      	ldrh	r1, [r3, #6]
 801340e:	889a      	ldrh	r2, [r3, #4]
 8013410:	430a      	orrs	r2, r1
 8013412:	d010      	beq.n	8013436 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8013414:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013418:	2a00      	cmp	r2, #0
 801341a:	db0c      	blt.n	8013436 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801341c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801341e:	428a      	cmp	r2, r1
 8013420:	da09      	bge.n	8013436 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8013422:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8013426:	4291      	cmp	r1, r2
 8013428:	f102 0201 	add.w	r2, r2, #1
 801342c:	bf88      	it	hi
 801342e:	3308      	addhi	r3, #8
 8013430:	60a2      	str	r2, [r4, #8]
 8013432:	bf88      	it	hi
 8013434:	6123      	strhi	r3, [r4, #16]
 8013436:	68a1      	ldr	r1, [r4, #8]
 8013438:	b129      	cbz	r1, 8013446 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801343a:	6863      	ldr	r3, [r4, #4]
 801343c:	4299      	cmp	r1, r3
 801343e:	d802      	bhi.n	8013446 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8013440:	68e0      	ldr	r0, [r4, #12]
 8013442:	f7ff febd 	bl	80131c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8013446:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013448:	f023 0302 	bic.w	r3, r3, #2
 801344c:	6263      	str	r3, [r4, #36]	@ 0x24
 801344e:	68e0      	ldr	r0, [r4, #12]
 8013450:	bd10      	pop	{r4, pc}
	...

08013454 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8013454:	4b01      	ldr	r3, [pc, #4]	@ (801345c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8013456:	6818      	ldr	r0, [r3, #0]
 8013458:	4770      	bx	lr
 801345a:	bf00      	nop
 801345c:	240253bc 	.word	0x240253bc

08013460 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8013460:	4b01      	ldr	r3, [pc, #4]	@ (8013468 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8013462:	6818      	ldr	r0, [r3, #0]
 8013464:	4770      	bx	lr
 8013466:	bf00      	nop
 8013468:	240253c0 	.word	0x240253c0

0801346c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801346c:	b510      	push	{r4, lr}
 801346e:	6803      	ldr	r3, [r0, #0]
 8013470:	460c      	mov	r4, r1
 8013472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013474:	4798      	blx	r3
 8013476:	1b03      	subs	r3, r0, r4
 8013478:	4258      	negs	r0, r3
 801347a:	4158      	adcs	r0, r3
 801347c:	bd10      	pop	{r4, pc}
	...

08013480 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013480:	4b01      	ldr	r3, [pc, #4]	@ (8013488 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013482:	6019      	str	r1, [r3, #0]
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	240253c4 	.word	0x240253c4

0801348c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013490:	4696      	mov	lr, r2
 8013492:	b097      	sub	sp, #92	@ 0x5c
 8013494:	4605      	mov	r5, r0
 8013496:	4614      	mov	r4, r2
 8013498:	460e      	mov	r6, r1
 801349a:	461f      	mov	r7, r3
 801349c:	f10d 0c1c 	add.w	ip, sp, #28
 80134a0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80134a4:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80134a8:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80134ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134b4:	f8de 3000 	ldr.w	r3, [lr]
 80134b8:	f104 0e14 	add.w	lr, r4, #20
 80134bc:	f8cc 3000 	str.w	r3, [ip]
 80134c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80134c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134cc:	f8de 3000 	ldr.w	r3, [lr]
 80134d0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80134d4:	f8cc 3000 	str.w	r3, [ip]
 80134d8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80134dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134e4:	f8de 3000 	ldr.w	r3, [lr]
 80134e8:	4631      	mov	r1, r6
 80134ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80134ec:	4628      	mov	r0, r5
 80134ee:	f8cc 3000 	str.w	r3, [ip]
 80134f2:	682b      	ldr	r3, [r5, #0]
 80134f4:	9201      	str	r2, [sp, #4]
 80134f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80134f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80134fc:	9200      	str	r2, [sp, #0]
 80134fe:	aa07      	add	r2, sp, #28
 8013500:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013504:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8013508:	463b      	mov	r3, r7
 801350a:	47d8      	blx	fp
 801350c:	46a6      	mov	lr, r4
 801350e:	f10d 0c1c 	add.w	ip, sp, #28
 8013512:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801351a:	f8de 3000 	ldr.w	r3, [lr]
 801351e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8013522:	343c      	adds	r4, #60	@ 0x3c
 8013524:	f8cc 3000 	str.w	r3, [ip]
 8013528:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801352c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013534:	f8de 3000 	ldr.w	r3, [lr]
 8013538:	f8cc 3000 	str.w	r3, [ip]
 801353c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	4631      	mov	r1, r6
 801354a:	4628      	mov	r0, r5
 801354c:	f8cc 3000 	str.w	r3, [ip]
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013556:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013558:	f8cd 8008 	str.w	r8, [sp, #8]
 801355c:	9201      	str	r2, [sp, #4]
 801355e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013560:	9200      	str	r2, [sp, #0]
 8013562:	aa07      	add	r2, sp, #28
 8013564:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8013566:	463b      	mov	r3, r7
 8013568:	47a0      	blx	r4
 801356a:	b017      	add	sp, #92	@ 0x5c
 801356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013570 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013574:	b08d      	sub	sp, #52	@ 0x34
 8013576:	4688      	mov	r8, r1
 8013578:	f8d3 c000 	ldr.w	ip, [r3]
 801357c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801357e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8013582:	680f      	ldr	r7, [r1, #0]
 8013584:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8013588:	eba7 070c 	sub.w	r7, r7, ip
 801358c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8013590:	edd3 6a07 	vldr	s13, [r3, #28]
 8013594:	42bc      	cmp	r4, r7
 8013596:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013598:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801359c:	bfa8      	it	ge
 801359e:	463c      	movge	r4, r7
 80135a0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80135a4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80135a8:	ee07 4a90 	vmov	s15, r4
 80135ac:	eb09 0e0c 	add.w	lr, r9, ip
 80135b0:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80135b4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80135b8:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80135bc:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80135c0:	4571      	cmp	r1, lr
 80135c2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80135c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80135ca:	ee25 5a27 	vmul.f32	s10, s10, s15
 80135ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80135d2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80135d6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80135da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80135de:	ee36 0a84 	vadd.f32	s0, s13, s8
 80135e2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80135e6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80135ea:	f340 808c 	ble.w	8013706 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80135ee:	eba1 060e 	sub.w	r6, r1, lr
 80135f2:	fb96 f5f4 	sdiv	r5, r6, r4
 80135f6:	ee07 5a10 	vmov	s14, r5
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	fb04 6615 	mls	r6, r4, r5, r6
 8013600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013604:	eea7 0a04 	vfma.f32	s0, s14, s8
 8013608:	eee7 0a24 	vfma.f32	s1, s14, s9
 801360c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8013610:	dd12      	ble.n	8013638 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8013612:	ee70 6a44 	vsub.f32	s13, s0, s8
 8013616:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801361a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801361e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013626:	bf14      	ite	ne
 8013628:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801362c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8013630:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013634:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013638:	fb05 f204 	mul.w	r2, r5, r4
 801363c:	1abf      	subs	r7, r7, r2
 801363e:	4494      	add	ip, r2
 8013640:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013644:	4411      	add	r1, r2
 8013646:	eb09 020c 	add.w	r2, r9, ip
 801364a:	b209      	sxth	r1, r1
 801364c:	443a      	add	r2, r7
 801364e:	428a      	cmp	r2, r1
 8013650:	bfc4      	itt	gt
 8013652:	eba1 0209 	subgt.w	r2, r1, r9
 8013656:	eba2 070c 	subgt.w	r7, r2, ip
 801365a:	2f00      	cmp	r7, #0
 801365c:	dd50      	ble.n	8013700 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801365e:	fb97 f1f4 	sdiv	r1, r7, r4
 8013662:	fb04 7211 	mls	r2, r4, r1, r7
 8013666:	b90a      	cbnz	r2, 801366c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013668:	3901      	subs	r1, #1
 801366a:	4622      	mov	r2, r4
 801366c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013670:	6840      	ldr	r0, [r0, #4]
 8013672:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8013676:	44b6      	add	lr, r6
 8013678:	f8d0 a000 	ldr.w	sl, [r0]
 801367c:	2900      	cmp	r1, #0
 801367e:	bfcc      	ite	gt
 8013680:	46a1      	movgt	r9, r4
 8013682:	4691      	movle	r9, r2
 8013684:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013686:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013688:	fb04 e505 	mla	r5, r4, r5, lr
 801368c:	eef0 6a42 	vmov.f32	s13, s4
 8013690:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013694:	9008      	str	r0, [sp, #32]
 8013696:	eeb0 7a61 	vmov.f32	s14, s3
 801369a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801369c:	695b      	ldr	r3, [r3, #20]
 801369e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136a2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80136a6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80136aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80136ac:	445b      	add	r3, fp
 80136ae:	9307      	str	r3, [sp, #28]
 80136b0:	ee16 3a90 	vmov	r3, s13
 80136b4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80136b8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80136bc:	ee21 3a23 	vmul.f32	s6, s2, s7
 80136c0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80136c4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80136c8:	ee17 7a90 	vmov	r7, s15
 80136cc:	ee73 7a42 	vsub.f32	s15, s6, s4
 80136d0:	fb97 f7f4 	sdiv	r7, r7, r4
 80136d4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80136d8:	ee17 ca90 	vmov	ip, s15
 80136dc:	fb9c fcf4 	sdiv	ip, ip, r4
 80136e0:	fb0c 3306 	mla	r3, ip, r6, r3
 80136e4:	9302      	str	r3, [sp, #8]
 80136e6:	ee17 3a10 	vmov	r3, s14
 80136ea:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80136ee:	fb07 3706 	mla	r7, r7, r6, r3
 80136f2:	eba9 0306 	sub.w	r3, r9, r6
 80136f6:	e9cd 4700 	strd	r4, r7, [sp]
 80136fa:	f8da 4008 	ldr.w	r4, [sl, #8]
 80136fe:	47a0      	blx	r4
 8013700:	b00d      	add	sp, #52	@ 0x34
 8013702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013706:	2500      	movs	r5, #0
 8013708:	462e      	mov	r6, r5
 801370a:	e799      	b.n	8013640 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801370c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	b0db      	sub	sp, #364	@ 0x16c
 8013712:	461d      	mov	r5, r3
 8013714:	4614      	mov	r4, r2
 8013716:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801371a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801371c:	4629      	mov	r1, r5
 801371e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013720:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8013724:	9009      	str	r0, [sp, #36]	@ 0x24
 8013726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013728:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801372c:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8013730:	9310      	str	r3, [sp, #64]	@ 0x40
 8013732:	6803      	ldr	r3, [r0, #0]
 8013734:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8013736:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801373a:	47b8      	blx	r7
 801373c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801373e:	6058      	str	r0, [r3, #4]
 8013740:	2800      	cmp	r0, #0
 8013742:	f000 83a1 	beq.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013746:	682b      	ldr	r3, [r5, #0]
 8013748:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801374c:	ed94 7a02 	vldr	s14, [r4, #8]
 8013750:	9314      	str	r3, [sp, #80]	@ 0x50
 8013752:	686b      	ldr	r3, [r5, #4]
 8013754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013758:	9315      	str	r3, [sp, #84]	@ 0x54
 801375a:	4bc1      	ldr	r3, [pc, #772]	@ (8013a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801375c:	7819      	ldrb	r1, [r3, #0]
 801375e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013762:	2900      	cmp	r1, #0
 8013764:	bf16      	itet	ne
 8013766:	4619      	movne	r1, r3
 8013768:	4611      	moveq	r1, r2
 801376a:	4613      	movne	r3, r2
 801376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013770:	9116      	str	r1, [sp, #88]	@ 0x58
 8013772:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8013776:	f240 8387 	bls.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801377a:	ed94 7a07 	vldr	s14, [r4, #28]
 801377e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013786:	f240 837f 	bls.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801378a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801378e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013796:	f240 8377 	bls.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801379a:	6822      	ldr	r2, [r4, #0]
 801379c:	4bb1      	ldr	r3, [pc, #708]	@ (8013a64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801379e:	429a      	cmp	r2, r3
 80137a0:	f2c0 8372 	blt.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137a4:	49b0      	ldr	r1, [pc, #704]	@ (8013a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80137a6:	6963      	ldr	r3, [r4, #20]
 80137a8:	428a      	cmp	r2, r1
 80137aa:	f300 836d 	bgt.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137ae:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80137b2:	48ae      	ldr	r0, [pc, #696]	@ (8013a6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80137b4:	33ff      	adds	r3, #255	@ 0xff
 80137b6:	4283      	cmp	r3, r0
 80137b8:	f200 8366 	bhi.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80137be:	4dac      	ldr	r5, [pc, #688]	@ (8013a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80137c0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80137c4:	33ff      	adds	r3, #255	@ 0xff
 80137c6:	42ab      	cmp	r3, r5
 80137c8:	f200 835e 	bhi.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137cc:	6862      	ldr	r2, [r4, #4]
 80137ce:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80137d2:	33ff      	adds	r3, #255	@ 0xff
 80137d4:	4283      	cmp	r3, r0
 80137d6:	f200 8357 	bhi.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137da:	69a1      	ldr	r1, [r4, #24]
 80137dc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80137e0:	33ff      	adds	r3, #255	@ 0xff
 80137e2:	4283      	cmp	r3, r0
 80137e4:	f200 8350 	bhi.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80137ea:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80137ee:	30ff      	adds	r0, #255	@ 0xff
 80137f0:	42a8      	cmp	r0, r5
 80137f2:	f200 8349 	bhi.w	8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137f6:	428a      	cmp	r2, r1
 80137f8:	f280 8110 	bge.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80137fc:	429a      	cmp	r2, r3
 80137fe:	f300 8119 	bgt.w	8013a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013802:	4299      	cmp	r1, r3
 8013804:	f280 811d 	bge.w	8013a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8013808:	2502      	movs	r5, #2
 801380a:	2701      	movs	r7, #1
 801380c:	46a9      	mov	r9, r5
 801380e:	46b8      	mov	r8, r7
 8013810:	f04f 0a00 	mov.w	sl, #0
 8013814:	4621      	mov	r1, r4
 8013816:	a849      	add	r0, sp, #292	@ 0x124
 8013818:	f003 fe70 	bl	80174fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801381c:	4622      	mov	r2, r4
 801381e:	4653      	mov	r3, sl
 8013820:	a949      	add	r1, sp, #292	@ 0x124
 8013822:	f8cd 9000 	str.w	r9, [sp]
 8013826:	a819      	add	r0, sp, #100	@ 0x64
 8013828:	f003 ff98 	bl	801775c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801382c:	4622      	mov	r2, r4
 801382e:	4653      	mov	r3, sl
 8013830:	a949      	add	r1, sp, #292	@ 0x124
 8013832:	f8cd 8000 	str.w	r8, [sp]
 8013836:	a829      	add	r0, sp, #164	@ 0xa4
 8013838:	f003 ff90 	bl	801775c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801383c:	4643      	mov	r3, r8
 801383e:	4622      	mov	r2, r4
 8013840:	a949      	add	r1, sp, #292	@ 0x124
 8013842:	f8cd 9000 	str.w	r9, [sp]
 8013846:	a839      	add	r0, sp, #228	@ 0xe4
 8013848:	f003 ff88 	bl	801775c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801384c:	42af      	cmp	r7, r5
 801384e:	af12      	add	r7, sp, #72	@ 0x48
 8013850:	bfb7      	itett	lt
 8013852:	2300      	movlt	r3, #0
 8013854:	2301      	movge	r3, #1
 8013856:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8013858:	ac19      	addlt	r4, sp, #100	@ 0x64
 801385a:	bfb1      	iteee	lt
 801385c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801385e:	ad19      	addge	r5, sp, #100	@ 0x64
 8013860:	930e      	strge	r3, [sp, #56]	@ 0x38
 8013862:	ac29      	addge	r4, sp, #164	@ 0xa4
 8013864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013866:	e893 0003 	ldmia.w	r3, {r0, r1}
 801386a:	e887 0003 	stmia.w	r7, {r0, r1}
 801386e:	b928      	cbnz	r0, 801387c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013870:	4b80      	ldr	r3, [pc, #512]	@ (8013a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013872:	6818      	ldr	r0, [r3, #0]
 8013874:	6803      	ldr	r3, [r0, #0]
 8013876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013878:	4798      	blx	r3
 801387a:	6038      	str	r0, [r7, #0]
 801387c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801387e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013886:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013888:	930c      	str	r3, [sp, #48]	@ 0x30
 801388a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801388c:	6963      	ldr	r3, [r4, #20]
 801388e:	440b      	add	r3, r1
 8013890:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013894:	4408      	add	r0, r1
 8013896:	b200      	sxth	r0, r0
 8013898:	4283      	cmp	r3, r0
 801389a:	900d      	str	r0, [sp, #52]	@ 0x34
 801389c:	f280 80dd 	bge.w	8013a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80138a0:	428b      	cmp	r3, r1
 80138a2:	da08      	bge.n	80138b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80138a4:	2a00      	cmp	r2, #0
 80138a6:	dd06      	ble.n	80138b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80138a8:	1acb      	subs	r3, r1, r3
 80138aa:	429a      	cmp	r2, r3
 80138ac:	f2c0 80e4 	blt.w	8013a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f300 80e2 	bgt.w	8013a7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80138b6:	6967      	ldr	r7, [r4, #20]
 80138b8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80138bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138be:	443b      	add	r3, r7
 80138c0:	461f      	mov	r7, r3
 80138c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138c4:	1bdf      	subs	r7, r3, r7
 80138c6:	4297      	cmp	r7, r2
 80138c8:	bfa8      	it	ge
 80138ca:	4617      	movge	r7, r2
 80138cc:	2f00      	cmp	r7, #0
 80138ce:	f340 8166 	ble.w	8013b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80138d2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80138d4:	6829      	ldr	r1, [r5, #0]
 80138d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80138da:	f9bb 3000 	ldrsh.w	r3, [fp]
 80138de:	4411      	add	r1, r2
 80138e0:	6820      	ldr	r0, [r4, #0]
 80138e2:	4299      	cmp	r1, r3
 80138e4:	dd1a      	ble.n	801391c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80138e6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80138ea:	4402      	add	r2, r0
 80138ec:	440b      	add	r3, r1
 80138ee:	b21b      	sxth	r3, r3
 80138f0:	429a      	cmp	r2, r3
 80138f2:	dc13      	bgt.n	801391c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80138f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80138f6:	a912      	add	r1, sp, #72	@ 0x48
 80138f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	9206      	str	r2, [sp, #24]
 8013900:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013902:	9500      	str	r5, [sp, #0]
 8013904:	9205      	str	r2, [sp, #20]
 8013906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013908:	e9cd b203 	strd	fp, r2, [sp, #12]
 801390c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801390e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013912:	aa49      	add	r2, sp, #292	@ 0x124
 8013914:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013918:	4623      	mov	r3, r4
 801391a:	47c8      	blx	r9
 801391c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013920:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013924:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8013928:	ee37 7a27 	vadd.f32	s14, s14, s15
 801392c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013930:	68a1      	ldr	r1, [r4, #8]
 8013932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013936:	ed94 6a08 	vldr	s12, [r4, #32]
 801393a:	edd4 6a07 	vldr	s13, [r4, #28]
 801393e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013942:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013946:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801394a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801394e:	edc4 6a07 	vstr	s13, [r4, #28]
 8013952:	441a      	add	r2, r3
 8013954:	6963      	ldr	r3, [r4, #20]
 8013956:	3301      	adds	r3, #1
 8013958:	6022      	str	r2, [r4, #0]
 801395a:	6163      	str	r3, [r4, #20]
 801395c:	69a3      	ldr	r3, [r4, #24]
 801395e:	3b01      	subs	r3, #1
 8013960:	61a3      	str	r3, [r4, #24]
 8013962:	6923      	ldr	r3, [r4, #16]
 8013964:	440b      	add	r3, r1
 8013966:	68e1      	ldr	r1, [r4, #12]
 8013968:	428b      	cmp	r3, r1
 801396a:	6123      	str	r3, [r4, #16]
 801396c:	db15      	blt.n	801399a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801396e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013972:	3201      	adds	r2, #1
 8013974:	1a5b      	subs	r3, r3, r1
 8013976:	ee76 6a26 	vadd.f32	s13, s12, s13
 801397a:	6022      	str	r2, [r4, #0]
 801397c:	6123      	str	r3, [r4, #16]
 801397e:	edc4 6a07 	vstr	s13, [r4, #28]
 8013982:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013986:	ee36 7a87 	vadd.f32	s14, s13, s14
 801398a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801398e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013996:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801399a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801399e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80139a2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80139a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80139aa:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80139ae:	68a9      	ldr	r1, [r5, #8]
 80139b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139b4:	ed95 6a08 	vldr	s12, [r5, #32]
 80139b8:	edd5 6a07 	vldr	s13, [r5, #28]
 80139bc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80139c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80139c4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80139c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80139cc:	edc5 6a07 	vstr	s13, [r5, #28]
 80139d0:	441a      	add	r2, r3
 80139d2:	696b      	ldr	r3, [r5, #20]
 80139d4:	3301      	adds	r3, #1
 80139d6:	602a      	str	r2, [r5, #0]
 80139d8:	616b      	str	r3, [r5, #20]
 80139da:	69ab      	ldr	r3, [r5, #24]
 80139dc:	3b01      	subs	r3, #1
 80139de:	61ab      	str	r3, [r5, #24]
 80139e0:	692b      	ldr	r3, [r5, #16]
 80139e2:	440b      	add	r3, r1
 80139e4:	68e9      	ldr	r1, [r5, #12]
 80139e6:	428b      	cmp	r3, r1
 80139e8:	612b      	str	r3, [r5, #16]
 80139ea:	db15      	blt.n	8013a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80139ec:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80139f0:	3201      	adds	r2, #1
 80139f2:	1a5b      	subs	r3, r3, r1
 80139f4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80139f8:	602a      	str	r2, [r5, #0]
 80139fa:	612b      	str	r3, [r5, #16]
 80139fc:	edc5 6a07 	vstr	s13, [r5, #28]
 8013a00:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013a04:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013a08:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013a0c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8013a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a14:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013a18:	3f01      	subs	r7, #1
 8013a1a:	e757      	b.n	80138cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013a1c:	4299      	cmp	r1, r3
 8013a1e:	dc13      	bgt.n	8013a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013a20:	429a      	cmp	r2, r3
 8013a22:	da14      	bge.n	8013a4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013a24:	2502      	movs	r5, #2
 8013a26:	2703      	movs	r7, #3
 8013a28:	f04f 0800 	mov.w	r8, #0
 8013a2c:	46a9      	mov	r9, r5
 8013a2e:	f04f 0a01 	mov.w	sl, #1
 8013a32:	e6ef      	b.n	8013814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013a34:	2501      	movs	r5, #1
 8013a36:	2700      	movs	r7, #0
 8013a38:	46a9      	mov	r9, r5
 8013a3a:	46b8      	mov	r8, r7
 8013a3c:	f04f 0a02 	mov.w	sl, #2
 8013a40:	e6e8      	b.n	8013814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013a42:	2501      	movs	r5, #1
 8013a44:	2702      	movs	r7, #2
 8013a46:	e6e1      	b.n	801380c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013a48:	2500      	movs	r5, #0
 8013a4a:	2701      	movs	r7, #1
 8013a4c:	e7f4      	b.n	8013a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8013a4e:	2702      	movs	r7, #2
 8013a50:	2503      	movs	r5, #3
 8013a52:	f04f 0900 	mov.w	r9, #0
 8013a56:	46b8      	mov	r8, r7
 8013a58:	e7e9      	b.n	8013a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	e728      	b.n	80138b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8013a5e:	bf00      	nop
 8013a60:	240253ac 	.word	0x240253ac
 8013a64:	fffd8f01 	.word	0xfffd8f01
 8013a68:	00027100 	.word	0x00027100
 8013a6c:	0004e1ff 	.word	0x0004e1ff
 8013a70:	0004e1fe 	.word	0x0004e1fe
 8013a74:	240253b4 	.word	0x240253b4
 8013a78:	4613      	mov	r3, r2
 8013a7a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013a7c:	469e      	mov	lr, r3
 8013a7e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8013a80:	469c      	mov	ip, r3
 8013a82:	9111      	str	r1, [sp, #68]	@ 0x44
 8013a84:	f04f 0900 	mov.w	r9, #0
 8013a88:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8013a8c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8013a90:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8013a94:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8013a98:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8013a9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013aa0:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013aa4:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8013aa8:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8013aac:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8013ab0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013ab4:	f1bc 0f00 	cmp.w	ip, #0
 8013ab8:	d147      	bne.n	8013b4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013aba:	eb03 0c07 	add.w	ip, r3, r7
 8013abe:	1ad7      	subs	r7, r2, r3
 8013ac0:	f1b9 0f00 	cmp.w	r9, #0
 8013ac4:	d009      	beq.n	8013ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013ac6:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013ac8:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8013acc:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8013ad0:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8013ad4:	912d      	str	r1, [sp, #180]	@ 0xb4
 8013ad6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8013ada:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013adc:	f04f 0800 	mov.w	r8, #0
 8013ae0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013ae4:	9111      	str	r1, [sp, #68]	@ 0x44
 8013ae6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013aea:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013aee:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013af2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013af6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013afa:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013afe:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013b02:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8013b06:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8013b0a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013b0e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013b12:	f1be 0f00 	cmp.w	lr, #0
 8013b16:	d031      	beq.n	8013b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8013b18:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013b1a:	4450      	add	r0, sl
 8013b1c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013b20:	4431      	add	r1, r6
 8013b22:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013b26:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013b2a:	4549      	cmp	r1, r9
 8013b2c:	db08      	blt.n	8013b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8013b2e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013b32:	3001      	adds	r0, #1
 8013b34:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013b38:	eba1 0109 	sub.w	r1, r1, r9
 8013b3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013b40:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013b44:	f04f 0801 	mov.w	r8, #1
 8013b48:	e7e3      	b.n	8013b12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8013b4a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013b4c:	4450      	add	r0, sl
 8013b4e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013b52:	4431      	add	r1, r6
 8013b54:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013b58:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013b5c:	4541      	cmp	r1, r8
 8013b5e:	db08      	blt.n	8013b72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8013b60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013b64:	3001      	adds	r0, #1
 8013b66:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013b6a:	eba1 0108 	sub.w	r1, r1, r8
 8013b6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013b72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b76:	f04f 0901 	mov.w	r9, #1
 8013b7a:	e79b      	b.n	8013ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013b7c:	449c      	add	ip, r3
 8013b7e:	1aff      	subs	r7, r7, r3
 8013b80:	f1b8 0f00 	cmp.w	r8, #0
 8013b84:	d009      	beq.n	8013b9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013b86:	9019      	str	r0, [sp, #100]	@ 0x64
 8013b88:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013b8c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8013b90:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8013b94:	911d      	str	r1, [sp, #116]	@ 0x74
 8013b96:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013b9a:	1ad2      	subs	r2, r2, r3
 8013b9c:	e68b      	b.n	80138b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ba0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	f000 80d1 	beq.w	8013d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013ba8:	ad19      	add	r5, sp, #100	@ 0x64
 8013baa:	ac39      	add	r4, sp, #228	@ 0xe4
 8013bac:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013bae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013bb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8013bb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013bba:	6963      	ldr	r3, [r4, #20]
 8013bbc:	440b      	add	r3, r1
 8013bbe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013bc2:	4408      	add	r0, r1
 8013bc4:	b200      	sxth	r0, r0
 8013bc6:	4283      	cmp	r3, r0
 8013bc8:	900d      	str	r0, [sp, #52]	@ 0x34
 8013bca:	f280 80c1 	bge.w	8013d50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8013bce:	428b      	cmp	r3, r1
 8013bd0:	da08      	bge.n	8013be4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013bd2:	2a00      	cmp	r2, #0
 8013bd4:	dd06      	ble.n	8013be4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013bd6:	1acb      	subs	r3, r1, r3
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	f2c0 80bb 	blt.w	8013d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f300 80b9 	bgt.w	8013d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013be4:	6967      	ldr	r7, [r4, #20]
 8013be6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013bec:	443b      	add	r3, r7
 8013bee:	461f      	mov	r7, r3
 8013bf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bf2:	1bdf      	subs	r7, r3, r7
 8013bf4:	4297      	cmp	r7, r2
 8013bf6:	bfa8      	it	ge
 8013bf8:	4617      	movge	r7, r2
 8013bfa:	2f00      	cmp	r7, #0
 8013bfc:	f340 813c 	ble.w	8013e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8013c00:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013c02:	6829      	ldr	r1, [r5, #0]
 8013c04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c08:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013c0c:	4411      	add	r1, r2
 8013c0e:	6820      	ldr	r0, [r4, #0]
 8013c10:	4299      	cmp	r1, r3
 8013c12:	dd1a      	ble.n	8013c4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013c14:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013c18:	4402      	add	r2, r0
 8013c1a:	440b      	add	r3, r1
 8013c1c:	b21b      	sxth	r3, r3
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	dc13      	bgt.n	8013c4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013c22:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013c24:	a912      	add	r1, sp, #72	@ 0x48
 8013c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	9206      	str	r2, [sp, #24]
 8013c2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013c30:	9500      	str	r5, [sp, #0]
 8013c32:	9205      	str	r2, [sp, #20]
 8013c34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c36:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013c3a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013c3c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013c40:	aa49      	add	r2, sp, #292	@ 0x124
 8013c42:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013c46:	4623      	mov	r3, r4
 8013c48:	47c8      	blx	r9
 8013c4a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013c4e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013c52:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8013c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c5a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013c5e:	68a1      	ldr	r1, [r4, #8]
 8013c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c64:	ed94 6a08 	vldr	s12, [r4, #32]
 8013c68:	edd4 6a07 	vldr	s13, [r4, #28]
 8013c6c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013c70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013c74:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013c78:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013c7c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013c80:	441a      	add	r2, r3
 8013c82:	6963      	ldr	r3, [r4, #20]
 8013c84:	3301      	adds	r3, #1
 8013c86:	6022      	str	r2, [r4, #0]
 8013c88:	6163      	str	r3, [r4, #20]
 8013c8a:	69a3      	ldr	r3, [r4, #24]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	61a3      	str	r3, [r4, #24]
 8013c90:	6923      	ldr	r3, [r4, #16]
 8013c92:	440b      	add	r3, r1
 8013c94:	68e1      	ldr	r1, [r4, #12]
 8013c96:	428b      	cmp	r3, r1
 8013c98:	6123      	str	r3, [r4, #16]
 8013c9a:	db15      	blt.n	8013cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013c9c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013ca0:	3201      	adds	r2, #1
 8013ca2:	1a5b      	subs	r3, r3, r1
 8013ca4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013ca8:	6022      	str	r2, [r4, #0]
 8013caa:	6123      	str	r3, [r4, #16]
 8013cac:	edc4 6a07 	vstr	s13, [r4, #28]
 8013cb0:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013cb4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013cb8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013cbc:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cc4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013cc8:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013ccc:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013cd0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cd8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013cdc:	68a9      	ldr	r1, [r5, #8]
 8013cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ce2:	ed95 6a08 	vldr	s12, [r5, #32]
 8013ce6:	edd5 6a07 	vldr	s13, [r5, #28]
 8013cea:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013cee:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013cf2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013cf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cfa:	edc5 6a07 	vstr	s13, [r5, #28]
 8013cfe:	441a      	add	r2, r3
 8013d00:	696b      	ldr	r3, [r5, #20]
 8013d02:	3301      	adds	r3, #1
 8013d04:	602a      	str	r2, [r5, #0]
 8013d06:	616b      	str	r3, [r5, #20]
 8013d08:	69ab      	ldr	r3, [r5, #24]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	61ab      	str	r3, [r5, #24]
 8013d0e:	692b      	ldr	r3, [r5, #16]
 8013d10:	440b      	add	r3, r1
 8013d12:	68e9      	ldr	r1, [r5, #12]
 8013d14:	428b      	cmp	r3, r1
 8013d16:	612b      	str	r3, [r5, #16]
 8013d18:	db15      	blt.n	8013d46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8013d1a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8013d1e:	3201      	adds	r2, #1
 8013d20:	1a5b      	subs	r3, r3, r1
 8013d22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013d26:	602a      	str	r2, [r5, #0]
 8013d28:	612b      	str	r3, [r5, #16]
 8013d2a:	edc5 6a07 	vstr	s13, [r5, #28]
 8013d2e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013d32:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013d36:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013d3a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8013d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d42:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013d46:	3f01      	subs	r7, #1
 8013d48:	e757      	b.n	8013bfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8013d4a:	ad39      	add	r5, sp, #228	@ 0xe4
 8013d4c:	ac19      	add	r4, sp, #100	@ 0x64
 8013d4e:	e72d      	b.n	8013bac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8013d50:	4613      	mov	r3, r2
 8013d52:	e744      	b.n	8013bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013d54:	4613      	mov	r3, r2
 8013d56:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8013d58:	469e      	mov	lr, r3
 8013d5a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8013d5e:	461f      	mov	r7, r3
 8013d60:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8013d64:	f04f 0900 	mov.w	r9, #0
 8013d68:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8013d6c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8013d70:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8013d74:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8013d78:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8013d7c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8013d7e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8013d82:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8013d86:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8013d8a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8013d8e:	960e      	str	r6, [sp, #56]	@ 0x38
 8013d90:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8013d94:	2f00      	cmp	r7, #0
 8013d96:	d146      	bne.n	8013e26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013d98:	449c      	add	ip, r3
 8013d9a:	1ad7      	subs	r7, r2, r3
 8013d9c:	f1b9 0f00 	cmp.w	r9, #0
 8013da0:	d009      	beq.n	8013db6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013da2:	9039      	str	r0, [sp, #228]	@ 0xe4
 8013da4:	913d      	str	r1, [sp, #244]	@ 0xf4
 8013da6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8013daa:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8013dae:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8013db2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8013db6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013db8:	f04f 0800 	mov.w	r8, #0
 8013dbc:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013dc0:	910e      	str	r1, [sp, #56]	@ 0x38
 8013dc2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013dc6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013dca:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013dce:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013dd2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013dd6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013dda:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013dde:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8013de2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8013de6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013dea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013dee:	f1be 0f00 	cmp.w	lr, #0
 8013df2:	d030      	beq.n	8013e56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013df4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013df6:	4450      	add	r0, sl
 8013df8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013dfc:	4431      	add	r1, r6
 8013dfe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013e02:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013e06:	4549      	cmp	r1, r9
 8013e08:	db08      	blt.n	8013e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8013e0a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013e0e:	3001      	adds	r0, #1
 8013e10:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013e14:	eba1 0109 	sub.w	r1, r1, r9
 8013e18:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013e1c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013e20:	f04f 0801 	mov.w	r8, #1
 8013e24:	e7e3      	b.n	8013dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8013e26:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013e28:	4450      	add	r0, sl
 8013e2a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013e2e:	4431      	add	r1, r6
 8013e30:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013e34:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013e38:	4541      	cmp	r1, r8
 8013e3a:	db08      	blt.n	8013e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013e3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013e40:	3001      	adds	r0, #1
 8013e42:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013e46:	eba1 0108 	sub.w	r1, r1, r8
 8013e4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013e4e:	3f01      	subs	r7, #1
 8013e50:	f04f 0901 	mov.w	r9, #1
 8013e54:	e79e      	b.n	8013d94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013e56:	449c      	add	ip, r3
 8013e58:	1aff      	subs	r7, r7, r3
 8013e5a:	f1b8 0f00 	cmp.w	r8, #0
 8013e5e:	d009      	beq.n	8013e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8013e60:	9019      	str	r0, [sp, #100]	@ 0x64
 8013e62:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013e66:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8013e6a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8013e6e:	911d      	str	r1, [sp, #116]	@ 0x74
 8013e70:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013e74:	1ad2      	subs	r2, r2, r3
 8013e76:	e6b5      	b.n	8013be4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	b923      	cbnz	r3, 8013e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013e7e:	4b04      	ldr	r3, [pc, #16]	@ (8013e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8013e80:	6818      	ldr	r0, [r3, #0]
 8013e82:	6803      	ldr	r3, [r0, #0]
 8013e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e86:	4798      	blx	r3
 8013e88:	b05b      	add	sp, #364	@ 0x16c
 8013e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8e:	bf00      	nop
 8013e90:	240253b4 	.word	0x240253b4

08013e94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013e94:	2b03      	cmp	r3, #3
 8013e96:	d818      	bhi.n	8013eca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013e98:	e8df f003 	tbb	[pc, r3]
 8013e9c:	130d0602 	.word	0x130d0602
 8013ea0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013ea4:	1850      	adds	r0, r2, r1
 8013ea6:	4770      	bx	lr
 8013ea8:	8803      	ldrh	r3, [r0, #0]
 8013eaa:	8880      	ldrh	r0, [r0, #4]
 8013eac:	4418      	add	r0, r3
 8013eae:	b200      	sxth	r0, r0
 8013eb0:	1a80      	subs	r0, r0, r2
 8013eb2:	3801      	subs	r0, #1
 8013eb4:	4770      	bx	lr
 8013eb6:	8803      	ldrh	r3, [r0, #0]
 8013eb8:	8880      	ldrh	r0, [r0, #4]
 8013eba:	4418      	add	r0, r3
 8013ebc:	b200      	sxth	r0, r0
 8013ebe:	1a40      	subs	r0, r0, r1
 8013ec0:	e7f7      	b.n	8013eb2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013ec2:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013ec6:	4410      	add	r0, r2
 8013ec8:	4770      	bx	lr
 8013eca:	2000      	movs	r0, #0
 8013ecc:	4770      	bx	lr

08013ece <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013ece:	2b03      	cmp	r3, #3
 8013ed0:	d817      	bhi.n	8013f02 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013ed2:	e8df f003 	tbb	[pc, r3]
 8013ed6:	0602      	.short	0x0602
 8013ed8:	1009      	.short	0x1009
 8013eda:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013ede:	1850      	adds	r0, r2, r1
 8013ee0:	4770      	bx	lr
 8013ee2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013ee6:	e7fa      	b.n	8013ede <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013ee8:	8843      	ldrh	r3, [r0, #2]
 8013eea:	88c0      	ldrh	r0, [r0, #6]
 8013eec:	4418      	add	r0, r3
 8013eee:	b200      	sxth	r0, r0
 8013ef0:	1a80      	subs	r0, r0, r2
 8013ef2:	3801      	subs	r0, #1
 8013ef4:	4770      	bx	lr
 8013ef6:	8843      	ldrh	r3, [r0, #2]
 8013ef8:	88c0      	ldrh	r0, [r0, #6]
 8013efa:	4418      	add	r0, r3
 8013efc:	b200      	sxth	r0, r0
 8013efe:	1a40      	subs	r0, r0, r1
 8013f00:	e7f7      	b.n	8013ef2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013f02:	2000      	movs	r0, #0
 8013f04:	4770      	bx	lr
	...

08013f08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013f08:	4b01      	ldr	r3, [pc, #4]	@ (8013f10 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	4770      	bx	lr
 8013f10:	240253c4 	.word	0x240253c4

08013f14 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013f14:	4603      	mov	r3, r0
 8013f16:	b1c8      	cbz	r0, 8013f4c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013f18:	0c02      	lsrs	r2, r0, #16
 8013f1a:	0412      	lsls	r2, r2, #16
 8013f1c:	b9a2      	cbnz	r2, 8013f48 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013f1e:	0403      	lsls	r3, r0, #16
 8013f20:	2010      	movs	r0, #16
 8013f22:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8013f26:	bf04      	itt	eq
 8013f28:	021b      	lsleq	r3, r3, #8
 8013f2a:	3008      	addeq	r0, #8
 8013f2c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8013f30:	bf04      	itt	eq
 8013f32:	011b      	lsleq	r3, r3, #4
 8013f34:	3004      	addeq	r0, #4
 8013f36:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8013f3a:	bf04      	itt	eq
 8013f3c:	009b      	lsleq	r3, r3, #2
 8013f3e:	3002      	addeq	r0, #2
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	db04      	blt.n	8013f4e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013f44:	3001      	adds	r0, #1
 8013f46:	4770      	bx	lr
 8013f48:	2000      	movs	r0, #0
 8013f4a:	e7ea      	b.n	8013f22 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013f4c:	2020      	movs	r0, #32
 8013f4e:	4770      	bx	lr

08013f50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	b087      	sub	sp, #28
 8013f56:	460d      	mov	r5, r1
 8013f58:	4616      	mov	r6, r2
 8013f5a:	4698      	mov	r8, r3
 8013f5c:	4601      	mov	r1, r0
 8013f5e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8013f62:	b120      	cbz	r0, 8013f6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013f64:	b11a      	cbz	r2, 8013f6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013f66:	2d1f      	cmp	r5, #31
 8013f68:	d801      	bhi.n	8013f6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013f6a:	2b1f      	cmp	r3, #31
 8013f6c:	d904      	bls.n	8013f78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8013f6e:	2000      	movs	r0, #0
 8013f70:	6038      	str	r0, [r7, #0]
 8013f72:	b007      	add	sp, #28
 8013f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f78:	b97d      	cbnz	r5, 8013f9a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8013f7a:	b143      	cbz	r3, 8013f8e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	462b      	mov	r3, r5
 8013f80:	4641      	mov	r1, r8
 8013f82:	4630      	mov	r0, r6
 8013f84:	e9cd 4700 	strd	r4, r7, [sp]
 8013f88:	f7ff ffe2 	bl	8013f50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013f8c:	e7f1      	b.n	8013f72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f92:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	e7eb      	b.n	8013f72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013f9a:	fa32 fa05 	lsrs.w	sl, r2, r5
 8013f9e:	d106      	bne.n	8013fae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8013fa0:	4346      	muls	r6, r0
 8013fa2:	fbb6 f0f4 	udiv	r0, r6, r4
 8013fa6:	fb04 6610 	mls	r6, r4, r0, r6
 8013faa:	603e      	str	r6, [r7, #0]
 8013fac:	e7e1      	b.n	8013f72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013fae:	2201      	movs	r2, #1
 8013fb0:	fa00 fb05 	lsl.w	fp, r0, r5
 8013fb4:	40aa      	lsls	r2, r5
 8013fb6:	fbbb f9f4 	udiv	r9, fp, r4
 8013fba:	3a01      	subs	r2, #1
 8013fbc:	fb0a f309 	mul.w	r3, sl, r9
 8013fc0:	fb04 b919 	mls	r9, r4, r9, fp
 8013fc4:	4016      	ands	r6, r2
 8013fc6:	9303      	str	r3, [sp, #12]
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7ff ffa3 	bl	8013f14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013fce:	462b      	mov	r3, r5
 8013fd0:	460a      	mov	r2, r1
 8013fd2:	4601      	mov	r1, r0
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	e9cd 4700 	strd	r4, r7, [sp]
 8013fda:	f7ff ffb9 	bl	8013f50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013fde:	4606      	mov	r6, r0
 8013fe0:	4648      	mov	r0, r9
 8013fe2:	eb05 0108 	add.w	r1, r5, r8
 8013fe6:	f7ff ff95 	bl	8013f14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013fea:	ab05      	add	r3, sp, #20
 8013fec:	464a      	mov	r2, r9
 8013fee:	e9cd 4300 	strd	r4, r3, [sp]
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	4650      	mov	r0, sl
 8013ff6:	f7ff ffab 	bl	8013f50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	9a05      	ldr	r2, [sp, #20]
 8013ffe:	9b03      	ldr	r3, [sp, #12]
 8014000:	4411      	add	r1, r2
 8014002:	fbb1 f2f4 	udiv	r2, r1, r4
 8014006:	18d3      	adds	r3, r2, r3
 8014008:	fb04 1412 	mls	r4, r4, r2, r1
 801400c:	441e      	add	r6, r3
 801400e:	603c      	str	r4, [r7, #0]
 8014010:	4430      	add	r0, r6
 8014012:	e7ae      	b.n	8013f72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08014014 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014018:	b085      	sub	sp, #20
 801401a:	f1b0 0900 	subs.w	r9, r0, #0
 801401e:	461d      	mov	r5, r3
 8014020:	4617      	mov	r7, r2
 8014022:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014024:	bfbb      	ittet	lt
 8014026:	f1c9 0900 	rsblt	r9, r9, #0
 801402a:	f04f 36ff 	movlt.w	r6, #4294967295
 801402e:	2601      	movge	r6, #1
 8014030:	6823      	ldrlt	r3, [r4, #0]
 8014032:	bfbc      	itt	lt
 8014034:	425b      	neglt	r3, r3
 8014036:	6023      	strlt	r3, [r4, #0]
 8014038:	2a00      	cmp	r2, #0
 801403a:	da04      	bge.n	8014046 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801403c:	6823      	ldr	r3, [r4, #0]
 801403e:	4257      	negs	r7, r2
 8014040:	4276      	negs	r6, r6
 8014042:	425b      	negs	r3, r3
 8014044:	6023      	str	r3, [r4, #0]
 8014046:	2d00      	cmp	r5, #0
 8014048:	4638      	mov	r0, r7
 801404a:	bfba      	itte	lt
 801404c:	426d      	neglt	r5, r5
 801404e:	f04f 38ff 	movlt.w	r8, #4294967295
 8014052:	f04f 0801 	movge.w	r8, #1
 8014056:	f7ff ff5d 	bl	8013f14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801405a:	ab03      	add	r3, sp, #12
 801405c:	463a      	mov	r2, r7
 801405e:	e9cd 5300 	strd	r5, r3, [sp]
 8014062:	4603      	mov	r3, r0
 8014064:	4648      	mov	r0, r9
 8014066:	f7ff ff73 	bl	8013f50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	9a03      	ldr	r2, [sp, #12]
 801406e:	4546      	cmp	r6, r8
 8014070:	441a      	add	r2, r3
 8014072:	fb92 f3f5 	sdiv	r3, r2, r5
 8014076:	4418      	add	r0, r3
 8014078:	fb05 2313 	mls	r3, r5, r3, r2
 801407c:	bf18      	it	ne
 801407e:	4240      	negne	r0, r0
 8014080:	1c72      	adds	r2, r6, #1
 8014082:	6023      	str	r3, [r4, #0]
 8014084:	d105      	bne.n	8014092 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014086:	2b00      	cmp	r3, #0
 8014088:	f1c3 0200 	rsb	r2, r3, #0
 801408c:	db0b      	blt.n	80140a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801408e:	6022      	str	r2, [r4, #0]
 8014090:	e006      	b.n	80140a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014092:	2e01      	cmp	r6, #1
 8014094:	d104      	bne.n	80140a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014096:	2b00      	cmp	r3, #0
 8014098:	da02      	bge.n	80140a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801409a:	442b      	add	r3, r5
 801409c:	3801      	subs	r0, #1
 801409e:	6023      	str	r3, [r4, #0]
 80140a0:	b005      	add	sp, #20
 80140a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140a6:	3801      	subs	r0, #1
 80140a8:	1b52      	subs	r2, r2, r5
 80140aa:	e7f0      	b.n	801408e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080140ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80140ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80140b0:	4c1c      	ldr	r4, [pc, #112]	@ (8014124 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80140b2:	4605      	mov	r5, r0
 80140b4:	6807      	ldr	r7, [r0, #0]
 80140b6:	69a3      	ldr	r3, [r4, #24]
 80140b8:	b92b      	cbnz	r3, 80140c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80140ba:	6840      	ldr	r0, [r0, #4]
 80140bc:	e9c5 7000 	strd	r7, r0, [r5]
 80140c0:	b004      	add	sp, #16
 80140c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140c6:	f04f 0802 	mov.w	r8, #2
 80140ca:	68a2      	ldr	r2, [r4, #8]
 80140cc:	ae04      	add	r6, sp, #16
 80140ce:	6820      	ldr	r0, [r4, #0]
 80140d0:	fb93 f1f8 	sdiv	r1, r3, r8
 80140d4:	440a      	add	r2, r1
 80140d6:	69e1      	ldr	r1, [r4, #28]
 80140d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80140dc:	463a      	mov	r2, r7
 80140de:	9600      	str	r6, [sp, #0]
 80140e0:	f7ff ff98 	bl	8014014 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80140e4:	69a3      	ldr	r3, [r4, #24]
 80140e6:	4607      	mov	r7, r0
 80140e8:	686a      	ldr	r2, [r5, #4]
 80140ea:	6a21      	ldr	r1, [r4, #32]
 80140ec:	9600      	str	r6, [sp, #0]
 80140ee:	6860      	ldr	r0, [r4, #4]
 80140f0:	f7ff ff90 	bl	8014014 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80140f4:	69a3      	ldr	r3, [r4, #24]
 80140f6:	6962      	ldr	r2, [r4, #20]
 80140f8:	4407      	add	r7, r0
 80140fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80140fc:	9600      	str	r6, [sp, #0]
 80140fe:	68e0      	ldr	r0, [r4, #12]
 8014100:	fb93 f8f8 	sdiv	r8, r3, r8
 8014104:	4442      	add	r2, r8
 8014106:	9203      	str	r2, [sp, #12]
 8014108:	682a      	ldr	r2, [r5, #0]
 801410a:	f7ff ff83 	bl	8014014 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801410e:	4680      	mov	r8, r0
 8014110:	9600      	str	r6, [sp, #0]
 8014112:	69a3      	ldr	r3, [r4, #24]
 8014114:	686a      	ldr	r2, [r5, #4]
 8014116:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014118:	6920      	ldr	r0, [r4, #16]
 801411a:	f7ff ff7b 	bl	8014014 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801411e:	4440      	add	r0, r8
 8014120:	e7cc      	b.n	80140bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014122:	bf00      	nop
 8014124:	240253c8 	.word	0x240253c8

08014128 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014128:	4b07      	ldr	r3, [pc, #28]	@ (8014148 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b01      	cmp	r3, #1
 801412e:	d109      	bne.n	8014144 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014130:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014134:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014138:	8003      	strh	r3, [r0, #0]
 801413a:	4b04      	ldr	r3, [pc, #16]	@ (801414c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801413c:	881b      	ldrh	r3, [r3, #0]
 801413e:	3b01      	subs	r3, #1
 8014140:	1a9b      	subs	r3, r3, r2
 8014142:	800b      	strh	r3, [r1, #0]
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	240253ac 	.word	0x240253ac
 801414c:	240253a8 	.word	0x240253a8

08014150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014150:	4b07      	ldr	r3, [pc, #28]	@ (8014170 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014152:	b510      	push	{r4, lr}
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	2b01      	cmp	r3, #1
 8014158:	d108      	bne.n	801416c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801415a:	4b06      	ldr	r3, [pc, #24]	@ (8014174 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801415c:	880c      	ldrh	r4, [r1, #0]
 801415e:	881b      	ldrh	r3, [r3, #0]
 8014160:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014164:	3b01      	subs	r3, #1
 8014166:	1b1b      	subs	r3, r3, r4
 8014168:	8003      	strh	r3, [r0, #0]
 801416a:	800a      	strh	r2, [r1, #0]
 801416c:	bd10      	pop	{r4, pc}
 801416e:	bf00      	nop
 8014170:	240253ac 	.word	0x240253ac
 8014174:	240253a8 	.word	0x240253a8

08014178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014178:	4b0a      	ldr	r3, [pc, #40]	@ (80141a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801417a:	b510      	push	{r4, lr}
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	2b01      	cmp	r3, #1
 8014180:	d10e      	bne.n	80141a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014182:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014186:	8843      	ldrh	r3, [r0, #2]
 8014188:	f9b0 4000 	ldrsh.w	r4, [r0]
 801418c:	18ca      	adds	r2, r1, r3
 801418e:	4b06      	ldr	r3, [pc, #24]	@ (80141a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014190:	8044      	strh	r4, [r0, #2]
 8014192:	881b      	ldrh	r3, [r3, #0]
 8014194:	1a9b      	subs	r3, r3, r2
 8014196:	8003      	strh	r3, [r0, #0]
 8014198:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801419c:	8081      	strh	r1, [r0, #4]
 801419e:	80c3      	strh	r3, [r0, #6]
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	bf00      	nop
 80141a4:	240253ac 	.word	0x240253ac
 80141a8:	240253a8 	.word	0x240253a8

080141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80141ac:	4b08      	ldr	r3, [pc, #32]	@ (80141d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d10c      	bne.n	80141ce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80141b4:	8803      	ldrh	r3, [r0, #0]
 80141b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80141ba:	8842      	ldrh	r2, [r0, #2]
 80141bc:	8002      	strh	r2, [r0, #0]
 80141be:	185a      	adds	r2, r3, r1
 80141c0:	4b04      	ldr	r3, [pc, #16]	@ (80141d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80141c2:	881b      	ldrh	r3, [r3, #0]
 80141c4:	1a9b      	subs	r3, r3, r2
 80141c6:	8043      	strh	r3, [r0, #2]
 80141c8:	88c3      	ldrh	r3, [r0, #6]
 80141ca:	80c1      	strh	r1, [r0, #6]
 80141cc:	8083      	strh	r3, [r0, #4]
 80141ce:	4770      	bx	lr
 80141d0:	240253ac 	.word	0x240253ac
 80141d4:	240253a8 	.word	0x240253a8

080141d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80141d8:	4b07      	ldr	r3, [pc, #28]	@ (80141f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80141da:	b510      	push	{r4, lr}
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d108      	bne.n	80141f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80141e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80141e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80141ea:	8003      	strh	r3, [r0, #0]
 80141ec:	8893      	ldrh	r3, [r2, #4]
 80141ee:	3b01      	subs	r3, #1
 80141f0:	1b1b      	subs	r3, r3, r4
 80141f2:	800b      	strh	r3, [r1, #0]
 80141f4:	bd10      	pop	{r4, pc}
 80141f6:	bf00      	nop
 80141f8:	240253ac 	.word	0x240253ac

080141fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80141fc:	4b0b      	ldr	r3, [pc, #44]	@ (801422c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	2b01      	cmp	r3, #1
 8014202:	d111      	bne.n	8014228 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8014204:	680b      	ldr	r3, [r1, #0]
 8014206:	ed90 7a00 	vldr	s14, [r0]
 801420a:	6003      	str	r3, [r0, #0]
 801420c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8014210:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8014230 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8014214:	ee07 3a90 	vmov	s15, r3
 8014218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801421c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014224:	edc1 7a00 	vstr	s15, [r1]
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	240253ac 	.word	0x240253ac
 8014230:	38d1b717 	.word	0x38d1b717

08014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014234:	4b0a      	ldr	r3, [pc, #40]	@ (8014260 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014236:	460a      	mov	r2, r1
 8014238:	b510      	push	{r4, lr}
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d10d      	bne.n	801425c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014240:	8881      	ldrh	r1, [r0, #4]
 8014242:	8803      	ldrh	r3, [r0, #0]
 8014244:	440b      	add	r3, r1
 8014246:	4601      	mov	r1, r0
 8014248:	3b01      	subs	r3, #1
 801424a:	f821 3b02 	strh.w	r3, [r1], #2
 801424e:	f7ff ffc3 	bl	80141d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014252:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014256:	88c2      	ldrh	r2, [r0, #6]
 8014258:	80c3      	strh	r3, [r0, #6]
 801425a:	8082      	strh	r2, [r0, #4]
 801425c:	bd10      	pop	{r4, pc}
 801425e:	bf00      	nop
 8014260:	240253ac 	.word	0x240253ac

08014264 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014264:	4b06      	ldr	r3, [pc, #24]	@ (8014280 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014266:	2100      	movs	r1, #0
 8014268:	f9b3 2000 	ldrsh.w	r2, [r3]
 801426c:	4b05      	ldr	r3, [pc, #20]	@ (8014284 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801426e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8014272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014276:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801427a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801427e:	4770      	bx	lr
 8014280:	240253a8 	.word	0x240253a8
 8014284:	240253aa 	.word	0x240253aa

08014288 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014288:	4b03      	ldr	r3, [pc, #12]	@ (8014298 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801428a:	6818      	ldr	r0, [r3, #0]
 801428c:	b110      	cbz	r0, 8014294 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801428e:	6803      	ldr	r3, [r0, #0]
 8014290:	699b      	ldr	r3, [r3, #24]
 8014292:	4718      	bx	r3
 8014294:	4770      	bx	lr
 8014296:	bf00      	nop
 8014298:	240253f8 	.word	0x240253f8

0801429c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801429c:	4770      	bx	lr
	...

080142a0 <_ZN8touchgfx11Application4drawEv>:
 80142a0:	4b09      	ldr	r3, [pc, #36]	@ (80142c8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80142a2:	b507      	push	{r0, r1, r2, lr}
 80142a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142a8:	2100      	movs	r1, #0
 80142aa:	4b08      	ldr	r3, [pc, #32]	@ (80142cc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80142ac:	9100      	str	r1, [sp, #0]
 80142ae:	4669      	mov	r1, sp
 80142b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80142b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80142bc:	6803      	ldr	r3, [r0, #0]
 80142be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80142c0:	4798      	blx	r3
 80142c2:	b003      	add	sp, #12
 80142c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80142c8:	240253a8 	.word	0x240253a8
 80142cc:	240253aa 	.word	0x240253aa

080142d0 <_ZN8touchgfx11Application10invalidateEv>:
 80142d0:	4b09      	ldr	r3, [pc, #36]	@ (80142f8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80142d2:	b082      	sub	sp, #8
 80142d4:	2100      	movs	r1, #0
 80142d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142da:	4b08      	ldr	r3, [pc, #32]	@ (80142fc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80142dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80142e0:	aa02      	add	r2, sp, #8
 80142e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142e6:	9100      	str	r1, [sp, #0]
 80142e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80142ec:	6803      	ldr	r3, [r0, #0]
 80142ee:	e912 0006 	ldmdb	r2, {r1, r2}
 80142f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142f4:	b002      	add	sp, #8
 80142f6:	4718      	bx	r3
 80142f8:	240253a8 	.word	0x240253a8
 80142fc:	240253aa 	.word	0x240253aa

08014300 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014300:	4b03      	ldr	r3, [pc, #12]	@ (8014310 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014302:	6818      	ldr	r0, [r3, #0]
 8014304:	b110      	cbz	r0, 801430c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014306:	6803      	ldr	r3, [r0, #0]
 8014308:	69db      	ldr	r3, [r3, #28]
 801430a:	4718      	bx	r3
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	240253f8 	.word	0x240253f8

08014314 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014314:	4b03      	ldr	r3, [pc, #12]	@ (8014324 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014316:	6818      	ldr	r0, [r3, #0]
 8014318:	b110      	cbz	r0, 8014320 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801431a:	6803      	ldr	r3, [r0, #0]
 801431c:	6a1b      	ldr	r3, [r3, #32]
 801431e:	4718      	bx	r3
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop
 8014324:	240253f8 	.word	0x240253f8

08014328 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014328:	2300      	movs	r3, #0
 801432a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801432e:	4770      	bx	lr

08014330 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014330:	4b03      	ldr	r3, [pc, #12]	@ (8014340 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014332:	6818      	ldr	r0, [r3, #0]
 8014334:	b110      	cbz	r0, 801433c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014336:	6803      	ldr	r3, [r0, #0]
 8014338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801433a:	4718      	bx	r3
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	240253f8 	.word	0x240253f8

08014344 <_ZN8touchgfx11ApplicationD1Ev>:
 8014344:	4770      	bx	lr

08014346 <_ZN8touchgfx11ApplicationD0Ev>:
 8014346:	b510      	push	{r4, lr}
 8014348:	4604      	mov	r4, r0
 801434a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801434e:	f00f fe26 	bl	8023f9e <_ZdlPvj>
 8014352:	4620      	mov	r0, r4
 8014354:	bd10      	pop	{r4, pc}

08014356 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014356:	b510      	push	{r4, lr}
 8014358:	f9b1 4000 	ldrsh.w	r4, [r1]
 801435c:	888a      	ldrh	r2, [r1, #4]
 801435e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014362:	4422      	add	r2, r4
 8014364:	b212      	sxth	r2, r2
 8014366:	4293      	cmp	r3, r2
 8014368:	da15      	bge.n	8014396 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801436a:	8882      	ldrh	r2, [r0, #4]
 801436c:	4413      	add	r3, r2
 801436e:	b21b      	sxth	r3, r3
 8014370:	429c      	cmp	r4, r3
 8014372:	da10      	bge.n	8014396 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014374:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014378:	88c9      	ldrh	r1, [r1, #6]
 801437a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801437e:	4419      	add	r1, r3
 8014380:	b209      	sxth	r1, r1
 8014382:	428a      	cmp	r2, r1
 8014384:	da07      	bge.n	8014396 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014386:	88c0      	ldrh	r0, [r0, #6]
 8014388:	4410      	add	r0, r2
 801438a:	b200      	sxth	r0, r0
 801438c:	4283      	cmp	r3, r0
 801438e:	bfac      	ite	ge
 8014390:	2000      	movge	r0, #0
 8014392:	2001      	movlt	r0, #1
 8014394:	bd10      	pop	{r4, pc}
 8014396:	2000      	movs	r0, #0
 8014398:	e7fc      	b.n	8014394 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801439a <_ZN8touchgfx4Rect10restrictToEss>:
 801439a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	b510      	push	{r4, lr}
 80143a2:	da04      	bge.n	80143ae <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80143a4:	8884      	ldrh	r4, [r0, #4]
 80143a6:	4423      	add	r3, r4
 80143a8:	8083      	strh	r3, [r0, #4]
 80143aa:	2300      	movs	r3, #0
 80143ac:	8003      	strh	r3, [r0, #0]
 80143ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 80143b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80143b6:	1b09      	subs	r1, r1, r4
 80143b8:	428b      	cmp	r3, r1
 80143ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80143be:	bfc8      	it	gt
 80143c0:	8081      	strhgt	r1, [r0, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	da04      	bge.n	80143d0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80143c6:	88c1      	ldrh	r1, [r0, #6]
 80143c8:	440b      	add	r3, r1
 80143ca:	80c3      	strh	r3, [r0, #6]
 80143cc:	2300      	movs	r3, #0
 80143ce:	8043      	strh	r3, [r0, #2]
 80143d0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80143d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80143d8:	1a52      	subs	r2, r2, r1
 80143da:	4293      	cmp	r3, r2
 80143dc:	bfc8      	it	gt
 80143de:	80c2      	strhgt	r2, [r0, #6]
 80143e0:	bd10      	pop	{r4, pc}
	...

080143e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80143e4:	4b10      	ldr	r3, [pc, #64]	@ (8014428 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80143e6:	b510      	push	{r4, lr}
 80143e8:	460c      	mov	r4, r1
 80143ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80143ee:	4b0f      	ldr	r3, [pc, #60]	@ (801442c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80143f0:	4620      	mov	r0, r4
 80143f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80143f6:	f7ff ffd0 	bl	801439a <_ZN8touchgfx4Rect10restrictToEss>
 80143fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014430 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80143fc:	6818      	ldr	r0, [r3, #0]
 80143fe:	b190      	cbz	r0, 8014426 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014400:	6803      	ldr	r3, [r0, #0]
 8014402:	4621      	mov	r1, r4
 8014404:	689b      	ldr	r3, [r3, #8]
 8014406:	4798      	blx	r3
 8014408:	4b0a      	ldr	r3, [pc, #40]	@ (8014434 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801440a:	6818      	ldr	r0, [r3, #0]
 801440c:	b118      	cbz	r0, 8014416 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801440e:	6803      	ldr	r3, [r0, #0]
 8014410:	4621      	mov	r1, r4
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	4798      	blx	r3
 8014416:	4b08      	ldr	r3, [pc, #32]	@ (8014438 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014418:	4621      	mov	r1, r4
 801441a:	6818      	ldr	r0, [r3, #0]
 801441c:	6803      	ldr	r3, [r0, #0]
 801441e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014422:	69db      	ldr	r3, [r3, #28]
 8014424:	4718      	bx	r3
 8014426:	bd10      	pop	{r4, pc}
 8014428:	240253aa 	.word	0x240253aa
 801442c:	240253a8 	.word	0x240253a8
 8014430:	240253f8 	.word	0x240253f8
 8014434:	240253f4 	.word	0x240253f4
 8014438:	240253b4 	.word	0x240253b4

0801443c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801443e:	4606      	mov	r6, r0
 8014440:	4608      	mov	r0, r1
 8014442:	460f      	mov	r7, r1
 8014444:	f7fb fa0d 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014448:	b9e8      	cbnz	r0, 8014486 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801444a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801444e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014452:	42a5      	cmp	r5, r4
 8014454:	db17      	blt.n	8014486 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014456:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801445a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801445e:	429a      	cmp	r2, r3
 8014460:	db11      	blt.n	8014486 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014462:	88b9      	ldrh	r1, [r7, #4]
 8014464:	440d      	add	r5, r1
 8014466:	88b1      	ldrh	r1, [r6, #4]
 8014468:	440c      	add	r4, r1
 801446a:	b22d      	sxth	r5, r5
 801446c:	b224      	sxth	r4, r4
 801446e:	42a5      	cmp	r5, r4
 8014470:	dc09      	bgt.n	8014486 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014472:	88f8      	ldrh	r0, [r7, #6]
 8014474:	4410      	add	r0, r2
 8014476:	88f2      	ldrh	r2, [r6, #6]
 8014478:	4413      	add	r3, r2
 801447a:	b200      	sxth	r0, r0
 801447c:	b21b      	sxth	r3, r3
 801447e:	4298      	cmp	r0, r3
 8014480:	bfcc      	ite	gt
 8014482:	2000      	movgt	r0, #0
 8014484:	2001      	movle	r0, #1
 8014486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	4604      	mov	r4, r0
 801448c:	4608      	mov	r0, r1
 801448e:	460d      	mov	r5, r1
 8014490:	f7fb f9e7 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014494:	b978      	cbnz	r0, 80144b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014496:	4620      	mov	r0, r4
 8014498:	f7fb f9e3 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 801449c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80144a0:	b150      	cbz	r0, 80144b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80144a2:	8026      	strh	r6, [r4, #0]
 80144a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80144a8:	8063      	strh	r3, [r4, #2]
 80144aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80144ae:	80a3      	strh	r3, [r4, #4]
 80144b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80144b4:	80e3      	strh	r3, [r4, #6]
 80144b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80144bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80144c0:	42b1      	cmp	r1, r6
 80144c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80144c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80144ca:	460f      	mov	r7, r1
 80144cc:	88ed      	ldrh	r5, [r5, #6]
 80144ce:	bfa8      	it	ge
 80144d0:	4637      	movge	r7, r6
 80144d2:	4293      	cmp	r3, r2
 80144d4:	4618      	mov	r0, r3
 80144d6:	4466      	add	r6, ip
 80144d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80144dc:	bfa8      	it	ge
 80144de:	4610      	movge	r0, r2
 80144e0:	442a      	add	r2, r5
 80144e2:	88e5      	ldrh	r5, [r4, #6]
 80144e4:	4461      	add	r1, ip
 80144e6:	b236      	sxth	r6, r6
 80144e8:	8027      	strh	r7, [r4, #0]
 80144ea:	442b      	add	r3, r5
 80144ec:	b209      	sxth	r1, r1
 80144ee:	b212      	sxth	r2, r2
 80144f0:	8060      	strh	r0, [r4, #2]
 80144f2:	b21b      	sxth	r3, r3
 80144f4:	428e      	cmp	r6, r1
 80144f6:	bfac      	ite	ge
 80144f8:	ebc7 0106 	rsbge	r1, r7, r6
 80144fc:	ebc7 0101 	rsblt	r1, r7, r1
 8014500:	429a      	cmp	r2, r3
 8014502:	bfac      	ite	ge
 8014504:	ebc0 0202 	rsbge	r2, r0, r2
 8014508:	ebc0 0203 	rsblt	r2, r0, r3
 801450c:	80a1      	strh	r1, [r4, #4]
 801450e:	80e2      	strh	r2, [r4, #6]
 8014510:	e7d1      	b.n	80144b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014514 <_ZN8touchgfx11Application11getInstanceEv>:
 8014514:	4b01      	ldr	r3, [pc, #4]	@ (801451c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014516:	6818      	ldr	r0, [r3, #0]
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	24025408 	.word	0x24025408

08014520 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8014520:	2300      	movs	r3, #0
 8014522:	b510      	push	{r4, lr}
 8014524:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014528:	4604      	mov	r4, r0
 801452a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801452e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014532:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014536:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801453a:	429a      	cmp	r2, r3
 801453c:	d90e      	bls.n	801455c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801453e:	18e2      	adds	r2, r4, r3
 8014540:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8014544:	b122      	cbz	r2, 8014550 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8014546:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801454a:	6803      	ldr	r3, [r0, #0]
 801454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801454e:	4798      	blx	r3
 8014550:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014554:	3301      	adds	r3, #1
 8014556:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801455a:	e7ea      	b.n	8014532 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801455c:	bd10      	pop	{r4, pc}

0801455e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801455e:	b530      	push	{r4, r5, lr}
 8014560:	2200      	movs	r2, #0
 8014562:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8014566:	b293      	uxth	r3, r2
 8014568:	429d      	cmp	r5, r3
 801456a:	d90e      	bls.n	801458a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801456c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8014570:	428b      	cmp	r3, r1
 8014572:	d10b      	bne.n	801458c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8014574:	1884      	adds	r4, r0, r2
 8014576:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801457a:	b13b      	cbz	r3, 801458c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801457c:	3b01      	subs	r3, #1
 801457e:	b2db      	uxtb	r3, r3
 8014580:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8014584:	b90b      	cbnz	r3, 801458a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8014586:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801458a:	bd30      	pop	{r4, r5, pc}
 801458c:	3201      	adds	r2, #1
 801458e:	e7ea      	b.n	8014566 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08014590 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8014590:	2300      	movs	r3, #0
 8014592:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8014596:	30a4      	adds	r0, #164	@ 0xa4
 8014598:	f820 3c24 	strh.w	r3, [r0, #-36]
 801459c:	f802 3b01 	strb.w	r3, [r2], #1
 80145a0:	4282      	cmp	r2, r0
 80145a2:	d1fb      	bne.n	801459c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80145a4:	4770      	bx	lr
	...

080145a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80145a8:	b570      	push	{r4, r5, r6, lr}
 80145aa:	4c0b      	ldr	r4, [pc, #44]	@ (80145d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80145ac:	4605      	mov	r5, r0
 80145ae:	460e      	mov	r6, r1
 80145b0:	6820      	ldr	r0, [r4, #0]
 80145b2:	b110      	cbz	r0, 80145ba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80145b4:	6803      	ldr	r3, [r0, #0]
 80145b6:	695b      	ldr	r3, [r3, #20]
 80145b8:	4798      	blx	r3
 80145ba:	1d28      	adds	r0, r5, #4
 80145bc:	f7ff ffe8 	bl	8014590 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80145c0:	6026      	str	r6, [r4, #0]
 80145c2:	6833      	ldr	r3, [r6, #0]
 80145c4:	4630      	mov	r0, r6
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	4798      	blx	r3
 80145ca:	682b      	ldr	r3, [r5, #0]
 80145cc:	4628      	mov	r0, r5
 80145ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145d4:	4718      	bx	r3
 80145d6:	bf00      	nop
 80145d8:	240253f8 	.word	0x240253f8

080145dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80145dc:	2300      	movs	r3, #0
 80145de:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80145e2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80145e6:	461a      	mov	r2, r3
 80145e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ea:	461c      	mov	r4, r3
 80145ec:	461d      	mov	r5, r3
 80145ee:	459c      	cmp	ip, r3
 80145f0:	dd1a      	ble.n	8014628 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80145f2:	18c6      	adds	r6, r0, r3
 80145f4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80145f8:	b16e      	cbz	r6, 8014616 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d008      	beq.n	8014610 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80145fe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8014602:	fa1f fe82 	uxth.w	lr, r2
 8014606:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801460a:	1887      	adds	r7, r0, r2
 801460c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8014610:	3201      	adds	r2, #1
 8014612:	3301      	adds	r3, #1
 8014614:	e7eb      	b.n	80145ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8014616:	4299      	cmp	r1, r3
 8014618:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801461c:	bfa8      	it	ge
 801461e:	3501      	addge	r5, #1
 8014620:	429e      	cmp	r6, r3
 8014622:	bfc8      	it	gt
 8014624:	3401      	addgt	r4, #1
 8014626:	e7f4      	b.n	8014612 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014628:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801462c:	1b49      	subs	r1, r1, r5
 801462e:	1b1b      	subs	r3, r3, r4
 8014630:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8014634:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014638:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801463c:	4293      	cmp	r3, r2
 801463e:	dd03      	ble.n	8014648 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014640:	3b01      	subs	r3, #1
 8014642:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8014646:	e7f7      	b.n	8014638 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801464c <_ZN8touchgfx11Application15handleTickEventEv>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	4d16      	ldr	r5, [pc, #88]	@ (80146a8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014650:	4604      	mov	r4, r0
 8014652:	6828      	ldr	r0, [r5, #0]
 8014654:	b140      	cbz	r0, 8014668 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014656:	7a03      	ldrb	r3, [r0, #8]
 8014658:	b933      	cbnz	r3, 8014668 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801465a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801465e:	6803      	ldr	r3, [r0, #0]
 8014660:	689b      	ldr	r3, [r3, #8]
 8014662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014666:	4718      	bx	r3
 8014668:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801466c:	4e0f      	ldr	r6, [pc, #60]	@ (80146ac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801466e:	b973      	cbnz	r3, 801468e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014670:	b168      	cbz	r0, 801468e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014672:	7a03      	ldrb	r3, [r0, #8]
 8014674:	b15b      	cbz	r3, 801468e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014676:	6830      	ldr	r0, [r6, #0]
 8014678:	b110      	cbz	r0, 8014680 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	691b      	ldr	r3, [r3, #16]
 801467e:	4798      	blx	r3
 8014680:	6828      	ldr	r0, [r5, #0]
 8014682:	6803      	ldr	r3, [r0, #0]
 8014684:	68db      	ldr	r3, [r3, #12]
 8014686:	4798      	blx	r3
 8014688:	2301      	movs	r3, #1
 801468a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801468e:	3404      	adds	r4, #4
 8014690:	4620      	mov	r0, r4
 8014692:	f7ff ff45 	bl	8014520 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8014696:	4620      	mov	r0, r4
 8014698:	f7ff ffa0 	bl	80145dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801469c:	6830      	ldr	r0, [r6, #0]
 801469e:	b110      	cbz	r0, 80146a6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80146a0:	6803      	ldr	r3, [r0, #0]
 80146a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146a4:	e7dd      	b.n	8014662 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80146a6:	bd70      	pop	{r4, r5, r6, pc}
 80146a8:	240253fc 	.word	0x240253fc
 80146ac:	240253f8 	.word	0x240253f8

080146b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80146b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b2:	2300      	movs	r3, #0
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80146bc:	4618      	mov	r0, r3
 80146be:	b29a      	uxth	r2, r3
 80146c0:	4291      	cmp	r1, r2
 80146c2:	d912      	bls.n	80146ea <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80146c4:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80146c8:	18e6      	adds	r6, r4, r3
 80146ca:	42af      	cmp	r7, r5
 80146cc:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 80146d0:	d105      	bne.n	80146de <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80146d2:	2aff      	cmp	r2, #255	@ 0xff
 80146d4:	d002      	beq.n	80146dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80146d6:	3201      	adds	r2, #1
 80146d8:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 80146dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146de:	2a00      	cmp	r2, #0
 80146e0:	f103 0301 	add.w	r3, r3, #1
 80146e4:	bf08      	it	eq
 80146e6:	2001      	moveq	r0, #1
 80146e8:	e7e9      	b.n	80146be <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80146ea:	b120      	cbz	r0, 80146f6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80146ec:	2920      	cmp	r1, #32
 80146ee:	d102      	bne.n	80146f6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80146f0:	4620      	mov	r0, r4
 80146f2:	f7ff ff73 	bl	80145dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80146f6:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 80146fa:	2b1f      	cmp	r3, #31
 80146fc:	d8ee      	bhi.n	80146dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80146fe:	18e2      	adds	r2, r4, r3
 8014700:	2101      	movs	r1, #1
 8014702:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8014706:	185a      	adds	r2, r3, r1
 8014708:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801470c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8014710:	e7e4      	b.n	80146dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08014712 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014712:	4603      	mov	r3, r0
 8014714:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8014718:	2200      	movs	r2, #0
 801471a:	801a      	strh	r2, [r3, #0]
 801471c:	3308      	adds	r3, #8
 801471e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014722:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014726:	f823 2c02 	strh.w	r2, [r3, #-2]
 801472a:	428b      	cmp	r3, r1
 801472c:	d1f5      	bne.n	801471a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801472e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014732:	4770      	bx	lr

08014734 <_ZN8touchgfx11ApplicationC1Ev>:
 8014734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014736:	4b1d      	ldr	r3, [pc, #116]	@ (80147ac <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014738:	4606      	mov	r6, r0
 801473a:	4604      	mov	r4, r0
 801473c:	2500      	movs	r5, #0
 801473e:	f846 3b04 	str.w	r3, [r6], #4
 8014742:	22a8      	movs	r2, #168	@ 0xa8
 8014744:	2100      	movs	r1, #0
 8014746:	4630      	mov	r0, r6
 8014748:	f010 fa3e 	bl	8024bc8 <memset>
 801474c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014750:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014754:	4f16      	ldr	r7, [pc, #88]	@ (80147b0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8014756:	f7ff ffdc 	bl	8014712 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801475a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801475e:	f7ff ffd8 	bl	8014712 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014762:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8014766:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801476a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801476e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8014772:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8014776:	490f      	ldr	r1, [pc, #60]	@ (80147b4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014778:	480f      	ldr	r0, [pc, #60]	@ (80147b8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801477a:	f00d f9cd 	bl	8021b18 <CRC_Lock>
 801477e:	4b0f      	ldr	r3, [pc, #60]	@ (80147bc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014780:	b158      	cbz	r0, 801479a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8014782:	801d      	strh	r5, [r3, #0]
 8014784:	2300      	movs	r3, #0
 8014786:	4a0e      	ldr	r2, [pc, #56]	@ (80147c0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8014788:	4630      	mov	r0, r6
 801478a:	6013      	str	r3, [r2, #0]
 801478c:	4a0d      	ldr	r2, [pc, #52]	@ (80147c4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801478e:	603b      	str	r3, [r7, #0]
 8014790:	6013      	str	r3, [r2, #0]
 8014792:	f7ff fefd 	bl	8014590 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014796:	4620      	mov	r0, r4
 8014798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801479a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801479e:	2002      	movs	r0, #2
 80147a0:	801a      	strh	r2, [r3, #0]
 80147a2:	6038      	str	r0, [r7, #0]
 80147a4:	f001 fff0 	bl	8016788 <_ZN8touchgfx6Screen4drawEv>
 80147a8:	e7ec      	b.n	8014784 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80147aa:	bf00      	nop
 80147ac:	08028950 	.word	0x08028950
 80147b0:	240253f8 	.word	0x240253f8
 80147b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80147b8:	f407a5c2 	.word	0xf407a5c2
 80147bc:	2400007c 	.word	0x2400007c
 80147c0:	24025408 	.word	0x24025408
 80147c4:	240253fc 	.word	0x240253fc

080147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80147c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80147cc:	3b01      	subs	r3, #1
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	428b      	cmp	r3, r1
 80147d2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80147d6:	b510      	push	{r4, lr}
 80147d8:	d908      	bls.n	80147ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80147da:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80147de:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	6062      	str	r2, [r4, #4]
 80147ec:	bd10      	pop	{r4, pc}
	...

080147f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	b08f      	sub	sp, #60	@ 0x3c
 80147f6:	4b92      	ldr	r3, [pc, #584]	@ (8014a40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80147f8:	4683      	mov	fp, r0
 80147fa:	ac0a      	add	r4, sp, #40	@ 0x28
 80147fc:	e884 0006 	stmia.w	r4, {r1, r2}
 8014800:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014804:	4620      	mov	r0, r4
 8014806:	4b8f      	ldr	r3, [pc, #572]	@ (8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8014808:	f9b3 1000 	ldrsh.w	r1, [r3]
 801480c:	f7ff fdc5 	bl	801439a <_ZN8touchgfx4Rect10restrictToEss>
 8014810:	4620      	mov	r0, r4
 8014812:	f7fb f826 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014816:	2800      	cmp	r0, #0
 8014818:	d170      	bne.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801481a:	4b8b      	ldr	r3, [pc, #556]	@ (8014a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014822:	2b02      	cmp	r3, #2
 8014824:	d06a      	beq.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014826:	9403      	str	r4, [sp, #12]
 8014828:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801482c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014830:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8014834:	9301      	str	r3, [sp, #4]
 8014836:	35a4      	adds	r5, #164	@ 0xa4
 8014838:	b15c      	cbz	r4, 8014852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801483a:	4629      	mov	r1, r5
 801483c:	9803      	ldr	r0, [sp, #12]
 801483e:	f7ff fdfd 	bl	801443c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014842:	3c01      	subs	r4, #1
 8014844:	b118      	cbz	r0, 801484e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8014846:	b2a1      	uxth	r1, r4
 8014848:	9801      	ldr	r0, [sp, #4]
 801484a:	f7ff ffbd 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801484e:	3d08      	subs	r5, #8
 8014850:	e7f2      	b.n	8014838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014852:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8014856:	f10a 33ff 	add.w	r3, sl, #4294967295
 801485a:	f8cd a010 	str.w	sl, [sp, #16]
 801485e:	9302      	str	r3, [sp, #8]
 8014860:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014864:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8014868:	9306      	str	r3, [sp, #24]
 801486a:	445c      	add	r4, fp
 801486c:	2500      	movs	r5, #0
 801486e:	4626      	mov	r6, r4
 8014870:	f8cd a014 	str.w	sl, [sp, #20]
 8014874:	462f      	mov	r7, r5
 8014876:	9b05      	ldr	r3, [sp, #20]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d073      	beq.n	8014964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 801487c:	9903      	ldr	r1, [sp, #12]
 801487e:	4630      	mov	r0, r6
 8014880:	f7ff fd69 	bl	8014356 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014884:	b350      	cbz	r0, 80148dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014886:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801488a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801488e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014892:	45e6      	cmp	lr, ip
 8014894:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014898:	db33      	blt.n	8014902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801489a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801489e:	88b3      	ldrh	r3, [r6, #4]
 80148a0:	4472      	add	r2, lr
 80148a2:	4463      	add	r3, ip
 80148a4:	b212      	sxth	r2, r2
 80148a6:	b21b      	sxth	r3, r3
 80148a8:	429a      	cmp	r2, r3
 80148aa:	dc2a      	bgt.n	8014902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80148ac:	fa1f f289 	uxth.w	r2, r9
 80148b0:	88f3      	ldrh	r3, [r6, #6]
 80148b2:	45c8      	cmp	r8, r9
 80148b4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80148b8:	4413      	add	r3, r2
 80148ba:	fa1f fc88 	uxth.w	ip, r8
 80148be:	b29b      	uxth	r3, r3
 80148c0:	fa0f fe83 	sxth.w	lr, r3
 80148c4:	db0f      	blt.n	80148e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 80148c6:	eba3 030c 	sub.w	r3, r3, ip
 80148ca:	1ac9      	subs	r1, r1, r3
 80148cc:	b209      	sxth	r1, r1
 80148ce:	2900      	cmp	r1, #0
 80148d0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80148d4:	dd12      	ble.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80148d6:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80148da:	4605      	mov	r5, r0
 80148dc:	9b05      	ldr	r3, [sp, #20]
 80148de:	3e08      	subs	r6, #8
 80148e0:	3b01      	subs	r3, #1
 80148e2:	9305      	str	r3, [sp, #20]
 80148e4:	e7c7      	b.n	8014876 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 80148e6:	4461      	add	r1, ip
 80148e8:	b209      	sxth	r1, r1
 80148ea:	4571      	cmp	r1, lr
 80148ec:	dc38      	bgt.n	8014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80148ee:	eba2 020c 	sub.w	r2, r2, ip
 80148f2:	b212      	sxth	r2, r2
 80148f4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80148f8:	2a00      	cmp	r2, #0
 80148fa:	dcee      	bgt.n	80148da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80148fc:	b00f      	add	sp, #60	@ 0x3c
 80148fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014902:	45c8      	cmp	r8, r9
 8014904:	db2c      	blt.n	8014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014906:	88f3      	ldrh	r3, [r6, #6]
 8014908:	4499      	add	r9, r3
 801490a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801490e:	4498      	add	r8, r3
 8014910:	fa0f f989 	sxth.w	r9, r9
 8014914:	fa0f f888 	sxth.w	r8, r8
 8014918:	45c1      	cmp	r9, r8
 801491a:	db21      	blt.n	8014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801491c:	fa1f f28c 	uxth.w	r2, ip
 8014920:	88b3      	ldrh	r3, [r6, #4]
 8014922:	45e6      	cmp	lr, ip
 8014924:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8014928:	4413      	add	r3, r2
 801492a:	fa1f f88e 	uxth.w	r8, lr
 801492e:	b29b      	uxth	r3, r3
 8014930:	fa0f f983 	sxth.w	r9, r3
 8014934:	db0a      	blt.n	801494c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8014936:	eba3 0308 	sub.w	r3, r3, r8
 801493a:	1ac9      	subs	r1, r1, r3
 801493c:	b209      	sxth	r1, r1
 801493e:	2900      	cmp	r1, #0
 8014940:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014944:	ddda      	ble.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014946:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801494a:	e7c6      	b.n	80148da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801494c:	4441      	add	r1, r8
 801494e:	b209      	sxth	r1, r1
 8014950:	4549      	cmp	r1, r9
 8014952:	dc05      	bgt.n	8014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014954:	eba2 0208 	sub.w	r2, r2, r8
 8014958:	b212      	sxth	r2, r2
 801495a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801495e:	e7cb      	b.n	80148f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8014960:	4607      	mov	r7, r0
 8014962:	e7bb      	b.n	80148dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014964:	2d00      	cmp	r5, #0
 8014966:	d181      	bne.n	801486c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8014968:	2f00      	cmp	r7, #0
 801496a:	f000 81df 	beq.w	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801496e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014972:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014976:	b2b3      	uxth	r3, r6
 8014978:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801497c:	9305      	str	r3, [sp, #20]
 801497e:	9a05      	ldr	r2, [sp, #20]
 8014980:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014984:	4413      	add	r3, r2
 8014986:	b2ba      	uxth	r2, r7
 8014988:	4492      	add	sl, r2
 801498a:	b29b      	uxth	r3, r3
 801498c:	fa1f fa8a 	uxth.w	sl, sl
 8014990:	fa0f f883 	sxth.w	r8, r3
 8014994:	fa0f f98a 	sxth.w	r9, sl
 8014998:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801499c:	9b04      	ldr	r3, [sp, #16]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d054      	beq.n	8014a4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 80149a2:	9903      	ldr	r1, [sp, #12]
 80149a4:	4620      	mov	r0, r4
 80149a6:	f7ff fcd6 	bl	8014356 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80149aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80149ae:	b1c0      	cbz	r0, 80149e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80149b0:	f9b4 e000 	ldrsh.w	lr, [r4]
 80149b4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80149b8:	4576      	cmp	r6, lr
 80149ba:	dc22      	bgt.n	8014a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80149bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80149c0:	44f4      	add	ip, lr
 80149c2:	fa0f fc8c 	sxth.w	ip, ip
 80149c6:	45e0      	cmp	r8, ip
 80149c8:	db1b      	blt.n	8014a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80149ca:	428f      	cmp	r7, r1
 80149cc:	fa1f fc81 	uxth.w	ip, r1
 80149d0:	88e1      	ldrh	r1, [r4, #6]
 80149d2:	dc0d      	bgt.n	80149f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 80149d4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80149d8:	f8a4 9002 	strh.w	r9, [r4, #2]
 80149dc:	eba1 010c 	sub.w	r1, r1, ip
 80149e0:	80e1      	strh	r1, [r4, #6]
 80149e2:	4628      	mov	r0, r5
 80149e4:	9904      	ldr	r1, [sp, #16]
 80149e6:	3c08      	subs	r4, #8
 80149e8:	4605      	mov	r5, r0
 80149ea:	3901      	subs	r1, #1
 80149ec:	9104      	str	r1, [sp, #16]
 80149ee:	e7d3      	b.n	8014998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 80149f0:	4461      	add	r1, ip
 80149f2:	b209      	sxth	r1, r1
 80149f4:	4549      	cmp	r1, r9
 80149f6:	dcf5      	bgt.n	80149e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80149f8:	eba2 0c0c 	sub.w	ip, r2, ip
 80149fc:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014a00:	e7ef      	b.n	80149e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014a02:	428f      	cmp	r7, r1
 8014a04:	dcee      	bgt.n	80149e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014a06:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014a0a:	4461      	add	r1, ip
 8014a0c:	b209      	sxth	r1, r1
 8014a0e:	4589      	cmp	r9, r1
 8014a10:	dbe8      	blt.n	80149e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014a12:	4576      	cmp	r6, lr
 8014a14:	fa1f fc8e 	uxth.w	ip, lr
 8014a18:	88a1      	ldrh	r1, [r4, #4]
 8014a1a:	dc07      	bgt.n	8014a2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8014a1c:	eba3 0c0c 	sub.w	ip, r3, ip
 8014a20:	f8a4 8000 	strh.w	r8, [r4]
 8014a24:	eba1 010c 	sub.w	r1, r1, ip
 8014a28:	80a1      	strh	r1, [r4, #4]
 8014a2a:	e7da      	b.n	80149e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014a2c:	4461      	add	r1, ip
 8014a2e:	b209      	sxth	r1, r1
 8014a30:	4588      	cmp	r8, r1
 8014a32:	dbd7      	blt.n	80149e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014a34:	9905      	ldr	r1, [sp, #20]
 8014a36:	eba1 0c0c 	sub.w	ip, r1, ip
 8014a3a:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014a3e:	e7d0      	b.n	80149e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014a40:	240253aa 	.word	0x240253aa
 8014a44:	240253a8 	.word	0x240253a8
 8014a48:	240253b4 	.word	0x240253b4
 8014a4c:	2d00      	cmp	r5, #0
 8014a4e:	f000 816d 	beq.w	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014a52:	9b06      	ldr	r3, [sp, #24]
 8014a54:	445b      	add	r3, fp
 8014a56:	461c      	mov	r4, r3
 8014a58:	9b02      	ldr	r3, [sp, #8]
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	f000 8166 	beq.w	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014a60:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014a64:	9803      	ldr	r0, [sp, #12]
 8014a66:	4629      	mov	r1, r5
 8014a68:	f7ff fce8 	bl	801443c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014a6c:	b120      	cbz	r0, 8014a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8014a6e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014a72:	9801      	ldr	r0, [sp, #4]
 8014a74:	f7ff fea8 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014a78:	9903      	ldr	r1, [sp, #12]
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7ff fc6b 	bl	8014356 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014a80:	2800      	cmp	r0, #0
 8014a82:	f000 809c 	beq.w	8014bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014a86:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014a8a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014a8e:	fa1f f189 	uxth.w	r1, r9
 8014a92:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a98:	eb01 0c03 	add.w	ip, r1, r3
 8014a9c:	b283      	uxth	r3, r0
 8014a9e:	4548      	cmp	r0, r9
 8014aa0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014aa4:	fa1f fa8c 	uxth.w	sl, ip
 8014aa8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014aac:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014ab0:	eb03 050c 	add.w	r5, r3, ip
 8014ab4:	b2ad      	uxth	r5, r5
 8014ab6:	9505      	str	r5, [sp, #20]
 8014ab8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014abc:	9504      	str	r5, [sp, #16]
 8014abe:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014ac2:	f340 8099 	ble.w	8014bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8014ac6:	1a5b      	subs	r3, r3, r1
 8014ac8:	4596      	cmp	lr, r2
 8014aca:	fa0f f08a 	sxth.w	r0, sl
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	b21e      	sxth	r6, r3
 8014ad2:	dd2e      	ble.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8014ad4:	9f02      	ldr	r7, [sp, #8]
 8014ad6:	fa1f fe8e 	uxth.w	lr, lr
 8014ada:	b292      	uxth	r2, r2
 8014adc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014ae0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014ae4:	9f04      	ldr	r7, [sp, #16]
 8014ae6:	ebae 0102 	sub.w	r1, lr, r2
 8014aea:	44a6      	add	lr, r4
 8014aec:	1a3f      	subs	r7, r7, r0
 8014aee:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014af2:	b289      	uxth	r1, r1
 8014af4:	4402      	add	r2, r0
 8014af6:	fa0f fe8e 	sxth.w	lr, lr
 8014afa:	b20d      	sxth	r5, r1
 8014afc:	b212      	sxth	r2, r2
 8014afe:	436f      	muls	r7, r5
 8014b00:	ebae 0202 	sub.w	r2, lr, r2
 8014b04:	4372      	muls	r2, r6
 8014b06:	4297      	cmp	r7, r2
 8014b08:	db09      	blt.n	8014b1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8014b0a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014b0e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014b12:	449c      	add	ip, r3
 8014b14:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014b18:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014b1c:	e684      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014b1e:	4421      	add	r1, r4
 8014b20:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014b24:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014b28:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014b2c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014b30:	e67a      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014b32:	9f04      	ldr	r7, [sp, #16]
 8014b34:	42b8      	cmp	r0, r7
 8014b36:	da27      	bge.n	8014b88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8014b38:	9902      	ldr	r1, [sp, #8]
 8014b3a:	1a3f      	subs	r7, r7, r0
 8014b3c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014b40:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014b44:	eb05 010e 	add.w	r1, r5, lr
 8014b48:	fa1f f881 	uxth.w	r8, r1
 8014b4c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014b50:	4411      	add	r1, r2
 8014b52:	fa0f f988 	sxth.w	r9, r8
 8014b56:	eba2 020e 	sub.w	r2, r2, lr
 8014b5a:	eba1 0108 	sub.w	r1, r1, r8
 8014b5e:	4372      	muls	r2, r6
 8014b60:	b289      	uxth	r1, r1
 8014b62:	fa0f f881 	sxth.w	r8, r1
 8014b66:	fb08 f707 	mul.w	r7, r8, r7
 8014b6a:	42ba      	cmp	r2, r7
 8014b6c:	dc06      	bgt.n	8014b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8014b6e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014b72:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014b76:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014b7a:	e7ca      	b.n	8014b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8014b7c:	4429      	add	r1, r5
 8014b7e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014b82:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014b86:	e64f      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014b88:	9805      	ldr	r0, [sp, #20]
 8014b8a:	2d06      	cmp	r5, #6
 8014b8c:	ebaa 0000 	sub.w	r0, sl, r0
 8014b90:	b280      	uxth	r0, r0
 8014b92:	fa0f fe80 	sxth.w	lr, r0
 8014b96:	d817      	bhi.n	8014bc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8014b98:	9b04      	ldr	r3, [sp, #16]
 8014b9a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014b9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014ba2:	1c6b      	adds	r3, r5, #1
 8014ba4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014ba8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014bac:	9b01      	ldr	r3, [sp, #4]
 8014bae:	9801      	ldr	r0, [sp, #4]
 8014bb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014bb4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014bb8:	805a      	strh	r2, [r3, #2]
 8014bba:	809e      	strh	r6, [r3, #4]
 8014bbc:	80d9      	strh	r1, [r3, #6]
 8014bbe:	9b02      	ldr	r3, [sp, #8]
 8014bc0:	3c08      	subs	r4, #8
 8014bc2:	3b01      	subs	r3, #1
 8014bc4:	9302      	str	r3, [sp, #8]
 8014bc6:	e747      	b.n	8014a58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8014bc8:	9a02      	ldr	r2, [sp, #8]
 8014bca:	45b6      	cmp	lr, r6
 8014bcc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014bd0:	db0d      	blt.n	8014bee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8014bd2:	449c      	add	ip, r3
 8014bd4:	445a      	add	r2, fp
 8014bd6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014bda:	fa1f fc8c 	uxth.w	ip, ip
 8014bde:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014be2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014be6:	448c      	add	ip, r1
 8014be8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014bec:	e61c      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014bee:	445a      	add	r2, fp
 8014bf0:	4484      	add	ip, r0
 8014bf2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8014bf6:	e78f      	b.n	8014b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014bf8:	fa1f f18e 	uxth.w	r1, lr
 8014bfc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014c00:	b293      	uxth	r3, r2
 8014c02:	4596      	cmp	lr, r2
 8014c04:	eb01 0806 	add.w	r8, r1, r6
 8014c08:	9306      	str	r3, [sp, #24]
 8014c0a:	fa1f f888 	uxth.w	r8, r8
 8014c0e:	9f06      	ldr	r7, [sp, #24]
 8014c10:	fa0f f388 	sxth.w	r3, r8
 8014c14:	9307      	str	r3, [sp, #28]
 8014c16:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014c1a:	443b      	add	r3, r7
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	9308      	str	r3, [sp, #32]
 8014c20:	da24      	bge.n	8014c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8014c22:	9905      	ldr	r1, [sp, #20]
 8014c24:	eba3 0308 	sub.w	r3, r3, r8
 8014c28:	eba2 020e 	sub.w	r2, r2, lr
 8014c2c:	eba9 0000 	sub.w	r0, r9, r0
 8014c30:	ebaa 0401 	sub.w	r4, sl, r1
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	b2a4      	uxth	r4, r4
 8014c38:	b219      	sxth	r1, r3
 8014c3a:	b225      	sxth	r5, r4
 8014c3c:	4348      	muls	r0, r1
 8014c3e:	436a      	muls	r2, r5
 8014c40:	4282      	cmp	r2, r0
 8014c42:	9a02      	ldr	r2, [sp, #8]
 8014c44:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014c48:	445a      	add	r2, fp
 8014c4a:	dc06      	bgt.n	8014c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014c4c:	9b07      	ldr	r3, [sp, #28]
 8014c4e:	44a4      	add	ip, r4
 8014c50:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014c54:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014c58:	e75e      	b.n	8014b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014c5a:	9904      	ldr	r1, [sp, #16]
 8014c5c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014c60:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014c64:	4433      	add	r3, r6
 8014c66:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014c6a:	e5dd      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014c6c:	9f06      	ldr	r7, [sp, #24]
 8014c6e:	9b04      	ldr	r3, [sp, #16]
 8014c70:	1bc9      	subs	r1, r1, r7
 8014c72:	fa0f f78a 	sxth.w	r7, sl
 8014c76:	b289      	uxth	r1, r1
 8014c78:	429f      	cmp	r7, r3
 8014c7a:	fa0f fe81 	sxth.w	lr, r1
 8014c7e:	dd23      	ble.n	8014cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8014c80:	9a05      	ldr	r2, [sp, #20]
 8014c82:	eba9 0000 	sub.w	r0, r9, r0
 8014c86:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014c8a:	ebaa 0202 	sub.w	r2, sl, r2
 8014c8e:	9d07      	ldr	r5, [sp, #28]
 8014c90:	fb0e f000 	mul.w	r0, lr, r0
 8014c94:	b292      	uxth	r2, r2
 8014c96:	eba5 0a03 	sub.w	sl, r5, r3
 8014c9a:	9b02      	ldr	r3, [sp, #8]
 8014c9c:	b214      	sxth	r4, r2
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	fb04 fa0a 	mul.w	sl, r4, sl
 8014ca4:	445b      	add	r3, fp
 8014ca6:	4550      	cmp	r0, sl
 8014ca8:	db03      	blt.n	8014cb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8014caa:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8014cae:	4494      	add	ip, r2
 8014cb0:	e732      	b.n	8014b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014cb2:	9a04      	ldr	r2, [sp, #16]
 8014cb4:	4431      	add	r1, r6
 8014cb6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8014cba:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014cbe:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014cc2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014cc6:	e75c      	b.n	8014b82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8014cc8:	9b08      	ldr	r3, [sp, #32]
 8014cca:	2d06      	cmp	r5, #6
 8014ccc:	eba3 0308 	sub.w	r3, r3, r8
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	b218      	sxth	r0, r3
 8014cd4:	d813      	bhi.n	8014cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8014cd6:	9b07      	ldr	r3, [sp, #28]
 8014cd8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014cdc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014ce0:	1c6b      	adds	r3, r5, #1
 8014ce2:	9901      	ldr	r1, [sp, #4]
 8014ce4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014ce8:	9b01      	ldr	r3, [sp, #4]
 8014cea:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014cee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014cf2:	805a      	strh	r2, [r3, #2]
 8014cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cf6:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014cfa:	809a      	strh	r2, [r3, #4]
 8014cfc:	e75f      	b.n	8014bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014cfe:	9c02      	ldr	r4, [sp, #8]
 8014d00:	4570      	cmp	r0, lr
 8014d02:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014d06:	db0d      	blt.n	8014d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8014d08:	4431      	add	r1, r6
 8014d0a:	9b06      	ldr	r3, [sp, #24]
 8014d0c:	445c      	add	r4, fp
 8014d0e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014d12:	b289      	uxth	r1, r1
 8014d14:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8014d18:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014d1c:	4419      	add	r1, r3
 8014d1e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014d22:	e581      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014d24:	445c      	add	r4, fp
 8014d26:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8014d2a:	e79b      	b.n	8014c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8014d2c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014d30:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014d34:	1e65      	subs	r5, r4, #1
 8014d36:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014d3a:	b2ad      	uxth	r5, r5
 8014d3c:	42b5      	cmp	r5, r6
 8014d3e:	d044      	beq.n	8014dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8014d40:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014d44:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8014d48:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8014d4c:	4282      	cmp	r2, r0
 8014d4e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014d52:	d11f      	bne.n	8014d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014d54:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8014d58:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014d5c:	459c      	cmp	ip, r3
 8014d5e:	d119      	bne.n	8014d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014d60:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8014d64:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014d68:	19d8      	adds	r0, r3, r7
 8014d6a:	b200      	sxth	r0, r0
 8014d6c:	4288      	cmp	r0, r1
 8014d6e:	d109      	bne.n	8014d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014d70:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014d74:	4413      	add	r3, r2
 8014d76:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8014d7a:	4629      	mov	r1, r5
 8014d7c:	9801      	ldr	r0, [sp, #4]
 8014d7e:	f7ff fd23 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014d82:	e003      	b.n	8014d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014d84:	4411      	add	r1, r2
 8014d86:	b209      	sxth	r1, r1
 8014d88:	42b9      	cmp	r1, r7
 8014d8a:	d0f3      	beq.n	8014d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8014d8c:	3d01      	subs	r5, #1
 8014d8e:	3c08      	subs	r4, #8
 8014d90:	b2ad      	uxth	r5, r5
 8014d92:	e7d3      	b.n	8014d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8014d94:	42b9      	cmp	r1, r7
 8014d96:	d1f9      	bne.n	8014d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014d98:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8014d9c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014da0:	4299      	cmp	r1, r3
 8014da2:	d1f3      	bne.n	8014d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014da4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014da8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014dac:	181f      	adds	r7, r3, r0
 8014dae:	b23f      	sxth	r7, r7
 8014db0:	42ba      	cmp	r2, r7
 8014db2:	d105      	bne.n	8014dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8014db4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8014db8:	440b      	add	r3, r1
 8014dba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014dbe:	e7dc      	b.n	8014d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8014dc0:	440a      	add	r2, r1
 8014dc2:	b212      	sxth	r2, r2
 8014dc4:	4290      	cmp	r0, r2
 8014dc6:	d1e1      	bne.n	8014d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014dc8:	e7f6      	b.n	8014db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8014dca:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8014dce:	2e07      	cmp	r6, #7
 8014dd0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014dd4:	d812      	bhi.n	8014dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8014dd6:	1c75      	adds	r5, r6, #1
 8014dd8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014ddc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8014de0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8014de4:	9d01      	ldr	r5, [sp, #4]
 8014de6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8014dea:	442c      	add	r4, r5
 8014dec:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014df0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014df4:	8061      	strh	r1, [r4, #2]
 8014df6:	80a2      	strh	r2, [r4, #4]
 8014df8:	80e3      	strh	r3, [r4, #6]
 8014dfa:	e57f      	b.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014dfc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014e00:	3e01      	subs	r6, #1
 8014e02:	445c      	add	r4, fp
 8014e04:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8014e08:	f04f 37ff 	mov.w	r7, #4294967295
 8014e0c:	2500      	movs	r5, #0
 8014e0e:	9305      	str	r3, [sp, #20]
 8014e10:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014e14:	1e72      	subs	r2, r6, #1
 8014e16:	9302      	str	r3, [sp, #8]
 8014e18:	4691      	mov	r9, r2
 8014e1a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014e1e:	9304      	str	r3, [sp, #16]
 8014e20:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8014e24:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014e28:	6818      	ldr	r0, [r3, #0]
 8014e2a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014e2e:	9207      	str	r2, [sp, #28]
 8014e30:	bf16      	itet	ne
 8014e32:	9905      	ldrne	r1, [sp, #20]
 8014e34:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8014e38:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8014e3c:	9306      	str	r3, [sp, #24]
 8014e3e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014e42:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014e46:	fb18 f801 	smulbb	r8, r8, r1
 8014e4a:	6859      	ldr	r1, [r3, #4]
 8014e4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014e50:	4671      	mov	r1, lr
 8014e52:	a80c      	add	r0, sp, #48	@ 0x30
 8014e54:	f7ff fb18 	bl	8014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014e58:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8014e5c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014e60:	f04f 0c08 	mov.w	ip, #8
 8014e64:	9b04      	ldr	r3, [sp, #16]
 8014e66:	9a02      	ldr	r2, [sp, #8]
 8014e68:	fb10 f001 	smulbb	r0, r0, r1
 8014e6c:	fb02 8803 	mla	r8, r2, r3, r8
 8014e70:	eba0 0108 	sub.w	r1, r0, r8
 8014e74:	fb90 f0fc 	sdiv	r0, r0, ip
 8014e78:	4288      	cmp	r0, r1
 8014e7a:	dc20      	bgt.n	8014ebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014e7c:	4551      	cmp	r1, sl
 8014e7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014e82:	da03      	bge.n	8014e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8014e84:	b1d9      	cbz	r1, 8014ebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014e86:	468a      	mov	sl, r1
 8014e88:	464f      	mov	r7, r9
 8014e8a:	4635      	mov	r5, r6
 8014e8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014e90:	f119 0f02 	cmn.w	r9, #2
 8014e94:	d1c6      	bne.n	8014e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8014e96:	4616      	mov	r6, r2
 8014e98:	3201      	adds	r2, #1
 8014e9a:	f1a4 0408 	sub.w	r4, r4, #8
 8014e9e:	d1b7      	bne.n	8014e10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8014ea0:	9b01      	ldr	r3, [sp, #4]
 8014ea2:	b2ac      	uxth	r4, r5
 8014ea4:	00ed      	lsls	r5, r5, #3
 8014ea6:	1958      	adds	r0, r3, r5
 8014ea8:	1c7b      	adds	r3, r7, #1
 8014eaa:	d10b      	bne.n	8014ec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8014eac:	4601      	mov	r1, r0
 8014eae:	9803      	ldr	r0, [sp, #12]
 8014eb0:	f7ff faea 	bl	8014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014eb4:	4621      	mov	r1, r4
 8014eb6:	9801      	ldr	r0, [sp, #4]
 8014eb8:	f7ff fc86 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014ebc:	e4b4      	b.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014ebe:	464f      	mov	r7, r9
 8014ec0:	4635      	mov	r5, r6
 8014ec2:	e7ed      	b.n	8014ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8014ec4:	9b01      	ldr	r3, [sp, #4]
 8014ec6:	00ff      	lsls	r7, r7, #3
 8014ec8:	445d      	add	r5, fp
 8014eca:	19d9      	adds	r1, r3, r7
 8014ecc:	445f      	add	r7, fp
 8014ece:	f7ff fadb 	bl	8014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014ed2:	9b03      	ldr	r3, [sp, #12]
 8014ed4:	cb03      	ldmia	r3!, {r0, r1}
 8014ed6:	9b03      	ldr	r3, [sp, #12]
 8014ed8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8014edc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8014ee0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8014ee4:	6869      	ldr	r1, [r5, #4]
 8014ee6:	c303      	stmia	r3!, {r0, r1}
 8014ee8:	e7e4      	b.n	8014eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8014eea:	bf00      	nop

08014eec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8014ef4:	b0a1      	sub	sp, #132	@ 0x84
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	4630      	mov	r0, r6
 8014efa:	f7fa fcb2 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014efe:	4605      	mov	r5, r0
 8014f00:	b948      	cbnz	r0, 8014f16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8014f02:	6823      	ldr	r3, [r4, #0]
 8014f04:	4620      	mov	r0, r4
 8014f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f08:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014f0c:	4798      	blx	r3
 8014f0e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8014f12:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8014f16:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d149      	bne.n	8014fb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8014f1e:	4bb2      	ldr	r3, [pc, #712]	@ (80151e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8014f26:	1ebb      	subs	r3, r7, #2
 8014f28:	425f      	negs	r7, r3
 8014f2a:	415f      	adcs	r7, r3
 8014f2c:	4baf      	ldr	r3, [pc, #700]	@ (80151ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d040      	beq.n	8014fb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014f34:	4dae      	ldr	r5, [pc, #696]	@ (80151f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8014f36:	4628      	mov	r0, r5
 8014f38:	f7fa fc93 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f3c:	4606      	mov	r6, r0
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d139      	bne.n	8014fb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014f42:	4628      	mov	r0, r5
 8014f44:	f7ff f918 	bl	8014178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014f48:	6823      	ldr	r3, [r4, #0]
 8014f4a:	6829      	ldr	r1, [r5, #0]
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f50:	686a      	ldr	r2, [r5, #4]
 8014f52:	4798      	blx	r3
 8014f54:	802e      	strh	r6, [r5, #0]
 8014f56:	806e      	strh	r6, [r5, #2]
 8014f58:	80ae      	strh	r6, [r5, #4]
 8014f5a:	80ee      	strh	r6, [r5, #6]
 8014f5c:	af0f      	add	r7, sp, #60	@ 0x3c
 8014f5e:	4ea5      	ldr	r6, [pc, #660]	@ (80151f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8014f60:	4638      	mov	r0, r7
 8014f62:	f7ff fbd6 	bl	8014712 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014f66:	8835      	ldrh	r5, [r6, #0]
 8014f68:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8014f6c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014f70:	462b      	mov	r3, r5
 8014f72:	4563      	cmp	r3, ip
 8014f74:	d224      	bcs.n	8014fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014f76:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8014f7a:	2907      	cmp	r1, #7
 8014f7c:	d816      	bhi.n	8014fac <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8014f7e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014f82:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8014f86:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8014f8a:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8014f8e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8014f92:	1c4a      	adds	r2, r1, #1
 8014f94:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8014f98:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8014f9c:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8014fa0:	f8a2 a002 	strh.w	sl, [r2, #2]
 8014fa4:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014fa8:	f8a2 e006 	strh.w	lr, [r2, #6]
 8014fac:	3301      	adds	r3, #1
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	e7df      	b.n	8014f72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8014fb2:	2701      	movs	r7, #1
 8014fb4:	e7ba      	b.n	8014f2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8014fb6:	2f00      	cmp	r7, #0
 8014fb8:	d1d0      	bne.n	8014f5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8014fba:	b021      	add	sp, #132	@ 0x84
 8014fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8014fc4:	42ab      	cmp	r3, r5
 8014fc6:	d90c      	bls.n	8014fe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8014fc8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014fcc:	6822      	ldr	r2, [r4, #0]
 8014fce:	3501      	adds	r5, #1
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8014fd4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8014fd8:	b2ad      	uxth	r5, r5
 8014fda:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8014fde:	47b8      	blx	r7
 8014fe0:	e7ee      	b.n	8014fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014fe2:	4d81      	ldr	r5, [pc, #516]	@ (80151e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014fe4:	6828      	ldr	r0, [r5, #0]
 8014fe6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	f040 813d 	bne.w	801526a <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8014ff0:	4a81      	ldr	r2, [pc, #516]	@ (80151f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8014ff2:	8833      	ldrh	r3, [r6, #0]
 8014ff4:	7812      	ldrb	r2, [r2, #0]
 8014ff6:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8014ffa:	2a01      	cmp	r2, #1
 8014ffc:	d014      	beq.n	8015028 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8014ffe:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8015002:	f04f 0900 	mov.w	r9, #0
 8015006:	32ae      	adds	r2, #174	@ 0xae
 8015008:	4283      	cmp	r3, r0
 801500a:	f102 0208 	add.w	r2, r2, #8
 801500e:	f280 8083 	bge.w	8015118 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8015012:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8015016:	3301      	adds	r3, #1
 8015018:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801501c:	4439      	add	r1, r7
 801501e:	b209      	sxth	r1, r1
 8015020:	4589      	cmp	r9, r1
 8015022:	bfb8      	it	lt
 8015024:	4689      	movlt	r9, r1
 8015026:	e7ef      	b.n	8015008 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8015028:	4f74      	ldr	r7, [pc, #464]	@ (80151fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801502a:	883a      	ldrh	r2, [r7, #0]
 801502c:	4693      	mov	fp, r2
 801502e:	4283      	cmp	r3, r0
 8015030:	da08      	bge.n	8015044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8015032:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8015036:	3301      	adds	r3, #1
 8015038:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801503c:	458b      	cmp	fp, r1
 801503e:	bfa8      	it	ge
 8015040:	468b      	movge	fp, r1
 8015042:	e7f4      	b.n	801502e <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8015044:	2a0f      	cmp	r2, #15
 8015046:	f04f 0300 	mov.w	r3, #0
 801504a:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8015200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801504e:	bf8c      	ite	hi
 8015050:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8015054:	f04f 0801 	movls.w	r8, #1
 8015058:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801505c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015060:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8015064:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015068:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801506c:	6828      	ldr	r0, [r5, #0]
 801506e:	455b      	cmp	r3, fp
 8015070:	f340 80c8 	ble.w	8015204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015074:	6803      	ldr	r3, [r0, #0]
 8015076:	f8b7 a000 	ldrh.w	sl, [r7]
 801507a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801507e:	4798      	blx	r3
 8015080:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8015084:	ebaa 0000 	sub.w	r0, sl, r0
 8015088:	682b      	ldr	r3, [r5, #0]
 801508a:	ebac 0e08 	sub.w	lr, ip, r8
 801508e:	b280      	uxth	r0, r0
 8015090:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8015094:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8015098:	4570      	cmp	r0, lr
 801509a:	dd05      	ble.n	80150a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801509c:	4558      	cmp	r0, fp
 801509e:	dd03      	ble.n	80150a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 80150a0:	b901      	cbnz	r1, 80150a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80150a2:	b392      	cbz	r2, 801510a <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 80150a4:	4658      	mov	r0, fp
 80150a6:	e006      	b.n	80150b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 80150a8:	2900      	cmp	r1, #0
 80150aa:	d1fb      	bne.n	80150a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80150ac:	2a00      	cmp	r2, #0
 80150ae:	d1f9      	bne.n	80150a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80150b0:	4558      	cmp	r0, fp
 80150b2:	bfb8      	it	lt
 80150b4:	4658      	movlt	r0, fp
 80150b6:	f9b9 3000 	ldrsh.w	r3, [r9]
 80150ba:	2200      	movs	r2, #0
 80150bc:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 80150c0:	ebac 0000 	sub.w	r0, ip, r0
 80150c4:	f8b6 a000 	ldrh.w	sl, [r6]
 80150c8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80150cc:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80150d0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80150d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80150d8:	4553      	cmp	r3, sl
 80150da:	ddc5      	ble.n	8015068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80150dc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80150e0:	ab0d      	add	r3, sp, #52	@ 0x34
 80150e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80150e6:	6851      	ldr	r1, [r2, #4]
 80150e8:	c303      	stmia	r3!, {r0, r1}
 80150ea:	a80d      	add	r0, sp, #52	@ 0x34
 80150ec:	a90b      	add	r1, sp, #44	@ 0x2c
 80150ee:	f7fa fb75 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 80150f2:	a80d      	add	r0, sp, #52	@ 0x34
 80150f4:	f7fa fbb5 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150f8:	b920      	cbnz	r0, 8015104 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 80150fa:	6823      	ldr	r3, [r4, #0]
 80150fc:	a90d      	add	r1, sp, #52	@ 0x34
 80150fe:	4620      	mov	r0, r4
 8015100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015102:	4798      	blx	r3
 8015104:	f10a 0a01 	add.w	sl, sl, #1
 8015108:	e7e4      	b.n	80150d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801510a:	681a      	ldr	r2, [r3, #0]
 801510c:	2101      	movs	r1, #1
 801510e:	4618      	mov	r0, r3
 8015110:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8015114:	4790      	blx	r2
 8015116:	e7a7      	b.n	8015068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8015118:	4b39      	ldr	r3, [pc, #228]	@ (8015200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801511a:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 80151fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801511e:	881f      	ldrh	r7, [r3, #0]
 8015120:	2300      	movs	r3, #0
 8015122:	2f0f      	cmp	r7, #15
 8015124:	bf8c      	ite	hi
 8015126:	08ff      	lsrhi	r7, r7, #3
 8015128:	2701      	movls	r7, #1
 801512a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801512e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015132:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8015136:	6828      	ldr	r0, [r5, #0]
 8015138:	4413      	add	r3, r2
 801513a:	b21b      	sxth	r3, r3
 801513c:	454b      	cmp	r3, r9
 801513e:	da61      	bge.n	8015204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015140:	6803      	ldr	r3, [r0, #0]
 8015142:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015146:	4798      	blx	r3
 8015148:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801514c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015150:	682a      	ldr	r2, [r5, #0]
 8015152:	4473      	add	r3, lr
 8015154:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8015158:	b21b      	sxth	r3, r3
 801515a:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 801515e:	eb03 0e07 	add.w	lr, r3, r7
 8015162:	4570      	cmp	r0, lr
 8015164:	da0d      	bge.n	8015182 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8015166:	4548      	cmp	r0, r9
 8015168:	da0b      	bge.n	8015182 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 801516a:	f1bc 0f00 	cmp.w	ip, #0
 801516e:	d138      	bne.n	80151e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8015170:	2900      	cmp	r1, #0
 8015172:	d136      	bne.n	80151e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8015174:	6813      	ldr	r3, [r2, #0]
 8015176:	2101      	movs	r1, #1
 8015178:	4610      	mov	r0, r2
 801517a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801517e:	4798      	blx	r3
 8015180:	e7d5      	b.n	801512e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8015182:	f1bc 0f00 	cmp.w	ip, #0
 8015186:	d12c      	bne.n	80151e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8015188:	bb59      	cbnz	r1, 80151e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801518a:	4548      	cmp	r0, r9
 801518c:	bfa8      	it	ge
 801518e:	4648      	movge	r0, r9
 8015190:	f9b8 2000 	ldrsh.w	r2, [r8]
 8015194:	2100      	movs	r1, #0
 8015196:	1ac0      	subs	r0, r0, r3
 8015198:	f8b6 a000 	ldrh.w	sl, [r6]
 801519c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80151a0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80151a4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80151a8:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80151ac:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80151b0:	4553      	cmp	r3, sl
 80151b2:	ddbc      	ble.n	801512e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 80151b4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80151b8:	ab0d      	add	r3, sp, #52	@ 0x34
 80151ba:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80151be:	6851      	ldr	r1, [r2, #4]
 80151c0:	c303      	stmia	r3!, {r0, r1}
 80151c2:	a80d      	add	r0, sp, #52	@ 0x34
 80151c4:	a90b      	add	r1, sp, #44	@ 0x2c
 80151c6:	f7fa fb09 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 80151ca:	a80d      	add	r0, sp, #52	@ 0x34
 80151cc:	f7fa fb49 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151d0:	b920      	cbnz	r0, 80151dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 80151d2:	6823      	ldr	r3, [r4, #0]
 80151d4:	a90d      	add	r1, sp, #52	@ 0x34
 80151d6:	4620      	mov	r0, r4
 80151d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151da:	4798      	blx	r3
 80151dc:	f10a 0a01 	add.w	sl, sl, #1
 80151e0:	e7e4      	b.n	80151ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 80151e2:	4648      	mov	r0, r9
 80151e4:	e7d4      	b.n	8015190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 80151e6:	bf00      	nop
 80151e8:	240253b4 	.word	0x240253b4
 80151ec:	240253f4 	.word	0x240253f4
 80151f0:	24025400 	.word	0x24025400
 80151f4:	2400007c 	.word	0x2400007c
 80151f8:	240253ac 	.word	0x240253ac
 80151fc:	240253a8 	.word	0x240253a8
 8015200:	240253aa 	.word	0x240253aa
 8015204:	6828      	ldr	r0, [r5, #0]
 8015206:	6803      	ldr	r3, [r0, #0]
 8015208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801520a:	4798      	blx	r3
 801520c:	4ba4      	ldr	r3, [pc, #656]	@ (80154a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	f43f aed2 	beq.w	8014fba <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8015216:	2300      	movs	r3, #0
 8015218:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801521c:	a80f      	add	r0, sp, #60	@ 0x3c
 801521e:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8015222:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8015226:	4b9f      	ldr	r3, [pc, #636]	@ (80154a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	42b3      	cmp	r3, r6
 801522c:	f4bf aec5 	bcs.w	8014fba <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8015230:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8015234:	2907      	cmp	r1, #7
 8015236:	d815      	bhi.n	8015264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8015238:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801523c:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8015240:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015244:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015248:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801524c:	1c4a      	adds	r2, r1, #1
 801524e:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8015252:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8015256:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801525a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801525e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8015262:	80d7      	strh	r7, [r2, #6]
 8015264:	3301      	adds	r3, #1
 8015266:	b29b      	uxth	r3, r3
 8015268:	e7df      	b.n	801522a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801526a:	2b02      	cmp	r3, #2
 801526c:	f040 80ce 	bne.w	801540c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8015270:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015274:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8015278:	9308      	str	r3, [sp, #32]
 801527a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801527e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015282:	9307      	str	r3, [sp, #28]
 8015284:	b2bf      	uxth	r7, r7
 8015286:	6803      	ldr	r3, [r0, #0]
 8015288:	fa0f f887 	sxth.w	r8, r7
 801528c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015290:	4798      	blx	r3
 8015292:	4b85      	ldr	r3, [pc, #532]	@ (80154a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8015294:	4682      	mov	sl, r0
 8015296:	2000      	movs	r0, #0
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	9302      	str	r3, [sp, #8]
 801529c:	4b83      	ldr	r3, [pc, #524]	@ (80154ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801529e:	881e      	ldrh	r6, [r3, #0]
 80152a0:	4b83      	ldr	r3, [pc, #524]	@ (80154b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	2b01      	cmp	r3, #1
 80152a6:	bf1e      	ittt	ne
 80152a8:	9b02      	ldrne	r3, [sp, #8]
 80152aa:	9602      	strne	r6, [sp, #8]
 80152ac:	461e      	movne	r6, r3
 80152ae:	f7ec fc55 	bl	8001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80152b2:	fb96 fbfb 	sdiv	fp, r6, fp
 80152b6:	fb0b f808 	mul.w	r8, fp, r8
 80152ba:	45c2      	cmp	sl, r8
 80152bc:	da0c      	bge.n	80152d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 80152be:	6828      	ldr	r0, [r5, #0]
 80152c0:	210a      	movs	r1, #10
 80152c2:	6803      	ldr	r3, [r0, #0]
 80152c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80152c8:	4798      	blx	r3
 80152ca:	6828      	ldr	r0, [r5, #0]
 80152cc:	6803      	ldr	r3, [r0, #0]
 80152ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80152d2:	4798      	blx	r3
 80152d4:	4682      	mov	sl, r0
 80152d6:	e7f0      	b.n	80152ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 80152d8:	2000      	movs	r0, #0
 80152da:	f04f 0800 	mov.w	r8, #0
 80152de:	f7ec fc6d 	bl	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80152e2:	fa1f f38b 	uxth.w	r3, fp
 80152e6:	4645      	mov	r5, r8
 80152e8:	fb17 f703 	smulbb	r7, r7, r3
 80152ec:	9304      	str	r3, [sp, #16]
 80152ee:	b2bb      	uxth	r3, r7
 80152f0:	4f70      	ldr	r7, [pc, #448]	@ (80154b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 80152f2:	9305      	str	r3, [sp, #20]
 80152f4:	0973      	lsrs	r3, r6, #5
 80152f6:	9306      	str	r3, [sp, #24]
 80152f8:	42b5      	cmp	r5, r6
 80152fa:	d087      	beq.n	801520c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80152fc:	6838      	ldr	r0, [r7, #0]
 80152fe:	6803      	ldr	r3, [r0, #0]
 8015300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015304:	4798      	blx	r3
 8015306:	4582      	cmp	sl, r0
 8015308:	4681      	mov	r9, r0
 801530a:	d907      	bls.n	801531c <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801530c:	f1b8 0f00 	cmp.w	r8, #0
 8015310:	d007      	beq.n	8015322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8015312:	6838      	ldr	r0, [r7, #0]
 8015314:	6803      	ldr	r3, [r0, #0]
 8015316:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801531a:	e776      	b.n	801520a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801531c:	f1b8 0f00 	cmp.w	r8, #0
 8015320:	d003      	beq.n	801532a <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8015322:	454d      	cmp	r5, r9
 8015324:	d3f5      	bcc.n	8015312 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8015326:	f04f 0801 	mov.w	r8, #1
 801532a:	9a04      	ldr	r2, [sp, #16]
 801532c:	fb95 f3fb 	sdiv	r3, r5, fp
 8015330:	9303      	str	r3, [sp, #12]
 8015332:	3301      	adds	r3, #1
 8015334:	fb13 f302 	smulbb	r3, r3, r2
 8015338:	b299      	uxth	r1, r3
 801533a:	f1b8 0f00 	cmp.w	r8, #0
 801533e:	d04d      	beq.n	80153dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8015340:	eb09 030b 	add.w	r3, r9, fp
 8015344:	42b3      	cmp	r3, r6
 8015346:	bfa8      	it	ge
 8015348:	4633      	movge	r3, r6
 801534a:	b29b      	uxth	r3, r3
 801534c:	9807      	ldr	r0, [sp, #28]
 801534e:	428b      	cmp	r3, r1
 8015350:	bf94      	ite	ls
 8015352:	ebc5 0203 	rsbls	r2, r5, r3
 8015356:	ebc5 0201 	rsbhi	r2, r5, r1
 801535a:	4282      	cmp	r2, r0
 801535c:	bfa8      	it	ge
 801535e:	4602      	movge	r2, r0
 8015360:	9808      	ldr	r0, [sp, #32]
 8015362:	fa1f fa82 	uxth.w	sl, r2
 8015366:	4582      	cmp	sl, r0
 8015368:	d205      	bcs.n	8015376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801536a:	fa15 f082 	uxtah	r0, r5, r2
 801536e:	4286      	cmp	r6, r0
 8015370:	d001      	beq.n	8015376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8015372:	4299      	cmp	r1, r3
 8015374:	d23f      	bcs.n	80153f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8015376:	2001      	movs	r0, #1
 8015378:	9209      	str	r2, [sp, #36]	@ 0x24
 801537a:	f7ec fbef 	bl	8001b5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801537e:	6838      	ldr	r0, [r7, #0]
 8015380:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8015384:	6803      	ldr	r3, [r0, #0]
 8015386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801538a:	4798      	blx	r3
 801538c:	4b48      	ldr	r3, [pc, #288]	@ (80154b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801538e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015390:	2000      	movs	r0, #0
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8015398:	b212      	sxth	r2, r2
 801539a:	2b01      	cmp	r3, #1
 801539c:	d122      	bne.n	80153e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 801539e:	1b73      	subs	r3, r6, r5
 80153a0:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 80153a4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80153a8:	eba3 030a 	sub.w	r3, r3, sl
 80153ac:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 80153b0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80153b4:	6823      	ldr	r3, [r4, #0]
 80153b6:	a90d      	add	r1, sp, #52	@ 0x34
 80153b8:	4620      	mov	r0, r4
 80153ba:	4455      	add	r5, sl
 80153bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153be:	4798      	blx	r3
 80153c0:	6838      	ldr	r0, [r7, #0]
 80153c2:	9b03      	ldr	r3, [sp, #12]
 80153c4:	b2ad      	uxth	r5, r5
 80153c6:	4259      	negs	r1, r3
 80153c8:	6803      	ldr	r3, [r0, #0]
 80153ca:	b209      	sxth	r1, r1
 80153cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80153d0:	4798      	blx	r3
 80153d2:	2001      	movs	r0, #1
 80153d4:	f7ec fbf2 	bl	8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80153d8:	46ca      	mov	sl, r9
 80153da:	e78d      	b.n	80152f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 80153dc:	9b05      	ldr	r3, [sp, #20]
 80153de:	eba9 0303 	sub.w	r3, r9, r3
 80153e2:	e7b2      	b.n	801534a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80153e4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80153e8:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 80153ec:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80153f0:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80153f4:	e7de      	b.n	80153b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 80153f6:	6838      	ldr	r0, [r7, #0]
 80153f8:	6803      	ldr	r3, [r0, #0]
 80153fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153fc:	4798      	blx	r3
 80153fe:	6838      	ldr	r0, [r7, #0]
 8015400:	9906      	ldr	r1, [sp, #24]
 8015402:	6803      	ldr	r3, [r0, #0]
 8015404:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015408:	4798      	blx	r3
 801540a:	e7e5      	b.n	80153d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 801540c:	2b03      	cmp	r3, #3
 801540e:	f040 8133 	bne.w	8015678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8015412:	4b27      	ldr	r3, [pc, #156]	@ (80154b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8015414:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8015418:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	2b01      	cmp	r3, #1
 8015420:	f000 8095 	beq.w	801554e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015424:	8832      	ldrh	r2, [r6, #0]
 8015426:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801542a:	3201      	adds	r2, #1
 801542c:	b292      	uxth	r2, r2
 801542e:	2900      	cmp	r1, #0
 8015430:	f43f aeec 	beq.w	801520c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015434:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8015438:	4694      	mov	ip, r2
 801543a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801543e:	f04f 0800 	mov.w	r8, #0
 8015442:	441d      	add	r5, r3
 8015444:	b22d      	sxth	r5, r5
 8015446:	fa1f f38c 	uxth.w	r3, ip
 801544a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801544e:	4299      	cmp	r1, r3
 8015450:	f240 80bc 	bls.w	80155cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8015454:	4427      	add	r7, r4
 8015456:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801545a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801545e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8015462:	4283      	cmp	r3, r0
 8015464:	f340 809e 	ble.w	80155a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 8015468:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801546c:	46e0      	mov	r8, ip
 801546e:	4405      	add	r5, r0
 8015470:	b22d      	sxth	r5, r5
 8015472:	429d      	cmp	r5, r3
 8015474:	bfa8      	it	ge
 8015476:	461d      	movge	r5, r3
 8015478:	f10c 0c01 	add.w	ip, ip, #1
 801547c:	e7e3      	b.n	8015446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 801547e:	d10a      	bne.n	8015496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8015480:	4562      	cmp	r2, ip
 8015482:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8015486:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801548a:	bfb8      	it	lt
 801548c:	4662      	movlt	r2, ip
 801548e:	4288      	cmp	r0, r1
 8015490:	bfb8      	it	lt
 8015492:	4698      	movlt	r8, r3
 8015494:	e084      	b.n	80155a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8015496:	428a      	cmp	r2, r1
 8015498:	bfb8      	it	lt
 801549a:	460a      	movlt	r2, r1
 801549c:	e080      	b.n	80155a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 801549e:	bf00      	nop
 80154a0:	240253b2 	.word	0x240253b2
 80154a4:	2400007c 	.word	0x2400007c
 80154a8:	240253aa 	.word	0x240253aa
 80154ac:	240253a8 	.word	0x240253a8
 80154b0:	240253ac 	.word	0x240253ac
 80154b4:	240253b4 	.word	0x240253b4
 80154b8:	19e1      	adds	r1, r4, r7
 80154ba:	ab0d      	add	r3, sp, #52	@ 0x34
 80154bc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80154c0:	6849      	ldr	r1, [r1, #4]
 80154c2:	c303      	stmia	r3!, {r0, r1}
 80154c4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 80154c8:	a80d      	add	r0, sp, #52	@ 0x34
 80154ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80154ce:	454b      	cmp	r3, r9
 80154d0:	440b      	add	r3, r1
 80154d2:	bfb8      	it	lt
 80154d4:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 80154d8:	1a9b      	subs	r3, r3, r2
 80154da:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80154de:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80154e2:	f7fe fe63 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80154e6:	a80d      	add	r0, sp, #52	@ 0x34
 80154e8:	f7fa f9bb 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154ec:	bb78      	cbnz	r0, 801554e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80154ee:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 80154f2:	4427      	add	r7, r4
 80154f4:	6828      	ldr	r0, [r5, #0]
 80154f6:	45cc      	cmp	ip, r9
 80154f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80154fc:	f8d0 e000 	ldr.w	lr, [r0]
 8015500:	bfd8      	it	le
 8015502:	fa1f fc8c 	uxthle.w	ip, ip
 8015506:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801550a:	bfc8      	it	gt
 801550c:	fa1f fc89 	uxthgt.w	ip, r9
 8015510:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015514:	f8cd c000 	str.w	ip, [sp]
 8015518:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801551c:	47d8      	blx	fp
 801551e:	4683      	mov	fp, r0
 8015520:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015524:	a80d      	add	r0, sp, #52	@ 0x34
 8015526:	f7fe fe27 	bl	8014178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	4620      	mov	r0, r4
 801552e:	a90d      	add	r1, sp, #52	@ 0x34
 8015530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015532:	4798      	blx	r3
 8015534:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8015538:	eba0 000b 	sub.w	r0, r0, fp
 801553c:	b200      	sxth	r0, r0
 801553e:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8015542:	b920      	cbnz	r0, 801554e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015544:	fa1f f188 	uxth.w	r1, r8
 8015548:	4650      	mov	r0, sl
 801554a:	f7ff f93d 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801554e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8015552:	f1bb 0f00 	cmp.w	fp, #0
 8015556:	f43f ae59 	beq.w	801520c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801555a:	8833      	ldrh	r3, [r6, #0]
 801555c:	f04f 0800 	mov.w	r8, #0
 8015560:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8015564:	3301      	adds	r3, #1
 8015566:	b29b      	uxth	r3, r3
 8015568:	b299      	uxth	r1, r3
 801556a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801556e:	458b      	cmp	fp, r1
 8015570:	d9a2      	bls.n	80154b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8015572:	4427      	add	r7, r4
 8015574:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8015578:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801557c:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8015580:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8015584:	4408      	add	r0, r1
 8015586:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801558a:	4461      	add	r1, ip
 801558c:	b200      	sxth	r0, r0
 801558e:	b209      	sxth	r1, r1
 8015590:	4288      	cmp	r0, r1
 8015592:	f6bf af74 	bge.w	801547e <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 8015596:	4584      	cmp	ip, r0
 8015598:	4662      	mov	r2, ip
 801559a:	4698      	mov	r8, r3
 801559c:	bfb8      	it	lt
 801559e:	4602      	movlt	r2, r0
 80155a0:	3301      	adds	r3, #1
 80155a2:	e7e1      	b.n	8015568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 80155a4:	d10e      	bne.n	80155c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 80155a6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80155aa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80155ae:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80155b2:	4473      	add	r3, lr
 80155b4:	b21b      	sxth	r3, r3
 80155b6:	429d      	cmp	r5, r3
 80155b8:	bfa8      	it	ge
 80155ba:	461d      	movge	r5, r3
 80155bc:	4287      	cmp	r7, r0
 80155be:	bfb8      	it	lt
 80155c0:	46e0      	movlt	r8, ip
 80155c2:	e759      	b.n	8015478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80155c4:	4285      	cmp	r5, r0
 80155c6:	bfa8      	it	ge
 80155c8:	4605      	movge	r5, r0
 80155ca:	e755      	b.n	8015478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80155cc:	eb0a 0007 	add.w	r0, sl, r7
 80155d0:	4427      	add	r7, r4
 80155d2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80155d6:	45cb      	cmp	fp, r9
 80155d8:	bfbc      	itt	lt
 80155da:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 80155de:	445d      	addlt	r5, fp
 80155e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80155e4:	bfb8      	it	lt
 80155e6:	b22d      	sxthlt	r5, r5
 80155e8:	f7fa f93b 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 80155ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80155f0:	2800      	cmp	r0, #0
 80155f2:	f47f af1c 	bne.w	801542e <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80155f6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80155fa:	fa1f fb8b 	uxth.w	fp, fp
 80155fe:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015602:	1aad      	subs	r5, r5, r2
 8015604:	4829      	ldr	r0, [pc, #164]	@ (80156ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 8015606:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801560a:	454d      	cmp	r5, r9
 801560c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8015610:	6800      	ldr	r0, [r0, #0]
 8015612:	bfa8      	it	ge
 8015614:	464d      	movge	r5, r9
 8015616:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801561a:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801561e:	b289      	uxth	r1, r1
 8015620:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015624:	b2ad      	uxth	r5, r5
 8015626:	f8d0 c000 	ldr.w	ip, [r0]
 801562a:	b292      	uxth	r2, r2
 801562c:	455d      	cmp	r5, fp
 801562e:	bf94      	ite	ls
 8015630:	9500      	strls	r5, [sp, #0]
 8015632:	f8cd b000 	strhi.w	fp, [sp]
 8015636:	b29b      	uxth	r3, r3
 8015638:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801563c:	47a8      	blx	r5
 801563e:	6823      	ldr	r3, [r4, #0]
 8015640:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015644:	a90d      	add	r1, sp, #52	@ 0x34
 8015646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015648:	4620      	mov	r0, r4
 801564a:	4798      	blx	r3
 801564c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8015650:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8015654:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8015658:	1a5b      	subs	r3, r3, r1
 801565a:	440a      	add	r2, r1
 801565c:	b21b      	sxth	r3, r3
 801565e:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8015662:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8015666:	2b00      	cmp	r3, #0
 8015668:	f47f aedc 	bne.w	8015424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801566c:	fa1f f188 	uxth.w	r1, r8
 8015670:	4650      	mov	r0, sl
 8015672:	f7ff f8a9 	bl	80147c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015676:	e6d5      	b.n	8015424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8015678:	8835      	ldrh	r5, [r6, #0]
 801567a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801567e:	42ab      	cmp	r3, r5
 8015680:	f67f adc4 	bls.w	801520c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015684:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015688:	ab0d      	add	r3, sp, #52	@ 0x34
 801568a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801568e:	6851      	ldr	r1, [r2, #4]
 8015690:	c303      	stmia	r3!, {r0, r1}
 8015692:	a80d      	add	r0, sp, #52	@ 0x34
 8015694:	f7fa f8e5 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015698:	b920      	cbnz	r0, 80156a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801569a:	6823      	ldr	r3, [r4, #0]
 801569c:	a90d      	add	r1, sp, #52	@ 0x34
 801569e:	4620      	mov	r0, r4
 80156a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156a2:	4798      	blx	r3
 80156a4:	3501      	adds	r5, #1
 80156a6:	b2ad      	uxth	r5, r5
 80156a8:	e7e7      	b.n	801567a <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 80156aa:	bf00      	nop
 80156ac:	240253b4 	.word	0x240253b4

080156b0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80156b0:	4b03      	ldr	r3, [pc, #12]	@ (80156c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80156b2:	2200      	movs	r2, #0
 80156b4:	801a      	strh	r2, [r3, #0]
 80156b6:	805a      	strh	r2, [r3, #2]
 80156b8:	809a      	strh	r2, [r3, #4]
 80156ba:	80da      	strh	r2, [r3, #6]
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop
 80156c0:	24025400 	.word	0x24025400

080156c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80156c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c8:	b09d      	sub	sp, #116	@ 0x74
 80156ca:	4606      	mov	r6, r0
 80156cc:	4614      	mov	r4, r2
 80156ce:	468a      	mov	sl, r1
 80156d0:	a803      	add	r0, sp, #12
 80156d2:	461d      	mov	r5, r3
 80156d4:	f001 f9ff 	bl	8016ad6 <_ZN8touchgfx12TextProviderC1Ev>
 80156d8:	6833      	ldr	r3, [r6, #0]
 80156da:	4630      	mov	r0, r6
 80156dc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80156e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156e2:	4798      	blx	r3
 80156e4:	6833      	ldr	r3, [r6, #0]
 80156e6:	4607      	mov	r7, r0
 80156e8:	4630      	mov	r0, r6
 80156ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156ec:	4798      	blx	r3
 80156ee:	462a      	mov	r2, r5
 80156f0:	2500      	movs	r5, #0
 80156f2:	4621      	mov	r1, r4
 80156f4:	9000      	str	r0, [sp, #0]
 80156f6:	463b      	mov	r3, r7
 80156f8:	462c      	mov	r4, r5
 80156fa:	46a9      	mov	r9, r5
 80156fc:	46a8      	mov	r8, r5
 80156fe:	a803      	add	r0, sp, #12
 8015700:	f001 fa3c 	bl	8016b7c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015704:	2300      	movs	r3, #0
 8015706:	9302      	str	r3, [sp, #8]
 8015708:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801570c:	429c      	cmp	r4, r3
 801570e:	d002      	beq.n	8015716 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015710:	455c      	cmp	r4, fp
 8015712:	bf18      	it	ne
 8015714:	4625      	movne	r5, r4
 8015716:	ab02      	add	r3, sp, #8
 8015718:	4632      	mov	r2, r6
 801571a:	4651      	mov	r1, sl
 801571c:	a803      	add	r0, sp, #12
 801571e:	f001 fd4f 	bl	80171c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015722:	4604      	mov	r4, r0
 8015724:	b108      	cbz	r0, 801572a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015726:	280a      	cmp	r0, #10
 8015728:	d10a      	bne.n	8015740 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801572a:	45c1      	cmp	r9, r8
 801572c:	bf38      	it	cc
 801572e:	46c1      	movcc	r9, r8
 8015730:	f04f 0800 	mov.w	r8, #0
 8015734:	2c00      	cmp	r4, #0
 8015736:	d1e5      	bne.n	8015704 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015738:	4648      	mov	r0, r9
 801573a:	b01d      	add	sp, #116	@ 0x74
 801573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015740:	9a02      	ldr	r2, [sp, #8]
 8015742:	2a00      	cmp	r2, #0
 8015744:	d0de      	beq.n	8015704 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015746:	7b57      	ldrb	r7, [r2, #13]
 8015748:	4629      	mov	r1, r5
 801574a:	6833      	ldr	r3, [r6, #0]
 801574c:	007f      	lsls	r7, r7, #1
 801574e:	8894      	ldrh	r4, [r2, #4]
 8015750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015752:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8015756:	7a97      	ldrb	r7, [r2, #10]
 8015758:	4307      	orrs	r7, r0
 801575a:	4630      	mov	r0, r6
 801575c:	4798      	blx	r3
 801575e:	4438      	add	r0, r7
 8015760:	4480      	add	r8, r0
 8015762:	fa1f f888 	uxth.w	r8, r8
 8015766:	e7e5      	b.n	8015734 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015768 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015768:	b508      	push	{r3, lr}
 801576a:	6803      	ldr	r3, [r0, #0]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	4798      	blx	r3
 8015770:	b128      	cbz	r0, 801577e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015772:	7b43      	ldrb	r3, [r0, #13]
 8015774:	7a80      	ldrb	r0, [r0, #10]
 8015776:	005b      	lsls	r3, r3, #1
 8015778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801577c:	4318      	orrs	r0, r3
 801577e:	bd08      	pop	{r3, pc}

08015780 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015780:	b40e      	push	{r1, r2, r3}
 8015782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015784:	b09e      	sub	sp, #120	@ 0x78
 8015786:	4605      	mov	r5, r0
 8015788:	ab23      	add	r3, sp, #140	@ 0x8c
 801578a:	a805      	add	r0, sp, #20
 801578c:	f853 4b04 	ldr.w	r4, [r3], #4
 8015790:	9303      	str	r3, [sp, #12]
 8015792:	f001 f9a0 	bl	8016ad6 <_ZN8touchgfx12TextProviderC1Ev>
 8015796:	682b      	ldr	r3, [r5, #0]
 8015798:	4628      	mov	r0, r5
 801579a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801579c:	4798      	blx	r3
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	4606      	mov	r6, r0
 80157a2:	4628      	mov	r0, r5
 80157a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157a6:	4798      	blx	r3
 80157a8:	4633      	mov	r3, r6
 80157aa:	4621      	mov	r1, r4
 80157ac:	ae1e      	add	r6, sp, #120	@ 0x78
 80157ae:	2400      	movs	r4, #0
 80157b0:	9000      	str	r0, [sp, #0]
 80157b2:	9a03      	ldr	r2, [sp, #12]
 80157b4:	a805      	add	r0, sp, #20
 80157b6:	f001 f9e1 	bl	8016b7c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80157ba:	f846 4d68 	str.w	r4, [r6, #-104]!
 80157be:	462a      	mov	r2, r5
 80157c0:	4633      	mov	r3, r6
 80157c2:	4621      	mov	r1, r4
 80157c4:	a805      	add	r0, sp, #20
 80157c6:	f001 fcfb 	bl	80171c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80157ca:	b300      	cbz	r0, 801580e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80157cc:	280a      	cmp	r0, #10
 80157ce:	d01a      	beq.n	8015806 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80157d0:	9f04      	ldr	r7, [sp, #16]
 80157d2:	b1c7      	cbz	r7, 8015806 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80157d4:	7b78      	ldrb	r0, [r7, #13]
 80157d6:	7a3b      	ldrb	r3, [r7, #8]
 80157d8:	00c1      	lsls	r1, r0, #3
 80157da:	88ea      	ldrh	r2, [r5, #6]
 80157dc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80157e0:	4319      	orrs	r1, r3
 80157e2:	0643      	lsls	r3, r0, #25
 80157e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80157e8:	bf48      	it	mi
 80157ea:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80157ee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80157f2:	bf48      	it	mi
 80157f4:	b219      	sxthmi	r1, r3
 80157f6:	79fb      	ldrb	r3, [r7, #7]
 80157f8:	4303      	orrs	r3, r0
 80157fa:	4413      	add	r3, r2
 80157fc:	1a5b      	subs	r3, r3, r1
 80157fe:	b21b      	sxth	r3, r3
 8015800:	429c      	cmp	r4, r3
 8015802:	bfb8      	it	lt
 8015804:	461c      	movlt	r4, r3
 8015806:	4633      	mov	r3, r6
 8015808:	462a      	mov	r2, r5
 801580a:	2100      	movs	r1, #0
 801580c:	e7da      	b.n	80157c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801580e:	b2a0      	uxth	r0, r4
 8015810:	b01e      	add	sp, #120	@ 0x78
 8015812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015816:	b003      	add	sp, #12
 8015818:	4770      	bx	lr

0801581a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801581a:	7a43      	ldrb	r3, [r0, #9]
 801581c:	8880      	ldrh	r0, [r0, #4]
 801581e:	4418      	add	r0, r3
 8015820:	b280      	uxth	r0, r0
 8015822:	4770      	bx	lr

08015824 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8015824:	6803      	ldr	r3, [r0, #0]
 8015826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015828:	4718      	bx	r3

0801582a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801582a:	b40e      	push	{r1, r2, r3}
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	b09d      	sub	sp, #116	@ 0x74
 8015830:	4604      	mov	r4, r0
 8015832:	ab21      	add	r3, sp, #132	@ 0x84
 8015834:	a803      	add	r0, sp, #12
 8015836:	f853 5b04 	ldr.w	r5, [r3], #4
 801583a:	9302      	str	r3, [sp, #8]
 801583c:	f001 f94b 	bl	8016ad6 <_ZN8touchgfx12TextProviderC1Ev>
 8015840:	6823      	ldr	r3, [r4, #0]
 8015842:	4620      	mov	r0, r4
 8015844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015846:	4798      	blx	r3
 8015848:	6823      	ldr	r3, [r4, #0]
 801584a:	4606      	mov	r6, r0
 801584c:	4620      	mov	r0, r4
 801584e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015850:	2401      	movs	r4, #1
 8015852:	4798      	blx	r3
 8015854:	4633      	mov	r3, r6
 8015856:	9000      	str	r0, [sp, #0]
 8015858:	4629      	mov	r1, r5
 801585a:	9a02      	ldr	r2, [sp, #8]
 801585c:	a803      	add	r0, sp, #12
 801585e:	f001 f98d 	bl	8016b7c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015862:	a803      	add	r0, sp, #12
 8015864:	f001 fd2c 	bl	80172c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015868:	b2a3      	uxth	r3, r4
 801586a:	b138      	cbz	r0, 801587c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801586c:	280a      	cmp	r0, #10
 801586e:	a803      	add	r0, sp, #12
 8015870:	bf04      	itt	eq
 8015872:	3301      	addeq	r3, #1
 8015874:	b21c      	sxtheq	r4, r3
 8015876:	f001 fd23 	bl	80172c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801587a:	e7f5      	b.n	8015868 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801587c:	4618      	mov	r0, r3
 801587e:	b01d      	add	sp, #116	@ 0x74
 8015880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015884:	b003      	add	sp, #12
 8015886:	4770      	bx	lr

08015888 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015888:	b40e      	push	{r1, r2, r3}
 801588a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801588c:	b09e      	sub	sp, #120	@ 0x78
 801588e:	4604      	mov	r4, r0
 8015890:	ab23      	add	r3, sp, #140	@ 0x8c
 8015892:	a805      	add	r0, sp, #20
 8015894:	f853 5b04 	ldr.w	r5, [r3], #4
 8015898:	9303      	str	r3, [sp, #12]
 801589a:	f001 f91c 	bl	8016ad6 <_ZN8touchgfx12TextProviderC1Ev>
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	4620      	mov	r0, r4
 80158a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158a4:	4798      	blx	r3
 80158a6:	6823      	ldr	r3, [r4, #0]
 80158a8:	4606      	mov	r6, r0
 80158aa:	4620      	mov	r0, r4
 80158ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158ae:	4798      	blx	r3
 80158b0:	4633      	mov	r3, r6
 80158b2:	4629      	mov	r1, r5
 80158b4:	9000      	str	r0, [sp, #0]
 80158b6:	9a03      	ldr	r2, [sp, #12]
 80158b8:	a805      	add	r0, sp, #20
 80158ba:	f001 f95f 	bl	8016b7c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80158be:	ad1e      	add	r5, sp, #120	@ 0x78
 80158c0:	2100      	movs	r1, #0
 80158c2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80158c6:	4622      	mov	r2, r4
 80158c8:	a805      	add	r0, sp, #20
 80158ca:	f845 1d68 	str.w	r1, [r5, #-104]!
 80158ce:	462b      	mov	r3, r5
 80158d0:	f001 fc76 	bl	80171c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80158d4:	b1d8      	cbz	r0, 801590e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80158d6:	280a      	cmp	r0, #10
 80158d8:	d012      	beq.n	8015900 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80158da:	9804      	ldr	r0, [sp, #16]
 80158dc:	b180      	cbz	r0, 8015900 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80158de:	7b47      	ldrb	r7, [r0, #13]
 80158e0:	88e2      	ldrh	r2, [r4, #6]
 80158e2:	00fb      	lsls	r3, r7, #3
 80158e4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80158e8:	7a03      	ldrb	r3, [r0, #8]
 80158ea:	430b      	orrs	r3, r1
 80158ec:	0679      	lsls	r1, r7, #25
 80158ee:	bf44      	itt	mi
 80158f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80158f4:	b21b      	sxthmi	r3, r3
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	b21b      	sxth	r3, r3
 80158fa:	429e      	cmp	r6, r3
 80158fc:	bfa8      	it	ge
 80158fe:	461e      	movge	r6, r3
 8015900:	462b      	mov	r3, r5
 8015902:	4622      	mov	r2, r4
 8015904:	2100      	movs	r1, #0
 8015906:	a805      	add	r0, sp, #20
 8015908:	f001 fc5a 	bl	80171c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801590c:	e7e2      	b.n	80158d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801590e:	4630      	mov	r0, r6
 8015910:	b01e      	add	sp, #120	@ 0x78
 8015912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015916:	b003      	add	sp, #12
 8015918:	4770      	bx	lr

0801591a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801591a:	b513      	push	{r0, r1, r4, lr}
 801591c:	6803      	ldr	r3, [r0, #0]
 801591e:	2400      	movs	r4, #0
 8015920:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015924:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015928:	f8ad 1004 	strh.w	r1, [sp, #4]
 801592c:	4669      	mov	r1, sp
 801592e:	691b      	ldr	r3, [r3, #16]
 8015930:	9400      	str	r4, [sp, #0]
 8015932:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015936:	4798      	blx	r3
 8015938:	b002      	add	sp, #8
 801593a:	bd10      	pop	{r4, pc}

0801593c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801593c:	b538      	push	{r3, r4, r5, lr}
 801593e:	680b      	ldr	r3, [r1, #0]
 8015940:	460c      	mov	r4, r1
 8015942:	4605      	mov	r5, r0
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	4798      	blx	r3
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	4620      	mov	r0, r4
 801594c:	4629      	mov	r1, r5
 801594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015950:	4798      	blx	r3
 8015952:	4628      	mov	r0, r5
 8015954:	bd38      	pop	{r3, r4, r5, pc}

08015956 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015956:	b410      	push	{r4}
 8015958:	880a      	ldrh	r2, [r1, #0]
 801595a:	8884      	ldrh	r4, [r0, #4]
 801595c:	4422      	add	r2, r4
 801595e:	800a      	strh	r2, [r1, #0]
 8015960:	884a      	ldrh	r2, [r1, #2]
 8015962:	88c4      	ldrh	r4, [r0, #6]
 8015964:	4422      	add	r2, r4
 8015966:	804a      	strh	r2, [r1, #2]
 8015968:	6940      	ldr	r0, [r0, #20]
 801596a:	b120      	cbz	r0, 8015976 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801596c:	6803      	ldr	r3, [r0, #0]
 801596e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015974:	4718      	bx	r3
 8015976:	f85d 4b04 	ldr.w	r4, [sp], #4
 801597a:	4770      	bx	lr

0801597c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801597c:	b570      	push	{r4, r5, r6, lr}
 801597e:	8882      	ldrh	r2, [r0, #4]
 8015980:	460c      	mov	r4, r1
 8015982:	880b      	ldrh	r3, [r1, #0]
 8015984:	4605      	mov	r5, r0
 8015986:	4413      	add	r3, r2
 8015988:	800b      	strh	r3, [r1, #0]
 801598a:	884b      	ldrh	r3, [r1, #2]
 801598c:	88c2      	ldrh	r2, [r0, #6]
 801598e:	4413      	add	r3, r2
 8015990:	804b      	strh	r3, [r1, #2]
 8015992:	1d01      	adds	r1, r0, #4
 8015994:	4620      	mov	r0, r4
 8015996:	f7f9 ff21 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801599a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	dd0b      	ble.n	80159ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	dd07      	ble.n	80159ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159aa:	6968      	ldr	r0, [r5, #20]
 80159ac:	b128      	cbz	r0, 80159ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159ae:	6803      	ldr	r3, [r0, #0]
 80159b0:	4621      	mov	r1, r4
 80159b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159b8:	4718      	bx	r3
 80159ba:	bd70      	pop	{r4, r5, r6, pc}

080159bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80159bc:	b570      	push	{r4, r5, r6, lr}
 80159be:	8882      	ldrh	r2, [r0, #4]
 80159c0:	460c      	mov	r4, r1
 80159c2:	880b      	ldrh	r3, [r1, #0]
 80159c4:	4605      	mov	r5, r0
 80159c6:	4413      	add	r3, r2
 80159c8:	800b      	strh	r3, [r1, #0]
 80159ca:	884b      	ldrh	r3, [r1, #2]
 80159cc:	88c2      	ldrh	r2, [r0, #6]
 80159ce:	4413      	add	r3, r2
 80159d0:	804b      	strh	r3, [r1, #2]
 80159d2:	1d01      	adds	r1, r0, #4
 80159d4:	4620      	mov	r0, r4
 80159d6:	f7f9 ff01 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 80159da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dd19      	ble.n	8015a16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80159e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	dd15      	ble.n	8015a16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80159ea:	6968      	ldr	r0, [r5, #20]
 80159ec:	b128      	cbz	r0, 80159fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80159ee:	6803      	ldr	r3, [r0, #0]
 80159f0:	4621      	mov	r1, r4
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159f8:	4718      	bx	r3
 80159fa:	4b07      	ldr	r3, [pc, #28]	@ (8015a18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	3304      	adds	r3, #4
 8015a00:	429d      	cmp	r5, r3
 8015a02:	d108      	bne.n	8015a16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015a04:	f7fe fd86 	bl	8014514 <_ZN8touchgfx11Application11getInstanceEv>
 8015a08:	6803      	ldr	r3, [r0, #0]
 8015a0a:	6821      	ldr	r1, [r4, #0]
 8015a0c:	6862      	ldr	r2, [r4, #4]
 8015a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a14:	4718      	bx	r3
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	240253f8 	.word	0x240253f8

08015a1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015a1c:	b570      	push	{r4, r5, r6, lr}
 8015a1e:	4604      	mov	r4, r0
 8015a20:	4616      	mov	r6, r2
 8015a22:	460d      	mov	r5, r1
 8015a24:	b901      	cbnz	r1, 8015a28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015a26:	b192      	cbz	r2, 8015a4e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015a28:	6823      	ldr	r3, [r4, #0]
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	699b      	ldr	r3, [r3, #24]
 8015a2e:	4798      	blx	r3
 8015a30:	88e2      	ldrh	r2, [r4, #6]
 8015a32:	88a1      	ldrh	r1, [r4, #4]
 8015a34:	4620      	mov	r0, r4
 8015a36:	4432      	add	r2, r6
 8015a38:	4429      	add	r1, r5
 8015a3a:	b212      	sxth	r2, r2
 8015a3c:	b209      	sxth	r1, r1
 8015a3e:	f7ee fad2 	bl	8003fe6 <_ZN8touchgfx8Drawable5setXYEss>
 8015a42:	6823      	ldr	r3, [r4, #0]
 8015a44:	4620      	mov	r0, r4
 8015a46:	699b      	ldr	r3, [r3, #24]
 8015a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a4c:	4718      	bx	r3
 8015a4e:	bd70      	pop	{r4, r5, r6, pc}

08015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015a50:	b510      	push	{r4, lr}
 8015a52:	2300      	movs	r3, #0
 8015a54:	4604      	mov	r4, r0
 8015a56:	4608      	mov	r0, r1
 8015a58:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015a5c:	8023      	strh	r3, [r4, #0]
 8015a5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015a62:	8063      	strh	r3, [r4, #2]
 8015a64:	6803      	ldr	r3, [r0, #0]
 8015a66:	80a1      	strh	r1, [r4, #4]
 8015a68:	4621      	mov	r1, r4
 8015a6a:	80e2      	strh	r2, [r4, #6]
 8015a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a6e:	4798      	blx	r3
 8015a70:	4620      	mov	r0, r4
 8015a72:	bd10      	pop	{r4, pc}

08015a74 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8015a74:	4770      	bx	lr

08015a76 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8015a76:	b510      	push	{r4, lr}
 8015a78:	4604      	mov	r4, r0
 8015a7a:	211c      	movs	r1, #28
 8015a7c:	f00e fa8f 	bl	8023f9e <_ZdlPvj>
 8015a80:	4620      	mov	r0, r4
 8015a82:	bd10      	pop	{r4, pc}

08015a84 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8015a84:	4a04      	ldr	r2, [pc, #16]	@ (8015a98 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8015a86:	6002      	str	r2, [r0, #0]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015a8e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015a92:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015a96:	4770      	bx	lr
 8015a98:	08028a0c 	.word	0x08028a0c

08015a9c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8015a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	b087      	sub	sp, #28
 8015aa4:	8b45      	ldrh	r5, [r0, #26]
 8015aa6:	f8b2 c000 	ldrh.w	ip, [r2]
 8015aaa:	9105      	str	r1, [sp, #20]
 8015aac:	1c68      	adds	r0, r5, #1
 8015aae:	68e1      	ldr	r1, [r4, #12]
 8015ab0:	9203      	str	r2, [sp, #12]
 8015ab2:	b280      	uxth	r0, r0
 8015ab4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015ab8:	f01c 0501 	ands.w	r5, ip, #1
 8015abc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ac0:	9502      	str	r5, [sp, #8]
 8015ac2:	d07d      	beq.n	8015bc0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8015ac4:	ee07 2a90 	vmov	s15, r2
 8015ac8:	8360      	strh	r0, [r4, #26]
 8015aca:	f04f 0e00 	mov.w	lr, #0
 8015ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015ad2:	ee06 ea10 	vmov	s12, lr
 8015ad6:	edc1 6a00 	vstr	s13, [r1]
 8015ada:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015ade:	8b61      	ldrh	r1, [r4, #26]
 8015ae0:	ee07 2a10 	vmov	s14, r2
 8015ae4:	68e2      	ldr	r2, [r4, #12]
 8015ae6:	1c48      	adds	r0, r1, #1
 8015ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015aec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015af0:	8360      	strh	r0, [r4, #26]
 8015af2:	ed82 7a00 	vstr	s14, [r2]
 8015af6:	8b21      	ldrh	r1, [r4, #24]
 8015af8:	2501      	movs	r5, #1
 8015afa:	68a2      	ldr	r2, [r4, #8]
 8015afc:	3304      	adds	r3, #4
 8015afe:	1c48      	adds	r0, r1, #1
 8015b00:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	46aa      	mov	sl, r5
 8015b08:	8320      	strh	r0, [r4, #24]
 8015b0a:	462e      	mov	r6, r5
 8015b0c:	5455      	strb	r5, [r2, r1]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	ee07 2a90 	vmov	s15, r2
 8015b14:	4613      	mov	r3, r2
 8015b16:	4611      	mov	r1, r2
 8015b18:	9201      	str	r2, [sp, #4]
 8015b1a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8015b1e:	9805      	ldr	r0, [sp, #20]
 8015b20:	f108 0701 	add.w	r7, r8, #1
 8015b24:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8015b28:	42a8      	cmp	r0, r5
 8015b2a:	b2bf      	uxth	r7, r7
 8015b2c:	eb0b 0908 	add.w	r9, fp, r8
 8015b30:	f340 80db 	ble.w	8015cea <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8015b34:	fa4c f906 	asr.w	r9, ip, r6
 8015b38:	f009 0901 	and.w	r9, r9, #1
 8015b3c:	fa5f f389 	uxtb.w	r3, r9
 8015b40:	9304      	str	r3, [sp, #16]
 8015b42:	9b00      	ldr	r3, [sp, #0]
 8015b44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015b48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b4c:	f1b9 0f00 	cmp.w	r9, #0
 8015b50:	d07d      	beq.n	8015c4e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8015b52:	ee05 1a10 	vmov	s10, r1
 8015b56:	8327      	strh	r7, [r4, #24]
 8015b58:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8015b5c:	ee05 3a10 	vmov	s10, r3
 8015b60:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015b64:	f1ba 0f00 	cmp.w	sl, #0
 8015b68:	d050      	beq.n	8015c0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8015b6a:	f04f 0002 	mov.w	r0, #2
 8015b6e:	f80b 0008 	strb.w	r0, [fp, r8]
 8015b72:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015b76:	68e7      	ldr	r7, [r4, #12]
 8015b78:	f108 0901 	add.w	r9, r8, #1
 8015b7c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015b80:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015b84:	edc7 4a00 	vstr	s9, [r7]
 8015b88:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015b8c:	68e7      	ldr	r7, [r4, #12]
 8015b8e:	f108 0901 	add.w	r9, r8, #1
 8015b92:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015b96:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015b9a:	ed87 5a00 	vstr	s10, [r7]
 8015b9e:	3601      	adds	r6, #1
 8015ba0:	2e10      	cmp	r6, #16
 8015ba2:	d106      	bne.n	8015bb2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8015ba4:	9e01      	ldr	r6, [sp, #4]
 8015ba6:	9803      	ldr	r0, [sp, #12]
 8015ba8:	3601      	adds	r6, #1
 8015baa:	9601      	str	r6, [sp, #4]
 8015bac:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8015bb0:	2600      	movs	r6, #0
 8015bb2:	9800      	ldr	r0, [sp, #0]
 8015bb4:	3501      	adds	r5, #1
 8015bb6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015bba:	3004      	adds	r0, #4
 8015bbc:	9000      	str	r0, [sp, #0]
 8015bbe:	e7ac      	b.n	8015b1a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8015bc0:	ee06 2a10 	vmov	s12, r2
 8015bc4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015bc8:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015bcc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015bd0:	ee16 5a10 	vmov	r5, s12
 8015bd4:	442a      	add	r2, r5
 8015bd6:	ee06 2a90 	vmov	s13, r2
 8015bda:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015bde:	8360      	strh	r0, [r4, #26]
 8015be0:	4472      	add	r2, lr
 8015be2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015be6:	ee07 2a10 	vmov	s14, r2
 8015bea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015bee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015bf2:	edc1 6a00 	vstr	s13, [r1]
 8015bf6:	8b61      	ldrh	r1, [r4, #26]
 8015bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015bfc:	68e2      	ldr	r2, [r4, #12]
 8015bfe:	1c48      	adds	r0, r1, #1
 8015c00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015c04:	8360      	strh	r0, [r4, #26]
 8015c06:	ed82 7a00 	vstr	s14, [r2]
 8015c0a:	e774      	b.n	8015af6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 8015c0c:	f04f 0005 	mov.w	r0, #5
 8015c10:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8015c14:	f80b 0008 	strb.w	r0, [fp, r8]
 8015c18:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c1c:	68e7      	ldr	r7, [r4, #12]
 8015c1e:	f108 0901 	add.w	r9, r8, #1
 8015c22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c26:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015c2a:	ed87 4a00 	vstr	s8, [r7]
 8015c2e:	ee04 2a10 	vmov	s8, r2
 8015c32:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c36:	68e7      	ldr	r7, [r4, #12]
 8015c38:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015c3c:	f108 0901 	add.w	r9, r8, #1
 8015c40:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c44:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015c48:	ed87 4a00 	vstr	s8, [r7]
 8015c4c:	e791      	b.n	8015b72 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8015c4e:	f1ba 0f00 	cmp.w	sl, #0
 8015c52:	d146      	bne.n	8015ce2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8015c54:	f04f 0005 	mov.w	r0, #5
 8015c58:	8327      	strh	r7, [r4, #24]
 8015c5a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015c5e:	f80b 0008 	strb.w	r0, [fp, r8]
 8015c62:	ee17 0a90 	vmov	r0, s15
 8015c66:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c6a:	68e7      	ldr	r7, [r4, #12]
 8015c6c:	4408      	add	r0, r1
 8015c6e:	f108 0901 	add.w	r9, r8, #1
 8015c72:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c76:	ee07 0a90 	vmov	s15, r0
 8015c7a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015c7e:	ed87 5a00 	vstr	s10, [r7]
 8015c82:	ee05 2a10 	vmov	s10, r2
 8015c86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c8e:	68e7      	ldr	r7, [r4, #12]
 8015c90:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015c94:	f108 0901 	add.w	r9, r8, #1
 8015c98:	441a      	add	r2, r3
 8015c9a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015ca2:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015ca6:	ed87 5a00 	vstr	s10, [r7]
 8015caa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015cae:	68e7      	ldr	r7, [r4, #12]
 8015cb0:	f108 0901 	add.w	r9, r8, #1
 8015cb4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015cb8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015cbc:	edc7 7a00 	vstr	s15, [r7]
 8015cc0:	ee07 2a90 	vmov	s15, r2
 8015cc4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ccc:	68e7      	ldr	r7, [r4, #12]
 8015cce:	f108 0901 	add.w	r9, r8, #1
 8015cd2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015cd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015cda:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015cde:	edc7 7a00 	vstr	s15, [r7]
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	ee07 1a90 	vmov	s15, r1
 8015ce8:	e759      	b.n	8015b9e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8015cea:	f1ba 0f00 	cmp.w	sl, #0
 8015cee:	d045      	beq.n	8015d7c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015cf0:	ee05 1a90 	vmov	s11, r1
 8015cf4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015cf8:	eef4 5a66 	vcmp.f32	s11, s13
 8015cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d00:	d108      	bne.n	8015d14 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8015d02:	ee05 3a90 	vmov	s11, r3
 8015d06:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015d0a:	eef4 5a47 	vcmp.f32	s11, s14
 8015d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d12:	d033      	beq.n	8015d7c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015d14:	9b02      	ldr	r3, [sp, #8]
 8015d16:	8327      	strh	r7, [r4, #24]
 8015d18:	b1b3      	cbz	r3, 8015d48 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 8015d1a:	2302      	movs	r3, #2
 8015d1c:	f889 3000 	strb.w	r3, [r9]
 8015d20:	8b62      	ldrh	r2, [r4, #26]
 8015d22:	68e3      	ldr	r3, [r4, #12]
 8015d24:	1c51      	adds	r1, r2, #1
 8015d26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015d2a:	8361      	strh	r1, [r4, #26]
 8015d2c:	edc3 6a00 	vstr	s13, [r3]
 8015d30:	8b62      	ldrh	r2, [r4, #26]
 8015d32:	68e3      	ldr	r3, [r4, #12]
 8015d34:	1c51      	adds	r1, r2, #1
 8015d36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015d3a:	8361      	strh	r1, [r4, #26]
 8015d3c:	ed83 7a00 	vstr	s14, [r3]
 8015d40:	9800      	ldr	r0, [sp, #0]
 8015d42:	b007      	add	sp, #28
 8015d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d48:	2305      	movs	r3, #5
 8015d4a:	f889 3000 	strb.w	r3, [r9]
 8015d4e:	8b62      	ldrh	r2, [r4, #26]
 8015d50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015d54:	68e3      	ldr	r3, [r4, #12]
 8015d56:	ee07 ea90 	vmov	s15, lr
 8015d5a:	1c51      	adds	r1, r2, #1
 8015d5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d64:	8361      	strh	r1, [r4, #26]
 8015d66:	ed83 6a00 	vstr	s12, [r3]
 8015d6a:	8b62      	ldrh	r2, [r4, #26]
 8015d6c:	68e3      	ldr	r3, [r4, #12]
 8015d6e:	1c51      	adds	r1, r2, #1
 8015d70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015d74:	8361      	strh	r1, [r4, #26]
 8015d76:	edc3 7a00 	vstr	s15, [r3]
 8015d7a:	e7d1      	b.n	8015d20 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015d7c:	ee05 2a90 	vmov	s11, r2
 8015d80:	2305      	movs	r3, #5
 8015d82:	9902      	ldr	r1, [sp, #8]
 8015d84:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015d88:	8327      	strh	r7, [r4, #24]
 8015d8a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015d8e:	f889 3000 	strb.w	r3, [r9]
 8015d92:	b181      	cbz	r1, 8015db6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8015d94:	8b62      	ldrh	r2, [r4, #26]
 8015d96:	68e3      	ldr	r3, [r4, #12]
 8015d98:	1c51      	adds	r1, r2, #1
 8015d9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015d9e:	8361      	strh	r1, [r4, #26]
 8015da0:	ed83 5a00 	vstr	s10, [r3]
 8015da4:	8b62      	ldrh	r2, [r4, #26]
 8015da6:	68e3      	ldr	r3, [r4, #12]
 8015da8:	1c51      	adds	r1, r2, #1
 8015daa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015dae:	8361      	strh	r1, [r4, #26]
 8015db0:	edc3 5a00 	vstr	s11, [r3]
 8015db4:	e7b4      	b.n	8015d20 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015db6:	8b65      	ldrh	r5, [r4, #26]
 8015db8:	ee17 0a90 	vmov	r0, s15
 8015dbc:	68e1      	ldr	r1, [r4, #12]
 8015dbe:	4472      	add	r2, lr
 8015dc0:	1c6e      	adds	r6, r5, #1
 8015dc2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015dc6:	8366      	strh	r6, [r4, #26]
 8015dc8:	ed81 5a00 	vstr	s10, [r1]
 8015dcc:	8b65      	ldrh	r5, [r4, #26]
 8015dce:	68e1      	ldr	r1, [r4, #12]
 8015dd0:	1c6e      	adds	r6, r5, #1
 8015dd2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015dd6:	8366      	strh	r6, [r4, #26]
 8015dd8:	edc1 5a00 	vstr	s11, [r1]
 8015ddc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015de0:	8b65      	ldrh	r5, [r4, #26]
 8015de2:	68e1      	ldr	r1, [r4, #12]
 8015de4:	1c6e      	adds	r6, r5, #1
 8015de6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015dea:	ee16 5a10 	vmov	r5, s12
 8015dee:	8366      	strh	r6, [r4, #26]
 8015df0:	4428      	add	r0, r5
 8015df2:	ee07 0a90 	vmov	s15, r0
 8015df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dfa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015dfe:	edc1 7a00 	vstr	s15, [r1]
 8015e02:	ee07 2a90 	vmov	s15, r2
 8015e06:	8b61      	ldrh	r1, [r4, #26]
 8015e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e0c:	68e5      	ldr	r5, [r4, #12]
 8015e0e:	1c4e      	adds	r6, r1, #1
 8015e10:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8015e14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015e18:	8366      	strh	r6, [r4, #26]
 8015e1a:	edc1 7a00 	vstr	s15, [r1]
 8015e1e:	8b22      	ldrh	r2, [r4, #24]
 8015e20:	68a1      	ldr	r1, [r4, #8]
 8015e22:	1c55      	adds	r5, r2, #1
 8015e24:	8325      	strh	r5, [r4, #24]
 8015e26:	548b      	strb	r3, [r1, r2]
 8015e28:	e791      	b.n	8015d4e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

08015e2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8015e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e30:	4604      	mov	r4, r0
 8015e32:	b08e      	sub	sp, #56	@ 0x38
 8015e34:	4699      	mov	r9, r3
 8015e36:	4688      	mov	r8, r1
 8015e38:	4615      	mov	r5, r2
 8015e3a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8015e3c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8015e40:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015e42:	f7ed fdcb 	bl	80039dc <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8015e46:	6060      	str	r0, [r4, #4]
 8015e48:	f1b9 0f00 	cmp.w	r9, #0
 8015e4c:	f000 80e8 	beq.w	8016020 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	f000 80e5 	beq.w	8016020 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015e56:	a805      	add	r0, sp, #20
 8015e58:	f000 f8f9 	bl	801604e <_ZN8touchgfx9Matrix3x3C1Ev>
 8015e5c:	6833      	ldr	r3, [r6, #0]
 8015e5e:	4630      	mov	r0, r6
 8015e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e62:	4798      	blx	r3
 8015e64:	a805      	add	r0, sp, #20
 8015e66:	eef0 0a40 	vmov.f32	s1, s0
 8015e6a:	f000 f8f4 	bl	8016056 <_ZN8touchgfx9Matrix3x35scaleEff>
 8015e6e:	6860      	ldr	r0, [r4, #4]
 8015e70:	f1ba 0f03 	cmp.w	sl, #3
 8015e74:	d83b      	bhi.n	8015eee <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8015e76:	e8df f00a 	tbb	[pc, sl]
 8015e7a:	1002      	.short	0x1002
 8015e7c:	9f71      	.short	0x9f71
 8015e7e:	6803      	ldr	r3, [r0, #0]
 8015e80:	462a      	mov	r2, r5
 8015e82:	4641      	mov	r1, r8
 8015e84:	689b      	ldr	r3, [r3, #8]
 8015e86:	4798      	blx	r3
 8015e88:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015e8c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015e90:	ee07 7a90 	vmov	s15, r7
 8015e94:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015e98:	e026      	b.n	8015ee8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8015e9a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8015e9e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015ea2:	8869      	ldrh	r1, [r5, #2]
 8015ea4:	1a9b      	subs	r3, r3, r2
 8015ea6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015eaa:	aa03      	add	r2, sp, #12
 8015eac:	1a5b      	subs	r3, r3, r1
 8015eae:	4641      	mov	r1, r8
 8015eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015eb4:	882b      	ldrh	r3, [r5, #0]
 8015eb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015eba:	88ab      	ldrh	r3, [r5, #4]
 8015ebc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015ec0:	6803      	ldr	r3, [r0, #0]
 8015ec2:	689b      	ldr	r3, [r3, #8]
 8015ec4:	4798      	blx	r3
 8015ec6:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8016028 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8015eca:	a805      	add	r0, sp, #20
 8015ecc:	f000 f8e8 	bl	80160a0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015ed0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015ed4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015ed6:	ee07 7a90 	vmov	s15, r7
 8015eda:	1a9b      	subs	r3, r3, r2
 8015edc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015ee0:	ee00 3a10 	vmov	s0, r3
 8015ee4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015ee8:	a805      	add	r0, sp, #20
 8015eea:	f000 f927 	bl	801613c <_ZN8touchgfx9Matrix3x39translateEff>
 8015eee:	6860      	ldr	r0, [r4, #4]
 8015ef0:	a905      	add	r1, sp, #20
 8015ef2:	2500      	movs	r5, #0
 8015ef4:	f109 0602 	add.w	r6, r9, #2
 8015ef8:	6803      	ldr	r3, [r0, #0]
 8015efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015efc:	4798      	blx	r3
 8015efe:	6860      	ldr	r0, [r4, #4]
 8015f00:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015f02:	6803      	ldr	r3, [r0, #0]
 8015f04:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8015f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f0a:	4798      	blx	r3
 8015f0c:	6860      	ldr	r0, [r4, #4]
 8015f0e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f16:	4798      	blx	r3
 8015f18:	6860      	ldr	r0, [r4, #4]
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	6803      	ldr	r3, [r0, #0]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	4798      	blx	r3
 8015f22:	f8b9 7000 	ldrh.w	r7, [r9]
 8015f26:	f104 0310 	add.w	r3, r4, #16
 8015f2a:	61a5      	str	r5, [r4, #24]
 8015f2c:	f104 0208 	add.w	r2, r4, #8
 8015f30:	f104 0114 	add.w	r1, r4, #20
 8015f34:	f104 000c 	add.w	r0, r4, #12
 8015f38:	f7ee fab4 	bl	80044a4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8015f3c:	42af      	cmp	r7, r5
 8015f3e:	dd60      	ble.n	8016002 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8015f40:	8831      	ldrh	r1, [r6, #0]
 8015f42:	1cb2      	adds	r2, r6, #2
 8015f44:	4620      	mov	r0, r4
 8015f46:	3501      	adds	r5, #1
 8015f48:	f101 030f 	add.w	r3, r1, #15
 8015f4c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8015f50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015f54:	f7ff fda2 	bl	8015a9c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8015f58:	4606      	mov	r6, r0
 8015f5a:	e7ef      	b.n	8015f3c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8015f5c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015f60:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015f64:	8829      	ldrh	r1, [r5, #0]
 8015f66:	1a9b      	subs	r3, r3, r2
 8015f68:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015f6c:	aa03      	add	r2, sp, #12
 8015f6e:	1a5b      	subs	r3, r3, r1
 8015f70:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015f74:	886d      	ldrh	r5, [r5, #2]
 8015f76:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015f7a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015f7e:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015f82:	1a5b      	subs	r3, r3, r1
 8015f84:	4641      	mov	r1, r8
 8015f86:	1b5b      	subs	r3, r3, r5
 8015f88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015f8c:	6803      	ldr	r3, [r0, #0]
 8015f8e:	689b      	ldr	r3, [r3, #8]
 8015f90:	4798      	blx	r3
 8015f92:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801602c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8015f96:	a805      	add	r0, sp, #20
 8015f98:	f000 f882 	bl	80160a0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015f9c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015fa0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015fa2:	1a9b      	subs	r3, r3, r2
 8015fa4:	ee00 3a90 	vmov	s1, r3
 8015fa8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015fac:	1bdb      	subs	r3, r3, r7
 8015fae:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015fb2:	ee00 3a10 	vmov	s0, r3
 8015fb6:	e795      	b.n	8015ee4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8015fb8:	886b      	ldrh	r3, [r5, #2]
 8015fba:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015fbe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fc2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015fc6:	8829      	ldrh	r1, [r5, #0]
 8015fc8:	1a9b      	subs	r3, r3, r2
 8015fca:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015fce:	aa03      	add	r2, sp, #12
 8015fd0:	1a5b      	subs	r3, r3, r1
 8015fd2:	4641      	mov	r1, r8
 8015fd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fd8:	88eb      	ldrh	r3, [r5, #6]
 8015fda:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	689b      	ldr	r3, [r3, #8]
 8015fe2:	4798      	blx	r3
 8015fe4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8016030 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8015fe8:	a805      	add	r0, sp, #20
 8015fea:	f000 f859 	bl	80160a0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015fee:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015ff2:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015ff6:	1bdb      	subs	r3, r3, r7
 8015ff8:	ee00 3a90 	vmov	s1, r3
 8015ffc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8016000:	e748      	b.n	8015e94 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8016002:	6860      	ldr	r0, [r4, #4]
 8016004:	2100      	movs	r1, #0
 8016006:	8b22      	ldrh	r2, [r4, #24]
 8016008:	6803      	ldr	r3, [r0, #0]
 801600a:	9101      	str	r1, [sp, #4]
 801600c:	8b61      	ldrh	r1, [r4, #26]
 801600e:	9100      	str	r1, [sp, #0]
 8016010:	6a1d      	ldr	r5, [r3, #32]
 8016012:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8016016:	47a8      	blx	r5
 8016018:	6860      	ldr	r0, [r4, #4]
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	69db      	ldr	r3, [r3, #28]
 801601e:	4798      	blx	r3
 8016020:	b00e      	add	sp, #56	@ 0x38
 8016022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016026:	bf00      	nop
 8016028:	42b40000 	.word	0x42b40000
 801602c:	43340000 	.word	0x43340000
 8016030:	43870000 	.word	0x43870000

08016034 <_ZN8touchgfx9Matrix3x35resetEv>:
 8016034:	2300      	movs	r3, #0
 8016036:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801603a:	6043      	str	r3, [r0, #4]
 801603c:	6002      	str	r2, [r0, #0]
 801603e:	6083      	str	r3, [r0, #8]
 8016040:	60c3      	str	r3, [r0, #12]
 8016042:	6102      	str	r2, [r0, #16]
 8016044:	6143      	str	r3, [r0, #20]
 8016046:	6183      	str	r3, [r0, #24]
 8016048:	61c3      	str	r3, [r0, #28]
 801604a:	6202      	str	r2, [r0, #32]
 801604c:	4770      	bx	lr

0801604e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801604e:	b508      	push	{r3, lr}
 8016050:	f7ff fff0 	bl	8016034 <_ZN8touchgfx9Matrix3x35resetEv>
 8016054:	bd08      	pop	{r3, pc}

08016056 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8016056:	edd0 7a00 	vldr	s15, [r0]
 801605a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801605e:	edc0 7a00 	vstr	s15, [r0]
 8016062:	edd0 7a01 	vldr	s15, [r0, #4]
 8016066:	ee67 7a80 	vmul.f32	s15, s15, s0
 801606a:	edc0 7a01 	vstr	s15, [r0, #4]
 801606e:	edd0 7a02 	vldr	s15, [r0, #8]
 8016072:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016076:	edd0 7a03 	vldr	s15, [r0, #12]
 801607a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801607e:	ed80 0a02 	vstr	s0, [r0, #8]
 8016082:	edc0 7a03 	vstr	s15, [r0, #12]
 8016086:	edd0 7a04 	vldr	s15, [r0, #16]
 801608a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801608e:	edc0 7a04 	vstr	s15, [r0, #16]
 8016092:	edd0 7a05 	vldr	s15, [r0, #20]
 8016096:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801609a:	edc0 0a05 	vstr	s1, [r0, #20]
 801609e:	4770      	bx	lr

080160a0 <_ZN8touchgfx9Matrix3x36rotateEf>:
 80160a0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8016134 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 80160a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80160a8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8016138 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 80160ac:	b510      	push	{r4, lr}
 80160ae:	ed2d 8b02 	vpush	{d8}
 80160b2:	eec0 8a27 	vdiv.f32	s17, s0, s15
 80160b6:	4604      	mov	r4, r0
 80160b8:	eeb0 0a68 	vmov.f32	s0, s17
 80160bc:	f00e f8a8 	bl	8024210 <cosf>
 80160c0:	eeb0 8a40 	vmov.f32	s16, s0
 80160c4:	eeb0 0a68 	vmov.f32	s0, s17
 80160c8:	f00d ffde 	bl	8024088 <sinf>
 80160cc:	edd4 6a03 	vldr	s13, [r4, #12]
 80160d0:	edd4 4a00 	vldr	s9, [r4]
 80160d4:	ee60 7a66 	vnmul.f32	s15, s0, s13
 80160d8:	ed94 7a04 	vldr	s14, [r4, #16]
 80160dc:	ed94 5a01 	vldr	s10, [r4, #4]
 80160e0:	ee66 6a88 	vmul.f32	s13, s13, s16
 80160e4:	edd4 5a02 	vldr	s11, [r4, #8]
 80160e8:	eee8 7a24 	vfma.f32	s15, s16, s9
 80160ec:	eee0 6a24 	vfma.f32	s13, s0, s9
 80160f0:	edc4 7a00 	vstr	s15, [r4]
 80160f4:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80160f8:	ee27 7a08 	vmul.f32	s14, s14, s16
 80160fc:	edc4 6a03 	vstr	s13, [r4, #12]
 8016100:	eee8 7a05 	vfma.f32	s15, s16, s10
 8016104:	eea0 7a05 	vfma.f32	s14, s0, s10
 8016108:	edc4 7a01 	vstr	s15, [r4, #4]
 801610c:	edd4 7a05 	vldr	s15, [r4, #20]
 8016110:	ed84 7a04 	vstr	s14, [r4, #16]
 8016114:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8016118:	ee67 7a88 	vmul.f32	s15, s15, s16
 801611c:	eea8 6a25 	vfma.f32	s12, s16, s11
 8016120:	eee0 7a25 	vfma.f32	s15, s0, s11
 8016124:	ecbd 8b02 	vpop	{d8}
 8016128:	ed84 6a02 	vstr	s12, [r4, #8]
 801612c:	edc4 7a05 	vstr	s15, [r4, #20]
 8016130:	bd10      	pop	{r4, pc}
 8016132:	bf00      	nop
 8016134:	40490fdb 	.word	0x40490fdb
 8016138:	43340000 	.word	0x43340000

0801613c <_ZN8touchgfx9Matrix3x39translateEff>:
 801613c:	ed90 6a06 	vldr	s12, [r0, #24]
 8016140:	edd0 7a00 	vldr	s15, [r0]
 8016144:	edd0 6a07 	vldr	s13, [r0, #28]
 8016148:	eee6 7a00 	vfma.f32	s15, s12, s0
 801614c:	ed90 7a08 	vldr	s14, [r0, #32]
 8016150:	edc0 7a00 	vstr	s15, [r0]
 8016154:	edd0 7a01 	vldr	s15, [r0, #4]
 8016158:	eee6 7a80 	vfma.f32	s15, s13, s0
 801615c:	edc0 7a01 	vstr	s15, [r0, #4]
 8016160:	edd0 7a02 	vldr	s15, [r0, #8]
 8016164:	eee7 7a00 	vfma.f32	s15, s14, s0
 8016168:	edc0 7a02 	vstr	s15, [r0, #8]
 801616c:	edd0 7a03 	vldr	s15, [r0, #12]
 8016170:	eee6 7a20 	vfma.f32	s15, s12, s1
 8016174:	edc0 7a03 	vstr	s15, [r0, #12]
 8016178:	edd0 7a04 	vldr	s15, [r0, #16]
 801617c:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8016180:	edc0 7a04 	vstr	s15, [r0, #16]
 8016184:	edd0 7a05 	vldr	s15, [r0, #20]
 8016188:	eee7 7a20 	vfma.f32	s15, s14, s1
 801618c:	edc0 7a05 	vstr	s15, [r0, #20]
 8016190:	4770      	bx	lr

08016192 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8016192:	edd0 6a01 	vldr	s13, [r0, #4]
 8016196:	b084      	sub	sp, #16
 8016198:	edd0 7a04 	vldr	s15, [r0, #16]
 801619c:	ed90 7a03 	vldr	s14, [r0, #12]
 80161a0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80161a4:	ee60 0aa6 	vmul.f32	s1, s1, s13
 80161a8:	edd0 6a00 	vldr	s13, [r0]
 80161ac:	eee7 7a00 	vfma.f32	s15, s14, s0
 80161b0:	ed90 7a05 	vldr	s14, [r0, #20]
 80161b4:	eee6 0a80 	vfma.f32	s1, s13, s0
 80161b8:	ed90 0a02 	vldr	s0, [r0, #8]
 80161bc:	ee30 0a80 	vadd.f32	s0, s1, s0
 80161c0:	ee77 0a87 	vadd.f32	s1, s15, s14
 80161c4:	b004      	add	sp, #16
 80161c6:	4770      	bx	lr

080161c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80161c8:	b530      	push	{r4, r5, lr}
 80161ca:	8083      	strh	r3, [r0, #4]
 80161cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80161d0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80161d4:	80c3      	strh	r3, [r0, #6]
 80161d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80161da:	6141      	str	r1, [r0, #20]
 80161dc:	7203      	strb	r3, [r0, #8]
 80161de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80161e2:	8302      	strh	r2, [r0, #24]
 80161e4:	7243      	strb	r3, [r0, #9]
 80161e6:	7a83      	ldrb	r3, [r0, #10]
 80161e8:	f365 0306 	bfi	r3, r5, #0, #7
 80161ec:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80161f0:	f365 13c7 	bfi	r3, r5, #7, #1
 80161f4:	7283      	strb	r3, [r0, #10]
 80161f6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80161fa:	72c3      	strb	r3, [r0, #11]
 80161fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016200:	7303      	strb	r3, [r0, #12]
 8016202:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8016206:	81c3      	strh	r3, [r0, #14]
 8016208:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801620c:	8203      	strh	r3, [r0, #16]
 801620e:	4b01      	ldr	r3, [pc, #4]	@ (8016214 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016210:	6003      	str	r3, [r0, #0]
 8016212:	bd30      	pop	{r4, r5, pc}
 8016214:	08028a20 	.word	0x08028a20

08016218 <_ZNK8touchgfx9ConstFont4findEt>:
 8016218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801621a:	6944      	ldr	r4, [r0, #20]
 801621c:	b3bc      	cbz	r4, 801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801621e:	88a3      	ldrh	r3, [r4, #4]
 8016220:	8b02      	ldrh	r2, [r0, #24]
 8016222:	1acb      	subs	r3, r1, r3
 8016224:	f102 32ff 	add.w	r2, r2, #4294967295
 8016228:	d431      	bmi.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801622a:	4293      	cmp	r3, r2
 801622c:	dd0c      	ble.n	8016248 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801622e:	230e      	movs	r3, #14
 8016230:	fb03 4302 	mla	r3, r3, r2, r4
 8016234:	889b      	ldrh	r3, [r3, #4]
 8016236:	1a5b      	subs	r3, r3, r1
 8016238:	1ad3      	subs	r3, r2, r3
 801623a:	429a      	cmp	r2, r3
 801623c:	db27      	blt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801623e:	2b00      	cmp	r3, #0
 8016240:	bfbc      	itt	lt
 8016242:	2302      	movlt	r3, #2
 8016244:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016248:	2500      	movs	r5, #0
 801624a:	260e      	movs	r6, #14
 801624c:	4295      	cmp	r5, r2
 801624e:	dc1e      	bgt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016250:	fb06 4003 	mla	r0, r6, r3, r4
 8016254:	8887      	ldrh	r7, [r0, #4]
 8016256:	42b9      	cmp	r1, r7
 8016258:	d01a      	beq.n	8016290 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801625a:	d20d      	bcs.n	8016278 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801625c:	1e5a      	subs	r2, r3, #1
 801625e:	4295      	cmp	r5, r2
 8016260:	dc15      	bgt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016262:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016266:	1a5b      	subs	r3, r3, r1
 8016268:	1ad3      	subs	r3, r2, r3
 801626a:	429a      	cmp	r2, r3
 801626c:	db0f      	blt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801626e:	429d      	cmp	r5, r3
 8016270:	ddec      	ble.n	801624c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016272:	1953      	adds	r3, r2, r5
 8016274:	105b      	asrs	r3, r3, #1
 8016276:	e7e9      	b.n	801624c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016278:	1c5d      	adds	r5, r3, #1
 801627a:	42aa      	cmp	r2, r5
 801627c:	db07      	blt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801627e:	8a43      	ldrh	r3, [r0, #18]
 8016280:	1acb      	subs	r3, r1, r3
 8016282:	442b      	add	r3, r5
 8016284:	429d      	cmp	r5, r3
 8016286:	dc02      	bgt.n	801628e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016288:	429a      	cmp	r2, r3
 801628a:	dadf      	bge.n	801624c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801628c:	e7f1      	b.n	8016272 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801628e:	2000      	movs	r0, #0
 8016290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016292 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016294:	4604      	mov	r4, r0
 8016296:	4617      	mov	r7, r2
 8016298:	461e      	mov	r6, r3
 801629a:	b911      	cbnz	r1, 80162a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801629c:	2500      	movs	r5, #0
 801629e:	4628      	mov	r0, r5
 80162a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162a2:	290a      	cmp	r1, #10
 80162a4:	d0fa      	beq.n	801629c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80162a6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80162aa:	4291      	cmp	r1, r2
 80162ac:	d0f6      	beq.n	801629c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80162ae:	f242 020b 	movw	r2, #8203	@ 0x200b
 80162b2:	4291      	cmp	r1, r2
 80162b4:	d0f2      	beq.n	801629c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80162b6:	f7ff ffaf 	bl	8016218 <_ZNK8touchgfx9ConstFont4findEt>
 80162ba:	4605      	mov	r5, r0
 80162bc:	b950      	cbnz	r0, 80162d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80162be:	6823      	ldr	r3, [r4, #0]
 80162c0:	4620      	mov	r0, r4
 80162c2:	691b      	ldr	r3, [r3, #16]
 80162c4:	4798      	blx	r3
 80162c6:	4601      	mov	r1, r0
 80162c8:	4620      	mov	r0, r4
 80162ca:	f7ff ffa5 	bl	8016218 <_ZNK8touchgfx9ConstFont4findEt>
 80162ce:	4605      	mov	r5, r0
 80162d0:	2800      	cmp	r0, #0
 80162d2:	d0e3      	beq.n	801629c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	4629      	mov	r1, r5
 80162d8:	4620      	mov	r0, r4
 80162da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80162dc:	4798      	blx	r3
 80162de:	6038      	str	r0, [r7, #0]
 80162e0:	6823      	ldr	r3, [r4, #0]
 80162e2:	4620      	mov	r0, r4
 80162e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162e6:	4798      	blx	r3
 80162e8:	7030      	strb	r0, [r6, #0]
 80162ea:	e7d8      	b.n	801629e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080162ec <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80162ec:	b538      	push	{r3, r4, r5, lr}
 80162ee:	4605      	mov	r5, r0
 80162f0:	f001 fdfe 	bl	8017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80162f4:	4604      	mov	r4, r0
 80162f6:	4628      	mov	r0, r5
 80162f8:	f001 fd3e 	bl	8017d78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	bf14      	ite	ne
 8016300:	2002      	movne	r0, #2
 8016302:	2000      	moveq	r0, #0
 8016304:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8016308:	b280      	uxth	r0, r0
 801630a:	bd38      	pop	{r3, r4, r5, pc}

0801630c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801630c:	b538      	push	{r3, r4, r5, lr}
 801630e:	4605      	mov	r5, r0
 8016310:	f001 fdee 	bl	8017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016314:	4604      	mov	r4, r0
 8016316:	4628      	mov	r0, r5
 8016318:	f001 fd2e 	bl	8017d78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801631c:	2800      	cmp	r0, #0
 801631e:	bf14      	ite	ne
 8016320:	2002      	movne	r0, #2
 8016322:	2000      	moveq	r0, #0
 8016324:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8016328:	f040 0001 	orr.w	r0, r0, #1
 801632c:	b280      	uxth	r0, r0
 801632e:	bd38      	pop	{r3, r4, r5, pc}

08016330 <_ZN8touchgfx4clzuEm>:
 8016330:	4603      	mov	r3, r0
 8016332:	b1c8      	cbz	r0, 8016368 <_ZN8touchgfx4clzuEm+0x38>
 8016334:	0c02      	lsrs	r2, r0, #16
 8016336:	0412      	lsls	r2, r2, #16
 8016338:	b9a2      	cbnz	r2, 8016364 <_ZN8touchgfx4clzuEm+0x34>
 801633a:	0403      	lsls	r3, r0, #16
 801633c:	2010      	movs	r0, #16
 801633e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016342:	bf04      	itt	eq
 8016344:	021b      	lsleq	r3, r3, #8
 8016346:	3008      	addeq	r0, #8
 8016348:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801634c:	bf04      	itt	eq
 801634e:	011b      	lsleq	r3, r3, #4
 8016350:	3004      	addeq	r0, #4
 8016352:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016356:	bf04      	itt	eq
 8016358:	009b      	lsleq	r3, r3, #2
 801635a:	3002      	addeq	r0, #2
 801635c:	2b00      	cmp	r3, #0
 801635e:	db04      	blt.n	801636a <_ZN8touchgfx4clzuEm+0x3a>
 8016360:	3001      	adds	r0, #1
 8016362:	4770      	bx	lr
 8016364:	2000      	movs	r0, #0
 8016366:	e7ea      	b.n	801633e <_ZN8touchgfx4clzuEm+0xe>
 8016368:	2020      	movs	r0, #32
 801636a:	4770      	bx	lr

0801636c <_ZN8touchgfx7muldivuEmmmRm>:
 801636c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016370:	460f      	mov	r7, r1
 8016372:	4615      	mov	r5, r2
 8016374:	461e      	mov	r6, r3
 8016376:	4601      	mov	r1, r0
 8016378:	b100      	cbz	r0, 801637c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801637a:	b927      	cbnz	r7, 8016386 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801637c:	2000      	movs	r0, #0
 801637e:	6030      	str	r0, [r6, #0]
 8016380:	b002      	add	sp, #8
 8016382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016386:	f7ff ffd3 	bl	8016330 <_ZN8touchgfx4clzuEm>
 801638a:	b980      	cbnz	r0, 80163ae <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801638c:	4638      	mov	r0, r7
 801638e:	f7ff ffcf 	bl	8016330 <_ZN8touchgfx4clzuEm>
 8016392:	2800      	cmp	r0, #0
 8016394:	dd05      	ble.n	80163a2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8016396:	4633      	mov	r3, r6
 8016398:	462a      	mov	r2, r5
 801639a:	4638      	mov	r0, r7
 801639c:	f7ff ffe6 	bl	801636c <_ZN8touchgfx7muldivuEmmmRm>
 80163a0:	e7ee      	b.n	8016380 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80163a2:	f04f 33ff 	mov.w	r3, #4294967295
 80163a6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80163aa:	6033      	str	r3, [r6, #0]
 80163ac:	e7e8      	b.n	8016380 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80163ae:	fa37 f800 	lsrs.w	r8, r7, r0
 80163b2:	fb07 f301 	mul.w	r3, r7, r1
 80163b6:	d105      	bne.n	80163c4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80163b8:	fbb3 f0f5 	udiv	r0, r3, r5
 80163bc:	fb05 3510 	mls	r5, r5, r0, r3
 80163c0:	6035      	str	r5, [r6, #0]
 80163c2:	e7dd      	b.n	8016380 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80163c4:	2301      	movs	r3, #1
 80163c6:	fa01 fa00 	lsl.w	sl, r1, r0
 80163ca:	462a      	mov	r2, r5
 80163cc:	fa03 f000 	lsl.w	r0, r3, r0
 80163d0:	4633      	mov	r3, r6
 80163d2:	fbba f9f5 	udiv	r9, sl, r5
 80163d6:	3801      	subs	r0, #1
 80163d8:	fb08 f409 	mul.w	r4, r8, r9
 80163dc:	4038      	ands	r0, r7
 80163de:	f7ff ffc5 	bl	801636c <_ZN8touchgfx7muldivuEmmmRm>
 80163e2:	462a      	mov	r2, r5
 80163e4:	4607      	mov	r7, r0
 80163e6:	ab01      	add	r3, sp, #4
 80163e8:	fb05 a119 	mls	r1, r5, r9, sl
 80163ec:	4640      	mov	r0, r8
 80163ee:	f7ff ffbd 	bl	801636c <_ZN8touchgfx7muldivuEmmmRm>
 80163f2:	9b01      	ldr	r3, [sp, #4]
 80163f4:	6832      	ldr	r2, [r6, #0]
 80163f6:	441a      	add	r2, r3
 80163f8:	fbb2 f3f5 	udiv	r3, r2, r5
 80163fc:	441c      	add	r4, r3
 80163fe:	fb05 2513 	mls	r5, r5, r3, r2
 8016402:	443c      	add	r4, r7
 8016404:	4420      	add	r0, r4
 8016406:	e7db      	b.n	80163c0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08016408 <_ZN8touchgfx6muldivElllRl>:
 8016408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801640a:	2800      	cmp	r0, #0
 801640c:	461e      	mov	r6, r3
 801640e:	bfba      	itte	lt
 8016410:	4240      	neglt	r0, r0
 8016412:	f04f 34ff 	movlt.w	r4, #4294967295
 8016416:	2401      	movge	r4, #1
 8016418:	2900      	cmp	r1, #0
 801641a:	bfbc      	itt	lt
 801641c:	4249      	neglt	r1, r1
 801641e:	4264      	neglt	r4, r4
 8016420:	2a00      	cmp	r2, #0
 8016422:	bfb6      	itet	lt
 8016424:	4265      	neglt	r5, r4
 8016426:	4625      	movge	r5, r4
 8016428:	4252      	neglt	r2, r2
 801642a:	4288      	cmp	r0, r1
 801642c:	bfc2      	ittt	gt
 801642e:	4603      	movgt	r3, r0
 8016430:	4608      	movgt	r0, r1
 8016432:	4619      	movgt	r1, r3
 8016434:	ab01      	add	r3, sp, #4
 8016436:	f7ff ff99 	bl	801636c <_ZN8touchgfx7muldivuEmmmRm>
 801643a:	9b01      	ldr	r3, [sp, #4]
 801643c:	4368      	muls	r0, r5
 801643e:	435c      	muls	r4, r3
 8016440:	6034      	str	r4, [r6, #0]
 8016442:	b002      	add	sp, #8
 8016444:	bd70      	pop	{r4, r5, r6, pc}

08016446 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016446:	2000      	movs	r0, #0
 8016448:	4770      	bx	lr

0801644a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801644a:	2001      	movs	r0, #1
 801644c:	4770      	bx	lr

0801644e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801644e:	2002      	movs	r0, #2
 8016450:	4770      	bx	lr

08016452 <_ZN8touchgfx6ScreenD1Ev>:
 8016452:	4770      	bx	lr

08016454 <_ZN8touchgfx12GestureEventD1Ev>:
 8016454:	4770      	bx	lr

08016456 <_ZN8touchgfx9DragEventD1Ev>:
 8016456:	4770      	bx	lr

08016458 <_ZN8touchgfx10ClickEventD1Ev>:
 8016458:	4770      	bx	lr

0801645a <_ZN8touchgfx10ClickEventD0Ev>:
 801645a:	b510      	push	{r4, lr}
 801645c:	4604      	mov	r4, r0
 801645e:	210c      	movs	r1, #12
 8016460:	f00d fd9d 	bl	8023f9e <_ZdlPvj>
 8016464:	4620      	mov	r0, r4
 8016466:	bd10      	pop	{r4, pc}

08016468 <_ZN8touchgfx9DragEventD0Ev>:
 8016468:	b510      	push	{r4, lr}
 801646a:	4604      	mov	r4, r0
 801646c:	2110      	movs	r1, #16
 801646e:	f00d fd96 	bl	8023f9e <_ZdlPvj>
 8016472:	4620      	mov	r0, r4
 8016474:	bd10      	pop	{r4, pc}

08016476 <_ZN8touchgfx12GestureEventD0Ev>:
 8016476:	b510      	push	{r4, lr}
 8016478:	4604      	mov	r4, r0
 801647a:	210c      	movs	r1, #12
 801647c:	f00d fd8f 	bl	8023f9e <_ZdlPvj>
 8016480:	4620      	mov	r0, r4
 8016482:	bd10      	pop	{r4, pc}

08016484 <_ZN8touchgfx6ScreenD0Ev>:
 8016484:	b510      	push	{r4, lr}
 8016486:	4604      	mov	r4, r0
 8016488:	213c      	movs	r1, #60	@ 0x3c
 801648a:	f00d fd88 	bl	8023f9e <_ZdlPvj>
 801648e:	4620      	mov	r0, r4
 8016490:	bd10      	pop	{r4, pc}
	...

08016494 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016494:	b530      	push	{r4, r5, lr}
 8016496:	460d      	mov	r5, r1
 8016498:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801649a:	b087      	sub	sp, #28
 801649c:	4604      	mov	r4, r0
 801649e:	b301      	cbz	r1, 80164e2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80164a0:	a801      	add	r0, sp, #4
 80164a2:	f7ff fad5 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164a6:	892a      	ldrh	r2, [r5, #8]
 80164a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80164ac:	7928      	ldrb	r0, [r5, #4]
 80164ae:	1ad2      	subs	r2, r2, r3
 80164b0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80164b2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80164b6:	441a      	add	r2, r3
 80164b8:	896b      	ldrh	r3, [r5, #10]
 80164ba:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80164be:	f88d 0010 	strb.w	r0, [sp, #16]
 80164c2:	1b5b      	subs	r3, r3, r5
 80164c4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80164c6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80164c8:	442b      	add	r3, r5
 80164ca:	4d07      	ldr	r5, [pc, #28]	@ (80164e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80164cc:	f8ad 1012 	strh.w	r1, [sp, #18]
 80164d0:	a903      	add	r1, sp, #12
 80164d2:	9503      	str	r5, [sp, #12]
 80164d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80164d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164dc:	6803      	ldr	r3, [r0, #0]
 80164de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80164e0:	4798      	blx	r3
 80164e2:	b007      	add	sp, #28
 80164e4:	bd30      	pop	{r4, r5, pc}
 80164e6:	bf00      	nop
 80164e8:	08028ab0 	.word	0x08028ab0

080164ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80164ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80164f2:	b08a      	sub	sp, #40	@ 0x28
 80164f4:	4604      	mov	r4, r0
 80164f6:	460d      	mov	r5, r1
 80164f8:	b113      	cbz	r3, 8016500 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80164fa:	790b      	ldrb	r3, [r1, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d044      	beq.n	801658a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016500:	f104 0804 	add.w	r8, r4, #4
 8016504:	a803      	add	r0, sp, #12
 8016506:	4641      	mov	r1, r8
 8016508:	f7ff faa2 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801650c:	792b      	ldrb	r3, [r5, #4]
 801650e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016512:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016516:	b983      	cbnz	r3, 801653a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016518:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801651c:	892a      	ldrh	r2, [r5, #8]
 801651e:	88e9      	ldrh	r1, [r5, #6]
 8016520:	4640      	mov	r0, r8
 8016522:	1b92      	subs	r2, r2, r6
 8016524:	9301      	str	r3, [sp, #4]
 8016526:	1bc9      	subs	r1, r1, r7
 8016528:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801652c:	b212      	sxth	r2, r2
 801652e:	9300      	str	r3, [sp, #0]
 8016530:	b209      	sxth	r1, r1
 8016532:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8016536:	f7f9 f86f 	bl	800f618 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801653a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801653c:	b329      	cbz	r1, 801658a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801653e:	a805      	add	r0, sp, #20
 8016540:	f7ff fa86 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016544:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016548:	792b      	ldrb	r3, [r5, #4]
 801654a:	a907      	add	r1, sp, #28
 801654c:	1abf      	subs	r7, r7, r2
 801654e:	88ea      	ldrh	r2, [r5, #6]
 8016550:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016552:	4417      	add	r7, r2
 8016554:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8016556:	f88d 3020 	strb.w	r3, [sp, #32]
 801655a:	4417      	add	r7, r2
 801655c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016560:	1ab6      	subs	r6, r6, r2
 8016562:	892a      	ldrh	r2, [r5, #8]
 8016564:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8016568:	4416      	add	r6, r2
 801656a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801656c:	4416      	add	r6, r2
 801656e:	4a08      	ldr	r2, [pc, #32]	@ (8016590 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016570:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8016574:	2600      	movs	r6, #0
 8016576:	9207      	str	r2, [sp, #28]
 8016578:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801657c:	6803      	ldr	r3, [r0, #0]
 801657e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016580:	4798      	blx	r3
 8016582:	792b      	ldrb	r3, [r5, #4]
 8016584:	b10b      	cbz	r3, 801658a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016586:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801658a:	b00a      	add	sp, #40	@ 0x28
 801658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016590:	08028a88 	.word	0x08028a88

08016594 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016598:	460c      	mov	r4, r1
 801659a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801659c:	b088      	sub	sp, #32
 801659e:	4605      	mov	r5, r0
 80165a0:	2900      	cmp	r1, #0
 80165a2:	d06d      	beq.n	8016680 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80165a4:	4668      	mov	r0, sp
 80165a6:	f7ff fa53 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165aa:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80165ac:	88e3      	ldrh	r3, [r4, #6]
 80165ae:	f9bd 8000 	ldrsh.w	r8, [sp]
 80165b2:	440b      	add	r3, r1
 80165b4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80165b8:	b21b      	sxth	r3, r3
 80165ba:	4543      	cmp	r3, r8
 80165bc:	db31      	blt.n	8016622 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165be:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80165c2:	44c4      	add	ip, r8
 80165c4:	fa0f fc8c 	sxth.w	ip, ip
 80165c8:	4563      	cmp	r3, ip
 80165ca:	da2a      	bge.n	8016622 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165cc:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80165ce:	8926      	ldrh	r6, [r4, #8]
 80165d0:	4416      	add	r6, r2
 80165d2:	b236      	sxth	r6, r6
 80165d4:	42be      	cmp	r6, r7
 80165d6:	db24      	blt.n	8016622 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80165dc:	4438      	add	r0, r7
 80165de:	b200      	sxth	r0, r0
 80165e0:	4286      	cmp	r6, r0
 80165e2:	da1e      	bge.n	8016622 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165e4:	8963      	ldrh	r3, [r4, #10]
 80165e6:	4419      	add	r1, r3
 80165e8:	b209      	sxth	r1, r1
 80165ea:	4541      	cmp	r1, r8
 80165ec:	db08      	blt.n	8016600 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165ee:	4561      	cmp	r1, ip
 80165f0:	da06      	bge.n	8016600 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165f2:	89a3      	ldrh	r3, [r4, #12]
 80165f4:	441a      	add	r2, r3
 80165f6:	b212      	sxth	r2, r2
 80165f8:	42ba      	cmp	r2, r7
 80165fa:	db01      	blt.n	8016600 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165fc:	4282      	cmp	r2, r0
 80165fe:	db10      	blt.n	8016622 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016600:	4b21      	ldr	r3, [pc, #132]	@ (8016688 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016602:	a904      	add	r1, sp, #16
 8016604:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016606:	9304      	str	r3, [sp, #16]
 8016608:	2302      	movs	r3, #2
 801660a:	f88d 3014 	strb.w	r3, [sp, #20]
 801660e:	2300      	movs	r3, #0
 8016610:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016614:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016618:	f8ad 301a 	strh.w	r3, [sp, #26]
 801661c:	6803      	ldr	r3, [r0, #0]
 801661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016620:	4798      	blx	r3
 8016622:	1d29      	adds	r1, r5, #4
 8016624:	a802      	add	r0, sp, #8
 8016626:	f7ff fa13 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801662a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801662e:	88e0      	ldrh	r0, [r4, #6]
 8016630:	eba3 0808 	sub.w	r8, r3, r8
 8016634:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016638:	7921      	ldrb	r1, [r4, #4]
 801663a:	fa1f f888 	uxth.w	r8, r8
 801663e:	1bdf      	subs	r7, r3, r7
 8016640:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8016644:	b2bb      	uxth	r3, r7
 8016646:	4440      	add	r0, r8
 8016648:	8922      	ldrh	r2, [r4, #8]
 801664a:	8967      	ldrh	r7, [r4, #10]
 801664c:	4460      	add	r0, ip
 801664e:	89a4      	ldrh	r4, [r4, #12]
 8016650:	441a      	add	r2, r3
 8016652:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8016654:	44b8      	add	r8, r7
 8016656:	4423      	add	r3, r4
 8016658:	f8ad 0016 	strh.w	r0, [sp, #22]
 801665c:	4432      	add	r2, r6
 801665e:	44e0      	add	r8, ip
 8016660:	4433      	add	r3, r6
 8016662:	4c0a      	ldr	r4, [pc, #40]	@ (801668c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016664:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016666:	f88d 1014 	strb.w	r1, [sp, #20]
 801666a:	a904      	add	r1, sp, #16
 801666c:	9404      	str	r4, [sp, #16]
 801666e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016672:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016676:	f8ad 301c 	strh.w	r3, [sp, #28]
 801667a:	6803      	ldr	r3, [r0, #0]
 801667c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801667e:	4798      	blx	r3
 8016680:	b008      	add	sp, #32
 8016682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016686:	bf00      	nop
 8016688:	08028a88 	.word	0x08028a88
 801668c:	08028a9c 	.word	0x08028a9c

08016690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016692:	4604      	mov	r4, r0
 8016694:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016698:	3201      	adds	r2, #1
 801669a:	d112      	bne.n	80166c2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801669c:	2500      	movs	r5, #0
 801669e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80166a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80166a6:	6803      	ldr	r3, [r0, #0]
 80166a8:	9500      	str	r5, [sp, #0]
 80166aa:	466d      	mov	r5, sp
 80166ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80166b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80166b4:	4629      	mov	r1, r5
 80166b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166b8:	4798      	blx	r3
 80166ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166be:	e884 0003 	stmia.w	r4, {r0, r1}
 80166c2:	4620      	mov	r0, r4
 80166c4:	b003      	add	sp, #12
 80166c6:	bd30      	pop	{r4, r5, pc}

080166c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80166c8:	b513      	push	{r0, r1, r4, lr}
 80166ca:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80166ce:	4604      	mov	r4, r0
 80166d0:	3301      	adds	r3, #1
 80166d2:	d109      	bne.n	80166e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80166d4:	4601      	mov	r1, r0
 80166d6:	4668      	mov	r0, sp
 80166d8:	f7ff f9ba 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80166e0:	8423      	strh	r3, [r4, #32]
 80166e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166e6:	8463      	strh	r3, [r4, #34]	@ 0x22
 80166e8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80166ec:	b002      	add	sp, #8
 80166ee:	bd10      	pop	{r4, pc}

080166f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80166f0:	b513      	push	{r0, r1, r4, lr}
 80166f2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80166f6:	4604      	mov	r4, r0
 80166f8:	3301      	adds	r3, #1
 80166fa:	d109      	bne.n	8016710 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80166fc:	4601      	mov	r1, r0
 80166fe:	4668      	mov	r0, sp
 8016700:	f7ff f9a6 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016704:	f8bd 3000 	ldrh.w	r3, [sp]
 8016708:	8423      	strh	r3, [r4, #32]
 801670a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801670e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016710:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016714:	b002      	add	sp, #8
 8016716:	bd10      	pop	{r4, pc}

08016718 <_ZN8touchgfx6ScreenC1Ev>:
 8016718:	b570      	push	{r4, r5, r6, lr}
 801671a:	4b17      	ldr	r3, [pc, #92]	@ (8016778 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801671c:	4605      	mov	r5, r0
 801671e:	4a17      	ldr	r2, [pc, #92]	@ (801677c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016720:	2101      	movs	r1, #1
 8016722:	f845 3b04 	str.w	r3, [r5], #4
 8016726:	2300      	movs	r3, #0
 8016728:	6042      	str	r2, [r0, #4]
 801672a:	4604      	mov	r4, r0
 801672c:	8103      	strh	r3, [r0, #8]
 801672e:	8143      	strh	r3, [r0, #10]
 8016730:	8183      	strh	r3, [r0, #12]
 8016732:	81c3      	strh	r3, [r0, #14]
 8016734:	8203      	strh	r3, [r0, #16]
 8016736:	8243      	strh	r3, [r0, #18]
 8016738:	8283      	strh	r3, [r0, #20]
 801673a:	82c3      	strh	r3, [r0, #22]
 801673c:	6203      	str	r3, [r0, #32]
 801673e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8016740:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016742:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8016746:	6343      	str	r3, [r0, #52]	@ 0x34
 8016748:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801674c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016750:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016754:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8016758:	4b09      	ldr	r3, [pc, #36]	@ (8016780 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801675a:	4628      	mov	r0, r5
 801675c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016760:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8016762:	4a08      	ldr	r2, [pc, #32]	@ (8016784 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016764:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016768:	4798      	blx	r3
 801676a:	6863      	ldr	r3, [r4, #4]
 801676c:	4628      	mov	r0, r5
 801676e:	4631      	mov	r1, r6
 8016770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016772:	4798      	blx	r3
 8016774:	4620      	mov	r0, r4
 8016776:	bd70      	pop	{r4, r5, r6, pc}
 8016778:	08028ac4 	.word	0x08028ac4
 801677c:	08028518 	.word	0x08028518
 8016780:	240253aa 	.word	0x240253aa
 8016784:	240253a8 	.word	0x240253a8

08016788 <_ZN8touchgfx6Screen4drawEv>:
 8016788:	4b09      	ldr	r3, [pc, #36]	@ (80167b0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801678a:	b507      	push	{r0, r1, r2, lr}
 801678c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016790:	2100      	movs	r1, #0
 8016792:	4b08      	ldr	r3, [pc, #32]	@ (80167b4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016794:	9100      	str	r1, [sp, #0]
 8016796:	4669      	mov	r1, sp
 8016798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801679c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80167a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	689b      	ldr	r3, [r3, #8]
 80167a8:	4798      	blx	r3
 80167aa:	b003      	add	sp, #12
 80167ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80167b0:	240253a8 	.word	0x240253a8
 80167b4:	240253aa 	.word	0x240253aa

080167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80167b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80167c0:	b089      	sub	sp, #36	@ 0x24
 80167c2:	4680      	mov	r8, r0
 80167c4:	460c      	mov	r4, r1
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	4615      	mov	r5, r2
 80167ca:	dd0e      	ble.n	80167ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80167cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	dd0a      	ble.n	80167ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80167d4:	4628      	mov	r0, r5
 80167d6:	f7ff ff5b 	bl	8016690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80167da:	4621      	mov	r1, r4
 80167dc:	f7fd fdbb 	bl	8014356 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80167e0:	69eb      	ldr	r3, [r5, #28]
 80167e2:	b928      	cbnz	r0, 80167f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80167e4:	461d      	mov	r5, r3
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1f4      	bne.n	80167d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80167ea:	b009      	add	sp, #36	@ 0x24
 80167ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f0:	ae04      	add	r6, sp, #16
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f000 80b5 	beq.w	8016962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80167f8:	682b      	ldr	r3, [r5, #0]
 80167fa:	4629      	mov	r1, r5
 80167fc:	a802      	add	r0, sp, #8
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	4798      	blx	r3
 8016802:	4628      	mov	r0, r5
 8016804:	f7ff ff60 	bl	80166c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016808:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801680c:	4407      	add	r7, r0
 801680e:	4628      	mov	r0, r5
 8016810:	f7ff ff6e 	bl	80166f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016814:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016818:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801681c:	b23f      	sxth	r7, r7
 801681e:	4418      	add	r0, r3
 8016820:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016824:	4621      	mov	r1, r4
 8016826:	f8ad 2014 	strh.w	r2, [sp, #20]
 801682a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801682e:	4630      	mov	r0, r6
 8016830:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016834:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016838:	f7f8 ffd0 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801683c:	4628      	mov	r0, r5
 801683e:	f7ff ff27 	bl	8016690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016842:	ab06      	add	r3, sp, #24
 8016844:	4602      	mov	r2, r0
 8016846:	e896 0003 	ldmia.w	r6, {r0, r1}
 801684a:	e883 0003 	stmia.w	r3, {r0, r1}
 801684e:	4611      	mov	r1, r2
 8016850:	4618      	mov	r0, r3
 8016852:	f7f8 ffc3 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8016856:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801685a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801685e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8016862:	4299      	cmp	r1, r3
 8016864:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016868:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801686c:	d10b      	bne.n	8016886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801686e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016872:	4552      	cmp	r2, sl
 8016874:	d107      	bne.n	8016886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016876:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801687a:	455a      	cmp	r2, fp
 801687c:	d103      	bne.n	8016886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801687e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016882:	454a      	cmp	r2, r9
 8016884:	d06d      	beq.n	8016962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016886:	f1bb 0f00 	cmp.w	fp, #0
 801688a:	dd65      	ble.n	8016958 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801688c:	f1b9 0f00 	cmp.w	r9, #0
 8016890:	dd62      	ble.n	8016958 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016892:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016896:	fa1f f08a 	uxth.w	r0, sl
 801689a:	4552      	cmp	r2, sl
 801689c:	9000      	str	r0, [sp, #0]
 801689e:	da12      	bge.n	80168c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	9b00      	ldr	r3, [sp, #0]
 80168a4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80168a8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80168ac:	1a9a      	subs	r2, r3, r2
 80168ae:	f8ad 1010 	strh.w	r1, [sp, #16]
 80168b2:	4631      	mov	r1, r6
 80168b4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80168b8:	4640      	mov	r0, r8
 80168ba:	f8ad 2016 	strh.w	r2, [sp, #22]
 80168be:	69ea      	ldr	r2, [r5, #28]
 80168c0:	f7ff ff7a 	bl	80167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168c4:	9b01      	ldr	r3, [sp, #4]
 80168c6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80168ca:	b29f      	uxth	r7, r3
 80168cc:	429a      	cmp	r2, r3
 80168ce:	da0d      	bge.n	80168ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80168d0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80168d4:	1aba      	subs	r2, r7, r2
 80168d6:	f8ad a012 	strh.w	sl, [sp, #18]
 80168da:	4631      	mov	r1, r6
 80168dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80168e0:	4640      	mov	r0, r8
 80168e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80168e6:	69ea      	ldr	r2, [r5, #28]
 80168e8:	f7ff ff66 	bl	80167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168ec:	8822      	ldrh	r2, [r4, #0]
 80168ee:	445f      	add	r7, fp
 80168f0:	88a3      	ldrh	r3, [r4, #4]
 80168f2:	b2bf      	uxth	r7, r7
 80168f4:	4413      	add	r3, r2
 80168f6:	b23a      	sxth	r2, r7
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	b219      	sxth	r1, r3
 80168fc:	4291      	cmp	r1, r2
 80168fe:	dd0d      	ble.n	801691c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016900:	1bdb      	subs	r3, r3, r7
 8016902:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016906:	f8ad a012 	strh.w	sl, [sp, #18]
 801690a:	4631      	mov	r1, r6
 801690c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016910:	4640      	mov	r0, r8
 8016912:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016916:	69ea      	ldr	r2, [r5, #28]
 8016918:	f7ff ff4e 	bl	80167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801691c:	88e2      	ldrh	r2, [r4, #6]
 801691e:	8863      	ldrh	r3, [r4, #2]
 8016920:	4413      	add	r3, r2
 8016922:	9a00      	ldr	r2, [sp, #0]
 8016924:	444a      	add	r2, r9
 8016926:	b29b      	uxth	r3, r3
 8016928:	fa1f f982 	uxth.w	r9, r2
 801692c:	b219      	sxth	r1, r3
 801692e:	fa0f f289 	sxth.w	r2, r9
 8016932:	428a      	cmp	r2, r1
 8016934:	da15      	bge.n	8016962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016936:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801693a:	eba3 0309 	sub.w	r3, r3, r9
 801693e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016942:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016946:	4631      	mov	r1, r6
 8016948:	f8ad 0010 	strh.w	r0, [sp, #16]
 801694c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016950:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016954:	69ea      	ldr	r2, [r5, #28]
 8016956:	e001      	b.n	801695c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016958:	69ea      	ldr	r2, [r5, #28]
 801695a:	4621      	mov	r1, r4
 801695c:	4640      	mov	r0, r8
 801695e:	f7ff ff2b 	bl	80167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016962:	4628      	mov	r0, r5
 8016964:	f7ff fe94 	bl	8016690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016968:	6861      	ldr	r1, [r4, #4]
 801696a:	4602      	mov	r2, r0
 801696c:	4633      	mov	r3, r6
 801696e:	6820      	ldr	r0, [r4, #0]
 8016970:	c303      	stmia	r3!, {r0, r1}
 8016972:	4611      	mov	r1, r2
 8016974:	4630      	mov	r0, r6
 8016976:	f7f8 ff31 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801697a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801697e:	2b00      	cmp	r3, #0
 8016980:	f77f af33 	ble.w	80167ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016984:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016988:	2b00      	cmp	r3, #0
 801698a:	f77f af2e 	ble.w	80167ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801698e:	4628      	mov	r0, r5
 8016990:	f7ff fe9a 	bl	80166c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016994:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016998:	1a18      	subs	r0, r3, r0
 801699a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801699e:	4628      	mov	r0, r5
 80169a0:	f7ff fea6 	bl	80166f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80169a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80169a8:	4631      	mov	r1, r6
 80169aa:	1a18      	subs	r0, r3, r0
 80169ac:	f8ad 0012 	strh.w	r0, [sp, #18]
 80169b0:	4628      	mov	r0, r5
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	689b      	ldr	r3, [r3, #8]
 80169b6:	4798      	blx	r3
 80169b8:	e717      	b.n	80167ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080169ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80169ba:	b570      	push	{r4, r5, r6, lr}
 80169bc:	1d06      	adds	r6, r0, #4
 80169be:	b086      	sub	sp, #24
 80169c0:	460c      	mov	r4, r1
 80169c2:	2300      	movs	r3, #0
 80169c4:	4631      	mov	r1, r6
 80169c6:	4605      	mov	r5, r0
 80169c8:	a802      	add	r0, sp, #8
 80169ca:	9301      	str	r3, [sp, #4]
 80169cc:	f7ff f840 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80169d0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80169d4:	8822      	ldrh	r2, [r4, #0]
 80169d6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80169da:	1ad2      	subs	r2, r2, r3
 80169dc:	8863      	ldrh	r3, [r4, #2]
 80169de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80169e2:	1a5b      	subs	r3, r3, r1
 80169e4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80169e8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80169ec:	aa01      	add	r2, sp, #4
 80169ee:	f8ad 0014 	strh.w	r0, [sp, #20]
 80169f2:	4630      	mov	r0, r6
 80169f4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80169f8:	a904      	add	r1, sp, #16
 80169fa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80169fe:	f7f8 ffc5 	bl	800f98c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016a02:	9a01      	ldr	r2, [sp, #4]
 8016a04:	b11a      	cbz	r2, 8016a0e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016a06:	4621      	mov	r1, r4
 8016a08:	4628      	mov	r0, r5
 8016a0a:	f7ff fed5 	bl	80167b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a0e:	b006      	add	sp, #24
 8016a10:	bd70      	pop	{r4, r5, r6, pc}

08016a12 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016a12:	4602      	mov	r2, r0
 8016a14:	b530      	push	{r4, r5, lr}
 8016a16:	4604      	mov	r4, r0
 8016a18:	b085      	sub	sp, #20
 8016a1a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016a1e:	460d      	mov	r5, r1
 8016a20:	466b      	mov	r3, sp
 8016a22:	6851      	ldr	r1, [r2, #4]
 8016a24:	c303      	stmia	r3!, {r0, r1}
 8016a26:	4629      	mov	r1, r5
 8016a28:	4668      	mov	r0, sp
 8016a2a:	f7f8 fed7 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8016a2e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016a32:	b12b      	cbz	r3, 8016a40 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016a34:	4669      	mov	r1, sp
 8016a36:	4620      	mov	r0, r4
 8016a38:	f7ff ffbf 	bl	80169ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016a3c:	b005      	add	sp, #20
 8016a3e:	bd30      	pop	{r4, r5, pc}
 8016a40:	3404      	adds	r4, #4
 8016a42:	a802      	add	r0, sp, #8
 8016a44:	4621      	mov	r1, r4
 8016a46:	f7ff f803 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a4a:	f8bd 3000 	ldrh.w	r3, [sp]
 8016a4e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016a52:	4669      	mov	r1, sp
 8016a54:	4620      	mov	r0, r4
 8016a56:	1a9b      	subs	r3, r3, r2
 8016a58:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016a5c:	f8ad 3000 	strh.w	r3, [sp]
 8016a60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016a64:	1a9b      	subs	r3, r3, r2
 8016a66:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016a6a:	f7f8 ff56 	bl	800f91a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016a6e:	e7e5      	b.n	8016a3c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016a70 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016a70:	460b      	mov	r3, r1
 8016a72:	680a      	ldr	r2, [r1, #0]
 8016a74:	1d01      	adds	r1, r0, #4
 8016a76:	6992      	ldr	r2, [r2, #24]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	4710      	bx	r2

08016a7c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8016a7c:	4298      	cmp	r0, r3
 8016a7e:	d200      	bcs.n	8016a82 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8016a80:	b913      	cbnz	r3, 8016a88 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8016a82:	440a      	add	r2, r1
 8016a84:	b210      	sxth	r0, r2
 8016a86:	4770      	bx	lr
 8016a88:	ee07 2a90 	vmov	s15, r2
 8016a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016a90:	ee07 0a90 	vmov	s15, r0
 8016a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a9c:	ee07 3a10 	vmov	s14, r3
 8016aa0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8016aa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016aa8:	ee07 1a90 	vmov	s15, r1
 8016aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ab4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac0:	bfcc      	ite	gt
 8016ac2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8016ac6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8016aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ace:	ee17 3a90 	vmov	r3, s15
 8016ad2:	b218      	sxth	r0, r3
 8016ad4:	4770      	bx	lr

08016ad6 <_ZN8touchgfx12TextProviderC1Ev>:
 8016ad6:	b538      	push	{r3, r4, r5, lr}
 8016ad8:	2500      	movs	r5, #0
 8016ada:	2302      	movs	r3, #2
 8016adc:	4604      	mov	r4, r0
 8016ade:	220e      	movs	r2, #14
 8016ae0:	7403      	strb	r3, [r0, #16]
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	6145      	str	r5, [r0, #20]
 8016ae6:	7605      	strb	r5, [r0, #24]
 8016ae8:	83c5      	strh	r5, [r0, #30]
 8016aea:	8405      	strh	r5, [r0, #32]
 8016aec:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016aee:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016af0:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8016af2:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016af6:	e9c0 5500 	strd	r5, r5, [r0]
 8016afa:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8016afe:	304c      	adds	r0, #76	@ 0x4c
 8016b00:	f00e f862 	bl	8024bc8 <memset>
 8016b04:	2301      	movs	r3, #1
 8016b06:	4620      	mov	r0, r4
 8016b08:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8016b0c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016b10:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8016b14:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8016b18:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8016b1c:	f7ed fc70 	bl	8004400 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016b20:	4620      	mov	r0, r4
 8016b22:	bd38      	pop	{r3, r4, r5, pc}

08016b24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016b24:	b530      	push	{r4, r5, lr}
 8016b26:	2500      	movs	r5, #0
 8016b28:	2401      	movs	r4, #1
 8016b2a:	6843      	ldr	r3, [r0, #4]
 8016b2c:	b913      	cbnz	r3, 8016b34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016b2e:	6803      	ldr	r3, [r0, #0]
 8016b30:	b313      	cbz	r3, 8016b78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016b32:	6043      	str	r3, [r0, #4]
 8016b34:	7e03      	ldrb	r3, [r0, #24]
 8016b36:	b143      	cbz	r3, 8016b4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016b38:	6943      	ldr	r3, [r0, #20]
 8016b3a:	b12b      	cbz	r3, 8016b48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016b3c:	881a      	ldrh	r2, [r3, #0]
 8016b3e:	b11a      	cbz	r2, 8016b48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016b40:	1c9a      	adds	r2, r3, #2
 8016b42:	6142      	str	r2, [r0, #20]
 8016b44:	8818      	ldrh	r0, [r3, #0]
 8016b46:	bd30      	pop	{r4, r5, pc}
 8016b48:	7605      	strb	r5, [r0, #24]
 8016b4a:	6843      	ldr	r3, [r0, #4]
 8016b4c:	8819      	ldrh	r1, [r3, #0]
 8016b4e:	b199      	cbz	r1, 8016b78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016b50:	1c9a      	adds	r2, r3, #2
 8016b52:	2902      	cmp	r1, #2
 8016b54:	6042      	str	r2, [r0, #4]
 8016b56:	d1f5      	bne.n	8016b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016b58:	7c03      	ldrb	r3, [r0, #16]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d8e5      	bhi.n	8016b2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b5e:	1c5a      	adds	r2, r3, #1
 8016b60:	3302      	adds	r3, #2
 8016b62:	7402      	strb	r2, [r0, #16]
 8016b64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016b68:	6143      	str	r3, [r0, #20]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d0dd      	beq.n	8016b2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b6e:	881b      	ldrh	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d0da      	beq.n	8016b2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b74:	7604      	strb	r4, [r0, #24]
 8016b76:	e7d8      	b.n	8016b2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b78:	2000      	movs	r0, #0
 8016b7a:	e7e4      	b.n	8016b46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016b7c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016b7c:	6001      	str	r1, [r0, #0]
 8016b7e:	2100      	movs	r1, #0
 8016b80:	b430      	push	{r4, r5}
 8016b82:	6041      	str	r1, [r0, #4]
 8016b84:	6815      	ldr	r5, [r2, #0]
 8016b86:	6085      	str	r5, [r0, #8]
 8016b88:	6852      	ldr	r2, [r2, #4]
 8016b8a:	6443      	str	r3, [r0, #68]	@ 0x44
 8016b8c:	9b02      	ldr	r3, [sp, #8]
 8016b8e:	60c2      	str	r2, [r0, #12]
 8016b90:	7401      	strb	r1, [r0, #16]
 8016b92:	6141      	str	r1, [r0, #20]
 8016b94:	7601      	strb	r1, [r0, #24]
 8016b96:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016b98:	8401      	strh	r1, [r0, #32]
 8016b9a:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8016b9e:	6483      	str	r3, [r0, #72]	@ 0x48
 8016ba0:	bc30      	pop	{r4, r5}
 8016ba2:	f7ed bc2d 	b.w	8004400 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016ba6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ba8:	4605      	mov	r5, r0
 8016baa:	4608      	mov	r0, r1
 8016bac:	b1f1      	cbz	r1, 8016bec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016bae:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	f101 0708 	add.w	r7, r1, #8
 8016bb8:	4622      	mov	r2, r4
 8016bba:	6818      	ldr	r0, [r3, #0]
 8016bbc:	3308      	adds	r3, #8
 8016bbe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016bc2:	4626      	mov	r6, r4
 8016bc4:	42bb      	cmp	r3, r7
 8016bc6:	c603      	stmia	r6!, {r0, r1}
 8016bc8:	4634      	mov	r4, r6
 8016bca:	d1f6      	bne.n	8016bba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016bcc:	6818      	ldr	r0, [r3, #0]
 8016bce:	6030      	str	r0, [r6, #0]
 8016bd0:	4610      	mov	r0, r2
 8016bd2:	889b      	ldrh	r3, [r3, #4]
 8016bd4:	80b3      	strh	r3, [r6, #4]
 8016bd6:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016bda:	015b      	lsls	r3, r3, #5
 8016bdc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016be0:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016be4:	430b      	orrs	r3, r1
 8016be6:	425b      	negs	r3, r3
 8016be8:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016bee <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016bee:	b538      	push	{r3, r4, r5, lr}
 8016bf0:	460c      	mov	r4, r1
 8016bf2:	6811      	ldr	r1, [r2, #0]
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	68cd      	ldr	r5, [r1, #12]
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	47a8      	blx	r5
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	bf08      	it	eq
 8016c00:	4620      	moveq	r0, r4
 8016c02:	bd38      	pop	{r3, r4, r5, pc}

08016c04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c08:	468c      	mov	ip, r1
 8016c0a:	4605      	mov	r5, r0
 8016c0c:	4614      	mov	r4, r2
 8016c0e:	b942      	cbnz	r2, 8016c22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8016c10:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016c14:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8016c18:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c22:	7b50      	ldrb	r0, [r2, #13]
 8016c24:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8016c28:	8893      	ldrh	r3, [r2, #4]
 8016c2a:	0106      	lsls	r6, r0, #4
 8016c2c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016c30:	79e6      	ldrb	r6, [r4, #7]
 8016c32:	4316      	orrs	r6, r2
 8016c34:	185a      	adds	r2, r3, r1
 8016c36:	b291      	uxth	r1, r2
 8016c38:	b2b7      	uxth	r7, r6
 8016c3a:	291d      	cmp	r1, #29
 8016c3c:	d87f      	bhi.n	8016d3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016c3e:	2201      	movs	r2, #1
 8016c40:	10f6      	asrs	r6, r6, #3
 8016c42:	408a      	lsls	r2, r1
 8016c44:	498b      	ldr	r1, [pc, #556]	@ (8016e74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8016c46:	420a      	tst	r2, r1
 8016c48:	d12e      	bne.n	8016ca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016c4a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016c4e:	d076      	beq.n	8016d3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016c50:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016c54:	4623      	mov	r3, r4
 8016c56:	f104 0e08 	add.w	lr, r4, #8
 8016c5a:	4614      	mov	r4, r2
 8016c5c:	6818      	ldr	r0, [r3, #0]
 8016c5e:	3308      	adds	r3, #8
 8016c60:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016c64:	4694      	mov	ip, r2
 8016c66:	4573      	cmp	r3, lr
 8016c68:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016c6c:	4662      	mov	r2, ip
 8016c6e:	d1f5      	bne.n	8016c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016c70:	6818      	ldr	r0, [r3, #0]
 8016c72:	f8cc 0000 	str.w	r0, [ip]
 8016c76:	889b      	ldrh	r3, [r3, #4]
 8016c78:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016c7c:	b2b3      	uxth	r3, r6
 8016c7e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8016c82:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8016c86:	1aca      	subs	r2, r1, r3
 8016c88:	1bcf      	subs	r7, r1, r7
 8016c8a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8016c8e:	b292      	uxth	r2, r2
 8016c90:	1afb      	subs	r3, r7, r3
 8016c92:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8016c96:	10d2      	asrs	r2, r2, #3
 8016c98:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8016c9c:	4302      	orrs	r2, r0
 8016c9e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8016ca2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8016ca6:	e7b9      	b.n	8016c1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016ca8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016cac:	4623      	mov	r3, r4
 8016cae:	f104 0808 	add.w	r8, r4, #8
 8016cb2:	4614      	mov	r4, r2
 8016cb4:	6818      	ldr	r0, [r3, #0]
 8016cb6:	3308      	adds	r3, #8
 8016cb8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016cbc:	4696      	mov	lr, r2
 8016cbe:	4543      	cmp	r3, r8
 8016cc0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016cc4:	4672      	mov	r2, lr
 8016cc6:	d1f5      	bne.n	8016cb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8016cc8:	6818      	ldr	r0, [r3, #0]
 8016cca:	f8ce 0000 	str.w	r0, [lr]
 8016cce:	889b      	ldrh	r3, [r3, #4]
 8016cd0:	f8ae 3004 	strh.w	r3, [lr, #4]
 8016cd4:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8016cd6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016cda:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8016cdc:	f640 6333 	movw	r3, #3635	@ 0xe33
 8016ce0:	4299      	cmp	r1, r3
 8016ce2:	d111      	bne.n	8016d08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8016ce4:	f8dc 3000 	ldr.w	r3, [ip]
 8016ce8:	4660      	mov	r0, ip
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	4798      	blx	r3
 8016cee:	7b41      	ldrb	r1, [r0, #13]
 8016cf0:	00cb      	lsls	r3, r1, #3
 8016cf2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016cf6:	7a03      	ldrb	r3, [r0, #8]
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	064a      	lsls	r2, r1, #25
 8016cfc:	bf44      	itt	mi
 8016cfe:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016d02:	b21b      	sxthmi	r3, r3
 8016d04:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016d08:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8016d0c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8016d10:	443b      	add	r3, r7
 8016d12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016d16:	4433      	add	r3, r6
 8016d18:	b29b      	uxth	r3, r3
 8016d1a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016d1e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8016d22:	10db      	asrs	r3, r3, #3
 8016d24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d28:	4313      	orrs	r3, r2
 8016d2a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8016d2e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8016d32:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8016d36:	1a9b      	subs	r3, r3, r2
 8016d38:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016d3c:	e76e      	b.n	8016c1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016d3e:	f023 0204 	bic.w	r2, r3, #4
 8016d42:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016d46:	428a      	cmp	r2, r1
 8016d48:	d003      	beq.n	8016d52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8016d4a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d138      	bne.n	8016dc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8016d52:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8016d56:	4622      	mov	r2, r4
 8016d58:	f104 0808 	add.w	r8, r4, #8
 8016d5c:	4634      	mov	r4, r6
 8016d5e:	6810      	ldr	r0, [r2, #0]
 8016d60:	3208      	adds	r2, #8
 8016d62:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016d66:	46b6      	mov	lr, r6
 8016d68:	4542      	cmp	r2, r8
 8016d6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016d6e:	4676      	mov	r6, lr
 8016d70:	d1f5      	bne.n	8016d5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8016d72:	6810      	ldr	r0, [r2, #0]
 8016d74:	3b01      	subs	r3, #1
 8016d76:	4621      	mov	r1, r4
 8016d78:	f8ce 0000 	str.w	r0, [lr]
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	8892      	ldrh	r2, [r2, #4]
 8016d80:	4628      	mov	r0, r5
 8016d82:	f8ae 2004 	strh.w	r2, [lr, #4]
 8016d86:	4662      	mov	r2, ip
 8016d88:	f7ff ff31 	bl	8016bee <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016d8c:	7b41      	ldrb	r1, [r0, #13]
 8016d8e:	00cb      	lsls	r3, r1, #3
 8016d90:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016d94:	7a03      	ldrb	r3, [r0, #8]
 8016d96:	0648      	lsls	r0, r1, #25
 8016d98:	ea43 0302 	orr.w	r3, r3, r2
 8016d9c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8016da0:	bf44      	itt	mi
 8016da2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016da6:	b21b      	sxthmi	r3, r3
 8016da8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016dac:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016db6:	4313      	orrs	r3, r2
 8016db8:	115a      	asrs	r2, r3, #5
 8016dba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016dbe:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8016dc2:	e047      	b.n	8016e54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8016dc4:	00c2      	lsls	r2, r0, #3
 8016dc6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8016dca:	7a22      	ldrb	r2, [r4, #8]
 8016dcc:	430a      	orrs	r2, r1
 8016dce:	0641      	lsls	r1, r0, #25
 8016dd0:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016dd4:	bf44      	itt	mi
 8016dd6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8016dda:	b212      	sxthmi	r2, r2
 8016ddc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016de0:	f023 0210 	bic.w	r2, r3, #16
 8016de4:	428a      	cmp	r2, r1
 8016de6:	d003      	beq.n	8016df0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8016de8:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016dec:	4293      	cmp	r3, r2
 8016dee:	d13e      	bne.n	8016e6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8016df0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016df4:	f104 0808 	add.w	r8, r4, #8
 8016df8:	4696      	mov	lr, r2
 8016dfa:	6820      	ldr	r0, [r4, #0]
 8016dfc:	3408      	adds	r4, #8
 8016dfe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8016e02:	4616      	mov	r6, r2
 8016e04:	4544      	cmp	r4, r8
 8016e06:	c603      	stmia	r6!, {r0, r1}
 8016e08:	4632      	mov	r2, r6
 8016e0a:	d1f6      	bne.n	8016dfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8016e0c:	6820      	ldr	r0, [r4, #0]
 8016e0e:	6030      	str	r0, [r6, #0]
 8016e10:	4628      	mov	r0, r5
 8016e12:	88a1      	ldrh	r1, [r4, #4]
 8016e14:	4674      	mov	r4, lr
 8016e16:	80b1      	strh	r1, [r6, #4]
 8016e18:	4671      	mov	r1, lr
 8016e1a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8016e1e:	0076      	lsls	r6, r6, #1
 8016e20:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016e24:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8016e28:	4316      	orrs	r6, r2
 8016e2a:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	4662      	mov	r2, ip
 8016e32:	bf16      	itet	ne
 8016e34:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016e38:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016e3c:	b29b      	uxthne	r3, r3
 8016e3e:	f7ff fed6 	bl	8016bee <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016e42:	7b43      	ldrb	r3, [r0, #13]
 8016e44:	7a82      	ldrb	r2, [r0, #10]
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e4c:	4313      	orrs	r3, r2
 8016e4e:	1af6      	subs	r6, r6, r3
 8016e50:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8016e54:	7b61      	ldrb	r1, [r4, #13]
 8016e56:	00cb      	lsls	r3, r1, #3
 8016e58:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016e5c:	7a23      	ldrb	r3, [r4, #8]
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	064a      	lsls	r2, r1, #25
 8016e62:	bf44      	itt	mi
 8016e64:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016e68:	b21b      	sxthmi	r3, r3
 8016e6a:	1bdb      	subs	r3, r3, r7
 8016e6c:	e719      	b.n	8016ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	e7a5      	b.n	8016dbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016e72:	bf00      	nop
 8016e74:	3fc00079 	.word	0x3fc00079

08016e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	b942      	cbnz	r2, 8016e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016e84:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016e88:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016e8c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016e90:	e047      	b.n	8016f22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016e92:	7b51      	ldrb	r1, [r2, #13]
 8016e94:	8893      	ldrh	r3, [r2, #4]
 8016e96:	010d      	lsls	r5, r1, #4
 8016e98:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016e9c:	79d5      	ldrb	r5, [r2, #7]
 8016e9e:	4305      	orrs	r5, r0
 8016ea0:	2d04      	cmp	r5, #4
 8016ea2:	bfcc      	ite	gt
 8016ea4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016ea8:	f04f 0e01 	movle.w	lr, #1
 8016eac:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016eb0:	f200 80ab 	bhi.w	801700a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016eb4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016eb8:	4283      	cmp	r3, r0
 8016eba:	d216      	bcs.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ebc:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016ec0:	4283      	cmp	r3, r0
 8016ec2:	d859      	bhi.n	8016f78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016ec4:	f240 6057 	movw	r0, #1623	@ 0x657
 8016ec8:	4283      	cmp	r3, r0
 8016eca:	d20e      	bcs.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ecc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016ed0:	d24a      	bcs.n	8016f68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016ed2:	f240 604e 	movw	r0, #1614	@ 0x64e
 8016ed6:	4283      	cmp	r3, r0
 8016ed8:	d207      	bcs.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016eda:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016ede:	4283      	cmp	r3, r0
 8016ee0:	d02a      	beq.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ee2:	d821      	bhi.n	8016f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016ee4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016ee8:	d35b      	bcc.n	8016fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016eea:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016eee:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016ef2:	f040 80d0 	bne.w	8017096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016ef6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016efa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016efe:	f040 80ca 	bne.w	8017096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016f02:	00cb      	lsls	r3, r1, #3
 8016f04:	0649      	lsls	r1, r1, #25
 8016f06:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016f0a:	7a13      	ldrb	r3, [r2, #8]
 8016f0c:	ea43 0300 	orr.w	r3, r3, r0
 8016f10:	bf44      	itt	mi
 8016f12:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016f16:	b21b      	sxthmi	r3, r3
 8016f18:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016f1c:	1b5d      	subs	r5, r3, r5
 8016f1e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016f22:	4610      	mov	r0, r2
 8016f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f28:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016f2c:	4283      	cmp	r3, r0
 8016f2e:	d338      	bcc.n	8016fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f30:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016f34:	4283      	cmp	r3, r0
 8016f36:	d9d8      	bls.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f38:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016f3c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016f40:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016f44:	f040 80f3 	bne.w	801712e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016f48:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016f4c:	f040 80ef 	bne.w	801712e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016f50:	00cb      	lsls	r3, r1, #3
 8016f52:	064e      	lsls	r6, r1, #25
 8016f54:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016f58:	7a13      	ldrb	r3, [r2, #8]
 8016f5a:	ea43 0300 	orr.w	r3, r3, r0
 8016f5e:	bf44      	itt	mi
 8016f60:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016f64:	b21b      	sxthmi	r3, r3
 8016f66:	e7d9      	b.n	8016f1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016f68:	f240 6054 	movw	r0, #1620	@ 0x654
 8016f6c:	4283      	cmp	r3, r0
 8016f6e:	d8e3      	bhi.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f70:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016f74:	d9e0      	bls.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f76:	e7b8      	b.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f78:	f240 6074 	movw	r0, #1652	@ 0x674
 8016f7c:	4283      	cmp	r3, r0
 8016f7e:	d0b4      	beq.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f80:	d82d      	bhi.n	8016fde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016f82:	f240 605e 	movw	r0, #1630	@ 0x65e
 8016f86:	4283      	cmp	r3, r0
 8016f88:	d804      	bhi.n	8016f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016f8a:	f240 605d 	movw	r0, #1629	@ 0x65d
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	d3d2      	bcc.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f92:	e7aa      	b.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f94:	f240 605f 	movw	r0, #1631	@ 0x65f
 8016f98:	4283      	cmp	r3, r0
 8016f9a:	d0cd      	beq.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f9c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8016fa0:	d0a3      	beq.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016fa2:	00cb      	lsls	r3, r1, #3
 8016fa4:	0649      	lsls	r1, r1, #25
 8016fa6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016faa:	7a13      	ldrb	r3, [r2, #8]
 8016fac:	ea43 0300 	orr.w	r3, r3, r0
 8016fb0:	bf44      	itt	mi
 8016fb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016fb6:	b21b      	sxthmi	r3, r3
 8016fb8:	1b5d      	subs	r5, r3, r5
 8016fba:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016fbe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016fc2:	7b53      	ldrb	r3, [r2, #13]
 8016fc4:	015b      	lsls	r3, r3, #5
 8016fc6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016fca:	7993      	ldrb	r3, [r2, #6]
 8016fcc:	430b      	orrs	r3, r1
 8016fce:	2105      	movs	r1, #5
 8016fd0:	005b      	lsls	r3, r3, #1
 8016fd2:	fb93 f3f1 	sdiv	r3, r3, r1
 8016fd6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016fda:	440b      	add	r3, r1
 8016fdc:	e756      	b.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016fde:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8016fe2:	4283      	cmp	r3, r0
 8016fe4:	d809      	bhi.n	8016ffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016fe6:	f240 60df 	movw	r0, #1759	@ 0x6df
 8016fea:	4283      	cmp	r3, r0
 8016fec:	f4bf af7d 	bcs.w	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ff0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8016ff4:	2b05      	cmp	r3, #5
 8016ff6:	d8d4      	bhi.n	8016fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016ff8:	e777      	b.n	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ffa:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8016ffe:	4283      	cmp	r3, r0
 8017000:	d09a      	beq.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017002:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8017006:	4283      	cmp	r3, r0
 8017008:	e7ca      	b.n	8016fa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801700a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801700e:	d22b      	bcs.n	8017068 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017010:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8017014:	4283      	cmp	r3, r0
 8017016:	d28f      	bcs.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017018:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801701c:	4283      	cmp	r3, r0
 801701e:	d816      	bhi.n	801704e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017020:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8017024:	4283      	cmp	r3, r0
 8017026:	f4bf af60 	bcs.w	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801702a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801702e:	4283      	cmp	r3, r0
 8017030:	d80a      	bhi.n	8017048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8017032:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8017036:	4283      	cmp	r3, r0
 8017038:	f4bf af57 	bcs.w	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801703c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8017040:	4283      	cmp	r3, r0
 8017042:	f43f af79 	beq.w	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017046:	e7ac      	b.n	8016fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017048:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801704c:	e7f8      	b.n	8017040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801704e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8017052:	4283      	cmp	r3, r0
 8017054:	d802      	bhi.n	801705c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8017056:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801705a:	e798      	b.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801705c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8017060:	4283      	cmp	r3, r0
 8017062:	f47f af42 	bne.w	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017066:	e767      	b.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017068:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801706c:	4283      	cmp	r3, r0
 801706e:	f43f af63 	beq.w	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017072:	d802      	bhi.n	801707a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8017074:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8017078:	e7f2      	b.n	8017060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801707a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801707e:	4283      	cmp	r3, r0
 8017080:	d805      	bhi.n	801708e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8017082:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8017086:	4283      	cmp	r3, r0
 8017088:	f4ff af2f 	bcc.w	8016eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801708c:	e754      	b.n	8016f38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801708e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8017092:	4283      	cmp	r3, r0
 8017094:	e7af      	b.n	8016ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8017096:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801709a:	4617      	mov	r7, r2
 801709c:	f102 0808 	add.w	r8, r2, #8
 80170a0:	4666      	mov	r6, ip
 80170a2:	6838      	ldr	r0, [r7, #0]
 80170a4:	3708      	adds	r7, #8
 80170a6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80170aa:	46e6      	mov	lr, ip
 80170ac:	4547      	cmp	r7, r8
 80170ae:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80170b2:	46f4      	mov	ip, lr
 80170b4:	d1f5      	bne.n	80170a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80170b6:	6838      	ldr	r0, [r7, #0]
 80170b8:	f8ce 0000 	str.w	r0, [lr]
 80170bc:	88b9      	ldrh	r1, [r7, #4]
 80170be:	f8ae 1004 	strh.w	r1, [lr, #4]
 80170c2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80170c6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80170ca:	d009      	beq.n	80170e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80170cc:	7b51      	ldrb	r1, [r2, #13]
 80170ce:	7992      	ldrb	r2, [r2, #6]
 80170d0:	0149      	lsls	r1, r1, #5
 80170d2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80170d6:	4311      	orrs	r1, r2
 80170d8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80170dc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80170e0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80170e4:	b2ad      	uxth	r5, r5
 80170e6:	d00d      	beq.n	8017104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80170e8:	442b      	add	r3, r5
 80170ea:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80170f4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80170f8:	10db      	asrs	r3, r3, #3
 80170fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80170fe:	4313      	orrs	r3, r2
 8017100:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8017104:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8017108:	00cb      	lsls	r3, r1, #3
 801710a:	064f      	lsls	r7, r1, #25
 801710c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017110:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8017114:	ea43 0302 	orr.w	r3, r3, r2
 8017118:	bf44      	itt	mi
 801711a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801711e:	b21b      	sxthmi	r3, r3
 8017120:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017124:	1b5b      	subs	r3, r3, r5
 8017126:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801712a:	4632      	mov	r2, r6
 801712c:	e6f9      	b.n	8016f22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801712e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8017132:	4617      	mov	r7, r2
 8017134:	f102 0908 	add.w	r9, r2, #8
 8017138:	4666      	mov	r6, ip
 801713a:	6838      	ldr	r0, [r7, #0]
 801713c:	3708      	adds	r7, #8
 801713e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017142:	46e0      	mov	r8, ip
 8017144:	454f      	cmp	r7, r9
 8017146:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801714a:	46c4      	mov	ip, r8
 801714c:	d1f5      	bne.n	801713a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801714e:	6838      	ldr	r0, [r7, #0]
 8017150:	f8c8 0000 	str.w	r0, [r8]
 8017154:	88b9      	ldrh	r1, [r7, #4]
 8017156:	f8a8 1004 	strh.w	r1, [r8, #4]
 801715a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801715e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8017162:	d009      	beq.n	8017178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8017164:	7b51      	ldrb	r1, [r2, #13]
 8017166:	7992      	ldrb	r2, [r2, #6]
 8017168:	0149      	lsls	r1, r1, #5
 801716a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801716e:	4311      	orrs	r1, r2
 8017170:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017174:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8017178:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801717c:	d00e      	beq.n	801719c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801717e:	eba3 030e 	sub.w	r3, r3, lr
 8017182:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8017186:	b29b      	uxth	r3, r3
 8017188:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801718c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8017190:	10db      	asrs	r3, r3, #3
 8017192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017196:	4313      	orrs	r3, r2
 8017198:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801719c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80171a0:	00cb      	lsls	r3, r1, #3
 80171a2:	0648      	lsls	r0, r1, #25
 80171a4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80171a8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80171ac:	ea43 0302 	orr.w	r3, r3, r2
 80171b0:	bf44      	itt	mi
 80171b2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80171b6:	b21b      	sxthmi	r3, r3
 80171b8:	1b5d      	subs	r5, r3, r5
 80171ba:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80171be:	e7b4      	b.n	801712a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080171c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80171c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c4:	461e      	mov	r6, r3
 80171c6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80171c8:	4604      	mov	r4, r0
 80171ca:	4617      	mov	r7, r2
 80171cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80171d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80171d4:	f7ed f8d2 	bl	800437c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80171d8:	4605      	mov	r5, r0
 80171da:	b918      	cbnz	r0, 80171e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80171dc:	6030      	str	r0, [r6, #0]
 80171de:	4628      	mov	r0, r5
 80171e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	4601      	mov	r1, r0
 80171e8:	4638      	mov	r0, r7
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	4798      	blx	r3
 80171ee:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80171f2:	4602      	mov	r2, r0
 80171f4:	6030      	str	r0, [r6, #0]
 80171f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80171fa:	d213      	bcs.n	8017224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80171fc:	4643      	mov	r3, r8
 80171fe:	4639      	mov	r1, r7
 8017200:	4620      	mov	r0, r4
 8017202:	f7ff fe39 	bl	8016e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017206:	6030      	str	r0, [r6, #0]
 8017208:	6833      	ldr	r3, [r6, #0]
 801720a:	b143      	cbz	r3, 801721e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801720c:	7b5a      	ldrb	r2, [r3, #13]
 801720e:	7a9b      	ldrb	r3, [r3, #10]
 8017210:	0052      	lsls	r2, r2, #1
 8017212:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8017216:	4313      	orrs	r3, r2
 8017218:	bf0c      	ite	eq
 801721a:	2301      	moveq	r3, #1
 801721c:	2300      	movne	r3, #0
 801721e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8017222:	e7dc      	b.n	80171de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017224:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8017228:	b29b      	uxth	r3, r3
 801722a:	2b7f      	cmp	r3, #127	@ 0x7f
 801722c:	d804      	bhi.n	8017238 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801722e:	4639      	mov	r1, r7
 8017230:	4620      	mov	r0, r4
 8017232:	f7ff fce7 	bl	8016c04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017236:	e7e6      	b.n	8017206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017238:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801723c:	2b00      	cmp	r3, #0
 801723e:	d0e3      	beq.n	8017208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017240:	f640 1302 	movw	r3, #2306	@ 0x902
 8017244:	429d      	cmp	r5, r3
 8017246:	d1df      	bne.n	8017208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017248:	4601      	mov	r1, r0
 801724a:	4620      	mov	r0, r4
 801724c:	f7ff fcab 	bl	8016ba6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017250:	e7d9      	b.n	8017206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017252 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017252:	b510      	push	{r4, lr}
 8017254:	4604      	mov	r4, r0
 8017256:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801725a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801725c:	b1e1      	cbz	r1, 8017298 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801725e:	2b0a      	cmp	r3, #10
 8017260:	d02d      	beq.n	80172be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017262:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017264:	3901      	subs	r1, #1
 8017266:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801726a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801726c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8017270:	1c51      	adds	r1, r2, #1
 8017272:	b289      	uxth	r1, r1
 8017274:	2901      	cmp	r1, #1
 8017276:	bf8a      	itet	hi
 8017278:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801727c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801727e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8017280:	1c5a      	adds	r2, r3, #1
 8017282:	8722      	strh	r2, [r4, #56]	@ 0x38
 8017284:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017286:	4413      	add	r3, r2
 8017288:	b29b      	uxth	r3, r3
 801728a:	2b09      	cmp	r3, #9
 801728c:	bf88      	it	hi
 801728e:	3b0a      	subhi	r3, #10
 8017290:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017294:	8458      	strh	r0, [r3, #34]	@ 0x22
 8017296:	e7de      	b.n	8017256 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017298:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801729a:	2b0a      	cmp	r3, #10
 801729c:	d00f      	beq.n	80172be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801729e:	4620      	mov	r0, r4
 80172a0:	f7ff fc40 	bl	8016b24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80172a4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80172a6:	1c5a      	adds	r2, r3, #1
 80172a8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80172aa:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80172ac:	4413      	add	r3, r2
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	2b09      	cmp	r3, #9
 80172b2:	bf88      	it	hi
 80172b4:	3b0a      	subhi	r3, #10
 80172b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80172ba:	8458      	strh	r0, [r3, #34]	@ 0x22
 80172bc:	e7ec      	b.n	8017298 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80172be:	bd10      	pop	{r4, pc}

080172c0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80172c0:	b538      	push	{r3, r4, r5, lr}
 80172c2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80172c4:	4604      	mov	r4, r0
 80172c6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80172ca:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80172cc:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80172ce:	3a01      	subs	r2, #1
 80172d0:	8702      	strh	r2, [r0, #56]	@ 0x38
 80172d2:	1c5a      	adds	r2, r3, #1
 80172d4:	b292      	uxth	r2, r2
 80172d6:	2a09      	cmp	r2, #9
 80172d8:	bf8a      	itet	hi
 80172da:	3b09      	subhi	r3, #9
 80172dc:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80172de:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80172e0:	f7ff ffb7 	bl	8017252 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80172e4:	8c23      	ldrh	r3, [r4, #32]
 80172e6:	2b01      	cmp	r3, #1
 80172e8:	bf9c      	itt	ls
 80172ea:	3301      	addls	r3, #1
 80172ec:	8423      	strhls	r3, [r4, #32]
 80172ee:	8be3      	ldrh	r3, [r4, #30]
 80172f0:	b90b      	cbnz	r3, 80172f6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80172f2:	2302      	movs	r3, #2
 80172f4:	83e3      	strh	r3, [r4, #30]
 80172f6:	8be3      	ldrh	r3, [r4, #30]
 80172f8:	4628      	mov	r0, r5
 80172fa:	3b01      	subs	r3, #1
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	83e3      	strh	r3, [r4, #30]
 8017300:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017304:	8365      	strh	r5, [r4, #26]
 8017306:	bd38      	pop	{r3, r4, r5, pc}

08017308 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017308:	428a      	cmp	r2, r1
 801730a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801730e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8017310:	d932      	bls.n	8017378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017312:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8017314:	1a54      	subs	r4, r2, r1
 8017316:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801731a:	19ee      	adds	r6, r5, r7
 801731c:	fa1f fe84 	uxth.w	lr, r4
 8017320:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8017324:	3e01      	subs	r6, #1
 8017326:	b2b4      	uxth	r4, r6
 8017328:	eba4 090e 	sub.w	r9, r4, lr
 801732c:	fa1f f989 	uxth.w	r9, r9
 8017330:	2c09      	cmp	r4, #9
 8017332:	4626      	mov	r6, r4
 8017334:	bf88      	it	hi
 8017336:	f1a4 060a 	subhi.w	r6, r4, #10
 801733a:	f1bc 0f00 	cmp.w	ip, #0
 801733e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017342:	bf08      	it	eq
 8017344:	f04f 0c02 	moveq.w	ip, #2
 8017348:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801734c:	b2a4      	uxth	r4, r4
 801734e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017352:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8017356:	454c      	cmp	r4, r9
 8017358:	fa1f fc8c 	uxth.w	ip, ip
 801735c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017360:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8017364:	d1e4      	bne.n	8017330 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017366:	eba5 050e 	sub.w	r5, r5, lr
 801736a:	eb0e 0408 	add.w	r4, lr, r8
 801736e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8017372:	8705      	strh	r5, [r0, #56]	@ 0x38
 8017374:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8017378:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801737a:	250a      	movs	r5, #10
 801737c:	1a64      	subs	r4, r4, r1
 801737e:	4439      	add	r1, r7
 8017380:	b289      	uxth	r1, r1
 8017382:	8704      	strh	r4, [r0, #56]	@ 0x38
 8017384:	2909      	cmp	r1, #9
 8017386:	bf88      	it	hi
 8017388:	390a      	subhi	r1, #10
 801738a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801738c:	b18a      	cbz	r2, 80173b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801738e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8017390:	3a01      	subs	r2, #1
 8017392:	3101      	adds	r1, #1
 8017394:	b292      	uxth	r2, r2
 8017396:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801739a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801739c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801739e:	b901      	cbnz	r1, 80173a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80173a0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80173a2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80173a4:	3901      	subs	r1, #1
 80173a6:	b289      	uxth	r1, r1
 80173a8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80173aa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80173ae:	844c      	strh	r4, [r1, #34]	@ 0x22
 80173b0:	e7ec      	b.n	801738c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80173b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173b6:	f7ff bf4c 	b.w	8017252 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080173ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80173ba:	b570      	push	{r4, r5, r6, lr}
 80173bc:	2500      	movs	r5, #0
 80173be:	4295      	cmp	r5, r2
 80173c0:	d011      	beq.n	80173e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80173c2:	8bc4      	ldrh	r4, [r0, #30]
 80173c4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80173c8:	4414      	add	r4, r2
 80173ca:	3c01      	subs	r4, #1
 80173cc:	1b64      	subs	r4, r4, r5
 80173ce:	b2a4      	uxth	r4, r4
 80173d0:	2c01      	cmp	r4, #1
 80173d2:	bf88      	it	hi
 80173d4:	3c02      	subhi	r4, #2
 80173d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80173da:	8b64      	ldrh	r4, [r4, #26]
 80173dc:	42b4      	cmp	r4, r6
 80173de:	d117      	bne.n	8017410 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80173e0:	3501      	adds	r5, #1
 80173e2:	b2ad      	uxth	r5, r5
 80173e4:	e7eb      	b.n	80173be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80173e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80173ea:	2400      	movs	r4, #0
 80173ec:	4413      	add	r3, r2
 80173ee:	b2a2      	uxth	r2, r4
 80173f0:	429a      	cmp	r2, r3
 80173f2:	da0f      	bge.n	8017414 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80173f4:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80173f6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80173fa:	3401      	adds	r4, #1
 80173fc:	4432      	add	r2, r6
 80173fe:	b292      	uxth	r2, r2
 8017400:	2a09      	cmp	r2, #9
 8017402:	bf88      	it	hi
 8017404:	3a0a      	subhi	r2, #10
 8017406:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801740a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801740c:	42aa      	cmp	r2, r5
 801740e:	d0ee      	beq.n	80173ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017410:	2000      	movs	r0, #0
 8017412:	bd70      	pop	{r4, r5, r6, pc}
 8017414:	2001      	movs	r0, #1
 8017416:	e7fc      	b.n	8017412 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017418 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801741c:	4605      	mov	r5, r0
 801741e:	4616      	mov	r6, r2
 8017420:	1c8c      	adds	r4, r1, #2
 8017422:	8809      	ldrh	r1, [r1, #0]
 8017424:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017428:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801742c:	42b3      	cmp	r3, r6
 801742e:	d124      	bne.n	801747a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017430:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017434:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017438:	f001 070f 	and.w	r7, r1, #15
 801743c:	4652      	mov	r2, sl
 801743e:	f8cd 8000 	str.w	r8, [sp]
 8017442:	464b      	mov	r3, r9
 8017444:	4621      	mov	r1, r4
 8017446:	4628      	mov	r0, r5
 8017448:	f7ff ffb7 	bl	80173ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801744c:	4683      	mov	fp, r0
 801744e:	b168      	cbz	r0, 801746c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017450:	eb0a 0109 	add.w	r1, sl, r9
 8017454:	463a      	mov	r2, r7
 8017456:	4628      	mov	r0, r5
 8017458:	4441      	add	r1, r8
 801745a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801745e:	4649      	mov	r1, r9
 8017460:	f7ff ff52 	bl	8017308 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017464:	4658      	mov	r0, fp
 8017466:	b003      	add	sp, #12
 8017468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801746c:	eb07 010a 	add.w	r1, r7, sl
 8017470:	4449      	add	r1, r9
 8017472:	4441      	add	r1, r8
 8017474:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017478:	e7d2      	b.n	8017420 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801747a:	f04f 0b00 	mov.w	fp, #0
 801747e:	e7f1      	b.n	8017464 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017480 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017480:	b570      	push	{r4, r5, r6, lr}
 8017482:	8810      	ldrh	r0, [r2, #0]
 8017484:	4298      	cmp	r0, r3
 8017486:	d817      	bhi.n	80174b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017488:	1e48      	subs	r0, r1, #1
 801748a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801748e:	4298      	cmp	r0, r3
 8017490:	d312      	bcc.n	80174b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017492:	2400      	movs	r4, #0
 8017494:	428c      	cmp	r4, r1
 8017496:	d20f      	bcs.n	80174b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017498:	1860      	adds	r0, r4, r1
 801749a:	1040      	asrs	r0, r0, #1
 801749c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80174a0:	0085      	lsls	r5, r0, #2
 80174a2:	42b3      	cmp	r3, r6
 80174a4:	d902      	bls.n	80174ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80174a6:	3001      	adds	r0, #1
 80174a8:	b284      	uxth	r4, r0
 80174aa:	e7f3      	b.n	8017494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80174ac:	d201      	bcs.n	80174b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80174ae:	b281      	uxth	r1, r0
 80174b0:	e7f0      	b.n	8017494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80174b2:	442a      	add	r2, r5
 80174b4:	8850      	ldrh	r0, [r2, #2]
 80174b6:	bd70      	pop	{r4, r5, r6, pc}
 80174b8:	2000      	movs	r0, #0
 80174ba:	e7fc      	b.n	80174b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080174bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80174bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80174c2:	4604      	mov	r4, r0
 80174c4:	260b      	movs	r6, #11
 80174c6:	886f      	ldrh	r7, [r5, #2]
 80174c8:	087f      	lsrs	r7, r7, #1
 80174ca:	3e01      	subs	r6, #1
 80174cc:	d013      	beq.n	80174f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80174ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80174d0:	462a      	mov	r2, r5
 80174d2:	4639      	mov	r1, r7
 80174d4:	4620      	mov	r0, r4
 80174d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80174da:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80174de:	4643      	mov	r3, r8
 80174e0:	f7ff ffce 	bl	8017480 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80174e4:	b138      	cbz	r0, 80174f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80174e6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80174ea:	4642      	mov	r2, r8
 80174ec:	4620      	mov	r0, r4
 80174ee:	f7ff ff93 	bl	8017418 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80174f2:	2800      	cmp	r0, #0
 80174f4:	d1e9      	bne.n	80174ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80174f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080174fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80174fc:	b570      	push	{r4, r5, r6, lr}
 80174fe:	694a      	ldr	r2, [r1, #20]
 8017500:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017502:	684b      	ldr	r3, [r1, #4]
 8017504:	1b54      	subs	r4, r2, r5
 8017506:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017508:	f000 8106 	beq.w	8017718 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801750c:	1b9b      	subs	r3, r3, r6
 801750e:	d003      	beq.n	8017518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017510:	4363      	muls	r3, r4
 8017512:	2210      	movs	r2, #16
 8017514:	fb93 f3f2 	sdiv	r3, r3, r2
 8017518:	680c      	ldr	r4, [r1, #0]
 801751a:	698a      	ldr	r2, [r1, #24]
 801751c:	1b65      	subs	r5, r4, r5
 801751e:	f000 80fd 	beq.w	801771c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017522:	1b92      	subs	r2, r2, r6
 8017524:	d003      	beq.n	801752e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017526:	436a      	muls	r2, r5
 8017528:	2410      	movs	r4, #16
 801752a:	fb92 f2f4 	sdiv	r2, r2, r4
 801752e:	1a9b      	subs	r3, r3, r2
 8017530:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017758 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017538:	460a      	mov	r2, r1
 801753a:	ee07 3a90 	vmov	s15, r3
 801753e:	f100 040c 	add.w	r4, r0, #12
 8017542:	4603      	mov	r3, r0
 8017544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017548:	ee67 7a84 	vmul.f32	s15, s15, s8
 801754c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017550:	eeb1 6a43 	vneg.f32	s12, s6
 8017554:	edd2 7a02 	vldr	s15, [r2, #8]
 8017558:	3214      	adds	r2, #20
 801755a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801755e:	ece3 6a01 	vstmia	r3!, {s13}
 8017562:	429c      	cmp	r4, r3
 8017564:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017568:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801756c:	edc3 7a02 	vstr	s15, [r3, #8]
 8017570:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017578:	edc3 7a05 	vstr	s15, [r3, #20]
 801757c:	d1ea      	bne.n	8017554 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801757e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017580:	698b      	ldr	r3, [r1, #24]
 8017582:	edd0 4a02 	vldr	s9, [r0, #8]
 8017586:	1a9b      	subs	r3, r3, r2
 8017588:	edd0 3a00 	vldr	s7, [r0]
 801758c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017590:	ee07 3a90 	vmov	s15, r3
 8017594:	684b      	ldr	r3, [r1, #4]
 8017596:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801759a:	ed90 5a05 	vldr	s10, [r0, #20]
 801759e:	1a9b      	subs	r3, r3, r2
 80175a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80175a4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80175a8:	ed90 2a03 	vldr	s4, [r0, #12]
 80175ac:	ee07 3a10 	vmov	s14, r3
 80175b0:	edd0 5a04 	vldr	s11, [r0, #16]
 80175b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80175b8:	ed90 1a07 	vldr	s2, [r0, #28]
 80175bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175c0:	edd0 2a06 	vldr	s5, [r0, #24]
 80175c4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80175c8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80175cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175d0:	ee32 5a45 	vsub.f32	s10, s4, s10
 80175d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175d8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80175dc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80175e0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80175e2:	694a      	ldr	r2, [r1, #20]
 80175e4:	1b13      	subs	r3, r2, r4
 80175e6:	ee07 3a10 	vmov	s14, r3
 80175ea:	680b      	ldr	r3, [r1, #0]
 80175ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175f0:	1b1b      	subs	r3, r3, r4
 80175f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175f6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80175fa:	ee07 3a10 	vmov	s14, r3
 80175fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017602:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017606:	eee6 4a87 	vfma.f32	s9, s13, s14
 801760a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801760e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8017612:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017614:	698b      	ldr	r3, [r1, #24]
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	ee06 3a90 	vmov	s13, r3
 801761c:	684b      	ldr	r3, [r1, #4]
 801761e:	1a9b      	subs	r3, r3, r2
 8017620:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017624:	ee07 3a10 	vmov	s14, r3
 8017628:	ee66 6a84 	vmul.f32	s13, s13, s8
 801762c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017630:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017634:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017638:	eee5 6a87 	vfma.f32	s13, s11, s14
 801763c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017640:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8017644:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017646:	694a      	ldr	r2, [r1, #20]
 8017648:	1b13      	subs	r3, r2, r4
 801764a:	ee07 3a10 	vmov	s14, r3
 801764e:	680b      	ldr	r3, [r1, #0]
 8017650:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017654:	1b1b      	subs	r3, r3, r4
 8017656:	ee27 7a04 	vmul.f32	s14, s14, s8
 801765a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801765e:	ee07 3a10 	vmov	s14, r3
 8017662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017666:	ee27 7a04 	vmul.f32	s14, s14, s8
 801766a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801766e:	edd0 5a08 	vldr	s11, [r0, #32]
 8017672:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017676:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801767a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801767e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8017682:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017684:	698b      	ldr	r3, [r1, #24]
 8017686:	1a9b      	subs	r3, r3, r2
 8017688:	ee07 3a10 	vmov	s14, r3
 801768c:	684b      	ldr	r3, [r1, #4]
 801768e:	1a9b      	subs	r3, r3, r2
 8017690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017694:	ee01 3a90 	vmov	s3, r3
 8017698:	ee27 7a04 	vmul.f32	s14, s14, s8
 801769c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80176a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80176a4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80176a8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80176ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 80176b0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80176b4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80176b6:	694a      	ldr	r2, [r1, #20]
 80176b8:	1b13      	subs	r3, r2, r4
 80176ba:	ee03 3a10 	vmov	s6, r3
 80176be:	680b      	ldr	r3, [r1, #0]
 80176c0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80176c4:	1b1b      	subs	r3, r3, r4
 80176c6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80176ca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80176ce:	ee03 3a10 	vmov	s6, r3
 80176d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80176d6:	ee23 4a04 	vmul.f32	s8, s6, s8
 80176da:	eee1 5a04 	vfma.f32	s11, s2, s8
 80176de:	ee25 6a86 	vmul.f32	s12, s11, s12
 80176e2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80176e6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80176ea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80176ee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80176f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f6:	dd13      	ble.n	8017720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80176f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80176fc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017700:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8017702:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770e:	dd15      	ble.n	801773c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017714:	6403      	str	r3, [r0, #64]	@ 0x40
 8017716:	bd70      	pop	{r4, r5, r6, pc}
 8017718:	4623      	mov	r3, r4
 801771a:	e6fd      	b.n	8017518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801771c:	462a      	mov	r2, r5
 801771e:	e706      	b.n	801752e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017720:	d502      	bpl.n	8017728 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017722:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017726:	e7e9      	b.n	80176fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017728:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801772c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017730:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017738:	dade      	bge.n	80176f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801773a:	e7f2      	b.n	8017722 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801773c:	d502      	bpl.n	8017744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801773e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017742:	e7e7      	b.n	8017714 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017744:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017748:	eee3 4a86 	vfma.f32	s9, s7, s12
 801774c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017754:	dadc      	bge.n	8017710 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017756:	e7f2      	b.n	801773e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017758:	3d800000 	.word	0x3d800000

0801775c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017760:	2714      	movs	r7, #20
 8017762:	435f      	muls	r7, r3
 8017764:	eb02 0c07 	add.w	ip, r2, r7
 8017768:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801776c:	f115 0e0f 	adds.w	lr, r5, #15
 8017770:	f100 80a2 	bmi.w	80178b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017774:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017778:	9c08      	ldr	r4, [sp, #32]
 801777a:	2614      	movs	r6, #20
 801777c:	f8c0 e014 	str.w	lr, [r0, #20]
 8017780:	4366      	muls	r6, r4
 8017782:	eb02 0806 	add.w	r8, r2, r6
 8017786:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801778a:	f115 040f 	adds.w	r4, r5, #15
 801778e:	f100 809f 	bmi.w	80178d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017792:	1124      	asrs	r4, r4, #4
 8017794:	eba4 040e 	sub.w	r4, r4, lr
 8017798:	6184      	str	r4, [r0, #24]
 801779a:	2c00      	cmp	r4, #0
 801779c:	f000 808a 	beq.w	80178b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80177a0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80177a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80177a8:	5995      	ldr	r5, [r2, r6]
 80177aa:	eba4 0809 	sub.w	r8, r4, r9
 80177ae:	59d4      	ldr	r4, [r2, r7]
 80177b0:	eba5 0a04 	sub.w	sl, r5, r4
 80177b4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80177b8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80177bc:	fb0e fe05 	mul.w	lr, lr, r5
 80177c0:	fb0a ee19 	mls	lr, sl, r9, lr
 80177c4:	fb08 e404 	mla	r4, r8, r4, lr
 80177c8:	3c01      	subs	r4, #1
 80177ca:	19a4      	adds	r4, r4, r6
 80177cc:	f100 808c 	bmi.w	80178e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80177d0:	fb94 fef6 	sdiv	lr, r4, r6
 80177d4:	fb06 441e 	mls	r4, r6, lr, r4
 80177d8:	f8c0 e000 	str.w	lr, [r0]
 80177dc:	6104      	str	r4, [r0, #16]
 80177de:	2d00      	cmp	r5, #0
 80177e0:	f2c0 8095 	blt.w	801790e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80177e4:	fb95 f4f6 	sdiv	r4, r5, r6
 80177e8:	fb06 5514 	mls	r5, r6, r4, r5
 80177ec:	6044      	str	r4, [r0, #4]
 80177ee:	6085      	str	r5, [r0, #8]
 80177f0:	60c6      	str	r6, [r0, #12]
 80177f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80177f6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80177fa:	6945      	ldr	r5, [r0, #20]
 80177fc:	59d2      	ldr	r2, [r2, r7]
 80177fe:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8017802:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017930 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017806:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801780a:	ee07 4a10 	vmov	s14, r4
 801780e:	6804      	ldr	r4, [r0, #0]
 8017810:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017818:	ee07 2a90 	vmov	s15, r2
 801781c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017828:	edd3 6a00 	vldr	s13, [r3]
 801782c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017830:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8017834:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017838:	edc0 6a07 	vstr	s13, [r0, #28]
 801783c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017840:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8017844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017848:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801784c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017850:	ed80 6a08 	vstr	s12, [r0, #32]
 8017854:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8017856:	6242      	str	r2, [r0, #36]	@ 0x24
 8017858:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801785c:	ed93 6a03 	vldr	s12, [r3, #12]
 8017860:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017864:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017868:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801786c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8017870:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017874:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8017878:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801787c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8017880:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017882:	6302      	str	r2, [r0, #48]	@ 0x30
 8017884:	ed93 6a06 	vldr	s12, [r3, #24]
 8017888:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801788c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017890:	eeb0 7a46 	vmov.f32	s14, s12
 8017894:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8017898:	eea6 7a27 	vfma.f32	s14, s12, s15
 801789c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80178a0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80178a4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80178a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80178ac:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80178b0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80178b2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80178b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b8:	2410      	movs	r4, #16
 80178ba:	f1c5 0501 	rsb	r5, r5, #1
 80178be:	fb9e fef4 	sdiv	lr, lr, r4
 80178c2:	f015 050f 	ands.w	r5, r5, #15
 80178c6:	bf18      	it	ne
 80178c8:	2501      	movne	r5, #1
 80178ca:	ebae 0e05 	sub.w	lr, lr, r5
 80178ce:	e753      	b.n	8017778 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80178d0:	f04f 0910 	mov.w	r9, #16
 80178d4:	f1c5 0501 	rsb	r5, r5, #1
 80178d8:	fb94 f4f9 	sdiv	r4, r4, r9
 80178dc:	f015 050f 	ands.w	r5, r5, #15
 80178e0:	bf18      	it	ne
 80178e2:	2501      	movne	r5, #1
 80178e4:	1b64      	subs	r4, r4, r5
 80178e6:	e755      	b.n	8017794 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80178e8:	4264      	negs	r4, r4
 80178ea:	fb94 fef6 	sdiv	lr, r4, r6
 80178ee:	f1ce 0800 	rsb	r8, lr, #0
 80178f2:	fb06 441e 	mls	r4, r6, lr, r4
 80178f6:	f8c0 8000 	str.w	r8, [r0]
 80178fa:	6104      	str	r4, [r0, #16]
 80178fc:	2c00      	cmp	r4, #0
 80178fe:	f43f af6e 	beq.w	80177de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8017902:	ea6f 0e0e 	mvn.w	lr, lr
 8017906:	1b34      	subs	r4, r6, r4
 8017908:	f8c0 e000 	str.w	lr, [r0]
 801790c:	e766      	b.n	80177dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801790e:	426d      	negs	r5, r5
 8017910:	fb95 f4f6 	sdiv	r4, r5, r6
 8017914:	f1c4 0e00 	rsb	lr, r4, #0
 8017918:	fb06 5514 	mls	r5, r6, r4, r5
 801791c:	f8c0 e004 	str.w	lr, [r0, #4]
 8017920:	6085      	str	r5, [r0, #8]
 8017922:	2d00      	cmp	r5, #0
 8017924:	f43f af64 	beq.w	80177f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017928:	43e4      	mvns	r4, r4
 801792a:	1b75      	subs	r5, r6, r5
 801792c:	6044      	str	r4, [r0, #4]
 801792e:	e75e      	b.n	80177ee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017930:	3d800000 	.word	0x3d800000

08017934 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017934:	4b01      	ldr	r3, [pc, #4]	@ (801793c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017936:	6018      	str	r0, [r3, #0]
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop
 801793c:	2402541c 	.word	0x2402541c

08017940 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017940:	4b06      	ldr	r3, [pc, #24]	@ (801795c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8017942:	881a      	ldrh	r2, [r3, #0]
 8017944:	4282      	cmp	r2, r0
 8017946:	d807      	bhi.n	8017958 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017948:	4b05      	ldr	r3, [pc, #20]	@ (8017960 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801794a:	881b      	ldrh	r3, [r3, #0]
 801794c:	4413      	add	r3, r2
 801794e:	4298      	cmp	r0, r3
 8017950:	bfac      	ite	ge
 8017952:	2000      	movge	r0, #0
 8017954:	2001      	movlt	r0, #1
 8017956:	4770      	bx	lr
 8017958:	2000      	movs	r0, #0
 801795a:	4770      	bx	lr
 801795c:	2402543c 	.word	0x2402543c
 8017960:	24025440 	.word	0x24025440

08017964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017964:	b508      	push	{r3, lr}
 8017966:	4601      	mov	r1, r0
 8017968:	f7ff ffea 	bl	8017940 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801796c:	b118      	cbz	r0, 8017976 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801796e:	4b02      	ldr	r3, [pc, #8]	@ (8017978 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017976:	bd08      	pop	{r3, pc}
 8017978:	24025420 	.word	0x24025420

0801797c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801797c:	b538      	push	{r3, r4, r5, lr}
 801797e:	4604      	mov	r4, r0
 8017980:	f7ff ffde 	bl	8017940 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017984:	b1d8      	cbz	r0, 80179be <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017986:	4b0f      	ldr	r3, [pc, #60]	@ (80179c4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8017988:	881b      	ldrh	r3, [r3, #0]
 801798a:	1ae4      	subs	r4, r4, r3
 801798c:	230e      	movs	r3, #14
 801798e:	4363      	muls	r3, r4
 8017990:	4c0d      	ldr	r4, [pc, #52]	@ (80179c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8017992:	6825      	ldr	r5, [r4, #0]
 8017994:	18ea      	adds	r2, r5, r3
 8017996:	7b12      	ldrb	r2, [r2, #12]
 8017998:	f012 0220 	ands.w	r2, r2, #32
 801799c:	d010      	beq.n	80179c0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801799e:	f9b1 2000 	ldrsh.w	r2, [r1]
 80179a2:	52ea      	strh	r2, [r5, r3]
 80179a4:	6822      	ldr	r2, [r4, #0]
 80179a6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80179aa:	441a      	add	r2, r3
 80179ac:	8055      	strh	r5, [r2, #2]
 80179ae:	6822      	ldr	r2, [r4, #0]
 80179b0:	4413      	add	r3, r2
 80179b2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80179b6:	809a      	strh	r2, [r3, #4]
 80179b8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80179bc:	80da      	strh	r2, [r3, #6]
 80179be:	bd38      	pop	{r3, r4, r5, pc}
 80179c0:	4610      	mov	r0, r2
 80179c2:	e7fc      	b.n	80179be <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80179c4:	2402543c 	.word	0x2402543c
 80179c8:	24025424 	.word	0x24025424

080179cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80179cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80179d0:	4606      	mov	r6, r0
 80179d2:	460c      	mov	r4, r1
 80179d4:	f7ff ffb4 	bl	8017940 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80179d8:	b918      	cbnz	r0, 80179e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80179da:	2000      	movs	r0, #0
 80179dc:	b002      	add	sp, #8
 80179de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179e2:	4608      	mov	r0, r1
 80179e4:	f7f7 ff3d 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d1f6      	bne.n	80179da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80179ec:	4b3f      	ldr	r3, [pc, #252]	@ (8017aec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80179ee:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8017af0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80179f2:	881d      	ldrh	r5, [r3, #0]
 80179f4:	f8d9 a000 	ldr.w	sl, [r9]
 80179f8:	46c8      	mov	r8, r9
 80179fa:	1b73      	subs	r3, r6, r5
 80179fc:	250e      	movs	r5, #14
 80179fe:	435d      	muls	r5, r3
 8017a00:	eb0a 0705 	add.w	r7, sl, r5
 8017a04:	7b3b      	ldrb	r3, [r7, #12]
 8017a06:	f013 0f20 	tst.w	r3, #32
 8017a0a:	d0e6      	beq.n	80179da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4638      	mov	r0, r7
 8017a10:	f7fc fd14 	bl	801443c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d1e1      	bne.n	80179dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017a18:	4639      	mov	r1, r7
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	f7fc fd0e 	bl	801443c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017a20:	b108      	cbz	r0, 8017a26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8017a22:	4621      	mov	r1, r4
 8017a24:	e020      	b.n	8017a68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8017a26:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017a2a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d11e      	bne.n	8017a70 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a32:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d118      	bne.n	8017a70 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a3e:	6820      	ldr	r0, [r4, #0]
 8017a40:	466b      	mov	r3, sp
 8017a42:	6861      	ldr	r1, [r4, #4]
 8017a44:	c303      	stmia	r3!, {r0, r1}
 8017a46:	4639      	mov	r1, r7
 8017a48:	4668      	mov	r0, sp
 8017a4a:	f7fc fd1d 	bl	8014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a4e:	f8d9 3000 	ldr.w	r3, [r9]
 8017a52:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017a56:	442b      	add	r3, r5
 8017a58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017a5c:	4413      	add	r3, r2
 8017a5e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017a62:	4293      	cmp	r3, r2
 8017a64:	dc04      	bgt.n	8017a70 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a66:	4669      	mov	r1, sp
 8017a68:	4630      	mov	r0, r6
 8017a6a:	f7ff ff87 	bl	801797c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8017a6e:	e7b5      	b.n	80179dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017a70:	f8d8 3000 	ldr.w	r3, [r8]
 8017a74:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017a78:	442b      	add	r3, r5
 8017a7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017a7e:	4291      	cmp	r1, r2
 8017a80:	d119      	bne.n	8017ab6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017a82:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017a86:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017a8a:	4291      	cmp	r1, r2
 8017a8c:	d113      	bne.n	8017ab6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017a8e:	6820      	ldr	r0, [r4, #0]
 8017a90:	466a      	mov	r2, sp
 8017a92:	6861      	ldr	r1, [r4, #4]
 8017a94:	c203      	stmia	r2!, {r0, r1}
 8017a96:	4619      	mov	r1, r3
 8017a98:	4668      	mov	r0, sp
 8017a9a:	f7fc fcf5 	bl	8014488 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8017aa2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017aa6:	442b      	add	r3, r5
 8017aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017aac:	4413      	add	r3, r2
 8017aae:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	ddd7      	ble.n	8017a66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f7f7 fed3 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017abc:	b990      	cbnz	r0, 8017ae4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8017abe:	88a7      	ldrh	r7, [r4, #4]
 8017ac0:	88e3      	ldrh	r3, [r4, #6]
 8017ac2:	fb17 f703 	smulbb	r7, r7, r3
 8017ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8017aca:	441d      	add	r5, r3
 8017acc:	4628      	mov	r0, r5
 8017ace:	f7f7 fec8 	bl	800f862 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ad2:	b948      	cbnz	r0, 8017ae8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8017ad4:	88ab      	ldrh	r3, [r5, #4]
 8017ad6:	88ea      	ldrh	r2, [r5, #6]
 8017ad8:	fb13 f302 	smulbb	r3, r3, r2
 8017adc:	42bb      	cmp	r3, r7
 8017ade:	f6bf af7c 	bge.w	80179da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017ae2:	e79e      	b.n	8017a22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8017ae4:	2700      	movs	r7, #0
 8017ae6:	e7ee      	b.n	8017ac6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8017ae8:	2300      	movs	r3, #0
 8017aea:	e7f7      	b.n	8017adc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8017aec:	2402543c 	.word	0x2402543c
 8017af0:	24025424 	.word	0x24025424

08017af4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017af6:	4c24      	ldr	r4, [pc, #144]	@ (8017b88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d042      	beq.n	8017b84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017afe:	4a23      	ldr	r2, [pc, #140]	@ (8017b8c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017b00:	4d23      	ldr	r5, [pc, #140]	@ (8017b90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8017b02:	8811      	ldrh	r1, [r2, #0]
 8017b04:	f8b5 c000 	ldrh.w	ip, [r5]
 8017b08:	4822      	ldr	r0, [pc, #136]	@ (8017b94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017b0a:	4461      	add	r1, ip
 8017b0c:	1c4a      	adds	r2, r1, #1
 8017b0e:	008f      	lsls	r7, r1, #2
 8017b10:	f022 0201 	bic.w	r2, r2, #1
 8017b14:	19de      	adds	r6, r3, r7
 8017b16:	0412      	lsls	r2, r2, #16
 8017b18:	6006      	str	r6, [r0, #0]
 8017b1a:	4e1f      	ldr	r6, [pc, #124]	@ (8017b98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017b1c:	0c12      	lsrs	r2, r2, #16
 8017b1e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017b22:	19da      	adds	r2, r3, r7
 8017b24:	6032      	str	r2, [r6, #0]
 8017b26:	220e      	movs	r2, #14
 8017b28:	fb02 f20c 	mul.w	r2, r2, ip
 8017b2c:	3203      	adds	r2, #3
 8017b2e:	f022 0203 	bic.w	r2, r2, #3
 8017b32:	443a      	add	r2, r7
 8017b34:	4f19      	ldr	r7, [pc, #100]	@ (8017b9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017b36:	4413      	add	r3, r2
 8017b38:	603b      	str	r3, [r7, #0]
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	4f18      	ldr	r7, [pc, #96]	@ (8017ba0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017b3e:	469c      	mov	ip, r3
 8017b40:	803b      	strh	r3, [r7, #0]
 8017b42:	4f18      	ldr	r7, [pc, #96]	@ (8017ba4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017b44:	683f      	ldr	r7, [r7, #0]
 8017b46:	1aba      	subs	r2, r7, r2
 8017b48:	4f17      	ldr	r7, [pc, #92]	@ (8017ba8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017b4a:	603a      	str	r2, [r7, #0]
 8017b4c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017b50:	4a16      	ldr	r2, [pc, #88]	@ (8017bac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017b52:	8013      	strh	r3, [r2, #0]
 8017b54:	428b      	cmp	r3, r1
 8017b56:	d10d      	bne.n	8017b74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017b58:	882d      	ldrh	r5, [r5, #0]
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	6830      	ldr	r0, [r6, #0]
 8017b5e:	240e      	movs	r4, #14
 8017b60:	429d      	cmp	r5, r3
 8017b62:	d90f      	bls.n	8017b84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017b64:	fb04 0203 	mla	r2, r4, r3, r0
 8017b68:	3301      	adds	r3, #1
 8017b6a:	7b11      	ldrb	r1, [r2, #12]
 8017b6c:	f36f 1145 	bfc	r1, #5, #1
 8017b70:	7311      	strb	r1, [r2, #12]
 8017b72:	e7f5      	b.n	8017b60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017b74:	6822      	ldr	r2, [r4, #0]
 8017b76:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017b7a:	6802      	ldr	r2, [r0, #0]
 8017b7c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017b80:	3301      	adds	r3, #1
 8017b82:	e7e7      	b.n	8017b54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b86:	bf00      	nop
 8017b88:	24025420 	.word	0x24025420
 8017b8c:	2402543c 	.word	0x2402543c
 8017b90:	24025440 	.word	0x24025440
 8017b94:	24025434 	.word	0x24025434
 8017b98:	24025424 	.word	0x24025424
 8017b9c:	2402542c 	.word	0x2402542c
 8017ba0:	2402543e 	.word	0x2402543e
 8017ba4:	24025428 	.word	0x24025428
 8017ba8:	24025438 	.word	0x24025438
 8017bac:	24025430 	.word	0x24025430

08017bb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017bb0:	4b06      	ldr	r3, [pc, #24]	@ (8017bcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	b943      	cbnz	r3, 8017bc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017bb6:	b139      	cbz	r1, 8017bc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017bb8:	4b05      	ldr	r3, [pc, #20]	@ (8017bd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017bba:	801a      	strh	r2, [r3, #0]
 8017bbc:	4b05      	ldr	r3, [pc, #20]	@ (8017bd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017bbe:	6019      	str	r1, [r3, #0]
 8017bc0:	4b05      	ldr	r3, [pc, #20]	@ (8017bd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017bc2:	6018      	str	r0, [r3, #0]
 8017bc4:	f7ff bf96 	b.w	8017af4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	2402542c 	.word	0x2402542c
 8017bd0:	24025440 	.word	0x24025440
 8017bd4:	24025428 	.word	0x24025428
 8017bd8:	24025420 	.word	0x24025420

08017bdc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017bdc:	b470      	push	{r4, r5, r6}
 8017bde:	4c07      	ldr	r4, [pc, #28]	@ (8017bfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017be0:	4605      	mov	r5, r0
 8017be2:	4610      	mov	r0, r2
 8017be4:	9a03      	ldr	r2, [sp, #12]
 8017be6:	6826      	ldr	r6, [r4, #0]
 8017be8:	b936      	cbnz	r6, 8017bf8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017bea:	6025      	str	r5, [r4, #0]
 8017bec:	4c04      	ldr	r4, [pc, #16]	@ (8017c00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017bee:	8021      	strh	r1, [r4, #0]
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	bc70      	pop	{r4, r5, r6}
 8017bf4:	f7ff bfdc 	b.w	8017bb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017bf8:	bc70      	pop	{r4, r5, r6}
 8017bfa:	4770      	bx	lr
 8017bfc:	24025444 	.word	0x24025444
 8017c00:	2402543c 	.word	0x2402543c

08017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017c04:	4a12      	ldr	r2, [pc, #72]	@ (8017c50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8017c06:	8803      	ldrh	r3, [r0, #0]
 8017c08:	8812      	ldrh	r2, [r2, #0]
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d207      	bcs.n	8017c1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8017c0e:	4a11      	ldr	r2, [pc, #68]	@ (8017c54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8017c10:	2114      	movs	r1, #20
 8017c12:	6812      	ldr	r2, [r2, #0]
 8017c14:	fb01 2303 	mla	r3, r1, r3, r2
 8017c18:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017c1c:	4770      	bx	lr
 8017c1e:	490e      	ldr	r1, [pc, #56]	@ (8017c58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017c20:	8809      	ldrh	r1, [r1, #0]
 8017c22:	4411      	add	r1, r2
 8017c24:	428b      	cmp	r3, r1
 8017c26:	da04      	bge.n	8017c32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017c28:	1a9b      	subs	r3, r3, r2
 8017c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8017c5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017c2c:	210e      	movs	r1, #14
 8017c2e:	6812      	ldr	r2, [r2, #0]
 8017c30:	e7f0      	b.n	8017c14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017c32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c36:	4293      	cmp	r3, r2
 8017c38:	d108      	bne.n	8017c4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017c3a:	4b09      	ldr	r3, [pc, #36]	@ (8017c60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	b91b      	cbnz	r3, 8017c48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017c40:	4b08      	ldr	r3, [pc, #32]	@ (8017c64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017c42:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017c46:	4770      	bx	lr
 8017c48:	4b07      	ldr	r3, [pc, #28]	@ (8017c68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017c4a:	e7fa      	b.n	8017c42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017c4c:	2000      	movs	r0, #0
 8017c4e:	4770      	bx	lr
 8017c50:	2402543c 	.word	0x2402543c
 8017c54:	24025444 	.word	0x24025444
 8017c58:	24025440 	.word	0x24025440
 8017c5c:	24025424 	.word	0x24025424
 8017c60:	240253ac 	.word	0x240253ac
 8017c64:	240253ae 	.word	0x240253ae
 8017c68:	240253b0 	.word	0x240253b0

08017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017c6c:	4a12      	ldr	r2, [pc, #72]	@ (8017cb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017c6e:	8803      	ldrh	r3, [r0, #0]
 8017c70:	8812      	ldrh	r2, [r2, #0]
 8017c72:	4293      	cmp	r3, r2
 8017c74:	d207      	bcs.n	8017c86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017c76:	4a11      	ldr	r2, [pc, #68]	@ (8017cbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017c78:	2114      	movs	r1, #20
 8017c7a:	6812      	ldr	r2, [r2, #0]
 8017c7c:	fb01 2303 	mla	r3, r1, r3, r2
 8017c80:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017c84:	4770      	bx	lr
 8017c86:	490e      	ldr	r1, [pc, #56]	@ (8017cc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017c88:	8809      	ldrh	r1, [r1, #0]
 8017c8a:	4411      	add	r1, r2
 8017c8c:	428b      	cmp	r3, r1
 8017c8e:	da04      	bge.n	8017c9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017c90:	1a9b      	subs	r3, r3, r2
 8017c92:	4a0c      	ldr	r2, [pc, #48]	@ (8017cc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017c94:	210e      	movs	r1, #14
 8017c96:	6812      	ldr	r2, [r2, #0]
 8017c98:	e7f0      	b.n	8017c7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017c9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d108      	bne.n	8017cb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017ca2:	4b09      	ldr	r3, [pc, #36]	@ (8017cc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017ca4:	781b      	ldrb	r3, [r3, #0]
 8017ca6:	b91b      	cbnz	r3, 8017cb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017ca8:	4b08      	ldr	r3, [pc, #32]	@ (8017ccc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017caa:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017cae:	4770      	bx	lr
 8017cb0:	4b07      	ldr	r3, [pc, #28]	@ (8017cd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017cb2:	e7fa      	b.n	8017caa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	4770      	bx	lr
 8017cb8:	2402543c 	.word	0x2402543c
 8017cbc:	24025444 	.word	0x24025444
 8017cc0:	24025440 	.word	0x24025440
 8017cc4:	24025424 	.word	0x24025424
 8017cc8:	240253ac 	.word	0x240253ac
 8017ccc:	240253b0 	.word	0x240253b0
 8017cd0:	240253ae 	.word	0x240253ae

08017cd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017cd4:	4a22      	ldr	r2, [pc, #136]	@ (8017d60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8017cd6:	b530      	push	{r4, r5, lr}
 8017cd8:	880b      	ldrh	r3, [r1, #0]
 8017cda:	8812      	ldrh	r2, [r2, #0]
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d213      	bcs.n	8017d08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8017ce0:	4a20      	ldr	r2, [pc, #128]	@ (8017d64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017ce2:	2114      	movs	r1, #20
 8017ce4:	6812      	ldr	r2, [r2, #0]
 8017ce6:	fb01 2303 	mla	r3, r1, r3, r2
 8017cea:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017cee:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017cf2:	8a1a      	ldrh	r2, [r3, #16]
 8017cf4:	8a5b      	ldrh	r3, [r3, #18]
 8017cf6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017cfa:	8004      	strh	r4, [r0, #0]
 8017cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d00:	8041      	strh	r1, [r0, #2]
 8017d02:	8082      	strh	r2, [r0, #4]
 8017d04:	80c3      	strh	r3, [r0, #6]
 8017d06:	e024      	b.n	8017d52 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8017d08:	4917      	ldr	r1, [pc, #92]	@ (8017d68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017d0a:	8809      	ldrh	r1, [r1, #0]
 8017d0c:	4411      	add	r1, r2
 8017d0e:	428b      	cmp	r3, r1
 8017d10:	da10      	bge.n	8017d34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8017d12:	1a9b      	subs	r3, r3, r2
 8017d14:	220e      	movs	r2, #14
 8017d16:	4353      	muls	r3, r2
 8017d18:	4a14      	ldr	r2, [pc, #80]	@ (8017d6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017d1a:	6811      	ldr	r1, [r2, #0]
 8017d1c:	18ca      	adds	r2, r1, r3
 8017d1e:	5ecd      	ldrsh	r5, [r1, r3]
 8017d20:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8017d24:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017d28:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017d2c:	8005      	strh	r5, [r0, #0]
 8017d2e:	8044      	strh	r4, [r0, #2]
 8017d30:	8081      	strh	r1, [r0, #4]
 8017d32:	e7e7      	b.n	8017d04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017d34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d10b      	bne.n	8017d54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8017d70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017d3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017d42:	4b0c      	ldr	r3, [pc, #48]	@ (8017d74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017d44:	8081      	strh	r1, [r0, #4]
 8017d46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	80c2      	strh	r2, [r0, #6]
 8017d4e:	8003      	strh	r3, [r0, #0]
 8017d50:	8043      	strh	r3, [r0, #2]
 8017d52:	bd30      	pop	{r4, r5, pc}
 8017d54:	2300      	movs	r3, #0
 8017d56:	8003      	strh	r3, [r0, #0]
 8017d58:	8043      	strh	r3, [r0, #2]
 8017d5a:	8083      	strh	r3, [r0, #4]
 8017d5c:	e7d2      	b.n	8017d04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017d5e:	bf00      	nop
 8017d60:	2402543c 	.word	0x2402543c
 8017d64:	24025444 	.word	0x24025444
 8017d68:	24025440 	.word	0x24025440
 8017d6c:	24025424 	.word	0x24025424
 8017d70:	240253a8 	.word	0x240253a8
 8017d74:	240253aa 	.word	0x240253aa

08017d78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017d78:	4a17      	ldr	r2, [pc, #92]	@ (8017dd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8017d7a:	8803      	ldrh	r3, [r0, #0]
 8017d7c:	8812      	ldrh	r2, [r2, #0]
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d213      	bcs.n	8017daa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017d82:	4a16      	ldr	r2, [pc, #88]	@ (8017ddc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017d84:	2114      	movs	r1, #20
 8017d86:	6812      	ldr	r2, [r2, #0]
 8017d88:	fb01 2303 	mla	r3, r1, r3, r2
 8017d8c:	8a1a      	ldrh	r2, [r3, #16]
 8017d8e:	8919      	ldrh	r1, [r3, #8]
 8017d90:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017d94:	428a      	cmp	r2, r1
 8017d96:	db1d      	blt.n	8017dd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017d98:	8a58      	ldrh	r0, [r3, #18]
 8017d9a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017d9e:	895b      	ldrh	r3, [r3, #10]
 8017da0:	4298      	cmp	r0, r3
 8017da2:	bfac      	ite	ge
 8017da4:	2000      	movge	r0, #0
 8017da6:	2001      	movlt	r0, #1
 8017da8:	4770      	bx	lr
 8017daa:	490d      	ldr	r1, [pc, #52]	@ (8017de0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017dac:	8809      	ldrh	r1, [r1, #0]
 8017dae:	4411      	add	r1, r2
 8017db0:	428b      	cmp	r3, r1
 8017db2:	da0d      	bge.n	8017dd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017db4:	1a9b      	subs	r3, r3, r2
 8017db6:	4a0b      	ldr	r2, [pc, #44]	@ (8017de4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017db8:	210e      	movs	r1, #14
 8017dba:	6812      	ldr	r2, [r2, #0]
 8017dbc:	fb01 2303 	mla	r3, r1, r3, r2
 8017dc0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017dc4:	891a      	ldrh	r2, [r3, #8]
 8017dc6:	4291      	cmp	r1, r2
 8017dc8:	db04      	blt.n	8017dd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017dca:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017dce:	e7e6      	b.n	8017d9e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	4770      	bx	lr
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	4770      	bx	lr
 8017dd8:	2402543c 	.word	0x2402543c
 8017ddc:	24025444 	.word	0x24025444
 8017de0:	24025440 	.word	0x24025440
 8017de4:	24025424 	.word	0x24025424

08017de8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017de8:	4a12      	ldr	r2, [pc, #72]	@ (8017e34 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017dea:	8803      	ldrh	r3, [r0, #0]
 8017dec:	8811      	ldrh	r1, [r2, #0]
 8017dee:	428b      	cmp	r3, r1
 8017df0:	d20b      	bcs.n	8017e0a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017df2:	4a11      	ldr	r2, [pc, #68]	@ (8017e38 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017df4:	6812      	ldr	r2, [r2, #0]
 8017df6:	b112      	cbz	r2, 8017dfe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017df8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017dfc:	b9c0      	cbnz	r0, 8017e30 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8017e3c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017e00:	6811      	ldr	r1, [r2, #0]
 8017e02:	2214      	movs	r2, #20
 8017e04:	4353      	muls	r3, r2
 8017e06:	58c8      	ldr	r0, [r1, r3]
 8017e08:	4770      	bx	lr
 8017e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8017e40 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017e0c:	8812      	ldrh	r2, [r2, #0]
 8017e0e:	440a      	add	r2, r1
 8017e10:	4293      	cmp	r3, r2
 8017e12:	da04      	bge.n	8017e1e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017e14:	4a08      	ldr	r2, [pc, #32]	@ (8017e38 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017e16:	6812      	ldr	r2, [r2, #0]
 8017e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017e1c:	4770      	bx	lr
 8017e1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d103      	bne.n	8017e2e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017e26:	4b07      	ldr	r3, [pc, #28]	@ (8017e44 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017e2c:	4770      	bx	lr
 8017e2e:	2000      	movs	r0, #0
 8017e30:	4770      	bx	lr
 8017e32:	bf00      	nop
 8017e34:	2402543c 	.word	0x2402543c
 8017e38:	24025420 	.word	0x24025420
 8017e3c:	24025444 	.word	0x24025444
 8017e40:	24025440 	.word	0x24025440
 8017e44:	240253b4 	.word	0x240253b4

08017e48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017e48:	4b24      	ldr	r3, [pc, #144]	@ (8017edc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017e4a:	8802      	ldrh	r2, [r0, #0]
 8017e4c:	8818      	ldrh	r0, [r3, #0]
 8017e4e:	4282      	cmp	r2, r0
 8017e50:	d221      	bcs.n	8017e96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017e52:	4b23      	ldr	r3, [pc, #140]	@ (8017ee0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017e54:	6819      	ldr	r1, [r3, #0]
 8017e56:	2314      	movs	r3, #20
 8017e58:	fb03 1302 	mla	r3, r3, r2, r1
 8017e5c:	6858      	ldr	r0, [r3, #4]
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	d03a      	beq.n	8017ed8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e62:	4920      	ldr	r1, [pc, #128]	@ (8017ee4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017e64:	6809      	ldr	r1, [r1, #0]
 8017e66:	2900      	cmp	r1, #0
 8017e68:	d036      	beq.n	8017ed8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e6e:	2900      	cmp	r1, #0
 8017e70:	d032      	beq.n	8017ed8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e72:	891a      	ldrh	r2, [r3, #8]
 8017e74:	8958      	ldrh	r0, [r3, #10]
 8017e76:	4350      	muls	r0, r2
 8017e78:	7c5a      	ldrb	r2, [r3, #17]
 8017e7a:	7cdb      	ldrb	r3, [r3, #19]
 8017e7c:	0952      	lsrs	r2, r2, #5
 8017e7e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017e82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017e86:	2b0b      	cmp	r3, #11
 8017e88:	bf18      	it	ne
 8017e8a:	0040      	lslne	r0, r0, #1
 8017e8c:	3003      	adds	r0, #3
 8017e8e:	f020 0003 	bic.w	r0, r0, #3
 8017e92:	4408      	add	r0, r1
 8017e94:	4770      	bx	lr
 8017e96:	4b14      	ldr	r3, [pc, #80]	@ (8017ee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017e98:	881b      	ldrh	r3, [r3, #0]
 8017e9a:	4403      	add	r3, r0
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	da1a      	bge.n	8017ed6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017ea0:	4b12      	ldr	r3, [pc, #72]	@ (8017eec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017ea2:	1a10      	subs	r0, r2, r0
 8017ea4:	210e      	movs	r1, #14
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	fb01 3000 	mla	r0, r1, r0, r3
 8017eac:	7b03      	ldrb	r3, [r0, #12]
 8017eae:	f003 031f 	and.w	r3, r3, #31
 8017eb2:	2b0b      	cmp	r3, #11
 8017eb4:	d10b      	bne.n	8017ece <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017eb6:	8903      	ldrh	r3, [r0, #8]
 8017eb8:	8940      	ldrh	r0, [r0, #10]
 8017eba:	4358      	muls	r0, r3
 8017ebc:	4b09      	ldr	r3, [pc, #36]	@ (8017ee4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017ebe:	3003      	adds	r0, #3
 8017ec0:	6819      	ldr	r1, [r3, #0]
 8017ec2:	f020 0303 	bic.w	r3, r0, #3
 8017ec6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017eca:	4418      	add	r0, r3
 8017ecc:	4770      	bx	lr
 8017ece:	2b0d      	cmp	r3, #13
 8017ed0:	d101      	bne.n	8017ed6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017ed2:	300d      	adds	r0, #13
 8017ed4:	4770      	bx	lr
 8017ed6:	2000      	movs	r0, #0
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop
 8017edc:	2402543c 	.word	0x2402543c
 8017ee0:	24025444 	.word	0x24025444
 8017ee4:	24025420 	.word	0x24025420
 8017ee8:	24025440 	.word	0x24025440
 8017eec:	24025424 	.word	0x24025424

08017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8017f70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8017ef2:	b510      	push	{r4, lr}
 8017ef4:	8802      	ldrh	r2, [r0, #0]
 8017ef6:	881b      	ldrh	r3, [r3, #0]
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d21a      	bcs.n	8017f32 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8017efc:	4b1d      	ldr	r3, [pc, #116]	@ (8017f74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8017efe:	2114      	movs	r1, #20
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	fb01 3102 	mla	r1, r1, r2, r3
 8017f06:	7c4b      	ldrb	r3, [r1, #17]
 8017f08:	0958      	lsrs	r0, r3, #5
 8017f0a:	7ccb      	ldrb	r3, [r1, #19]
 8017f0c:	491a      	ldr	r1, [pc, #104]	@ (8017f78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8017f0e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017f12:	6809      	ldr	r1, [r1, #0]
 8017f14:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8017f18:	b2d8      	uxtb	r0, r3
 8017f1a:	b149      	cbz	r1, 8017f30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017f20:	b132      	cbz	r2, 8017f30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f22:	2b0e      	cmp	r3, #14
 8017f24:	d021      	beq.n	8017f6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f26:	280f      	cmp	r0, #15
 8017f28:	d01d      	beq.n	8017f66 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8017f2a:	2810      	cmp	r0, #16
 8017f2c:	bf08      	it	eq
 8017f2e:	2002      	moveq	r0, #2
 8017f30:	bd10      	pop	{r4, pc}
 8017f32:	4912      	ldr	r1, [pc, #72]	@ (8017f7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8017f34:	8809      	ldrh	r1, [r1, #0]
 8017f36:	4419      	add	r1, r3
 8017f38:	428a      	cmp	r2, r1
 8017f3a:	da09      	bge.n	8017f50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8017f3c:	1ad3      	subs	r3, r2, r3
 8017f3e:	4a10      	ldr	r2, [pc, #64]	@ (8017f80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8017f40:	210e      	movs	r1, #14
 8017f42:	6812      	ldr	r2, [r2, #0]
 8017f44:	fb01 2303 	mla	r3, r1, r3, r2
 8017f48:	7b18      	ldrb	r0, [r3, #12]
 8017f4a:	f000 001f 	and.w	r0, r0, #31
 8017f4e:	e7ef      	b.n	8017f30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f50:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d108      	bne.n	8017f6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f58:	f7eb ff84 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 8017f5c:	6803      	ldr	r3, [r0, #0]
 8017f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f64:	4718      	bx	r3
 8017f66:	2001      	movs	r0, #1
 8017f68:	e7e2      	b.n	8017f30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f6a:	2000      	movs	r0, #0
 8017f6c:	e7e0      	b.n	8017f30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f6e:	bf00      	nop
 8017f70:	2402543c 	.word	0x2402543c
 8017f74:	24025444 	.word	0x24025444
 8017f78:	24025420 	.word	0x24025420
 8017f7c:	24025440 	.word	0x24025440
 8017f80:	24025424 	.word	0x24025424

08017f84 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8017f84:	2018      	movs	r0, #24
 8017f86:	4770      	bx	lr

08017f88 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017f88:	2001      	movs	r0, #1
 8017f8a:	4770      	bx	lr

08017f8c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017f8c:	4b02      	ldr	r3, [pc, #8]	@ (8017f98 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8017f8e:	8818      	ldrh	r0, [r3, #0]
 8017f90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017f94:	b280      	uxth	r0, r0
 8017f96:	4770      	bx	lr
 8017f98:	240253ae 	.word	0x240253ae

08017f9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017f9c:	2bff      	cmp	r3, #255	@ 0xff
 8017f9e:	d04c      	beq.n	801803a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017fa0:	2a2c      	cmp	r2, #44	@ 0x2c
 8017fa2:	d030      	beq.n	8018006 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8017fa4:	d80f      	bhi.n	8017fc6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8017fa6:	2a08      	cmp	r2, #8
 8017fa8:	d043      	beq.n	8018032 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017faa:	d805      	bhi.n	8017fb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8017fac:	2a04      	cmp	r2, #4
 8017fae:	d03e      	beq.n	801802e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017fb0:	2a05      	cmp	r2, #5
 8017fb2:	d03a      	beq.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	e024      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fb8:	2a0a      	cmp	r2, #10
 8017fba:	d03a      	beq.n	8018032 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017fbc:	d301      	bcc.n	8017fc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8017fbe:	2a0b      	cmp	r2, #11
 8017fc0:	d1f8      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fc2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8017fc4:	e01d      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fc6:	2a30      	cmp	r2, #48	@ 0x30
 8017fc8:	d035      	beq.n	8018036 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017fca:	d80a      	bhi.n	8017fe2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8017fcc:	2a2e      	cmp	r2, #46	@ 0x2e
 8017fce:	684b      	ldr	r3, [r1, #4]
 8017fd0:	d023      	beq.n	801801a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017fd2:	d90d      	bls.n	8017ff0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8017fd4:	781a      	ldrb	r2, [r3, #0]
 8017fd6:	785b      	ldrb	r3, [r3, #1]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d1eb      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fdc:	b98a      	cbnz	r2, 8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fde:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017fe0:	e00f      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fe2:	2a32      	cmp	r2, #50	@ 0x32
 8017fe4:	d027      	beq.n	8018036 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017fe6:	d301      	bcc.n	8017fec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8017fe8:	2a33      	cmp	r2, #51	@ 0x33
 8017fea:	d1e3      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8017fee:	e008      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017ff0:	781a      	ldrb	r2, [r3, #0]
 8017ff2:	785b      	ldrb	r3, [r3, #1]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d1dd      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017ff8:	2a00      	cmp	r2, #0
 8017ffa:	d0f0      	beq.n	8017fde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8017ffc:	2a01      	cmp	r2, #1
 8017ffe:	d1d9      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018000:	6943      	ldr	r3, [r0, #20]
 8018002:	4618      	mov	r0, r3
 8018004:	4770      	bx	lr
 8018006:	684b      	ldr	r3, [r1, #4]
 8018008:	781a      	ldrb	r2, [r3, #0]
 801800a:	785b      	ldrb	r3, [r3, #1]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1d1      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018010:	b14a      	cbz	r2, 8018026 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8018012:	2a01      	cmp	r2, #1
 8018014:	bf08      	it	eq
 8018016:	68c3      	ldreq	r3, [r0, #12]
 8018018:	e7f3      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801801a:	781a      	ldrb	r2, [r3, #0]
 801801c:	785b      	ldrb	r3, [r3, #1]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1c8      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018022:	2a00      	cmp	r2, #0
 8018024:	d1ed      	bne.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018026:	69c3      	ldr	r3, [r0, #28]
 8018028:	e7eb      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801802a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801802c:	e7e9      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801802e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018030:	e7e7      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018032:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018034:	e7e5      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018036:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018038:	e7e3      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801803a:	2a2c      	cmp	r2, #44	@ 0x2c
 801803c:	d030      	beq.n	80180a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801803e:	d80f      	bhi.n	8018060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8018040:	2a08      	cmp	r2, #8
 8018042:	d042      	beq.n	80180ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018044:	d805      	bhi.n	8018052 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8018046:	2a04      	cmp	r2, #4
 8018048:	d03d      	beq.n	80180c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801804a:	2a05      	cmp	r2, #5
 801804c:	d1b2      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801804e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018050:	e7d7      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018052:	2a0a      	cmp	r2, #10
 8018054:	d039      	beq.n	80180ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018056:	d301      	bcc.n	801805c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018058:	2a0b      	cmp	r2, #11
 801805a:	d1ab      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801805c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801805e:	e7d0      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018060:	2a30      	cmp	r2, #48	@ 0x30
 8018062:	d034      	beq.n	80180ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018064:	d80b      	bhi.n	801807e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8018066:	2a2e      	cmp	r2, #46	@ 0x2e
 8018068:	684b      	ldr	r3, [r1, #4]
 801806a:	d023      	beq.n	80180b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801806c:	d90e      	bls.n	801808c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801806e:	781a      	ldrb	r2, [r3, #0]
 8018070:	785b      	ldrb	r3, [r3, #1]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d19e      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018076:	2a00      	cmp	r2, #0
 8018078:	d1c3      	bne.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801807a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801807c:	e7c1      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801807e:	2a32      	cmp	r2, #50	@ 0x32
 8018080:	d025      	beq.n	80180ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018082:	d301      	bcc.n	8018088 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018084:	2a33      	cmp	r2, #51	@ 0x33
 8018086:	d195      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018088:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801808a:	e7ba      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801808c:	781a      	ldrb	r2, [r3, #0]
 801808e:	785b      	ldrb	r3, [r3, #1]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d18f      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018094:	2a00      	cmp	r2, #0
 8018096:	d0f0      	beq.n	801807a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8018098:	2a01      	cmp	r2, #1
 801809a:	d18b      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801809c:	6983      	ldr	r3, [r0, #24]
 801809e:	e7b0      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180a0:	684b      	ldr	r3, [r1, #4]
 80180a2:	781a      	ldrb	r2, [r3, #0]
 80180a4:	785b      	ldrb	r3, [r3, #1]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d184      	bne.n	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180aa:	b152      	cbz	r2, 80180c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80180ac:	2a01      	cmp	r2, #1
 80180ae:	bf08      	it	eq
 80180b0:	6903      	ldreq	r3, [r0, #16]
 80180b2:	e7a6      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180b4:	781a      	ldrb	r2, [r3, #0]
 80180b6:	785b      	ldrb	r3, [r3, #1]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	f47f af7b 	bne.w	8017fb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180be:	2a00      	cmp	r2, #0
 80180c0:	d19f      	bne.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180c2:	6a03      	ldr	r3, [r0, #32]
 80180c4:	e79d      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80180c8:	e79b      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80180cc:	e799      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ce:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80180d0:	e797      	b.n	8018002 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080180d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d6:	b085      	sub	sp, #20
 80180d8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80180da:	9203      	str	r2, [sp, #12]
 80180dc:	6870      	ldr	r0, [r6, #4]
 80180de:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80180e2:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80180e6:	9101      	str	r1, [sp, #4]
 80180e8:	fa1f f885 	uxth.w	r8, r5
 80180ec:	43ed      	mvns	r5, r5
 80180ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80180f2:	b2ed      	uxtb	r5, r5
 80180f4:	fb00 2404 	mla	r4, r0, r4, r2
 80180f8:	6832      	ldr	r2, [r6, #0]
 80180fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80180fe:	4414      	add	r4, r2
 8018100:	f8dc 2000 	ldr.w	r2, [ip]
 8018104:	9202      	str	r2, [sp, #8]
 8018106:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801810a:	f102 0e04 	add.w	lr, r2, #4
 801810e:	9a01      	ldr	r2, [sp, #4]
 8018110:	2a00      	cmp	r2, #0
 8018112:	dc03      	bgt.n	801811c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018114:	9a03      	ldr	r2, [sp, #12]
 8018116:	2a00      	cmp	r2, #0
 8018118:	f340 8116 	ble.w	8018348 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801811c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801811e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018122:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018126:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018128:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801812c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018130:	2b00      	cmp	r3, #0
 8018132:	dd0e      	ble.n	8018152 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018134:	1406      	asrs	r6, r0, #16
 8018136:	d405      	bmi.n	8018144 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018138:	4556      	cmp	r6, sl
 801813a:	da03      	bge.n	8018144 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801813c:	1416      	asrs	r6, r2, #16
 801813e:	d401      	bmi.n	8018144 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018140:	454e      	cmp	r6, r9
 8018142:	db07      	blt.n	8018154 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018144:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018146:	3b01      	subs	r3, #1
 8018148:	3403      	adds	r4, #3
 801814a:	4430      	add	r0, r6
 801814c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801814e:	4432      	add	r2, r6
 8018150:	e7ee      	b.n	8018130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018152:	d063      	beq.n	801821c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018154:	1e5e      	subs	r6, r3, #1
 8018156:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018158:	fb07 0706 	mla	r7, r7, r6, r0
 801815c:	143f      	asrs	r7, r7, #16
 801815e:	d454      	bmi.n	801820a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018160:	4557      	cmp	r7, sl
 8018162:	da52      	bge.n	801820a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018164:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018166:	fb07 2606 	mla	r6, r7, r6, r2
 801816a:	1436      	asrs	r6, r6, #16
 801816c:	d44d      	bmi.n	801820a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801816e:	454e      	cmp	r6, r9
 8018170:	da4b      	bge.n	801820a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018172:	1ce6      	adds	r6, r4, #3
 8018174:	4699      	mov	r9, r3
 8018176:	f1b9 0f00 	cmp.w	r9, #0
 801817a:	f106 0603 	add.w	r6, r6, #3
 801817e:	dd48      	ble.n	8018212 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018180:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018184:	1417      	asrs	r7, r2, #16
 8018186:	9902      	ldr	r1, [sp, #8]
 8018188:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801818c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018190:	fb0b 1707 	mla	r7, fp, r7, r1
 8018194:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018198:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801819a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801819e:	fb1b fb05 	smulbb	fp, fp, r5
 80181a2:	4408      	add	r0, r1
 80181a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80181a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80181aa:	440a      	add	r2, r1
 80181ac:	eb0e 0a07 	add.w	sl, lr, r7
 80181b0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80181b4:	fb07 b708 	mla	r7, r7, r8, fp
 80181b8:	b2bf      	uxth	r7, r7
 80181ba:	f107 0b01 	add.w	fp, r7, #1
 80181be:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80181c2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80181c6:	fb1b fb05 	smulbb	fp, fp, r5
 80181ca:	123f      	asrs	r7, r7, #8
 80181cc:	f806 7c06 	strb.w	r7, [r6, #-6]
 80181d0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80181d4:	fb07 b708 	mla	r7, r7, r8, fp
 80181d8:	b2bf      	uxth	r7, r7
 80181da:	f107 0b01 	add.w	fp, r7, #1
 80181de:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80181e2:	123f      	asrs	r7, r7, #8
 80181e4:	f806 7c05 	strb.w	r7, [r6, #-5]
 80181e8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80181ec:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80181f0:	fb1a fa05 	smulbb	sl, sl, r5
 80181f4:	fb07 a708 	mla	r7, r7, r8, sl
 80181f8:	b2bf      	uxth	r7, r7
 80181fa:	f107 0a01 	add.w	sl, r7, #1
 80181fe:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018202:	123f      	asrs	r7, r7, #8
 8018204:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018208:	e7b5      	b.n	8018176 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801820a:	2700      	movs	r7, #0
 801820c:	1bde      	subs	r6, r3, r7
 801820e:	2e00      	cmp	r6, #0
 8018210:	dc42      	bgt.n	8018298 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8018212:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801821a:	441c      	add	r4, r3
 801821c:	9b01      	ldr	r3, [sp, #4]
 801821e:	2b00      	cmp	r3, #0
 8018220:	f340 8092 	ble.w	8018348 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801822a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801822e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018232:	eef0 6a62 	vmov.f32	s13, s5
 8018236:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801823a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801823e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018242:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8018246:	eef0 6a43 	vmov.f32	s13, s6
 801824a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801824e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8018252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018256:	ee61 7a27 	vmul.f32	s15, s2, s15
 801825a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801825e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018262:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018266:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801826a:	ee12 2a90 	vmov	r2, s5
 801826e:	eef0 2a47 	vmov.f32	s5, s14
 8018272:	fb92 f3f3 	sdiv	r3, r2, r3
 8018276:	ee13 2a10 	vmov	r2, s6
 801827a:	9311      	str	r3, [sp, #68]	@ 0x44
 801827c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801827e:	eeb0 3a67 	vmov.f32	s6, s15
 8018282:	fb92 f3f3 	sdiv	r3, r2, r3
 8018286:	9312      	str	r3, [sp, #72]	@ 0x48
 8018288:	9b01      	ldr	r3, [sp, #4]
 801828a:	9a03      	ldr	r2, [sp, #12]
 801828c:	3b01      	subs	r3, #1
 801828e:	9301      	str	r3, [sp, #4]
 8018290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018292:	bf08      	it	eq
 8018294:	4613      	moveq	r3, r2
 8018296:	e73a      	b.n	801810e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018298:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801829c:	d44e      	bmi.n	801833c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801829e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80182a2:	4556      	cmp	r6, sl
 80182a4:	dd4a      	ble.n	801833c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182a6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80182aa:	d447      	bmi.n	801833c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182ac:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80182b0:	4559      	cmp	r1, fp
 80182b2:	dd43      	ble.n	801833c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182b4:	fa0f f986 	sxth.w	r9, r6
 80182b8:	9902      	ldr	r1, [sp, #8]
 80182ba:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80182be:	fb0b 1909 	mla	r9, fp, r9, r1
 80182c2:	f814 b006 	ldrb.w	fp, [r4, r6]
 80182c6:	f819 900a 	ldrb.w	r9, [r9, sl]
 80182ca:	fb1b fb05 	smulbb	fp, fp, r5
 80182ce:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80182d2:	eb0e 0a09 	add.w	sl, lr, r9
 80182d6:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80182da:	fb09 b908 	mla	r9, r9, r8, fp
 80182de:	fa1f f989 	uxth.w	r9, r9
 80182e2:	f109 0b01 	add.w	fp, r9, #1
 80182e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80182ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182ee:	f804 9006 	strb.w	r9, [r4, r6]
 80182f2:	4426      	add	r6, r4
 80182f4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80182f8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80182fc:	fb1b fb05 	smulbb	fp, fp, r5
 8018300:	fb09 b908 	mla	r9, r9, r8, fp
 8018304:	fa1f f989 	uxth.w	r9, r9
 8018308:	f109 0b01 	add.w	fp, r9, #1
 801830c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018310:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018314:	f886 9001 	strb.w	r9, [r6, #1]
 8018318:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801831c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018320:	fb1a fa05 	smulbb	sl, sl, r5
 8018324:	fb09 a908 	mla	r9, r9, r8, sl
 8018328:	fa1f f989 	uxth.w	r9, r9
 801832c:	f109 0a01 	add.w	sl, r9, #1
 8018330:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018334:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018338:	f886 9002 	strb.w	r9, [r6, #2]
 801833c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801833e:	3701      	adds	r7, #1
 8018340:	4408      	add	r0, r1
 8018342:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018344:	440a      	add	r2, r1
 8018346:	e761      	b.n	801820c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018348:	b005      	add	sp, #20
 801834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801834e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801834e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018352:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018354:	4693      	mov	fp, r2
 8018356:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018358:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801835c:	6868      	ldr	r0, [r5, #4]
 801835e:	6877      	ldr	r7, [r6, #4]
 8018360:	9100      	str	r1, [sp, #0]
 8018362:	3704      	adds	r7, #4
 8018364:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018368:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801836c:	fb00 2404 	mla	r4, r0, r4, r2
 8018370:	682a      	ldr	r2, [r5, #0]
 8018372:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018376:	4414      	add	r4, r2
 8018378:	6832      	ldr	r2, [r6, #0]
 801837a:	9201      	str	r2, [sp, #4]
 801837c:	9a00      	ldr	r2, [sp, #0]
 801837e:	2a00      	cmp	r2, #0
 8018380:	dc03      	bgt.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018382:	f1bb 0f00 	cmp.w	fp, #0
 8018386:	f340 80bc 	ble.w	8018502 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801838a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801838c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8018390:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018396:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801839a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801839e:	2b00      	cmp	r3, #0
 80183a0:	dd0c      	ble.n	80183bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80183a2:	1405      	asrs	r5, r0, #16
 80183a4:	d405      	bmi.n	80183b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183a6:	4555      	cmp	r5, sl
 80183a8:	da03      	bge.n	80183b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183aa:	1415      	asrs	r5, r2, #16
 80183ac:	d401      	bmi.n	80183b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183ae:	454d      	cmp	r5, r9
 80183b0:	db05      	blt.n	80183be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80183b2:	4440      	add	r0, r8
 80183b4:	4472      	add	r2, lr
 80183b6:	3b01      	subs	r3, #1
 80183b8:	3403      	adds	r4, #3
 80183ba:	e7f0      	b.n	801839e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80183bc:	d03f      	beq.n	801843e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80183be:	1e5d      	subs	r5, r3, #1
 80183c0:	fb08 0c05 	mla	ip, r8, r5, r0
 80183c4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80183c8:	d42e      	bmi.n	8018428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183ca:	45d4      	cmp	ip, sl
 80183cc:	da2c      	bge.n	8018428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183ce:	fb0e 2505 	mla	r5, lr, r5, r2
 80183d2:	142d      	asrs	r5, r5, #16
 80183d4:	d428      	bmi.n	8018428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183d6:	454d      	cmp	r5, r9
 80183d8:	da26      	bge.n	8018428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183da:	1ce5      	adds	r5, r4, #3
 80183dc:	469c      	mov	ip, r3
 80183de:	f1bc 0f00 	cmp.w	ip, #0
 80183e2:	f105 0503 	add.w	r5, r5, #3
 80183e6:	dd25      	ble.n	8018434 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80183e8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80183ec:	ea4f 4922 	mov.w	r9, r2, asr #16
 80183f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80183f4:	4472      	add	r2, lr
 80183f6:	468a      	mov	sl, r1
 80183f8:	9901      	ldr	r1, [sp, #4]
 80183fa:	fb0a 1909 	mla	r9, sl, r9, r1
 80183fe:	1401      	asrs	r1, r0, #16
 8018400:	4440      	add	r0, r8
 8018402:	f819 9001 	ldrb.w	r9, [r9, r1]
 8018406:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801840a:	eb07 0a09 	add.w	sl, r7, r9
 801840e:	f817 9009 	ldrb.w	r9, [r7, r9]
 8018412:	f805 9c06 	strb.w	r9, [r5, #-6]
 8018416:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801841a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801841e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018422:	f805 9c04 	strb.w	r9, [r5, #-4]
 8018426:	e7da      	b.n	80183de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018428:	2500      	movs	r5, #0
 801842a:	eba3 0c05 	sub.w	ip, r3, r5
 801842e:	f1bc 0f00 	cmp.w	ip, #0
 8018432:	dc3b      	bgt.n	80184ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018438:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801843c:	441c      	add	r4, r3
 801843e:	9b00      	ldr	r3, [sp, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	dd5e      	ble.n	8018502 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018444:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801844a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801844e:	eeb0 6a62 	vmov.f32	s12, s5
 8018452:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018456:	ee31 1a05 	vadd.f32	s2, s2, s10
 801845a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801845e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018462:	eeb0 6a43 	vmov.f32	s12, s6
 8018466:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801846a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801846e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018472:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018476:	ee77 2a62 	vsub.f32	s5, s14, s5
 801847a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801847e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018482:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018486:	ee12 2a90 	vmov	r2, s5
 801848a:	eef0 2a47 	vmov.f32	s5, s14
 801848e:	fb92 f8f3 	sdiv	r8, r2, r3
 8018492:	ee13 2a10 	vmov	r2, s6
 8018496:	eeb0 3a67 	vmov.f32	s6, s15
 801849a:	fb92 fef3 	sdiv	lr, r2, r3
 801849e:	9b00      	ldr	r3, [sp, #0]
 80184a0:	3b01      	subs	r3, #1
 80184a2:	9300      	str	r3, [sp, #0]
 80184a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184a6:	bf08      	it	eq
 80184a8:	465b      	moveq	r3, fp
 80184aa:	e767      	b.n	801837c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80184ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 80184b0:	d423      	bmi.n	80184fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184b2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80184b6:	45cc      	cmp	ip, r9
 80184b8:	dd1f      	ble.n	80184fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80184be:	d41c      	bmi.n	80184fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184c0:	68f1      	ldr	r1, [r6, #12]
 80184c2:	4551      	cmp	r1, sl
 80184c4:	dd19      	ble.n	80184fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184c6:	fa0f fc8c 	sxth.w	ip, ip
 80184ca:	9901      	ldr	r1, [sp, #4]
 80184cc:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80184d0:	f81c c009 	ldrb.w	ip, [ip, r9]
 80184d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80184d8:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80184dc:	eb07 090c 	add.w	r9, r7, ip
 80184e0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80184e4:	f804 a00c 	strb.w	sl, [r4, ip]
 80184e8:	44a4      	add	ip, r4
 80184ea:	f899 a001 	ldrb.w	sl, [r9, #1]
 80184ee:	f88c a001 	strb.w	sl, [ip, #1]
 80184f2:	f899 9002 	ldrb.w	r9, [r9, #2]
 80184f6:	f88c 9002 	strb.w	r9, [ip, #2]
 80184fa:	4440      	add	r0, r8
 80184fc:	4472      	add	r2, lr
 80184fe:	3501      	adds	r5, #1
 8018500:	e793      	b.n	801842a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8018502:	b003      	add	sp, #12
 8018504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018508 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801850c:	b085      	sub	sp, #20
 801850e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018512:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018514:	9202      	str	r2, [sp, #8]
 8018516:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801851a:	6860      	ldr	r0, [r4, #4]
 801851c:	9203      	str	r2, [sp, #12]
 801851e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018522:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018526:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801852a:	fb00 2505 	mla	r5, r0, r5, r2
 801852e:	6822      	ldr	r2, [r4, #0]
 8018530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018534:	4415      	add	r5, r2
 8018536:	f8dc 2000 	ldr.w	r2, [ip]
 801853a:	9200      	str	r2, [sp, #0]
 801853c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018540:	3204      	adds	r2, #4
 8018542:	9201      	str	r2, [sp, #4]
 8018544:	2900      	cmp	r1, #0
 8018546:	dc03      	bgt.n	8018550 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018548:	9a02      	ldr	r2, [sp, #8]
 801854a:	2a00      	cmp	r2, #0
 801854c:	f340 8127 	ble.w	801879e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018550:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018552:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018556:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801855a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801855c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018560:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018564:	2b00      	cmp	r3, #0
 8018566:	dd0d      	ble.n	8018584 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018568:	1422      	asrs	r2, r4, #16
 801856a:	d405      	bmi.n	8018578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801856c:	4542      	cmp	r2, r8
 801856e:	da03      	bge.n	8018578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018570:	1402      	asrs	r2, r0, #16
 8018572:	d401      	bmi.n	8018578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018574:	42ba      	cmp	r2, r7
 8018576:	db06      	blt.n	8018586 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018578:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801857a:	4474      	add	r4, lr
 801857c:	3b01      	subs	r3, #1
 801857e:	3503      	adds	r5, #3
 8018580:	4410      	add	r0, r2
 8018582:	e7ef      	b.n	8018564 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018584:	d075      	beq.n	8018672 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018586:	1e5a      	subs	r2, r3, #1
 8018588:	fb0e 4602 	mla	r6, lr, r2, r4
 801858c:	1436      	asrs	r6, r6, #16
 801858e:	d465      	bmi.n	801865c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018590:	4546      	cmp	r6, r8
 8018592:	da63      	bge.n	801865c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018594:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018596:	fb06 0202 	mla	r2, r6, r2, r0
 801859a:	1412      	asrs	r2, r2, #16
 801859c:	d45e      	bmi.n	801865c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801859e:	42ba      	cmp	r2, r7
 80185a0:	da5c      	bge.n	801865c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80185a2:	1cef      	adds	r7, r5, #3
 80185a4:	4699      	mov	r9, r3
 80185a6:	f1b9 0f00 	cmp.w	r9, #0
 80185aa:	dd5d      	ble.n	8018668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80185ac:	1402      	asrs	r2, r0, #16
 80185ae:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80185b2:	1426      	asrs	r6, r4, #16
 80185b4:	4692      	mov	sl, r2
 80185b6:	9a00      	ldr	r2, [sp, #0]
 80185b8:	fb08 220a 	mla	r2, r8, sl, r2
 80185bc:	5d92      	ldrb	r2, [r2, r6]
 80185be:	9e01      	ldr	r6, [sp, #4]
 80185c0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80185c4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80185c8:	d041      	beq.n	801864e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80185ca:	9a03      	ldr	r2, [sp, #12]
 80185cc:	fa5f fb86 	uxtb.w	fp, r6
 80185d0:	fb02 f808 	mul.w	r8, r2, r8
 80185d4:	f108 0201 	add.w	r2, r8, #1
 80185d8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80185dc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80185e0:	1212      	asrs	r2, r2, #8
 80185e2:	fa1f fa82 	uxth.w	sl, r2
 80185e6:	43d2      	mvns	r2, r2
 80185e8:	fb1b fb0a 	smulbb	fp, fp, sl
 80185ec:	b2d2      	uxtb	r2, r2
 80185ee:	fb08 b802 	mla	r8, r8, r2, fp
 80185f2:	fa1f f888 	uxth.w	r8, r8
 80185f6:	f108 0b01 	add.w	fp, r8, #1
 80185fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80185fe:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018602:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018606:	fb1b fb0a 	smulbb	fp, fp, sl
 801860a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801860e:	fb16 fa0a 	smulbb	sl, r6, sl
 8018612:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018616:	f807 8c03 	strb.w	r8, [r7, #-3]
 801861a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801861e:	fb06 aa02 	mla	sl, r6, r2, sl
 8018622:	fb08 b802 	mla	r8, r8, r2, fp
 8018626:	fa1f fa8a 	uxth.w	sl, sl
 801862a:	fa1f f888 	uxth.w	r8, r8
 801862e:	f10a 0601 	add.w	r6, sl, #1
 8018632:	f108 0b01 	add.w	fp, r8, #1
 8018636:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801863a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801863e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018642:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018646:	f807 ac01 	strb.w	sl, [r7, #-1]
 801864a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801864e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018650:	4474      	add	r4, lr
 8018652:	3703      	adds	r7, #3
 8018654:	f109 39ff 	add.w	r9, r9, #4294967295
 8018658:	4410      	add	r0, r2
 801865a:	e7a4      	b.n	80185a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801865c:	f04f 0800 	mov.w	r8, #0
 8018660:	eba3 0208 	sub.w	r2, r3, r8
 8018664:	2a00      	cmp	r2, #0
 8018666:	dc3b      	bgt.n	80186e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801866c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018670:	441d      	add	r5, r3
 8018672:	2900      	cmp	r1, #0
 8018674:	f340 8093 	ble.w	801879e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018678:	ee30 0a04 	vadd.f32	s0, s0, s8
 801867c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801867e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018682:	3901      	subs	r1, #1
 8018684:	eeb0 6a62 	vmov.f32	s12, s5
 8018688:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801868c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018690:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018694:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018698:	eeb0 6a43 	vmov.f32	s12, s6
 801869c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186a0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80186a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80186a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80186ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186bc:	ee12 2a90 	vmov	r2, s5
 80186c0:	eef0 2a47 	vmov.f32	s5, s14
 80186c4:	fb92 fef3 	sdiv	lr, r2, r3
 80186c8:	ee13 2a10 	vmov	r2, s6
 80186cc:	eeb0 3a67 	vmov.f32	s6, s15
 80186d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80186d4:	9a02      	ldr	r2, [sp, #8]
 80186d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80186d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186da:	bf08      	it	eq
 80186dc:	4613      	moveq	r3, r2
 80186de:	e731      	b.n	8018544 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80186e0:	1427      	asrs	r7, r4, #16
 80186e2:	d456      	bmi.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186e4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80186e8:	42be      	cmp	r6, r7
 80186ea:	dd52      	ble.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 80186f0:	d44f      	bmi.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186f2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80186f6:	454a      	cmp	r2, r9
 80186f8:	dd4b      	ble.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186fa:	9a00      	ldr	r2, [sp, #0]
 80186fc:	b236      	sxth	r6, r6
 80186fe:	fb09 2606 	mla	r6, r9, r6, r2
 8018702:	5df2      	ldrb	r2, [r6, r7]
 8018704:	9e01      	ldr	r6, [sp, #4]
 8018706:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801870a:	0e3a      	lsrs	r2, r7, #24
 801870c:	d041      	beq.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801870e:	9e03      	ldr	r6, [sp, #12]
 8018710:	fa5f fb87 	uxtb.w	fp, r7
 8018714:	4372      	muls	r2, r6
 8018716:	1c56      	adds	r6, r2, #1
 8018718:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801871c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018720:	1212      	asrs	r2, r2, #8
 8018722:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018726:	fa1f fa82 	uxth.w	sl, r2
 801872a:	43d2      	mvns	r2, r2
 801872c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018730:	b2d2      	uxtb	r2, r2
 8018732:	fb09 b902 	mla	r9, r9, r2, fp
 8018736:	fa1f f989 	uxth.w	r9, r9
 801873a:	f109 0b01 	add.w	fp, r9, #1
 801873e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018742:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018746:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801874a:	fb1b fb0a 	smulbb	fp, fp, sl
 801874e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018752:	fb17 fa0a 	smulbb	sl, r7, sl
 8018756:	f805 9006 	strb.w	r9, [r5, r6]
 801875a:	442e      	add	r6, r5
 801875c:	78b7      	ldrb	r7, [r6, #2]
 801875e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018762:	fb07 aa02 	mla	sl, r7, r2, sl
 8018766:	fb09 b902 	mla	r9, r9, r2, fp
 801876a:	fa1f fa8a 	uxth.w	sl, sl
 801876e:	fa1f f989 	uxth.w	r9, r9
 8018772:	f10a 0701 	add.w	r7, sl, #1
 8018776:	f109 0b01 	add.w	fp, r9, #1
 801877a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801877e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018782:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018786:	ea4f 2929 	mov.w	r9, r9, asr #8
 801878a:	f886 a002 	strb.w	sl, [r6, #2]
 801878e:	f886 9001 	strb.w	r9, [r6, #1]
 8018792:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018794:	4474      	add	r4, lr
 8018796:	f108 0801 	add.w	r8, r8, #1
 801879a:	4410      	add	r0, r2
 801879c:	e760      	b.n	8018660 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801879e:	b005      	add	sp, #20
 80187a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a8:	b085      	sub	sp, #20
 80187aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187ae:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80187b0:	9203      	str	r2, [sp, #12]
 80187b2:	6868      	ldr	r0, [r5, #4]
 80187b4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80187b8:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80187bc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80187c0:	fb00 2404 	mla	r4, r0, r4, r2
 80187c4:	682a      	ldr	r2, [r5, #0]
 80187c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80187ca:	4414      	add	r4, r2
 80187cc:	f8dc 2000 	ldr.w	r2, [ip]
 80187d0:	9201      	str	r2, [sp, #4]
 80187d2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80187d6:	3204      	adds	r2, #4
 80187d8:	9202      	str	r2, [sp, #8]
 80187da:	2900      	cmp	r1, #0
 80187dc:	dc03      	bgt.n	80187e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80187de:	9a03      	ldr	r2, [sp, #12]
 80187e0:	2a00      	cmp	r2, #0
 80187e2:	f340 8137 	ble.w	8018a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80187e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80187e8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80187ec:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80187f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80187f2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80187f6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	dd0d      	ble.n	801881a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80187fe:	1405      	asrs	r5, r0, #16
 8018800:	d405      	bmi.n	801880e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018802:	4545      	cmp	r5, r8
 8018804:	da03      	bge.n	801880e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018806:	1415      	asrs	r5, r2, #16
 8018808:	d401      	bmi.n	801880e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801880a:	42bd      	cmp	r5, r7
 801880c:	db06      	blt.n	801881c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801880e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018810:	4470      	add	r0, lr
 8018812:	3b01      	subs	r3, #1
 8018814:	3403      	adds	r4, #3
 8018816:	442a      	add	r2, r5
 8018818:	e7ef      	b.n	80187fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801881a:	d070      	beq.n	80188fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801881c:	1e5d      	subs	r5, r3, #1
 801881e:	fb0e 0605 	mla	r6, lr, r5, r0
 8018822:	1436      	asrs	r6, r6, #16
 8018824:	d462      	bmi.n	80188ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018826:	4546      	cmp	r6, r8
 8018828:	da60      	bge.n	80188ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801882a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801882c:	fb06 2505 	mla	r5, r6, r5, r2
 8018830:	142d      	asrs	r5, r5, #16
 8018832:	d45b      	bmi.n	80188ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018834:	42bd      	cmp	r5, r7
 8018836:	da59      	bge.n	80188ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018838:	1ce5      	adds	r5, r4, #3
 801883a:	469a      	mov	sl, r3
 801883c:	f1ba 0f00 	cmp.w	sl, #0
 8018840:	dd58      	ble.n	80188f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018842:	1416      	asrs	r6, r2, #16
 8018844:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018848:	1407      	asrs	r7, r0, #16
 801884a:	46b1      	mov	r9, r6
 801884c:	9e01      	ldr	r6, [sp, #4]
 801884e:	fb08 6609 	mla	r6, r8, r9, r6
 8018852:	5df6      	ldrb	r6, [r6, r7]
 8018854:	9f02      	ldr	r7, [sp, #8]
 8018856:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801885a:	0e37      	lsrs	r7, r6, #24
 801885c:	2fff      	cmp	r7, #255	@ 0xff
 801885e:	f000 80f0 	beq.w	8018a42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018862:	fa5f f887 	uxtb.w	r8, r7
 8018866:	b3d7      	cbz	r7, 80188de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018868:	fa1f f788 	uxth.w	r7, r8
 801886c:	ea6f 0808 	mvn.w	r8, r8
 8018870:	fa5f fb86 	uxtb.w	fp, r6
 8018874:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018878:	fa5f f888 	uxtb.w	r8, r8
 801887c:	fb1b fb07 	smulbb	fp, fp, r7
 8018880:	fb09 b908 	mla	r9, r9, r8, fp
 8018884:	fa1f f989 	uxth.w	r9, r9
 8018888:	f109 0b01 	add.w	fp, r9, #1
 801888c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018890:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018894:	fb1b fb08 	smulbb	fp, fp, r8
 8018898:	ea4f 2929 	mov.w	r9, r9, asr #8
 801889c:	f805 9c03 	strb.w	r9, [r5, #-3]
 80188a0:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80188a4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80188a8:	fb09 b907 	mla	r9, r9, r7, fp
 80188ac:	fa1f f989 	uxth.w	r9, r9
 80188b0:	f109 0b01 	add.w	fp, r9, #1
 80188b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80188b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188bc:	f805 9c02 	strb.w	r9, [r5, #-2]
 80188c0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80188c4:	fb19 f808 	smulbb	r8, r9, r8
 80188c8:	fb06 8607 	mla	r6, r6, r7, r8
 80188cc:	b2b6      	uxth	r6, r6
 80188ce:	f106 0801 	add.w	r8, r6, #1
 80188d2:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80188d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80188da:	f805 8c01 	strb.w	r8, [r5, #-1]
 80188de:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80188e0:	4470      	add	r0, lr
 80188e2:	3503      	adds	r5, #3
 80188e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80188e8:	4432      	add	r2, r6
 80188ea:	e7a7      	b.n	801883c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80188ec:	2600      	movs	r6, #0
 80188ee:	1b9d      	subs	r5, r3, r6
 80188f0:	2d00      	cmp	r5, #0
 80188f2:	dc3b      	bgt.n	801896c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80188f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188fc:	441c      	add	r4, r3
 80188fe:	2900      	cmp	r1, #0
 8018900:	f340 80a8 	ble.w	8018a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018904:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801890a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801890e:	3901      	subs	r1, #1
 8018910:	eeb0 6a62 	vmov.f32	s12, s5
 8018914:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018918:	ee31 1a05 	vadd.f32	s2, s2, s10
 801891c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018920:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018924:	eeb0 6a43 	vmov.f32	s12, s6
 8018928:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801892c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018930:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018934:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018938:	ee77 2a62 	vsub.f32	s5, s14, s5
 801893c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018940:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018944:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018948:	ee12 2a90 	vmov	r2, s5
 801894c:	eef0 2a47 	vmov.f32	s5, s14
 8018950:	fb92 fef3 	sdiv	lr, r2, r3
 8018954:	ee13 2a10 	vmov	r2, s6
 8018958:	eeb0 3a67 	vmov.f32	s6, s15
 801895c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018960:	9a03      	ldr	r2, [sp, #12]
 8018962:	9312      	str	r3, [sp, #72]	@ 0x48
 8018964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018966:	bf08      	it	eq
 8018968:	4613      	moveq	r3, r2
 801896a:	e736      	b.n	80187da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801896c:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018970:	d457      	bmi.n	8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018972:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8018976:	4547      	cmp	r7, r8
 8018978:	dd53      	ble.n	8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801897a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801897e:	d450      	bmi.n	8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018980:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8018984:	454d      	cmp	r5, r9
 8018986:	dd4c      	ble.n	8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018988:	9d01      	ldr	r5, [sp, #4]
 801898a:	b23f      	sxth	r7, r7
 801898c:	fb09 5707 	mla	r7, r9, r7, r5
 8018990:	f817 5008 	ldrb.w	r5, [r7, r8]
 8018994:	9f02      	ldr	r7, [sp, #8]
 8018996:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801899a:	0e2f      	lsrs	r7, r5, #24
 801899c:	2fff      	cmp	r7, #255	@ 0xff
 801899e:	d045      	beq.n	8018a2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80189a0:	fa5f f987 	uxtb.w	r9, r7
 80189a4:	b3ef      	cbz	r7, 8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80189a6:	fa1f f889 	uxth.w	r8, r9
 80189aa:	ea6f 0909 	mvn.w	r9, r9
 80189ae:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80189b2:	fa5f fb85 	uxtb.w	fp, r5
 80189b6:	f814 a007 	ldrb.w	sl, [r4, r7]
 80189ba:	fa5f f989 	uxtb.w	r9, r9
 80189be:	fb1b fb08 	smulbb	fp, fp, r8
 80189c2:	fb0a ba09 	mla	sl, sl, r9, fp
 80189c6:	fa1f fa8a 	uxth.w	sl, sl
 80189ca:	f10a 0b01 	add.w	fp, sl, #1
 80189ce:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80189d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80189d6:	f804 a007 	strb.w	sl, [r4, r7]
 80189da:	4427      	add	r7, r4
 80189dc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80189e0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80189e4:	f897 b001 	ldrb.w	fp, [r7, #1]
 80189e8:	fb1b fb09 	smulbb	fp, fp, r9
 80189ec:	fb0a ba08 	mla	sl, sl, r8, fp
 80189f0:	fa1f fa8a 	uxth.w	sl, sl
 80189f4:	f10a 0b01 	add.w	fp, sl, #1
 80189f8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80189fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018a00:	f887 a001 	strb.w	sl, [r7, #1]
 8018a04:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018a08:	fb1a f909 	smulbb	r9, sl, r9
 8018a0c:	fb05 9508 	mla	r5, r5, r8, r9
 8018a10:	b2ad      	uxth	r5, r5
 8018a12:	f105 0901 	add.w	r9, r5, #1
 8018a16:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018a1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a1e:	f887 9002 	strb.w	r9, [r7, #2]
 8018a22:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018a24:	4470      	add	r0, lr
 8018a26:	3601      	adds	r6, #1
 8018a28:	442a      	add	r2, r5
 8018a2a:	e760      	b.n	80188ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018a2c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018a30:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018a34:	55e5      	strb	r5, [r4, r7]
 8018a36:	4427      	add	r7, r4
 8018a38:	0c2d      	lsrs	r5, r5, #16
 8018a3a:	f887 8001 	strb.w	r8, [r7, #1]
 8018a3e:	70bd      	strb	r5, [r7, #2]
 8018a40:	e7ef      	b.n	8018a22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018a42:	0a37      	lsrs	r7, r6, #8
 8018a44:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018a48:	0c36      	lsrs	r6, r6, #16
 8018a4a:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018a4e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018a52:	e744      	b.n	80188de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018a54:	b005      	add	sp, #20
 8018a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a5e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a60:	9201      	str	r2, [sp, #4]
 8018a62:	6870      	ldr	r0, [r6, #4]
 8018a64:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8018a68:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8018a6c:	fa1f fe85 	uxth.w	lr, r5
 8018a70:	43ed      	mvns	r5, r5
 8018a72:	f8dc 8000 	ldr.w	r8, [ip]
 8018a76:	b2ed      	uxtb	r5, r5
 8018a78:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018a7c:	fb00 2404 	mla	r4, r0, r4, r2
 8018a80:	6832      	ldr	r2, [r6, #0]
 8018a82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018a86:	4414      	add	r4, r2
 8018a88:	2900      	cmp	r1, #0
 8018a8a:	dc03      	bgt.n	8018a94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018a8c:	9a01      	ldr	r2, [sp, #4]
 8018a8e:	2a00      	cmp	r2, #0
 8018a90:	f340 810d 	ble.w	8018cae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018a94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a96:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018a9a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018a9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018aa0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018aa4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	dd0e      	ble.n	8018aca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018aac:	1406      	asrs	r6, r0, #16
 8018aae:	d405      	bmi.n	8018abc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018ab0:	4556      	cmp	r6, sl
 8018ab2:	da03      	bge.n	8018abc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018ab4:	1416      	asrs	r6, r2, #16
 8018ab6:	d401      	bmi.n	8018abc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018ab8:	454e      	cmp	r6, r9
 8018aba:	db07      	blt.n	8018acc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018abc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018abe:	3b01      	subs	r3, #1
 8018ac0:	3403      	adds	r4, #3
 8018ac2:	4430      	add	r0, r6
 8018ac4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018ac6:	4432      	add	r2, r6
 8018ac8:	e7ee      	b.n	8018aa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018aca:	d060      	beq.n	8018b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8018acc:	1e5e      	subs	r6, r3, #1
 8018ace:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018ad0:	fb07 0706 	mla	r7, r7, r6, r0
 8018ad4:	143f      	asrs	r7, r7, #16
 8018ad6:	d451      	bmi.n	8018b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ad8:	4557      	cmp	r7, sl
 8018ada:	da4f      	bge.n	8018b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018adc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018ade:	fb07 2606 	mla	r6, r7, r6, r2
 8018ae2:	1436      	asrs	r6, r6, #16
 8018ae4:	d44a      	bmi.n	8018b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ae6:	454e      	cmp	r6, r9
 8018ae8:	da48      	bge.n	8018b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018aea:	1ce6      	adds	r6, r4, #3
 8018aec:	4699      	mov	r9, r3
 8018aee:	f1b9 0f00 	cmp.w	r9, #0
 8018af2:	f106 0603 	add.w	r6, r6, #3
 8018af6:	dd45      	ble.n	8018b84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8018af8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018afc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018b00:	1417      	asrs	r7, r2, #16
 8018b02:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b06:	fb0b a707 	mla	r7, fp, r7, sl
 8018b0a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018b0e:	fb1b fb05 	smulbb	fp, fp, r5
 8018b12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018b16:	eb08 0a07 	add.w	sl, r8, r7
 8018b1a:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018b1e:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b22:	b2bf      	uxth	r7, r7
 8018b24:	f107 0b01 	add.w	fp, r7, #1
 8018b28:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b2c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018b30:	fb1b fb05 	smulbb	fp, fp, r5
 8018b34:	123f      	asrs	r7, r7, #8
 8018b36:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018b3a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018b3e:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b42:	b2bf      	uxth	r7, r7
 8018b44:	f107 0b01 	add.w	fp, r7, #1
 8018b48:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b4c:	123f      	asrs	r7, r7, #8
 8018b4e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018b52:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018b56:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018b5a:	fb1a fa05 	smulbb	sl, sl, r5
 8018b5e:	fb07 a70e 	mla	r7, r7, lr, sl
 8018b62:	b2bf      	uxth	r7, r7
 8018b64:	f107 0a01 	add.w	sl, r7, #1
 8018b68:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018b6c:	123f      	asrs	r7, r7, #8
 8018b6e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018b72:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018b74:	4438      	add	r0, r7
 8018b76:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018b78:	443a      	add	r2, r7
 8018b7a:	e7b8      	b.n	8018aee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018b7c:	2700      	movs	r7, #0
 8018b7e:	1bde      	subs	r6, r3, r7
 8018b80:	2e00      	cmp	r6, #0
 8018b82:	dc3f      	bgt.n	8018c04 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018b84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b8c:	441c      	add	r4, r3
 8018b8e:	2900      	cmp	r1, #0
 8018b90:	f340 808d 	ble.w	8018cae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018b98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b9e:	3901      	subs	r1, #1
 8018ba0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ba4:	eef0 6a62 	vmov.f32	s13, s5
 8018ba8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018bac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018bb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018bb4:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8018bb8:	eef0 6a43 	vmov.f32	s13, s6
 8018bbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018bc0:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8018bc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bdc:	ee12 2a90 	vmov	r2, s5
 8018be0:	eef0 2a47 	vmov.f32	s5, s14
 8018be4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018be8:	ee13 2a10 	vmov	r2, s6
 8018bec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bf0:	eeb0 3a67 	vmov.f32	s6, s15
 8018bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bf8:	9a01      	ldr	r2, [sp, #4]
 8018bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8018bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bfe:	bf08      	it	eq
 8018c00:	4613      	moveq	r3, r2
 8018c02:	e741      	b.n	8018a88 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018c04:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018c08:	d44b      	bmi.n	8018ca2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c0a:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018c0e:	45cb      	cmp	fp, r9
 8018c10:	dd47      	ble.n	8018ca2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c12:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018c16:	d444      	bmi.n	8018ca2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c18:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018c1c:	4556      	cmp	r6, sl
 8018c1e:	dd40      	ble.n	8018ca2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c20:	fa0f f68b 	sxth.w	r6, fp
 8018c24:	fb0a 9906 	mla	r9, sl, r6, r9
 8018c28:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018c2c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018c30:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018c34:	fb1b fb05 	smulbb	fp, fp, r5
 8018c38:	eb08 0a09 	add.w	sl, r8, r9
 8018c3c:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018c40:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c44:	fa1f f989 	uxth.w	r9, r9
 8018c48:	f109 0b01 	add.w	fp, r9, #1
 8018c4c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c50:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c54:	f804 9006 	strb.w	r9, [r4, r6]
 8018c58:	4426      	add	r6, r4
 8018c5a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018c5e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018c62:	fb1b fb05 	smulbb	fp, fp, r5
 8018c66:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c6a:	fa1f f989 	uxth.w	r9, r9
 8018c6e:	f109 0b01 	add.w	fp, r9, #1
 8018c72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c7a:	f886 9001 	strb.w	r9, [r6, #1]
 8018c7e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018c82:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018c86:	fb1a fa05 	smulbb	sl, sl, r5
 8018c8a:	fb09 a90e 	mla	r9, r9, lr, sl
 8018c8e:	fa1f f989 	uxth.w	r9, r9
 8018c92:	f109 0a01 	add.w	sl, r9, #1
 8018c96:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018c9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c9e:	f886 9002 	strb.w	r9, [r6, #2]
 8018ca2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018ca4:	3701      	adds	r7, #1
 8018ca6:	4430      	add	r0, r6
 8018ca8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018caa:	4432      	add	r2, r6
 8018cac:	e767      	b.n	8018b7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8018cae:	b003      	add	sp, #12
 8018cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cb4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cbe:	9201      	str	r2, [sp, #4]
 8018cc0:	6868      	ldr	r0, [r5, #4]
 8018cc2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018cc4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018cc8:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8018ccc:	fb00 2404 	mla	r4, r0, r4, r2
 8018cd0:	682a      	ldr	r2, [r5, #0]
 8018cd2:	f8d7 8000 	ldr.w	r8, [r7]
 8018cd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018cda:	4414      	add	r4, r2
 8018cdc:	2900      	cmp	r1, #0
 8018cde:	dc03      	bgt.n	8018ce8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018ce0:	9a01      	ldr	r2, [sp, #4]
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	f340 80af 	ble.w	8018e46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018ce8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018cea:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8018cee:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018cf4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8018cf8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	dd0c      	ble.n	8018d1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018d00:	1405      	asrs	r5, r0, #16
 8018d02:	d405      	bmi.n	8018d10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d04:	4555      	cmp	r5, sl
 8018d06:	da03      	bge.n	8018d10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d08:	1415      	asrs	r5, r2, #16
 8018d0a:	d401      	bmi.n	8018d10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d0c:	454d      	cmp	r5, r9
 8018d0e:	db05      	blt.n	8018d1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018d10:	4470      	add	r0, lr
 8018d12:	4462      	add	r2, ip
 8018d14:	3b01      	subs	r3, #1
 8018d16:	3403      	adds	r4, #3
 8018d18:	e7f0      	b.n	8018cfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018d1a:	d038      	beq.n	8018d8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018d1c:	1e5d      	subs	r5, r3, #1
 8018d1e:	fb0e 0605 	mla	r6, lr, r5, r0
 8018d22:	1436      	asrs	r6, r6, #16
 8018d24:	d42a      	bmi.n	8018d7c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d26:	4556      	cmp	r6, sl
 8018d28:	da28      	bge.n	8018d7c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d2a:	fb0c 2505 	mla	r5, ip, r5, r2
 8018d2e:	142d      	asrs	r5, r5, #16
 8018d30:	d424      	bmi.n	8018d7c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d32:	454d      	cmp	r5, r9
 8018d34:	da22      	bge.n	8018d7c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d36:	1ce6      	adds	r6, r4, #3
 8018d38:	4699      	mov	r9, r3
 8018d3a:	f1b9 0f00 	cmp.w	r9, #0
 8018d3e:	f106 0603 	add.w	r6, r6, #3
 8018d42:	dd1f      	ble.n	8018d84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8018d44:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8018d48:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018d4c:	1415      	asrs	r5, r2, #16
 8018d4e:	4470      	add	r0, lr
 8018d50:	4462      	add	r2, ip
 8018d52:	f109 39ff 	add.w	r9, r9, #4294967295
 8018d56:	fb0b a505 	mla	r5, fp, r5, sl
 8018d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d5e:	eb08 0a05 	add.w	sl, r8, r5
 8018d62:	f818 5005 	ldrb.w	r5, [r8, r5]
 8018d66:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018d6a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018d6e:	f806 5c05 	strb.w	r5, [r6, #-5]
 8018d72:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8018d76:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018d7a:	e7de      	b.n	8018d3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018d7c:	2600      	movs	r6, #0
 8018d7e:	1b9d      	subs	r5, r3, r6
 8018d80:	2d00      	cmp	r5, #0
 8018d82:	dc38      	bgt.n	8018df6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018d84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d8c:	441c      	add	r4, r3
 8018d8e:	2900      	cmp	r1, #0
 8018d90:	dd59      	ble.n	8018e46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018d92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d9c:	3901      	subs	r1, #1
 8018d9e:	eeb0 6a62 	vmov.f32	s12, s5
 8018da2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018da6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018daa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dae:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018db2:	eeb0 6a43 	vmov.f32	s12, s6
 8018db6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dba:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018dbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018dc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018dca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018dce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018dd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018dd6:	ee12 2a90 	vmov	r2, s5
 8018dda:	eef0 2a47 	vmov.f32	s5, s14
 8018dde:	fb92 fef3 	sdiv	lr, r2, r3
 8018de2:	ee13 2a10 	vmov	r2, s6
 8018de6:	eeb0 3a67 	vmov.f32	s6, s15
 8018dea:	fb92 fcf3 	sdiv	ip, r2, r3
 8018dee:	9a01      	ldr	r2, [sp, #4]
 8018df0:	bf08      	it	eq
 8018df2:	4613      	moveq	r3, r2
 8018df4:	e772      	b.n	8018cdc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018df6:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018dfa:	d420      	bmi.n	8018e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018dfc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8018e00:	45cb      	cmp	fp, r9
 8018e02:	dd1c      	ble.n	8018e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e04:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018e08:	d419      	bmi.n	8018e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e0a:	68fd      	ldr	r5, [r7, #12]
 8018e0c:	4555      	cmp	r5, sl
 8018e0e:	dd16      	ble.n	8018e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e10:	fa0f f58b 	sxth.w	r5, fp
 8018e14:	fb0a 9505 	mla	r5, sl, r5, r9
 8018e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e1c:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018e20:	eb08 0b05 	add.w	fp, r8, r5
 8018e24:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018e28:	f804 9005 	strb.w	r9, [r4, r5]
 8018e2c:	4425      	add	r5, r4
 8018e2e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018e32:	f885 9001 	strb.w	r9, [r5, #1]
 8018e36:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018e3a:	f885 9002 	strb.w	r9, [r5, #2]
 8018e3e:	4470      	add	r0, lr
 8018e40:	4462      	add	r2, ip
 8018e42:	3601      	adds	r6, #1
 8018e44:	e79b      	b.n	8018d7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018e46:	b003      	add	sp, #12
 8018e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	b085      	sub	sp, #20
 8018e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018e58:	9202      	str	r2, [sp, #8]
 8018e5a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018e5e:	6860      	ldr	r0, [r4, #4]
 8018e60:	9203      	str	r2, [sp, #12]
 8018e62:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018e66:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018e6a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018e6e:	fb00 2505 	mla	r5, r0, r5, r2
 8018e72:	6822      	ldr	r2, [r4, #0]
 8018e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e78:	4415      	add	r5, r2
 8018e7a:	f8dc 2000 	ldr.w	r2, [ip]
 8018e7e:	9201      	str	r2, [sp, #4]
 8018e80:	2900      	cmp	r1, #0
 8018e82:	dc03      	bgt.n	8018e8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018e84:	9a02      	ldr	r2, [sp, #8]
 8018e86:	2a00      	cmp	r2, #0
 8018e88:	f340 8122 	ble.w	80190d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018e8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018e8e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018e92:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018e96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018e98:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018e9c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	dd0d      	ble.n	8018ec0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018ea4:	1422      	asrs	r2, r4, #16
 8018ea6:	d405      	bmi.n	8018eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018ea8:	4542      	cmp	r2, r8
 8018eaa:	da03      	bge.n	8018eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018eac:	1402      	asrs	r2, r0, #16
 8018eae:	d401      	bmi.n	8018eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018eb0:	42ba      	cmp	r2, r7
 8018eb2:	db06      	blt.n	8018ec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018eb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018eb6:	4474      	add	r4, lr
 8018eb8:	3b01      	subs	r3, #1
 8018eba:	3503      	adds	r5, #3
 8018ebc:	4410      	add	r0, r2
 8018ebe:	e7ef      	b.n	8018ea0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018ec0:	d072      	beq.n	8018fa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8018ec2:	1e5a      	subs	r2, r3, #1
 8018ec4:	fb0e 4602 	mla	r6, lr, r2, r4
 8018ec8:	1436      	asrs	r6, r6, #16
 8018eca:	d462      	bmi.n	8018f92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ecc:	4546      	cmp	r6, r8
 8018ece:	da60      	bge.n	8018f92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ed0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018ed2:	fb06 0202 	mla	r2, r6, r2, r0
 8018ed6:	1412      	asrs	r2, r2, #16
 8018ed8:	d45b      	bmi.n	8018f92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018eda:	42ba      	cmp	r2, r7
 8018edc:	da59      	bge.n	8018f92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ede:	1cef      	adds	r7, r5, #3
 8018ee0:	4699      	mov	r9, r3
 8018ee2:	f1b9 0f00 	cmp.w	r9, #0
 8018ee6:	dd5a      	ble.n	8018f9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ee8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018eec:	1426      	asrs	r6, r4, #16
 8018eee:	1402      	asrs	r2, r0, #16
 8018ef0:	fb08 6202 	mla	r2, r8, r2, r6
 8018ef4:	9e01      	ldr	r6, [sp, #4]
 8018ef6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018efa:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018efe:	d041      	beq.n	8018f84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018f00:	9a03      	ldr	r2, [sp, #12]
 8018f02:	fa5f fb86 	uxtb.w	fp, r6
 8018f06:	fb02 f808 	mul.w	r8, r2, r8
 8018f0a:	f108 0201 	add.w	r2, r8, #1
 8018f0e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018f12:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018f16:	1212      	asrs	r2, r2, #8
 8018f18:	fa1f fa82 	uxth.w	sl, r2
 8018f1c:	43d2      	mvns	r2, r2
 8018f1e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f22:	b2d2      	uxtb	r2, r2
 8018f24:	fb08 b802 	mla	r8, r8, r2, fp
 8018f28:	fa1f f888 	uxth.w	r8, r8
 8018f2c:	f108 0b01 	add.w	fp, r8, #1
 8018f30:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f34:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018f38:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018f3c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f40:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f44:	fb16 fa0a 	smulbb	sl, r6, sl
 8018f48:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018f4c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018f50:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018f54:	fb06 aa02 	mla	sl, r6, r2, sl
 8018f58:	fb08 b802 	mla	r8, r8, r2, fp
 8018f5c:	fa1f fa8a 	uxth.w	sl, sl
 8018f60:	fa1f f888 	uxth.w	r8, r8
 8018f64:	f10a 0601 	add.w	r6, sl, #1
 8018f68:	f108 0b01 	add.w	fp, r8, #1
 8018f6c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018f70:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f74:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f78:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f7c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018f80:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018f84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f86:	4474      	add	r4, lr
 8018f88:	3703      	adds	r7, #3
 8018f8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018f8e:	4410      	add	r0, r2
 8018f90:	e7a7      	b.n	8018ee2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018f92:	f04f 0800 	mov.w	r8, #0
 8018f96:	eba3 0208 	sub.w	r2, r3, r8
 8018f9a:	2a00      	cmp	r2, #0
 8018f9c:	dc3b      	bgt.n	8019016 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8018f9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fa6:	441d      	add	r5, r3
 8018fa8:	2900      	cmp	r1, #0
 8018faa:	f340 8091 	ble.w	80190d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018fae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018fb8:	3901      	subs	r1, #1
 8018fba:	eeb0 6a62 	vmov.f32	s12, s5
 8018fbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018fc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018fc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fca:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018fce:	eeb0 6a43 	vmov.f32	s12, s6
 8018fd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fd6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018fda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018fde:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018fe2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018fe6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018fea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018ff2:	ee12 2a90 	vmov	r2, s5
 8018ff6:	eef0 2a47 	vmov.f32	s5, s14
 8018ffa:	fb92 fef3 	sdiv	lr, r2, r3
 8018ffe:	ee13 2a10 	vmov	r2, s6
 8019002:	eeb0 3a67 	vmov.f32	s6, s15
 8019006:	fb92 f3f3 	sdiv	r3, r2, r3
 801900a:	9a02      	ldr	r2, [sp, #8]
 801900c:	9312      	str	r3, [sp, #72]	@ 0x48
 801900e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019010:	bf08      	it	eq
 8019012:	4613      	moveq	r3, r2
 8019014:	e734      	b.n	8018e80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019016:	1427      	asrs	r7, r4, #16
 8019018:	d454      	bmi.n	80190c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801901a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801901e:	42be      	cmp	r6, r7
 8019020:	dd50      	ble.n	80190c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019022:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019026:	d44d      	bmi.n	80190c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019028:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801902c:	454a      	cmp	r2, r9
 801902e:	dd49      	ble.n	80190c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019030:	b236      	sxth	r6, r6
 8019032:	9a01      	ldr	r2, [sp, #4]
 8019034:	fb09 7606 	mla	r6, r9, r6, r7
 8019038:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801903c:	0e3a      	lsrs	r2, r7, #24
 801903e:	d041      	beq.n	80190c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019040:	9e03      	ldr	r6, [sp, #12]
 8019042:	fa5f fb87 	uxtb.w	fp, r7
 8019046:	4372      	muls	r2, r6
 8019048:	1c56      	adds	r6, r2, #1
 801904a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801904e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019052:	1212      	asrs	r2, r2, #8
 8019054:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019058:	fa1f fa82 	uxth.w	sl, r2
 801905c:	43d2      	mvns	r2, r2
 801905e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019062:	b2d2      	uxtb	r2, r2
 8019064:	fb09 b902 	mla	r9, r9, r2, fp
 8019068:	fa1f f989 	uxth.w	r9, r9
 801906c:	f109 0b01 	add.w	fp, r9, #1
 8019070:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019074:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019078:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801907c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019080:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019084:	fb17 fa0a 	smulbb	sl, r7, sl
 8019088:	f805 9006 	strb.w	r9, [r5, r6]
 801908c:	442e      	add	r6, r5
 801908e:	78b7      	ldrb	r7, [r6, #2]
 8019090:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019094:	fb07 aa02 	mla	sl, r7, r2, sl
 8019098:	fb09 b902 	mla	r9, r9, r2, fp
 801909c:	fa1f fa8a 	uxth.w	sl, sl
 80190a0:	fa1f f989 	uxth.w	r9, r9
 80190a4:	f10a 0701 	add.w	r7, sl, #1
 80190a8:	f109 0b01 	add.w	fp, r9, #1
 80190ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80190b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80190b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80190b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80190bc:	f886 a002 	strb.w	sl, [r6, #2]
 80190c0:	f886 9001 	strb.w	r9, [r6, #1]
 80190c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80190c6:	4474      	add	r4, lr
 80190c8:	f108 0801 	add.w	r8, r8, #1
 80190cc:	4410      	add	r0, r2
 80190ce:	e762      	b.n	8018f96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80190d0:	b005      	add	sp, #20
 80190d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80190d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190da:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80190dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80190e0:	9201      	str	r2, [sp, #4]
 80190e2:	6860      	ldr	r0, [r4, #4]
 80190e4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80190e8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80190ec:	fb00 2505 	mla	r5, r0, r5, r2
 80190f0:	6822      	ldr	r2, [r4, #0]
 80190f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190f6:	4415      	add	r5, r2
 80190f8:	f8dc 2000 	ldr.w	r2, [ip]
 80190fc:	9200      	str	r2, [sp, #0]
 80190fe:	2900      	cmp	r1, #0
 8019100:	dc03      	bgt.n	801910a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019102:	9a01      	ldr	r2, [sp, #4]
 8019104:	2a00      	cmp	r2, #0
 8019106:	f340 812b 	ble.w	8019360 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801910a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801910c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019110:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019116:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801911a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801911e:	2b00      	cmp	r3, #0
 8019120:	dd0e      	ble.n	8019140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019122:	1422      	asrs	r2, r4, #16
 8019124:	d405      	bmi.n	8019132 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019126:	4572      	cmp	r2, lr
 8019128:	da03      	bge.n	8019132 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801912a:	1402      	asrs	r2, r0, #16
 801912c:	d401      	bmi.n	8019132 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801912e:	42ba      	cmp	r2, r7
 8019130:	db07      	blt.n	8019142 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019132:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019134:	3b01      	subs	r3, #1
 8019136:	3503      	adds	r5, #3
 8019138:	4414      	add	r4, r2
 801913a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801913c:	4410      	add	r0, r2
 801913e:	e7ee      	b.n	801911e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019140:	d06f      	beq.n	8019222 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019142:	1e5a      	subs	r2, r3, #1
 8019144:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019146:	fb06 4602 	mla	r6, r6, r2, r4
 801914a:	1436      	asrs	r6, r6, #16
 801914c:	d45e      	bmi.n	801920c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801914e:	4576      	cmp	r6, lr
 8019150:	da5c      	bge.n	801920c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019152:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019154:	fb06 0202 	mla	r2, r6, r2, r0
 8019158:	1412      	asrs	r2, r2, #16
 801915a:	d457      	bmi.n	801920c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801915c:	42ba      	cmp	r2, r7
 801915e:	da55      	bge.n	801920c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019160:	1cee      	adds	r6, r5, #3
 8019162:	469a      	mov	sl, r3
 8019164:	f1ba 0f00 	cmp.w	sl, #0
 8019168:	dd56      	ble.n	8019218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801916a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801916e:	1427      	asrs	r7, r4, #16
 8019170:	1402      	asrs	r2, r0, #16
 8019172:	fb0e 7202 	mla	r2, lr, r2, r7
 8019176:	9f00      	ldr	r7, [sp, #0]
 8019178:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801917c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8019180:	d03c      	beq.n	80191fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019182:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019186:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801918a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801918e:	fa5f f28e 	uxtb.w	r2, lr
 8019192:	b2ff      	uxtb	r7, r7
 8019194:	f000 80dd 	beq.w	8019352 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019198:	fa1f f882 	uxth.w	r8, r2
 801919c:	43d2      	mvns	r2, r2
 801919e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80191a2:	fb17 f708 	smulbb	r7, r7, r8
 80191a6:	b2d2      	uxtb	r2, r2
 80191a8:	fb19 f908 	smulbb	r9, r9, r8
 80191ac:	fb0e 7702 	mla	r7, lr, r2, r7
 80191b0:	fb1b f808 	smulbb	r8, fp, r8
 80191b4:	b2bf      	uxth	r7, r7
 80191b6:	f107 0e01 	add.w	lr, r7, #1
 80191ba:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80191be:	123f      	asrs	r7, r7, #8
 80191c0:	f806 7c03 	strb.w	r7, [r6, #-3]
 80191c4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80191c8:	fb07 9902 	mla	r9, r7, r2, r9
 80191cc:	fa1f f989 	uxth.w	r9, r9
 80191d0:	f109 0701 	add.w	r7, r9, #1
 80191d4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80191d8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80191dc:	fb07 8802 	mla	r8, r7, r2, r8
 80191e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191e4:	fa1f f888 	uxth.w	r8, r8
 80191e8:	f806 9c02 	strb.w	r9, [r6, #-2]
 80191ec:	f108 0201 	add.w	r2, r8, #1
 80191f0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80191f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80191f8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80191fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80191fe:	3603      	adds	r6, #3
 8019200:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019204:	4414      	add	r4, r2
 8019206:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019208:	4410      	add	r0, r2
 801920a:	e7ab      	b.n	8019164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801920c:	f04f 0e00 	mov.w	lr, #0
 8019210:	eba3 020e 	sub.w	r2, r3, lr
 8019214:	2a00      	cmp	r2, #0
 8019216:	dc3d      	bgt.n	8019294 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8019218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801921c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019220:	441d      	add	r5, r3
 8019222:	2900      	cmp	r1, #0
 8019224:	f340 809c 	ble.w	8019360 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019228:	ee30 0a04 	vadd.f32	s0, s0, s8
 801922c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801922e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019232:	3901      	subs	r1, #1
 8019234:	eeb0 6a62 	vmov.f32	s12, s5
 8019238:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801923c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019244:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019248:	eeb0 6a43 	vmov.f32	s12, s6
 801924c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019250:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019258:	ee61 7a27 	vmul.f32	s15, s2, s15
 801925c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019260:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019264:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801926c:	ee12 2a90 	vmov	r2, s5
 8019270:	eef0 2a47 	vmov.f32	s5, s14
 8019274:	fb92 f3f3 	sdiv	r3, r2, r3
 8019278:	ee13 2a10 	vmov	r2, s6
 801927c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801927e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019280:	eeb0 3a67 	vmov.f32	s6, s15
 8019284:	fb92 f3f3 	sdiv	r3, r2, r3
 8019288:	9a01      	ldr	r2, [sp, #4]
 801928a:	9310      	str	r3, [sp, #64]	@ 0x40
 801928c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801928e:	bf08      	it	eq
 8019290:	4613      	moveq	r3, r2
 8019292:	e734      	b.n	80190fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019294:	1427      	asrs	r7, r4, #16
 8019296:	d44d      	bmi.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019298:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801929c:	42be      	cmp	r6, r7
 801929e:	dd49      	ble.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192a0:	ea5f 4820 	movs.w	r8, r0, asr #16
 80192a4:	d446      	bmi.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192a6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80192aa:	4542      	cmp	r2, r8
 80192ac:	dd42      	ble.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192ae:	b236      	sxth	r6, r6
 80192b0:	9a00      	ldr	r2, [sp, #0]
 80192b2:	fb08 7606 	mla	r6, r8, r6, r7
 80192b6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80192ba:	0e3a      	lsrs	r2, r7, #24
 80192bc:	d03a      	beq.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192be:	2aff      	cmp	r2, #255	@ 0xff
 80192c0:	b2d6      	uxtb	r6, r2
 80192c2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80192c6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80192ca:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80192ce:	b2ff      	uxtb	r7, r7
 80192d0:	d037      	beq.n	8019342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80192d2:	fa1f f986 	uxth.w	r9, r6
 80192d6:	4472      	add	r2, lr
 80192d8:	43f6      	mvns	r6, r6
 80192da:	f815 8002 	ldrb.w	r8, [r5, r2]
 80192de:	fb17 f709 	smulbb	r7, r7, r9
 80192e2:	fb1a fa09 	smulbb	sl, sl, r9
 80192e6:	b2f6      	uxtb	r6, r6
 80192e8:	fb1b f909 	smulbb	r9, fp, r9
 80192ec:	fb08 7706 	mla	r7, r8, r6, r7
 80192f0:	b2bf      	uxth	r7, r7
 80192f2:	f107 0801 	add.w	r8, r7, #1
 80192f6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80192fa:	123f      	asrs	r7, r7, #8
 80192fc:	54af      	strb	r7, [r5, r2]
 80192fe:	442a      	add	r2, r5
 8019300:	7857      	ldrb	r7, [r2, #1]
 8019302:	fb07 aa06 	mla	sl, r7, r6, sl
 8019306:	fa1f fa8a 	uxth.w	sl, sl
 801930a:	f10a 0701 	add.w	r7, sl, #1
 801930e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019312:	7897      	ldrb	r7, [r2, #2]
 8019314:	fb07 9906 	mla	r9, r7, r6, r9
 8019318:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801931c:	fa1f f989 	uxth.w	r9, r9
 8019320:	f882 a001 	strb.w	sl, [r2, #1]
 8019324:	f109 0601 	add.w	r6, r9, #1
 8019328:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801932c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019330:	f882 9002 	strb.w	r9, [r2, #2]
 8019334:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019336:	f10e 0e01 	add.w	lr, lr, #1
 801933a:	4414      	add	r4, r2
 801933c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801933e:	4410      	add	r0, r2
 8019340:	e766      	b.n	8019210 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019342:	4472      	add	r2, lr
 8019344:	54af      	strb	r7, [r5, r2]
 8019346:	442a      	add	r2, r5
 8019348:	f882 a001 	strb.w	sl, [r2, #1]
 801934c:	f882 b002 	strb.w	fp, [r2, #2]
 8019350:	e7f0      	b.n	8019334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019352:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019356:	f806 9c02 	strb.w	r9, [r6, #-2]
 801935a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801935e:	e74d      	b.n	80191fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019360:	b003      	add	sp, #12
 8019362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801936c:	b087      	sub	sp, #28
 801936e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019372:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019374:	9204      	str	r2, [sp, #16]
 8019376:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801937a:	6860      	ldr	r0, [r4, #4]
 801937c:	9205      	str	r2, [sp, #20]
 801937e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8019382:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8019386:	9101      	str	r1, [sp, #4]
 8019388:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801938c:	fb00 2505 	mla	r5, r0, r5, r2
 8019390:	6822      	ldr	r2, [r4, #0]
 8019392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019396:	4415      	add	r5, r2
 8019398:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801939c:	3201      	adds	r2, #1
 801939e:	f022 0201 	bic.w	r2, r2, #1
 80193a2:	9202      	str	r2, [sp, #8]
 80193a4:	f8dc 2000 	ldr.w	r2, [ip]
 80193a8:	9203      	str	r2, [sp, #12]
 80193aa:	9a01      	ldr	r2, [sp, #4]
 80193ac:	2a00      	cmp	r2, #0
 80193ae:	dc03      	bgt.n	80193b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80193b0:	9a04      	ldr	r2, [sp, #16]
 80193b2:	2a00      	cmp	r2, #0
 80193b4:	f340 8135 	ble.w	8019622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80193b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80193ba:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80193be:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80193c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80193c4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80193c8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	dd0d      	ble.n	80193ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80193d0:	1422      	asrs	r2, r4, #16
 80193d2:	d405      	bmi.n	80193e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193d4:	4542      	cmp	r2, r8
 80193d6:	da03      	bge.n	80193e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193d8:	1402      	asrs	r2, r0, #16
 80193da:	d401      	bmi.n	80193e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193dc:	42ba      	cmp	r2, r7
 80193de:	db06      	blt.n	80193ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80193e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80193e2:	4474      	add	r4, lr
 80193e4:	3b01      	subs	r3, #1
 80193e6:	3503      	adds	r5, #3
 80193e8:	4410      	add	r0, r2
 80193ea:	e7ef      	b.n	80193cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80193ec:	d077      	beq.n	80194de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80193ee:	1e5a      	subs	r2, r3, #1
 80193f0:	fb0e 4602 	mla	r6, lr, r2, r4
 80193f4:	1436      	asrs	r6, r6, #16
 80193f6:	d469      	bmi.n	80194cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193f8:	4546      	cmp	r6, r8
 80193fa:	da67      	bge.n	80194cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193fc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80193fe:	fb06 0202 	mla	r2, r6, r2, r0
 8019402:	1412      	asrs	r2, r2, #16
 8019404:	d462      	bmi.n	80194cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019406:	42ba      	cmp	r2, r7
 8019408:	da60      	bge.n	80194cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801940a:	1cee      	adds	r6, r5, #3
 801940c:	4699      	mov	r9, r3
 801940e:	f1b9 0f00 	cmp.w	r9, #0
 8019412:	dd5f      	ble.n	80194d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019414:	1422      	asrs	r2, r4, #16
 8019416:	9902      	ldr	r1, [sp, #8]
 8019418:	1407      	asrs	r7, r0, #16
 801941a:	fb01 2707 	mla	r7, r1, r7, r2
 801941e:	9903      	ldr	r1, [sp, #12]
 8019420:	087a      	lsrs	r2, r7, #1
 8019422:	5c8a      	ldrb	r2, [r1, r2]
 8019424:	07f9      	lsls	r1, r7, #31
 8019426:	bf54      	ite	pl
 8019428:	f002 020f 	andpl.w	r2, r2, #15
 801942c:	1112      	asrmi	r2, r2, #4
 801942e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019432:	b2d2      	uxtb	r2, r2
 8019434:	2a00      	cmp	r2, #0
 8019436:	d042      	beq.n	80194be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019438:	497b      	ldr	r1, [pc, #492]	@ (8019628 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801943a:	680f      	ldr	r7, [r1, #0]
 801943c:	9905      	ldr	r1, [sp, #20]
 801943e:	fa5f fb87 	uxtb.w	fp, r7
 8019442:	434a      	muls	r2, r1
 8019444:	f102 0801 	add.w	r8, r2, #1
 8019448:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801944c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019450:	1212      	asrs	r2, r2, #8
 8019452:	fa1f fa82 	uxth.w	sl, r2
 8019456:	43d2      	mvns	r2, r2
 8019458:	fb1b fb0a 	smulbb	fp, fp, sl
 801945c:	b2d2      	uxtb	r2, r2
 801945e:	fb08 b802 	mla	r8, r8, r2, fp
 8019462:	fa1f f888 	uxth.w	r8, r8
 8019466:	f108 0b01 	add.w	fp, r8, #1
 801946a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801946e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019472:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019476:	fb1b fb0a 	smulbb	fp, fp, sl
 801947a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801947e:	fb17 fa0a 	smulbb	sl, r7, sl
 8019482:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019486:	f806 8c03 	strb.w	r8, [r6, #-3]
 801948a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801948e:	fb07 aa02 	mla	sl, r7, r2, sl
 8019492:	fb08 b802 	mla	r8, r8, r2, fp
 8019496:	fa1f fa8a 	uxth.w	sl, sl
 801949a:	fa1f f888 	uxth.w	r8, r8
 801949e:	f10a 0701 	add.w	r7, sl, #1
 80194a2:	f108 0b01 	add.w	fp, r8, #1
 80194a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80194aa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80194ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80194b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194b6:	f806 ac01 	strb.w	sl, [r6, #-1]
 80194ba:	f806 8c02 	strb.w	r8, [r6, #-2]
 80194be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80194c0:	4474      	add	r4, lr
 80194c2:	3603      	adds	r6, #3
 80194c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80194c8:	4410      	add	r0, r2
 80194ca:	e7a0      	b.n	801940e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80194cc:	2700      	movs	r7, #0
 80194ce:	1bda      	subs	r2, r3, r7
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	dc3e      	bgt.n	8019552 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80194d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194dc:	441d      	add	r5, r3
 80194de:	9b01      	ldr	r3, [sp, #4]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	f340 809e 	ble.w	8019622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80194e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80194ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194f0:	eeb0 6a62 	vmov.f32	s12, s5
 80194f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019500:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8019504:	eeb0 6a43 	vmov.f32	s12, s6
 8019508:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801950c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019510:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019514:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019518:	ee77 2a62 	vsub.f32	s5, s14, s5
 801951c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019520:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019524:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019528:	ee12 2a90 	vmov	r2, s5
 801952c:	eef0 2a47 	vmov.f32	s5, s14
 8019530:	fb92 fef3 	sdiv	lr, r2, r3
 8019534:	ee13 2a10 	vmov	r2, s6
 8019538:	eeb0 3a67 	vmov.f32	s6, s15
 801953c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019540:	9314      	str	r3, [sp, #80]	@ 0x50
 8019542:	9b01      	ldr	r3, [sp, #4]
 8019544:	9a04      	ldr	r2, [sp, #16]
 8019546:	3b01      	subs	r3, #1
 8019548:	9301      	str	r3, [sp, #4]
 801954a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801954c:	bf08      	it	eq
 801954e:	4613      	moveq	r3, r2
 8019550:	e72b      	b.n	80193aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019552:	1426      	asrs	r6, r4, #16
 8019554:	d460      	bmi.n	8019618 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019556:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801955a:	42b2      	cmp	r2, r6
 801955c:	dd5c      	ble.n	8019618 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801955e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019562:	d459      	bmi.n	8019618 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019564:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019568:	4542      	cmp	r2, r8
 801956a:	dd55      	ble.n	8019618 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801956c:	9a02      	ldr	r2, [sp, #8]
 801956e:	9903      	ldr	r1, [sp, #12]
 8019570:	fb08 6602 	mla	r6, r8, r2, r6
 8019574:	0872      	lsrs	r2, r6, #1
 8019576:	07f6      	lsls	r6, r6, #31
 8019578:	5c8a      	ldrb	r2, [r1, r2]
 801957a:	bf54      	ite	pl
 801957c:	f002 020f 	andpl.w	r2, r2, #15
 8019580:	1112      	asrmi	r2, r2, #4
 8019582:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019586:	b2d2      	uxtb	r2, r2
 8019588:	2a00      	cmp	r2, #0
 801958a:	d045      	beq.n	8019618 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801958c:	4926      	ldr	r1, [pc, #152]	@ (8019628 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801958e:	f8d1 8000 	ldr.w	r8, [r1]
 8019592:	9905      	ldr	r1, [sp, #20]
 8019594:	fa5f fb88 	uxtb.w	fp, r8
 8019598:	434a      	muls	r2, r1
 801959a:	1c56      	adds	r6, r2, #1
 801959c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80195a0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80195a4:	1212      	asrs	r2, r2, #8
 80195a6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80195aa:	fa1f fa82 	uxth.w	sl, r2
 80195ae:	43d2      	mvns	r2, r2
 80195b0:	fb1b fb0a 	smulbb	fp, fp, sl
 80195b4:	b2d2      	uxtb	r2, r2
 80195b6:	fb09 b902 	mla	r9, r9, r2, fp
 80195ba:	fa1f f989 	uxth.w	r9, r9
 80195be:	f109 0b01 	add.w	fp, r9, #1
 80195c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80195c6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80195ca:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80195ce:	fb1b fb0a 	smulbb	fp, fp, sl
 80195d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195d6:	fb18 fa0a 	smulbb	sl, r8, sl
 80195da:	f805 9006 	strb.w	r9, [r5, r6]
 80195de:	442e      	add	r6, r5
 80195e0:	f896 8002 	ldrb.w	r8, [r6, #2]
 80195e4:	f896 9001 	ldrb.w	r9, [r6, #1]
 80195e8:	fb08 aa02 	mla	sl, r8, r2, sl
 80195ec:	fb09 b902 	mla	r9, r9, r2, fp
 80195f0:	fa1f fa8a 	uxth.w	sl, sl
 80195f4:	fa1f f989 	uxth.w	r9, r9
 80195f8:	f10a 0801 	add.w	r8, sl, #1
 80195fc:	f109 0b01 	add.w	fp, r9, #1
 8019600:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8019604:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019608:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801960c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019610:	f886 a002 	strb.w	sl, [r6, #2]
 8019614:	f886 9001 	strb.w	r9, [r6, #1]
 8019618:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801961a:	4474      	add	r4, lr
 801961c:	3701      	adds	r7, #1
 801961e:	4410      	add	r0, r2
 8019620:	e755      	b.n	80194ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019622:	b007      	add	sp, #28
 8019624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019628:	240253c4 	.word	0x240253c4

0801962c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019630:	b085      	sub	sp, #20
 8019632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019636:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019638:	9203      	str	r2, [sp, #12]
 801963a:	6860      	ldr	r0, [r4, #4]
 801963c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019640:	9100      	str	r1, [sp, #0]
 8019642:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8019646:	fb00 2606 	mla	r6, r0, r6, r2
 801964a:	6822      	ldr	r2, [r4, #0]
 801964c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019650:	4416      	add	r6, r2
 8019652:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019656:	3201      	adds	r2, #1
 8019658:	f022 0201 	bic.w	r2, r2, #1
 801965c:	9201      	str	r2, [sp, #4]
 801965e:	f8dc 2000 	ldr.w	r2, [ip]
 8019662:	9202      	str	r2, [sp, #8]
 8019664:	9a00      	ldr	r2, [sp, #0]
 8019666:	2a00      	cmp	r2, #0
 8019668:	dc03      	bgt.n	8019672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801966a:	9a03      	ldr	r2, [sp, #12]
 801966c:	2a00      	cmp	r2, #0
 801966e:	f340 8140 	ble.w	80198f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019672:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019674:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019678:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801967c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801967e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019682:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019686:	2b00      	cmp	r3, #0
 8019688:	dd0e      	ble.n	80196a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801968a:	142a      	asrs	r2, r5, #16
 801968c:	d405      	bmi.n	801969a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801968e:	4572      	cmp	r2, lr
 8019690:	da03      	bge.n	801969a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019692:	1422      	asrs	r2, r4, #16
 8019694:	d401      	bmi.n	801969a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019696:	42ba      	cmp	r2, r7
 8019698:	db07      	blt.n	80196aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801969a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801969c:	3b01      	subs	r3, #1
 801969e:	3603      	adds	r6, #3
 80196a0:	4415      	add	r5, r2
 80196a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80196a4:	4414      	add	r4, r2
 80196a6:	e7ee      	b.n	8019686 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80196a8:	d072      	beq.n	8019790 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80196aa:	1e5a      	subs	r2, r3, #1
 80196ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80196ae:	fb00 5002 	mla	r0, r0, r2, r5
 80196b2:	1400      	asrs	r0, r0, #16
 80196b4:	d463      	bmi.n	801977e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196b6:	4570      	cmp	r0, lr
 80196b8:	da61      	bge.n	801977e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196ba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80196bc:	fb00 4202 	mla	r2, r0, r2, r4
 80196c0:	1412      	asrs	r2, r2, #16
 80196c2:	d45c      	bmi.n	801977e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196c4:	42ba      	cmp	r2, r7
 80196c6:	da5a      	bge.n	801977e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196c8:	1cf0      	adds	r0, r6, #3
 80196ca:	469a      	mov	sl, r3
 80196cc:	f1ba 0f00 	cmp.w	sl, #0
 80196d0:	dd59      	ble.n	8019786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80196d2:	142a      	asrs	r2, r5, #16
 80196d4:	9901      	ldr	r1, [sp, #4]
 80196d6:	1427      	asrs	r7, r4, #16
 80196d8:	fb01 2707 	mla	r7, r1, r7, r2
 80196dc:	9902      	ldr	r1, [sp, #8]
 80196de:	087a      	lsrs	r2, r7, #1
 80196e0:	5c8a      	ldrb	r2, [r1, r2]
 80196e2:	07f9      	lsls	r1, r7, #31
 80196e4:	bf54      	ite	pl
 80196e6:	f002 020f 	andpl.w	r2, r2, #15
 80196ea:	1112      	asrmi	r2, r2, #4
 80196ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80196f0:	b2d2      	uxtb	r2, r2
 80196f2:	2a00      	cmp	r2, #0
 80196f4:	d03b      	beq.n	801976e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80196f6:	4980      	ldr	r1, [pc, #512]	@ (80198f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80196f8:	2aff      	cmp	r2, #255	@ 0xff
 80196fa:	680f      	ldr	r7, [r1, #0]
 80196fc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019700:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019704:	b2ff      	uxtb	r7, r7
 8019706:	f000 80ed 	beq.w	80198e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801970a:	fa1f f882 	uxth.w	r8, r2
 801970e:	43d2      	mvns	r2, r2
 8019710:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019714:	fb17 f708 	smulbb	r7, r7, r8
 8019718:	b2d2      	uxtb	r2, r2
 801971a:	fb19 f908 	smulbb	r9, r9, r8
 801971e:	fb0e 7702 	mla	r7, lr, r2, r7
 8019722:	fb1b f808 	smulbb	r8, fp, r8
 8019726:	b2bf      	uxth	r7, r7
 8019728:	f107 0e01 	add.w	lr, r7, #1
 801972c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019730:	123f      	asrs	r7, r7, #8
 8019732:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019736:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801973a:	fb07 9902 	mla	r9, r7, r2, r9
 801973e:	fa1f f989 	uxth.w	r9, r9
 8019742:	f109 0701 	add.w	r7, r9, #1
 8019746:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801974a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801974e:	fb07 8802 	mla	r8, r7, r2, r8
 8019752:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019756:	fa1f f888 	uxth.w	r8, r8
 801975a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801975e:	f108 0201 	add.w	r2, r8, #1
 8019762:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019766:	ea4f 2828 	mov.w	r8, r8, asr #8
 801976a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801976e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019770:	3003      	adds	r0, #3
 8019772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019776:	4415      	add	r5, r2
 8019778:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801977a:	4414      	add	r4, r2
 801977c:	e7a6      	b.n	80196cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801977e:	2700      	movs	r7, #0
 8019780:	1bda      	subs	r2, r3, r7
 8019782:	2a00      	cmp	r2, #0
 8019784:	dc40      	bgt.n	8019808 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019786:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801978a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801978e:	441e      	add	r6, r3
 8019790:	9b00      	ldr	r3, [sp, #0]
 8019792:	2b00      	cmp	r3, #0
 8019794:	f340 80ad 	ble.w	80198f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019798:	ee30 0a04 	vadd.f32	s0, s0, s8
 801979c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801979e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197a2:	eeb0 6a62 	vmov.f32	s12, s5
 80197a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80197aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80197b6:	eeb0 6a43 	vmov.f32	s12, s6
 80197ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197be:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80197c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197da:	ee12 2a90 	vmov	r2, s5
 80197de:	eef0 2a47 	vmov.f32	s5, s14
 80197e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80197e6:	ee13 2a10 	vmov	r2, s6
 80197ea:	9311      	str	r3, [sp, #68]	@ 0x44
 80197ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197ee:	eeb0 3a67 	vmov.f32	s6, s15
 80197f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80197f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80197f8:	9b00      	ldr	r3, [sp, #0]
 80197fa:	9a03      	ldr	r2, [sp, #12]
 80197fc:	3b01      	subs	r3, #1
 80197fe:	9300      	str	r3, [sp, #0]
 8019800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019802:	bf08      	it	eq
 8019804:	4613      	moveq	r3, r2
 8019806:	e72d      	b.n	8019664 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019808:	1428      	asrs	r0, r5, #16
 801980a:	d45c      	bmi.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801980c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019810:	4282      	cmp	r2, r0
 8019812:	dd58      	ble.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019814:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019818:	d455      	bmi.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801981a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801981e:	4572      	cmp	r2, lr
 8019820:	dd51      	ble.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019822:	9a01      	ldr	r2, [sp, #4]
 8019824:	9902      	ldr	r1, [sp, #8]
 8019826:	fb0e 0002 	mla	r0, lr, r2, r0
 801982a:	0842      	lsrs	r2, r0, #1
 801982c:	07c0      	lsls	r0, r0, #31
 801982e:	5c8a      	ldrb	r2, [r1, r2]
 8019830:	bf54      	ite	pl
 8019832:	f002 020f 	andpl.w	r2, r2, #15
 8019836:	1112      	asrmi	r2, r2, #4
 8019838:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801983c:	b2d2      	uxtb	r2, r2
 801983e:	2a00      	cmp	r2, #0
 8019840:	d041      	beq.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019842:	492d      	ldr	r1, [pc, #180]	@ (80198f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019844:	2aff      	cmp	r2, #255	@ 0xff
 8019846:	6808      	ldr	r0, [r1, #0]
 8019848:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801984c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019850:	fa5f fe80 	uxtb.w	lr, r0
 8019854:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019858:	d03b      	beq.n	80198d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801985a:	fa1f f982 	uxth.w	r9, r2
 801985e:	4438      	add	r0, r7
 8019860:	43d2      	mvns	r2, r2
 8019862:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019866:	fb1e fe09 	smulbb	lr, lr, r9
 801986a:	fb1a fa09 	smulbb	sl, sl, r9
 801986e:	b2d2      	uxtb	r2, r2
 8019870:	fb1b f909 	smulbb	r9, fp, r9
 8019874:	fb08 ee02 	mla	lr, r8, r2, lr
 8019878:	fa1f fe8e 	uxth.w	lr, lr
 801987c:	f10e 0801 	add.w	r8, lr, #1
 8019880:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019884:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019888:	f806 e000 	strb.w	lr, [r6, r0]
 801988c:	4430      	add	r0, r6
 801988e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019892:	fb0e aa02 	mla	sl, lr, r2, sl
 8019896:	fa1f fa8a 	uxth.w	sl, sl
 801989a:	f10a 0e01 	add.w	lr, sl, #1
 801989e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80198a2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80198a6:	fb0e 9902 	mla	r9, lr, r2, r9
 80198aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80198ae:	fa1f f989 	uxth.w	r9, r9
 80198b2:	f880 a001 	strb.w	sl, [r0, #1]
 80198b6:	f109 0201 	add.w	r2, r9, #1
 80198ba:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80198be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198c2:	f880 9002 	strb.w	r9, [r0, #2]
 80198c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198c8:	3701      	adds	r7, #1
 80198ca:	4415      	add	r5, r2
 80198cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80198ce:	4414      	add	r4, r2
 80198d0:	e756      	b.n	8019780 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80198d2:	4438      	add	r0, r7
 80198d4:	f806 e000 	strb.w	lr, [r6, r0]
 80198d8:	4430      	add	r0, r6
 80198da:	f880 a001 	strb.w	sl, [r0, #1]
 80198de:	f880 b002 	strb.w	fp, [r0, #2]
 80198e2:	e7f0      	b.n	80198c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80198e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80198e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80198ec:	f800 bc01 	strb.w	fp, [r0, #-1]
 80198f0:	e73d      	b.n	801976e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80198f2:	b005      	add	sp, #20
 80198f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f8:	240253c4 	.word	0x240253c4

080198fc <_ZN8touchgfx8LCD24bppD1Ev>:
 80198fc:	4770      	bx	lr

080198fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 80198fe:	4770      	bx	lr

08019900 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8019900:	4770      	bx	lr

08019902 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8019902:	4770      	bx	lr

08019904 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8019904:	4770      	bx	lr

08019906 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019906:	4770      	bx	lr

08019908 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019908:	4770      	bx	lr

0801990a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801990a:	4770      	bx	lr

0801990c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801990c:	4770      	bx	lr

0801990e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801990e:	4770      	bx	lr

08019910 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019910:	4770      	bx	lr

08019912 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019912:	4770      	bx	lr

08019914 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019914:	4770      	bx	lr

08019916 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019916:	4770      	bx	lr

08019918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019918:	4770      	bx	lr

0801991a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801991a:	4770      	bx	lr

0801991c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801991c:	4770      	bx	lr

0801991e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801991e:	4770      	bx	lr

08019920 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019920:	4770      	bx	lr

08019922 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019922:	4770      	bx	lr

08019924 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019924:	4770      	bx	lr

08019926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019926:	4770      	bx	lr

08019928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019928:	4770      	bx	lr

0801992a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801992a:	4770      	bx	lr

0801992c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801992c:	4770      	bx	lr
	...

08019930 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019932:	4606      	mov	r6, r0
 8019934:	b087      	sub	sp, #28
 8019936:	4615      	mov	r5, r2
 8019938:	461f      	mov	r7, r3
 801993a:	b353      	cbz	r3, 8019992 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801993c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019940:	2b00      	cmp	r3, #0
 8019942:	dd26      	ble.n	8019992 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019944:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019948:	2b00      	cmp	r3, #0
 801994a:	dd22      	ble.n	8019992 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801994c:	6808      	ldr	r0, [r1, #0]
 801994e:	aa04      	add	r2, sp, #16
 8019950:	6849      	ldr	r1, [r1, #4]
 8019952:	4c1b      	ldr	r4, [pc, #108]	@ (80199c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019954:	c203      	stmia	r2!, {r0, r1}
 8019956:	a804      	add	r0, sp, #16
 8019958:	f7fa fc28 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801995c:	6820      	ldr	r0, [r4, #0]
 801995e:	6803      	ldr	r3, [r0, #0]
 8019960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019962:	4798      	blx	r3
 8019964:	2fff      	cmp	r7, #255	@ 0xff
 8019966:	d016      	beq.n	8019996 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019968:	f010 0f08 	tst.w	r0, #8
 801996c:	6820      	ldr	r0, [r4, #0]
 801996e:	d015      	beq.n	801999c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019970:	2400      	movs	r4, #0
 8019972:	6801      	ldr	r1, [r0, #0]
 8019974:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019978:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801997c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8019980:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019984:	9401      	str	r4, [sp, #4]
 8019986:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801998a:	9400      	str	r4, [sp, #0]
 801998c:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801998e:	4629      	mov	r1, r5
 8019990:	47a0      	blx	r4
 8019992:	b007      	add	sp, #28
 8019994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019996:	f010 0f02 	tst.w	r0, #2
 801999a:	e7e7      	b.n	801996c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801999c:	6803      	ldr	r3, [r0, #0]
 801999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199a0:	4798      	blx	r3
 80199a2:	4b08      	ldr	r3, [pc, #32]	@ (80199c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80199a4:	4601      	mov	r1, r0
 80199a6:	4630      	mov	r0, r6
 80199a8:	881a      	ldrh	r2, [r3, #0]
 80199aa:	6833      	ldr	r3, [r6, #0]
 80199ac:	e9cd 5700 	strd	r5, r7, [sp]
 80199b0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80199b2:	ab04      	add	r3, sp, #16
 80199b4:	47a8      	blx	r5
 80199b6:	6820      	ldr	r0, [r4, #0]
 80199b8:	6803      	ldr	r3, [r0, #0]
 80199ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80199bc:	4798      	blx	r3
 80199be:	e7e8      	b.n	8019992 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80199c0:	240253b4 	.word	0x240253b4
 80199c4:	240253ae 	.word	0x240253ae

080199c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80199c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199cc:	b08b      	sub	sp, #44	@ 0x2c
 80199ce:	460d      	mov	r5, r1
 80199d0:	4616      	mov	r6, r2
 80199d2:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80199d6:	f1b8 0f00 	cmp.w	r8, #0
 80199da:	d047      	beq.n	8019a6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80199dc:	6810      	ldr	r0, [r2, #0]
 80199de:	ac06      	add	r4, sp, #24
 80199e0:	6851      	ldr	r1, [r2, #4]
 80199e2:	4f51      	ldr	r7, [pc, #324]	@ (8019b28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80199e4:	c403      	stmia	r4!, {r0, r1}
 80199e6:	6818      	ldr	r0, [r3, #0]
 80199e8:	ac08      	add	r4, sp, #32
 80199ea:	6859      	ldr	r1, [r3, #4]
 80199ec:	c403      	stmia	r4!, {r0, r1}
 80199ee:	a806      	add	r0, sp, #24
 80199f0:	f7fa fbdc 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199f4:	4631      	mov	r1, r6
 80199f6:	a808      	add	r0, sp, #32
 80199f8:	f7fa fc1c 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80199fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019a00:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019a04:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a08:	6838      	ldr	r0, [r7, #0]
 8019a0a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019a0e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8019a12:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8019a16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a1a:	440d      	add	r5, r1
 8019a1c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019a20:	440a      	add	r2, r1
 8019a22:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019a26:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019a2a:	4413      	add	r3, r2
 8019a2c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019a30:	6803      	ldr	r3, [r0, #0]
 8019a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a34:	4798      	blx	r3
 8019a36:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019a3a:	d01a      	beq.n	8019a72 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019a3c:	f010 0f04 	tst.w	r0, #4
 8019a40:	6838      	ldr	r0, [r7, #0]
 8019a42:	d019      	beq.n	8019a78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019a44:	2100      	movs	r1, #0
 8019a46:	6807      	ldr	r7, [r0, #0]
 8019a48:	b2a4      	uxth	r4, r4
 8019a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a4e:	b2b6      	uxth	r6, r6
 8019a50:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019a54:	9401      	str	r4, [sp, #4]
 8019a56:	9600      	str	r6, [sp, #0]
 8019a58:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019a5c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019a60:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a64:	9102      	str	r1, [sp, #8]
 8019a66:	4629      	mov	r1, r5
 8019a68:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8019a6a:	47a0      	blx	r4
 8019a6c:	b00b      	add	sp, #44	@ 0x2c
 8019a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a72:	f010 0f01 	tst.w	r0, #1
 8019a76:	e7e3      	b.n	8019a40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019a78:	6803      	ldr	r3, [r0, #0]
 8019a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a7c:	4798      	blx	r3
 8019a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8019b2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019a80:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8019a84:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019a88:	8813      	ldrh	r3, [r2, #0]
 8019a8a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8019a8e:	fb03 f404 	mul.w	r4, r3, r4
 8019a92:	fb03 c101 	mla	r1, r3, r1, ip
 8019a96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019a9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a9e:	4408      	add	r0, r1
 8019aa0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019aa4:	4404      	add	r4, r0
 8019aa6:	d02e      	beq.n	8019b06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019aa8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8019aac:	1b9b      	subs	r3, r3, r6
 8019aae:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8019ab2:	1b96      	subs	r6, r2, r6
 8019ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ab8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019abc:	42a0      	cmp	r0, r4
 8019abe:	d22d      	bcs.n	8019b1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019ac0:	eb00 0e01 	add.w	lr, r0, r1
 8019ac4:	4570      	cmp	r0, lr
 8019ac6:	d210      	bcs.n	8019aea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8019ac8:	f890 9000 	ldrb.w	r9, [r0]
 8019acc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019ad0:	fb19 f90c 	smulbb	r9, r9, ip
 8019ad4:	fb02 9208 	mla	r2, r2, r8, r9
 8019ad8:	b292      	uxth	r2, r2
 8019ada:	f102 0901 	add.w	r9, r2, #1
 8019ade:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8019ae2:	1212      	asrs	r2, r2, #8
 8019ae4:	f800 2b01 	strb.w	r2, [r0], #1
 8019ae8:	e7ec      	b.n	8019ac4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8019aea:	4418      	add	r0, r3
 8019aec:	4435      	add	r5, r6
 8019aee:	e7e5      	b.n	8019abc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8019af0:	8813      	ldrh	r3, [r2, #0]
 8019af2:	1b9b      	subs	r3, r3, r6
 8019af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019af8:	4418      	add	r0, r3
 8019afa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019afe:	1b9b      	subs	r3, r3, r6
 8019b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b04:	441d      	add	r5, r3
 8019b06:	42a0      	cmp	r0, r4
 8019b08:	d208      	bcs.n	8019b1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019b0a:	eb00 0c01 	add.w	ip, r0, r1
 8019b0e:	4560      	cmp	r0, ip
 8019b10:	d2ee      	bcs.n	8019af0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8019b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019b16:	f800 3b01 	strb.w	r3, [r0], #1
 8019b1a:	e7f8      	b.n	8019b0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8019b1c:	6838      	ldr	r0, [r7, #0]
 8019b1e:	6803      	ldr	r3, [r0, #0]
 8019b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b22:	4798      	blx	r3
 8019b24:	e7a2      	b.n	8019a6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019b26:	bf00      	nop
 8019b28:	240253b4 	.word	0x240253b4
 8019b2c:	240253ae 	.word	0x240253ae

08019b30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b32:	2300      	movs	r3, #0
 8019b34:	b085      	sub	sp, #20
 8019b36:	9300      	str	r3, [sp, #0]
 8019b38:	4b41      	ldr	r3, [pc, #260]	@ (8019c40 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d136      	bne.n	8019bae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8019b40:	4a40      	ldr	r2, [pc, #256]	@ (8019c44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019b42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b46:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d131      	bne.n	8019bb2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8019b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8019c48 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b54:	ac02      	add	r4, sp, #8
 8019b56:	6808      	ldr	r0, [r1, #0]
 8019b58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b5c:	ab02      	add	r3, sp, #8
 8019b5e:	6849      	ldr	r1, [r1, #4]
 8019b60:	4d3a      	ldr	r5, [pc, #232]	@ (8019c4c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8019b62:	c303      	stmia	r3!, {r0, r1}
 8019b64:	4669      	mov	r1, sp
 8019b66:	4620      	mov	r0, r4
 8019b68:	f7fa fb64 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b6c:	4668      	mov	r0, sp
 8019b6e:	f7fa fb1d 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019b76:	f8bd 2000 	ldrh.w	r2, [sp]
 8019b7a:	462e      	mov	r6, r5
 8019b7c:	6828      	ldr	r0, [r5, #0]
 8019b7e:	4413      	add	r3, r2
 8019b80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019b84:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019b88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019b8c:	4413      	add	r3, r2
 8019b8e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019b92:	6803      	ldr	r3, [r0, #0]
 8019b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b96:	4798      	blx	r3
 8019b98:	f010 0f01 	tst.w	r0, #1
 8019b9c:	d00b      	beq.n	8019bb6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8019b9e:	6828      	ldr	r0, [r5, #0]
 8019ba0:	6803      	ldr	r3, [r0, #0]
 8019ba2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019ba8:	4798      	blx	r3
 8019baa:	b005      	add	sp, #20
 8019bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bae:	4a26      	ldr	r2, [pc, #152]	@ (8019c48 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019bb0:	e7c7      	b.n	8019b42 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019bb2:	4b24      	ldr	r3, [pc, #144]	@ (8019c44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019bb4:	e7cc      	b.n	8019b50 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019bb6:	6830      	ldr	r0, [r6, #0]
 8019bb8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019bbc:	6803      	ldr	r3, [r0, #0]
 8019bbe:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bc4:	4798      	blx	r3
 8019bc6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019bca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019bce:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8019bd2:	fb14 3402 	smlabb	r4, r4, r2, r3
 8019bd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019bda:	4404      	add	r4, r0
 8019bdc:	6830      	ldr	r0, [r6, #0]
 8019bde:	6803      	ldr	r3, [r0, #0]
 8019be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019be2:	4798      	blx	r3
 8019be4:	4917      	ldr	r1, [pc, #92]	@ (8019c44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019be6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019bea:	880b      	ldrh	r3, [r1, #0]
 8019bec:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8019bf0:	fb03 c202 	mla	r2, r3, r2, ip
 8019bf4:	437b      	muls	r3, r7
 8019bf6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8019bfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019bfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c02:	4410      	add	r0, r2
 8019c04:	18c2      	adds	r2, r0, r3
 8019c06:	4290      	cmp	r0, r2
 8019c08:	d214      	bcs.n	8019c34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019c0a:	eb00 0c07 	add.w	ip, r0, r7
 8019c0e:	4560      	cmp	r0, ip
 8019c10:	d204      	bcs.n	8019c1c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8019c12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019c16:	f800 3b01 	strb.w	r3, [r0], #1
 8019c1a:	e7f8      	b.n	8019c0e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019c1c:	880b      	ldrh	r3, [r1, #0]
 8019c1e:	1b5b      	subs	r3, r3, r5
 8019c20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c24:	4418      	add	r0, r3
 8019c26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019c2a:	1b5b      	subs	r3, r3, r5
 8019c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c30:	441c      	add	r4, r3
 8019c32:	e7e8      	b.n	8019c06 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019c34:	6830      	ldr	r0, [r6, #0]
 8019c36:	6803      	ldr	r3, [r0, #0]
 8019c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c3a:	4798      	blx	r3
 8019c3c:	e7b5      	b.n	8019baa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019c3e:	bf00      	nop
 8019c40:	240253ac 	.word	0x240253ac
 8019c44:	240253ae 	.word	0x240253ae
 8019c48:	240253b0 	.word	0x240253b0
 8019c4c:	240253b4 	.word	0x240253b4

08019c50 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c54:	b08f      	sub	sp, #60	@ 0x3c
 8019c56:	461c      	mov	r4, r3
 8019c58:	9203      	str	r2, [sp, #12]
 8019c5a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019c5e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019c60:	6820      	ldr	r0, [r4, #0]
 8019c62:	9100      	str	r1, [sp, #0]
 8019c64:	9204      	str	r2, [sp, #16]
 8019c66:	aa0a      	add	r2, sp, #40	@ 0x28
 8019c68:	6861      	ldr	r1, [r4, #4]
 8019c6a:	c203      	stmia	r2!, {r0, r1}
 8019c6c:	6818      	ldr	r0, [r3, #0]
 8019c6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8019c70:	6859      	ldr	r1, [r3, #4]
 8019c72:	c203      	stmia	r2!, {r0, r1}
 8019c74:	a80a      	add	r0, sp, #40	@ 0x28
 8019c76:	f7fa fa99 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c7a:	4621      	mov	r1, r4
 8019c7c:	a80c      	add	r0, sp, #48	@ 0x30
 8019c7e:	f7fa fad9 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c82:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8019c86:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019c8a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019c8e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8019c92:	bfdb      	ittet	le
 8019c94:	b2b3      	uxthle	r3, r6
 8019c96:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019c9a:	2301      	movgt	r3, #1
 8019c9c:	fb92 f3f3 	sdivle	r3, r2, r3
 8019ca0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019ca4:	441d      	add	r5, r3
 8019ca6:	fb92 f1f3 	sdiv	r1, r2, r3
 8019caa:	fa1f fc81 	uxth.w	ip, r1
 8019cae:	3d01      	subs	r5, #1
 8019cb0:	fb0c 2413 	mls	r4, ip, r3, r2
 8019cb4:	4661      	mov	r1, ip
 8019cb6:	fb14 f406 	smulbb	r4, r4, r6
 8019cba:	4404      	add	r4, r0
 8019cbc:	fb95 f5f3 	sdiv	r5, r5, r3
 8019cc0:	b2a4      	uxth	r4, r4
 8019cc2:	b131      	cbz	r1, 8019cd2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8019cc4:	9b03      	ldr	r3, [sp, #12]
 8019cc6:	9900      	ldr	r1, [sp, #0]
 8019cc8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019ccc:	ba1b      	rev	r3, r3
 8019cce:	4419      	add	r1, r3
 8019cd0:	9100      	str	r1, [sp, #0]
 8019cd2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019cd6:	b2ad      	uxth	r5, r5
 8019cd8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8019cdc:	4418      	add	r0, r3
 8019cde:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019ce2:	00ad      	lsls	r5, r5, #2
 8019ce4:	441a      	add	r2, r3
 8019ce6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019cea:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019cee:	9301      	str	r3, [sp, #4]
 8019cf0:	4b79      	ldr	r3, [pc, #484]	@ (8019ed8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019cf2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019cf6:	6818      	ldr	r0, [r3, #0]
 8019cf8:	6803      	ldr	r3, [r0, #0]
 8019cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cfc:	4798      	blx	r3
 8019cfe:	4a77      	ldr	r2, [pc, #476]	@ (8019edc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8019d00:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019d04:	2c00      	cmp	r4, #0
 8019d06:	8813      	ldrh	r3, [r2, #0]
 8019d08:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8019d0e:	fb03 c101 	mla	r1, r3, r1, ip
 8019d12:	fb06 f303 	mul.w	r3, r6, r3
 8019d16:	bf18      	it	ne
 8019d18:	2600      	movne	r6, #0
 8019d1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d22:	4408      	add	r0, r1
 8019d24:	4403      	add	r3, r0
 8019d26:	9306      	str	r3, [sp, #24]
 8019d28:	f105 0304 	add.w	r3, r5, #4
 8019d2c:	9305      	str	r3, [sp, #20]
 8019d2e:	9b01      	ldr	r3, [sp, #4]
 8019d30:	bf08      	it	eq
 8019d32:	461e      	moveq	r6, r3
 8019d34:	2300      	movs	r3, #0
 8019d36:	b2b6      	uxth	r6, r6
 8019d38:	9302      	str	r3, [sp, #8]
 8019d3a:	9a06      	ldr	r2, [sp, #24]
 8019d3c:	4290      	cmp	r0, r2
 8019d3e:	f080 80c2 	bcs.w	8019ec6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8019d42:	b963      	cbnz	r3, 8019d5e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019d44:	9b00      	ldr	r3, [sp, #0]
 8019d46:	781a      	ldrb	r2, [r3, #0]
 8019d48:	0993      	lsrs	r3, r2, #6
 8019d4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019d4e:	9202      	str	r2, [sp, #8]
 8019d50:	1e5a      	subs	r2, r3, #1
 8019d52:	2a02      	cmp	r2, #2
 8019d54:	d815      	bhi.n	8019d82 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019d56:	9a00      	ldr	r2, [sp, #0]
 8019d58:	b29b      	uxth	r3, r3
 8019d5a:	3201      	adds	r2, #1
 8019d5c:	9200      	str	r2, [sp, #0]
 8019d5e:	b1b4      	cbz	r4, 8019d8e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8019d60:	429c      	cmp	r4, r3
 8019d62:	bf91      	iteee	ls
 8019d64:	1b1c      	subls	r4, r3, r4
 8019d66:	1ae4      	subhi	r4, r4, r3
 8019d68:	4635      	movhi	r5, r6
 8019d6a:	f04f 0e00 	movhi.w	lr, #0
 8019d6e:	bf9b      	ittet	ls
 8019d70:	fa1f fe84 	uxthls.w	lr, r4
 8019d74:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019d78:	b2a4      	uxthhi	r4, r4
 8019d7a:	2400      	movls	r4, #0
 8019d7c:	4673      	mov	r3, lr
 8019d7e:	462e      	mov	r6, r5
 8019d80:	e7db      	b.n	8019d3a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8019d82:	9a00      	ldr	r2, [sp, #0]
 8019d84:	9b00      	ldr	r3, [sp, #0]
 8019d86:	3202      	adds	r2, #2
 8019d88:	785b      	ldrb	r3, [r3, #1]
 8019d8a:	9200      	str	r2, [sp, #0]
 8019d8c:	e7e7      	b.n	8019d5e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019d8e:	2204      	movs	r2, #4
 8019d90:	9905      	ldr	r1, [sp, #20]
 8019d92:	429e      	cmp	r6, r3
 8019d94:	4615      	mov	r5, r2
 8019d96:	9a02      	ldr	r2, [sp, #8]
 8019d98:	bf94      	ite	ls
 8019d9a:	eba3 0e06 	subls.w	lr, r3, r6
 8019d9e:	46a6      	movhi	lr, r4
 8019da0:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019da4:	9903      	ldr	r1, [sp, #12]
 8019da6:	bf8c      	ite	hi
 8019da8:	1af5      	subhi	r5, r6, r3
 8019daa:	fa1f fe8e 	uxthls.w	lr, lr
 8019dae:	f851 c002 	ldr.w	ip, [r1, r2]
 8019db2:	bf9a      	itte	ls
 8019db4:	4625      	movls	r5, r4
 8019db6:	4632      	movls	r2, r6
 8019db8:	b2ad      	uxthhi	r5, r5
 8019dba:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8019dbe:	bf88      	it	hi
 8019dc0:	461a      	movhi	r2, r3
 8019dc2:	b179      	cbz	r1, 8019de4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019dc4:	29ff      	cmp	r1, #255	@ 0xff
 8019dc6:	fa5f f98c 	uxtb.w	r9, ip
 8019dca:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8019dce:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8019dd2:	d126      	bne.n	8019e22 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019dd4:	9f04      	ldr	r7, [sp, #16]
 8019dd6:	2fff      	cmp	r7, #255	@ 0xff
 8019dd8:	d123      	bne.n	8019e22 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019dda:	4682      	mov	sl, r0
 8019ddc:	4611      	mov	r1, r2
 8019dde:	f10a 0a03 	add.w	sl, sl, #3
 8019de2:	b9a9      	cbnz	r1, 8019e10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8019de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019de8:	429e      	cmp	r6, r3
 8019dea:	4410      	add	r0, r2
 8019dec:	d8c6      	bhi.n	8019d7c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019dee:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8019df2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019df8:	1b64      	subs	r4, r4, r5
 8019dfa:	9a01      	ldr	r2, [sp, #4]
 8019dfc:	881b      	ldrh	r3, [r3, #0]
 8019dfe:	b2a4      	uxth	r4, r4
 8019e00:	1a9b      	subs	r3, r3, r2
 8019e02:	2c00      	cmp	r4, #0
 8019e04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e08:	bf18      	it	ne
 8019e0a:	2500      	movne	r5, #0
 8019e0c:	4418      	add	r0, r3
 8019e0e:	e7b5      	b.n	8019d7c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019e10:	3901      	subs	r1, #1
 8019e12:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8019e16:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8019e1a:	f80a cc01 	strb.w	ip, [sl, #-1]
 8019e1e:	b289      	uxth	r1, r1
 8019e20:	e7dd      	b.n	8019dde <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8019e22:	9f04      	ldr	r7, [sp, #16]
 8019e24:	fb07 fa01 	mul.w	sl, r7, r1
 8019e28:	f10a 0101 	add.w	r1, sl, #1
 8019e2c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8019e30:	1209      	asrs	r1, r1, #8
 8019e32:	ea6f 0a01 	mvn.w	sl, r1
 8019e36:	b289      	uxth	r1, r1
 8019e38:	fb19 f901 	smulbb	r9, r9, r1
 8019e3c:	fa5f fa8a 	uxtb.w	sl, sl
 8019e40:	fb18 f801 	smulbb	r8, r8, r1
 8019e44:	fb1c f101 	smulbb	r1, ip, r1
 8019e48:	fa1f f789 	uxth.w	r7, r9
 8019e4c:	4684      	mov	ip, r0
 8019e4e:	4691      	mov	r9, r2
 8019e50:	9707      	str	r7, [sp, #28]
 8019e52:	b289      	uxth	r1, r1
 8019e54:	fa1f f788 	uxth.w	r7, r8
 8019e58:	9708      	str	r7, [sp, #32]
 8019e5a:	f10c 0c03 	add.w	ip, ip, #3
 8019e5e:	f1b9 0f00 	cmp.w	r9, #0
 8019e62:	d0bf      	beq.n	8019de4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019e64:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019e68:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e6c:	9f07      	ldr	r7, [sp, #28]
 8019e6e:	fa1f f989 	uxth.w	r9, r9
 8019e72:	fb08 780a 	mla	r8, r8, sl, r7
 8019e76:	9f08      	ldr	r7, [sp, #32]
 8019e78:	fa1f f888 	uxth.w	r8, r8
 8019e7c:	f108 0b01 	add.w	fp, r8, #1
 8019e80:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019e84:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019e88:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019e8c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8019e90:	fb08 780a 	mla	r8, r8, sl, r7
 8019e94:	fa1f f888 	uxth.w	r8, r8
 8019e98:	f108 0b01 	add.w	fp, r8, #1
 8019e9c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ea0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ea4:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8019ea8:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8019eac:	fb08 180a 	mla	r8, r8, sl, r1
 8019eb0:	fa1f f888 	uxth.w	r8, r8
 8019eb4:	f108 0b01 	add.w	fp, r8, #1
 8019eb8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ebc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ec0:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8019ec4:	e7c9      	b.n	8019e5a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019ec6:	4b04      	ldr	r3, [pc, #16]	@ (8019ed8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019ec8:	6818      	ldr	r0, [r3, #0]
 8019eca:	6803      	ldr	r3, [r0, #0]
 8019ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ece:	4798      	blx	r3
 8019ed0:	b00f      	add	sp, #60	@ 0x3c
 8019ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed6:	bf00      	nop
 8019ed8:	240253b4 	.word	0x240253b4
 8019edc:	240253ae 	.word	0x240253ae

08019ee0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee4:	b089      	sub	sp, #36	@ 0x24
 8019ee6:	4607      	mov	r7, r0
 8019ee8:	4689      	mov	r9, r1
 8019eea:	4692      	mov	sl, r2
 8019eec:	ac08      	add	r4, sp, #32
 8019eee:	461e      	mov	r6, r3
 8019ef0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f7fd ff77 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	4605      	mov	r5, r0
 8019efe:	4620      	mov	r0, r4
 8019f00:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019f04:	f7fd fe7e 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f08:	4683      	mov	fp, r0
 8019f0a:	4620      	mov	r0, r4
 8019f0c:	f7fd feae 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f10:	4653      	mov	r3, sl
 8019f12:	464a      	mov	r2, r9
 8019f14:	4639      	mov	r1, r7
 8019f16:	9500      	str	r5, [sp, #0]
 8019f18:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019f1c:	a806      	add	r0, sp, #24
 8019f1e:	47c0      	blx	r8
 8019f20:	a906      	add	r1, sp, #24
 8019f22:	4630      	mov	r0, r6
 8019f24:	f7fd fd52 	bl	80179cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019f28:	4628      	mov	r0, r5
 8019f2a:	b009      	add	sp, #36	@ 0x24
 8019f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f30 <_ZN8touchgfx8LCD24bppD0Ev>:
 8019f30:	b510      	push	{r4, lr}
 8019f32:	4604      	mov	r4, r0
 8019f34:	216c      	movs	r1, #108	@ 0x6c
 8019f36:	f00a f832 	bl	8023f9e <_ZdlPvj>
 8019f3a:	4620      	mov	r0, r4
 8019f3c:	bd10      	pop	{r4, pc}

08019f3e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8019f3e:	b510      	push	{r4, lr}
 8019f40:	4604      	mov	r4, r0
 8019f42:	2104      	movs	r1, #4
 8019f44:	f00a f82b 	bl	8023f9e <_ZdlPvj>
 8019f48:	4620      	mov	r0, r4
 8019f4a:	bd10      	pop	{r4, pc}

08019f4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019f4c:	b510      	push	{r4, lr}
 8019f4e:	4604      	mov	r4, r0
 8019f50:	2104      	movs	r1, #4
 8019f52:	f00a f824 	bl	8023f9e <_ZdlPvj>
 8019f56:	4620      	mov	r0, r4
 8019f58:	bd10      	pop	{r4, pc}

08019f5a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019f5a:	b510      	push	{r4, lr}
 8019f5c:	4604      	mov	r4, r0
 8019f5e:	f640 0144 	movw	r1, #2116	@ 0x844
 8019f62:	f00a f81c 	bl	8023f9e <_ZdlPvj>
 8019f66:	4620      	mov	r0, r4
 8019f68:	bd10      	pop	{r4, pc}

08019f6a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8019f6a:	b510      	push	{r4, lr}
 8019f6c:	4604      	mov	r4, r0
 8019f6e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8019f72:	f00a f814 	bl	8023f9e <_ZdlPvj>
 8019f76:	4620      	mov	r0, r4
 8019f78:	bd10      	pop	{r4, pc}

08019f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f7a:	b510      	push	{r4, lr}
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	2104      	movs	r1, #4
 8019f80:	f00a f80d 	bl	8023f9e <_ZdlPvj>
 8019f84:	4620      	mov	r0, r4
 8019f86:	bd10      	pop	{r4, pc}

08019f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f88:	b510      	push	{r4, lr}
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	2104      	movs	r1, #4
 8019f8e:	f00a f806 	bl	8023f9e <_ZdlPvj>
 8019f92:	4620      	mov	r0, r4
 8019f94:	bd10      	pop	{r4, pc}

08019f96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019f96:	b510      	push	{r4, lr}
 8019f98:	4604      	mov	r4, r0
 8019f9a:	2104      	movs	r1, #4
 8019f9c:	f009 ffff 	bl	8023f9e <_ZdlPvj>
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	bd10      	pop	{r4, pc}

08019fa4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019fa4:	b510      	push	{r4, lr}
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	2104      	movs	r1, #4
 8019faa:	f009 fff8 	bl	8023f9e <_ZdlPvj>
 8019fae:	4620      	mov	r0, r4
 8019fb0:	bd10      	pop	{r4, pc}

08019fb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019fb2:	b510      	push	{r4, lr}
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	2104      	movs	r1, #4
 8019fb8:	f009 fff1 	bl	8023f9e <_ZdlPvj>
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	bd10      	pop	{r4, pc}

08019fc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019fc0:	b510      	push	{r4, lr}
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	2104      	movs	r1, #4
 8019fc6:	f009 ffea 	bl	8023f9e <_ZdlPvj>
 8019fca:	4620      	mov	r0, r4
 8019fcc:	bd10      	pop	{r4, pc}

08019fce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019fce:	b510      	push	{r4, lr}
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	2104      	movs	r1, #4
 8019fd4:	f009 ffe3 	bl	8023f9e <_ZdlPvj>
 8019fd8:	4620      	mov	r0, r4
 8019fda:	bd10      	pop	{r4, pc}

08019fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019fdc:	b510      	push	{r4, lr}
 8019fde:	4604      	mov	r4, r0
 8019fe0:	2104      	movs	r1, #4
 8019fe2:	f009 ffdc 	bl	8023f9e <_ZdlPvj>
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	bd10      	pop	{r4, pc}

08019fea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019fea:	b510      	push	{r4, lr}
 8019fec:	4604      	mov	r4, r0
 8019fee:	2104      	movs	r1, #4
 8019ff0:	f009 ffd5 	bl	8023f9e <_ZdlPvj>
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	bd10      	pop	{r4, pc}

08019ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019ff8:	b510      	push	{r4, lr}
 8019ffa:	4604      	mov	r4, r0
 8019ffc:	2104      	movs	r1, #4
 8019ffe:	f009 ffce 	bl	8023f9e <_ZdlPvj>
 801a002:	4620      	mov	r0, r4
 801a004:	bd10      	pop	{r4, pc}

0801a006 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a006:	b510      	push	{r4, lr}
 801a008:	4604      	mov	r4, r0
 801a00a:	2104      	movs	r1, #4
 801a00c:	f009 ffc7 	bl	8023f9e <_ZdlPvj>
 801a010:	4620      	mov	r0, r4
 801a012:	bd10      	pop	{r4, pc}

0801a014 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a014:	b510      	push	{r4, lr}
 801a016:	4604      	mov	r4, r0
 801a018:	2104      	movs	r1, #4
 801a01a:	f009 ffc0 	bl	8023f9e <_ZdlPvj>
 801a01e:	4620      	mov	r0, r4
 801a020:	bd10      	pop	{r4, pc}

0801a022 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a022:	b510      	push	{r4, lr}
 801a024:	4604      	mov	r4, r0
 801a026:	2104      	movs	r1, #4
 801a028:	f009 ffb9 	bl	8023f9e <_ZdlPvj>
 801a02c:	4620      	mov	r0, r4
 801a02e:	bd10      	pop	{r4, pc}

0801a030 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a030:	b510      	push	{r4, lr}
 801a032:	4604      	mov	r4, r0
 801a034:	2104      	movs	r1, #4
 801a036:	f009 ffb2 	bl	8023f9e <_ZdlPvj>
 801a03a:	4620      	mov	r0, r4
 801a03c:	bd10      	pop	{r4, pc}

0801a03e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a03e:	b510      	push	{r4, lr}
 801a040:	4604      	mov	r4, r0
 801a042:	2104      	movs	r1, #4
 801a044:	f009 ffab 	bl	8023f9e <_ZdlPvj>
 801a048:	4620      	mov	r0, r4
 801a04a:	bd10      	pop	{r4, pc}

0801a04c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a04c:	b510      	push	{r4, lr}
 801a04e:	4604      	mov	r4, r0
 801a050:	2104      	movs	r1, #4
 801a052:	f009 ffa4 	bl	8023f9e <_ZdlPvj>
 801a056:	4620      	mov	r0, r4
 801a058:	bd10      	pop	{r4, pc}

0801a05a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a05a:	b510      	push	{r4, lr}
 801a05c:	4604      	mov	r4, r0
 801a05e:	2104      	movs	r1, #4
 801a060:	f009 ff9d 	bl	8023f9e <_ZdlPvj>
 801a064:	4620      	mov	r0, r4
 801a066:	bd10      	pop	{r4, pc}

0801a068 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a068:	b510      	push	{r4, lr}
 801a06a:	4604      	mov	r4, r0
 801a06c:	2104      	movs	r1, #4
 801a06e:	f009 ff96 	bl	8023f9e <_ZdlPvj>
 801a072:	4620      	mov	r0, r4
 801a074:	bd10      	pop	{r4, pc}

0801a076 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a076:	b510      	push	{r4, lr}
 801a078:	4604      	mov	r4, r0
 801a07a:	2104      	movs	r1, #4
 801a07c:	f009 ff8f 	bl	8023f9e <_ZdlPvj>
 801a080:	4620      	mov	r0, r4
 801a082:	bd10      	pop	{r4, pc}

0801a084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a084:	b510      	push	{r4, lr}
 801a086:	4604      	mov	r4, r0
 801a088:	2104      	movs	r1, #4
 801a08a:	f009 ff88 	bl	8023f9e <_ZdlPvj>
 801a08e:	4620      	mov	r0, r4
 801a090:	bd10      	pop	{r4, pc}
	...

0801a094 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a098:	b08f      	sub	sp, #60	@ 0x3c
 801a09a:	461c      	mov	r4, r3
 801a09c:	460e      	mov	r6, r1
 801a09e:	9206      	str	r2, [sp, #24]
 801a0a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a0a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a0a6:	9202      	str	r2, [sp, #8]
 801a0a8:	2a00      	cmp	r2, #0
 801a0aa:	f000 8128 	beq.w	801a2fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a0ae:	6820      	ldr	r0, [r4, #0]
 801a0b0:	aa0a      	add	r2, sp, #40	@ 0x28
 801a0b2:	6861      	ldr	r1, [r4, #4]
 801a0b4:	c203      	stmia	r2!, {r0, r1}
 801a0b6:	6818      	ldr	r0, [r3, #0]
 801a0b8:	aa0c      	add	r2, sp, #48	@ 0x30
 801a0ba:	6859      	ldr	r1, [r3, #4]
 801a0bc:	c203      	stmia	r2!, {r0, r1}
 801a0be:	a80a      	add	r0, sp, #40	@ 0x28
 801a0c0:	f7fa f874 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0c4:	4621      	mov	r1, r4
 801a0c6:	a80c      	add	r0, sp, #48	@ 0x30
 801a0c8:	f7fa f8b4 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0cc:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a0d0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a0d4:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a0d8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a0dc:	bfdb      	ittet	le
 801a0de:	b2bb      	uxthle	r3, r7
 801a0e0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a0e4:	2301      	movgt	r3, #1
 801a0e6:	fb92 f3f3 	sdivle	r3, r2, r3
 801a0ea:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a0ee:	441d      	add	r5, r3
 801a0f0:	fb92 f1f3 	sdiv	r1, r2, r3
 801a0f4:	fa1f fc81 	uxth.w	ip, r1
 801a0f8:	3d01      	subs	r5, #1
 801a0fa:	fb0c 2413 	mls	r4, ip, r3, r2
 801a0fe:	4661      	mov	r1, ip
 801a100:	fb14 f407 	smulbb	r4, r4, r7
 801a104:	4404      	add	r4, r0
 801a106:	fb95 f5f3 	sdiv	r5, r5, r3
 801a10a:	b2a4      	uxth	r4, r4
 801a10c:	b121      	cbz	r1, 801a118 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a10e:	9b06      	ldr	r3, [sp, #24]
 801a110:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a114:	ba1b      	rev	r3, r3
 801a116:	441e      	add	r6, r3
 801a118:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a11c:	b2ad      	uxth	r5, r5
 801a11e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a122:	4418      	add	r0, r3
 801a124:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a128:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a12c:	00ad      	lsls	r5, r5, #2
 801a12e:	441a      	add	r2, r3
 801a130:	4b74      	ldr	r3, [pc, #464]	@ (801a304 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a132:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a136:	6818      	ldr	r0, [r3, #0]
 801a138:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a13c:	6803      	ldr	r3, [r0, #0]
 801a13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a140:	4798      	blx	r3
 801a142:	4a71      	ldr	r2, [pc, #452]	@ (801a308 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a144:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a148:	2c00      	cmp	r4, #0
 801a14a:	8813      	ldrh	r3, [r2, #0]
 801a14c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a150:	9209      	str	r2, [sp, #36]	@ 0x24
 801a152:	fb03 c101 	mla	r1, r3, r1, ip
 801a156:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a15a:	fb03 f307 	mul.w	r3, r3, r7
 801a15e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a162:	9204      	str	r2, [sp, #16]
 801a164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a168:	9a02      	ldr	r2, [sp, #8]
 801a16a:	4408      	add	r0, r1
 801a16c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a170:	4403      	add	r3, r0
 801a172:	b292      	uxth	r2, r2
 801a174:	9307      	str	r3, [sp, #28]
 801a176:	f105 0304 	add.w	r3, r5, #4
 801a17a:	bf0c      	ite	eq
 801a17c:	4645      	moveq	r5, r8
 801a17e:	2500      	movne	r5, #0
 801a180:	9308      	str	r3, [sp, #32]
 801a182:	2300      	movs	r3, #0
 801a184:	b2ad      	uxth	r5, r5
 801a186:	9205      	str	r2, [sp, #20]
 801a188:	9303      	str	r3, [sp, #12]
 801a18a:	9a07      	ldr	r2, [sp, #28]
 801a18c:	4282      	cmp	r2, r0
 801a18e:	f240 80b1 	bls.w	801a2f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a192:	b95b      	cbnz	r3, 801a1ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a194:	7832      	ldrb	r2, [r6, #0]
 801a196:	0993      	lsrs	r3, r2, #6
 801a198:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a19c:	9203      	str	r2, [sp, #12]
 801a19e:	1e5a      	subs	r2, r3, #1
 801a1a0:	2a02      	cmp	r2, #2
 801a1a2:	bf8d      	iteet	hi
 801a1a4:	7873      	ldrbhi	r3, [r6, #1]
 801a1a6:	3601      	addls	r6, #1
 801a1a8:	b29b      	uxthls	r3, r3
 801a1aa:	3602      	addhi	r6, #2
 801a1ac:	b184      	cbz	r4, 801a1d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a1ae:	429c      	cmp	r4, r3
 801a1b0:	bf91      	iteee	ls
 801a1b2:	1b1c      	subls	r4, r3, r4
 801a1b4:	1ae4      	subhi	r4, r4, r3
 801a1b6:	4629      	movhi	r1, r5
 801a1b8:	f04f 0e00 	movhi.w	lr, #0
 801a1bc:	bf9b      	ittet	ls
 801a1be:	fa1f fe84 	uxthls.w	lr, r4
 801a1c2:	2400      	movls	r4, #0
 801a1c4:	b2a4      	uxthhi	r4, r4
 801a1c6:	fa1f f188 	uxthls.w	r1, r8
 801a1ca:	4673      	mov	r3, lr
 801a1cc:	460d      	mov	r5, r1
 801a1ce:	e7dc      	b.n	801a18a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a1d0:	2203      	movs	r2, #3
 801a1d2:	9908      	ldr	r1, [sp, #32]
 801a1d4:	42ab      	cmp	r3, r5
 801a1d6:	4617      	mov	r7, r2
 801a1d8:	9a03      	ldr	r2, [sp, #12]
 801a1da:	bf24      	itt	cs
 801a1dc:	eba3 0e05 	subcs.w	lr, r3, r5
 801a1e0:	9501      	strcs	r5, [sp, #4]
 801a1e2:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a1e6:	9a06      	ldr	r2, [sp, #24]
 801a1e8:	bf34      	ite	cc
 801a1ea:	1ae9      	subcc	r1, r5, r3
 801a1ec:	fa1f fe8e 	uxthcs.w	lr, lr
 801a1f0:	4417      	add	r7, r2
 801a1f2:	9a02      	ldr	r2, [sp, #8]
 801a1f4:	bf2f      	iteee	cs
 801a1f6:	4621      	movcs	r1, r4
 801a1f8:	b289      	uxthcc	r1, r1
 801a1fa:	9301      	strcc	r3, [sp, #4]
 801a1fc:	46a6      	movcc	lr, r4
 801a1fe:	2aff      	cmp	r2, #255	@ 0xff
 801a200:	d11e      	bne.n	801a240 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a202:	4681      	mov	r9, r0
 801a204:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a208:	f109 0903 	add.w	r9, r9, #3
 801a20c:	f1bc 0f00 	cmp.w	ip, #0
 801a210:	d15f      	bne.n	801a2d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a212:	9a01      	ldr	r2, [sp, #4]
 801a214:	42ab      	cmp	r3, r5
 801a216:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a21a:	4410      	add	r0, r2
 801a21c:	d3d5      	bcc.n	801a1ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a21e:	fa1f f188 	uxth.w	r1, r8
 801a222:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a228:	1a64      	subs	r4, r4, r1
 801a22a:	881b      	ldrh	r3, [r3, #0]
 801a22c:	b2a4      	uxth	r4, r4
 801a22e:	eba3 0308 	sub.w	r3, r3, r8
 801a232:	2c00      	cmp	r4, #0
 801a234:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a238:	bf18      	it	ne
 801a23a:	2100      	movne	r1, #0
 801a23c:	4418      	add	r0, r3
 801a23e:	e7c4      	b.n	801a1ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a240:	4684      	mov	ip, r0
 801a242:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a246:	f10c 0c03 	add.w	ip, ip, #3
 801a24a:	f1ba 0f00 	cmp.w	sl, #0
 801a24e:	d0e0      	beq.n	801a212 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801a250:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801a254:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a258:	9a05      	ldr	r2, [sp, #20]
 801a25a:	f897 9000 	ldrb.w	r9, [r7]
 801a25e:	fa1f fa8a 	uxth.w	sl, sl
 801a262:	fb1b fb02 	smulbb	fp, fp, r2
 801a266:	9a04      	ldr	r2, [sp, #16]
 801a268:	fb09 b902 	mla	r9, r9, r2, fp
 801a26c:	9a05      	ldr	r2, [sp, #20]
 801a26e:	fa1f f989 	uxth.w	r9, r9
 801a272:	f109 0b01 	add.w	fp, r9, #1
 801a276:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a27a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801a27e:	fb1b fb02 	smulbb	fp, fp, r2
 801a282:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a286:	9a04      	ldr	r2, [sp, #16]
 801a288:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801a28c:	f897 9001 	ldrb.w	r9, [r7, #1]
 801a290:	fb09 b902 	mla	r9, r9, r2, fp
 801a294:	9a05      	ldr	r2, [sp, #20]
 801a296:	fa1f f989 	uxth.w	r9, r9
 801a29a:	f109 0b01 	add.w	fp, r9, #1
 801a29e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2a2:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801a2a6:	fb1b fb02 	smulbb	fp, fp, r2
 801a2aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2ae:	9a04      	ldr	r2, [sp, #16]
 801a2b0:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801a2b4:	f897 9002 	ldrb.w	r9, [r7, #2]
 801a2b8:	fb09 b902 	mla	r9, r9, r2, fp
 801a2bc:	fa1f f989 	uxth.w	r9, r9
 801a2c0:	f109 0b01 	add.w	fp, r9, #1
 801a2c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2cc:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801a2d0:	e7b9      	b.n	801a246 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801a2d2:	f897 a000 	ldrb.w	sl, [r7]
 801a2d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a2da:	f809 ac03 	strb.w	sl, [r9, #-3]
 801a2de:	fa1f fc8c 	uxth.w	ip, ip
 801a2e2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801a2e6:	f809 ac02 	strb.w	sl, [r9, #-2]
 801a2ea:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a2ee:	f809 ac01 	strb.w	sl, [r9, #-1]
 801a2f2:	e789      	b.n	801a208 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801a2f4:	4b03      	ldr	r3, [pc, #12]	@ (801a304 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a2f6:	6818      	ldr	r0, [r3, #0]
 801a2f8:	6803      	ldr	r3, [r0, #0]
 801a2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a2fc:	4798      	blx	r3
 801a2fe:	b00f      	add	sp, #60	@ 0x3c
 801a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a304:	240253b4 	.word	0x240253b4
 801a308:	240253ae 	.word	0x240253ae

0801a30c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a310:	b09b      	sub	sp, #108	@ 0x6c
 801a312:	461d      	mov	r5, r3
 801a314:	4604      	mov	r4, r0
 801a316:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a318:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801a31c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801a320:	9208      	str	r2, [sp, #32]
 801a322:	2a00      	cmp	r2, #0
 801a324:	f000 81f3 	beq.w	801a70e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801a328:	6828      	ldr	r0, [r5, #0]
 801a32a:	aa16      	add	r2, sp, #88	@ 0x58
 801a32c:	6869      	ldr	r1, [r5, #4]
 801a32e:	c203      	stmia	r2!, {r0, r1}
 801a330:	6818      	ldr	r0, [r3, #0]
 801a332:	aa18      	add	r2, sp, #96	@ 0x60
 801a334:	6859      	ldr	r1, [r3, #4]
 801a336:	c203      	stmia	r2!, {r0, r1}
 801a338:	a816      	add	r0, sp, #88	@ 0x58
 801a33a:	f7f9 ff37 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a33e:	4629      	mov	r1, r5
 801a340:	a818      	add	r0, sp, #96	@ 0x60
 801a342:	f7f9 ff77 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a346:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801a34a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801a34e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a352:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801a356:	bfdb      	ittet	le
 801a358:	b29a      	uxthle	r2, r3
 801a35a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a35e:	f04f 0a01 	movgt.w	sl, #1
 801a362:	fb91 faf2 	sdivle	sl, r1, r2
 801a366:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801a36a:	4456      	add	r6, sl
 801a36c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801a370:	3e01      	subs	r6, #1
 801a372:	fb92 f0fa 	sdiv	r0, r2, sl
 801a376:	b280      	uxth	r0, r0
 801a378:	fb00 281a 	mls	r8, r0, sl, r2
 801a37c:	900e      	str	r0, [sp, #56]	@ 0x38
 801a37e:	fb18 f803 	smulbb	r8, r8, r3
 801a382:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801a386:	4488      	add	r8, r1
 801a388:	4419      	add	r1, r3
 801a38a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801a38e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801a392:	fa1f f888 	uxth.w	r8, r8
 801a396:	441a      	add	r2, r3
 801a398:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a39c:	9303      	str	r3, [sp, #12]
 801a39e:	4b9c      	ldr	r3, [pc, #624]	@ (801a610 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801a3a0:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801a3a4:	6818      	ldr	r0, [r3, #0]
 801a3a6:	6803      	ldr	r3, [r0, #0]
 801a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3aa:	4798      	blx	r3
 801a3ac:	4b99      	ldr	r3, [pc, #612]	@ (801a614 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801a3ae:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801a3b2:	f1b8 0f00 	cmp.w	r8, #0
 801a3b6:	881a      	ldrh	r2, [r3, #0]
 801a3b8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801a3bc:	fb02 f505 	mul.w	r5, r2, r5
 801a3c0:	fb02 7101 	mla	r1, r2, r1, r7
 801a3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3c8:	9314      	str	r3, [sp, #80]	@ 0x50
 801a3ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a3ce:	9b08      	ldr	r3, [sp, #32]
 801a3d0:	fb96 f6fa 	sdiv	r6, r6, sl
 801a3d4:	4408      	add	r0, r1
 801a3d6:	f106 0601 	add.w	r6, r6, #1
 801a3da:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801a3de:	f04f 0100 	mov.w	r1, #0
 801a3e2:	eb00 0205 	add.w	r2, r0, r5
 801a3e6:	b2b6      	uxth	r6, r6
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a3ec:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a3f0:	930d      	str	r3, [sp, #52]	@ 0x34
 801a3f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a3f6:	4b88      	ldr	r3, [pc, #544]	@ (801a618 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801a3f8:	f106 0204 	add.w	r2, r6, #4
 801a3fc:	eba3 0304 	sub.w	r3, r3, r4
 801a400:	9205      	str	r2, [sp, #20]
 801a402:	9a03      	ldr	r2, [sp, #12]
 801a404:	bf18      	it	ne
 801a406:	2200      	movne	r2, #0
 801a408:	9315      	str	r3, [sp, #84]	@ 0x54
 801a40a:	b292      	uxth	r2, r2
 801a40c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a410:	fa11 f383 	uxtah	r3, r1, r3
 801a414:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a416:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a41a:	3304      	adds	r3, #4
 801a41c:	9306      	str	r3, [sp, #24]
 801a41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a420:	4283      	cmp	r3, r0
 801a422:	f240 816f 	bls.w	801a704 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801a426:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801a42a:	f04f 0900 	mov.w	r9, #0
 801a42e:	9d06      	ldr	r5, [sp, #24]
 801a430:	fbb8 f3f3 	udiv	r3, r8, r3
 801a434:	ebaa 0303 	sub.w	r3, sl, r3
 801a438:	782d      	ldrb	r5, [r5, #0]
 801a43a:	b29b      	uxth	r3, r3
 801a43c:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a43e:	3501      	adds	r5, #1
 801a440:	9312      	str	r3, [sp, #72]	@ 0x48
 801a442:	9b06      	ldr	r3, [sp, #24]
 801a444:	9504      	str	r5, [sp, #16]
 801a446:	7859      	ldrb	r1, [r3, #1]
 801a448:	789b      	ldrb	r3, [r3, #2]
 801a44a:	021b      	lsls	r3, r3, #8
 801a44c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a450:	9906      	ldr	r1, [sp, #24]
 801a452:	78c9      	ldrb	r1, [r1, #3]
 801a454:	430b      	orrs	r3, r1
 801a456:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a458:	4419      	add	r1, r3
 801a45a:	1c4d      	adds	r5, r1, #1
 801a45c:	7849      	ldrb	r1, [r1, #1]
 801a45e:	9502      	str	r5, [sp, #8]
 801a460:	0209      	lsls	r1, r1, #8
 801a462:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a464:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801a468:	5ceb      	ldrb	r3, [r5, r3]
 801a46a:	4319      	orrs	r1, r3
 801a46c:	b28b      	uxth	r3, r1
 801a46e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a472:	930a      	str	r3, [sp, #40]	@ 0x28
 801a474:	2300      	movs	r3, #0
 801a476:	9307      	str	r3, [sp, #28]
 801a478:	2301      	movs	r3, #1
 801a47a:	e9cd 3300 	strd	r3, r3, [sp]
 801a47e:	469c      	mov	ip, r3
 801a480:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a484:	930c      	str	r3, [sp, #48]	@ 0x30
 801a486:	f1b8 0f00 	cmp.w	r8, #0
 801a48a:	f000 8082 	beq.w	801a592 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801a48e:	45c4      	cmp	ip, r8
 801a490:	d270      	bcs.n	801a574 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801a492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a494:	eba8 080c 	sub.w	r8, r8, ip
 801a498:	4611      	mov	r1, r2
 801a49a:	4283      	cmp	r3, r0
 801a49c:	fa1f f888 	uxth.w	r8, r8
 801a4a0:	d802      	bhi.n	801a4a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801a4a2:	e074      	b.n	801a58e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d15f      	bne.n	801a568 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801a4a8:	9b02      	ldr	r3, [sp, #8]
 801a4aa:	9a01      	ldr	r2, [sp, #4]
 801a4ac:	785b      	ldrb	r3, [r3, #1]
 801a4ae:	f1c2 0207 	rsb	r2, r2, #7
 801a4b2:	9d01      	ldr	r5, [sp, #4]
 801a4b4:	4093      	lsls	r3, r2
 801a4b6:	005b      	lsls	r3, r3, #1
 801a4b8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a4bc:	9b02      	ldr	r3, [sp, #8]
 801a4be:	781b      	ldrb	r3, [r3, #0]
 801a4c0:	412b      	asrs	r3, r5
 801a4c2:	b2db      	uxtb	r3, r3
 801a4c4:	4313      	orrs	r3, r2
 801a4c6:	462a      	mov	r2, r5
 801a4c8:	3201      	adds	r2, #1
 801a4ca:	b29e      	uxth	r6, r3
 801a4cc:	b2d2      	uxtb	r2, r2
 801a4ce:	2a08      	cmp	r2, #8
 801a4d0:	9201      	str	r2, [sp, #4]
 801a4d2:	9a02      	ldr	r2, [sp, #8]
 801a4d4:	bf09      	itett	eq
 801a4d6:	3202      	addeq	r2, #2
 801a4d8:	3201      	addne	r2, #1
 801a4da:	9202      	streq	r2, [sp, #8]
 801a4dc:	2200      	moveq	r2, #0
 801a4de:	bf14      	ite	ne
 801a4e0:	9202      	strne	r2, [sp, #8]
 801a4e2:	9201      	streq	r2, [sp, #4]
 801a4e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a4e6:	42b2      	cmp	r2, r6
 801a4e8:	d309      	bcc.n	801a4fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801a4ea:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	9a04      	ldr	r2, [sp, #16]
 801a4f2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801a4f6:	d30e      	bcc.n	801a516 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a4f8:	9300      	str	r3, [sp, #0]
 801a4fa:	2500      	movs	r5, #0
 801a4fc:	e035      	b.n	801a56a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a4fe:	9b04      	ldr	r3, [sp, #16]
 801a500:	429e      	cmp	r6, r3
 801a502:	d318      	bcc.n	801a536 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801a504:	9b00      	ldr	r3, [sp, #0]
 801a506:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801a50a:	18e3      	adds	r3, r4, r3
 801a50c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801a510:	9b00      	ldr	r3, [sp, #0]
 801a512:	3301      	adds	r3, #1
 801a514:	b29b      	uxth	r3, r3
 801a516:	9a04      	ldr	r2, [sp, #16]
 801a518:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801a51c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a520:	9f00      	ldr	r7, [sp, #0]
 801a522:	7115      	strb	r5, [r2, #4]
 801a524:	3701      	adds	r7, #1
 801a526:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a528:	7157      	strb	r7, [r2, #5]
 801a52a:	80d5      	strh	r5, [r2, #6]
 801a52c:	9a04      	ldr	r2, [sp, #16]
 801a52e:	3201      	adds	r2, #1
 801a530:	b292      	uxth	r2, r2
 801a532:	9204      	str	r2, [sp, #16]
 801a534:	e7e0      	b.n	801a4f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801a536:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a53a:	4632      	mov	r2, r6
 801a53c:	795b      	ldrb	r3, [r3, #5]
 801a53e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801a542:	4425      	add	r5, r4
 801a544:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a546:	eb07 0c05 	add.w	ip, r7, r5
 801a54a:	f1bc 0f00 	cmp.w	ip, #0
 801a54e:	dd07      	ble.n	801a560 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801a550:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a554:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a558:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801a55c:	88d2      	ldrh	r2, [r2, #6]
 801a55e:	e7f1      	b.n	801a544 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801a560:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a564:	b29b      	uxth	r3, r3
 801a566:	e7c3      	b.n	801a4f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801a568:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a56a:	460a      	mov	r2, r1
 801a56c:	960a      	str	r6, [sp, #40]	@ 0x28
 801a56e:	46a9      	mov	r9, r5
 801a570:	469c      	mov	ip, r3
 801a572:	e788      	b.n	801a486 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801a574:	ebac 0308 	sub.w	r3, ip, r8
 801a578:	eb09 0508 	add.w	r5, r9, r8
 801a57c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a580:	b29b      	uxth	r3, r3
 801a582:	b2ad      	uxth	r5, r5
 801a584:	f04f 0800 	mov.w	r8, #0
 801a588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a58a:	4282      	cmp	r2, r0
 801a58c:	d88a      	bhi.n	801a4a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801a58e:	460a      	mov	r2, r1
 801a590:	e745      	b.n	801a41e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801a592:	4594      	cmp	ip, r2
 801a594:	9d08      	ldr	r5, [sp, #32]
 801a596:	4686      	mov	lr, r0
 801a598:	bf27      	ittee	cs
 801a59a:	ebac 0302 	subcs.w	r3, ip, r2
 801a59e:	4616      	movcs	r6, r2
 801a5a0:	eba2 010c 	subcc.w	r1, r2, ip
 801a5a4:	4666      	movcc	r6, ip
 801a5a6:	bf27      	ittee	cs
 801a5a8:	b29b      	uxthcs	r3, r3
 801a5aa:	4641      	movcs	r1, r8
 801a5ac:	b289      	uxthcc	r1, r1
 801a5ae:	4643      	movcc	r3, r8
 801a5b0:	2dff      	cmp	r5, #255	@ 0xff
 801a5b2:	eb09 0506 	add.w	r5, r9, r6
 801a5b6:	b2ad      	uxth	r5, r5
 801a5b8:	d130      	bne.n	801a61c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a5ba:	45a9      	cmp	r9, r5
 801a5bc:	f10e 0e03 	add.w	lr, lr, #3
 801a5c0:	d17a      	bne.n	801a6b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801a5c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a5c6:	4594      	cmp	ip, r2
 801a5c8:	4430      	add	r0, r6
 801a5ca:	d3db      	bcc.n	801a584 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801a5cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a5ce:	9903      	ldr	r1, [sp, #12]
 801a5d0:	8812      	ldrh	r2, [r2, #0]
 801a5d2:	1a52      	subs	r2, r2, r1
 801a5d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a5d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5da:	4410      	add	r0, r2
 801a5dc:	9a07      	ldr	r2, [sp, #28]
 801a5de:	3201      	adds	r2, #1
 801a5e0:	428a      	cmp	r2, r1
 801a5e2:	9207      	str	r2, [sp, #28]
 801a5e4:	f040 8081 	bne.w	801a6ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801a5e8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801a5ec:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801a5f0:	9b03      	ldr	r3, [sp, #12]
 801a5f2:	eba8 080c 	sub.w	r8, r8, ip
 801a5f6:	fa1f f888 	uxth.w	r8, r8
 801a5fa:	f1b8 0f00 	cmp.w	r8, #0
 801a5fe:	bf08      	it	eq
 801a600:	461a      	moveq	r2, r3
 801a602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a604:	bf18      	it	ne
 801a606:	2200      	movne	r2, #0
 801a608:	3301      	adds	r3, #1
 801a60a:	b292      	uxth	r2, r2
 801a60c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a60e:	e6fd      	b.n	801a40c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801a610:	240253b4 	.word	0x240253b4
 801a614:	240253ae 	.word	0x240253ae
 801a618:	fffff7fb 	.word	0xfffff7fb
 801a61c:	45a9      	cmp	r9, r5
 801a61e:	f10e 0e03 	add.w	lr, lr, #3
 801a622:	d0ce      	beq.n	801a5c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801a624:	f109 0701 	add.w	r7, r9, #1
 801a628:	44a1      	add	r9, r4
 801a62a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801a62e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a632:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a634:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a638:	9f05      	ldr	r7, [sp, #20]
 801a63a:	eb07 0908 	add.w	r9, r7, r8
 801a63e:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a642:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a644:	fb1b fb07 	smulbb	fp, fp, r7
 801a648:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a64a:	fb08 b807 	mla	r8, r8, r7, fp
 801a64e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a650:	fa1f f888 	uxth.w	r8, r8
 801a654:	f108 0b01 	add.w	fp, r8, #1
 801a658:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a65c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801a660:	fb1b fb07 	smulbb	fp, fp, r7
 801a664:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a668:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a66a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a66e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a672:	fb08 b807 	mla	r8, r8, r7, fp
 801a676:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a678:	fa1f f888 	uxth.w	r8, r8
 801a67c:	f108 0b01 	add.w	fp, r8, #1
 801a680:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a684:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a688:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a68c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a690:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801a694:	fb19 f907 	smulbb	r9, r9, r7
 801a698:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a69a:	fb08 9807 	mla	r8, r8, r7, r9
 801a69e:	fa1f f888 	uxth.w	r8, r8
 801a6a2:	f108 0901 	add.w	r9, r8, #1
 801a6a6:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a6aa:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801a6ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a6b2:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a6b6:	e7b1      	b.n	801a61c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a6b8:	f109 0b01 	add.w	fp, r9, #1
 801a6bc:	44a1      	add	r9, r4
 801a6be:	9f05      	ldr	r7, [sp, #20]
 801a6c0:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a6c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a6c8:	eb07 0908 	add.w	r9, r7, r8
 801a6cc:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a6d0:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a6d4:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a6d8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a6dc:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a6e0:	fa1f f98b 	uxth.w	r9, fp
 801a6e4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a6e8:	e767      	b.n	801a5ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801a6ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a6ee:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801a6f2:	eba8 0801 	sub.w	r8, r8, r1
 801a6f6:	fa1f f888 	uxth.w	r8, r8
 801a6fa:	f1b8 0f00 	cmp.w	r8, #0
 801a6fe:	bf18      	it	ne
 801a700:	2100      	movne	r1, #0
 801a702:	e741      	b.n	801a588 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801a704:	4b03      	ldr	r3, [pc, #12]	@ (801a714 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801a706:	6818      	ldr	r0, [r3, #0]
 801a708:	6803      	ldr	r3, [r0, #0]
 801a70a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a70c:	4798      	blx	r3
 801a70e:	b01b      	add	sp, #108	@ 0x6c
 801a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a714:	240253b4 	.word	0x240253b4

0801a718 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	b09d      	sub	sp, #116	@ 0x74
 801a71e:	461d      	mov	r5, r3
 801a720:	4604      	mov	r4, r0
 801a722:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a724:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801a728:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801a72c:	920c      	str	r2, [sp, #48]	@ 0x30
 801a72e:	2a00      	cmp	r2, #0
 801a730:	f000 81de 	beq.w	801aaf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801a734:	6828      	ldr	r0, [r5, #0]
 801a736:	aa18      	add	r2, sp, #96	@ 0x60
 801a738:	6869      	ldr	r1, [r5, #4]
 801a73a:	c203      	stmia	r2!, {r0, r1}
 801a73c:	6818      	ldr	r0, [r3, #0]
 801a73e:	aa1a      	add	r2, sp, #104	@ 0x68
 801a740:	6859      	ldr	r1, [r3, #4]
 801a742:	c203      	stmia	r2!, {r0, r1}
 801a744:	a818      	add	r0, sp, #96	@ 0x60
 801a746:	f7f9 fd31 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a74a:	4629      	mov	r1, r5
 801a74c:	a81a      	add	r0, sp, #104	@ 0x68
 801a74e:	f7f9 fd71 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a752:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a756:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801a75a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a75e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801a762:	bfdb      	ittet	le
 801a764:	b29a      	uxthle	r2, r3
 801a766:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a76a:	2201      	movgt	r2, #1
 801a76c:	fb91 f2f2 	sdivle	r2, r1, r2
 801a770:	9201      	str	r2, [sp, #4]
 801a772:	9801      	ldr	r0, [sp, #4]
 801a774:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801a778:	9901      	ldr	r1, [sp, #4]
 801a77a:	fb92 f0f0 	sdiv	r0, r2, r0
 801a77e:	b280      	uxth	r0, r0
 801a780:	440f      	add	r7, r1
 801a782:	900d      	str	r0, [sp, #52]	@ 0x34
 801a784:	3f01      	subs	r7, #1
 801a786:	9801      	ldr	r0, [sp, #4]
 801a788:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a78a:	fb05 2510 	mls	r5, r5, r0, r2
 801a78e:	fb97 f7f1 	sdiv	r7, r7, r1
 801a792:	fb15 f503 	smulbb	r5, r5, r3
 801a796:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801a79a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801a79e:	3701      	adds	r7, #1
 801a7a0:	440d      	add	r5, r1
 801a7a2:	4419      	add	r1, r3
 801a7a4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801a7a8:	b2bf      	uxth	r7, r7
 801a7aa:	441a      	add	r2, r3
 801a7ac:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801a7b0:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801a7b4:	00bf      	lsls	r7, r7, #2
 801a7b6:	9304      	str	r3, [sp, #16]
 801a7b8:	b2ad      	uxth	r5, r5
 801a7ba:	4bb0      	ldr	r3, [pc, #704]	@ (801aa7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801a7bc:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801a7c0:	6818      	ldr	r0, [r3, #0]
 801a7c2:	6803      	ldr	r3, [r0, #0]
 801a7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7c6:	4798      	blx	r3
 801a7c8:	4bad      	ldr	r3, [pc, #692]	@ (801aa80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801a7ca:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801a7ce:	2d00      	cmp	r5, #0
 801a7d0:	881a      	ldrh	r2, [r3, #0]
 801a7d2:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801a7d6:	fb02 f606 	mul.w	r6, r2, r6
 801a7da:	fb02 c101 	mla	r1, r2, r1, ip
 801a7de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a7e2:	9316      	str	r3, [sp, #88]	@ 0x58
 801a7e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a7e8:	4ba6      	ldr	r3, [pc, #664]	@ (801aa84 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801a7ea:	eb00 0801 	add.w	r8, r0, r1
 801a7ee:	bf18      	it	ne
 801a7f0:	2100      	movne	r1, #0
 801a7f2:	eba3 0304 	sub.w	r3, r3, r4
 801a7f6:	eb08 0206 	add.w	r2, r8, r6
 801a7fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a7fc:	9208      	str	r2, [sp, #32]
 801a7fe:	f107 0204 	add.w	r2, r7, #4
 801a802:	9211      	str	r2, [sp, #68]	@ 0x44
 801a804:	9a04      	ldr	r2, [sp, #16]
 801a806:	bf08      	it	eq
 801a808:	4611      	moveq	r1, r2
 801a80a:	2200      	movs	r2, #0
 801a80c:	b289      	uxth	r1, r1
 801a80e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a814:	fa12 f383 	uxtah	r3, r2, r3
 801a818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a81a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a81e:	3304      	adds	r3, #4
 801a820:	9306      	str	r3, [sp, #24]
 801a822:	9b08      	ldr	r3, [sp, #32]
 801a824:	4543      	cmp	r3, r8
 801a826:	f240 815e 	bls.w	801aae6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801a82a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801a82e:	f04f 0b01 	mov.w	fp, #1
 801a832:	9a01      	ldr	r2, [sp, #4]
 801a834:	9806      	ldr	r0, [sp, #24]
 801a836:	465e      	mov	r6, fp
 801a838:	f8cd b008 	str.w	fp, [sp, #8]
 801a83c:	7800      	ldrb	r0, [r0, #0]
 801a83e:	fbb5 f3f3 	udiv	r3, r5, r3
 801a842:	1ad3      	subs	r3, r2, r3
 801a844:	900e      	str	r0, [sp, #56]	@ 0x38
 801a846:	3001      	adds	r0, #1
 801a848:	b29b      	uxth	r3, r3
 801a84a:	9005      	str	r0, [sp, #20]
 801a84c:	9312      	str	r3, [sp, #72]	@ 0x48
 801a84e:	9b06      	ldr	r3, [sp, #24]
 801a850:	785a      	ldrb	r2, [r3, #1]
 801a852:	789b      	ldrb	r3, [r3, #2]
 801a854:	021b      	lsls	r3, r3, #8
 801a856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a85a:	9a06      	ldr	r2, [sp, #24]
 801a85c:	78d2      	ldrb	r2, [r2, #3]
 801a85e:	4313      	orrs	r3, r2
 801a860:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a862:	441a      	add	r2, r3
 801a864:	1c50      	adds	r0, r2, #1
 801a866:	7852      	ldrb	r2, [r2, #1]
 801a868:	9003      	str	r0, [sp, #12]
 801a86a:	0212      	lsls	r2, r2, #8
 801a86c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a86e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801a872:	5cc3      	ldrb	r3, [r0, r3]
 801a874:	431a      	orrs	r2, r3
 801a876:	b293      	uxth	r3, r2
 801a878:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a87c:	930a      	str	r3, [sp, #40]	@ 0x28
 801a87e:	2300      	movs	r3, #0
 801a880:	461a      	mov	r2, r3
 801a882:	9307      	str	r3, [sp, #28]
 801a884:	2d00      	cmp	r5, #0
 801a886:	d07c      	beq.n	801a982 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a888:	42ae      	cmp	r6, r5
 801a88a:	d26c      	bcs.n	801a966 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801a88c:	9b08      	ldr	r3, [sp, #32]
 801a88e:	1bad      	subs	r5, r5, r6
 801a890:	4608      	mov	r0, r1
 801a892:	4543      	cmp	r3, r8
 801a894:	b2ad      	uxth	r5, r5
 801a896:	d802      	bhi.n	801a89e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801a898:	e071      	b.n	801a97e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d15d      	bne.n	801a95a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801a89e:	9b03      	ldr	r3, [sp, #12]
 801a8a0:	9a02      	ldr	r2, [sp, #8]
 801a8a2:	785b      	ldrb	r3, [r3, #1]
 801a8a4:	f1c2 0207 	rsb	r2, r2, #7
 801a8a8:	9902      	ldr	r1, [sp, #8]
 801a8aa:	4093      	lsls	r3, r2
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a8b2:	9b03      	ldr	r3, [sp, #12]
 801a8b4:	781b      	ldrb	r3, [r3, #0]
 801a8b6:	410b      	asrs	r3, r1
 801a8b8:	3101      	adds	r1, #1
 801a8ba:	b2c9      	uxtb	r1, r1
 801a8bc:	b2db      	uxtb	r3, r3
 801a8be:	2908      	cmp	r1, #8
 801a8c0:	9102      	str	r1, [sp, #8]
 801a8c2:	9903      	ldr	r1, [sp, #12]
 801a8c4:	ea43 0302 	orr.w	r3, r3, r2
 801a8c8:	bf0c      	ite	eq
 801a8ca:	3102      	addeq	r1, #2
 801a8cc:	3101      	addne	r1, #1
 801a8ce:	b29a      	uxth	r2, r3
 801a8d0:	bf05      	ittet	eq
 801a8d2:	9103      	streq	r1, [sp, #12]
 801a8d4:	2100      	moveq	r1, #0
 801a8d6:	9103      	strne	r1, [sp, #12]
 801a8d8:	9102      	streq	r1, [sp, #8]
 801a8da:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a8dc:	4291      	cmp	r1, r2
 801a8de:	d30a      	bcc.n	801a8f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801a8e0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a8e4:	2301      	movs	r3, #1
 801a8e6:	9905      	ldr	r1, [sp, #20]
 801a8e8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801a8ec:	d30f      	bcc.n	801a90e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801a8ee:	469b      	mov	fp, r3
 801a8f0:	f04f 0c00 	mov.w	ip, #0
 801a8f4:	e032      	b.n	801a95c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801a8f6:	9b05      	ldr	r3, [sp, #20]
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d318      	bcc.n	801a92e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801a8fc:	eb04 030b 	add.w	r3, r4, fp
 801a900:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801a904:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801a908:	f10b 0301 	add.w	r3, fp, #1
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	9905      	ldr	r1, [sp, #20]
 801a910:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801a914:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a918:	710e      	strb	r6, [r1, #4]
 801a91a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a91c:	80ce      	strh	r6, [r1, #6]
 801a91e:	f10b 0601 	add.w	r6, fp, #1
 801a922:	714e      	strb	r6, [r1, #5]
 801a924:	9905      	ldr	r1, [sp, #20]
 801a926:	3101      	adds	r1, #1
 801a928:	b289      	uxth	r1, r1
 801a92a:	9105      	str	r1, [sp, #20]
 801a92c:	e7df      	b.n	801a8ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801a92e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a932:	4611      	mov	r1, r2
 801a934:	795b      	ldrb	r3, [r3, #5]
 801a936:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801a93a:	4426      	add	r6, r4
 801a93c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801a93e:	4437      	add	r7, r6
 801a940:	2f00      	cmp	r7, #0
 801a942:	dd06      	ble.n	801a952 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801a944:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a948:	790f      	ldrb	r7, [r1, #4]
 801a94a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a94e:	88c9      	ldrh	r1, [r1, #6]
 801a950:	e7f4      	b.n	801a93c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801a952:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a956:	b29b      	uxth	r3, r3
 801a958:	e7c5      	b.n	801a8e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801a95a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a95c:	920a      	str	r2, [sp, #40]	@ 0x28
 801a95e:	4601      	mov	r1, r0
 801a960:	4662      	mov	r2, ip
 801a962:	461e      	mov	r6, r3
 801a964:	e78e      	b.n	801a884 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801a966:	1b73      	subs	r3, r6, r5
 801a968:	eb02 0c05 	add.w	ip, r2, r5
 801a96c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a970:	b29b      	uxth	r3, r3
 801a972:	fa1f fc8c 	uxth.w	ip, ip
 801a976:	2500      	movs	r5, #0
 801a978:	9a08      	ldr	r2, [sp, #32]
 801a97a:	4542      	cmp	r2, r8
 801a97c:	d88d      	bhi.n	801a89a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801a97e:	4601      	mov	r1, r0
 801a980:	e74f      	b.n	801a822 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801a982:	428e      	cmp	r6, r1
 801a984:	bf2b      	itete	cs
 801a986:	468e      	movcs	lr, r1
 801a988:	46b6      	movcc	lr, r6
 801a98a:	1a73      	subcs	r3, r6, r1
 801a98c:	1b88      	subcc	r0, r1, r6
 801a98e:	eb02 0c0e 	add.w	ip, r2, lr
 801a992:	bf2b      	itete	cs
 801a994:	4628      	movcs	r0, r5
 801a996:	462b      	movcc	r3, r5
 801a998:	b29b      	uxthcs	r3, r3
 801a99a:	b280      	uxthcc	r0, r0
 801a99c:	f108 0503 	add.w	r5, r8, #3
 801a9a0:	fa1f fc8c 	uxth.w	ip, ip
 801a9a4:	4562      	cmp	r2, ip
 801a9a6:	d06f      	beq.n	801aa88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801a9a8:	1c57      	adds	r7, r2, #1
 801a9aa:	4422      	add	r2, r4
 801a9ac:	b2bf      	uxth	r7, r7
 801a9ae:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801a9b2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a9b4:	2704      	movs	r7, #4
 801a9b6:	46b9      	mov	r9, r7
 801a9b8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801a9ba:	fb19 7202 	smlabb	r2, r9, r2, r7
 801a9be:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a9c0:	58bf      	ldr	r7, [r7, r2]
 801a9c2:	0e3a      	lsrs	r2, r7, #24
 801a9c4:	9209      	str	r2, [sp, #36]	@ 0x24
 801a9c6:	d016      	beq.n	801a9f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a9c8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a9cc:	fa5f fa87 	uxtb.w	sl, r7
 801a9d0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a9d4:	fa5f f289 	uxtb.w	r2, r9
 801a9d8:	9214      	str	r2, [sp, #80]	@ 0x50
 801a9da:	b2fa      	uxtb	r2, r7
 801a9dc:	9215      	str	r2, [sp, #84]	@ 0x54
 801a9de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9e0:	2aff      	cmp	r2, #255	@ 0xff
 801a9e2:	d10b      	bne.n	801a9fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a9e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9e6:	2aff      	cmp	r2, #255	@ 0xff
 801a9e8:	d108      	bne.n	801a9fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a9ea:	f805 ac03 	strb.w	sl, [r5, #-3]
 801a9ee:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a9f2:	f805 7c01 	strb.w	r7, [r5, #-1]
 801a9f6:	3503      	adds	r5, #3
 801a9f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a9fa:	e7d3      	b.n	801a9a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801a9fc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801a9fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa00:	437a      	muls	r2, r7
 801aa02:	1c57      	adds	r7, r2, #1
 801aa04:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801aa08:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801aa0c:	1212      	asrs	r2, r2, #8
 801aa0e:	fa1f f982 	uxth.w	r9, r2
 801aa12:	43d2      	mvns	r2, r2
 801aa14:	fb1a fa09 	smulbb	sl, sl, r9
 801aa18:	b2d2      	uxtb	r2, r2
 801aa1a:	fb07 a702 	mla	r7, r7, r2, sl
 801aa1e:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa20:	b2bf      	uxth	r7, r7
 801aa22:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aa24:	f107 0a01 	add.w	sl, r7, #1
 801aa28:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801aa2c:	fb12 fa09 	smulbb	sl, r2, r9
 801aa30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa32:	123f      	asrs	r7, r7, #8
 801aa34:	f805 7c03 	strb.w	r7, [r5, #-3]
 801aa38:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801aa3c:	fb07 aa02 	mla	sl, r7, r2, sl
 801aa40:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801aa42:	fb12 f909 	smulbb	r9, r2, r9
 801aa46:	fa1f fa8a 	uxth.w	sl, sl
 801aa4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa4c:	f10a 0701 	add.w	r7, sl, #1
 801aa50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aa54:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801aa58:	fb07 9902 	mla	r9, r7, r2, r9
 801aa5c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aa60:	fa1f f989 	uxth.w	r9, r9
 801aa64:	f805 ac02 	strb.w	sl, [r5, #-2]
 801aa68:	f109 0201 	add.w	r2, r9, #1
 801aa6c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801aa70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa74:	f805 9c01 	strb.w	r9, [r5, #-1]
 801aa78:	e7bd      	b.n	801a9f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801aa7a:	bf00      	nop
 801aa7c:	240253b4 	.word	0x240253b4
 801aa80:	240253ae 	.word	0x240253ae
 801aa84:	fffff7fb 	.word	0xfffff7fb
 801aa88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aa8c:	428e      	cmp	r6, r1
 801aa8e:	44f0      	add	r8, lr
 801aa90:	f4ff af71 	bcc.w	801a976 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801aa94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aa96:	9904      	ldr	r1, [sp, #16]
 801aa98:	8812      	ldrh	r2, [r2, #0]
 801aa9a:	1a52      	subs	r2, r2, r1
 801aa9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aa9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aaa2:	4490      	add	r8, r2
 801aaa4:	9a07      	ldr	r2, [sp, #28]
 801aaa6:	3201      	adds	r2, #1
 801aaa8:	428a      	cmp	r2, r1
 801aaaa:	9207      	str	r2, [sp, #28]
 801aaac:	d111      	bne.n	801aad2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801aaae:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801aab2:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801aab6:	9b04      	ldr	r3, [sp, #16]
 801aab8:	eba5 050c 	sub.w	r5, r5, ip
 801aabc:	b2ad      	uxth	r5, r5
 801aabe:	2d00      	cmp	r5, #0
 801aac0:	bf08      	it	eq
 801aac2:	4619      	moveq	r1, r3
 801aac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aac6:	bf18      	it	ne
 801aac8:	2100      	movne	r1, #0
 801aaca:	3301      	adds	r3, #1
 801aacc:	b289      	uxth	r1, r1
 801aace:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aad0:	e69e      	b.n	801a810 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801aad2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801aad6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801aada:	1a2d      	subs	r5, r5, r0
 801aadc:	b2ad      	uxth	r5, r5
 801aade:	2d00      	cmp	r5, #0
 801aae0:	bf18      	it	ne
 801aae2:	2000      	movne	r0, #0
 801aae4:	e748      	b.n	801a978 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801aae6:	4b04      	ldr	r3, [pc, #16]	@ (801aaf8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801aae8:	6818      	ldr	r0, [r3, #0]
 801aaea:	6803      	ldr	r3, [r0, #0]
 801aaec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aaee:	4798      	blx	r3
 801aaf0:	b01d      	add	sp, #116	@ 0x74
 801aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf6:	bf00      	nop
 801aaf8:	240253b4 	.word	0x240253b4

0801aafc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab00:	b08f      	sub	sp, #60	@ 0x3c
 801ab02:	4616      	mov	r6, r2
 801ab04:	4681      	mov	r9, r0
 801ab06:	460d      	mov	r5, r1
 801ab08:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801ab0c:	9205      	str	r2, [sp, #20]
 801ab0e:	2a00      	cmp	r2, #0
 801ab10:	f000 82a8 	beq.w	801b064 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801ab14:	6830      	ldr	r0, [r6, #0]
 801ab16:	ac0a      	add	r4, sp, #40	@ 0x28
 801ab18:	6871      	ldr	r1, [r6, #4]
 801ab1a:	c403      	stmia	r4!, {r0, r1}
 801ab1c:	6818      	ldr	r0, [r3, #0]
 801ab1e:	ac0c      	add	r4, sp, #48	@ 0x30
 801ab20:	6859      	ldr	r1, [r3, #4]
 801ab22:	c403      	stmia	r4!, {r0, r1}
 801ab24:	a80a      	add	r0, sp, #40	@ 0x28
 801ab26:	f7f9 fb41 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab2a:	4631      	mov	r1, r6
 801ab2c:	a80c      	add	r0, sp, #48	@ 0x30
 801ab2e:	f7f9 fb81 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab32:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ab36:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ab3a:	bfdb      	ittet	le
 801ab3c:	b293      	uxthle	r3, r2
 801ab3e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ab42:	2301      	movgt	r3, #1
 801ab44:	fb91 f3f3 	sdivle	r3, r1, r3
 801ab48:	9300      	str	r3, [sp, #0]
 801ab4a:	f105 0308 	add.w	r3, r5, #8
 801ab4e:	9900      	ldr	r1, [sp, #0]
 801ab50:	9306      	str	r3, [sp, #24]
 801ab52:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801ab56:	440b      	add	r3, r1
 801ab58:	3b01      	subs	r3, #1
 801ab5a:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab5e:	3b01      	subs	r3, #1
 801ab60:	9906      	ldr	r1, [sp, #24]
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ab68:	9900      	ldr	r1, [sp, #0]
 801ab6a:	9307      	str	r3, [sp, #28]
 801ab6c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ab70:	fb93 f0f1 	sdiv	r0, r3, r1
 801ab74:	b284      	uxth	r4, r0
 801ab76:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ab7a:	b280      	uxth	r0, r0
 801ab7c:	9402      	str	r4, [sp, #8]
 801ab7e:	9d02      	ldr	r5, [sp, #8]
 801ab80:	9c00      	ldr	r4, [sp, #0]
 801ab82:	fb05 3514 	mls	r5, r5, r4, r3
 801ab86:	fb15 f502 	smulbb	r5, r5, r2
 801ab8a:	440d      	add	r5, r1
 801ab8c:	b2ad      	uxth	r5, r5
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	d071      	beq.n	801ac76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801ab92:	1e42      	subs	r2, r0, #1
 801ab94:	9806      	ldr	r0, [sp, #24]
 801ab96:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801ab9a:	9a07      	ldr	r2, [sp, #28]
 801ab9c:	fa98 f888 	rev.w	r8, r8
 801aba0:	4490      	add	r8, r2
 801aba2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801aba6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801abaa:	4411      	add	r1, r2
 801abac:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801abb0:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801aefc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801abb4:	4413      	add	r3, r2
 801abb6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801abba:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801abbe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801abc2:	9301      	str	r3, [sp, #4]
 801abc4:	4bcb      	ldr	r3, [pc, #812]	@ (801aef4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801abc6:	6818      	ldr	r0, [r3, #0]
 801abc8:	6803      	ldr	r3, [r0, #0]
 801abca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abcc:	4798      	blx	r3
 801abce:	4bca      	ldr	r3, [pc, #808]	@ (801aef8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801abd0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801abd4:	881b      	ldrh	r3, [r3, #0]
 801abd6:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801abda:	fb03 2707 	mla	r7, r3, r7, r2
 801abde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801abe2:	4363      	muls	r3, r4
 801abe4:	2400      	movs	r4, #0
 801abe6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801abea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abee:	4621      	mov	r1, r4
 801abf0:	4407      	add	r7, r0
 801abf2:	18fb      	adds	r3, r7, r3
 801abf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801abf6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801abfa:	fb95 f3f3 	sdiv	r3, r5, r3
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	f109 0304 	add.w	r3, r9, #4
 801ac04:	4618      	mov	r0, r3
 801ac06:	9308      	str	r3, [sp, #32]
 801ac08:	f009 ffde 	bl	8024bc8 <memset>
 801ac0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac0e:	42bb      	cmp	r3, r7
 801ac10:	f240 8223 	bls.w	801b05a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801ac14:	2003      	movs	r0, #3
 801ac16:	f04f 0c07 	mov.w	ip, #7
 801ac1a:	f04f 0e0b 	mov.w	lr, #11
 801ac1e:	2d00      	cmp	r5, #0
 801ac20:	f000 813c 	beq.w	801ae9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801ac24:	f898 3000 	ldrb.w	r3, [r8]
 801ac28:	b2db      	uxtb	r3, r3
 801ac2a:	2bfe      	cmp	r3, #254	@ 0xfe
 801ac2c:	d126      	bne.n	801ac7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801ac2e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ac32:	f108 0604 	add.w	r6, r8, #4
 801ac36:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ac3a:	3d01      	subs	r5, #1
 801ac3c:	b2c9      	uxtb	r1, r1
 801ac3e:	f898 8003 	ldrb.w	r8, [r8, #3]
 801ac42:	b2d2      	uxtb	r2, r2
 801ac44:	f361 0407 	bfi	r4, r1, #0, #8
 801ac48:	fa5f f888 	uxtb.w	r8, r8
 801ac4c:	b2ad      	uxth	r5, r5
 801ac4e:	f362 240f 	bfi	r4, r2, #8, #8
 801ac52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ac56:	fb10 2208 	smlabb	r2, r0, r8, r2
 801ac5a:	f368 4417 	bfi	r4, r8, #16, #8
 801ac5e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ac62:	0e23      	lsrs	r3, r4, #24
 801ac64:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801ac68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ac6c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ac70:	605c      	str	r4, [r3, #4]
 801ac72:	46b0      	mov	r8, r6
 801ac74:	e7d3      	b.n	801ac1e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801ac76:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ac7a:	e792      	b.n	801aba2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801ac7c:	2bff      	cmp	r3, #255	@ 0xff
 801ac7e:	d127      	bne.n	801acd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801ac80:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ac84:	f108 0605 	add.w	r6, r8, #5
 801ac88:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ac8c:	3d01      	subs	r5, #1
 801ac8e:	b2d2      	uxtb	r2, r2
 801ac90:	f898 1003 	ldrb.w	r1, [r8, #3]
 801ac94:	b2db      	uxtb	r3, r3
 801ac96:	f898 8004 	ldrb.w	r8, [r8, #4]
 801ac9a:	f362 0407 	bfi	r4, r2, #0, #8
 801ac9e:	b2c9      	uxtb	r1, r1
 801aca0:	fa5f f888 	uxtb.w	r8, r8
 801aca4:	f363 240f 	bfi	r4, r3, #8, #8
 801aca8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801acac:	b2ad      	uxth	r5, r5
 801acae:	fb10 3301 	smlabb	r3, r0, r1, r3
 801acb2:	f361 4417 	bfi	r4, r1, #16, #8
 801acb6:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801acba:	f368 641f 	bfi	r4, r8, #24, #8
 801acbe:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801acc2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801acc6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801acca:	f8c8 4004 	str.w	r4, [r8, #4]
 801acce:	e7d0      	b.n	801ac72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801acd0:	119a      	asrs	r2, r3, #6
 801acd2:	f108 0601 	add.w	r6, r8, #1
 801acd6:	d107      	bne.n	801ace8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801acd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801acdc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ace0:	685c      	ldr	r4, [r3, #4]
 801ace2:	3d01      	subs	r5, #1
 801ace4:	b2ad      	uxth	r5, r5
 801ace6:	e7c4      	b.n	801ac72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801ace8:	2a01      	cmp	r2, #1
 801acea:	d129      	bne.n	801ad40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801acec:	f003 0203 	and.w	r2, r3, #3
 801acf0:	1ea1      	subs	r1, r4, #2
 801acf2:	4411      	add	r1, r2
 801acf4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801acf8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801acfc:	b2c9      	uxtb	r1, r1
 801acfe:	3a02      	subs	r2, #2
 801ad00:	3b02      	subs	r3, #2
 801ad02:	f361 0407 	bfi	r4, r1, #0, #8
 801ad06:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ad0a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ad0e:	f362 240f 	bfi	r4, r2, #8, #8
 801ad12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ad16:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ad1a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801ad1e:	fb10 2203 	smlabb	r2, r0, r3, r2
 801ad22:	f363 4417 	bfi	r4, r3, #16, #8
 801ad26:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ad2a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801ad2e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801ad32:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801ad36:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801ad3a:	f8c8 4004 	str.w	r4, [r8, #4]
 801ad3e:	e7d0      	b.n	801ace2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ad40:	2a02      	cmp	r2, #2
 801ad42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ad46:	d12e      	bne.n	801ada6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801ad48:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ad4c:	f1a3 0a20 	sub.w	sl, r3, #32
 801ad50:	f108 0602 	add.w	r6, r8, #2
 801ad54:	b2d2      	uxtb	r2, r2
 801ad56:	f002 010f 	and.w	r1, r2, #15
 801ad5a:	1112      	asrs	r2, r2, #4
 801ad5c:	3908      	subs	r1, #8
 801ad5e:	3a08      	subs	r2, #8
 801ad60:	4451      	add	r1, sl
 801ad62:	4492      	add	sl, r2
 801ad64:	4421      	add	r1, r4
 801ad66:	b2c9      	uxtb	r1, r1
 801ad68:	f361 0407 	bfi	r4, r1, #0, #8
 801ad6c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801ad70:	f1a8 0820 	sub.w	r8, r8, #32
 801ad74:	4443      	add	r3, r8
 801ad76:	b2db      	uxtb	r3, r3
 801ad78:	f363 240f 	bfi	r4, r3, #8, #8
 801ad7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ad80:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801ad84:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801ad88:	fb10 330a 	smlabb	r3, r0, sl, r3
 801ad8c:	f36a 4417 	bfi	r4, sl, #16, #8
 801ad90:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801ad94:	0e22      	lsrs	r2, r4, #24
 801ad96:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801ad9a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ad9e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801ada2:	6054      	str	r4, [r2, #4]
 801ada4:	e79d      	b.n	801ace2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ada6:	3301      	adds	r3, #1
 801ada8:	42ab      	cmp	r3, r5
 801adaa:	dd59      	ble.n	801ae60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801adac:	1b5d      	subs	r5, r3, r5
 801adae:	2d00      	cmp	r5, #0
 801adb0:	dc58      	bgt.n	801ae64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801adb2:	f8dd a004 	ldr.w	sl, [sp, #4]
 801adb6:	f04f 0800 	mov.w	r8, #0
 801adba:	f1ba 0f00 	cmp.w	sl, #0
 801adbe:	f340 8108 	ble.w	801afd2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801adc2:	1c73      	adds	r3, r6, #1
 801adc4:	9303      	str	r3, [sp, #12]
 801adc6:	7833      	ldrb	r3, [r6, #0]
 801adc8:	b2db      	uxtb	r3, r3
 801adca:	2bfe      	cmp	r3, #254	@ 0xfe
 801adcc:	d16a      	bne.n	801aea4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801adce:	7871      	ldrb	r1, [r6, #1]
 801add0:	1d33      	adds	r3, r6, #4
 801add2:	78b2      	ldrb	r2, [r6, #2]
 801add4:	b2c9      	uxtb	r1, r1
 801add6:	78f0      	ldrb	r0, [r6, #3]
 801add8:	b2d2      	uxtb	r2, r2
 801adda:	9303      	str	r3, [sp, #12]
 801addc:	f361 0407 	bfi	r4, r1, #0, #8
 801ade0:	b2c0      	uxtb	r0, r0
 801ade2:	2303      	movs	r3, #3
 801ade4:	f362 240f 	bfi	r4, r2, #8, #8
 801ade8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801adec:	fb13 2200 	smlabb	r2, r3, r0, r2
 801adf0:	f360 4417 	bfi	r4, r0, #16, #8
 801adf4:	2307      	movs	r3, #7
 801adf6:	0e25      	lsrs	r5, r4, #24
 801adf8:	fb13 2101 	smlabb	r1, r3, r1, r2
 801adfc:	230b      	movs	r3, #11
 801adfe:	fb13 1305 	smlabb	r3, r3, r5, r1
 801ae02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ae06:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ae0a:	605c      	str	r4, [r3, #4]
 801ae0c:	2501      	movs	r5, #1
 801ae0e:	462e      	mov	r6, r5
 801ae10:	eb06 0308 	add.w	r3, r6, r8
 801ae14:	ebaa 0a06 	sub.w	sl, sl, r6
 801ae18:	1bad      	subs	r5, r5, r6
 801ae1a:	2b40      	cmp	r3, #64	@ 0x40
 801ae1c:	dd16      	ble.n	801ae4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801ae1e:	4658      	mov	r0, fp
 801ae20:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801ae24:	f7e8 f96e 	bl	8003104 <_ZN8touchgfx5paint9flushLineEPmi>
 801ae28:	4659      	mov	r1, fp
 801ae2a:	9b05      	ldr	r3, [sp, #20]
 801ae2c:	4642      	mov	r2, r8
 801ae2e:	4638      	mov	r0, r7
 801ae30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae34:	f7e8 f9ce 	bl	80031d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ae38:	4b30      	ldr	r3, [pc, #192]	@ (801aefc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801ae3a:	4447      	add	r7, r8
 801ae3c:	f04f 0800 	mov.w	r8, #0
 801ae40:	459b      	cmp	fp, r3
 801ae42:	bf0c      	ite	eq
 801ae44:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801af00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801ae48:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801aefc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801ae4c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801ae50:	4633      	mov	r3, r6
 801ae52:	3b01      	subs	r3, #1
 801ae54:	f842 4b04 	str.w	r4, [r2], #4
 801ae58:	d1fb      	bne.n	801ae52 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801ae5a:	44b0      	add	r8, r6
 801ae5c:	9e03      	ldr	r6, [sp, #12]
 801ae5e:	e7ac      	b.n	801adba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801ae60:	1aed      	subs	r5, r5, r3
 801ae62:	e73f      	b.n	801ace4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801ae64:	9b01      	ldr	r3, [sp, #4]
 801ae66:	42ab      	cmp	r3, r5
 801ae68:	bfa8      	it	ge
 801ae6a:	462b      	movge	r3, r5
 801ae6c:	4698      	mov	r8, r3
 801ae6e:	9b01      	ldr	r3, [sp, #4]
 801ae70:	eba3 0a08 	sub.w	sl, r3, r8
 801ae74:	0e23      	lsrs	r3, r4, #24
 801ae76:	eba5 0508 	sub.w	r5, r5, r8
 801ae7a:	d00b      	beq.n	801ae94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801ae7c:	9a05      	ldr	r2, [sp, #20]
 801ae7e:	4641      	mov	r1, r8
 801ae80:	4638      	mov	r0, r7
 801ae82:	4353      	muls	r3, r2
 801ae84:	1c5a      	adds	r2, r3, #1
 801ae86:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ae8a:	4622      	mov	r2, r4
 801ae8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ae90:	f7e8 f952 	bl	8003138 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801ae94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae98:	4447      	add	r7, r8
 801ae9a:	e78c      	b.n	801adb6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ae9c:	f8dd a004 	ldr.w	sl, [sp, #4]
 801aea0:	4646      	mov	r6, r8
 801aea2:	e788      	b.n	801adb6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801aea4:	2bff      	cmp	r3, #255	@ 0xff
 801aea6:	d11d      	bne.n	801aee4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801aea8:	7870      	ldrb	r0, [r6, #1]
 801aeaa:	1d73      	adds	r3, r6, #5
 801aeac:	78b2      	ldrb	r2, [r6, #2]
 801aeae:	b2c0      	uxtb	r0, r0
 801aeb0:	78f5      	ldrb	r5, [r6, #3]
 801aeb2:	b2d2      	uxtb	r2, r2
 801aeb4:	9303      	str	r3, [sp, #12]
 801aeb6:	f360 0407 	bfi	r4, r0, #0, #8
 801aeba:	7933      	ldrb	r3, [r6, #4]
 801aebc:	b2ed      	uxtb	r5, r5
 801aebe:	b2d9      	uxtb	r1, r3
 801aec0:	f362 240f 	bfi	r4, r2, #8, #8
 801aec4:	2303      	movs	r3, #3
 801aec6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801aeca:	f365 4417 	bfi	r4, r5, #16, #8
 801aece:	fb13 2205 	smlabb	r2, r3, r5, r2
 801aed2:	2307      	movs	r3, #7
 801aed4:	f361 641f 	bfi	r4, r1, #24, #8
 801aed8:	fb13 2000 	smlabb	r0, r3, r0, r2
 801aedc:	230b      	movs	r3, #11
 801aede:	fb13 0301 	smlabb	r3, r3, r1, r0
 801aee2:	e78e      	b.n	801ae02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801aee4:	119d      	asrs	r5, r3, #6
 801aee6:	d10d      	bne.n	801af04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801aee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801aeec:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801aef0:	685c      	ldr	r4, [r3, #4]
 801aef2:	e78b      	b.n	801ae0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801aef4:	240253b4 	.word	0x240253b4
 801aef8:	240253ae 	.word	0x240253ae
 801aefc:	24009740 	.word	0x24009740
 801af00:	24009840 	.word	0x24009840
 801af04:	2d01      	cmp	r5, #1
 801af06:	d12a      	bne.n	801af5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801af08:	f003 0203 	and.w	r2, r3, #3
 801af0c:	1ea1      	subs	r1, r4, #2
 801af0e:	2603      	movs	r6, #3
 801af10:	4411      	add	r1, r2
 801af12:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801af16:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801af1a:	b2c9      	uxtb	r1, r1
 801af1c:	3a02      	subs	r2, #2
 801af1e:	3b02      	subs	r3, #2
 801af20:	f361 0407 	bfi	r4, r1, #0, #8
 801af24:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801af28:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801af2c:	f362 240f 	bfi	r4, r2, #8, #8
 801af30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801af34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801af38:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801af3c:	fb16 2203 	smlabb	r2, r6, r3, r2
 801af40:	f363 4417 	bfi	r4, r3, #16, #8
 801af44:	2307      	movs	r3, #7
 801af46:	0e20      	lsrs	r0, r4, #24
 801af48:	fb13 2101 	smlabb	r1, r3, r1, r2
 801af4c:	230b      	movs	r3, #11
 801af4e:	fb13 1300 	smlabb	r3, r3, r0, r1
 801af52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af56:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801af5a:	605c      	str	r4, [r3, #4]
 801af5c:	e757      	b.n	801ae0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801af5e:	2d02      	cmp	r5, #2
 801af60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af64:	d12f      	bne.n	801afc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801af66:	1cb2      	adds	r2, r6, #2
 801af68:	f1a3 0020 	sub.w	r0, r3, #32
 801af6c:	9203      	str	r2, [sp, #12]
 801af6e:	7872      	ldrb	r2, [r6, #1]
 801af70:	b2d2      	uxtb	r2, r2
 801af72:	f002 010f 	and.w	r1, r2, #15
 801af76:	1112      	asrs	r2, r2, #4
 801af78:	3908      	subs	r1, #8
 801af7a:	3a08      	subs	r2, #8
 801af7c:	4401      	add	r1, r0
 801af7e:	4402      	add	r2, r0
 801af80:	4421      	add	r1, r4
 801af82:	b2c9      	uxtb	r1, r1
 801af84:	f361 0407 	bfi	r4, r1, #0, #8
 801af88:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801af8c:	3d20      	subs	r5, #32
 801af8e:	442b      	add	r3, r5
 801af90:	2503      	movs	r5, #3
 801af92:	b2db      	uxtb	r3, r3
 801af94:	f363 240f 	bfi	r4, r3, #8, #8
 801af98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801af9c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801afa0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801afa4:	fb15 3302 	smlabb	r3, r5, r2, r3
 801afa8:	f362 4417 	bfi	r4, r2, #16, #8
 801afac:	2207      	movs	r2, #7
 801afae:	0e20      	lsrs	r0, r4, #24
 801afb0:	fb12 3201 	smlabb	r2, r2, r1, r3
 801afb4:	210b      	movs	r1, #11
 801afb6:	fb11 2100 	smlabb	r1, r1, r0, r2
 801afba:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801afbe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801afc2:	604c      	str	r4, [r1, #4]
 801afc4:	e722      	b.n	801ae0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801afc6:	1c5d      	adds	r5, r3, #1
 801afc8:	4656      	mov	r6, sl
 801afca:	45aa      	cmp	sl, r5
 801afcc:	bfa8      	it	ge
 801afce:	462e      	movge	r6, r5
 801afd0:	e71e      	b.n	801ae10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801afd2:	f1b8 0f00 	cmp.w	r8, #0
 801afd6:	d00d      	beq.n	801aff4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801afd8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801afdc:	4658      	mov	r0, fp
 801afde:	f7e8 f891 	bl	8003104 <_ZN8touchgfx5paint9flushLineEPmi>
 801afe2:	4642      	mov	r2, r8
 801afe4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801afe8:	4638      	mov	r0, r7
 801afea:	9b05      	ldr	r3, [sp, #20]
 801afec:	4659      	mov	r1, fp
 801afee:	4447      	add	r7, r8
 801aff0:	f7e8 f8f0 	bl	80031d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801aff4:	4b1d      	ldr	r3, [pc, #116]	@ (801b06c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801aff6:	9a01      	ldr	r2, [sp, #4]
 801aff8:	881b      	ldrh	r3, [r3, #0]
 801affa:	1a9b      	subs	r3, r3, r2
 801affc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b000:	441f      	add	r7, r3
 801b002:	9b04      	ldr	r3, [sp, #16]
 801b004:	3301      	adds	r3, #1
 801b006:	9304      	str	r3, [sp, #16]
 801b008:	9a04      	ldr	r2, [sp, #16]
 801b00a:	9b00      	ldr	r3, [sp, #0]
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d11d      	bne.n	801b04c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801b010:	9b02      	ldr	r3, [sp, #8]
 801b012:	2400      	movs	r4, #0
 801b014:	9a02      	ldr	r2, [sp, #8]
 801b016:	f103 0801 	add.w	r8, r3, #1
 801b01a:	9b06      	ldr	r3, [sp, #24]
 801b01c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801b020:	4621      	mov	r1, r4
 801b022:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b02a:	9b07      	ldr	r3, [sp, #28]
 801b02c:	ba36      	rev	r6, r6
 801b02e:	9808      	ldr	r0, [sp, #32]
 801b030:	441e      	add	r6, r3
 801b032:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b036:	1aed      	subs	r5, r5, r3
 801b038:	f009 fdc6 	bl	8024bc8 <memset>
 801b03c:	f8cd 8008 	str.w	r8, [sp, #8]
 801b040:	b2ad      	uxth	r5, r5
 801b042:	9404      	str	r4, [sp, #16]
 801b044:	f7e8 f854 	bl	80030f0 <_ZN8touchgfx5paint8tearDownEv>
 801b048:	46b0      	mov	r8, r6
 801b04a:	e5df      	b.n	801ac0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801b04c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b050:	9a01      	ldr	r2, [sp, #4]
 801b052:	1a9b      	subs	r3, r3, r2
 801b054:	1b5d      	subs	r5, r3, r5
 801b056:	b2ad      	uxth	r5, r5
 801b058:	e7f4      	b.n	801b044 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801b05a:	4b05      	ldr	r3, [pc, #20]	@ (801b070 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801b05c:	6818      	ldr	r0, [r3, #0]
 801b05e:	6803      	ldr	r3, [r0, #0]
 801b060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b062:	4798      	blx	r3
 801b064:	b00f      	add	sp, #60	@ 0x3c
 801b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b06a:	bf00      	nop
 801b06c:	240253ae 	.word	0x240253ae
 801b070:	240253b4 	.word	0x240253b4

0801b074 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b078:	b093      	sub	sp, #76	@ 0x4c
 801b07a:	460d      	mov	r5, r1
 801b07c:	4616      	mov	r6, r2
 801b07e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801b082:	9000      	str	r0, [sp, #0]
 801b084:	f1bb 0f00 	cmp.w	fp, #0
 801b088:	f000 82ac 	beq.w	801b5e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801b08c:	6810      	ldr	r0, [r2, #0]
 801b08e:	ac0e      	add	r4, sp, #56	@ 0x38
 801b090:	6851      	ldr	r1, [r2, #4]
 801b092:	c403      	stmia	r4!, {r0, r1}
 801b094:	6818      	ldr	r0, [r3, #0]
 801b096:	ac10      	add	r4, sp, #64	@ 0x40
 801b098:	6859      	ldr	r1, [r3, #4]
 801b09a:	c403      	stmia	r4!, {r0, r1}
 801b09c:	a80e      	add	r0, sp, #56	@ 0x38
 801b09e:	f7f9 f885 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0a2:	4631      	mov	r1, r6
 801b0a4:	a810      	add	r0, sp, #64	@ 0x40
 801b0a6:	f7f9 f8c5 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b0aa:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b0ae:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b0b2:	bfdb      	ittet	le
 801b0b4:	b293      	uxthle	r3, r2
 801b0b6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b0ba:	2301      	movgt	r3, #1
 801b0bc:	fb91 f3f3 	sdivle	r3, r1, r3
 801b0c0:	9301      	str	r3, [sp, #4]
 801b0c2:	f105 0308 	add.w	r3, r5, #8
 801b0c6:	9901      	ldr	r1, [sp, #4]
 801b0c8:	9305      	str	r3, [sp, #20]
 801b0ca:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b0ce:	440b      	add	r3, r1
 801b0d0:	3b01      	subs	r3, #1
 801b0d2:	fb93 f3f1 	sdiv	r3, r3, r1
 801b0d6:	3b01      	subs	r3, #1
 801b0d8:	9905      	ldr	r1, [sp, #20]
 801b0da:	b29b      	uxth	r3, r3
 801b0dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b0e0:	9901      	ldr	r1, [sp, #4]
 801b0e2:	9306      	str	r3, [sp, #24]
 801b0e4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801b0e8:	fb93 f0f1 	sdiv	r0, r3, r1
 801b0ec:	b284      	uxth	r4, r0
 801b0ee:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801b0f2:	9403      	str	r4, [sp, #12]
 801b0f4:	9d03      	ldr	r5, [sp, #12]
 801b0f6:	9c01      	ldr	r4, [sp, #4]
 801b0f8:	fb05 3714 	mls	r7, r5, r4, r3
 801b0fc:	fb17 f702 	smulbb	r7, r7, r2
 801b100:	440f      	add	r7, r1
 801b102:	b2bf      	uxth	r7, r7
 801b104:	2d00      	cmp	r5, #0
 801b106:	d06b      	beq.n	801b1e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801b108:	1e6a      	subs	r2, r5, #1
 801b10a:	9805      	ldr	r0, [sp, #20]
 801b10c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801b110:	9a06      	ldr	r2, [sp, #24]
 801b112:	fa99 f989 	rev.w	r9, r9
 801b116:	4491      	add	r9, r2
 801b118:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b11c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801b120:	4411      	add	r1, r2
 801b122:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b126:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801b484 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801b12a:	4413      	add	r3, r2
 801b12c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b130:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b134:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801b138:	9302      	str	r3, [sp, #8]
 801b13a:	4bd0      	ldr	r3, [pc, #832]	@ (801b47c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801b13c:	6818      	ldr	r0, [r3, #0]
 801b13e:	6803      	ldr	r3, [r0, #0]
 801b140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b142:	4798      	blx	r3
 801b144:	4bce      	ldr	r3, [pc, #824]	@ (801b480 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801b146:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801b14a:	881b      	ldrh	r3, [r3, #0]
 801b14c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801b150:	fb03 2404 	mla	r4, r3, r4, r2
 801b154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b158:	436b      	muls	r3, r5
 801b15a:	2500      	movs	r5, #0
 801b15c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b164:	4629      	mov	r1, r5
 801b166:	4404      	add	r4, r0
 801b168:	18e3      	adds	r3, r4, r3
 801b16a:	930d      	str	r3, [sp, #52]	@ 0x34
 801b16c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b170:	fb97 f3f3 	sdiv	r3, r7, r3
 801b174:	9304      	str	r3, [sp, #16]
 801b176:	9b00      	ldr	r3, [sp, #0]
 801b178:	3304      	adds	r3, #4
 801b17a:	4618      	mov	r0, r3
 801b17c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b17e:	f009 fd23 	bl	8024bc8 <memset>
 801b182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b184:	42a3      	cmp	r3, r4
 801b186:	f240 8228 	bls.w	801b5da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801b18a:	2003      	movs	r0, #3
 801b18c:	2607      	movs	r6, #7
 801b18e:	2f00      	cmp	r7, #0
 801b190:	f000 80cb 	beq.w	801b32a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801b194:	f899 3000 	ldrb.w	r3, [r9]
 801b198:	b2db      	uxtb	r3, r3
 801b19a:	2bfe      	cmp	r3, #254	@ 0xfe
 801b19c:	d123      	bne.n	801b1e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801b19e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b1a2:	3f01      	subs	r7, #1
 801b1a4:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b1a8:	f109 0804 	add.w	r8, r9, #4
 801b1ac:	b2db      	uxtb	r3, r3
 801b1ae:	f899 1003 	ldrb.w	r1, [r9, #3]
 801b1b2:	b2d2      	uxtb	r2, r2
 801b1b4:	f363 0507 	bfi	r5, r3, #0, #8
 801b1b8:	b2c9      	uxtb	r1, r1
 801b1ba:	b2bf      	uxth	r7, r7
 801b1bc:	f362 250f 	bfi	r5, r2, #8, #8
 801b1c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b1c4:	fb10 2201 	smlabb	r2, r0, r1, r2
 801b1c8:	f361 4517 	bfi	r5, r1, #16, #8
 801b1cc:	fb16 2303 	smlabb	r3, r6, r3, r2
 801b1d0:	9a00      	ldr	r2, [sp, #0]
 801b1d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1da:	605d      	str	r5, [r3, #4]
 801b1dc:	46c1      	mov	r9, r8
 801b1de:	e7d6      	b.n	801b18e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801b1e0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b1e4:	e798      	b.n	801b118 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801b1e6:	119a      	asrs	r2, r3, #6
 801b1e8:	f109 0801 	add.w	r8, r9, #1
 801b1ec:	d108      	bne.n	801b200 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801b1ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1f2:	9a00      	ldr	r2, [sp, #0]
 801b1f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1f8:	685d      	ldr	r5, [r3, #4]
 801b1fa:	3f01      	subs	r7, #1
 801b1fc:	b2bf      	uxth	r7, r7
 801b1fe:	e7ed      	b.n	801b1dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801b200:	2a01      	cmp	r2, #1
 801b202:	d125      	bne.n	801b250 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801b204:	f003 0103 	and.w	r1, r3, #3
 801b208:	1eaa      	subs	r2, r5, #2
 801b20a:	440a      	add	r2, r1
 801b20c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b210:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b214:	b2d2      	uxtb	r2, r2
 801b216:	3902      	subs	r1, #2
 801b218:	3b02      	subs	r3, #2
 801b21a:	f362 0507 	bfi	r5, r2, #0, #8
 801b21e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b222:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b226:	f361 250f 	bfi	r5, r1, #8, #8
 801b22a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b22e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b232:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b236:	fb10 1103 	smlabb	r1, r0, r3, r1
 801b23a:	f363 4517 	bfi	r5, r3, #16, #8
 801b23e:	9b00      	ldr	r3, [sp, #0]
 801b240:	fb16 1202 	smlabb	r2, r6, r2, r1
 801b244:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b248:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b24c:	6055      	str	r5, [r2, #4]
 801b24e:	e7d4      	b.n	801b1fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b250:	2a02      	cmp	r2, #2
 801b252:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b256:	d12c      	bne.n	801b2b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801b258:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b25c:	f1a3 0c20 	sub.w	ip, r3, #32
 801b260:	f109 0802 	add.w	r8, r9, #2
 801b264:	b2d2      	uxtb	r2, r2
 801b266:	f002 010f 	and.w	r1, r2, #15
 801b26a:	1112      	asrs	r2, r2, #4
 801b26c:	3908      	subs	r1, #8
 801b26e:	3a08      	subs	r2, #8
 801b270:	4461      	add	r1, ip
 801b272:	4494      	add	ip, r2
 801b274:	4429      	add	r1, r5
 801b276:	b2c9      	uxtb	r1, r1
 801b278:	f361 0507 	bfi	r5, r1, #0, #8
 801b27c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801b280:	f1ae 0e20 	sub.w	lr, lr, #32
 801b284:	4473      	add	r3, lr
 801b286:	b2db      	uxtb	r3, r3
 801b288:	f363 250f 	bfi	r5, r3, #8, #8
 801b28c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b290:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801b294:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801b298:	fb10 330c 	smlabb	r3, r0, ip, r3
 801b29c:	f36c 4517 	bfi	r5, ip, #16, #8
 801b2a0:	fb16 3101 	smlabb	r1, r6, r1, r3
 801b2a4:	9b00      	ldr	r3, [sp, #0]
 801b2a6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b2aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b2ae:	604d      	str	r5, [r1, #4]
 801b2b0:	e7a3      	b.n	801b1fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b2b2:	3301      	adds	r3, #1
 801b2b4:	42bb      	cmp	r3, r7
 801b2b6:	dd23      	ble.n	801b300 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801b2b8:	eba3 0907 	sub.w	r9, r3, r7
 801b2bc:	f1b9 0f00 	cmp.w	r9, #0
 801b2c0:	dc20      	bgt.n	801b304 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801b2c2:	9e02      	ldr	r6, [sp, #8]
 801b2c4:	2700      	movs	r7, #0
 801b2c6:	2e00      	cmp	r6, #0
 801b2c8:	f340 8142 	ble.w	801b550 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801b2cc:	f108 0301 	add.w	r3, r8, #1
 801b2d0:	9307      	str	r3, [sp, #28]
 801b2d2:	f898 3000 	ldrb.w	r3, [r8]
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	119a      	asrs	r2, r3, #6
 801b2da:	d12a      	bne.n	801b332 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801b2dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b2e0:	9a00      	ldr	r2, [sp, #0]
 801b2e2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b2e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b2ea:	685d      	ldr	r5, [r3, #4]
 801b2ec:	f040 811f 	bne.w	801b52e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b2f0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b2f4:	7025      	strb	r5, [r4, #0]
 801b2f6:	7063      	strb	r3, [r4, #1]
 801b2f8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b2fc:	70a3      	strb	r3, [r4, #2]
 801b2fe:	e04e      	b.n	801b39e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b300:	1aff      	subs	r7, r7, r3
 801b302:	e77b      	b.n	801b1fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801b304:	9b02      	ldr	r3, [sp, #8]
 801b306:	4620      	mov	r0, r4
 801b308:	462a      	mov	r2, r5
 801b30a:	454b      	cmp	r3, r9
 801b30c:	bfa8      	it	ge
 801b30e:	464b      	movge	r3, r9
 801b310:	461f      	mov	r7, r3
 801b312:	9b02      	ldr	r3, [sp, #8]
 801b314:	4639      	mov	r1, r7
 801b316:	1bde      	subs	r6, r3, r7
 801b318:	eba9 0907 	sub.w	r9, r9, r7
 801b31c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b320:	465b      	mov	r3, fp
 801b322:	f7e7 ff09 	bl	8003138 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b326:	443c      	add	r4, r7
 801b328:	e7cc      	b.n	801b2c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b32a:	46c8      	mov	r8, r9
 801b32c:	9e02      	ldr	r6, [sp, #8]
 801b32e:	46b9      	mov	r9, r7
 801b330:	e7c8      	b.n	801b2c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b332:	2a01      	cmp	r2, #1
 801b334:	d136      	bne.n	801b3a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801b336:	f003 0103 	and.w	r1, r3, #3
 801b33a:	1ea8      	subs	r0, r5, #2
 801b33c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b340:	4408      	add	r0, r1
 801b342:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b346:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b34a:	b2c0      	uxtb	r0, r0
 801b34c:	f1a1 0102 	sub.w	r1, r1, #2
 801b350:	f1a3 0302 	sub.w	r3, r3, #2
 801b354:	f360 0507 	bfi	r5, r0, #0, #8
 801b358:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b35c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b360:	f361 250f 	bfi	r5, r1, #8, #8
 801b364:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801b368:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b36c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801b370:	f04f 0303 	mov.w	r3, #3
 801b374:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801b378:	f04f 0c07 	mov.w	ip, #7
 801b37c:	9b00      	ldr	r3, [sp, #0]
 801b37e:	f368 4517 	bfi	r5, r8, #16, #8
 801b382:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801b386:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801b38a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801b38e:	f8cc 5004 	str.w	r5, [ip, #4]
 801b392:	f040 80cd 	bne.w	801b530 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b396:	7020      	strb	r0, [r4, #0]
 801b398:	7061      	strb	r1, [r4, #1]
 801b39a:	f884 8002 	strb.w	r8, [r4, #2]
 801b39e:	3e01      	subs	r6, #1
 801b3a0:	3403      	adds	r4, #3
 801b3a2:	e0c1      	b.n	801b528 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b3a4:	2a02      	cmp	r2, #2
 801b3a6:	d13d      	bne.n	801b424 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801b3a8:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b3ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b3b0:	f108 0202 	add.w	r2, r8, #2
 801b3b4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b3b8:	b2c9      	uxtb	r1, r1
 801b3ba:	f1a3 0c20 	sub.w	ip, r3, #32
 801b3be:	9207      	str	r2, [sp, #28]
 801b3c0:	f001 000f 	and.w	r0, r1, #15
 801b3c4:	f1a0 0008 	sub.w	r0, r0, #8
 801b3c8:	4460      	add	r0, ip
 801b3ca:	4428      	add	r0, r5
 801b3cc:	b2c0      	uxtb	r0, r0
 801b3ce:	f360 0507 	bfi	r5, r0, #0, #8
 801b3d2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b3d6:	f1a2 0220 	sub.w	r2, r2, #32
 801b3da:	4413      	add	r3, r2
 801b3dc:	ea4f 1221 	mov.w	r2, r1, asr #4
 801b3e0:	b2db      	uxtb	r3, r3
 801b3e2:	f1a2 0208 	sub.w	r2, r2, #8
 801b3e6:	f363 250f 	bfi	r5, r3, #8, #8
 801b3ea:	4462      	add	r2, ip
 801b3ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b3f0:	f04f 0c03 	mov.w	ip, #3
 801b3f4:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801b3f8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b3fc:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801b400:	f04f 0107 	mov.w	r1, #7
 801b404:	f362 4517 	bfi	r5, r2, #16, #8
 801b408:	fb11 c100 	smlabb	r1, r1, r0, ip
 801b40c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801b410:	9900      	ldr	r1, [sp, #0]
 801b412:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801b416:	604d      	str	r5, [r1, #4]
 801b418:	f040 8089 	bne.w	801b52e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b41c:	7020      	strb	r0, [r4, #0]
 801b41e:	7063      	strb	r3, [r4, #1]
 801b420:	70a2      	strb	r2, [r4, #2]
 801b422:	e7bc      	b.n	801b39e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b424:	2bfe      	cmp	r3, #254	@ 0xfe
 801b426:	d12f      	bne.n	801b488 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801b428:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b42c:	f108 0304 	add.w	r3, r8, #4
 801b430:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b434:	f04f 0c03 	mov.w	ip, #3
 801b438:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b43c:	b2c0      	uxtb	r0, r0
 801b43e:	b2d2      	uxtb	r2, r2
 801b440:	9307      	str	r3, [sp, #28]
 801b442:	b2c9      	uxtb	r1, r1
 801b444:	f360 0507 	bfi	r5, r0, #0, #8
 801b448:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801b44c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b450:	f362 250f 	bfi	r5, r2, #8, #8
 801b454:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801b458:	f04f 0307 	mov.w	r3, #7
 801b45c:	f361 4517 	bfi	r5, r1, #16, #8
 801b460:	fb13 c300 	smlabb	r3, r3, r0, ip
 801b464:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801b468:	9b00      	ldr	r3, [sp, #0]
 801b46a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801b46e:	605d      	str	r5, [r3, #4]
 801b470:	d15d      	bne.n	801b52e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b472:	7020      	strb	r0, [r4, #0]
 801b474:	7062      	strb	r2, [r4, #1]
 801b476:	70a1      	strb	r1, [r4, #2]
 801b478:	e791      	b.n	801b39e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b47a:	bf00      	nop
 801b47c:	240253b4 	.word	0x240253b4
 801b480:	240253ae 	.word	0x240253ae
 801b484:	24009740 	.word	0x24009740
 801b488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b48c:	1c5a      	adds	r2, r3, #1
 801b48e:	b94b      	cbnz	r3, 801b4a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801b490:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b494:	d14c      	bne.n	801b530 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b496:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b49a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b49e:	7025      	strb	r5, [r4, #0]
 801b4a0:	7062      	strb	r2, [r4, #1]
 801b4a2:	e72b      	b.n	801b2fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801b4a4:	4296      	cmp	r6, r2
 801b4a6:	46b0      	mov	r8, r6
 801b4a8:	bfa8      	it	ge
 801b4aa:	4690      	movge	r8, r2
 801b4ac:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b4b0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b4b4:	eba6 0608 	sub.w	r6, r6, r8
 801b4b8:	eba2 0908 	sub.w	r9, r2, r8
 801b4bc:	9308      	str	r3, [sp, #32]
 801b4be:	b2eb      	uxtb	r3, r5
 801b4c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801b4c2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b4c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4c8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b4cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801b4ce:	9b08      	ldr	r3, [sp, #32]
 801b4d0:	d030      	beq.n	801b534 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801b4d2:	18fb      	adds	r3, r7, r3
 801b4d4:	2bc0      	cmp	r3, #192	@ 0xc0
 801b4d6:	dd15      	ble.n	801b504 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801b4d8:	4650      	mov	r0, sl
 801b4da:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b4de:	f7e7 fe11 	bl	8003104 <_ZN8touchgfx5paint9flushLineEPmi>
 801b4e2:	2203      	movs	r2, #3
 801b4e4:	4651      	mov	r1, sl
 801b4e6:	465b      	mov	r3, fp
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	443c      	add	r4, r7
 801b4ec:	fb97 f2f2 	sdiv	r2, r7, r2
 801b4f0:	f7e7 fe4c 	bl	800318c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b4f4:	4b3d      	ldr	r3, [pc, #244]	@ (801b5ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801b4f6:	2700      	movs	r7, #0
 801b4f8:	459a      	cmp	sl, r3
 801b4fa:	bf0c      	ite	eq
 801b4fc:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801b5f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801b500:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801b5ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801b504:	eb0a 0307 	add.w	r3, sl, r7
 801b508:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b50a:	f1b8 0801 	subs.w	r8, r8, #1
 801b50e:	f103 0303 	add.w	r3, r3, #3
 801b512:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b516:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b518:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b51c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b51e:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b522:	d1f1      	bne.n	801b508 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801b524:	9b08      	ldr	r3, [sp, #32]
 801b526:	441f      	add	r7, r3
 801b528:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b52c:	e6cb      	b.n	801b2c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801b52e:	2201      	movs	r2, #1
 801b530:	4690      	mov	r8, r2
 801b532:	e7bb      	b.n	801b4ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801b534:	4423      	add	r3, r4
 801b536:	42a3      	cmp	r3, r4
 801b538:	d9f6      	bls.n	801b528 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b53a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b53c:	3403      	adds	r4, #3
 801b53e:	f804 2c03 	strb.w	r2, [r4, #-3]
 801b542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b544:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b548:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b54a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b54e:	e7f2      	b.n	801b536 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801b550:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b554:	d00e      	beq.n	801b574 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b556:	b16f      	cbz	r7, 801b574 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b558:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b55c:	4650      	mov	r0, sl
 801b55e:	f7e7 fdd1 	bl	8003104 <_ZN8touchgfx5paint9flushLineEPmi>
 801b562:	2203      	movs	r2, #3
 801b564:	4620      	mov	r0, r4
 801b566:	443c      	add	r4, r7
 801b568:	465b      	mov	r3, fp
 801b56a:	4651      	mov	r1, sl
 801b56c:	fb97 f2f2 	sdiv	r2, r7, r2
 801b570:	f7e7 fe0c 	bl	800318c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b574:	4b1e      	ldr	r3, [pc, #120]	@ (801b5f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801b576:	9a02      	ldr	r2, [sp, #8]
 801b578:	881b      	ldrh	r3, [r3, #0]
 801b57a:	1a9b      	subs	r3, r3, r2
 801b57c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b580:	441c      	add	r4, r3
 801b582:	9b04      	ldr	r3, [sp, #16]
 801b584:	3301      	adds	r3, #1
 801b586:	9304      	str	r3, [sp, #16]
 801b588:	9a04      	ldr	r2, [sp, #16]
 801b58a:	9b01      	ldr	r3, [sp, #4]
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d11c      	bne.n	801b5ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801b590:	9b03      	ldr	r3, [sp, #12]
 801b592:	2500      	movs	r5, #0
 801b594:	9a03      	ldr	r2, [sp, #12]
 801b596:	1c5e      	adds	r6, r3, #1
 801b598:	9b05      	ldr	r3, [sp, #20]
 801b59a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801b59e:	4629      	mov	r1, r5
 801b5a0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801b5a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b5a8:	9b06      	ldr	r3, [sp, #24]
 801b5aa:	fa98 f888 	rev.w	r8, r8
 801b5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5b0:	4498      	add	r8, r3
 801b5b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b5b6:	1aff      	subs	r7, r7, r3
 801b5b8:	f009 fb06 	bl	8024bc8 <memset>
 801b5bc:	b2bf      	uxth	r7, r7
 801b5be:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801b5c2:	f7e7 fd95 	bl	80030f0 <_ZN8touchgfx5paint8tearDownEv>
 801b5c6:	46c1      	mov	r9, r8
 801b5c8:	e5db      	b.n	801b182 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801b5ca:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801b5ce:	9b02      	ldr	r3, [sp, #8]
 801b5d0:	1aff      	subs	r7, r7, r3
 801b5d2:	eba7 0709 	sub.w	r7, r7, r9
 801b5d6:	b2bf      	uxth	r7, r7
 801b5d8:	e7f3      	b.n	801b5c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801b5da:	4b06      	ldr	r3, [pc, #24]	@ (801b5f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801b5dc:	6818      	ldr	r0, [r3, #0]
 801b5de:	6803      	ldr	r3, [r0, #0]
 801b5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b5e2:	4798      	blx	r3
 801b5e4:	b013      	add	sp, #76	@ 0x4c
 801b5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ea:	bf00      	nop
 801b5ec:	24009740 	.word	0x24009740
 801b5f0:	240253ae 	.word	0x240253ae
 801b5f4:	240253b4 	.word	0x240253b4
 801b5f8:	24009840 	.word	0x24009840

0801b5fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b600:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b604:	9c06      	ldr	r4, [sp, #24]
 801b606:	2800      	cmp	r0, #0
 801b608:	d06e      	beq.n	801b6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b60a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b60e:	2d00      	cmp	r5, #0
 801b610:	dd6a      	ble.n	801b6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b612:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b616:	f1bc 0f00 	cmp.w	ip, #0
 801b61a:	dd65      	ble.n	801b6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b61c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b620:	28ff      	cmp	r0, #255	@ 0xff
 801b622:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b626:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b62a:	fb02 3306 	mla	r3, r2, r6, r3
 801b62e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b632:	b2e4      	uxtb	r4, r4
 801b634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b638:	4419      	add	r1, r3
 801b63a:	fb02 f30c 	mul.w	r3, r2, ip
 801b63e:	eba2 0205 	sub.w	r2, r2, r5
 801b642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b64a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b64e:	440b      	add	r3, r1
 801b650:	d03e      	beq.n	801b6d0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b652:	fa1f fc80 	uxth.w	ip, r0
 801b656:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801b65a:	fb06 f60c 	mul.w	r6, r6, ip
 801b65e:	b280      	uxth	r0, r0
 801b660:	fb07 f70c 	mul.w	r7, r7, ip
 801b664:	fb04 f40c 	mul.w	r4, r4, ip
 801b668:	4299      	cmp	r1, r3
 801b66a:	d23d      	bcs.n	801b6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b66c:	eb01 0c05 	add.w	ip, r1, r5
 801b670:	458c      	cmp	ip, r1
 801b672:	f101 0e03 	add.w	lr, r1, #3
 801b676:	d928      	bls.n	801b6ca <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b678:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b67c:	fb11 f100 	smulbb	r1, r1, r0
 801b680:	4421      	add	r1, r4
 801b682:	b289      	uxth	r1, r1
 801b684:	f101 0801 	add.w	r8, r1, #1
 801b688:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b68c:	1209      	asrs	r1, r1, #8
 801b68e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b692:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b696:	fb11 f100 	smulbb	r1, r1, r0
 801b69a:	4439      	add	r1, r7
 801b69c:	b289      	uxth	r1, r1
 801b69e:	f101 0801 	add.w	r8, r1, #1
 801b6a2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6a6:	1209      	asrs	r1, r1, #8
 801b6a8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b6ac:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b6b0:	fb11 f100 	smulbb	r1, r1, r0
 801b6b4:	4431      	add	r1, r6
 801b6b6:	b289      	uxth	r1, r1
 801b6b8:	f101 0801 	add.w	r8, r1, #1
 801b6bc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6c0:	1209      	asrs	r1, r1, #8
 801b6c2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801b6c6:	4671      	mov	r1, lr
 801b6c8:	e7d2      	b.n	801b670 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801b6ca:	4411      	add	r1, r2
 801b6cc:	e7cc      	b.n	801b668 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801b6ce:	4411      	add	r1, r2
 801b6d0:	4299      	cmp	r1, r3
 801b6d2:	d209      	bcs.n	801b6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b6d4:	1948      	adds	r0, r1, r5
 801b6d6:	4281      	cmp	r1, r0
 801b6d8:	d2f9      	bcs.n	801b6ce <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801b6da:	700c      	strb	r4, [r1, #0]
 801b6dc:	3103      	adds	r1, #3
 801b6de:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b6e2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801b6e6:	e7f6      	b.n	801b6d6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b6ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f0:	b093      	sub	sp, #76	@ 0x4c
 801b6f2:	4699      	mov	r9, r3
 801b6f4:	4617      	mov	r7, r2
 801b6f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6fa:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801b6fe:	4604      	mov	r4, r0
 801b700:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b704:	a80c      	add	r0, sp, #48	@ 0x30
 801b706:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801b70a:	460d      	mov	r5, r1
 801b70c:	4649      	mov	r1, r9
 801b70e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b712:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b716:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801b71a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801b71e:	f7f4 f85d 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801b722:	4639      	mov	r1, r7
 801b724:	a80c      	add	r0, sp, #48	@ 0x30
 801b726:	f7f4 f859 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 801b72a:	4b78      	ldr	r3, [pc, #480]	@ (801b90c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b72c:	8818      	ldrh	r0, [r3, #0]
 801b72e:	4b78      	ldr	r3, [pc, #480]	@ (801b910 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801b730:	b202      	sxth	r2, r0
 801b732:	8819      	ldrh	r1, [r3, #0]
 801b734:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b738:	b20f      	sxth	r7, r1
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	da07      	bge.n	801b74e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801b73e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801b742:	4463      	add	r3, ip
 801b744:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b748:	2300      	movs	r3, #0
 801b74a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b74e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b752:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801b756:	1ad2      	subs	r2, r2, r3
 801b758:	4594      	cmp	ip, r2
 801b75a:	bfc4      	itt	gt
 801b75c:	1ac2      	subgt	r2, r0, r3
 801b75e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801b762:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b766:	2a00      	cmp	r2, #0
 801b768:	da07      	bge.n	801b77a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801b76a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801b76e:	4462      	add	r2, ip
 801b770:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801b774:	2200      	movs	r2, #0
 801b776:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801b77a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b77e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801b782:	1abf      	subs	r7, r7, r2
 801b784:	45bc      	cmp	ip, r7
 801b786:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801b918 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801b78a:	bfc8      	it	gt
 801b78c:	1a8f      	subgt	r7, r1, r2
 801b78e:	f89c c000 	ldrb.w	ip, [ip]
 801b792:	bfc8      	it	gt
 801b794:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801b798:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801b79c:	f1bc 0f00 	cmp.w	ip, #0
 801b7a0:	d176      	bne.n	801b890 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801b7a2:	4287      	cmp	r7, r0
 801b7a4:	bf14      	ite	ne
 801b7a6:	2100      	movne	r1, #0
 801b7a8:	2101      	moveq	r1, #1
 801b7aa:	2f00      	cmp	r7, #0
 801b7ac:	9107      	str	r1, [sp, #28]
 801b7ae:	dd73      	ble.n	801b898 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b7b0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801b7b4:	2900      	cmp	r1, #0
 801b7b6:	9104      	str	r1, [sp, #16]
 801b7b8:	dd6e      	ble.n	801b898 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b7ba:	f8b9 1000 	ldrh.w	r1, [r9]
 801b7be:	a80e      	add	r0, sp, #56	@ 0x38
 801b7c0:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801b7c4:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801b7c8:	1a5b      	subs	r3, r3, r1
 801b7ca:	a910      	add	r1, sp, #64	@ 0x40
 801b7cc:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b7d0:	b21b      	sxth	r3, r3
 801b7d2:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801b7d6:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b91c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b7da:	9305      	str	r3, [sp, #20]
 801b7dc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801b7e0:	1ad2      	subs	r2, r2, r3
 801b7e2:	b213      	sxth	r3, r2
 801b7e4:	9306      	str	r3, [sp, #24]
 801b7e6:	9b05      	ldr	r3, [sp, #20]
 801b7e8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b7ec:	9b06      	ldr	r3, [sp, #24]
 801b7ee:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b7f2:	9b04      	ldr	r3, [sp, #16]
 801b7f4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801b7fc:	f7f8 fd1a 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b800:	4640      	mov	r0, r8
 801b802:	f7f8 fcd3 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b806:	a810      	add	r0, sp, #64	@ 0x40
 801b808:	f7f8 fcd0 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b80c:	4b41      	ldr	r3, [pc, #260]	@ (801b914 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801b80e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b812:	4628      	mov	r0, r5
 801b814:	881b      	ldrh	r3, [r3, #0]
 801b816:	9308      	str	r3, [sp, #32]
 801b818:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b81c:	b21b      	sxth	r3, r3
 801b81e:	9303      	str	r3, [sp, #12]
 801b820:	682b      	ldr	r3, [r5, #0]
 801b822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b824:	4798      	blx	r3
 801b826:	9a03      	ldr	r2, [sp, #12]
 801b828:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801b82c:	4681      	mov	r9, r0
 801b82e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b832:	fb13 f302 	smulbb	r3, r3, r2
 801b836:	2203      	movs	r2, #3
 801b838:	f8da 0000 	ldr.w	r0, [sl]
 801b83c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b840:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801b842:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b844:	441d      	add	r5, r3
 801b846:	6803      	ldr	r3, [r0, #0]
 801b848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b84a:	4798      	blx	r3
 801b84c:	9009      	str	r0, [sp, #36]	@ 0x24
 801b84e:	f8da 0000 	ldr.w	r0, [sl]
 801b852:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801b856:	6803      	ldr	r3, [r0, #0]
 801b858:	910a      	str	r1, [sp, #40]	@ 0x28
 801b85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b85c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801b860:	4798      	blx	r3
 801b862:	f010 0f01 	tst.w	r0, #1
 801b866:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801b86a:	d01e      	beq.n	801b8aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b86c:	f8da 0000 	ldr.w	r0, [sl]
 801b870:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b874:	6803      	ldr	r3, [r0, #0]
 801b876:	9200      	str	r2, [sp, #0]
 801b878:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801b87a:	462b      	mov	r3, r5
 801b87c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b880:	47b0      	blx	r6
 801b882:	9b05      	ldr	r3, [sp, #20]
 801b884:	80a7      	strh	r7, [r4, #4]
 801b886:	8023      	strh	r3, [r4, #0]
 801b888:	9b06      	ldr	r3, [sp, #24]
 801b88a:	8063      	strh	r3, [r4, #2]
 801b88c:	9b04      	ldr	r3, [sp, #16]
 801b88e:	e007      	b.n	801b8a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b890:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801b894:	4288      	cmp	r0, r1
 801b896:	e785      	b.n	801b7a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b898:	2300      	movs	r3, #0
 801b89a:	8023      	strh	r3, [r4, #0]
 801b89c:	8063      	strh	r3, [r4, #2]
 801b89e:	80a3      	strh	r3, [r4, #4]
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	80e3      	strh	r3, [r4, #6]
 801b8a4:	b013      	add	sp, #76	@ 0x4c
 801b8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8aa:	fb09 f606 	mul.w	r6, r9, r6
 801b8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8b0:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b8b4:	9a07      	ldr	r2, [sp, #28]
 801b8b6:	4433      	add	r3, r6
 801b8b8:	461e      	mov	r6, r3
 801b8ba:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b8be:	b16a      	cbz	r2, 801b8dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8c0:	9a08      	ldr	r2, [sp, #32]
 801b8c2:	4593      	cmp	fp, r2
 801b8c4:	d10a      	bne.n	801b8dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8c6:	f8da 0000 	ldr.w	r0, [sl]
 801b8ca:	fb09 f303 	mul.w	r3, r9, r3
 801b8ce:	4629      	mov	r1, r5
 801b8d0:	6802      	ldr	r2, [r0, #0]
 801b8d2:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b8d6:	4632      	mov	r2, r6
 801b8d8:	47d0      	blx	sl
 801b8da:	e7d2      	b.n	801b882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b8dc:	9a03      	ldr	r2, [sp, #12]
 801b8de:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801b91c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b8e2:	fb02 5803 	mla	r8, r2, r3, r5
 801b8e6:	4545      	cmp	r5, r8
 801b8e8:	d2cb      	bcs.n	801b882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b8ea:	f8db 0000 	ldr.w	r0, [fp]
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b8f4:	6802      	ldr	r2, [r0, #0]
 801b8f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8fa:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b8fe:	4632      	mov	r2, r6
 801b900:	47d0      	blx	sl
 801b902:	9b03      	ldr	r3, [sp, #12]
 801b904:	444e      	add	r6, r9
 801b906:	441d      	add	r5, r3
 801b908:	e7ed      	b.n	801b8e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b90a:	bf00      	nop
 801b90c:	240253a8 	.word	0x240253a8
 801b910:	240253aa 	.word	0x240253aa
 801b914:	240253ae 	.word	0x240253ae
 801b918:	240253ac 	.word	0x240253ac
 801b91c:	240253b4 	.word	0x240253b4

0801b920 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b920:	2200      	movs	r2, #0
 801b922:	490e      	ldr	r1, [pc, #56]	@ (801b95c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801b924:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801b928:	6001      	str	r1, [r0, #0]
 801b92a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b92e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b932:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801b936:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801b93a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801b93e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801b942:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801b946:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801b94a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801b94e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801b952:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801b956:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801b95a:	4770      	bx	lr
 801b95c:	08028ce8 	.word	0x08028ce8

0801b960 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	b091      	sub	sp, #68	@ 0x44
 801b966:	4607      	mov	r7, r0
 801b968:	4688      	mov	r8, r1
 801b96a:	6810      	ldr	r0, [r2, #0]
 801b96c:	6851      	ldr	r1, [r2, #4]
 801b96e:	ac0c      	add	r4, sp, #48	@ 0x30
 801b970:	4616      	mov	r6, r2
 801b972:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801b976:	4d64      	ldr	r5, [pc, #400]	@ (801bb08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b978:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801bb0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b97c:	c403      	stmia	r4!, {r0, r1}
 801b97e:	6818      	ldr	r0, [r3, #0]
 801b980:	ac0e      	add	r4, sp, #56	@ 0x38
 801b982:	6859      	ldr	r1, [r3, #4]
 801b984:	c403      	stmia	r4!, {r0, r1}
 801b986:	a80c      	add	r0, sp, #48	@ 0x30
 801b988:	f7f8 fc10 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b98c:	4631      	mov	r1, r6
 801b98e:	a80e      	add	r0, sp, #56	@ 0x38
 801b990:	f7f8 fc50 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b994:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b998:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b99c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b9a0:	6828      	ldr	r0, [r5, #0]
 801b9a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b9a6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801b9aa:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801b9ae:	440f      	add	r7, r1
 801b9b0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b9b4:	440a      	add	r2, r1
 801b9b6:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b9ba:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b9be:	4413      	add	r3, r2
 801b9c0:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b9c4:	6803      	ldr	r3, [r0, #0]
 801b9c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b9c8:	4798      	blx	r3
 801b9ca:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b9ce:	6828      	ldr	r0, [r5, #0]
 801b9d0:	d01f      	beq.n	801ba12 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b9d2:	2201      	movs	r2, #1
 801b9d4:	2500      	movs	r5, #0
 801b9d6:	6801      	ldr	r1, [r0, #0]
 801b9d8:	b2a4      	uxth	r4, r4
 801b9da:	b2b6      	uxth	r6, r6
 801b9dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b9e0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801b9e4:	250b      	movs	r5, #11
 801b9e6:	9507      	str	r5, [sp, #28]
 801b9e8:	f8ba 5000 	ldrh.w	r5, [sl]
 801b9ec:	f8cd 9010 	str.w	r9, [sp, #16]
 801b9f0:	9602      	str	r6, [sp, #8]
 801b9f2:	9401      	str	r4, [sp, #4]
 801b9f4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b9f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801b9fc:	9203      	str	r2, [sp, #12]
 801b9fe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801ba02:	9200      	str	r2, [sp, #0]
 801ba04:	4642      	mov	r2, r8
 801ba06:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801ba08:	4639      	mov	r1, r7
 801ba0a:	47a0      	blx	r4
 801ba0c:	b011      	add	sp, #68	@ 0x44
 801ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba12:	6803      	ldr	r3, [r0, #0]
 801ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba16:	4798      	blx	r3
 801ba18:	f8ba 5000 	ldrh.w	r5, [sl]
 801ba1c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ba20:	f04f 0e04 	mov.w	lr, #4
 801ba24:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ba28:	436e      	muls	r6, r5
 801ba2a:	fb05 2303 	mla	r3, r5, r3, r2
 801ba2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ba32:	1b2d      	subs	r5, r5, r4
 801ba34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba3c:	4418      	add	r0, r3
 801ba3e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ba42:	1982      	adds	r2, r0, r6
 801ba44:	1b1b      	subs	r3, r3, r4
 801ba46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba4c:	4290      	cmp	r0, r2
 801ba4e:	d254      	bcs.n	801bafa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ba50:	eb00 0a04 	add.w	sl, r0, r4
 801ba54:	4550      	cmp	r0, sl
 801ba56:	d24c      	bcs.n	801baf2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ba58:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ba5c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ba60:	eb08 0c01 	add.w	ip, r8, r1
 801ba64:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ba68:	b173      	cbz	r3, 801ba88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ba6a:	2bff      	cmp	r3, #255	@ 0xff
 801ba6c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ba70:	d10c      	bne.n	801ba8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ba72:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ba76:	d109      	bne.n	801ba8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ba78:	f880 b000 	strb.w	fp, [r0]
 801ba7c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ba80:	7043      	strb	r3, [r0, #1]
 801ba82:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ba86:	7083      	strb	r3, [r0, #2]
 801ba88:	3003      	adds	r0, #3
 801ba8a:	e7e3      	b.n	801ba54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ba8c:	fb09 f103 	mul.w	r1, r9, r3
 801ba90:	1c4b      	adds	r3, r1, #1
 801ba92:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ba96:	7801      	ldrb	r1, [r0, #0]
 801ba98:	121b      	asrs	r3, r3, #8
 801ba9a:	b29e      	uxth	r6, r3
 801ba9c:	43db      	mvns	r3, r3
 801ba9e:	fb1b fb06 	smulbb	fp, fp, r6
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	fb01 b103 	mla	r1, r1, r3, fp
 801baa8:	b289      	uxth	r1, r1
 801baaa:	f101 0b01 	add.w	fp, r1, #1
 801baae:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bab2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bab6:	fb1b fb03 	smulbb	fp, fp, r3
 801baba:	1209      	asrs	r1, r1, #8
 801babc:	7001      	strb	r1, [r0, #0]
 801babe:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801bac2:	fb01 b106 	mla	r1, r1, r6, fp
 801bac6:	b289      	uxth	r1, r1
 801bac8:	f101 0b01 	add.w	fp, r1, #1
 801bacc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bad0:	1209      	asrs	r1, r1, #8
 801bad2:	7041      	strb	r1, [r0, #1]
 801bad4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801bad8:	f890 c002 	ldrb.w	ip, [r0, #2]
 801badc:	fb1c f303 	smulbb	r3, ip, r3
 801bae0:	fb01 3606 	mla	r6, r1, r6, r3
 801bae4:	b2b6      	uxth	r6, r6
 801bae6:	1c73      	adds	r3, r6, #1
 801bae8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801baec:	1236      	asrs	r6, r6, #8
 801baee:	7086      	strb	r6, [r0, #2]
 801baf0:	e7ca      	b.n	801ba88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801baf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baf4:	4428      	add	r0, r5
 801baf6:	441f      	add	r7, r3
 801baf8:	e7a8      	b.n	801ba4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801bafa:	4b03      	ldr	r3, [pc, #12]	@ (801bb08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bafc:	6818      	ldr	r0, [r3, #0]
 801bafe:	6803      	ldr	r3, [r0, #0]
 801bb00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb02:	4798      	blx	r3
 801bb04:	e782      	b.n	801ba0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801bb06:	bf00      	nop
 801bb08:	240253b4 	.word	0x240253b4
 801bb0c:	240253ae 	.word	0x240253ae

0801bb10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb14:	b091      	sub	sp, #68	@ 0x44
 801bb16:	4680      	mov	r8, r0
 801bb18:	460e      	mov	r6, r1
 801bb1a:	6810      	ldr	r0, [r2, #0]
 801bb1c:	6851      	ldr	r1, [r2, #4]
 801bb1e:	ad0c      	add	r5, sp, #48	@ 0x30
 801bb20:	4614      	mov	r4, r2
 801bb22:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801bb26:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801bcc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801bb2a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801bcc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801bb2e:	c503      	stmia	r5!, {r0, r1}
 801bb30:	6818      	ldr	r0, [r3, #0]
 801bb32:	ad0e      	add	r5, sp, #56	@ 0x38
 801bb34:	6859      	ldr	r1, [r3, #4]
 801bb36:	c503      	stmia	r5!, {r0, r1}
 801bb38:	a80c      	add	r0, sp, #48	@ 0x30
 801bb3a:	f7f8 fb37 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb3e:	4621      	mov	r1, r4
 801bb40:	a80e      	add	r0, sp, #56	@ 0x38
 801bb42:	f7f8 fb77 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb46:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bb4a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bb4e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801bb52:	f8d9 0000 	ldr.w	r0, [r9]
 801bb56:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bb5a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801bb5e:	eb08 0401 	add.w	r4, r8, r1
 801bb62:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801bb66:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801bb6a:	440a      	add	r2, r1
 801bb6c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801bb70:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801bb74:	4413      	add	r3, r2
 801bb76:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bb7a:	6803      	ldr	r3, [r0, #0]
 801bb7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bb7e:	4798      	blx	r3
 801bb80:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801bb84:	f8d9 0000 	ldr.w	r0, [r9]
 801bb88:	d022      	beq.n	801bbd0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	f04f 0c01 	mov.w	ip, #1
 801bb90:	6801      	ldr	r1, [r0, #0]
 801bb92:	b2ad      	uxth	r5, r5
 801bb94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bb98:	e9cd c208 	strd	ip, r2, [sp, #32]
 801bb9c:	f04f 0c0b 	mov.w	ip, #11
 801bba0:	f8cd c01c 	str.w	ip, [sp, #28]
 801bba4:	f8ba c000 	ldrh.w	ip, [sl]
 801bba8:	9704      	str	r7, [sp, #16]
 801bbaa:	9502      	str	r5, [sp, #8]
 801bbac:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801bbb0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801bbb4:	9203      	str	r2, [sp, #12]
 801bbb6:	fa1f f288 	uxth.w	r2, r8
 801bbba:	9201      	str	r2, [sp, #4]
 801bbbc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801bbc0:	9200      	str	r2, [sp, #0]
 801bbc2:	4632      	mov	r2, r6
 801bbc4:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801bbc6:	4621      	mov	r1, r4
 801bbc8:	47a8      	blx	r5
 801bbca:	b011      	add	sp, #68	@ 0x44
 801bbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd0:	6803      	ldr	r3, [r0, #0]
 801bbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbd4:	4798      	blx	r3
 801bbd6:	f8ba 2000 	ldrh.w	r2, [sl]
 801bbda:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bbde:	f04f 0e03 	mov.w	lr, #3
 801bbe2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801bbe6:	4355      	muls	r5, r2
 801bbe8:	fa1f fc87 	uxth.w	ip, r7
 801bbec:	fb02 1303 	mla	r3, r2, r3, r1
 801bbf0:	eba2 0208 	sub.w	r2, r2, r8
 801bbf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc00:	4418      	add	r0, r3
 801bc02:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bc04:	1943      	adds	r3, r0, r5
 801bc06:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801bc0a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801bc0e:	eba2 0208 	sub.w	r2, r2, r8
 801bc12:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc16:	b2ad      	uxth	r5, r5
 801bc18:	4298      	cmp	r0, r3
 801bc1a:	d24a      	bcs.n	801bcb2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801bc1c:	eb00 0908 	add.w	r9, r0, r8
 801bc20:	4621      	mov	r1, r4
 801bc22:	4548      	cmp	r0, r9
 801bc24:	460c      	mov	r4, r1
 801bc26:	d240      	bcs.n	801bcaa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bc28:	f04f 0a04 	mov.w	sl, #4
 801bc2c:	7824      	ldrb	r4, [r4, #0]
 801bc2e:	2fff      	cmp	r7, #255	@ 0xff
 801bc30:	f101 0101 	add.w	r1, r1, #1
 801bc34:	fb1e a404 	smlabb	r4, lr, r4, sl
 801bc38:	eb06 0a04 	add.w	sl, r6, r4
 801bc3c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801bc40:	d02b      	beq.n	801bc9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801bc42:	7804      	ldrb	r4, [r0, #0]
 801bc44:	fb14 f405 	smulbb	r4, r4, r5
 801bc48:	fb0b 440c 	mla	r4, fp, ip, r4
 801bc4c:	b2a4      	uxth	r4, r4
 801bc4e:	f104 0b01 	add.w	fp, r4, #1
 801bc52:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc56:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bc5a:	fb1b fb05 	smulbb	fp, fp, r5
 801bc5e:	1224      	asrs	r4, r4, #8
 801bc60:	7004      	strb	r4, [r0, #0]
 801bc62:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bc66:	fb04 b40c 	mla	r4, r4, ip, fp
 801bc6a:	b2a4      	uxth	r4, r4
 801bc6c:	f104 0b01 	add.w	fp, r4, #1
 801bc70:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc74:	1224      	asrs	r4, r4, #8
 801bc76:	7044      	strb	r4, [r0, #1]
 801bc78:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bc7c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801bc80:	fb1a fa05 	smulbb	sl, sl, r5
 801bc84:	fb04 a40c 	mla	r4, r4, ip, sl
 801bc88:	b2a4      	uxth	r4, r4
 801bc8a:	f104 0a01 	add.w	sl, r4, #1
 801bc8e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bc92:	1224      	asrs	r4, r4, #8
 801bc94:	7084      	strb	r4, [r0, #2]
 801bc96:	3003      	adds	r0, #3
 801bc98:	e7c3      	b.n	801bc22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801bc9a:	f880 b000 	strb.w	fp, [r0]
 801bc9e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bca2:	7044      	strb	r4, [r0, #1]
 801bca4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bca8:	e7f4      	b.n	801bc94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801bcaa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bcac:	4420      	add	r0, r4
 801bcae:	188c      	adds	r4, r1, r2
 801bcb0:	e7b2      	b.n	801bc18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801bcb2:	4b03      	ldr	r3, [pc, #12]	@ (801bcc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801bcb4:	6818      	ldr	r0, [r3, #0]
 801bcb6:	6803      	ldr	r3, [r0, #0]
 801bcb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bcba:	4798      	blx	r3
 801bcbc:	e785      	b.n	801bbca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801bcbe:	bf00      	nop
 801bcc0:	240253b4 	.word	0x240253b4
 801bcc4:	240253ae 	.word	0x240253ae

0801bcc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801bcc8:	b4f0      	push	{r4, r5, r6, r7}
 801bcca:	460c      	mov	r4, r1
 801bccc:	4611      	mov	r1, r2
 801bcce:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	780f      	ldrb	r7, [r1, #0]
 801bcd6:	9b04      	ldr	r3, [sp, #16]
 801bcd8:	784e      	ldrb	r6, [r1, #1]
 801bcda:	b11f      	cbz	r7, 801bce4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801bcdc:	2f01      	cmp	r7, #1
 801bcde:	d01d      	beq.n	801bd1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801bce0:	bcf0      	pop	{r4, r5, r6, r7}
 801bce2:	4770      	bx	lr
 801bce4:	2e03      	cmp	r6, #3
 801bce6:	d8fb      	bhi.n	801bce0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bce8:	e8df f006 	tbb	[pc, r6]
 801bcec:	16140702 	.word	0x16140702
 801bcf0:	9504      	str	r5, [sp, #16]
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	bcf0      	pop	{r4, r5, r6, r7}
 801bcf6:	f7ff be33 	b.w	801b960 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801bcfa:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bcfc:	2800      	cmp	r0, #0
 801bcfe:	d0ef      	beq.n	801bce0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd00:	6806      	ldr	r6, [r0, #0]
 801bd02:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bd06:	68f5      	ldr	r5, [r6, #12]
 801bd08:	4613      	mov	r3, r2
 801bd0a:	46ac      	mov	ip, r5
 801bd0c:	460a      	mov	r2, r1
 801bd0e:	4621      	mov	r1, r4
 801bd10:	bcf0      	pop	{r4, r5, r6, r7}
 801bd12:	4760      	bx	ip
 801bd14:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd16:	e7f1      	b.n	801bcfc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd18:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd1a:	e7ef      	b.n	801bcfc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd1c:	2e03      	cmp	r6, #3
 801bd1e:	d8df      	bhi.n	801bce0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd20:	e8df f006 	tbb	[pc, r6]
 801bd24:	110f0702 	.word	0x110f0702
 801bd28:	9504      	str	r5, [sp, #16]
 801bd2a:	4620      	mov	r0, r4
 801bd2c:	bcf0      	pop	{r4, r5, r6, r7}
 801bd2e:	f7ff beef 	b.w	801bb10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801bd32:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d0d3      	beq.n	801bce0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd38:	6806      	ldr	r6, [r0, #0]
 801bd3a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bd3e:	68b5      	ldr	r5, [r6, #8]
 801bd40:	e7e2      	b.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801bd42:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd44:	e7f6      	b.n	801bd34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801bd46:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd48:	e7f4      	b.n	801bd34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801bd4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801bd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd50:	4605      	mov	r5, r0
 801bd52:	b08f      	sub	sp, #60	@ 0x3c
 801bd54:	460c      	mov	r4, r1
 801bd56:	461f      	mov	r7, r3
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d052      	beq.n	801be02 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bd5c:	6808      	ldr	r0, [r1, #0]
 801bd5e:	ab0a      	add	r3, sp, #40	@ 0x28
 801bd60:	6849      	ldr	r1, [r1, #4]
 801bd62:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801bf2c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801bd66:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801bf30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801bd6a:	c303      	stmia	r3!, {r0, r1}
 801bd6c:	6810      	ldr	r0, [r2, #0]
 801bd6e:	ab0c      	add	r3, sp, #48	@ 0x30
 801bd70:	6851      	ldr	r1, [r2, #4]
 801bd72:	c303      	stmia	r3!, {r0, r1}
 801bd74:	a80a      	add	r0, sp, #40	@ 0x28
 801bd76:	f7f8 fa19 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd7a:	4621      	mov	r1, r4
 801bd7c:	a80c      	add	r0, sp, #48	@ 0x30
 801bd7e:	f7f8 fa59 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd82:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801bd86:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801bd8a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bd8e:	f8d8 0000 	ldr.w	r0, [r8]
 801bd92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bd96:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801bd9a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801bd9e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801bda2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801bda6:	440a      	add	r2, r1
 801bda8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bdac:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801bdb0:	4413      	add	r3, r2
 801bdb2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bdb6:	6803      	ldr	r3, [r0, #0]
 801bdb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bdba:	4798      	blx	r3
 801bdbc:	2fff      	cmp	r7, #255	@ 0xff
 801bdbe:	d023      	beq.n	801be08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801bdc0:	f010 0f04 	tst.w	r0, #4
 801bdc4:	f8d8 0000 	ldr.w	r0, [r8]
 801bdc8:	d021      	beq.n	801be0e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801bdca:	2100      	movs	r1, #0
 801bdcc:	f04f 0e01 	mov.w	lr, #1
 801bdd0:	f8d0 c000 	ldr.w	ip, [r0]
 801bdd4:	b2a4      	uxth	r4, r4
 801bdd6:	9106      	str	r1, [sp, #24]
 801bdd8:	b2b6      	uxth	r6, r6
 801bdda:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801bdde:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801bde2:	e9cd e107 	strd	lr, r1, [sp, #28]
 801bde6:	f8b9 e000 	ldrh.w	lr, [r9]
 801bdea:	9703      	str	r7, [sp, #12]
 801bdec:	9401      	str	r4, [sp, #4]
 801bdee:	9600      	str	r6, [sp, #0]
 801bdf0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bdf4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bdf8:	9102      	str	r1, [sp, #8]
 801bdfa:	4629      	mov	r1, r5
 801bdfc:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801be00:	47a0      	blx	r4
 801be02:	b00f      	add	sp, #60	@ 0x3c
 801be04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be08:	f010 0f01 	tst.w	r0, #1
 801be0c:	e7da      	b.n	801bdc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801be0e:	6803      	ldr	r3, [r0, #0]
 801be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be12:	4798      	blx	r3
 801be14:	f8b9 1000 	ldrh.w	r1, [r9]
 801be18:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801be1c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801be20:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801be24:	434c      	muls	r4, r1
 801be26:	2fff      	cmp	r7, #255	@ 0xff
 801be28:	fb01 2303 	mla	r3, r1, r3, r2
 801be2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be30:	eba1 0106 	sub.w	r1, r1, r6
 801be34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801be3c:	4418      	add	r0, r3
 801be3e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801be42:	eba3 0606 	sub.w	r6, r3, r6
 801be46:	4404      	add	r4, r0
 801be48:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801be4c:	d04a      	beq.n	801bee4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801be4e:	43fa      	mvns	r2, r7
 801be50:	b2bb      	uxth	r3, r7
 801be52:	b2d7      	uxtb	r7, r2
 801be54:	42a0      	cmp	r0, r4
 801be56:	d263      	bcs.n	801bf20 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801be58:	eb00 0e0c 	add.w	lr, r0, ip
 801be5c:	4586      	cmp	lr, r0
 801be5e:	f100 0803 	add.w	r8, r0, #3
 801be62:	d93a      	bls.n	801beda <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801be64:	f835 2b02 	ldrh.w	r2, [r5], #2
 801be68:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801be6c:	00d0      	lsls	r0, r2, #3
 801be6e:	fb19 f907 	smulbb	r9, r9, r7
 801be72:	b2c0      	uxtb	r0, r0
 801be74:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801be78:	fb00 9003 	mla	r0, r0, r3, r9
 801be7c:	b280      	uxth	r0, r0
 801be7e:	f100 0901 	add.w	r9, r0, #1
 801be82:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801be86:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801be8a:	fb19 f907 	smulbb	r9, r9, r7
 801be8e:	1200      	asrs	r0, r0, #8
 801be90:	f808 0c03 	strb.w	r0, [r8, #-3]
 801be94:	10d0      	asrs	r0, r2, #3
 801be96:	1212      	asrs	r2, r2, #8
 801be98:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801be9c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801bea0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801bea4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bea8:	fb00 9003 	mla	r0, r0, r3, r9
 801beac:	b280      	uxth	r0, r0
 801beae:	f100 0901 	add.w	r9, r0, #1
 801beb2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801beb6:	1200      	asrs	r0, r0, #8
 801beb8:	f808 0c02 	strb.w	r0, [r8, #-2]
 801bebc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801bec0:	fb10 f007 	smulbb	r0, r0, r7
 801bec4:	fb02 0203 	mla	r2, r2, r3, r0
 801bec8:	b292      	uxth	r2, r2
 801beca:	1c50      	adds	r0, r2, #1
 801becc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bed0:	4640      	mov	r0, r8
 801bed2:	1212      	asrs	r2, r2, #8
 801bed4:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bed8:	e7c0      	b.n	801be5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801beda:	4408      	add	r0, r1
 801bedc:	4435      	add	r5, r6
 801bede:	e7b9      	b.n	801be54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801bee0:	4408      	add	r0, r1
 801bee2:	4435      	add	r5, r6
 801bee4:	42a0      	cmp	r0, r4
 801bee6:	d21b      	bcs.n	801bf20 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bee8:	eb00 070c 	add.w	r7, r0, ip
 801beec:	42b8      	cmp	r0, r7
 801beee:	d2f7      	bcs.n	801bee0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801bef0:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bef4:	3003      	adds	r0, #3
 801bef6:	00da      	lsls	r2, r3, #3
 801bef8:	b2d2      	uxtb	r2, r2
 801befa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801befe:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bf02:	10da      	asrs	r2, r3, #3
 801bf04:	121b      	asrs	r3, r3, #8
 801bf06:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801bf0a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801bf0e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801bf12:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bf16:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bf1a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bf1e:	e7e5      	b.n	801beec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801bf20:	4b02      	ldr	r3, [pc, #8]	@ (801bf2c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bf22:	6818      	ldr	r0, [r3, #0]
 801bf24:	6803      	ldr	r3, [r0, #0]
 801bf26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bf28:	4798      	blx	r3
 801bf2a:	e76a      	b.n	801be02 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bf2c:	240253b4 	.word	0x240253b4
 801bf30:	240253ae 	.word	0x240253ae

0801bf34 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf38:	b08a      	sub	sp, #40	@ 0x28
 801bf3a:	460d      	mov	r5, r1
 801bf3c:	4604      	mov	r4, r0
 801bf3e:	461e      	mov	r6, r3
 801bf40:	6808      	ldr	r0, [r1, #0]
 801bf42:	ab06      	add	r3, sp, #24
 801bf44:	6849      	ldr	r1, [r1, #4]
 801bf46:	4f5d      	ldr	r7, [pc, #372]	@ (801c0bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bf48:	c303      	stmia	r3!, {r0, r1}
 801bf4a:	6810      	ldr	r0, [r2, #0]
 801bf4c:	ab08      	add	r3, sp, #32
 801bf4e:	6851      	ldr	r1, [r2, #4]
 801bf50:	c303      	stmia	r3!, {r0, r1}
 801bf52:	a806      	add	r0, sp, #24
 801bf54:	f7f8 f92a 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf58:	4629      	mov	r1, r5
 801bf5a:	a808      	add	r0, sp, #32
 801bf5c:	f7f8 f96a 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf60:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bf64:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bf68:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf6c:	6838      	ldr	r0, [r7, #0]
 801bf6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bf72:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801bf76:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801bf7a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bf7e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bf82:	440a      	add	r2, r1
 801bf84:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bf88:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bf8c:	4413      	add	r3, r2
 801bf8e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bf92:	6803      	ldr	r3, [r0, #0]
 801bf94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf96:	4798      	blx	r3
 801bf98:	2eff      	cmp	r6, #255	@ 0xff
 801bf9a:	d119      	bne.n	801bfd0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bf9c:	f010 0f20 	tst.w	r0, #32
 801bfa0:	6838      	ldr	r0, [r7, #0]
 801bfa2:	d018      	beq.n	801bfd6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801bfa4:	b2ad      	uxth	r5, r5
 801bfa6:	2700      	movs	r7, #0
 801bfa8:	6801      	ldr	r1, [r0, #0]
 801bfaa:	9501      	str	r5, [sp, #4]
 801bfac:	fa1f f588 	uxth.w	r5, r8
 801bfb0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801bfb4:	9500      	str	r5, [sp, #0]
 801bfb6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bfba:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801bfbe:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bfc2:	9602      	str	r6, [sp, #8]
 801bfc4:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801bfc6:	4621      	mov	r1, r4
 801bfc8:	47a8      	blx	r5
 801bfca:	b00a      	add	sp, #40	@ 0x28
 801bfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfd0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801bfd4:	e7e4      	b.n	801bfa0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bfd6:	6803      	ldr	r3, [r0, #0]
 801bfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bfda:	4798      	blx	r3
 801bfdc:	4b38      	ldr	r3, [pc, #224]	@ (801c0c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801bfde:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bfe2:	f8b3 c000 	ldrh.w	ip, [r3]
 801bfe6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bfea:	fb0c f505 	mul.w	r5, ip, r5
 801bfee:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801bff2:	fb0c 2303 	mla	r3, ip, r3, r2
 801bff6:	ebac 0c08 	sub.w	ip, ip, r8
 801bffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bffe:	ebae 0e08 	sub.w	lr, lr, r8
 801c002:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c006:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c00a:	4418      	add	r0, r3
 801c00c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801c010:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c014:	4405      	add	r5, r0
 801c016:	42a8      	cmp	r0, r5
 801c018:	d24a      	bcs.n	801c0b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c01a:	eb00 0803 	add.w	r8, r0, r3
 801c01e:	4540      	cmp	r0, r8
 801c020:	d243      	bcs.n	801c0aa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c022:	78e2      	ldrb	r2, [r4, #3]
 801c024:	b15a      	cbz	r2, 801c03e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c026:	2aff      	cmp	r2, #255	@ 0xff
 801c028:	f894 9000 	ldrb.w	r9, [r4]
 801c02c:	d10a      	bne.n	801c044 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c02e:	2eff      	cmp	r6, #255	@ 0xff
 801c030:	d108      	bne.n	801c044 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c032:	f880 9000 	strb.w	r9, [r0]
 801c036:	7862      	ldrb	r2, [r4, #1]
 801c038:	7042      	strb	r2, [r0, #1]
 801c03a:	78a2      	ldrb	r2, [r4, #2]
 801c03c:	7082      	strb	r2, [r0, #2]
 801c03e:	3003      	adds	r0, #3
 801c040:	3404      	adds	r4, #4
 801c042:	e7ec      	b.n	801c01e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c044:	4372      	muls	r2, r6
 801c046:	1c51      	adds	r1, r2, #1
 801c048:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c04c:	1209      	asrs	r1, r1, #8
 801c04e:	fa1f fa81 	uxth.w	sl, r1
 801c052:	43c9      	mvns	r1, r1
 801c054:	fb19 f90a 	smulbb	r9, r9, sl
 801c058:	b2ca      	uxtb	r2, r1
 801c05a:	7801      	ldrb	r1, [r0, #0]
 801c05c:	fb01 9902 	mla	r9, r1, r2, r9
 801c060:	fa1f f989 	uxth.w	r9, r9
 801c064:	f109 0101 	add.w	r1, r9, #1
 801c068:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c06c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c070:	f880 9000 	strb.w	r9, [r0]
 801c074:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c078:	7861      	ldrb	r1, [r4, #1]
 801c07a:	fb19 f902 	smulbb	r9, r9, r2
 801c07e:	fb01 910a 	mla	r1, r1, sl, r9
 801c082:	b289      	uxth	r1, r1
 801c084:	f101 0901 	add.w	r9, r1, #1
 801c088:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c08c:	1209      	asrs	r1, r1, #8
 801c08e:	7041      	strb	r1, [r0, #1]
 801c090:	7881      	ldrb	r1, [r0, #2]
 801c092:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c096:	fb11 f202 	smulbb	r2, r1, r2
 801c09a:	fb09 220a 	mla	r2, r9, sl, r2
 801c09e:	b292      	uxth	r2, r2
 801c0a0:	1c51      	adds	r1, r2, #1
 801c0a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c0a6:	1212      	asrs	r2, r2, #8
 801c0a8:	e7c8      	b.n	801c03c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c0aa:	4460      	add	r0, ip
 801c0ac:	4474      	add	r4, lr
 801c0ae:	e7b2      	b.n	801c016 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c0b0:	6838      	ldr	r0, [r7, #0]
 801c0b2:	6803      	ldr	r3, [r0, #0]
 801c0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c0b6:	4798      	blx	r3
 801c0b8:	e787      	b.n	801bfca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c0ba:	bf00      	nop
 801c0bc:	240253b4 	.word	0x240253b4
 801c0c0:	240253ae 	.word	0x240253ae

0801c0c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0c8:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801c0cc:	4607      	mov	r7, r0
 801c0ce:	460c      	mov	r4, r1
 801c0d0:	4692      	mov	sl, r2
 801c0d2:	4699      	mov	r9, r3
 801c0d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c0d6:	b335      	cbz	r5, 801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c0d8:	4608      	mov	r0, r1
 801c0da:	f7fb fd93 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c0de:	4680      	mov	r8, r0
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	f7fb fdc3 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c0e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c0ea:	4620      	mov	r0, r4
 801c0ec:	f8ad a008 	strh.w	sl, [sp, #8]
 801c0f0:	f8ad 900a 	strh.w	r9, [sp, #10]
 801c0f4:	f8ad 800c 	strh.w	r8, [sp, #12]
 801c0f8:	f7fb fefa 	bl	8017ef0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c0fc:	2810      	cmp	r0, #16
 801c0fe:	d812      	bhi.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c100:	e8df f000 	tbb	[pc, r0]
 801c104:	11092d24 	.word	0x11092d24
 801c108:	11111111 	.word	0x11111111
 801c10c:	14111111 	.word	0x14111111
 801c110:	4c111111 	.word	0x4c111111
 801c114:	3c          	.byte	0x3c
 801c115:	00          	.byte	0x00
 801c116:	4620      	mov	r0, r4
 801c118:	f7fb fe66 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c11c:	462b      	mov	r3, r5
 801c11e:	4632      	mov	r2, r6
 801c120:	a902      	add	r1, sp, #8
 801c122:	f7ff ff07 	bl	801bf34 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c126:	b004      	add	sp, #16
 801c128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c12c:	4620      	mov	r0, r4
 801c12e:	f7fb fe5b 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c132:	4680      	mov	r8, r0
 801c134:	4620      	mov	r0, r4
 801c136:	f7fb fe87 	bl	8017e48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c13a:	ab02      	add	r3, sp, #8
 801c13c:	4602      	mov	r2, r0
 801c13e:	4641      	mov	r1, r8
 801c140:	4638      	mov	r0, r7
 801c142:	e9cd 6500 	strd	r6, r5, [sp]
 801c146:	f7ff fdbf 	bl	801bcc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c14a:	e7ec      	b.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c14c:	4620      	mov	r0, r4
 801c14e:	f7fb fe4b 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c152:	462b      	mov	r3, r5
 801c154:	4632      	mov	r2, r6
 801c156:	a902      	add	r1, sp, #8
 801c158:	f7ff fdf8 	bl	801bd4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c15c:	e7e3      	b.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	4620      	mov	r0, r4
 801c162:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c166:	f7fb fe3f 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c16a:	2300      	movs	r3, #0
 801c16c:	4601      	mov	r1, r0
 801c16e:	aa02      	add	r2, sp, #8
 801c170:	4638      	mov	r0, r7
 801c172:	e9cd 5300 	strd	r5, r3, [sp]
 801c176:	4633      	mov	r3, r6
 801c178:	47c0      	blx	r8
 801c17a:	e7d4      	b.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c17c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c17e:	2f00      	cmp	r7, #0
 801c180:	d0d1      	beq.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c188:	4620      	mov	r0, r4
 801c18a:	f7fb fe2d 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c18e:	9500      	str	r5, [sp, #0]
 801c190:	4601      	mov	r1, r0
 801c192:	4633      	mov	r3, r6
 801c194:	aa02      	add	r2, sp, #8
 801c196:	4638      	mov	r0, r7
 801c198:	47c0      	blx	r8
 801c19a:	e7c4      	b.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c19c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c19e:	2f00      	cmp	r7, #0
 801c1a0:	d0c1      	beq.n	801c126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c1a8:	e7ee      	b.n	801c188 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801c1aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c1aa:	b4f0      	push	{r4, r5, r6, r7}
 801c1ac:	4616      	mov	r6, r2
 801c1ae:	461c      	mov	r4, r3
 801c1b0:	460d      	mov	r5, r1
 801c1b2:	9a04      	ldr	r2, [sp, #16]
 801c1b4:	2e01      	cmp	r6, #1
 801c1b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c1ba:	d00e      	beq.n	801c1da <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c1bc:	d303      	bcc.n	801c1c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c1be:	2e02      	cmp	r6, #2
 801c1c0:	d006      	beq.n	801c1d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c1c2:	bcf0      	pop	{r4, r5, r6, r7}
 801c1c4:	4770      	bx	lr
 801c1c6:	4621      	mov	r1, r4
 801c1c8:	4628      	mov	r0, r5
 801c1ca:	bcf0      	pop	{r4, r5, r6, r7}
 801c1cc:	f7ff bdbe 	b.w	801bd4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c1d0:	4621      	mov	r1, r4
 801c1d2:	4628      	mov	r0, r5
 801c1d4:	bcf0      	pop	{r4, r5, r6, r7}
 801c1d6:	f7ff bead 	b.w	801bf34 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c1da:	6805      	ldr	r5, [r0, #0]
 801c1dc:	2600      	movs	r6, #0
 801c1de:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c1e2:	68ed      	ldr	r5, [r5, #12]
 801c1e4:	4613      	mov	r3, r2
 801c1e6:	4622      	mov	r2, r4
 801c1e8:	46ac      	mov	ip, r5
 801c1ea:	bcf0      	pop	{r4, r5, r6, r7}
 801c1ec:	4760      	bx	ip
	...

0801c1f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c1f0:	b160      	cbz	r0, 801c20c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c1f2:	2903      	cmp	r1, #3
 801c1f4:	d818      	bhi.n	801c228 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c1f6:	e8df f001 	tbb	[pc, r1]
 801c1fa:	1902      	.short	0x1902
 801c1fc:	1b06      	.short	0x1b06
 801c1fe:	4b0e      	ldr	r3, [pc, #56]	@ (801c238 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c200:	8818      	ldrh	r0, [r3, #0]
 801c202:	4240      	negs	r0, r0
 801c204:	4770      	bx	lr
 801c206:	4b0c      	ldr	r3, [pc, #48]	@ (801c238 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c208:	8818      	ldrh	r0, [r3, #0]
 801c20a:	4770      	bx	lr
 801c20c:	2903      	cmp	r1, #3
 801c20e:	d80b      	bhi.n	801c228 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c210:	a301      	add	r3, pc, #4	@ (adr r3, 801c218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c212:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c216:	bf00      	nop
 801c218:	0801c22d 	.word	0x0801c22d
 801c21c:	0801c207 	.word	0x0801c207
 801c220:	0801c231 	.word	0x0801c231
 801c224:	0801c1ff 	.word	0x0801c1ff
 801c228:	2000      	movs	r0, #0
 801c22a:	4770      	bx	lr
 801c22c:	2001      	movs	r0, #1
 801c22e:	4770      	bx	lr
 801c230:	f04f 30ff 	mov.w	r0, #4294967295
 801c234:	4770      	bx	lr
 801c236:	bf00      	nop
 801c238:	240253ae 	.word	0x240253ae

0801c23c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c23c:	b160      	cbz	r0, 801c258 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c23e:	2903      	cmp	r1, #3
 801c240:	d818      	bhi.n	801c274 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c242:	e8df f001 	tbb	[pc, r1]
 801c246:	0219      	.short	0x0219
 801c248:	051b      	.short	0x051b
 801c24a:	4b0e      	ldr	r3, [pc, #56]	@ (801c284 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c24c:	8818      	ldrh	r0, [r3, #0]
 801c24e:	4770      	bx	lr
 801c250:	4b0c      	ldr	r3, [pc, #48]	@ (801c284 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c252:	8818      	ldrh	r0, [r3, #0]
 801c254:	4240      	negs	r0, r0
 801c256:	4770      	bx	lr
 801c258:	2903      	cmp	r1, #3
 801c25a:	d80b      	bhi.n	801c274 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c25c:	a301      	add	r3, pc, #4	@ (adr r3, 801c264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801c25e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c262:	bf00      	nop
 801c264:	0801c24b 	.word	0x0801c24b
 801c268:	0801c27d 	.word	0x0801c27d
 801c26c:	0801c251 	.word	0x0801c251
 801c270:	0801c279 	.word	0x0801c279
 801c274:	2000      	movs	r0, #0
 801c276:	4770      	bx	lr
 801c278:	2001      	movs	r0, #1
 801c27a:	4770      	bx	lr
 801c27c:	f04f 30ff 	mov.w	r0, #4294967295
 801c280:	4770      	bx	lr
 801c282:	bf00      	nop
 801c284:	240253ae 	.word	0x240253ae

0801c288 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c28c:	b097      	sub	sp, #92	@ 0x5c
 801c28e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c290:	a912      	add	r1, sp, #72	@ 0x48
 801c292:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801c296:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801c29a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801c29e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801c2a2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801c2a6:	e881 000c 	stmia.w	r1, {r2, r3}
 801c2aa:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2b0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801c2b4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801c2b8:	9311      	str	r3, [sp, #68]	@ 0x44
 801c2ba:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801c2be:	798d      	ldrb	r5, [r1, #6]
 801c2c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2c2:	7b4b      	ldrb	r3, [r1, #13]
 801c2c4:	0158      	lsls	r0, r3, #5
 801c2c6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c2ca:	4328      	orrs	r0, r5
 801c2cc:	9009      	str	r0, [sp, #36]	@ 0x24
 801c2ce:	f000 817c 	beq.w	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c2d2:	011b      	lsls	r3, r3, #4
 801c2d4:	79c8      	ldrb	r0, [r1, #7]
 801c2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c2da:	4303      	orrs	r3, r0
 801c2dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801c2de:	f000 8174 	beq.w	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c2e2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	2f00      	cmp	r7, #0
 801c2ea:	f000 8116 	beq.w	801c51a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c2ee:	1aff      	subs	r7, r7, r3
 801c2f0:	b2bf      	uxth	r7, r7
 801c2f2:	043b      	lsls	r3, r7, #16
 801c2f4:	d502      	bpl.n	801c2fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c2f6:	1bf6      	subs	r6, r6, r7
 801c2f8:	2700      	movs	r7, #0
 801c2fa:	b236      	sxth	r6, r6
 801c2fc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c300:	a812      	add	r0, sp, #72	@ 0x48
 801c302:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c306:	428e      	cmp	r6, r1
 801c308:	b28b      	uxth	r3, r1
 801c30a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801c30e:	bfbf      	itttt	lt
 801c310:	18ff      	addlt	r7, r7, r3
 801c312:	1bbe      	sublt	r6, r7, r6
 801c314:	b2b7      	uxthlt	r7, r6
 801c316:	460e      	movlt	r6, r1
 801c318:	8891      	ldrh	r1, [r2, #4]
 801c31a:	440b      	add	r3, r1
 801c31c:	4631      	mov	r1, r6
 801c31e:	b21b      	sxth	r3, r3
 801c320:	9310      	str	r3, [sp, #64]	@ 0x40
 801c322:	88d3      	ldrh	r3, [r2, #6]
 801c324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c326:	449a      	add	sl, r3
 801c328:	fa0f f38a 	sxth.w	r3, sl
 801c32c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c330:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c332:	4bb5      	ldr	r3, [pc, #724]	@ (801c608 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c334:	f893 b000 	ldrb.w	fp, [r3]
 801c338:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c33c:	f1dc 0300 	rsbs	r3, ip, #0
 801c340:	eb43 030c 	adc.w	r3, r3, ip
 801c344:	930d      	str	r3, [sp, #52]	@ 0x34
 801c346:	464b      	mov	r3, r9
 801c348:	f7f7 fda4 	bl	8013e94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c34c:	4631      	mov	r1, r6
 801c34e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801c352:	464b      	mov	r3, r9
 801c354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c356:	a812      	add	r0, sp, #72	@ 0x48
 801c358:	f7f7 fdb9 	bl	8013ece <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c35c:	a916      	add	r1, sp, #88	@ 0x58
 801c35e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c362:	a815      	add	r0, sp, #84	@ 0x54
 801c364:	f7f7 fee0 	bl	8014128 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c368:	f1b9 0f00 	cmp.w	r9, #0
 801c36c:	f040 80d8 	bne.w	801c520 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c370:	f1bb 0f01 	cmp.w	fp, #1
 801c374:	f040 80dc 	bne.w	801c530 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c37a:	b153      	cbz	r3, 801c392 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c37c:	2508      	movs	r5, #8
 801c37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c380:	fb95 f3f8 	sdiv	r3, r5, r8
 801c384:	1e5d      	subs	r5, r3, #1
 801c386:	4415      	add	r5, r2
 801c388:	fb95 f5f3 	sdiv	r5, r5, r3
 801c38c:	fb15 f503 	smulbb	r5, r5, r3
 801c390:	b2ad      	uxth	r5, r5
 801c392:	b907      	cbnz	r7, 801c396 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c394:	b16c      	cbz	r4, 801c3b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c396:	fb04 7305 	mla	r3, r4, r5, r7
 801c39a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c39c:	ebaa 0a04 	sub.w	sl, sl, r4
 801c3a0:	fb08 f303 	mul.w	r3, r8, r3
 801c3a4:	fa1f fa8a 	uxth.w	sl, sl
 801c3a8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c3ac:	f003 0407 	and.w	r4, r3, #7
 801c3b0:	9226      	str	r2, [sp, #152]	@ 0x98
 801c3b2:	4649      	mov	r1, r9
 801c3b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3b6:	f7ff ff1b 	bl	801c1f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c3ba:	4683      	mov	fp, r0
 801c3bc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3be:	f7ff ff3d 	bl	801c23c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c3c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3c6:	4681      	mov	r9, r0
 801c3c8:	1a9b      	subs	r3, r3, r2
 801c3ca:	459a      	cmp	sl, r3
 801c3cc:	bfa8      	it	ge
 801c3ce:	469a      	movge	sl, r3
 801c3d0:	f1ba 0f00 	cmp.w	sl, #0
 801c3d4:	f340 80f9 	ble.w	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c3d8:	1bf6      	subs	r6, r6, r7
 801c3da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c3dc:	1b9e      	subs	r6, r3, r6
 801c3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3e0:	429e      	cmp	r6, r3
 801c3e2:	bfd4      	ite	le
 801c3e4:	ebc7 0706 	rsble	r7, r7, r6
 801c3e8:	ebc7 0703 	rsbgt	r7, r7, r3
 801c3ec:	2f00      	cmp	r7, #0
 801c3ee:	f340 80ec 	ble.w	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c3f2:	1bed      	subs	r5, r5, r7
 801c3f4:	fb08 f305 	mul.w	r3, r8, r5
 801c3f8:	930d      	str	r3, [sp, #52]	@ 0x34
 801c3fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c3fc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c400:	930e      	str	r3, [sp, #56]	@ 0x38
 801c402:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c404:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c408:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c40a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c40c:	b2db      	uxtb	r3, r3
 801c40e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c412:	2b00      	cmp	r3, #0
 801c414:	f040 80de 	bne.w	801c5d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c418:	4b7c      	ldr	r3, [pc, #496]	@ (801c60c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c41a:	6818      	ldr	r0, [r3, #0]
 801c41c:	6803      	ldr	r3, [r0, #0]
 801c41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c420:	4798      	blx	r3
 801c422:	2301      	movs	r3, #1
 801c424:	4a7a      	ldr	r2, [pc, #488]	@ (801c610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c426:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c42a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c42e:	fa03 f308 	lsl.w	r3, r3, r8
 801c432:	8811      	ldrh	r1, [r2, #0]
 801c434:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801c438:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c43c:	3b01      	subs	r3, #1
 801c43e:	fb06 bb07 	mla	fp, r6, r7, fp
 801c442:	b2db      	uxtb	r3, r3
 801c444:	930a      	str	r3, [sp, #40]	@ 0x28
 801c446:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801c44a:	fb01 2303 	mla	r3, r1, r3, r2
 801c44e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c452:	18c3      	adds	r3, r0, r3
 801c454:	9309      	str	r3, [sp, #36]	@ 0x24
 801c456:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c458:	781a      	ldrb	r2, [r3, #0]
 801c45a:	4122      	asrs	r2, r4
 801c45c:	b2d2      	uxtb	r2, r2
 801c45e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c462:	f0c0 80d7 	bcc.w	801c614 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c466:	46be      	mov	lr, r7
 801c468:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c46a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c46e:	f0c0 80ba 	bcc.w	801c5e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c474:	4013      	ands	r3, r2
 801c476:	d041      	beq.n	801c4fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c478:	20ff      	movs	r0, #255	@ 0xff
 801c47a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c47c:	fb90 f5f5 	sdiv	r5, r0, r5
 801c480:	436b      	muls	r3, r5
 801c482:	2bfe      	cmp	r3, #254	@ 0xfe
 801c484:	dd03      	ble.n	801c48e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c486:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c488:	4285      	cmp	r5, r0
 801c48a:	f000 80a5 	beq.w	801c5d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c48e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c490:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c492:	fb15 f303 	smulbb	r3, r5, r3
 801c496:	b29b      	uxth	r3, r3
 801c498:	1c5d      	adds	r5, r3, #1
 801c49a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c49e:	780d      	ldrb	r5, [r1, #0]
 801c4a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c4a4:	fa1f fc83 	uxth.w	ip, r3
 801c4a8:	43db      	mvns	r3, r3
 801c4aa:	fb10 f90c 	smulbb	r9, r0, ip
 801c4ae:	b2db      	uxtb	r3, r3
 801c4b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c4b2:	fb05 9503 	mla	r5, r5, r3, r9
 801c4b6:	b2ad      	uxth	r5, r5
 801c4b8:	f105 0901 	add.w	r9, r5, #1
 801c4bc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c4c0:	fb10 f90c 	smulbb	r9, r0, ip
 801c4c4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c4c6:	122d      	asrs	r5, r5, #8
 801c4c8:	fb10 fc0c 	smulbb	ip, r0, ip
 801c4cc:	700d      	strb	r5, [r1, #0]
 801c4ce:	784d      	ldrb	r5, [r1, #1]
 801c4d0:	fb05 9503 	mla	r5, r5, r3, r9
 801c4d4:	b2ad      	uxth	r5, r5
 801c4d6:	f105 0901 	add.w	r9, r5, #1
 801c4da:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c4de:	122d      	asrs	r5, r5, #8
 801c4e0:	704d      	strb	r5, [r1, #1]
 801c4e2:	788d      	ldrb	r5, [r1, #2]
 801c4e4:	fb05 cc03 	mla	ip, r5, r3, ip
 801c4e8:	fa1f fc8c 	uxth.w	ip, ip
 801c4ec:	f10c 0301 	add.w	r3, ip, #1
 801c4f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c4f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c4f8:	f881 c002 	strb.w	ip, [r1, #2]
 801c4fc:	4444      	add	r4, r8
 801c4fe:	4431      	add	r1, r6
 801c500:	b2a4      	uxth	r4, r4
 801c502:	2c07      	cmp	r4, #7
 801c504:	bf89      	itett	hi
 801c506:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801c508:	fa42 f208 	asrls.w	r2, r2, r8
 801c50c:	2400      	movhi	r4, #0
 801c50e:	785a      	ldrbhi	r2, [r3, #1]
 801c510:	bf8a      	itet	hi
 801c512:	3301      	addhi	r3, #1
 801c514:	b2d2      	uxtbls	r2, r2
 801c516:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801c518:	e7a7      	b.n	801c46a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c51a:	441e      	add	r6, r3
 801c51c:	b236      	sxth	r6, r6
 801c51e:	e6ed      	b.n	801c2fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c520:	f1b9 0f01 	cmp.w	r9, #1
 801c524:	f47f af28 	bne.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c528:	f1bb 0f01 	cmp.w	fp, #1
 801c52c:	f47f af24 	bne.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c530:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801c60c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c534:	f8db 0000 	ldr.w	r0, [fp]
 801c538:	6803      	ldr	r3, [r0, #0]
 801c53a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c53c:	4798      	blx	r3
 801c53e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801c542:	465a      	mov	r2, fp
 801c544:	d006      	beq.n	801c554 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c546:	f1b8 0f04 	cmp.w	r8, #4
 801c54a:	d141      	bne.n	801c5d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c54c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c54e:	3300      	adds	r3, #0
 801c550:	bf18      	it	ne
 801c552:	2301      	movne	r3, #1
 801c554:	0580      	lsls	r0, r0, #22
 801c556:	d566      	bpl.n	801c626 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c558:	f1b8 0f08 	cmp.w	r8, #8
 801c55c:	d163      	bne.n	801c626 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c55e:	2b00      	cmp	r3, #0
 801c560:	bf0c      	ite	eq
 801c562:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801c566:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801c56a:	2f00      	cmp	r7, #0
 801c56c:	f47f af04 	bne.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c570:	2c00      	cmp	r4, #0
 801c572:	f47f af01 	bne.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c578:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c57a:	18f3      	adds	r3, r6, r3
 801c57c:	4283      	cmp	r3, r0
 801c57e:	f73f aefb 	bgt.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c582:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c586:	4403      	add	r3, r0
 801c588:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c58a:	4283      	cmp	r3, r0
 801c58c:	f73f aef4 	bgt.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c590:	f1b8 0f08 	cmp.w	r8, #8
 801c594:	6810      	ldr	r0, [r2, #0]
 801c596:	f04f 0600 	mov.w	r6, #0
 801c59a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801c59e:	bf18      	it	ne
 801c5a0:	3501      	addne	r5, #1
 801c5a2:	6804      	ldr	r4, [r0, #0]
 801c5a4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801c5a8:	bf18      	it	ne
 801c5aa:	f025 0501 	bicne.w	r5, r5, #1
 801c5ae:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c5b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c5b4:	bf18      	it	ne
 801c5b6:	b2ad      	uxthne	r5, r5
 801c5b8:	9104      	str	r1, [sp, #16]
 801c5ba:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c5bc:	e9cd 5a00 	strd	r5, sl, [sp]
 801c5c0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c5c4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c5c6:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801c5c8:	47a0      	blx	r4
 801c5ca:	b017      	add	sp, #92	@ 0x5c
 801c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	e7bf      	b.n	801c554 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c5d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c5d6:	e724      	b.n	801c422 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c5d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c5da:	700b      	strb	r3, [r1, #0]
 801c5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c5de:	704b      	strb	r3, [r1, #1]
 801c5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5e2:	708b      	strb	r3, [r1, #2]
 801c5e4:	e78a      	b.n	801c4fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c5e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5e8:	b153      	cbz	r3, 801c600 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c5ea:	441c      	add	r4, r3
 801c5ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c5ee:	b2a4      	uxth	r4, r4
 801c5f0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c5f4:	f004 0407 	and.w	r4, r4, #7
 801c5f8:	781a      	ldrb	r2, [r3, #0]
 801c5fa:	9326      	str	r3, [sp, #152]	@ 0x98
 801c5fc:	4122      	asrs	r2, r4
 801c5fe:	b2d2      	uxtb	r2, r2
 801c600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c602:	445b      	add	r3, fp
 801c604:	9309      	str	r3, [sp, #36]	@ 0x24
 801c606:	e72a      	b.n	801c45e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c608:	240253ac 	.word	0x240253ac
 801c60c:	240253b4 	.word	0x240253b4
 801c610:	240253ae 	.word	0x240253ae
 801c614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c616:	2b00      	cmp	r3, #0
 801c618:	d1d7      	bne.n	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c61a:	4b06      	ldr	r3, [pc, #24]	@ (801c634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c61c:	6818      	ldr	r0, [r3, #0]
 801c61e:	6803      	ldr	r3, [r0, #0]
 801c620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c622:	4798      	blx	r3
 801c624:	e7d1      	b.n	801c5ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c626:	2b00      	cmp	r3, #0
 801c628:	f43f aea6 	beq.w	801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c62c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c630:	e79b      	b.n	801c56a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c632:	bf00      	nop
 801c634:	240253b4 	.word	0x240253b4

0801c638 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c638:	b538      	push	{r3, r4, r5, lr}
 801c63a:	4c15      	ldr	r4, [pc, #84]	@ (801c690 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c63c:	4605      	mov	r5, r0
 801c63e:	7823      	ldrb	r3, [r4, #0]
 801c640:	f3bf 8f5b 	dmb	ish
 801c644:	07da      	lsls	r2, r3, #31
 801c646:	d40b      	bmi.n	801c660 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c648:	4620      	mov	r0, r4
 801c64a:	f007 fcaa 	bl	8023fa2 <__cxa_guard_acquire>
 801c64e:	b138      	cbz	r0, 801c660 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c650:	4620      	mov	r0, r4
 801c652:	f007 fcb2 	bl	8023fba <__cxa_guard_release>
 801c656:	4a0f      	ldr	r2, [pc, #60]	@ (801c694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c658:	490f      	ldr	r1, [pc, #60]	@ (801c698 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c65a:	4810      	ldr	r0, [pc, #64]	@ (801c69c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c65c:	f007 fc9a 	bl	8023f94 <__aeabi_atexit>
 801c660:	4c0f      	ldr	r4, [pc, #60]	@ (801c6a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c662:	7823      	ldrb	r3, [r4, #0]
 801c664:	f3bf 8f5b 	dmb	ish
 801c668:	07db      	lsls	r3, r3, #31
 801c66a:	d40b      	bmi.n	801c684 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c66c:	4620      	mov	r0, r4
 801c66e:	f007 fc98 	bl	8023fa2 <__cxa_guard_acquire>
 801c672:	b138      	cbz	r0, 801c684 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c674:	4620      	mov	r0, r4
 801c676:	f007 fca0 	bl	8023fba <__cxa_guard_release>
 801c67a:	4a06      	ldr	r2, [pc, #24]	@ (801c694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c67c:	4909      	ldr	r1, [pc, #36]	@ (801c6a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c67e:	480a      	ldr	r0, [pc, #40]	@ (801c6a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c680:	f007 fc88 	bl	8023f94 <__aeabi_atexit>
 801c684:	4b05      	ldr	r3, [pc, #20]	@ (801c69c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c686:	616b      	str	r3, [r5, #20]
 801c688:	4b07      	ldr	r3, [pc, #28]	@ (801c6a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c68a:	61ab      	str	r3, [r5, #24]
 801c68c:	bd38      	pop	{r3, r4, r5, pc}
 801c68e:	bf00      	nop
 801c690:	24025498 	.word	0x24025498
 801c694:	24000000 	.word	0x24000000
 801c698:	08019929 	.word	0x08019929
 801c69c:	240000c8 	.word	0x240000c8
 801c6a0:	2402549c 	.word	0x2402549c
 801c6a4:	08019927 	.word	0x08019927
 801c6a8:	240000cc 	.word	0x240000cc

0801c6ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c6ac:	b538      	push	{r3, r4, r5, lr}
 801c6ae:	4c15      	ldr	r4, [pc, #84]	@ (801c704 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c6b0:	4605      	mov	r5, r0
 801c6b2:	7823      	ldrb	r3, [r4, #0]
 801c6b4:	f3bf 8f5b 	dmb	ish
 801c6b8:	07da      	lsls	r2, r3, #31
 801c6ba:	d40b      	bmi.n	801c6d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6bc:	4620      	mov	r0, r4
 801c6be:	f007 fc70 	bl	8023fa2 <__cxa_guard_acquire>
 801c6c2:	b138      	cbz	r0, 801c6d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6c4:	4620      	mov	r0, r4
 801c6c6:	f007 fc78 	bl	8023fba <__cxa_guard_release>
 801c6ca:	4a0f      	ldr	r2, [pc, #60]	@ (801c708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c6cc:	490f      	ldr	r1, [pc, #60]	@ (801c70c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c6ce:	4810      	ldr	r0, [pc, #64]	@ (801c710 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c6d0:	f007 fc60 	bl	8023f94 <__aeabi_atexit>
 801c6d4:	4c0f      	ldr	r4, [pc, #60]	@ (801c714 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c6d6:	7823      	ldrb	r3, [r4, #0]
 801c6d8:	f3bf 8f5b 	dmb	ish
 801c6dc:	07db      	lsls	r3, r3, #31
 801c6de:	d40b      	bmi.n	801c6f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f007 fc5e 	bl	8023fa2 <__cxa_guard_acquire>
 801c6e6:	b138      	cbz	r0, 801c6f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	f007 fc66 	bl	8023fba <__cxa_guard_release>
 801c6ee:	4a06      	ldr	r2, [pc, #24]	@ (801c708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c6f0:	4909      	ldr	r1, [pc, #36]	@ (801c718 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c6f2:	480a      	ldr	r0, [pc, #40]	@ (801c71c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c6f4:	f007 fc4e 	bl	8023f94 <__aeabi_atexit>
 801c6f8:	4b05      	ldr	r3, [pc, #20]	@ (801c710 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c6fa:	60eb      	str	r3, [r5, #12]
 801c6fc:	4b07      	ldr	r3, [pc, #28]	@ (801c71c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c6fe:	612b      	str	r3, [r5, #16]
 801c700:	bd38      	pop	{r3, r4, r5, pc}
 801c702:	bf00      	nop
 801c704:	24025478 	.word	0x24025478
 801c708:	24000000 	.word	0x24000000
 801c70c:	0801992d 	.word	0x0801992d
 801c710:	240000a8 	.word	0x240000a8
 801c714:	2402547c 	.word	0x2402547c
 801c718:	0801992b 	.word	0x0801992b
 801c71c:	240000ac 	.word	0x240000ac

0801c720 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c720:	b510      	push	{r4, lr}
 801c722:	4604      	mov	r4, r0
 801c724:	f7ff ff88 	bl	801c638 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c728:	4620      	mov	r0, r4
 801c72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c72e:	f7ff bfbd 	b.w	801c6ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c734 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c734:	b538      	push	{r3, r4, r5, lr}
 801c736:	4c15      	ldr	r4, [pc, #84]	@ (801c78c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c738:	4605      	mov	r5, r0
 801c73a:	7823      	ldrb	r3, [r4, #0]
 801c73c:	f3bf 8f5b 	dmb	ish
 801c740:	07da      	lsls	r2, r3, #31
 801c742:	d40b      	bmi.n	801c75c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c744:	4620      	mov	r0, r4
 801c746:	f007 fc2c 	bl	8023fa2 <__cxa_guard_acquire>
 801c74a:	b138      	cbz	r0, 801c75c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c74c:	4620      	mov	r0, r4
 801c74e:	f007 fc34 	bl	8023fba <__cxa_guard_release>
 801c752:	4a0f      	ldr	r2, [pc, #60]	@ (801c790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c754:	490f      	ldr	r1, [pc, #60]	@ (801c794 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c756:	4810      	ldr	r0, [pc, #64]	@ (801c798 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c758:	f007 fc1c 	bl	8023f94 <__aeabi_atexit>
 801c75c:	4c0f      	ldr	r4, [pc, #60]	@ (801c79c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c75e:	7823      	ldrb	r3, [r4, #0]
 801c760:	f3bf 8f5b 	dmb	ish
 801c764:	07db      	lsls	r3, r3, #31
 801c766:	d40b      	bmi.n	801c780 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c768:	4620      	mov	r0, r4
 801c76a:	f007 fc1a 	bl	8023fa2 <__cxa_guard_acquire>
 801c76e:	b138      	cbz	r0, 801c780 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c770:	4620      	mov	r0, r4
 801c772:	f007 fc22 	bl	8023fba <__cxa_guard_release>
 801c776:	4a06      	ldr	r2, [pc, #24]	@ (801c790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c778:	4909      	ldr	r1, [pc, #36]	@ (801c7a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c77a:	480a      	ldr	r0, [pc, #40]	@ (801c7a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c77c:	f007 fc0a 	bl	8023f94 <__aeabi_atexit>
 801c780:	4b05      	ldr	r3, [pc, #20]	@ (801c798 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c782:	626b      	str	r3, [r5, #36]	@ 0x24
 801c784:	4b07      	ldr	r3, [pc, #28]	@ (801c7a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c786:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c788:	bd38      	pop	{r3, r4, r5, pc}
 801c78a:	bf00      	nop
 801c78c:	240254a0 	.word	0x240254a0
 801c790:	24000000 	.word	0x24000000
 801c794:	08019921 	.word	0x08019921
 801c798:	240000d0 	.word	0x240000d0
 801c79c:	240254a4 	.word	0x240254a4
 801c7a0:	0801991f 	.word	0x0801991f
 801c7a4:	240000d4 	.word	0x240000d4

0801c7a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c7a8:	b538      	push	{r3, r4, r5, lr}
 801c7aa:	4c15      	ldr	r4, [pc, #84]	@ (801c800 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c7ac:	4605      	mov	r5, r0
 801c7ae:	7823      	ldrb	r3, [r4, #0]
 801c7b0:	f3bf 8f5b 	dmb	ish
 801c7b4:	07da      	lsls	r2, r3, #31
 801c7b6:	d40b      	bmi.n	801c7d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7b8:	4620      	mov	r0, r4
 801c7ba:	f007 fbf2 	bl	8023fa2 <__cxa_guard_acquire>
 801c7be:	b138      	cbz	r0, 801c7d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	f007 fbfa 	bl	8023fba <__cxa_guard_release>
 801c7c6:	4a0f      	ldr	r2, [pc, #60]	@ (801c804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c7c8:	490f      	ldr	r1, [pc, #60]	@ (801c808 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c7ca:	4810      	ldr	r0, [pc, #64]	@ (801c80c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c7cc:	f007 fbe2 	bl	8023f94 <__aeabi_atexit>
 801c7d0:	4c0f      	ldr	r4, [pc, #60]	@ (801c810 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c7d2:	7823      	ldrb	r3, [r4, #0]
 801c7d4:	f3bf 8f5b 	dmb	ish
 801c7d8:	07db      	lsls	r3, r3, #31
 801c7da:	d40b      	bmi.n	801c7f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c7dc:	4620      	mov	r0, r4
 801c7de:	f007 fbe0 	bl	8023fa2 <__cxa_guard_acquire>
 801c7e2:	b138      	cbz	r0, 801c7f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f007 fbe8 	bl	8023fba <__cxa_guard_release>
 801c7ea:	4a06      	ldr	r2, [pc, #24]	@ (801c804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c7ec:	4909      	ldr	r1, [pc, #36]	@ (801c814 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c7ee:	480a      	ldr	r0, [pc, #40]	@ (801c818 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c7f0:	f007 fbd0 	bl	8023f94 <__aeabi_atexit>
 801c7f4:	4b05      	ldr	r3, [pc, #20]	@ (801c80c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c7f6:	61eb      	str	r3, [r5, #28]
 801c7f8:	4b07      	ldr	r3, [pc, #28]	@ (801c818 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c7fa:	622b      	str	r3, [r5, #32]
 801c7fc:	bd38      	pop	{r3, r4, r5, pc}
 801c7fe:	bf00      	nop
 801c800:	24025480 	.word	0x24025480
 801c804:	24000000 	.word	0x24000000
 801c808:	08019925 	.word	0x08019925
 801c80c:	240000b0 	.word	0x240000b0
 801c810:	24025484 	.word	0x24025484
 801c814:	08019923 	.word	0x08019923
 801c818:	240000b4 	.word	0x240000b4

0801c81c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c81c:	b510      	push	{r4, lr}
 801c81e:	4604      	mov	r4, r0
 801c820:	f7ff ff88 	bl	801c734 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c824:	4620      	mov	r0, r4
 801c826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c82a:	f7ff bfbd 	b.w	801c7a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c830 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c830:	b538      	push	{r3, r4, r5, lr}
 801c832:	4c15      	ldr	r4, [pc, #84]	@ (801c888 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c834:	4605      	mov	r5, r0
 801c836:	7823      	ldrb	r3, [r4, #0]
 801c838:	f3bf 8f5b 	dmb	ish
 801c83c:	07da      	lsls	r2, r3, #31
 801c83e:	d40b      	bmi.n	801c858 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c840:	4620      	mov	r0, r4
 801c842:	f007 fbae 	bl	8023fa2 <__cxa_guard_acquire>
 801c846:	b138      	cbz	r0, 801c858 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c848:	4620      	mov	r0, r4
 801c84a:	f007 fbb6 	bl	8023fba <__cxa_guard_release>
 801c84e:	4a0f      	ldr	r2, [pc, #60]	@ (801c88c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c850:	490f      	ldr	r1, [pc, #60]	@ (801c890 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c852:	4810      	ldr	r0, [pc, #64]	@ (801c894 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c854:	f007 fb9e 	bl	8023f94 <__aeabi_atexit>
 801c858:	4c0f      	ldr	r4, [pc, #60]	@ (801c898 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c85a:	7823      	ldrb	r3, [r4, #0]
 801c85c:	f3bf 8f5b 	dmb	ish
 801c860:	07db      	lsls	r3, r3, #31
 801c862:	d40b      	bmi.n	801c87c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c864:	4620      	mov	r0, r4
 801c866:	f007 fb9c 	bl	8023fa2 <__cxa_guard_acquire>
 801c86a:	b138      	cbz	r0, 801c87c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c86c:	4620      	mov	r0, r4
 801c86e:	f007 fba4 	bl	8023fba <__cxa_guard_release>
 801c872:	4a06      	ldr	r2, [pc, #24]	@ (801c88c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c874:	4909      	ldr	r1, [pc, #36]	@ (801c89c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c876:	480a      	ldr	r0, [pc, #40]	@ (801c8a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c878:	f007 fb8c 	bl	8023f94 <__aeabi_atexit>
 801c87c:	4b05      	ldr	r3, [pc, #20]	@ (801c894 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c87e:	636b      	str	r3, [r5, #52]	@ 0x34
 801c880:	4b07      	ldr	r3, [pc, #28]	@ (801c8a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c882:	63ab      	str	r3, [r5, #56]	@ 0x38
 801c884:	bd38      	pop	{r3, r4, r5, pc}
 801c886:	bf00      	nop
 801c888:	24025488 	.word	0x24025488
 801c88c:	24000000 	.word	0x24000000
 801c890:	08019919 	.word	0x08019919
 801c894:	240000b8 	.word	0x240000b8
 801c898:	2402548c 	.word	0x2402548c
 801c89c:	08019917 	.word	0x08019917
 801c8a0:	240000bc 	.word	0x240000bc

0801c8a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c8a4:	b538      	push	{r3, r4, r5, lr}
 801c8a6:	4c15      	ldr	r4, [pc, #84]	@ (801c8fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c8a8:	4605      	mov	r5, r0
 801c8aa:	7823      	ldrb	r3, [r4, #0]
 801c8ac:	f3bf 8f5b 	dmb	ish
 801c8b0:	07da      	lsls	r2, r3, #31
 801c8b2:	d40b      	bmi.n	801c8cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8b4:	4620      	mov	r0, r4
 801c8b6:	f007 fb74 	bl	8023fa2 <__cxa_guard_acquire>
 801c8ba:	b138      	cbz	r0, 801c8cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8bc:	4620      	mov	r0, r4
 801c8be:	f007 fb7c 	bl	8023fba <__cxa_guard_release>
 801c8c2:	4a0f      	ldr	r2, [pc, #60]	@ (801c900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c8c4:	490f      	ldr	r1, [pc, #60]	@ (801c904 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c8c6:	4810      	ldr	r0, [pc, #64]	@ (801c908 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c8c8:	f007 fb64 	bl	8023f94 <__aeabi_atexit>
 801c8cc:	4c0f      	ldr	r4, [pc, #60]	@ (801c90c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c8ce:	7823      	ldrb	r3, [r4, #0]
 801c8d0:	f3bf 8f5b 	dmb	ish
 801c8d4:	07db      	lsls	r3, r3, #31
 801c8d6:	d40b      	bmi.n	801c8f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c8d8:	4620      	mov	r0, r4
 801c8da:	f007 fb62 	bl	8023fa2 <__cxa_guard_acquire>
 801c8de:	b138      	cbz	r0, 801c8f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c8e0:	4620      	mov	r0, r4
 801c8e2:	f007 fb6a 	bl	8023fba <__cxa_guard_release>
 801c8e6:	4a06      	ldr	r2, [pc, #24]	@ (801c900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c8e8:	4909      	ldr	r1, [pc, #36]	@ (801c910 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c8ea:	480a      	ldr	r0, [pc, #40]	@ (801c914 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c8ec:	f007 fb52 	bl	8023f94 <__aeabi_atexit>
 801c8f0:	4b05      	ldr	r3, [pc, #20]	@ (801c908 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c8f2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801c8f4:	4b07      	ldr	r3, [pc, #28]	@ (801c914 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c8f6:	632b      	str	r3, [r5, #48]	@ 0x30
 801c8f8:	bd38      	pop	{r3, r4, r5, pc}
 801c8fa:	bf00      	nop
 801c8fc:	24025460 	.word	0x24025460
 801c900:	24000000 	.word	0x24000000
 801c904:	0801991d 	.word	0x0801991d
 801c908:	24000090 	.word	0x24000090
 801c90c:	24025464 	.word	0x24025464
 801c910:	0801991b 	.word	0x0801991b
 801c914:	24000094 	.word	0x24000094

0801c918 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c918:	b510      	push	{r4, lr}
 801c91a:	4604      	mov	r4, r0
 801c91c:	f7ff ff88 	bl	801c830 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c920:	4620      	mov	r0, r4
 801c922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c926:	f7ff bfbd 	b.w	801c8a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c92c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c92c:	b538      	push	{r3, r4, r5, lr}
 801c92e:	4c15      	ldr	r4, [pc, #84]	@ (801c984 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c930:	4605      	mov	r5, r0
 801c932:	7823      	ldrb	r3, [r4, #0]
 801c934:	f3bf 8f5b 	dmb	ish
 801c938:	07da      	lsls	r2, r3, #31
 801c93a:	d40b      	bmi.n	801c954 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c93c:	4620      	mov	r0, r4
 801c93e:	f007 fb30 	bl	8023fa2 <__cxa_guard_acquire>
 801c942:	b138      	cbz	r0, 801c954 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c944:	4620      	mov	r0, r4
 801c946:	f007 fb38 	bl	8023fba <__cxa_guard_release>
 801c94a:	4a0f      	ldr	r2, [pc, #60]	@ (801c988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c94c:	490f      	ldr	r1, [pc, #60]	@ (801c98c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c94e:	4810      	ldr	r0, [pc, #64]	@ (801c990 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c950:	f007 fb20 	bl	8023f94 <__aeabi_atexit>
 801c954:	4c0f      	ldr	r4, [pc, #60]	@ (801c994 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c956:	7823      	ldrb	r3, [r4, #0]
 801c958:	f3bf 8f5b 	dmb	ish
 801c95c:	07db      	lsls	r3, r3, #31
 801c95e:	d40b      	bmi.n	801c978 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c960:	4620      	mov	r0, r4
 801c962:	f007 fb1e 	bl	8023fa2 <__cxa_guard_acquire>
 801c966:	b138      	cbz	r0, 801c978 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c968:	4620      	mov	r0, r4
 801c96a:	f007 fb26 	bl	8023fba <__cxa_guard_release>
 801c96e:	4a06      	ldr	r2, [pc, #24]	@ (801c988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c970:	4909      	ldr	r1, [pc, #36]	@ (801c998 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c972:	480a      	ldr	r0, [pc, #40]	@ (801c99c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c974:	f007 fb0e 	bl	8023f94 <__aeabi_atexit>
 801c978:	4b05      	ldr	r3, [pc, #20]	@ (801c990 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c97a:	646b      	str	r3, [r5, #68]	@ 0x44
 801c97c:	4b07      	ldr	r3, [pc, #28]	@ (801c99c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c97e:	64ab      	str	r3, [r5, #72]	@ 0x48
 801c980:	bd38      	pop	{r3, r4, r5, pc}
 801c982:	bf00      	nop
 801c984:	24025490 	.word	0x24025490
 801c988:	24000000 	.word	0x24000000
 801c98c:	08019911 	.word	0x08019911
 801c990:	240000c0 	.word	0x240000c0
 801c994:	24025494 	.word	0x24025494
 801c998:	0801990f 	.word	0x0801990f
 801c99c:	240000c4 	.word	0x240000c4

0801c9a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c9a0:	b538      	push	{r3, r4, r5, lr}
 801c9a2:	4c15      	ldr	r4, [pc, #84]	@ (801c9f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c9a4:	4605      	mov	r5, r0
 801c9a6:	7823      	ldrb	r3, [r4, #0]
 801c9a8:	f3bf 8f5b 	dmb	ish
 801c9ac:	07da      	lsls	r2, r3, #31
 801c9ae:	d40b      	bmi.n	801c9c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	f007 faf6 	bl	8023fa2 <__cxa_guard_acquire>
 801c9b6:	b138      	cbz	r0, 801c9c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c9b8:	4620      	mov	r0, r4
 801c9ba:	f007 fafe 	bl	8023fba <__cxa_guard_release>
 801c9be:	4a0f      	ldr	r2, [pc, #60]	@ (801c9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c9c0:	490f      	ldr	r1, [pc, #60]	@ (801ca00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c9c2:	4810      	ldr	r0, [pc, #64]	@ (801ca04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c9c4:	f007 fae6 	bl	8023f94 <__aeabi_atexit>
 801c9c8:	4c0f      	ldr	r4, [pc, #60]	@ (801ca08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c9ca:	7823      	ldrb	r3, [r4, #0]
 801c9cc:	f3bf 8f5b 	dmb	ish
 801c9d0:	07db      	lsls	r3, r3, #31
 801c9d2:	d40b      	bmi.n	801c9ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	f007 fae4 	bl	8023fa2 <__cxa_guard_acquire>
 801c9da:	b138      	cbz	r0, 801c9ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	f007 faec 	bl	8023fba <__cxa_guard_release>
 801c9e2:	4a06      	ldr	r2, [pc, #24]	@ (801c9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c9e4:	4909      	ldr	r1, [pc, #36]	@ (801ca0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c9e6:	480a      	ldr	r0, [pc, #40]	@ (801ca10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c9e8:	f007 fad4 	bl	8023f94 <__aeabi_atexit>
 801c9ec:	4b05      	ldr	r3, [pc, #20]	@ (801ca04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c9ee:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801c9f0:	4b07      	ldr	r3, [pc, #28]	@ (801ca10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c9f2:	642b      	str	r3, [r5, #64]	@ 0x40
 801c9f4:	bd38      	pop	{r3, r4, r5, pc}
 801c9f6:	bf00      	nop
 801c9f8:	24025470 	.word	0x24025470
 801c9fc:	24000000 	.word	0x24000000
 801ca00:	08019915 	.word	0x08019915
 801ca04:	240000a0 	.word	0x240000a0
 801ca08:	24025474 	.word	0x24025474
 801ca0c:	08019913 	.word	0x08019913
 801ca10:	240000a4 	.word	0x240000a4

0801ca14 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ca14:	b510      	push	{r4, lr}
 801ca16:	4604      	mov	r4, r0
 801ca18:	f7ff ff88 	bl	801c92c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ca1c:	4620      	mov	r0, r4
 801ca1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca22:	f7ff bfbd 	b.w	801c9a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ca28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ca28:	b538      	push	{r3, r4, r5, lr}
 801ca2a:	4c15      	ldr	r4, [pc, #84]	@ (801ca80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ca2c:	4605      	mov	r5, r0
 801ca2e:	7823      	ldrb	r3, [r4, #0]
 801ca30:	f3bf 8f5b 	dmb	ish
 801ca34:	07da      	lsls	r2, r3, #31
 801ca36:	d40b      	bmi.n	801ca50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca38:	4620      	mov	r0, r4
 801ca3a:	f007 fab2 	bl	8023fa2 <__cxa_guard_acquire>
 801ca3e:	b138      	cbz	r0, 801ca50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca40:	4620      	mov	r0, r4
 801ca42:	f007 faba 	bl	8023fba <__cxa_guard_release>
 801ca46:	4a0f      	ldr	r2, [pc, #60]	@ (801ca84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca48:	490f      	ldr	r1, [pc, #60]	@ (801ca88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ca4a:	4810      	ldr	r0, [pc, #64]	@ (801ca8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca4c:	f007 faa2 	bl	8023f94 <__aeabi_atexit>
 801ca50:	4c0f      	ldr	r4, [pc, #60]	@ (801ca90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ca52:	7823      	ldrb	r3, [r4, #0]
 801ca54:	f3bf 8f5b 	dmb	ish
 801ca58:	07db      	lsls	r3, r3, #31
 801ca5a:	d40b      	bmi.n	801ca74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	f007 faa0 	bl	8023fa2 <__cxa_guard_acquire>
 801ca62:	b138      	cbz	r0, 801ca74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca64:	4620      	mov	r0, r4
 801ca66:	f007 faa8 	bl	8023fba <__cxa_guard_release>
 801ca6a:	4a06      	ldr	r2, [pc, #24]	@ (801ca84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca6c:	4909      	ldr	r1, [pc, #36]	@ (801ca94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ca6e:	480a      	ldr	r0, [pc, #40]	@ (801ca98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ca70:	f007 fa90 	bl	8023f94 <__aeabi_atexit>
 801ca74:	4b05      	ldr	r3, [pc, #20]	@ (801ca8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca76:	656b      	str	r3, [r5, #84]	@ 0x54
 801ca78:	4b07      	ldr	r3, [pc, #28]	@ (801ca98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ca7a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ca7c:	bd38      	pop	{r3, r4, r5, pc}
 801ca7e:	bf00      	nop
 801ca80:	24025468 	.word	0x24025468
 801ca84:	24000000 	.word	0x24000000
 801ca88:	08019909 	.word	0x08019909
 801ca8c:	24000098 	.word	0x24000098
 801ca90:	2402546c 	.word	0x2402546c
 801ca94:	08019907 	.word	0x08019907
 801ca98:	2400009c 	.word	0x2400009c

0801ca9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ca9c:	b538      	push	{r3, r4, r5, lr}
 801ca9e:	4c15      	ldr	r4, [pc, #84]	@ (801caf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801caa0:	4605      	mov	r5, r0
 801caa2:	7823      	ldrb	r3, [r4, #0]
 801caa4:	f3bf 8f5b 	dmb	ish
 801caa8:	07da      	lsls	r2, r3, #31
 801caaa:	d40b      	bmi.n	801cac4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801caac:	4620      	mov	r0, r4
 801caae:	f007 fa78 	bl	8023fa2 <__cxa_guard_acquire>
 801cab2:	b138      	cbz	r0, 801cac4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cab4:	4620      	mov	r0, r4
 801cab6:	f007 fa80 	bl	8023fba <__cxa_guard_release>
 801caba:	4a0f      	ldr	r2, [pc, #60]	@ (801caf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cabc:	490f      	ldr	r1, [pc, #60]	@ (801cafc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801cabe:	4810      	ldr	r0, [pc, #64]	@ (801cb00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cac0:	f007 fa68 	bl	8023f94 <__aeabi_atexit>
 801cac4:	4c0f      	ldr	r4, [pc, #60]	@ (801cb04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801cac6:	7823      	ldrb	r3, [r4, #0]
 801cac8:	f3bf 8f5b 	dmb	ish
 801cacc:	07db      	lsls	r3, r3, #31
 801cace:	d40b      	bmi.n	801cae8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cad0:	4620      	mov	r0, r4
 801cad2:	f007 fa66 	bl	8023fa2 <__cxa_guard_acquire>
 801cad6:	b138      	cbz	r0, 801cae8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cad8:	4620      	mov	r0, r4
 801cada:	f007 fa6e 	bl	8023fba <__cxa_guard_release>
 801cade:	4a06      	ldr	r2, [pc, #24]	@ (801caf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cae0:	4909      	ldr	r1, [pc, #36]	@ (801cb08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801cae2:	480a      	ldr	r0, [pc, #40]	@ (801cb0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cae4:	f007 fa56 	bl	8023f94 <__aeabi_atexit>
 801cae8:	4b05      	ldr	r3, [pc, #20]	@ (801cb00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801caea:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801caec:	4b07      	ldr	r3, [pc, #28]	@ (801cb0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801caee:	652b      	str	r3, [r5, #80]	@ 0x50
 801caf0:	bd38      	pop	{r3, r4, r5, pc}
 801caf2:	bf00      	nop
 801caf4:	24025458 	.word	0x24025458
 801caf8:	24000000 	.word	0x24000000
 801cafc:	0801990d 	.word	0x0801990d
 801cb00:	24000088 	.word	0x24000088
 801cb04:	2402545c 	.word	0x2402545c
 801cb08:	0801990b 	.word	0x0801990b
 801cb0c:	2400008c 	.word	0x2400008c

0801cb10 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cb10:	b510      	push	{r4, lr}
 801cb12:	4604      	mov	r4, r0
 801cb14:	f7ff ff88 	bl	801ca28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cb18:	4620      	mov	r0, r4
 801cb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb1e:	f7ff bfbd 	b.w	801ca9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cb22 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cb22:	b510      	push	{r4, lr}
 801cb24:	4604      	mov	r4, r0
 801cb26:	f7ff fff3 	bl	801cb10 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801cb2a:	4620      	mov	r0, r4
 801cb2c:	f7ff ff72 	bl	801ca14 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801cb30:	4620      	mov	r0, r4
 801cb32:	f7ff fe73 	bl	801c81c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801cb36:	4620      	mov	r0, r4
 801cb38:	f7ff fdf2 	bl	801c720 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb42:	f7ff bee9 	b.w	801c918 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801cb48 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801cb48:	b538      	push	{r3, r4, r5, lr}
 801cb4a:	4c0b      	ldr	r4, [pc, #44]	@ (801cb78 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801cb4c:	4605      	mov	r5, r0
 801cb4e:	7823      	ldrb	r3, [r4, #0]
 801cb50:	f3bf 8f5b 	dmb	ish
 801cb54:	07db      	lsls	r3, r3, #31
 801cb56:	d40b      	bmi.n	801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f007 fa22 	bl	8023fa2 <__cxa_guard_acquire>
 801cb5e:	b138      	cbz	r0, 801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb60:	4620      	mov	r0, r4
 801cb62:	f007 fa2a 	bl	8023fba <__cxa_guard_release>
 801cb66:	4a05      	ldr	r2, [pc, #20]	@ (801cb7c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801cb68:	4905      	ldr	r1, [pc, #20]	@ (801cb80 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801cb6a:	4806      	ldr	r0, [pc, #24]	@ (801cb84 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb6c:	f007 fa12 	bl	8023f94 <__aeabi_atexit>
 801cb70:	4b04      	ldr	r3, [pc, #16]	@ (801cb84 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb72:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801cb74:	bd38      	pop	{r3, r4, r5, pc}
 801cb76:	bf00      	nop
 801cb78:	2402544c 	.word	0x2402544c
 801cb7c:	24000000 	.word	0x24000000
 801cb80:	08019905 	.word	0x08019905
 801cb84:	24000080 	.word	0x24000080

0801cb88 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801cb88:	b538      	push	{r3, r4, r5, lr}
 801cb8a:	4c0b      	ldr	r4, [pc, #44]	@ (801cbb8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801cb8c:	4605      	mov	r5, r0
 801cb8e:	7823      	ldrb	r3, [r4, #0]
 801cb90:	f3bf 8f5b 	dmb	ish
 801cb94:	07db      	lsls	r3, r3, #31
 801cb96:	d40b      	bmi.n	801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f007 fa02 	bl	8023fa2 <__cxa_guard_acquire>
 801cb9e:	b138      	cbz	r0, 801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cba0:	4620      	mov	r0, r4
 801cba2:	f007 fa0a 	bl	8023fba <__cxa_guard_release>
 801cba6:	4a05      	ldr	r2, [pc, #20]	@ (801cbbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801cba8:	4905      	ldr	r1, [pc, #20]	@ (801cbc0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801cbaa:	4806      	ldr	r0, [pc, #24]	@ (801cbc4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cbac:	f007 f9f2 	bl	8023f94 <__aeabi_atexit>
 801cbb0:	4b04      	ldr	r3, [pc, #16]	@ (801cbc4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cbb2:	662b      	str	r3, [r5, #96]	@ 0x60
 801cbb4:	bd38      	pop	{r3, r4, r5, pc}
 801cbb6:	bf00      	nop
 801cbb8:	24025450 	.word	0x24025450
 801cbbc:	24000000 	.word	0x24000000
 801cbc0:	08019903 	.word	0x08019903
 801cbc4:	24000084 	.word	0x24000084

0801cbc8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801cbc8:	b570      	push	{r4, r5, r6, lr}
 801cbca:	4d0c      	ldr	r5, [pc, #48]	@ (801cbfc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801cbcc:	4606      	mov	r6, r0
 801cbce:	4c0c      	ldr	r4, [pc, #48]	@ (801cc00 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801cbd0:	782b      	ldrb	r3, [r5, #0]
 801cbd2:	f3bf 8f5b 	dmb	ish
 801cbd6:	f013 0f01 	tst.w	r3, #1
 801cbda:	d10d      	bne.n	801cbf8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cbdc:	4628      	mov	r0, r5
 801cbde:	f007 f9e0 	bl	8023fa2 <__cxa_guard_acquire>
 801cbe2:	b148      	cbz	r0, 801cbf8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cbe4:	4b07      	ldr	r3, [pc, #28]	@ (801cc04 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801cbe6:	4628      	mov	r0, r5
 801cbe8:	6023      	str	r3, [r4, #0]
 801cbea:	f007 f9e6 	bl	8023fba <__cxa_guard_release>
 801cbee:	4a06      	ldr	r2, [pc, #24]	@ (801cc08 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801cbf0:	4620      	mov	r0, r4
 801cbf2:	4906      	ldr	r1, [pc, #24]	@ (801cc0c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801cbf4:	f007 f9ce 	bl	8023f94 <__aeabi_atexit>
 801cbf8:	6674      	str	r4, [r6, #100]	@ 0x64
 801cbfa:	bd70      	pop	{r4, r5, r6, pc}
 801cbfc:	24025454 	.word	0x24025454
 801cc00:	240255ac 	.word	0x240255ac
 801cc04:	08028b28 	.word	0x08028b28
 801cc08:	24000000 	.word	0x24000000
 801cc0c:	08019901 	.word	0x08019901

0801cc10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801cc10:	b510      	push	{r4, lr}
 801cc12:	4604      	mov	r4, r0
 801cc14:	f7ff ff98 	bl	801cb48 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801cc18:	4620      	mov	r0, r4
 801cc1a:	f7ff ffb5 	bl	801cb88 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801cc1e:	4620      	mov	r0, r4
 801cc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc24:	f7ff bfd0 	b.w	801cbc8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801cc28 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801cc28:	b570      	push	{r4, r5, r6, lr}
 801cc2a:	4d0c      	ldr	r5, [pc, #48]	@ (801cc5c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801cc2c:	4606      	mov	r6, r0
 801cc2e:	4c0c      	ldr	r4, [pc, #48]	@ (801cc60 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801cc30:	782b      	ldrb	r3, [r5, #0]
 801cc32:	f3bf 8f5b 	dmb	ish
 801cc36:	f013 0f01 	tst.w	r3, #1
 801cc3a:	d10d      	bne.n	801cc58 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc3c:	4628      	mov	r0, r5
 801cc3e:	f007 f9b0 	bl	8023fa2 <__cxa_guard_acquire>
 801cc42:	b148      	cbz	r0, 801cc58 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc44:	4b07      	ldr	r3, [pc, #28]	@ (801cc64 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801cc46:	4628      	mov	r0, r5
 801cc48:	6023      	str	r3, [r4, #0]
 801cc4a:	f007 f9b6 	bl	8023fba <__cxa_guard_release>
 801cc4e:	4a06      	ldr	r2, [pc, #24]	@ (801cc68 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801cc50:	4620      	mov	r0, r4
 801cc52:	4906      	ldr	r1, [pc, #24]	@ (801cc6c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801cc54:	f007 f99e 	bl	8023f94 <__aeabi_atexit>
 801cc58:	66b4      	str	r4, [r6, #104]	@ 0x68
 801cc5a:	bd70      	pop	{r4, r5, r6, pc}
 801cc5c:	24025448 	.word	0x24025448
 801cc60:	240254a8 	.word	0x240254a8
 801cc64:	08028b40 	.word	0x08028b40
 801cc68:	24000000 	.word	0x24000000
 801cc6c:	080198ff 	.word	0x080198ff

0801cc70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc74:	b087      	sub	sp, #28
 801cc76:	788d      	ldrb	r5, [r1, #2]
 801cc78:	f891 9000 	ldrb.w	r9, [r1]
 801cc7c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801cc80:	9501      	str	r5, [sp, #4]
 801cc82:	784d      	ldrb	r5, [r1, #1]
 801cc84:	9203      	str	r2, [sp, #12]
 801cc86:	9502      	str	r5, [sp, #8]
 801cc88:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801cc8c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801cc90:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801cc94:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801cc98:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801cc9c:	fb06 0708 	mla	r7, r6, r8, r0
 801cca0:	2e00      	cmp	r6, #0
 801cca2:	eb02 0a07 	add.w	sl, r2, r7
 801cca6:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801ccaa:	9d01      	ldr	r5, [sp, #4]
 801ccac:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801ccb0:	ea45 0509 	orr.w	r5, r5, r9
 801ccb4:	9505      	str	r5, [sp, #20]
 801ccb6:	f2c0 80b2 	blt.w	801ce1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801ccba:	45b3      	cmp	fp, r6
 801ccbc:	f340 80af 	ble.w	801ce1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801ccc0:	2800      	cmp	r0, #0
 801ccc2:	f2c0 80aa 	blt.w	801ce1a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ccc6:	4580      	cmp	r8, r0
 801ccc8:	f340 80a7 	ble.w	801ce1a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801cccc:	9a03      	ldr	r2, [sp, #12]
 801ccce:	5dd7      	ldrb	r7, [r2, r7]
 801ccd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ccd4:	441f      	add	r7, r3
 801ccd6:	1c42      	adds	r2, r0, #1
 801ccd8:	f100 80a4 	bmi.w	801ce24 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ccdc:	4590      	cmp	r8, r2
 801ccde:	f340 80a1 	ble.w	801ce24 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801cce2:	2c00      	cmp	r4, #0
 801cce4:	f000 809e 	beq.w	801ce24 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801cce8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ccec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccf0:	441d      	add	r5, r3
 801ccf2:	3601      	adds	r6, #1
 801ccf4:	f100 809a 	bmi.w	801ce2c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ccf8:	45b3      	cmp	fp, r6
 801ccfa:	f340 8097 	ble.w	801ce2c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ccfe:	f1bc 0f00 	cmp.w	ip, #0
 801cd02:	f000 8093 	beq.w	801ce2c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801cd06:	2800      	cmp	r0, #0
 801cd08:	f2c0 808e 	blt.w	801ce28 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801cd0c:	4580      	cmp	r8, r0
 801cd0e:	f340 808b 	ble.w	801ce28 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801cd12:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801cd16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd1a:	441e      	add	r6, r3
 801cd1c:	3001      	adds	r0, #1
 801cd1e:	f100 8088 	bmi.w	801ce32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd22:	4580      	cmp	r8, r0
 801cd24:	f340 8085 	ble.w	801ce32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd28:	2c00      	cmp	r4, #0
 801cd2a:	f000 8082 	beq.w	801ce32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd2e:	44d0      	add	r8, sl
 801cd30:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cd34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd38:	4413      	add	r3, r2
 801cd3a:	b2a4      	uxth	r4, r4
 801cd3c:	f895 a000 	ldrb.w	sl, [r5]
 801cd40:	fa1f fc8c 	uxth.w	ip, ip
 801cd44:	fb04 fb0c 	mul.w	fp, r4, ip
 801cd48:	0124      	lsls	r4, r4, #4
 801cd4a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801cd4e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801cd52:	eba4 040b 	sub.w	r4, r4, fp
 801cd56:	fa1f f08c 	uxth.w	r0, ip
 801cd5a:	b2a2      	uxth	r2, r4
 801cd5c:	783c      	ldrb	r4, [r7, #0]
 801cd5e:	eba8 0800 	sub.w	r8, r8, r0
 801cd62:	fa1f fc8e 	uxth.w	ip, lr
 801cd66:	fb02 fa0a 	mul.w	sl, r2, sl
 801cd6a:	ea6f 0e0e 	mvn.w	lr, lr
 801cd6e:	fa1f f888 	uxth.w	r8, r8
 801cd72:	fa5f fe8e 	uxtb.w	lr, lr
 801cd76:	fb08 aa04 	mla	sl, r8, r4, sl
 801cd7a:	7834      	ldrb	r4, [r6, #0]
 801cd7c:	fb19 f90e 	smulbb	r9, r9, lr
 801cd80:	fb00 aa04 	mla	sl, r0, r4, sl
 801cd84:	781c      	ldrb	r4, [r3, #0]
 801cd86:	fb0b a404 	mla	r4, fp, r4, sl
 801cd8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cd8e:	fb04 990c 	mla	r9, r4, ip, r9
 801cd92:	fa1f f989 	uxth.w	r9, r9
 801cd96:	f109 0401 	add.w	r4, r9, #1
 801cd9a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cd9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cda2:	f881 9000 	strb.w	r9, [r1]
 801cda6:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cdaa:	787c      	ldrb	r4, [r7, #1]
 801cdac:	fb02 f909 	mul.w	r9, r2, r9
 801cdb0:	fb08 9904 	mla	r9, r8, r4, r9
 801cdb4:	7874      	ldrb	r4, [r6, #1]
 801cdb6:	fb00 9904 	mla	r9, r0, r4, r9
 801cdba:	785c      	ldrb	r4, [r3, #1]
 801cdbc:	fb0b 9404 	mla	r4, fp, r4, r9
 801cdc0:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801cdc4:	9c02      	ldr	r4, [sp, #8]
 801cdc6:	fb14 f90e 	smulbb	r9, r4, lr
 801cdca:	fb0a 940c 	mla	r4, sl, ip, r9
 801cdce:	b2a4      	uxth	r4, r4
 801cdd0:	f104 0901 	add.w	r9, r4, #1
 801cdd4:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801cdd8:	1224      	asrs	r4, r4, #8
 801cdda:	704c      	strb	r4, [r1, #1]
 801cddc:	78ad      	ldrb	r5, [r5, #2]
 801cdde:	78bc      	ldrb	r4, [r7, #2]
 801cde0:	436a      	muls	r2, r5
 801cde2:	789b      	ldrb	r3, [r3, #2]
 801cde4:	fb08 2204 	mla	r2, r8, r4, r2
 801cde8:	78b4      	ldrb	r4, [r6, #2]
 801cdea:	fb00 2004 	mla	r0, r0, r4, r2
 801cdee:	fb0b 0b03 	mla	fp, fp, r3, r0
 801cdf2:	9b01      	ldr	r3, [sp, #4]
 801cdf4:	fb13 fe0e 	smulbb	lr, r3, lr
 801cdf8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801cdfc:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ce00:	fa1f fc8c 	uxth.w	ip, ip
 801ce04:	f10c 0e01 	add.w	lr, ip, #1
 801ce08:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ce0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ce10:	f881 c002 	strb.w	ip, [r1, #2]
 801ce14:	b007      	add	sp, #28
 801ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce1a:	af05      	add	r7, sp, #20
 801ce1c:	e75b      	b.n	801ccd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ce1e:	ad05      	add	r5, sp, #20
 801ce20:	462f      	mov	r7, r5
 801ce22:	e766      	b.n	801ccf2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce24:	ad05      	add	r5, sp, #20
 801ce26:	e764      	b.n	801ccf2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce28:	ae05      	add	r6, sp, #20
 801ce2a:	e777      	b.n	801cd1c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ce2c:	ab05      	add	r3, sp, #20
 801ce2e:	461e      	mov	r6, r3
 801ce30:	e783      	b.n	801cd3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ce32:	ab05      	add	r3, sp, #20
 801ce34:	e781      	b.n	801cd3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ce36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce3a:	b093      	sub	sp, #76	@ 0x4c
 801ce3c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ce3e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ce42:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801ce46:	9011      	str	r0, [sp, #68]	@ 0x44
 801ce48:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce4a:	6850      	ldr	r0, [r2, #4]
 801ce4c:	910d      	str	r1, [sp, #52]	@ 0x34
 801ce4e:	6812      	ldr	r2, [r2, #0]
 801ce50:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ce54:	fb00 1303 	mla	r3, r0, r3, r1
 801ce58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce5c:	18d3      	adds	r3, r2, r3
 801ce5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce66:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce68:	685c      	ldr	r4, [r3, #4]
 801ce6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce6c:	3404      	adds	r4, #4
 801ce6e:	43db      	mvns	r3, r3
 801ce70:	b2db      	uxtb	r3, r3
 801ce72:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	dc03      	bgt.n	801ce82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ce7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	f340 8250 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801ce82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ce88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ce8c:	1e48      	subs	r0, r1, #1
 801ce8e:	1e55      	subs	r5, r2, #1
 801ce90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	f340 80ee 	ble.w	801d074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ce98:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801ce9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ce9c:	1436      	asrs	r6, r6, #16
 801ce9e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cea2:	d406      	bmi.n	801ceb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cea4:	4286      	cmp	r6, r0
 801cea6:	da04      	bge.n	801ceb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	db02      	blt.n	801ceb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ceac:	42ab      	cmp	r3, r5
 801ceae:	f2c0 80e2 	blt.w	801d076 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ceb2:	3601      	adds	r6, #1
 801ceb4:	f100 80cf 	bmi.w	801d056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceb8:	42b1      	cmp	r1, r6
 801ceba:	f2c0 80cc 	blt.w	801d056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cebe:	3301      	adds	r3, #1
 801cec0:	f100 80c9 	bmi.w	801d056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cec4:	429a      	cmp	r2, r3
 801cec6:	f2c0 80c6 	blt.w	801d056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceca:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801cece:	f1bb 0f00 	cmp.w	fp, #0
 801ced2:	f340 80f1 	ble.w	801d0b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801ced6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ced8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ceda:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801cedc:	141d      	asrs	r5, r3, #16
 801cede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cee0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cee4:	68c7      	ldr	r7, [r0, #12]
 801cee6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cee8:	1418      	asrs	r0, r3, #16
 801ceea:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801ceee:	6892      	ldr	r2, [r2, #8]
 801cef0:	f100 8137 	bmi.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cef4:	f102 3cff 	add.w	ip, r2, #4294967295
 801cef8:	4560      	cmp	r0, ip
 801cefa:	f280 8132 	bge.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cefe:	2d00      	cmp	r5, #0
 801cf00:	f2c0 812f 	blt.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf04:	f107 3cff 	add.w	ip, r7, #4294967295
 801cf08:	4565      	cmp	r5, ip
 801cf0a:	f280 812a 	bge.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf0e:	b212      	sxth	r2, r2
 801cf10:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cf12:	fb05 0002 	mla	r0, r5, r2, r0
 801cf16:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf18:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cf1c:	4405      	add	r5, r0
 801cf1e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cf22:	eb04 0e0c 	add.w	lr, r4, ip
 801cf26:	f1b8 0f00 	cmp.w	r8, #0
 801cf2a:	f000 810c 	beq.w	801d146 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801cf2e:	786f      	ldrb	r7, [r5, #1]
 801cf30:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cf34:	4427      	add	r7, r4
 801cf36:	2900      	cmp	r1, #0
 801cf38:	f000 810d 	beq.w	801d156 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801cf3c:	18a8      	adds	r0, r5, r2
 801cf3e:	5caa      	ldrb	r2, [r5, r2]
 801cf40:	7840      	ldrb	r0, [r0, #1]
 801cf42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf4a:	4422      	add	r2, r4
 801cf4c:	4420      	add	r0, r4
 801cf4e:	fa1f f388 	uxth.w	r3, r8
 801cf52:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cf56:	b289      	uxth	r1, r1
 801cf58:	f897 c000 	ldrb.w	ip, [r7]
 801cf5c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801cf60:	fb03 f901 	mul.w	r9, r3, r1
 801cf64:	011b      	lsls	r3, r3, #4
 801cf66:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cf6a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801cf6e:	eba3 0309 	sub.w	r3, r3, r9
 801cf72:	b289      	uxth	r1, r1
 801cf74:	b29b      	uxth	r3, r3
 801cf76:	eba8 0801 	sub.w	r8, r8, r1
 801cf7a:	fb03 fc0c 	mul.w	ip, r3, ip
 801cf7e:	fa1f f888 	uxth.w	r8, r8
 801cf82:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf86:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cf8a:	f892 a000 	ldrb.w	sl, [r2]
 801cf8e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cf92:	f890 a000 	ldrb.w	sl, [r0]
 801cf96:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cf9a:	f896 a000 	ldrb.w	sl, [r6]
 801cf9e:	fb1a fa03 	smulbb	sl, sl, r3
 801cfa2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cfa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfa8:	fb0c ac05 	mla	ip, ip, r5, sl
 801cfac:	fa1f fc8c 	uxth.w	ip, ip
 801cfb0:	f10c 0a01 	add.w	sl, ip, #1
 801cfb4:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cfb8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfbc:	f886 a000 	strb.w	sl, [r6]
 801cfc0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cfc4:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cfc8:	fb03 fc0c 	mul.w	ip, r3, ip
 801cfcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cfce:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cfd2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cfd6:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cfda:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cfde:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cfe2:	f896 a001 	ldrb.w	sl, [r6, #1]
 801cfe6:	fb1a fa03 	smulbb	sl, sl, r3
 801cfea:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cfee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cff0:	fb0c ac05 	mla	ip, ip, r5, sl
 801cff4:	fa1f fc8c 	uxth.w	ip, ip
 801cff8:	f10c 0a01 	add.w	sl, ip, #1
 801cffc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801d000:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d004:	f886 c001 	strb.w	ip, [r6, #1]
 801d008:	78bf      	ldrb	r7, [r7, #2]
 801d00a:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d00e:	437b      	muls	r3, r7
 801d010:	fb08 330c 	mla	r3, r8, ip, r3
 801d014:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d018:	7882      	ldrb	r2, [r0, #2]
 801d01a:	fb01 310c 	mla	r1, r1, ip, r3
 801d01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d020:	fb09 1902 	mla	r9, r9, r2, r1
 801d024:	78b1      	ldrb	r1, [r6, #2]
 801d026:	fb11 f103 	smulbb	r1, r1, r3
 801d02a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d02e:	fb09 1505 	mla	r5, r9, r5, r1
 801d032:	b2ad      	uxth	r5, r5
 801d034:	1c6b      	adds	r3, r5, #1
 801d036:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d03a:	122d      	asrs	r5, r5, #8
 801d03c:	70b5      	strb	r5, [r6, #2]
 801d03e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d040:	3603      	adds	r6, #3
 801d042:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d044:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d048:	4413      	add	r3, r2
 801d04a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d04c:	931d      	str	r3, [sp, #116]	@ 0x74
 801d04e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d050:	4413      	add	r3, r2
 801d052:	931e      	str	r3, [sp, #120]	@ 0x78
 801d054:	e73b      	b.n	801cece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d056:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d058:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d05a:	4433      	add	r3, r6
 801d05c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d05e:	931d      	str	r3, [sp, #116]	@ 0x74
 801d060:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d062:	4433      	add	r3, r6
 801d064:	931e      	str	r3, [sp, #120]	@ 0x78
 801d066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d068:	3b01      	subs	r3, #1
 801d06a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d06e:	3303      	adds	r3, #3
 801d070:	930a      	str	r3, [sp, #40]	@ 0x28
 801d072:	e70d      	b.n	801ce90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d074:	d028      	beq.n	801d0c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d078:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d07a:	3b01      	subs	r3, #1
 801d07c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d07e:	fb00 5003 	mla	r0, r0, r3, r5
 801d082:	1400      	asrs	r0, r0, #16
 801d084:	f53f af21 	bmi.w	801ceca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d088:	3901      	subs	r1, #1
 801d08a:	4288      	cmp	r0, r1
 801d08c:	f6bf af1d 	bge.w	801ceca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d090:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d092:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d094:	fb01 0303 	mla	r3, r1, r3, r0
 801d098:	141b      	asrs	r3, r3, #16
 801d09a:	f53f af16 	bmi.w	801ceca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d09e:	3a01      	subs	r2, #1
 801d0a0:	4293      	cmp	r3, r2
 801d0a2:	f6bf af12 	bge.w	801ceca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801d0ac:	1cdf      	adds	r7, r3, #3
 801d0ae:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801d0b2:	f1b9 0f00 	cmp.w	r9, #0
 801d0b6:	dc73      	bgt.n	801d1a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d0bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0c4:	441a      	add	r2, r3
 801d0c6:	920a      	str	r2, [sp, #40]	@ 0x28
 801d0c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	f340 8129 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d0d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d0d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d0d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0de:	eef0 6a62 	vmov.f32	s13, s5
 801d0e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d0e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0ee:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d0f2:	eef0 6a43 	vmov.f32	s13, s6
 801d0f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0fa:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d0fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d102:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d106:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d10a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d10e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d112:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d116:	ee12 2a90 	vmov	r2, s5
 801d11a:	eef0 2a47 	vmov.f32	s5, s14
 801d11e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d122:	ee13 2a10 	vmov	r2, s6
 801d126:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d128:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d12a:	eeb0 3a67 	vmov.f32	s6, s15
 801d12e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d132:	9320      	str	r3, [sp, #128]	@ 0x80
 801d134:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d136:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d138:	3b01      	subs	r3, #1
 801d13a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d13c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d13e:	bf08      	it	eq
 801d140:	4613      	moveq	r3, r2
 801d142:	9309      	str	r3, [sp, #36]	@ 0x24
 801d144:	e696      	b.n	801ce74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d146:	b149      	cbz	r1, 801d15c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d148:	5caa      	ldrb	r2, [r5, r2]
 801d14a:	4670      	mov	r0, lr
 801d14c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d150:	4422      	add	r2, r4
 801d152:	4677      	mov	r7, lr
 801d154:	e6fb      	b.n	801cf4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d156:	4670      	mov	r0, lr
 801d158:	4672      	mov	r2, lr
 801d15a:	e6f8      	b.n	801cf4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d15c:	4670      	mov	r0, lr
 801d15e:	4672      	mov	r2, lr
 801d160:	e7f7      	b.n	801d152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d162:	f110 0c01 	adds.w	ip, r0, #1
 801d166:	f53f af6a 	bmi.w	801d03e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d16a:	4562      	cmp	r2, ip
 801d16c:	f6ff af67 	blt.w	801d03e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d170:	f115 0c01 	adds.w	ip, r5, #1
 801d174:	f53f af63 	bmi.w	801d03e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d178:	4567      	cmp	r7, ip
 801d17a:	f6ff af60 	blt.w	801d03e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d180:	b23f      	sxth	r7, r7
 801d182:	b212      	sxth	r2, r2
 801d184:	9002      	str	r0, [sp, #8]
 801d186:	9701      	str	r7, [sp, #4]
 801d188:	9200      	str	r2, [sp, #0]
 801d18a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d18c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d18e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d192:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d196:	4623      	mov	r3, r4
 801d198:	4631      	mov	r1, r6
 801d19a:	f7ff fd69 	bl	801cc70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d19e:	e74e      	b.n	801d03e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d1a0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d1a2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d1a4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d1a8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d1aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d1ac:	1400      	asrs	r0, r0, #16
 801d1ae:	142d      	asrs	r5, r5, #16
 801d1b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d1b2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d1b6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d1ba:	fb02 5000 	mla	r0, r2, r0, r5
 801d1be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d1c0:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d1c4:	eb05 0c00 	add.w	ip, r5, r0
 801d1c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d1cc:	eb04 060e 	add.w	r6, r4, lr
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	f000 8097 	beq.w	801d304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d1d6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d1da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1de:	4425      	add	r5, r4
 801d1e0:	2900      	cmp	r1, #0
 801d1e2:	f000 8098 	beq.w	801d316 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d1e6:	eb0c 0002 	add.w	r0, ip, r2
 801d1ea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d1ee:	7840      	ldrb	r0, [r0, #1]
 801d1f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d1f8:	4422      	add	r2, r4
 801d1fa:	4420      	add	r0, r4
 801d1fc:	b29b      	uxth	r3, r3
 801d1fe:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d202:	b289      	uxth	r1, r1
 801d204:	f895 e000 	ldrb.w	lr, [r5]
 801d208:	3703      	adds	r7, #3
 801d20a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d20e:	fb03 f801 	mul.w	r8, r3, r1
 801d212:	011b      	lsls	r3, r3, #4
 801d214:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d218:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d21c:	eba3 0308 	sub.w	r3, r3, r8
 801d220:	b289      	uxth	r1, r1
 801d222:	b29b      	uxth	r3, r3
 801d224:	ebac 0c01 	sub.w	ip, ip, r1
 801d228:	fb03 fe0e 	mul.w	lr, r3, lr
 801d22c:	fa1f fc8c 	uxth.w	ip, ip
 801d230:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d234:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d238:	f892 b000 	ldrb.w	fp, [r2]
 801d23c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d240:	f890 b000 	ldrb.w	fp, [r0]
 801d244:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d248:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801d24c:	fb1b fb03 	smulbb	fp, fp, r3
 801d250:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d256:	fb0e be0a 	mla	lr, lr, sl, fp
 801d25a:	fa1f fe8e 	uxth.w	lr, lr
 801d25e:	f10e 0b01 	add.w	fp, lr, #1
 801d262:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d266:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d26a:	f807 ec06 	strb.w	lr, [r7, #-6]
 801d26e:	f895 e001 	ldrb.w	lr, [r5, #1]
 801d272:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d276:	fb03 fe0e 	mul.w	lr, r3, lr
 801d27a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d27c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d280:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d284:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d288:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d28c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d290:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801d294:	fb1b fb03 	smulbb	fp, fp, r3
 801d298:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d29e:	fb0e be0a 	mla	lr, lr, sl, fp
 801d2a2:	fa1f fe8e 	uxth.w	lr, lr
 801d2a6:	f10e 0b01 	add.w	fp, lr, #1
 801d2aa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d2ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d2b2:	f807 ec05 	strb.w	lr, [r7, #-5]
 801d2b6:	78ad      	ldrb	r5, [r5, #2]
 801d2b8:	78b6      	ldrb	r6, [r6, #2]
 801d2ba:	436b      	muls	r3, r5
 801d2bc:	7895      	ldrb	r5, [r2, #2]
 801d2be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d2c0:	fb0c 3306 	mla	r3, ip, r6, r3
 801d2c4:	fb01 3305 	mla	r3, r1, r5, r3
 801d2c8:	7885      	ldrb	r5, [r0, #2]
 801d2ca:	fb08 3805 	mla	r8, r8, r5, r3
 801d2ce:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801d2d2:	fb13 f302 	smulbb	r3, r3, r2
 801d2d6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d2da:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d2dc:	fb08 380a 	mla	r8, r8, sl, r3
 801d2e0:	fa1f f888 	uxth.w	r8, r8
 801d2e4:	f108 0301 	add.w	r3, r8, #1
 801d2e8:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801d2ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d2ee:	4413      	add	r3, r2
 801d2f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d2f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d2f6:	931d      	str	r3, [sp, #116]	@ 0x74
 801d2f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d2fa:	f807 8c04 	strb.w	r8, [r7, #-4]
 801d2fe:	4413      	add	r3, r2
 801d300:	931e      	str	r3, [sp, #120]	@ 0x78
 801d302:	e6d6      	b.n	801d0b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d304:	b151      	cbz	r1, 801d31c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d306:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d30a:	4630      	mov	r0, r6
 801d30c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d310:	4422      	add	r2, r4
 801d312:	4635      	mov	r5, r6
 801d314:	e772      	b.n	801d1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d316:	4630      	mov	r0, r6
 801d318:	4632      	mov	r2, r6
 801d31a:	e76f      	b.n	801d1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d31c:	4630      	mov	r0, r6
 801d31e:	4632      	mov	r2, r6
 801d320:	e7f7      	b.n	801d312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d322:	b013      	add	sp, #76	@ 0x4c
 801d324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d328 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d328:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d32c:	784c      	ldrb	r4, [r1, #1]
 801d32e:	f891 a002 	ldrb.w	sl, [r1, #2]
 801d332:	0224      	lsls	r4, r4, #8
 801d334:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801d338:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801d33c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d340:	f891 a000 	ldrb.w	sl, [r1]
 801d344:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801d348:	ea44 040a 	orr.w	r4, r4, sl
 801d34c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801d350:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801d354:	9401      	str	r4, [sp, #4]
 801d356:	fb05 c70e 	mla	r7, r5, lr, ip
 801d35a:	2d00      	cmp	r5, #0
 801d35c:	eb02 0807 	add.w	r8, r2, r7
 801d360:	db72      	blt.n	801d448 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d362:	45a9      	cmp	r9, r5
 801d364:	dd70      	ble.n	801d448 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d366:	f1bc 0f00 	cmp.w	ip, #0
 801d36a:	db6b      	blt.n	801d444 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d36c:	45e6      	cmp	lr, ip
 801d36e:	dd69      	ble.n	801d444 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d370:	5dd7      	ldrb	r7, [r2, r7]
 801d372:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d376:	441f      	add	r7, r3
 801d378:	f11c 0201 	adds.w	r2, ip, #1
 801d37c:	d467      	bmi.n	801d44e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d37e:	4596      	cmp	lr, r2
 801d380:	dd65      	ble.n	801d44e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d382:	2800      	cmp	r0, #0
 801d384:	d063      	beq.n	801d44e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d386:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d38a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d38e:	441c      	add	r4, r3
 801d390:	3501      	adds	r5, #1
 801d392:	d460      	bmi.n	801d456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d394:	45a9      	cmp	r9, r5
 801d396:	dd5e      	ble.n	801d456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d398:	2e00      	cmp	r6, #0
 801d39a:	d05c      	beq.n	801d456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d39c:	f1bc 0f00 	cmp.w	ip, #0
 801d3a0:	db57      	blt.n	801d452 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d3a2:	45e6      	cmp	lr, ip
 801d3a4:	dd55      	ble.n	801d452 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d3a6:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d3aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3ae:	441d      	add	r5, r3
 801d3b0:	f11c 0201 	adds.w	r2, ip, #1
 801d3b4:	d452      	bmi.n	801d45c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3b6:	4596      	cmp	lr, r2
 801d3b8:	dd50      	ble.n	801d45c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3ba:	2800      	cmp	r0, #0
 801d3bc:	d04e      	beq.n	801d45c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3be:	44c6      	add	lr, r8
 801d3c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d3c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3c8:	4413      	add	r3, r2
 801d3ca:	b280      	uxth	r0, r0
 801d3cc:	f897 8000 	ldrb.w	r8, [r7]
 801d3d0:	b2b2      	uxth	r2, r6
 801d3d2:	fb00 f602 	mul.w	r6, r0, r2
 801d3d6:	0100      	lsls	r0, r0, #4
 801d3d8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d3dc:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801d3e0:	1b80      	subs	r0, r0, r6
 801d3e2:	fa1f fc82 	uxth.w	ip, r2
 801d3e6:	b282      	uxth	r2, r0
 801d3e8:	7820      	ldrb	r0, [r4, #0]
 801d3ea:	ebae 0e0c 	sub.w	lr, lr, ip
 801d3ee:	4350      	muls	r0, r2
 801d3f0:	fa1f fe8e 	uxth.w	lr, lr
 801d3f4:	fb0e 0808 	mla	r8, lr, r8, r0
 801d3f8:	7828      	ldrb	r0, [r5, #0]
 801d3fa:	fb0c 8800 	mla	r8, ip, r0, r8
 801d3fe:	7818      	ldrb	r0, [r3, #0]
 801d400:	fb06 8000 	mla	r0, r6, r0, r8
 801d404:	1200      	asrs	r0, r0, #8
 801d406:	7008      	strb	r0, [r1, #0]
 801d408:	7860      	ldrb	r0, [r4, #1]
 801d40a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d40e:	4350      	muls	r0, r2
 801d410:	fb0e 0808 	mla	r8, lr, r8, r0
 801d414:	7868      	ldrb	r0, [r5, #1]
 801d416:	fb0c 8800 	mla	r8, ip, r0, r8
 801d41a:	7858      	ldrb	r0, [r3, #1]
 801d41c:	fb06 8000 	mla	r0, r6, r0, r8
 801d420:	1200      	asrs	r0, r0, #8
 801d422:	7048      	strb	r0, [r1, #1]
 801d424:	78a0      	ldrb	r0, [r4, #2]
 801d426:	78bf      	ldrb	r7, [r7, #2]
 801d428:	4350      	muls	r0, r2
 801d42a:	78aa      	ldrb	r2, [r5, #2]
 801d42c:	fb0e 0007 	mla	r0, lr, r7, r0
 801d430:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d434:	789a      	ldrb	r2, [r3, #2]
 801d436:	fb06 c202 	mla	r2, r6, r2, ip
 801d43a:	1212      	asrs	r2, r2, #8
 801d43c:	708a      	strb	r2, [r1, #2]
 801d43e:	b002      	add	sp, #8
 801d440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d444:	af01      	add	r7, sp, #4
 801d446:	e797      	b.n	801d378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d448:	ac01      	add	r4, sp, #4
 801d44a:	4627      	mov	r7, r4
 801d44c:	e7a0      	b.n	801d390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d44e:	ac01      	add	r4, sp, #4
 801d450:	e79e      	b.n	801d390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d452:	ad01      	add	r5, sp, #4
 801d454:	e7ac      	b.n	801d3b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d456:	ab01      	add	r3, sp, #4
 801d458:	461d      	mov	r5, r3
 801d45a:	e7b6      	b.n	801d3ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d45c:	ab01      	add	r3, sp, #4
 801d45e:	e7b4      	b.n	801d3ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d464:	b08d      	sub	sp, #52	@ 0x34
 801d466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d46a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801d46e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d470:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d472:	9306      	str	r3, [sp, #24]
 801d474:	6850      	ldr	r0, [r2, #4]
 801d476:	6812      	ldr	r2, [r2, #0]
 801d478:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d47a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801d47e:	fb00 1303 	mla	r3, r0, r3, r1
 801d482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d486:	18d3      	adds	r3, r2, r3
 801d488:	9307      	str	r3, [sp, #28]
 801d48a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	9308      	str	r3, [sp, #32]
 801d490:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d492:	685d      	ldr	r5, [r3, #4]
 801d494:	3504      	adds	r5, #4
 801d496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d498:	2b00      	cmp	r3, #0
 801d49a:	dc03      	bgt.n	801d4a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	f340 81e6 	ble.w	801d870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d4a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d4ae:	1e48      	subs	r0, r1, #1
 801d4b0:	1e56      	subs	r6, r2, #1
 801d4b2:	9b06      	ldr	r3, [sp, #24]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f340 80bd 	ble.w	801d634 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d4ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4bc:	1427      	asrs	r7, r4, #16
 801d4be:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d4c2:	d406      	bmi.n	801d4d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4c4:	4287      	cmp	r7, r0
 801d4c6:	da04      	bge.n	801d4d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	db02      	blt.n	801d4d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4cc:	42b3      	cmp	r3, r6
 801d4ce:	f2c0 80b2 	blt.w	801d636 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d4d2:	3701      	adds	r7, #1
 801d4d4:	f100 80a1 	bmi.w	801d61a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4d8:	42b9      	cmp	r1, r7
 801d4da:	f2c0 809e 	blt.w	801d61a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4de:	3301      	adds	r3, #1
 801d4e0:	f100 809b 	bmi.w	801d61a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4e4:	429a      	cmp	r2, r3
 801d4e6:	f2c0 8098 	blt.w	801d61a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4ea:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d4ee:	f1bb 0f00 	cmp.w	fp, #0
 801d4f2:	f340 80bf 	ble.w	801d674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d4f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d4f8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d4fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4fc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d500:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d504:	1420      	asrs	r0, r4, #16
 801d506:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d508:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d50c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d510:	6892      	ldr	r2, [r2, #8]
 801d512:	f100 8103 	bmi.w	801d71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d516:	f102 3eff 	add.w	lr, r2, #4294967295
 801d51a:	4570      	cmp	r0, lr
 801d51c:	f280 80fe 	bge.w	801d71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d520:	2f00      	cmp	r7, #0
 801d522:	f2c0 80fb 	blt.w	801d71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d526:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d52a:	4577      	cmp	r7, lr
 801d52c:	f280 80f6 	bge.w	801d71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d530:	b212      	sxth	r2, r2
 801d532:	fb07 0002 	mla	r0, r7, r2, r0
 801d536:	9f08      	ldr	r7, [sp, #32]
 801d538:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d53c:	eb07 0e00 	add.w	lr, r7, r0
 801d540:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d544:	eb05 0c08 	add.w	ip, r5, r8
 801d548:	2b00      	cmp	r3, #0
 801d54a:	f000 80d8 	beq.w	801d6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d54e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d552:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d556:	442f      	add	r7, r5
 801d558:	2900      	cmp	r1, #0
 801d55a:	f000 80d9 	beq.w	801d710 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d55e:	eb0e 0002 	add.w	r0, lr, r2
 801d562:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d566:	7840      	ldrb	r0, [r0, #1]
 801d568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d56c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d570:	442a      	add	r2, r5
 801d572:	4428      	add	r0, r5
 801d574:	b29b      	uxth	r3, r3
 801d576:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d57a:	b289      	uxth	r1, r1
 801d57c:	f897 8000 	ldrb.w	r8, [r7]
 801d580:	fb03 f901 	mul.w	r9, r3, r1
 801d584:	011b      	lsls	r3, r3, #4
 801d586:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d58a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d58e:	eba3 0309 	sub.w	r3, r3, r9
 801d592:	b289      	uxth	r1, r1
 801d594:	b29b      	uxth	r3, r3
 801d596:	ebae 0e01 	sub.w	lr, lr, r1
 801d59a:	fb03 f808 	mul.w	r8, r3, r8
 801d59e:	fa1f fe8e 	uxth.w	lr, lr
 801d5a2:	fb0e 880a 	mla	r8, lr, sl, r8
 801d5a6:	f892 a000 	ldrb.w	sl, [r2]
 801d5aa:	fb01 880a 	mla	r8, r1, sl, r8
 801d5ae:	f890 a000 	ldrb.w	sl, [r0]
 801d5b2:	fb09 880a 	mla	r8, r9, sl, r8
 801d5b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5ba:	f886 8000 	strb.w	r8, [r6]
 801d5be:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d5c2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d5c6:	fb03 f808 	mul.w	r8, r3, r8
 801d5ca:	fb0e 880a 	mla	r8, lr, sl, r8
 801d5ce:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d5d2:	fb01 880a 	mla	r8, r1, sl, r8
 801d5d6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d5da:	fb09 880a 	mla	r8, r9, sl, r8
 801d5de:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5e2:	f886 8001 	strb.w	r8, [r6, #1]
 801d5e6:	78bf      	ldrb	r7, [r7, #2]
 801d5e8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d5ec:	437b      	muls	r3, r7
 801d5ee:	7892      	ldrb	r2, [r2, #2]
 801d5f0:	fb0e 330c 	mla	r3, lr, ip, r3
 801d5f4:	fb01 3102 	mla	r1, r1, r2, r3
 801d5f8:	7882      	ldrb	r2, [r0, #2]
 801d5fa:	fb09 1902 	mla	r9, r9, r2, r1
 801d5fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d602:	f886 9002 	strb.w	r9, [r6, #2]
 801d606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d608:	3603      	adds	r6, #3
 801d60a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d60c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d610:	441c      	add	r4, r3
 801d612:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d614:	4413      	add	r3, r2
 801d616:	9318      	str	r3, [sp, #96]	@ 0x60
 801d618:	e769      	b.n	801d4ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d61c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d61e:	441c      	add	r4, r3
 801d620:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d622:	443b      	add	r3, r7
 801d624:	9318      	str	r3, [sp, #96]	@ 0x60
 801d626:	9b06      	ldr	r3, [sp, #24]
 801d628:	3b01      	subs	r3, #1
 801d62a:	9306      	str	r3, [sp, #24]
 801d62c:	9b07      	ldr	r3, [sp, #28]
 801d62e:	3303      	adds	r3, #3
 801d630:	9307      	str	r3, [sp, #28]
 801d632:	e73e      	b.n	801d4b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d634:	d026      	beq.n	801d684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d636:	9b06      	ldr	r3, [sp, #24]
 801d638:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d63a:	3b01      	subs	r3, #1
 801d63c:	fb00 4003 	mla	r0, r0, r3, r4
 801d640:	1400      	asrs	r0, r0, #16
 801d642:	f53f af52 	bmi.w	801d4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d646:	3901      	subs	r1, #1
 801d648:	4288      	cmp	r0, r1
 801d64a:	f6bf af4e 	bge.w	801d4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d64e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d650:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d652:	fb01 0303 	mla	r3, r1, r3, r0
 801d656:	141b      	asrs	r3, r3, #16
 801d658:	f53f af47 	bmi.w	801d4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d65c:	3a01      	subs	r2, #1
 801d65e:	4293      	cmp	r3, r2
 801d660:	f6bf af43 	bge.w	801d4ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d664:	9b07      	ldr	r3, [sp, #28]
 801d666:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d66a:	f103 0803 	add.w	r8, r3, #3
 801d66e:	f1ba 0f00 	cmp.w	sl, #0
 801d672:	dc71      	bgt.n	801d758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d674:	9b06      	ldr	r3, [sp, #24]
 801d676:	9a07      	ldr	r2, [sp, #28]
 801d678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d67c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d680:	441a      	add	r2, r3
 801d682:	9207      	str	r2, [sp, #28]
 801d684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d686:	2b00      	cmp	r3, #0
 801d688:	f340 80f2 	ble.w	801d870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d68c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d690:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d692:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d696:	eeb0 6a62 	vmov.f32	s12, s5
 801d69a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d69e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6a6:	ee16 4a10 	vmov	r4, s12
 801d6aa:	eeb0 6a43 	vmov.f32	s12, s6
 801d6ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6b2:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801d6b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6ce:	ee12 2a90 	vmov	r2, s5
 801d6d2:	eef0 2a47 	vmov.f32	s5, s14
 801d6d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6da:	ee13 2a10 	vmov	r2, s6
 801d6de:	9319      	str	r3, [sp, #100]	@ 0x64
 801d6e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6e2:	eeb0 3a67 	vmov.f32	s6, s15
 801d6e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6ea:	931a      	str	r3, [sp, #104]	@ 0x68
 801d6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d6f0:	3b01      	subs	r3, #1
 801d6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6f6:	bf08      	it	eq
 801d6f8:	4613      	moveq	r3, r2
 801d6fa:	9306      	str	r3, [sp, #24]
 801d6fc:	e6cb      	b.n	801d496 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d6fe:	b151      	cbz	r1, 801d716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d700:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d704:	4660      	mov	r0, ip
 801d706:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d70a:	442a      	add	r2, r5
 801d70c:	4667      	mov	r7, ip
 801d70e:	e731      	b.n	801d574 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d710:	4660      	mov	r0, ip
 801d712:	4662      	mov	r2, ip
 801d714:	e72e      	b.n	801d574 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d716:	4660      	mov	r0, ip
 801d718:	4662      	mov	r2, ip
 801d71a:	e7f7      	b.n	801d70c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d71c:	f110 0e01 	adds.w	lr, r0, #1
 801d720:	f53f af71 	bmi.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d724:	4572      	cmp	r2, lr
 801d726:	f6ff af6e 	blt.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d72a:	f117 0e01 	adds.w	lr, r7, #1
 801d72e:	f53f af6a 	bmi.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d732:	45f4      	cmp	ip, lr
 801d734:	f6ff af67 	blt.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d738:	b212      	sxth	r2, r2
 801d73a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d73e:	fa0f f38c 	sxth.w	r3, ip
 801d742:	9200      	str	r2, [sp, #0]
 801d744:	4631      	mov	r1, r6
 801d746:	9a08      	ldr	r2, [sp, #32]
 801d748:	9301      	str	r3, [sp, #4]
 801d74a:	462b      	mov	r3, r5
 801d74c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d750:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d752:	f7ff fde9 	bl	801d328 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d756:	e756      	b.n	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d758:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d75a:	1426      	asrs	r6, r4, #16
 801d75c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d75e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d762:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d766:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d768:	1400      	asrs	r0, r0, #16
 801d76a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d76e:	fb02 6000 	mla	r0, r2, r0, r6
 801d772:	9e08      	ldr	r6, [sp, #32]
 801d774:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d778:	eb06 0c00 	add.w	ip, r6, r0
 801d77c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d780:	eb05 070e 	add.w	r7, r5, lr
 801d784:	2b00      	cmp	r3, #0
 801d786:	d064      	beq.n	801d852 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d788:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d78c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d790:	442e      	add	r6, r5
 801d792:	2900      	cmp	r1, #0
 801d794:	d066      	beq.n	801d864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d796:	eb0c 0002 	add.w	r0, ip, r2
 801d79a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d79e:	7840      	ldrb	r0, [r0, #1]
 801d7a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d7a8:	442a      	add	r2, r5
 801d7aa:	4428      	add	r0, r5
 801d7ac:	b29b      	uxth	r3, r3
 801d7ae:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d7b2:	b289      	uxth	r1, r1
 801d7b4:	f896 e000 	ldrb.w	lr, [r6]
 801d7b8:	f108 0803 	add.w	r8, r8, #3
 801d7bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7c0:	fb03 f901 	mul.w	r9, r3, r1
 801d7c4:	011b      	lsls	r3, r3, #4
 801d7c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d7ca:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d7ce:	eba3 0309 	sub.w	r3, r3, r9
 801d7d2:	b289      	uxth	r1, r1
 801d7d4:	b29b      	uxth	r3, r3
 801d7d6:	ebac 0c01 	sub.w	ip, ip, r1
 801d7da:	fb03 fe0e 	mul.w	lr, r3, lr
 801d7de:	fa1f fc8c 	uxth.w	ip, ip
 801d7e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d7e6:	f892 b000 	ldrb.w	fp, [r2]
 801d7ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d7ee:	f890 b000 	ldrb.w	fp, [r0]
 801d7f2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d7f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d7fa:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d7fe:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d802:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d806:	fb03 fe0e 	mul.w	lr, r3, lr
 801d80a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d80e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d812:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d816:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d81a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d81e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d822:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d826:	78b6      	ldrb	r6, [r6, #2]
 801d828:	78bf      	ldrb	r7, [r7, #2]
 801d82a:	4373      	muls	r3, r6
 801d82c:	7896      	ldrb	r6, [r2, #2]
 801d82e:	7882      	ldrb	r2, [r0, #2]
 801d830:	fb0c 3307 	mla	r3, ip, r7, r3
 801d834:	fb01 3306 	mla	r3, r1, r6, r3
 801d838:	fb09 3902 	mla	r9, r9, r2, r3
 801d83c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d83e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d840:	441c      	add	r4, r3
 801d842:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d844:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d848:	4413      	add	r3, r2
 801d84a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d84e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d850:	e70d      	b.n	801d66e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d852:	b151      	cbz	r1, 801d86a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d854:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d858:	4638      	mov	r0, r7
 801d85a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d85e:	442a      	add	r2, r5
 801d860:	463e      	mov	r6, r7
 801d862:	e7a3      	b.n	801d7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d864:	4638      	mov	r0, r7
 801d866:	463a      	mov	r2, r7
 801d868:	e7a0      	b.n	801d7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d86a:	4638      	mov	r0, r7
 801d86c:	463a      	mov	r2, r7
 801d86e:	e7f7      	b.n	801d860 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d870:	b00d      	add	sp, #52	@ 0x34
 801d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d876 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d87e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d882:	2d00      	cmp	r5, #0
 801d884:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d888:	fb05 700c 	mla	r0, r5, ip, r7
 801d88c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d890:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801d894:	eb02 0800 	add.w	r8, r2, r0
 801d898:	f2c0 8118 	blt.w	801dacc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d89c:	45a9      	cmp	r9, r5
 801d89e:	f340 8115 	ble.w	801dacc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d8a2:	2f00      	cmp	r7, #0
 801d8a4:	f2c0 8110 	blt.w	801dac8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d8a8:	45bc      	cmp	ip, r7
 801d8aa:	f340 810d 	ble.w	801dac8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d8ae:	5c12      	ldrb	r2, [r2, r0]
 801d8b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d8b4:	1c7a      	adds	r2, r7, #1
 801d8b6:	f100 810c 	bmi.w	801dad2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8ba:	4594      	cmp	ip, r2
 801d8bc:	f340 8109 	ble.w	801dad2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8c0:	2c00      	cmp	r4, #0
 801d8c2:	f000 8108 	beq.w	801dad6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801d8c6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d8ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d8ce:	3501      	adds	r5, #1
 801d8d0:	f100 8105 	bmi.w	801dade <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d8d4:	45a9      	cmp	r9, r5
 801d8d6:	f340 8102 	ble.w	801dade <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d8da:	f1be 0f00 	cmp.w	lr, #0
 801d8de:	f000 8101 	beq.w	801dae4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801d8e2:	2f00      	cmp	r7, #0
 801d8e4:	f2c0 80f9 	blt.w	801dada <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d8e8:	45bc      	cmp	ip, r7
 801d8ea:	f340 80f6 	ble.w	801dada <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d8ee:	f818 200c 	ldrb.w	r2, [r8, ip]
 801d8f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d8f6:	3701      	adds	r7, #1
 801d8f8:	f100 80f7 	bmi.w	801daea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d8fc:	45bc      	cmp	ip, r7
 801d8fe:	f340 80f4 	ble.w	801daea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d902:	2c00      	cmp	r4, #0
 801d904:	f000 80f3 	beq.w	801daee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801d908:	44c4      	add	ip, r8
 801d90a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d90e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d912:	fa1f fc84 	uxth.w	ip, r4
 801d916:	fa1f f48e 	uxth.w	r4, lr
 801d91a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d91e:	fb04 fe0c 	mul.w	lr, r4, ip
 801d922:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d926:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d92a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d92e:	ebac 070e 	sub.w	r7, ip, lr
 801d932:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d936:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d93a:	b2a4      	uxth	r4, r4
 801d93c:	b2bf      	uxth	r7, r7
 801d93e:	1b1b      	subs	r3, r3, r4
 801d940:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d944:	fb07 fc0a 	mul.w	ip, r7, sl
 801d948:	b29b      	uxth	r3, r3
 801d94a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d94e:	9300      	str	r3, [sp, #0]
 801d950:	fb04 cc09 	mla	ip, r4, r9, ip
 801d954:	fb0e cc08 	mla	ip, lr, r8, ip
 801d958:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d95c:	9301      	str	r3, [sp, #4]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	f000 80af 	beq.w	801dac2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801d964:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d968:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d96c:	fb0b fc0c 	mul.w	ip, fp, ip
 801d970:	fb0b f606 	mul.w	r6, fp, r6
 801d974:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d978:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d97c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d980:	44dc      	add	ip, fp
 801d982:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d986:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d98a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d98e:	fb0a fb0b 	mul.w	fp, sl, fp
 801d992:	fb0a fa00 	mul.w	sl, sl, r0
 801d996:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d99a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d99e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d9a2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d9a6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d9aa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d9ae:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d9b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9b6:	0a36      	lsrs	r6, r6, #8
 801d9b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9bc:	44dc      	add	ip, fp
 801d9be:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d9c2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d9c6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d9ca:	fb09 fb0b 	mul.w	fp, r9, fp
 801d9ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9d2:	fb09 f905 	mul.w	r9, r9, r5
 801d9d6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d9da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9de:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801d9e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d9e6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d9ea:	fb0c fc07 	mul.w	ip, ip, r7
 801d9ee:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d9f2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801d9f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d9fa:	4458      	add	r0, fp
 801d9fc:	fb08 f505 	mul.w	r5, r8, r5
 801da00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801da04:	fb08 f802 	mul.w	r8, r8, r2
 801da08:	0a00      	lsrs	r0, r0, #8
 801da0a:	0a2a      	lsrs	r2, r5, #8
 801da0c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801da10:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da14:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801da18:	4415      	add	r5, r2
 801da1a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801da1e:	0a2d      	lsrs	r5, r5, #8
 801da20:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801da24:	9a00      	ldr	r2, [sp, #0]
 801da26:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da2a:	fb03 cc02 	mla	ip, r3, r2, ip
 801da2e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801da32:	9b01      	ldr	r3, [sp, #4]
 801da34:	fb05 c50e 	mla	r5, r5, lr, ip
 801da38:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801da3c:	fb00 5004 	mla	r0, r0, r4, r5
 801da40:	0a00      	lsrs	r0, r0, #8
 801da42:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801da46:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801da4a:	4378      	muls	r0, r7
 801da4c:	fb02 0006 	mla	r0, r2, r6, r0
 801da50:	fb0e 0e08 	mla	lr, lr, r8, r0
 801da54:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801da58:	fb04 e000 	mla	r0, r4, r0, lr
 801da5c:	0a00      	lsrs	r0, r0, #8
 801da5e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801da62:	4328      	orrs	r0, r5
 801da64:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801da68:	b2ad      	uxth	r5, r5
 801da6a:	b2c4      	uxtb	r4, r0
 801da6c:	436b      	muls	r3, r5
 801da6e:	fb14 f405 	smulbb	r4, r4, r5
 801da72:	1c5a      	adds	r2, r3, #1
 801da74:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801da78:	780b      	ldrb	r3, [r1, #0]
 801da7a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801da7e:	b2d2      	uxtb	r2, r2
 801da80:	fb03 4302 	mla	r3, r3, r2, r4
 801da84:	b29b      	uxth	r3, r3
 801da86:	1c5c      	adds	r4, r3, #1
 801da88:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801da8c:	784c      	ldrb	r4, [r1, #1]
 801da8e:	fb14 f402 	smulbb	r4, r4, r2
 801da92:	121b      	asrs	r3, r3, #8
 801da94:	700b      	strb	r3, [r1, #0]
 801da96:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801da9a:	fb03 4305 	mla	r3, r3, r5, r4
 801da9e:	b29b      	uxth	r3, r3
 801daa0:	1c5c      	adds	r4, r3, #1
 801daa2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801daa6:	0c04      	lsrs	r4, r0, #16
 801daa8:	7888      	ldrb	r0, [r1, #2]
 801daaa:	121b      	asrs	r3, r3, #8
 801daac:	fb10 f002 	smulbb	r0, r0, r2
 801dab0:	704b      	strb	r3, [r1, #1]
 801dab2:	fb04 0005 	mla	r0, r4, r5, r0
 801dab6:	b280      	uxth	r0, r0
 801dab8:	1c43      	adds	r3, r0, #1
 801daba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dabe:	1200      	asrs	r0, r0, #8
 801dac0:	7088      	strb	r0, [r1, #2]
 801dac2:	b003      	add	sp, #12
 801dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac8:	2600      	movs	r6, #0
 801daca:	e6f3      	b.n	801d8b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801dacc:	2000      	movs	r0, #0
 801dace:	4606      	mov	r6, r0
 801dad0:	e6fd      	b.n	801d8ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dad2:	2000      	movs	r0, #0
 801dad4:	e6fb      	b.n	801d8ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dad6:	4620      	mov	r0, r4
 801dad8:	e6f9      	b.n	801d8ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dada:	2500      	movs	r5, #0
 801dadc:	e70b      	b.n	801d8f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801dade:	2200      	movs	r2, #0
 801dae0:	4615      	mov	r5, r2
 801dae2:	e716      	b.n	801d912 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dae4:	4672      	mov	r2, lr
 801dae6:	4675      	mov	r5, lr
 801dae8:	e713      	b.n	801d912 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801daea:	2200      	movs	r2, #0
 801daec:	e711      	b.n	801d912 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801daee:	4622      	mov	r2, r4
 801daf0:	e70f      	b.n	801d912 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801daf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801daf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf6:	b09f      	sub	sp, #124	@ 0x7c
 801daf8:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dafa:	9309      	str	r3, [sp, #36]	@ 0x24
 801dafc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801dafe:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801db02:	901d      	str	r0, [sp, #116]	@ 0x74
 801db04:	931c      	str	r3, [sp, #112]	@ 0x70
 801db06:	6850      	ldr	r0, [r2, #4]
 801db08:	9119      	str	r1, [sp, #100]	@ 0x64
 801db0a:	6812      	ldr	r2, [r2, #0]
 801db0c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801db0e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801db12:	fb00 1303 	mla	r3, r0, r3, r1
 801db16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db1a:	18d3      	adds	r3, r2, r3
 801db1c:	930c      	str	r3, [sp, #48]	@ 0x30
 801db1e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	9312      	str	r3, [sp, #72]	@ 0x48
 801db24:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db26:	685e      	ldr	r6, [r3, #4]
 801db28:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801db2c:	3604      	adds	r6, #4
 801db2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801db30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db32:	2b00      	cmp	r3, #0
 801db34:	dc03      	bgt.n	801db3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801db36:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db38:	2b00      	cmp	r3, #0
 801db3a:	f340 8378 	ble.w	801e22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801db3e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db48:	1e48      	subs	r0, r1, #1
 801db4a:	1e57      	subs	r7, r2, #1
 801db4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db4e:	2b00      	cmp	r3, #0
 801db50:	f340 818c 	ble.w	801de6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801db54:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801db56:	142b      	asrs	r3, r5, #16
 801db58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801db5c:	d406      	bmi.n	801db6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db5e:	4584      	cmp	ip, r0
 801db60:	da04      	bge.n	801db6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db62:	2b00      	cmp	r3, #0
 801db64:	db02      	blt.n	801db6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db66:	42bb      	cmp	r3, r7
 801db68:	f2c0 8181 	blt.w	801de6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801db6c:	f11c 0c01 	adds.w	ip, ip, #1
 801db70:	f100 816f 	bmi.w	801de52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db74:	4561      	cmp	r1, ip
 801db76:	f2c0 816c 	blt.w	801de52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db7a:	3301      	adds	r3, #1
 801db7c:	f100 8169 	bmi.w	801de52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db80:	429a      	cmp	r2, r3
 801db82:	f2c0 8166 	blt.w	801de52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db88:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801db8a:	931a      	str	r3, [sp, #104]	@ 0x68
 801db8c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801db8e:	2b00      	cmp	r3, #0
 801db90:	f340 818c 	ble.w	801deac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801db94:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801db96:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801db9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801db9e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dba2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801dba4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dba8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dbaa:	141b      	asrs	r3, r3, #16
 801dbac:	f100 81d0 	bmi.w	801df50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbb0:	f100 38ff 	add.w	r8, r0, #4294967295
 801dbb4:	4543      	cmp	r3, r8
 801dbb6:	f280 81cb 	bge.w	801df50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbba:	f1bc 0f00 	cmp.w	ip, #0
 801dbbe:	f2c0 81c7 	blt.w	801df50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbc2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dbc6:	45c4      	cmp	ip, r8
 801dbc8:	f280 81c2 	bge.w	801df50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbcc:	b200      	sxth	r0, r0
 801dbce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dbd0:	fb0c 3300 	mla	r3, ip, r0, r3
 801dbd4:	eb04 0803 	add.w	r8, r4, r3
 801dbd8:	5ce3      	ldrb	r3, [r4, r3]
 801dbda:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dbde:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dbe2:	2a00      	cmp	r2, #0
 801dbe4:	f000 81a9 	beq.w	801df3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801dbe8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dbec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dbf0:	940e      	str	r4, [sp, #56]	@ 0x38
 801dbf2:	0e24      	lsrs	r4, r4, #24
 801dbf4:	9415      	str	r4, [sp, #84]	@ 0x54
 801dbf6:	b179      	cbz	r1, 801dc18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dbf8:	eb08 0c00 	add.w	ip, r8, r0
 801dbfc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dc00:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc04:	900a      	str	r0, [sp, #40]	@ 0x28
 801dc06:	0e00      	lsrs	r0, r0, #24
 801dc08:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dc0a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dc0e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc12:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dc14:	0e00      	lsrs	r0, r0, #24
 801dc16:	9016      	str	r0, [sp, #88]	@ 0x58
 801dc18:	b292      	uxth	r2, r2
 801dc1a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dc1c:	b289      	uxth	r1, r1
 801dc1e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dc20:	fb02 f901 	mul.w	r9, r2, r1
 801dc24:	0112      	lsls	r2, r2, #4
 801dc26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dc2a:	eba2 0809 	sub.w	r8, r2, r9
 801dc2e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dc32:	b289      	uxth	r1, r1
 801dc34:	fa1f f888 	uxth.w	r8, r8
 801dc38:	1a52      	subs	r2, r2, r1
 801dc3a:	fb08 f000 	mul.w	r0, r8, r0
 801dc3e:	b292      	uxth	r2, r2
 801dc40:	fb02 000e 	mla	r0, r2, lr, r0
 801dc44:	fb01 0004 	mla	r0, r1, r4, r0
 801dc48:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dc4a:	fb09 0004 	mla	r0, r9, r4, r0
 801dc4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dc52:	2800      	cmp	r0, #0
 801dc54:	f000 80f2 	beq.w	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dc58:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dc5c:	d01b      	beq.n	801dc96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dc5e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dc62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dc66:	fb0e fa0a 	mul.w	sl, lr, sl
 801dc6a:	fb0e fe03 	mul.w	lr, lr, r3
 801dc6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc72:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dc76:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dc7a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dc82:	4453      	add	r3, sl
 801dc84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc88:	0a1b      	lsrs	r3, r3, #8
 801dc8a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dc8e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc92:	ea43 030c 	orr.w	r3, r3, ip
 801dc96:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dc98:	2cff      	cmp	r4, #255	@ 0xff
 801dc9a:	d021      	beq.n	801dce0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801dc9c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dc9e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dca2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dca4:	fb04 fb0b 	mul.w	fp, r4, fp
 801dca8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dcaa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcae:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dcb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcb4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dcb8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcbc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcc0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dcc4:	44de      	add	lr, fp
 801dcc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcd2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcd6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dcda:	ea4e 040a 	orr.w	r4, lr, sl
 801dcde:	940e      	str	r4, [sp, #56]	@ 0x38
 801dce0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dce2:	2cff      	cmp	r4, #255	@ 0xff
 801dce4:	d021      	beq.n	801dd2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801dce6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dce8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dcec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dcee:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dcf4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcf8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dcfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcfe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd02:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd06:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd0a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd0e:	44de      	add	lr, fp
 801dd10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd1c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd20:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd24:	ea4e 040a 	orr.w	r4, lr, sl
 801dd28:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd2a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd2c:	2cff      	cmp	r4, #255	@ 0xff
 801dd2e:	d021      	beq.n	801dd74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dd30:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd32:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd36:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd38:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd3c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd3e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd42:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd48:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd4c:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd54:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd58:	44de      	add	lr, fp
 801dd5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd66:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd6a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd6e:	ea4e 040a 	orr.w	r4, lr, sl
 801dd72:	940f      	str	r4, [sp, #60]	@ 0x3c
 801dd74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd76:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801dd7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dd7e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd84:	fb08 fc0c 	mul.w	ip, r8, ip
 801dd88:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dd8c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd90:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd92:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dd96:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd9a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd9c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dda0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dda4:	fb08 f80e 	mul.w	r8, r8, lr
 801dda8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddac:	fb02 8303 	mla	r3, r2, r3, r8
 801ddb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddb2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ddb6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ddba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ddbc:	fb01 330a 	mla	r3, r1, sl, r3
 801ddc0:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801ddc4:	fb09 3901 	mla	r9, r9, r1, r3
 801ddc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ddcc:	4343      	muls	r3, r0
 801ddce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ddd2:	1c58      	adds	r0, r3, #1
 801ddd4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ddd8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801dddc:	ea4c 0c09 	orr.w	ip, ip, r9
 801dde0:	783b      	ldrb	r3, [r7, #0]
 801dde2:	fa5f f28c 	uxtb.w	r2, ip
 801dde6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ddea:	fb12 f201 	smulbb	r2, r2, r1
 801ddee:	b2c0      	uxtb	r0, r0
 801ddf0:	fb03 2300 	mla	r3, r3, r0, r2
 801ddf4:	b29b      	uxth	r3, r3
 801ddf6:	1c5a      	adds	r2, r3, #1
 801ddf8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ddfc:	787a      	ldrb	r2, [r7, #1]
 801ddfe:	fb12 f200 	smulbb	r2, r2, r0
 801de02:	121b      	asrs	r3, r3, #8
 801de04:	703b      	strb	r3, [r7, #0]
 801de06:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801de0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801de0e:	fb03 2301 	mla	r3, r3, r1, r2
 801de12:	b29b      	uxth	r3, r3
 801de14:	1c5a      	adds	r2, r3, #1
 801de16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de1a:	121b      	asrs	r3, r3, #8
 801de1c:	707b      	strb	r3, [r7, #1]
 801de1e:	78bb      	ldrb	r3, [r7, #2]
 801de20:	fb13 f000 	smulbb	r0, r3, r0
 801de24:	fb0c 0c01 	mla	ip, ip, r1, r0
 801de28:	fa1f fc8c 	uxth.w	ip, ip
 801de2c:	f10c 0301 	add.w	r3, ip, #1
 801de30:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801de34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de38:	f887 c002 	strb.w	ip, [r7, #2]
 801de3c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de3e:	3703      	adds	r7, #3
 801de40:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801de42:	441a      	add	r2, r3
 801de44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de46:	441d      	add	r5, r3
 801de48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801de4a:	9229      	str	r2, [sp, #164]	@ 0xa4
 801de4c:	3b01      	subs	r3, #1
 801de4e:	931a      	str	r3, [sp, #104]	@ 0x68
 801de50:	e69c      	b.n	801db8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801de52:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de54:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de56:	441c      	add	r4, r3
 801de58:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de5a:	441d      	add	r5, r3
 801de5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de5e:	9429      	str	r4, [sp, #164]	@ 0xa4
 801de60:	3b01      	subs	r3, #1
 801de62:	9309      	str	r3, [sp, #36]	@ 0x24
 801de64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de66:	3303      	adds	r3, #3
 801de68:	930c      	str	r3, [sp, #48]	@ 0x30
 801de6a:	e66f      	b.n	801db4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801de6c:	d026      	beq.n	801debc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801de6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de70:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801de72:	3b01      	subs	r3, #1
 801de74:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de76:	fb00 4003 	mla	r0, r0, r3, r4
 801de7a:	1400      	asrs	r0, r0, #16
 801de7c:	f53f ae83 	bmi.w	801db86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de80:	3901      	subs	r1, #1
 801de82:	4288      	cmp	r0, r1
 801de84:	f6bf ae7f 	bge.w	801db86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de88:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801de8a:	fb01 5303 	mla	r3, r1, r3, r5
 801de8e:	141b      	asrs	r3, r3, #16
 801de90:	f53f ae79 	bmi.w	801db86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de94:	3a01      	subs	r2, #1
 801de96:	4293      	cmp	r3, r2
 801de98:	f6bf ae75 	bge.w	801db86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de9e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801dea2:	f103 0e03 	add.w	lr, r3, #3
 801dea6:	f1bb 0f00 	cmp.w	fp, #0
 801deaa:	dc71      	bgt.n	801df90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801deac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801deb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801deb8:	4423      	add	r3, r4
 801deba:	930c      	str	r3, [sp, #48]	@ 0x30
 801debc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801debe:	2b00      	cmp	r3, #0
 801dec0:	f340 81b5 	ble.w	801e22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801dec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dec8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801deca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dece:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ded2:	eef0 6a62 	vmov.f32	s13, s5
 801ded6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801deda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dede:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dee2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801dee6:	eef0 6a43 	vmov.f32	s13, s6
 801deea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801deee:	ee16 5a90 	vmov	r5, s13
 801def2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801def6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801defa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801defe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df0a:	ee12 2a90 	vmov	r2, s5
 801df0e:	eef0 2a47 	vmov.f32	s5, s14
 801df12:	fb92 f3f3 	sdiv	r3, r2, r3
 801df16:	ee13 2a10 	vmov	r2, s6
 801df1a:	932b      	str	r3, [sp, #172]	@ 0xac
 801df1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df1e:	eeb0 3a67 	vmov.f32	s6, s15
 801df22:	fb92 f3f3 	sdiv	r3, r2, r3
 801df26:	932c      	str	r3, [sp, #176]	@ 0xb0
 801df28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df2c:	3b01      	subs	r3, #1
 801df2e:	9319      	str	r3, [sp, #100]	@ 0x64
 801df30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df32:	bf08      	it	eq
 801df34:	4613      	moveq	r3, r2
 801df36:	9309      	str	r3, [sp, #36]	@ 0x24
 801df38:	e5fa      	b.n	801db30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801df3a:	2900      	cmp	r1, #0
 801df3c:	f43f ae6c 	beq.w	801dc18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df40:	f818 0000 	ldrb.w	r0, [r8, r0]
 801df44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df48:	900a      	str	r0, [sp, #40]	@ 0x28
 801df4a:	0e00      	lsrs	r0, r0, #24
 801df4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801df4e:	e663      	b.n	801dc18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df50:	f113 0801 	adds.w	r8, r3, #1
 801df54:	f53f af72 	bmi.w	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df58:	4540      	cmp	r0, r8
 801df5a:	f6ff af6f 	blt.w	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df5e:	f11c 0801 	adds.w	r8, ip, #1
 801df62:	f53f af6b 	bmi.w	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df66:	45c6      	cmp	lr, r8
 801df68:	f6ff af68 	blt.w	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df6c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801df6e:	b200      	sxth	r0, r0
 801df70:	9302      	str	r3, [sp, #8]
 801df72:	fa0f f38e 	sxth.w	r3, lr
 801df76:	9000      	str	r0, [sp, #0]
 801df78:	9301      	str	r3, [sp, #4]
 801df7a:	4633      	mov	r3, r6
 801df7c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801df7e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801df82:	e9cd c203 	strd	ip, r2, [sp, #12]
 801df86:	4639      	mov	r1, r7
 801df88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801df8a:	f7ff fc74 	bl	801d876 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801df8e:	e755      	b.n	801de3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801df92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801df96:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801df98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df9c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801df9e:	1427      	asrs	r7, r4, #16
 801dfa0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dfa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dfa6:	142b      	asrs	r3, r5, #16
 801dfa8:	fb01 7303 	mla	r3, r1, r3, r7
 801dfac:	18e7      	adds	r7, r4, r3
 801dfae:	5ce3      	ldrb	r3, [r4, r3]
 801dfb0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dfb4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dfb8:	2a00      	cmp	r2, #0
 801dfba:	f000 812e 	beq.w	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801dfbe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dfc2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dfc6:	9410      	str	r4, [sp, #64]	@ 0x40
 801dfc8:	0e24      	lsrs	r4, r4, #24
 801dfca:	9417      	str	r4, [sp, #92]	@ 0x5c
 801dfcc:	b170      	cbz	r0, 801dfec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801dfce:	eb07 0801 	add.w	r8, r7, r1
 801dfd2:	5c79      	ldrb	r1, [r7, r1]
 801dfd4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dfd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dfda:	0e09      	lsrs	r1, r1, #24
 801dfdc:	9114      	str	r1, [sp, #80]	@ 0x50
 801dfde:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dfe2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dfe6:	9111      	str	r1, [sp, #68]	@ 0x44
 801dfe8:	0e09      	lsrs	r1, r1, #24
 801dfea:	9118      	str	r1, [sp, #96]	@ 0x60
 801dfec:	b292      	uxth	r2, r2
 801dfee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dff0:	b280      	uxth	r0, r0
 801dff2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dff4:	fb02 f900 	mul.w	r9, r2, r0
 801dff8:	0112      	lsls	r2, r2, #4
 801dffa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dffe:	eba2 0809 	sub.w	r8, r2, r9
 801e002:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e006:	b280      	uxth	r0, r0
 801e008:	fa1f f888 	uxth.w	r8, r8
 801e00c:	1a12      	subs	r2, r2, r0
 801e00e:	fb08 f101 	mul.w	r1, r8, r1
 801e012:	b292      	uxth	r2, r2
 801e014:	fb02 110c 	mla	r1, r2, ip, r1
 801e018:	fb00 1104 	mla	r1, r0, r4, r1
 801e01c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e01e:	fb09 1104 	mla	r1, r9, r4, r1
 801e022:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e026:	2900      	cmp	r1, #0
 801e028:	f000 80ec 	beq.w	801e204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e02c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e030:	d019      	beq.n	801e066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e032:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e036:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e03a:	fb0c fa0a 	mul.w	sl, ip, sl
 801e03e:	fb0c fc03 	mul.w	ip, ip, r3
 801e042:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e046:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e04a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e04e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e052:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e056:	4453      	add	r3, sl
 801e058:	0a3f      	lsrs	r7, r7, #8
 801e05a:	0a1b      	lsrs	r3, r3, #8
 801e05c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e060:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e064:	433b      	orrs	r3, r7
 801e066:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e068:	2cff      	cmp	r4, #255	@ 0xff
 801e06a:	d020      	beq.n	801e0ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e06c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e06e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e072:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e074:	4367      	muls	r7, r4
 801e076:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e078:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e07c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e080:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e082:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e086:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e08a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e08e:	44bc      	add	ip, r7
 801e090:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e094:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e098:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e09c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0a8:	ea4c 040a 	orr.w	r4, ip, sl
 801e0ac:	9410      	str	r4, [sp, #64]	@ 0x40
 801e0ae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0b0:	2cff      	cmp	r4, #255	@ 0xff
 801e0b2:	d020      	beq.n	801e0f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e0b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0bc:	4367      	muls	r7, r4
 801e0be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0c8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e0ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0d6:	44bc      	add	ip, r7
 801e0d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e0dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0f0:	ea4c 040a 	orr.w	r4, ip, sl
 801e0f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e0f6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e0f8:	2cff      	cmp	r4, #255	@ 0xff
 801e0fa:	d020      	beq.n	801e13e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e0fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e0fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e102:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e104:	4367      	muls	r7, r4
 801e106:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e108:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e10c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e110:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e112:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e116:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e11a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e11e:	44bc      	add	ip, r7
 801e120:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e124:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e128:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e12c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e130:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e134:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e138:	ea4c 040a 	orr.w	r4, ip, sl
 801e13c:	9411      	str	r4, [sp, #68]	@ 0x44
 801e13e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e140:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e144:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e148:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e14c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e14e:	fb08 f707 	mul.w	r7, r8, r7
 801e152:	fb02 770c 	mla	r7, r2, ip, r7
 801e156:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e15a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e15c:	fb00 770c 	mla	r7, r0, ip, r7
 801e160:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e164:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e166:	fb09 770c 	mla	r7, r9, ip, r7
 801e16a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e16e:	fb08 f80c 	mul.w	r8, r8, ip
 801e172:	0a3f      	lsrs	r7, r7, #8
 801e174:	fb02 8303 	mla	r3, r2, r3, r8
 801e178:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e17a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e17e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e182:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e184:	fb00 330a 	mla	r3, r0, sl, r3
 801e188:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e18c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e18e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e198:	434b      	muls	r3, r1
 801e19a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e19e:	1c59      	adds	r1, r3, #1
 801e1a0:	ea47 070c 	orr.w	r7, r7, ip
 801e1a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e1a8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e1ac:	b2fa      	uxtb	r2, r7
 801e1ae:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e1b2:	fb12 f200 	smulbb	r2, r2, r0
 801e1b6:	b2c9      	uxtb	r1, r1
 801e1b8:	fb03 2301 	mla	r3, r3, r1, r2
 801e1bc:	b29b      	uxth	r3, r3
 801e1be:	1c5a      	adds	r2, r3, #1
 801e1c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1c4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e1c8:	fb12 f201 	smulbb	r2, r2, r1
 801e1cc:	121b      	asrs	r3, r3, #8
 801e1ce:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e1d2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e1d6:	0c3f      	lsrs	r7, r7, #16
 801e1d8:	fb03 2300 	mla	r3, r3, r0, r2
 801e1dc:	b29b      	uxth	r3, r3
 801e1de:	1c5a      	adds	r2, r3, #1
 801e1e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1e4:	121b      	asrs	r3, r3, #8
 801e1e6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e1ea:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e1ee:	fb13 f101 	smulbb	r1, r3, r1
 801e1f2:	fb07 1700 	mla	r7, r7, r0, r1
 801e1f6:	b2bf      	uxth	r7, r7
 801e1f8:	1c7b      	adds	r3, r7, #1
 801e1fa:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e1fe:	123f      	asrs	r7, r7, #8
 801e200:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e204:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e206:	f10e 0e03 	add.w	lr, lr, #3
 801e20a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e20c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e210:	441a      	add	r2, r3
 801e212:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e214:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e216:	441d      	add	r5, r3
 801e218:	e645      	b.n	801dea6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e21a:	2800      	cmp	r0, #0
 801e21c:	f43f aee6 	beq.w	801dfec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e220:	5c79      	ldrb	r1, [r7, r1]
 801e222:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e226:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e228:	0e09      	lsrs	r1, r1, #24
 801e22a:	9114      	str	r1, [sp, #80]	@ 0x50
 801e22c:	e6de      	b.n	801dfec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e22e:	b01f      	add	sp, #124	@ 0x7c
 801e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e234 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e238:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e23c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801e240:	2d00      	cmp	r5, #0
 801e242:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e246:	fb05 700e 	mla	r0, r5, lr, r7
 801e24a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e24e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801e252:	eb02 0800 	add.w	r8, r2, r0
 801e256:	f2c0 8105 	blt.w	801e464 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e25a:	45a9      	cmp	r9, r5
 801e25c:	f340 8102 	ble.w	801e464 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e260:	2f00      	cmp	r7, #0
 801e262:	f2c0 80fd 	blt.w	801e460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e266:	45be      	cmp	lr, r7
 801e268:	f340 80fa 	ble.w	801e460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e26c:	5c12      	ldrb	r2, [r2, r0]
 801e26e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e272:	1c7a      	adds	r2, r7, #1
 801e274:	f100 80f9 	bmi.w	801e46a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e278:	4596      	cmp	lr, r2
 801e27a:	f340 80f6 	ble.w	801e46a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e27e:	2c00      	cmp	r4, #0
 801e280:	f000 80f5 	beq.w	801e46e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801e284:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e288:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e28c:	3501      	adds	r5, #1
 801e28e:	f100 80f2 	bmi.w	801e476 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e292:	45a9      	cmp	r9, r5
 801e294:	f340 80ef 	ble.w	801e476 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e298:	f1bc 0f00 	cmp.w	ip, #0
 801e29c:	f000 80ee 	beq.w	801e47c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801e2a0:	2f00      	cmp	r7, #0
 801e2a2:	f2c0 80e6 	blt.w	801e472 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e2a6:	45be      	cmp	lr, r7
 801e2a8:	f340 80e3 	ble.w	801e472 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e2ac:	f818 200e 	ldrb.w	r2, [r8, lr]
 801e2b0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e2b4:	3701      	adds	r7, #1
 801e2b6:	f100 80e4 	bmi.w	801e482 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2ba:	45be      	cmp	lr, r7
 801e2bc:	f340 80e1 	ble.w	801e482 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2c0:	2c00      	cmp	r4, #0
 801e2c2:	f000 80e0 	beq.w	801e486 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801e2c6:	44c6      	add	lr, r8
 801e2c8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e2cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e2d0:	b2a3      	uxth	r3, r4
 801e2d2:	fa1f fc8c 	uxth.w	ip, ip
 801e2d6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e2da:	fb0c fe03 	mul.w	lr, ip, r3
 801e2de:	011b      	lsls	r3, r3, #4
 801e2e0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e2e4:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801e2e8:	eba3 070e 	sub.w	r7, r3, lr
 801e2ec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801e2f0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e2f4:	fa1f f48c 	uxth.w	r4, ip
 801e2f8:	b2bf      	uxth	r7, r7
 801e2fa:	1b1b      	subs	r3, r3, r4
 801e2fc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e300:	fb07 fc0a 	mul.w	ip, r7, sl
 801e304:	b29b      	uxth	r3, r3
 801e306:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e30a:	9300      	str	r3, [sp, #0]
 801e30c:	fb04 cc09 	mla	ip, r4, r9, ip
 801e310:	fb0e cc08 	mla	ip, lr, r8, ip
 801e314:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e318:	9301      	str	r3, [sp, #4]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	f000 809d 	beq.w	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801e320:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801e324:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e328:	fb0b fc0c 	mul.w	ip, fp, ip
 801e32c:	fb0b f606 	mul.w	r6, fp, r6
 801e330:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e334:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e338:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e33c:	44dc      	add	ip, fp
 801e33e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801e342:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e346:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e34a:	fb0a fb0b 	mul.w	fp, sl, fp
 801e34e:	fb0a fa00 	mul.w	sl, sl, r0
 801e352:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801e356:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e35a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801e35e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e362:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e366:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e36a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e36e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e372:	0a36      	lsrs	r6, r6, #8
 801e374:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e378:	44dc      	add	ip, fp
 801e37a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801e37e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e382:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e386:	fb09 fb0b 	mul.w	fp, r9, fp
 801e38a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e38e:	fb09 f905 	mul.w	r9, r9, r5
 801e392:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e396:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e39a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801e39e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e3a2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3a6:	fb0c fc07 	mul.w	ip, ip, r7
 801e3aa:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e3ae:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801e3b2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e3b6:	4458      	add	r0, fp
 801e3b8:	fb08 f505 	mul.w	r5, r8, r5
 801e3bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e3c0:	fb08 f802 	mul.w	r8, r8, r2
 801e3c4:	0a00      	lsrs	r0, r0, #8
 801e3c6:	0a2a      	lsrs	r2, r5, #8
 801e3c8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e3cc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3d0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e3d4:	4415      	add	r5, r2
 801e3d6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e3da:	0a2d      	lsrs	r5, r5, #8
 801e3dc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e3e0:	9a00      	ldr	r2, [sp, #0]
 801e3e2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e3e6:	fb03 cc02 	mla	ip, r3, r2, ip
 801e3ea:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e3ee:	9b01      	ldr	r3, [sp, #4]
 801e3f0:	fb05 c50e 	mla	r5, r5, lr, ip
 801e3f4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e3f8:	43db      	mvns	r3, r3
 801e3fa:	fb00 5004 	mla	r0, r0, r4, r5
 801e3fe:	b2db      	uxtb	r3, r3
 801e400:	0a00      	lsrs	r0, r0, #8
 801e402:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e406:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801e40a:	4378      	muls	r0, r7
 801e40c:	fb02 0006 	mla	r0, r2, r6, r0
 801e410:	780a      	ldrb	r2, [r1, #0]
 801e412:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e416:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801e41a:	fb04 e000 	mla	r0, r4, r0, lr
 801e41e:	fb02 f403 	mul.w	r4, r2, r3
 801e422:	0a00      	lsrs	r0, r0, #8
 801e424:	1c62      	adds	r2, r4, #1
 801e426:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e42a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e42e:	4328      	orrs	r0, r5
 801e430:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e434:	700a      	strb	r2, [r1, #0]
 801e436:	784a      	ldrb	r2, [r1, #1]
 801e438:	435a      	muls	r2, r3
 801e43a:	1c54      	adds	r4, r2, #1
 801e43c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e440:	0a02      	lsrs	r2, r0, #8
 801e442:	0c00      	lsrs	r0, r0, #16
 801e444:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e448:	704a      	strb	r2, [r1, #1]
 801e44a:	788a      	ldrb	r2, [r1, #2]
 801e44c:	4353      	muls	r3, r2
 801e44e:	1c5a      	adds	r2, r3, #1
 801e450:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e454:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e458:	7088      	strb	r0, [r1, #2]
 801e45a:	b003      	add	sp, #12
 801e45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e460:	2600      	movs	r6, #0
 801e462:	e706      	b.n	801e272 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e464:	2000      	movs	r0, #0
 801e466:	4606      	mov	r6, r0
 801e468:	e710      	b.n	801e28c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e46a:	2000      	movs	r0, #0
 801e46c:	e70e      	b.n	801e28c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e46e:	4620      	mov	r0, r4
 801e470:	e70c      	b.n	801e28c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e472:	2500      	movs	r5, #0
 801e474:	e71e      	b.n	801e2b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e476:	2200      	movs	r2, #0
 801e478:	4615      	mov	r5, r2
 801e47a:	e729      	b.n	801e2d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e47c:	4662      	mov	r2, ip
 801e47e:	4665      	mov	r5, ip
 801e480:	e726      	b.n	801e2d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e482:	2200      	movs	r2, #0
 801e484:	e724      	b.n	801e2d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e486:	4622      	mov	r2, r4
 801e488:	e722      	b.n	801e2d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e48a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e48a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e48e:	b09b      	sub	sp, #108	@ 0x6c
 801e490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e494:	9218      	str	r2, [sp, #96]	@ 0x60
 801e496:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e498:	9019      	str	r0, [sp, #100]	@ 0x64
 801e49a:	9116      	str	r1, [sp, #88]	@ 0x58
 801e49c:	6850      	ldr	r0, [r2, #4]
 801e49e:	9307      	str	r3, [sp, #28]
 801e4a0:	6812      	ldr	r2, [r2, #0]
 801e4a2:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e4a4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e4a8:	fb00 1303 	mla	r3, r0, r3, r1
 801e4ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4b0:	18d3      	adds	r3, r2, r3
 801e4b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4ba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4bc:	685e      	ldr	r6, [r3, #4]
 801e4be:	3604      	adds	r6, #4
 801e4c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	dc03      	bgt.n	801e4ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e4c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	f340 834f 	ble.w	801eb6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e4ce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e4d8:	1e48      	subs	r0, r1, #1
 801e4da:	1e57      	subs	r7, r2, #1
 801e4dc:	9b07      	ldr	r3, [sp, #28]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	f340 8178 	ble.w	801e7d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e4e4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e4e6:	142b      	asrs	r3, r5, #16
 801e4e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e4ec:	d406      	bmi.n	801e4fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4ee:	4584      	cmp	ip, r0
 801e4f0:	da04      	bge.n	801e4fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	db02      	blt.n	801e4fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4f6:	42bb      	cmp	r3, r7
 801e4f8:	f2c0 816d 	blt.w	801e7d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e4fc:	f11c 0c01 	adds.w	ip, ip, #1
 801e500:	f100 815b 	bmi.w	801e7ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e504:	4561      	cmp	r1, ip
 801e506:	f2c0 8158 	blt.w	801e7ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e50a:	3301      	adds	r3, #1
 801e50c:	f100 8155 	bmi.w	801e7ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e510:	429a      	cmp	r2, r3
 801e512:	f2c0 8152 	blt.w	801e7ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e516:	9b07      	ldr	r3, [sp, #28]
 801e518:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e51a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e51c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e51e:	2b00      	cmp	r3, #0
 801e520:	f340 8178 	ble.w	801e814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e524:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e526:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e52a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e52e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e532:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e534:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e538:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e53a:	141b      	asrs	r3, r3, #16
 801e53c:	f100 81ba 	bmi.w	801e8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e540:	f101 38ff 	add.w	r8, r1, #4294967295
 801e544:	4543      	cmp	r3, r8
 801e546:	f280 81b5 	bge.w	801e8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e54a:	f1bc 0f00 	cmp.w	ip, #0
 801e54e:	f2c0 81b1 	blt.w	801e8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e552:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e556:	45c4      	cmp	ip, r8
 801e558:	f280 81ac 	bge.w	801e8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e55c:	b209      	sxth	r1, r1
 801e55e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e560:	fb0c 3301 	mla	r3, ip, r1, r3
 801e564:	eb04 0803 	add.w	r8, r4, r3
 801e568:	5ce3      	ldrb	r3, [r4, r3]
 801e56a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e56e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e572:	2a00      	cmp	r2, #0
 801e574:	f000 8193 	beq.w	801e89e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e578:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e57c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e580:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e582:	0e24      	lsrs	r4, r4, #24
 801e584:	9412      	str	r4, [sp, #72]	@ 0x48
 801e586:	b178      	cbz	r0, 801e5a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e588:	eb08 0c01 	add.w	ip, r8, r1
 801e58c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e590:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e594:	9108      	str	r1, [sp, #32]
 801e596:	0e09      	lsrs	r1, r1, #24
 801e598:	9110      	str	r1, [sp, #64]	@ 0x40
 801e59a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e59e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e5a2:	910c      	str	r1, [sp, #48]	@ 0x30
 801e5a4:	0e09      	lsrs	r1, r1, #24
 801e5a6:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e5a8:	b292      	uxth	r2, r2
 801e5aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e5ac:	b280      	uxth	r0, r0
 801e5ae:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e5b0:	fb02 f900 	mul.w	r9, r2, r0
 801e5b4:	0112      	lsls	r2, r2, #4
 801e5b6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e5ba:	eba2 0809 	sub.w	r8, r2, r9
 801e5be:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e5c2:	b280      	uxth	r0, r0
 801e5c4:	fa1f f888 	uxth.w	r8, r8
 801e5c8:	1a12      	subs	r2, r2, r0
 801e5ca:	fb08 f101 	mul.w	r1, r8, r1
 801e5ce:	b292      	uxth	r2, r2
 801e5d0:	fb02 110e 	mla	r1, r2, lr, r1
 801e5d4:	fb00 1104 	mla	r1, r0, r4, r1
 801e5d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e5da:	fb09 1104 	mla	r1, r9, r4, r1
 801e5de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e5e2:	2900      	cmp	r1, #0
 801e5e4:	f000 80de 	beq.w	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e5e8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e5ec:	d01b      	beq.n	801e626 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e5ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e5f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e5f6:	fb0e fa0a 	mul.w	sl, lr, sl
 801e5fa:	fb0e fe03 	mul.w	lr, lr, r3
 801e5fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e602:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e606:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e60a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e60e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e612:	4453      	add	r3, sl
 801e614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e618:	0a1b      	lsrs	r3, r3, #8
 801e61a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e61e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e622:	ea43 030c 	orr.w	r3, r3, ip
 801e626:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e628:	2cff      	cmp	r4, #255	@ 0xff
 801e62a:	d021      	beq.n	801e670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e62c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e62e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e632:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e634:	fb04 fb0b 	mul.w	fp, r4, fp
 801e638:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e63a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e63e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e640:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e644:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e648:	fb04 fa0a 	mul.w	sl, r4, sl
 801e64c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e650:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e654:	44de      	add	lr, fp
 801e656:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e65a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e65e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e662:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e666:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e66a:	ea4e 040a 	orr.w	r4, lr, sl
 801e66e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e670:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e672:	2cff      	cmp	r4, #255	@ 0xff
 801e674:	d021      	beq.n	801e6ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e676:	9c08      	ldr	r4, [sp, #32]
 801e678:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e67c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e67e:	fb04 fb0b 	mul.w	fp, r4, fp
 801e682:	9c08      	ldr	r4, [sp, #32]
 801e684:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e688:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e68a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e68e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e692:	fb04 fa0a 	mul.w	sl, r4, sl
 801e696:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e69a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e69e:	44de      	add	lr, fp
 801e6a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e6a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e6a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6b4:	ea4e 040a 	orr.w	r4, lr, sl
 801e6b8:	9408      	str	r4, [sp, #32]
 801e6ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6bc:	2cff      	cmp	r4, #255	@ 0xff
 801e6be:	d021      	beq.n	801e704 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6c0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6c2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e6c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6c8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e6cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6ce:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e6d8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e6dc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6e4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e6e8:	44de      	add	lr, fp
 801e6ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e6ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e6f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6fe:	ea4e 040a 	orr.w	r4, lr, sl
 801e702:	940c      	str	r4, [sp, #48]	@ 0x30
 801e704:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e706:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e70a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e70e:	43c9      	mvns	r1, r1
 801e710:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e714:	9c08      	ldr	r4, [sp, #32]
 801e716:	b2c9      	uxtb	r1, r1
 801e718:	fb08 fc0c 	mul.w	ip, r8, ip
 801e71c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e720:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e724:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e726:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e72a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e72e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e730:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e734:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e738:	fb08 f80e 	mul.w	r8, r8, lr
 801e73c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e740:	fb02 8303 	mla	r3, r2, r3, r8
 801e744:	9a08      	ldr	r2, [sp, #32]
 801e746:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e74a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e74e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e750:	fb00 330a 	mla	r3, r0, sl, r3
 801e754:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801e758:	fb09 3900 	mla	r9, r9, r0, r3
 801e75c:	783b      	ldrb	r3, [r7, #0]
 801e75e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e762:	fb03 f201 	mul.w	r2, r3, r1
 801e766:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e76a:	1c53      	adds	r3, r2, #1
 801e76c:	ea4c 0c09 	orr.w	ip, ip, r9
 801e770:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e774:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e778:	703b      	strb	r3, [r7, #0]
 801e77a:	787b      	ldrb	r3, [r7, #1]
 801e77c:	434b      	muls	r3, r1
 801e77e:	1c5a      	adds	r2, r3, #1
 801e780:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e784:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e788:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e78c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e790:	707b      	strb	r3, [r7, #1]
 801e792:	78bb      	ldrb	r3, [r7, #2]
 801e794:	4359      	muls	r1, r3
 801e796:	1c4b      	adds	r3, r1, #1
 801e798:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e79c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e7a0:	f887 c002 	strb.w	ip, [r7, #2]
 801e7a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e7a6:	3703      	adds	r7, #3
 801e7a8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e7aa:	441a      	add	r2, r3
 801e7ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7ae:	441d      	add	r5, r3
 801e7b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e7b2:	9225      	str	r2, [sp, #148]	@ 0x94
 801e7b4:	3b01      	subs	r3, #1
 801e7b6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7b8:	e6b0      	b.n	801e51c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e7bc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e7be:	441c      	add	r4, r3
 801e7c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7c2:	441d      	add	r5, r3
 801e7c4:	9b07      	ldr	r3, [sp, #28]
 801e7c6:	9425      	str	r4, [sp, #148]	@ 0x94
 801e7c8:	3b01      	subs	r3, #1
 801e7ca:	9307      	str	r3, [sp, #28]
 801e7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7ce:	3303      	adds	r3, #3
 801e7d0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7d2:	e683      	b.n	801e4dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7d4:	d026      	beq.n	801e824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e7d6:	9b07      	ldr	r3, [sp, #28]
 801e7d8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e7da:	3b01      	subs	r3, #1
 801e7dc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e7de:	fb00 4003 	mla	r0, r0, r3, r4
 801e7e2:	1400      	asrs	r0, r0, #16
 801e7e4:	f53f ae97 	bmi.w	801e516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7e8:	3901      	subs	r1, #1
 801e7ea:	4288      	cmp	r0, r1
 801e7ec:	f6bf ae93 	bge.w	801e516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7f0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e7f2:	fb01 5303 	mla	r3, r1, r3, r5
 801e7f6:	141b      	asrs	r3, r3, #16
 801e7f8:	f53f ae8d 	bmi.w	801e516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7fc:	3a01      	subs	r2, #1
 801e7fe:	4293      	cmp	r3, r2
 801e800:	f6bf ae89 	bge.w	801e516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e806:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e80a:	f103 0e03 	add.w	lr, r3, #3
 801e80e:	f1bb 0f00 	cmp.w	fp, #0
 801e812:	dc6d      	bgt.n	801e8f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e814:	9b07      	ldr	r3, [sp, #28]
 801e816:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e81c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e820:	4423      	add	r3, r4
 801e822:	930a      	str	r3, [sp, #40]	@ 0x28
 801e824:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e826:	2b00      	cmp	r3, #0
 801e828:	f340 81a0 	ble.w	801eb6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e82c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e830:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e832:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e836:	eeb0 6a62 	vmov.f32	s12, s5
 801e83a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e83e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e842:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e846:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801e84a:	eeb0 6a43 	vmov.f32	s12, s6
 801e84e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e852:	ee16 5a10 	vmov	r5, s12
 801e856:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e85a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e85e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e862:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e866:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e86a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e86e:	ee12 2a90 	vmov	r2, s5
 801e872:	eef0 2a47 	vmov.f32	s5, s14
 801e876:	fb92 f3f3 	sdiv	r3, r2, r3
 801e87a:	ee13 2a10 	vmov	r2, s6
 801e87e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e880:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e882:	eeb0 3a67 	vmov.f32	s6, s15
 801e886:	fb92 f3f3 	sdiv	r3, r2, r3
 801e88a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e88c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e88e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e890:	3b01      	subs	r3, #1
 801e892:	9316      	str	r3, [sp, #88]	@ 0x58
 801e894:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e896:	bf08      	it	eq
 801e898:	4613      	moveq	r3, r2
 801e89a:	9307      	str	r3, [sp, #28]
 801e89c:	e610      	b.n	801e4c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e89e:	2800      	cmp	r0, #0
 801e8a0:	f43f ae82 	beq.w	801e5a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8a4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e8a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e8ac:	9108      	str	r1, [sp, #32]
 801e8ae:	0e09      	lsrs	r1, r1, #24
 801e8b0:	9110      	str	r1, [sp, #64]	@ 0x40
 801e8b2:	e679      	b.n	801e5a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8b4:	f113 0801 	adds.w	r8, r3, #1
 801e8b8:	f53f af74 	bmi.w	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8bc:	4541      	cmp	r1, r8
 801e8be:	f6ff af71 	blt.w	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8c2:	f11c 0801 	adds.w	r8, ip, #1
 801e8c6:	f53f af6d 	bmi.w	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8ca:	45c6      	cmp	lr, r8
 801e8cc:	f6ff af6a 	blt.w	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8d0:	b209      	sxth	r1, r1
 801e8d2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e8d6:	fa0f f38e 	sxth.w	r3, lr
 801e8da:	9100      	str	r1, [sp, #0]
 801e8dc:	4639      	mov	r1, r7
 801e8de:	9301      	str	r3, [sp, #4]
 801e8e0:	4633      	mov	r3, r6
 801e8e2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e8e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e8e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e8ea:	f7ff fca3 	bl	801e234 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e8ee:	e759      	b.n	801e7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8f0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e8f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8f6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e8f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8fc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e8fe:	1427      	asrs	r7, r4, #16
 801e900:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e906:	142b      	asrs	r3, r5, #16
 801e908:	fb01 7303 	mla	r3, r1, r3, r7
 801e90c:	18e7      	adds	r7, r4, r3
 801e90e:	5ce3      	ldrb	r3, [r4, r3]
 801e910:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e914:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e918:	2a00      	cmp	r2, #0
 801e91a:	f000 811d 	beq.w	801eb58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801e91e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e922:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e926:	940d      	str	r4, [sp, #52]	@ 0x34
 801e928:	0e24      	lsrs	r4, r4, #24
 801e92a:	9414      	str	r4, [sp, #80]	@ 0x50
 801e92c:	b170      	cbz	r0, 801e94c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e92e:	eb07 0801 	add.w	r8, r7, r1
 801e932:	5c79      	ldrb	r1, [r7, r1]
 801e934:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e938:	9109      	str	r1, [sp, #36]	@ 0x24
 801e93a:	0e09      	lsrs	r1, r1, #24
 801e93c:	9111      	str	r1, [sp, #68]	@ 0x44
 801e93e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e942:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e946:	910e      	str	r1, [sp, #56]	@ 0x38
 801e948:	0e09      	lsrs	r1, r1, #24
 801e94a:	9115      	str	r1, [sp, #84]	@ 0x54
 801e94c:	b292      	uxth	r2, r2
 801e94e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e950:	b280      	uxth	r0, r0
 801e952:	fb02 f900 	mul.w	r9, r2, r0
 801e956:	0112      	lsls	r2, r2, #4
 801e958:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e95c:	eba2 0809 	sub.w	r8, r2, r9
 801e960:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e964:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e966:	b280      	uxth	r0, r0
 801e968:	fa1f f888 	uxth.w	r8, r8
 801e96c:	1a09      	subs	r1, r1, r0
 801e96e:	fb08 f202 	mul.w	r2, r8, r2
 801e972:	b289      	uxth	r1, r1
 801e974:	fb01 220c 	mla	r2, r1, ip, r2
 801e978:	fb00 2204 	mla	r2, r0, r4, r2
 801e97c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e97e:	fb09 2204 	mla	r2, r9, r4, r2
 801e982:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e986:	2a00      	cmp	r2, #0
 801e988:	f000 80db 	beq.w	801eb42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e98c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e990:	d019      	beq.n	801e9c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801e992:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e996:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e99a:	fb0c fa0a 	mul.w	sl, ip, sl
 801e99e:	fb0c fc03 	mul.w	ip, ip, r3
 801e9a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e9a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e9aa:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e9ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e9b6:	4453      	add	r3, sl
 801e9b8:	0a3f      	lsrs	r7, r7, #8
 801e9ba:	0a1b      	lsrs	r3, r3, #8
 801e9bc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e9c0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9c4:	433b      	orrs	r3, r7
 801e9c6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9c8:	2cff      	cmp	r4, #255	@ 0xff
 801e9ca:	d020      	beq.n	801ea0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801e9cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e9ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e9d2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9d4:	4367      	muls	r7, r4
 801e9d6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e9d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e9dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e9e0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e9e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9ee:	44bc      	add	ip, r7
 801e9f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e9f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea08:	ea4c 040a 	orr.w	r4, ip, sl
 801ea0c:	940d      	str	r4, [sp, #52]	@ 0x34
 801ea0e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea10:	2cff      	cmp	r4, #255	@ 0xff
 801ea12:	d020      	beq.n	801ea56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801ea14:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea16:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea1a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea1c:	4367      	muls	r7, r4
 801ea1e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea24:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea28:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea2a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea32:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea36:	44bc      	add	ip, r7
 801ea38:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea4c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea50:	ea4c 040a 	orr.w	r4, ip, sl
 801ea54:	9409      	str	r4, [sp, #36]	@ 0x24
 801ea56:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea58:	2cff      	cmp	r4, #255	@ 0xff
 801ea5a:	d020      	beq.n	801ea9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ea5c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea5e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea62:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea64:	4367      	muls	r7, r4
 801ea66:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea6c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea70:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea72:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea7a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea7e:	44bc      	add	ip, r7
 801ea80:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea8c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea94:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea98:	ea4c 040a 	orr.w	r4, ip, sl
 801ea9c:	940e      	str	r4, [sp, #56]	@ 0x38
 801ea9e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eaa0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801eaa4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801eaa8:	43d2      	mvns	r2, r2
 801eaaa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801eaae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801eab0:	b2d2      	uxtb	r2, r2
 801eab2:	fb08 f707 	mul.w	r7, r8, r7
 801eab6:	fb01 770c 	mla	r7, r1, ip, r7
 801eaba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eabe:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eac0:	fb00 770c 	mla	r7, r0, ip, r7
 801eac4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eac8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eaca:	fb09 770c 	mla	r7, r9, ip, r7
 801eace:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ead2:	fb08 f80c 	mul.w	r8, r8, ip
 801ead6:	0a3f      	lsrs	r7, r7, #8
 801ead8:	fb01 8303 	mla	r3, r1, r3, r8
 801eadc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801eade:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801eae2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801eae6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801eae8:	fb00 330a 	mla	r3, r0, sl, r3
 801eaec:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801eaf0:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eaf4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eaf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eafc:	fb03 f102 	mul.w	r1, r3, r2
 801eb00:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801eb04:	1c4b      	adds	r3, r1, #1
 801eb06:	ea47 070c 	orr.w	r7, r7, ip
 801eb0a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb0e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801eb12:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eb16:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801eb1a:	4353      	muls	r3, r2
 801eb1c:	1c59      	adds	r1, r3, #1
 801eb1e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eb22:	0a3b      	lsrs	r3, r7, #8
 801eb24:	0c3f      	lsrs	r7, r7, #16
 801eb26:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb2a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801eb2e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801eb32:	435a      	muls	r2, r3
 801eb34:	1c53      	adds	r3, r2, #1
 801eb36:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eb3a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eb3e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eb42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb44:	f10e 0e03 	add.w	lr, lr, #3
 801eb48:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801eb4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb4e:	441a      	add	r2, r3
 801eb50:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb52:	9225      	str	r2, [sp, #148]	@ 0x94
 801eb54:	441d      	add	r5, r3
 801eb56:	e65a      	b.n	801e80e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801eb58:	2800      	cmp	r0, #0
 801eb5a:	f43f aef7 	beq.w	801e94c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb5e:	5c79      	ldrb	r1, [r7, r1]
 801eb60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eb64:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb66:	0e09      	lsrs	r1, r1, #24
 801eb68:	9111      	str	r1, [sp, #68]	@ 0x44
 801eb6a:	e6ef      	b.n	801e94c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb6c:	b01b      	add	sp, #108	@ 0x6c
 801eb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801eb72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb76:	b08d      	sub	sp, #52	@ 0x34
 801eb78:	468b      	mov	fp, r1
 801eb7a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801eb7e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801eb82:	fb0c 5703 	mla	r7, ip, r3, r5
 801eb86:	f1bc 0f00 	cmp.w	ip, #0
 801eb8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eb8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eb90:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801eb94:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801eb98:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801eb9c:	eb02 0607 	add.w	r6, r2, r7
 801eba0:	f89b 4000 	ldrb.w	r4, [fp]
 801eba4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801eba8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ebac:	f2c0 80c1 	blt.w	801ed32 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ebb0:	45e6      	cmp	lr, ip
 801ebb2:	f340 80be 	ble.w	801ed32 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ebb6:	2d00      	cmp	r5, #0
 801ebb8:	f2c0 80b7 	blt.w	801ed2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ebbc:	42ab      	cmp	r3, r5
 801ebbe:	f340 80b4 	ble.w	801ed2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ebc2:	5dd2      	ldrb	r2, [r2, r7]
 801ebc4:	9205      	str	r2, [sp, #20]
 801ebc6:	7872      	ldrb	r2, [r6, #1]
 801ebc8:	9206      	str	r2, [sp, #24]
 801ebca:	78b2      	ldrb	r2, [r6, #2]
 801ebcc:	9207      	str	r2, [sp, #28]
 801ebce:	1c6a      	adds	r2, r5, #1
 801ebd0:	f100 80b6 	bmi.w	801ed40 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebd4:	4293      	cmp	r3, r2
 801ebd6:	f340 80b3 	ble.w	801ed40 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebda:	f1b8 0f00 	cmp.w	r8, #0
 801ebde:	f000 80af 	beq.w	801ed40 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebe2:	78f2      	ldrb	r2, [r6, #3]
 801ebe4:	9201      	str	r2, [sp, #4]
 801ebe6:	7932      	ldrb	r2, [r6, #4]
 801ebe8:	9202      	str	r2, [sp, #8]
 801ebea:	7972      	ldrb	r2, [r6, #5]
 801ebec:	9203      	str	r2, [sp, #12]
 801ebee:	f11c 0c01 	adds.w	ip, ip, #1
 801ebf2:	f100 80ad 	bmi.w	801ed50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ebf6:	45e6      	cmp	lr, ip
 801ebf8:	f340 80aa 	ble.w	801ed50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ebfc:	f1ba 0f00 	cmp.w	sl, #0
 801ec00:	f000 80a6 	beq.w	801ed50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ec04:	2d00      	cmp	r5, #0
 801ec06:	f2c0 809f 	blt.w	801ed48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ec0a:	42ab      	cmp	r3, r5
 801ec0c:	f340 809c 	ble.w	801ed48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ec10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ec14:	f816 9002 	ldrb.w	r9, [r6, r2]
 801ec18:	2203      	movs	r2, #3
 801ec1a:	fb03 6c02 	mla	ip, r3, r2, r6
 801ec1e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ec22:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ec26:	9704      	str	r7, [sp, #16]
 801ec28:	3501      	adds	r5, #1
 801ec2a:	f100 8098 	bmi.w	801ed5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec2e:	42ab      	cmp	r3, r5
 801ec30:	f340 8095 	ble.w	801ed5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec34:	f1b8 0f00 	cmp.w	r8, #0
 801ec38:	f000 8091 	beq.w	801ed5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec3c:	f04f 0c03 	mov.w	ip, #3
 801ec40:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801ec44:	5cb5      	ldrb	r5, [r6, r2]
 801ec46:	fb03 620c 	mla	r2, r3, ip, r6
 801ec4a:	fb03 630c 	mla	r3, r3, ip, r6
 801ec4e:	7912      	ldrb	r2, [r2, #4]
 801ec50:	795e      	ldrb	r6, [r3, #5]
 801ec52:	fa1f f388 	uxth.w	r3, r8
 801ec56:	fa1f fc8a 	uxth.w	ip, sl
 801ec5a:	fb03 f70c 	mul.w	r7, r3, ip
 801ec5e:	011b      	lsls	r3, r3, #4
 801ec60:	9708      	str	r7, [sp, #32]
 801ec62:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801ec66:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801ec6a:	1bdb      	subs	r3, r3, r7
 801ec6c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801ec70:	fa1f fc8c 	uxth.w	ip, ip
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	9709      	str	r7, [sp, #36]	@ 0x24
 801ec78:	ebaa 0a0c 	sub.w	sl, sl, ip
 801ec7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ec7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec80:	fa1f fa8a 	uxth.w	sl, sl
 801ec84:	ea6f 0807 	mvn.w	r8, r7
 801ec88:	9f01      	ldr	r7, [sp, #4]
 801ec8a:	435f      	muls	r7, r3
 801ec8c:	9b05      	ldr	r3, [sp, #20]
 801ec8e:	fa5f f888 	uxtb.w	r8, r8
 801ec92:	fb0a 7703 	mla	r7, sl, r3, r7
 801ec96:	9b08      	ldr	r3, [sp, #32]
 801ec98:	fb14 f408 	smulbb	r4, r4, r8
 801ec9c:	fb0c 7709 	mla	r7, ip, r9, r7
 801eca0:	fb10 f008 	smulbb	r0, r0, r8
 801eca4:	fb11 f108 	smulbb	r1, r1, r8
 801eca8:	fb03 7705 	mla	r7, r3, r5, r7
 801ecac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecae:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ecb2:	fb07 4703 	mla	r7, r7, r3, r4
 801ecb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ecb8:	b2bf      	uxth	r7, r7
 801ecba:	1c7c      	adds	r4, r7, #1
 801ecbc:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801ecc0:	1224      	asrs	r4, r4, #8
 801ecc2:	f88b 4000 	strb.w	r4, [fp]
 801ecc6:	9c02      	ldr	r4, [sp, #8]
 801ecc8:	435c      	muls	r4, r3
 801ecca:	9b06      	ldr	r3, [sp, #24]
 801eccc:	fb0a 4403 	mla	r4, sl, r3, r4
 801ecd0:	9b04      	ldr	r3, [sp, #16]
 801ecd2:	fb0c 4403 	mla	r4, ip, r3, r4
 801ecd6:	9b08      	ldr	r3, [sp, #32]
 801ecd8:	fb03 4402 	mla	r4, r3, r2, r4
 801ecdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ece0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ece4:	fb04 0403 	mla	r4, r4, r3, r0
 801ece8:	9b03      	ldr	r3, [sp, #12]
 801ecea:	435a      	muls	r2, r3
 801ecec:	b2a4      	uxth	r4, r4
 801ecee:	4613      	mov	r3, r2
 801ecf0:	9a07      	ldr	r2, [sp, #28]
 801ecf2:	1c60      	adds	r0, r4, #1
 801ecf4:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ecf8:	9b08      	ldr	r3, [sp, #32]
 801ecfa:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ecfe:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ed02:	1224      	asrs	r4, r4, #8
 801ed04:	fb03 c606 	mla	r6, r3, r6, ip
 801ed08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed0a:	f88b 4001 	strb.w	r4, [fp, #1]
 801ed0e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ed12:	fb06 1103 	mla	r1, r6, r3, r1
 801ed16:	b289      	uxth	r1, r1
 801ed18:	1c4e      	adds	r6, r1, #1
 801ed1a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801ed1e:	1209      	asrs	r1, r1, #8
 801ed20:	f88b 1002 	strb.w	r1, [fp, #2]
 801ed24:	b00d      	add	sp, #52	@ 0x34
 801ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed2e:	9405      	str	r4, [sp, #20]
 801ed30:	e74d      	b.n	801ebce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801ed32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed36:	9401      	str	r4, [sp, #4]
 801ed38:	9405      	str	r4, [sp, #20]
 801ed3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed3e:	e756      	b.n	801ebee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed44:	9401      	str	r4, [sp, #4]
 801ed46:	e752      	b.n	801ebee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed48:	468e      	mov	lr, r1
 801ed4a:	9004      	str	r0, [sp, #16]
 801ed4c:	46a1      	mov	r9, r4
 801ed4e:	e76b      	b.n	801ec28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801ed50:	460e      	mov	r6, r1
 801ed52:	4602      	mov	r2, r0
 801ed54:	4625      	mov	r5, r4
 801ed56:	468e      	mov	lr, r1
 801ed58:	9004      	str	r0, [sp, #16]
 801ed5a:	46a1      	mov	r9, r4
 801ed5c:	e779      	b.n	801ec52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801ed5e:	460e      	mov	r6, r1
 801ed60:	4602      	mov	r2, r0
 801ed62:	4625      	mov	r5, r4
 801ed64:	e775      	b.n	801ec52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801ed66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed6a:	b09f      	sub	sp, #124	@ 0x7c
 801ed6c:	920e      	str	r2, [sp, #56]	@ 0x38
 801ed6e:	9307      	str	r3, [sp, #28]
 801ed70:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ed72:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801ed76:	901d      	str	r0, [sp, #116]	@ 0x74
 801ed78:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed7a:	6850      	ldr	r0, [r2, #4]
 801ed7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed7e:	6812      	ldr	r2, [r2, #0]
 801ed80:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801ed84:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801ed88:	fb00 1303 	mla	r3, r0, r3, r1
 801ed8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed90:	18d3      	adds	r3, r2, r3
 801ed92:	9308      	str	r3, [sp, #32]
 801ed94:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ed96:	681b      	ldr	r3, [r3, #0]
 801ed98:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed9c:	43db      	mvns	r3, r3
 801ed9e:	b2db      	uxtb	r3, r3
 801eda0:	9309      	str	r3, [sp, #36]	@ 0x24
 801eda2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	dc03      	bgt.n	801edb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eda8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edaa:	2b00      	cmp	r3, #0
 801edac:	f340 81f5 	ble.w	801f19a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801edb0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801edb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801edb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801edba:	1e48      	subs	r0, r1, #1
 801edbc:	1e54      	subs	r4, r2, #1
 801edbe:	9b07      	ldr	r3, [sp, #28]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	f340 80d5 	ble.w	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801edc6:	ea5f 452a 	movs.w	r5, sl, asr #16
 801edca:	ea4f 4328 	mov.w	r3, r8, asr #16
 801edce:	d406      	bmi.n	801edde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edd0:	4285      	cmp	r5, r0
 801edd2:	da04      	bge.n	801edde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	db02      	blt.n	801edde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edd8:	42a3      	cmp	r3, r4
 801edda:	f2c0 80ca 	blt.w	801ef72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801edde:	3501      	adds	r5, #1
 801ede0:	f100 80bb 	bmi.w	801ef5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ede4:	42a9      	cmp	r1, r5
 801ede6:	f2c0 80b8 	blt.w	801ef5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801edea:	3301      	adds	r3, #1
 801edec:	f100 80b5 	bmi.w	801ef5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801edf0:	429a      	cmp	r2, r3
 801edf2:	f2c0 80b2 	blt.w	801ef5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801edf6:	9b07      	ldr	r3, [sp, #28]
 801edf8:	9d08      	ldr	r5, [sp, #32]
 801edfa:	930d      	str	r3, [sp, #52]	@ 0x34
 801edfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	f340 80d6 	ble.w	801efb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801ee04:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801ee06:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ee0a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ee0c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ee10:	68c6      	ldr	r6, [r0, #12]
 801ee12:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ee16:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ee1a:	689b      	ldr	r3, [r3, #8]
 801ee1c:	f100 810f 	bmi.w	801f03e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee20:	1e5f      	subs	r7, r3, #1
 801ee22:	42b8      	cmp	r0, r7
 801ee24:	f280 810b 	bge.w	801f03e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee28:	2c00      	cmp	r4, #0
 801ee2a:	f2c0 8108 	blt.w	801f03e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee2e:	1e77      	subs	r7, r6, #1
 801ee30:	42bc      	cmp	r4, r7
 801ee32:	f280 8104 	bge.w	801f03e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee36:	b21b      	sxth	r3, r3
 801ee38:	fb04 0003 	mla	r0, r4, r3, r0
 801ee3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ee3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee42:	1826      	adds	r6, r4, r0
 801ee44:	5c24      	ldrb	r4, [r4, r0]
 801ee46:	78b7      	ldrb	r7, [r6, #2]
 801ee48:	7870      	ldrb	r0, [r6, #1]
 801ee4a:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ee4c:	7977      	ldrb	r7, [r6, #5]
 801ee4e:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ee52:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ee56:	9710      	str	r7, [sp, #64]	@ 0x40
 801ee58:	b1c9      	cbz	r1, 801ee8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ee5a:	f04f 0b03 	mov.w	fp, #3
 801ee5e:	f06f 0904 	mvn.w	r9, #4
 801ee62:	3605      	adds	r6, #5
 801ee64:	fb13 930b 	smlabb	r3, r3, fp, r9
 801ee68:	eb06 0b03 	add.w	fp, r6, r3
 801ee6c:	5cf3      	ldrb	r3, [r6, r3]
 801ee6e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee70:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801ee74:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee76:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ee7a:	9315      	str	r3, [sp, #84]	@ 0x54
 801ee7c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801ee80:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee82:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801ee86:	9314      	str	r3, [sp, #80]	@ 0x50
 801ee88:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801ee8c:	9316      	str	r3, [sp, #88]	@ 0x58
 801ee8e:	b292      	uxth	r2, r2
 801ee90:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ee92:	b289      	uxth	r1, r1
 801ee94:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801ee98:	fb02 f601 	mul.w	r6, r2, r1
 801ee9c:	0112      	lsls	r2, r2, #4
 801ee9e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801eea2:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801eea6:	1b92      	subs	r2, r2, r6
 801eea8:	b289      	uxth	r1, r1
 801eeaa:	b292      	uxth	r2, r2
 801eeac:	eba9 0901 	sub.w	r9, r9, r1
 801eeb0:	fb02 fe0e 	mul.w	lr, r2, lr
 801eeb4:	fa1f f989 	uxth.w	r9, r9
 801eeb8:	fb02 fc0c 	mul.w	ip, r2, ip
 801eebc:	fb09 e404 	mla	r4, r9, r4, lr
 801eec0:	f895 e000 	ldrb.w	lr, [r5]
 801eec4:	fb09 c000 	mla	r0, r9, r0, ip
 801eec8:	fb01 4407 	mla	r4, r1, r7, r4
 801eecc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801eece:	fb06 4407 	mla	r4, r6, r7, r4
 801eed2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801eed4:	fb1e fe07 	smulbb	lr, lr, r7
 801eed8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801eedc:	fb04 e403 	mla	r4, r4, r3, lr
 801eee0:	b2a4      	uxth	r4, r4
 801eee2:	f104 0e01 	add.w	lr, r4, #1
 801eee6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801eeea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eeec:	fb01 0004 	mla	r0, r1, r4, r0
 801eef0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eef2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eef6:	fb06 0004 	mla	r0, r6, r4, r0
 801eefa:	786c      	ldrb	r4, [r5, #1]
 801eefc:	f885 e000 	strb.w	lr, [r5]
 801ef00:	fb14 f407 	smulbb	r4, r4, r7
 801ef04:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ef08:	fb00 4003 	mla	r0, r0, r3, r4
 801ef0c:	b280      	uxth	r0, r0
 801ef0e:	1c44      	adds	r4, r0, #1
 801ef10:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ef14:	1200      	asrs	r0, r0, #8
 801ef16:	7068      	strb	r0, [r5, #1]
 801ef18:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef1a:	4342      	muls	r2, r0
 801ef1c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ef1e:	fb09 2200 	mla	r2, r9, r0, r2
 801ef22:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ef24:	fb01 2100 	mla	r1, r1, r0, r2
 801ef28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ef2a:	fb06 1602 	mla	r6, r6, r2, r1
 801ef2e:	78a9      	ldrb	r1, [r5, #2]
 801ef30:	fb11 f107 	smulbb	r1, r1, r7
 801ef34:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ef38:	fb06 1303 	mla	r3, r6, r3, r1
 801ef3c:	b29b      	uxth	r3, r3
 801ef3e:	1c5e      	adds	r6, r3, #1
 801ef40:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ef44:	121b      	asrs	r3, r3, #8
 801ef46:	70ab      	strb	r3, [r5, #2]
 801ef48:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef4a:	3503      	adds	r5, #3
 801ef4c:	449a      	add	sl, r3
 801ef4e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef50:	4498      	add	r8, r3
 801ef52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef54:	3b01      	subs	r3, #1
 801ef56:	930d      	str	r3, [sp, #52]	@ 0x34
 801ef58:	e750      	b.n	801edfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ef5a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef5c:	449a      	add	sl, r3
 801ef5e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef60:	4498      	add	r8, r3
 801ef62:	9b07      	ldr	r3, [sp, #28]
 801ef64:	3b01      	subs	r3, #1
 801ef66:	9307      	str	r3, [sp, #28]
 801ef68:	9b08      	ldr	r3, [sp, #32]
 801ef6a:	3303      	adds	r3, #3
 801ef6c:	9308      	str	r3, [sp, #32]
 801ef6e:	e726      	b.n	801edbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ef70:	d026      	beq.n	801efc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ef72:	9b07      	ldr	r3, [sp, #28]
 801ef74:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801ef76:	3b01      	subs	r3, #1
 801ef78:	fb00 a003 	mla	r0, r0, r3, sl
 801ef7c:	1400      	asrs	r0, r0, #16
 801ef7e:	f53f af3a 	bmi.w	801edf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef82:	3901      	subs	r1, #1
 801ef84:	4288      	cmp	r0, r1
 801ef86:	f6bf af36 	bge.w	801edf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef8a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ef8c:	fb01 8303 	mla	r3, r1, r3, r8
 801ef90:	141b      	asrs	r3, r3, #16
 801ef92:	f53f af30 	bmi.w	801edf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef96:	3a01      	subs	r2, #1
 801ef98:	4293      	cmp	r3, r2
 801ef9a:	f6bf af2c 	bge.w	801edf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef9e:	9b08      	ldr	r3, [sp, #32]
 801efa0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801efa4:	1cdd      	adds	r5, r3, #3
 801efa6:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801efaa:	f1bc 0f00 	cmp.w	ip, #0
 801efae:	dc5f      	bgt.n	801f070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801efb0:	9b07      	ldr	r3, [sp, #28]
 801efb2:	9a08      	ldr	r2, [sp, #32]
 801efb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efbc:	441a      	add	r2, r3
 801efbe:	9208      	str	r2, [sp, #32]
 801efc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	f340 80e9 	ble.w	801f19a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801efc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801efcc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efd6:	eef0 6a62 	vmov.f32	s13, s5
 801efda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801efde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efe2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efe6:	ee16 aa90 	vmov	sl, s13
 801efea:	eef0 6a43 	vmov.f32	s13, s6
 801efee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eff2:	ee16 8a90 	vmov	r8, s13
 801eff6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801effa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801effe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f002:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f006:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f00a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f00e:	ee12 2a90 	vmov	r2, s5
 801f012:	eef0 2a47 	vmov.f32	s5, s14
 801f016:	fb92 f3f3 	sdiv	r3, r2, r3
 801f01a:	ee13 2a10 	vmov	r2, s6
 801f01e:	932b      	str	r3, [sp, #172]	@ 0xac
 801f020:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f022:	eeb0 3a67 	vmov.f32	s6, s15
 801f026:	fb92 f3f3 	sdiv	r3, r2, r3
 801f02a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f02c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f02e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f030:	3b01      	subs	r3, #1
 801f032:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f034:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f036:	bf08      	it	eq
 801f038:	4613      	moveq	r3, r2
 801f03a:	9307      	str	r3, [sp, #28]
 801f03c:	e6b1      	b.n	801eda2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f03e:	1c47      	adds	r7, r0, #1
 801f040:	d482      	bmi.n	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f042:	42bb      	cmp	r3, r7
 801f044:	db80      	blt.n	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f046:	1c67      	adds	r7, r4, #1
 801f048:	f53f af7e 	bmi.w	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f04c:	42be      	cmp	r6, r7
 801f04e:	f6ff af7b 	blt.w	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f052:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f054:	b236      	sxth	r6, r6
 801f056:	9001      	str	r0, [sp, #4]
 801f058:	b21b      	sxth	r3, r3
 801f05a:	9600      	str	r6, [sp, #0]
 801f05c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f05e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f062:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f066:	4629      	mov	r1, r5
 801f068:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f06a:	f7ff fd82 	bl	801eb72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f06e:	e76b      	b.n	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f070:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801f072:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f076:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f07a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f07e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f082:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f086:	fb07 0101 	mla	r1, r7, r1, r0
 801f08a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f08c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f090:	1844      	adds	r4, r0, r1
 801f092:	5c40      	ldrb	r0, [r0, r1]
 801f094:	78a6      	ldrb	r6, [r4, #2]
 801f096:	7861      	ldrb	r1, [r4, #1]
 801f098:	960f      	str	r6, [sp, #60]	@ 0x3c
 801f09a:	78e6      	ldrb	r6, [r4, #3]
 801f09c:	910d      	str	r1, [sp, #52]	@ 0x34
 801f09e:	9610      	str	r6, [sp, #64]	@ 0x40
 801f0a0:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f0a4:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f0a8:	b192      	cbz	r2, 801f0d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f0aa:	f06f 0604 	mvn.w	r6, #4
 801f0ae:	2103      	movs	r1, #3
 801f0b0:	3405      	adds	r4, #5
 801f0b2:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f0b6:	19e6      	adds	r6, r4, r7
 801f0b8:	5de4      	ldrb	r4, [r4, r7]
 801f0ba:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f0bc:	7874      	ldrb	r4, [r6, #1]
 801f0be:	9419      	str	r4, [sp, #100]	@ 0x64
 801f0c0:	78b4      	ldrb	r4, [r6, #2]
 801f0c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f0c4:	78f4      	ldrb	r4, [r6, #3]
 801f0c6:	9418      	str	r4, [sp, #96]	@ 0x60
 801f0c8:	7934      	ldrb	r4, [r6, #4]
 801f0ca:	941a      	str	r4, [sp, #104]	@ 0x68
 801f0cc:	7974      	ldrb	r4, [r6, #5]
 801f0ce:	941c      	str	r4, [sp, #112]	@ 0x70
 801f0d0:	b29b      	uxth	r3, r3
 801f0d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f0d4:	b292      	uxth	r2, r2
 801f0d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f0d8:	3503      	adds	r5, #3
 801f0da:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f0de:	fb03 f402 	mul.w	r4, r3, r2
 801f0e2:	011b      	lsls	r3, r3, #4
 801f0e4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f0e8:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801f0ec:	1b1b      	subs	r3, r3, r4
 801f0ee:	b292      	uxth	r2, r2
 801f0f0:	b29b      	uxth	r3, r3
 801f0f2:	1ab6      	subs	r6, r6, r2
 801f0f4:	435f      	muls	r7, r3
 801f0f6:	b2b6      	uxth	r6, r6
 801f0f8:	fb03 f909 	mul.w	r9, r3, r9
 801f0fc:	fb03 fb0b 	mul.w	fp, r3, fp
 801f100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f102:	fb06 7000 	mla	r0, r6, r0, r7
 801f106:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801f108:	fb06 bb03 	mla	fp, r6, r3, fp
 801f10c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f10e:	fb02 0007 	mla	r0, r2, r7, r0
 801f112:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801f114:	fb02 bb03 	mla	fp, r2, r3, fp
 801f118:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f11a:	fb04 0007 	mla	r0, r4, r7, r0
 801f11e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f122:	fb17 f701 	smulbb	r7, r7, r1
 801f126:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f12a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f12c:	fb00 700e 	mla	r0, r0, lr, r7
 801f130:	fb06 9101 	mla	r1, r6, r1, r9
 801f134:	b280      	uxth	r0, r0
 801f136:	1c47      	adds	r7, r0, #1
 801f138:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f13c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f13e:	1200      	asrs	r0, r0, #8
 801f140:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f144:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f146:	fb02 1100 	mla	r1, r2, r0, r1
 801f14a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801f14c:	fb04 1100 	mla	r1, r4, r0, r1
 801f150:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f154:	fb04 b403 	mla	r4, r4, r3, fp
 801f158:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f15c:	fb10 f007 	smulbb	r0, r0, r7
 801f160:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f164:	fb13 f307 	smulbb	r3, r3, r7
 801f168:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f16c:	fb01 010e 	mla	r1, r1, lr, r0
 801f170:	fb04 340e 	mla	r4, r4, lr, r3
 801f174:	b289      	uxth	r1, r1
 801f176:	b2a4      	uxth	r4, r4
 801f178:	1c48      	adds	r0, r1, #1
 801f17a:	1c63      	adds	r3, r4, #1
 801f17c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f180:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f184:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f186:	1209      	asrs	r1, r1, #8
 801f188:	1224      	asrs	r4, r4, #8
 801f18a:	449a      	add	sl, r3
 801f18c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f18e:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f192:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f196:	4498      	add	r8, r3
 801f198:	e707      	b.n	801efaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f19a:	b01f      	add	sp, #124	@ 0x7c
 801f19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1a4:	b087      	sub	sp, #28
 801f1a6:	780d      	ldrb	r5, [r1, #0]
 801f1a8:	784c      	ldrb	r4, [r1, #1]
 801f1aa:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801f1ae:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801f1b2:	9004      	str	r0, [sp, #16]
 801f1b4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801f1b8:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801f1bc:	9005      	str	r0, [sp, #20]
 801f1be:	fb06 bc03 	mla	ip, r6, r3, fp
 801f1c2:	2e00      	cmp	r6, #0
 801f1c4:	7888      	ldrb	r0, [r1, #2]
 801f1c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f1ca:	eb02 090c 	add.w	r9, r2, ip
 801f1ce:	f2c0 8084 	blt.w	801f2da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f1d2:	42b7      	cmp	r7, r6
 801f1d4:	f340 8081 	ble.w	801f2da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f1d8:	f1bb 0f00 	cmp.w	fp, #0
 801f1dc:	db79      	blt.n	801f2d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f1de:	455b      	cmp	r3, fp
 801f1e0:	dd77      	ble.n	801f2d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f1e2:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f1e6:	9201      	str	r2, [sp, #4]
 801f1e8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f1ec:	9202      	str	r2, [sp, #8]
 801f1ee:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f1f2:	9203      	str	r2, [sp, #12]
 801f1f4:	f11b 0201 	adds.w	r2, fp, #1
 801f1f8:	d476      	bmi.n	801f2e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f1fa:	4293      	cmp	r3, r2
 801f1fc:	dd74      	ble.n	801f2e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f1fe:	9a04      	ldr	r2, [sp, #16]
 801f200:	2a00      	cmp	r2, #0
 801f202:	d071      	beq.n	801f2e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f204:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f208:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f20c:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f210:	3601      	adds	r6, #1
 801f212:	d471      	bmi.n	801f2f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f214:	42b7      	cmp	r7, r6
 801f216:	dd6f      	ble.n	801f2f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f218:	9a05      	ldr	r2, [sp, #20]
 801f21a:	2a00      	cmp	r2, #0
 801f21c:	d06c      	beq.n	801f2f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f21e:	f1bb 0f00 	cmp.w	fp, #0
 801f222:	db65      	blt.n	801f2f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f224:	455b      	cmp	r3, fp
 801f226:	dd63      	ble.n	801f2f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f228:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f22c:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f230:	2203      	movs	r2, #3
 801f232:	fb03 9602 	mla	r6, r3, r2, r9
 801f236:	7877      	ldrb	r7, [r6, #1]
 801f238:	78b6      	ldrb	r6, [r6, #2]
 801f23a:	f11b 0b01 	adds.w	fp, fp, #1
 801f23e:	d40c      	bmi.n	801f25a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f240:	455b      	cmp	r3, fp
 801f242:	dd0a      	ble.n	801f25a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f244:	9a04      	ldr	r2, [sp, #16]
 801f246:	b142      	cbz	r2, 801f25a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f248:	2203      	movs	r2, #3
 801f24a:	fb13 2002 	smlabb	r0, r3, r2, r2
 801f24e:	f819 5000 	ldrb.w	r5, [r9, r0]
 801f252:	fb03 9002 	mla	r0, r3, r2, r9
 801f256:	7904      	ldrb	r4, [r0, #4]
 801f258:	7940      	ldrb	r0, [r0, #5]
 801f25a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f25e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f262:	fb03 fb02 	mul.w	fp, r3, r2
 801f266:	011b      	lsls	r3, r3, #4
 801f268:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f26c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801f270:	eba3 030b 	sub.w	r3, r3, fp
 801f274:	b292      	uxth	r2, r2
 801f276:	b29b      	uxth	r3, r3
 801f278:	eba9 0902 	sub.w	r9, r9, r2
 801f27c:	9304      	str	r3, [sp, #16]
 801f27e:	fa1f f989 	uxth.w	r9, r9
 801f282:	fb03 f808 	mul.w	r8, r3, r8
 801f286:	9b01      	ldr	r3, [sp, #4]
 801f288:	fb09 8803 	mla	r8, r9, r3, r8
 801f28c:	9b04      	ldr	r3, [sp, #16]
 801f28e:	fb03 fc0c 	mul.w	ip, r3, ip
 801f292:	9b02      	ldr	r3, [sp, #8]
 801f294:	fb02 880e 	mla	r8, r2, lr, r8
 801f298:	fb09 cc03 	mla	ip, r9, r3, ip
 801f29c:	9b04      	ldr	r3, [sp, #16]
 801f29e:	fb0b 8805 	mla	r8, fp, r5, r8
 801f2a2:	fb02 c707 	mla	r7, r2, r7, ip
 801f2a6:	fb03 f30a 	mul.w	r3, r3, sl
 801f2aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f2ae:	fb0b 7404 	mla	r4, fp, r4, r7
 801f2b2:	f881 8000 	strb.w	r8, [r1]
 801f2b6:	1224      	asrs	r4, r4, #8
 801f2b8:	704c      	strb	r4, [r1, #1]
 801f2ba:	9c03      	ldr	r4, [sp, #12]
 801f2bc:	fb09 3904 	mla	r9, r9, r4, r3
 801f2c0:	fb02 9206 	mla	r2, r2, r6, r9
 801f2c4:	fb0b 2000 	mla	r0, fp, r0, r2
 801f2c8:	1200      	asrs	r0, r0, #8
 801f2ca:	7088      	strb	r0, [r1, #2]
 801f2cc:	b007      	add	sp, #28
 801f2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2d2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f2d6:	9501      	str	r5, [sp, #4]
 801f2d8:	e78c      	b.n	801f1f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801f2da:	4682      	mov	sl, r0
 801f2dc:	46a4      	mov	ip, r4
 801f2de:	46a8      	mov	r8, r5
 801f2e0:	9501      	str	r5, [sp, #4]
 801f2e2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f2e6:	e793      	b.n	801f210 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f2e8:	4682      	mov	sl, r0
 801f2ea:	46a4      	mov	ip, r4
 801f2ec:	46a8      	mov	r8, r5
 801f2ee:	e78f      	b.n	801f210 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f2f0:	4606      	mov	r6, r0
 801f2f2:	4627      	mov	r7, r4
 801f2f4:	46ae      	mov	lr, r5
 801f2f6:	e7a0      	b.n	801f23a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f2f8:	4606      	mov	r6, r0
 801f2fa:	4627      	mov	r7, r4
 801f2fc:	46ae      	mov	lr, r5
 801f2fe:	e7ac      	b.n	801f25a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801f300 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f304:	b09b      	sub	sp, #108	@ 0x6c
 801f306:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f308:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f30a:	9019      	str	r0, [sp, #100]	@ 0x64
 801f30c:	9109      	str	r1, [sp, #36]	@ 0x24
 801f30e:	6850      	ldr	r0, [r2, #4]
 801f310:	9306      	str	r3, [sp, #24]
 801f312:	6812      	ldr	r2, [r2, #0]
 801f314:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f318:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801f31c:	fb00 1303 	mla	r3, r0, r3, r1
 801f320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f324:	18d3      	adds	r3, r2, r3
 801f326:	9307      	str	r3, [sp, #28]
 801f328:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	9308      	str	r3, [sp, #32]
 801f32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f330:	2b00      	cmp	r3, #0
 801f332:	dc03      	bgt.n	801f33c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f336:	2b00      	cmp	r3, #0
 801f338:	f340 81ab 	ble.w	801f692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f33c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f33e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f342:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f346:	1e48      	subs	r0, r1, #1
 801f348:	1e55      	subs	r5, r2, #1
 801f34a:	9b06      	ldr	r3, [sp, #24]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	f340 80b1 	ble.w	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f352:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f356:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f35a:	d406      	bmi.n	801f36a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f35c:	4286      	cmp	r6, r0
 801f35e:	da04      	bge.n	801f36a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f360:	2b00      	cmp	r3, #0
 801f362:	db02      	blt.n	801f36a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f364:	42ab      	cmp	r3, r5
 801f366:	f2c0 80a6 	blt.w	801f4b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f36a:	3601      	adds	r6, #1
 801f36c:	f100 8097 	bmi.w	801f49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f370:	42b1      	cmp	r1, r6
 801f372:	f2c0 8094 	blt.w	801f49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f376:	3301      	adds	r3, #1
 801f378:	f100 8091 	bmi.w	801f49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f37c:	429a      	cmp	r2, r3
 801f37e:	f2c0 808e 	blt.w	801f49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f382:	9b06      	ldr	r3, [sp, #24]
 801f384:	9e07      	ldr	r6, [sp, #28]
 801f386:	930a      	str	r3, [sp, #40]	@ 0x28
 801f388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	f340 80b0 	ble.w	801f4f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f390:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801f392:	1425      	asrs	r5, r4, #16
 801f394:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f396:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f39a:	68c7      	ldr	r7, [r0, #12]
 801f39c:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f3a0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f3a4:	689b      	ldr	r3, [r3, #8]
 801f3a6:	f100 80ea 	bmi.w	801f57e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3aa:	f103 3cff 	add.w	ip, r3, #4294967295
 801f3ae:	4560      	cmp	r0, ip
 801f3b0:	f280 80e5 	bge.w	801f57e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3b4:	2d00      	cmp	r5, #0
 801f3b6:	f2c0 80e2 	blt.w	801f57e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3ba:	f107 3cff 	add.w	ip, r7, #4294967295
 801f3be:	4565      	cmp	r5, ip
 801f3c0:	f280 80dd 	bge.w	801f57e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3c4:	b21b      	sxth	r3, r3
 801f3c6:	fb05 0003 	mla	r0, r5, r3, r0
 801f3ca:	9d08      	ldr	r5, [sp, #32]
 801f3cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3d0:	182f      	adds	r7, r5, r0
 801f3d2:	5c2d      	ldrb	r5, [r5, r0]
 801f3d4:	7878      	ldrb	r0, [r7, #1]
 801f3d6:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f3da:	900c      	str	r0, [sp, #48]	@ 0x30
 801f3dc:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f3e0:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f3e4:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f3e8:	b1c9      	cbz	r1, 801f41e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f3ea:	f04f 0c03 	mov.w	ip, #3
 801f3ee:	f06f 0004 	mvn.w	r0, #4
 801f3f2:	3705      	adds	r7, #5
 801f3f4:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f3f8:	eb07 0c03 	add.w	ip, r7, r3
 801f3fc:	5cfb      	ldrb	r3, [r7, r3]
 801f3fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801f400:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f404:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f406:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f40a:	9311      	str	r3, [sp, #68]	@ 0x44
 801f40c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f410:	930e      	str	r3, [sp, #56]	@ 0x38
 801f412:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f416:	9310      	str	r3, [sp, #64]	@ 0x40
 801f418:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f41c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f41e:	b292      	uxth	r2, r2
 801f420:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f422:	b289      	uxth	r1, r1
 801f424:	fb02 f301 	mul.w	r3, r2, r1
 801f428:	0112      	lsls	r2, r2, #4
 801f42a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f42e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f432:	1ad2      	subs	r2, r2, r3
 801f434:	b289      	uxth	r1, r1
 801f436:	b292      	uxth	r2, r2
 801f438:	1a7f      	subs	r7, r7, r1
 801f43a:	fb02 f909 	mul.w	r9, r2, r9
 801f43e:	b2bf      	uxth	r7, r7
 801f440:	fb02 f808 	mul.w	r8, r2, r8
 801f444:	fb02 fa0a 	mul.w	sl, r2, sl
 801f448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f44a:	fb07 9905 	mla	r9, r7, r5, r9
 801f44e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f450:	fb07 8800 	mla	r8, r7, r0, r8
 801f454:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f456:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f45a:	fb01 9905 	mla	r9, r1, r5, r9
 801f45e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f460:	fb01 8800 	mla	r8, r1, r0, r8
 801f464:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f466:	fb01 a102 	mla	r1, r1, r2, sl
 801f46a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f46c:	fb03 9905 	mla	r9, r3, r5, r9
 801f470:	fb03 8800 	mla	r8, r3, r0, r8
 801f474:	fb03 1302 	mla	r3, r3, r2, r1
 801f478:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f47c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f480:	121b      	asrs	r3, r3, #8
 801f482:	f886 9000 	strb.w	r9, [r6]
 801f486:	f886 8001 	strb.w	r8, [r6, #1]
 801f48a:	70b3      	strb	r3, [r6, #2]
 801f48c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f48e:	3603      	adds	r6, #3
 801f490:	449b      	add	fp, r3
 801f492:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f494:	441c      	add	r4, r3
 801f496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f498:	3b01      	subs	r3, #1
 801f49a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f49c:	e774      	b.n	801f388 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f49e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f4a0:	449b      	add	fp, r3
 801f4a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f4a4:	441c      	add	r4, r3
 801f4a6:	9b06      	ldr	r3, [sp, #24]
 801f4a8:	3b01      	subs	r3, #1
 801f4aa:	9306      	str	r3, [sp, #24]
 801f4ac:	9b07      	ldr	r3, [sp, #28]
 801f4ae:	3303      	adds	r3, #3
 801f4b0:	9307      	str	r3, [sp, #28]
 801f4b2:	e74a      	b.n	801f34a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f4b4:	d024      	beq.n	801f500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f4b6:	9b06      	ldr	r3, [sp, #24]
 801f4b8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f4ba:	3b01      	subs	r3, #1
 801f4bc:	fb00 b003 	mla	r0, r0, r3, fp
 801f4c0:	1400      	asrs	r0, r0, #16
 801f4c2:	f53f af5e 	bmi.w	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4c6:	3901      	subs	r1, #1
 801f4c8:	4288      	cmp	r0, r1
 801f4ca:	f6bf af5a 	bge.w	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4ce:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f4d0:	fb01 4303 	mla	r3, r1, r3, r4
 801f4d4:	141b      	asrs	r3, r3, #16
 801f4d6:	f53f af54 	bmi.w	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4da:	3a01      	subs	r2, #1
 801f4dc:	4293      	cmp	r3, r2
 801f4de:	f6bf af50 	bge.w	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4e2:	9b07      	ldr	r3, [sp, #28]
 801f4e4:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f4e8:	1cde      	adds	r6, r3, #3
 801f4ea:	f1be 0f00 	cmp.w	lr, #0
 801f4ee:	dc5f      	bgt.n	801f5b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f4f0:	9b06      	ldr	r3, [sp, #24]
 801f4f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f4f6:	9b07      	ldr	r3, [sp, #28]
 801f4f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4fc:	4423      	add	r3, r4
 801f4fe:	9307      	str	r3, [sp, #28]
 801f500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f502:	2b00      	cmp	r3, #0
 801f504:	f340 80c5 	ble.w	801f692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f50c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f50e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f512:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f516:	eef0 6a62 	vmov.f32	s13, s5
 801f51a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f51e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f522:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f526:	ee16 ba90 	vmov	fp, s13
 801f52a:	eef0 6a43 	vmov.f32	s13, s6
 801f52e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f532:	ee16 4a90 	vmov	r4, s13
 801f536:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f53a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f53e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f542:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f546:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f54a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f54e:	ee12 2a90 	vmov	r2, s5
 801f552:	eef0 2a47 	vmov.f32	s5, s14
 801f556:	fb92 f3f3 	sdiv	r3, r2, r3
 801f55a:	ee13 2a10 	vmov	r2, s6
 801f55e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f560:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f562:	eeb0 3a67 	vmov.f32	s6, s15
 801f566:	fb92 f3f3 	sdiv	r3, r2, r3
 801f56a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f570:	3b01      	subs	r3, #1
 801f572:	9309      	str	r3, [sp, #36]	@ 0x24
 801f574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f576:	bf08      	it	eq
 801f578:	4613      	moveq	r3, r2
 801f57a:	9306      	str	r3, [sp, #24]
 801f57c:	e6d7      	b.n	801f32e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f57e:	f110 0c01 	adds.w	ip, r0, #1
 801f582:	d483      	bmi.n	801f48c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f584:	4563      	cmp	r3, ip
 801f586:	db81      	blt.n	801f48c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f588:	f115 0c01 	adds.w	ip, r5, #1
 801f58c:	f53f af7e 	bmi.w	801f48c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f590:	4567      	cmp	r7, ip
 801f592:	f6ff af7b 	blt.w	801f48c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f596:	b23f      	sxth	r7, r7
 801f598:	b21b      	sxth	r3, r3
 801f59a:	9700      	str	r7, [sp, #0]
 801f59c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f5a0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f5a4:	9a08      	ldr	r2, [sp, #32]
 801f5a6:	4631      	mov	r1, r6
 801f5a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f5aa:	f7ff fdf9 	bl	801f1a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f5ae:	e76d      	b.n	801f48c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5b0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f5b2:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f5b6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f5ba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f5be:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f5c2:	1421      	asrs	r1, r4, #16
 801f5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5c6:	fb0c 0101 	mla	r1, ip, r1, r0
 801f5ca:	9808      	ldr	r0, [sp, #32]
 801f5cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f5d0:	1845      	adds	r5, r0, r1
 801f5d2:	5c40      	ldrb	r0, [r0, r1]
 801f5d4:	796f      	ldrb	r7, [r5, #5]
 801f5d6:	7869      	ldrb	r1, [r5, #1]
 801f5d8:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f5dc:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f5e0:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f5e4:	970c      	str	r7, [sp, #48]	@ 0x30
 801f5e6:	b1a2      	cbz	r2, 801f612 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f5e8:	2703      	movs	r7, #3
 801f5ea:	f06f 0304 	mvn.w	r3, #4
 801f5ee:	3505      	adds	r5, #5
 801f5f0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f5f4:	eb05 070c 	add.w	r7, r5, ip
 801f5f8:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f5fc:	9513      	str	r5, [sp, #76]	@ 0x4c
 801f5fe:	787d      	ldrb	r5, [r7, #1]
 801f600:	9515      	str	r5, [sp, #84]	@ 0x54
 801f602:	78bd      	ldrb	r5, [r7, #2]
 801f604:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f606:	78fd      	ldrb	r5, [r7, #3]
 801f608:	9514      	str	r5, [sp, #80]	@ 0x50
 801f60a:	793d      	ldrb	r5, [r7, #4]
 801f60c:	9516      	str	r5, [sp, #88]	@ 0x58
 801f60e:	797d      	ldrb	r5, [r7, #5]
 801f610:	9518      	str	r5, [sp, #96]	@ 0x60
 801f612:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f616:	b292      	uxth	r2, r2
 801f618:	3603      	adds	r6, #3
 801f61a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f61e:	fb03 f502 	mul.w	r5, r3, r2
 801f622:	011b      	lsls	r3, r3, #4
 801f624:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f628:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801f62c:	1b5b      	subs	r3, r3, r5
 801f62e:	b292      	uxth	r2, r2
 801f630:	b29b      	uxth	r3, r3
 801f632:	1abf      	subs	r7, r7, r2
 801f634:	fb03 f909 	mul.w	r9, r3, r9
 801f638:	b2bf      	uxth	r7, r7
 801f63a:	fb03 fa0a 	mul.w	sl, r3, sl
 801f63e:	fb07 9901 	mla	r9, r7, r1, r9
 801f642:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f644:	fb07 aa00 	mla	sl, r7, r0, sl
 801f648:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f64a:	fb02 9901 	mla	r9, r2, r1, r9
 801f64e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f650:	fb02 aa00 	mla	sl, r2, r0, sl
 801f654:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f656:	fb05 9901 	mla	r9, r5, r1, r9
 801f65a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f65c:	fb05 aa00 	mla	sl, r5, r0, sl
 801f660:	434b      	muls	r3, r1
 801f662:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f664:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f668:	fb07 3308 	mla	r3, r7, r8, r3
 801f66c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f670:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f674:	fb02 3201 	mla	r2, r2, r1, r3
 801f678:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f67a:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f67e:	fb05 2503 	mla	r5, r5, r3, r2
 801f682:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f684:	122d      	asrs	r5, r5, #8
 801f686:	449b      	add	fp, r3
 801f688:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f68a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f68e:	441c      	add	r4, r3
 801f690:	e72b      	b.n	801f4ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f692:	b01b      	add	sp, #108	@ 0x6c
 801f694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f698 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f69c:	b087      	sub	sp, #28
 801f69e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f6a2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f6a6:	fb05 7003 	mla	r0, r5, r3, r7
 801f6aa:	2d00      	cmp	r5, #0
 801f6ac:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f6b0:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f6b4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f6b8:	f2c0 811f 	blt.w	801f8fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6bc:	45a8      	cmp	r8, r5
 801f6be:	f340 811c 	ble.w	801f8fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6c2:	2f00      	cmp	r7, #0
 801f6c4:	f2c0 8117 	blt.w	801f8f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6c8:	42bb      	cmp	r3, r7
 801f6ca:	f340 8114 	ble.w	801f8f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6ce:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f6d2:	1c7a      	adds	r2, r7, #1
 801f6d4:	f100 8114 	bmi.w	801f900 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f6d8:	4293      	cmp	r3, r2
 801f6da:	f340 8111 	ble.w	801f900 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f6de:	2c00      	cmp	r4, #0
 801f6e0:	f000 8110 	beq.w	801f904 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f6e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f6e8:	3501      	adds	r5, #1
 801f6ea:	f100 810f 	bmi.w	801f90c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f6ee:	45a8      	cmp	r8, r5
 801f6f0:	f340 810c 	ble.w	801f90c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f6f4:	f1be 0f00 	cmp.w	lr, #0
 801f6f8:	f000 810b 	beq.w	801f912 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f6fc:	2f00      	cmp	r7, #0
 801f6fe:	f2c0 8103 	blt.w	801f908 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f702:	42bb      	cmp	r3, r7
 801f704:	f340 8100 	ble.w	801f908 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f708:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f70c:	3701      	adds	r7, #1
 801f70e:	f100 8103 	bmi.w	801f918 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f712:	42bb      	cmp	r3, r7
 801f714:	f340 8100 	ble.w	801f918 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f718:	2c00      	cmp	r4, #0
 801f71a:	f000 80ff 	beq.w	801f91c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f71e:	3301      	adds	r3, #1
 801f720:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f724:	fa1f fc84 	uxth.w	ip, r4
 801f728:	fa1f fe8e 	uxth.w	lr, lr
 801f72c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f730:	fb0c f90e 	mul.w	r9, ip, lr
 801f734:	0e13      	lsrs	r3, r2, #24
 801f736:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f73a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f73e:	9302      	str	r3, [sp, #8]
 801f740:	ebac 0709 	sub.w	r7, ip, r9
 801f744:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f748:	fa1f f48e 	uxth.w	r4, lr
 801f74c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f750:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f754:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f758:	fb0a fe0e 	mul.w	lr, sl, lr
 801f75c:	1b1b      	subs	r3, r3, r4
 801f75e:	fb0a f606 	mul.w	r6, sl, r6
 801f762:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f766:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f76a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f76e:	b29b      	uxth	r3, r3
 801f770:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f774:	b2bf      	uxth	r7, r7
 801f776:	9301      	str	r3, [sp, #4]
 801f778:	44e6      	add	lr, ip
 801f77a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f77e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f782:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f786:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f78a:	9303      	str	r3, [sp, #12]
 801f78c:	0a33      	lsrs	r3, r6, #8
 801f78e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f792:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f796:	9304      	str	r3, [sp, #16]
 801f798:	fb0b f606 	mul.w	r6, fp, r6
 801f79c:	fb0b f000 	mul.w	r0, fp, r0
 801f7a0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f7a4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f7ac:	44b6      	add	lr, r6
 801f7ae:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f7b2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f7b6:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f7ba:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f7be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7c2:	fb08 f606 	mul.w	r6, r8, r6
 801f7c6:	0a03      	lsrs	r3, r0, #8
 801f7c8:	fb08 f505 	mul.w	r5, r8, r5
 801f7cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f7d0:	0a30      	lsrs	r0, r6, #8
 801f7d2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7d6:	9305      	str	r3, [sp, #20]
 801f7d8:	0e13      	lsrs	r3, r2, #24
 801f7da:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f7de:	fb0e fe07 	mul.w	lr, lr, r7
 801f7e2:	4430      	add	r0, r6
 801f7e4:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f7e8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f7ec:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f7f0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f7f4:	0a00      	lsrs	r0, r0, #8
 801f7f6:	435e      	muls	r6, r3
 801f7f8:	0a2d      	lsrs	r5, r5, #8
 801f7fa:	435a      	muls	r2, r3
 801f7fc:	9b03      	ldr	r3, [sp, #12]
 801f7fe:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f802:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f806:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f80a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f80e:	44b4      	add	ip, r6
 801f810:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f818:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f81c:	9e01      	ldr	r6, [sp, #4]
 801f81e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f822:	fb03 ee06 	mla	lr, r3, r6, lr
 801f826:	9b04      	ldr	r3, [sp, #16]
 801f828:	0a12      	lsrs	r2, r2, #8
 801f82a:	fb0c ee09 	mla	lr, ip, r9, lr
 801f82e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f832:	9b05      	ldr	r3, [sp, #20]
 801f834:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f838:	fb00 ee04 	mla	lr, r0, r4, lr
 801f83c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f840:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f844:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f848:	9b01      	ldr	r3, [sp, #4]
 801f84a:	fb07 fe0e 	mul.w	lr, r7, lr
 801f84e:	fb07 f70b 	mul.w	r7, r7, fp
 801f852:	fb03 ee06 	mla	lr, r3, r6, lr
 801f856:	fb03 730a 	mla	r3, r3, sl, r7
 801f85a:	fb09 e202 	mla	r2, r9, r2, lr
 801f85e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f862:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f866:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801f86a:	fb04 3408 	mla	r4, r4, r8, r3
 801f86e:	9b02      	ldr	r3, [sp, #8]
 801f870:	b292      	uxth	r2, r2
 801f872:	fb09 4903 	mla	r9, r9, r3, r4
 801f876:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f87a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f87e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f882:	fb09 f902 	mul.w	r9, r9, r2
 801f886:	ea40 0e0e 	orr.w	lr, r0, lr
 801f88a:	f109 0301 	add.w	r3, r9, #1
 801f88e:	fa5f f08e 	uxtb.w	r0, lr
 801f892:	fb10 f002 	smulbb	r0, r0, r2
 801f896:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f89a:	780b      	ldrb	r3, [r1, #0]
 801f89c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801f8a0:	fa5f f989 	uxtb.w	r9, r9
 801f8a4:	fb03 0309 	mla	r3, r3, r9, r0
 801f8a8:	b29b      	uxth	r3, r3
 801f8aa:	1c58      	adds	r0, r3, #1
 801f8ac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f8b0:	7848      	ldrb	r0, [r1, #1]
 801f8b2:	fb10 f009 	smulbb	r0, r0, r9
 801f8b6:	121b      	asrs	r3, r3, #8
 801f8b8:	700b      	strb	r3, [r1, #0]
 801f8ba:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f8be:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f8c2:	fb03 0302 	mla	r3, r3, r2, r0
 801f8c6:	b29b      	uxth	r3, r3
 801f8c8:	1c58      	adds	r0, r3, #1
 801f8ca:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f8ce:	121b      	asrs	r3, r3, #8
 801f8d0:	704b      	strb	r3, [r1, #1]
 801f8d2:	788b      	ldrb	r3, [r1, #2]
 801f8d4:	fb13 f909 	smulbb	r9, r3, r9
 801f8d8:	fb0e 9e02 	mla	lr, lr, r2, r9
 801f8dc:	fa1f fe8e 	uxth.w	lr, lr
 801f8e0:	f10e 0301 	add.w	r3, lr, #1
 801f8e4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f8e8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f8ec:	f881 e002 	strb.w	lr, [r1, #2]
 801f8f0:	b007      	add	sp, #28
 801f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8f6:	2600      	movs	r6, #0
 801f8f8:	e6eb      	b.n	801f6d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801f8fa:	2000      	movs	r0, #0
 801f8fc:	4606      	mov	r6, r0
 801f8fe:	e6f3      	b.n	801f6e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f900:	2000      	movs	r0, #0
 801f902:	e6f1      	b.n	801f6e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f904:	4620      	mov	r0, r4
 801f906:	e6ef      	b.n	801f6e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f908:	2500      	movs	r5, #0
 801f90a:	e6ff      	b.n	801f70c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801f90c:	2200      	movs	r2, #0
 801f90e:	4615      	mov	r5, r2
 801f910:	e708      	b.n	801f724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f912:	4672      	mov	r2, lr
 801f914:	4675      	mov	r5, lr
 801f916:	e705      	b.n	801f724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f918:	2200      	movs	r2, #0
 801f91a:	e703      	b.n	801f724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f91c:	4622      	mov	r2, r4
 801f91e:	e701      	b.n	801f724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f924:	b09d      	sub	sp, #116	@ 0x74
 801f926:	9219      	str	r2, [sp, #100]	@ 0x64
 801f928:	9307      	str	r3, [sp, #28]
 801f92a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801f92c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801f930:	901b      	str	r0, [sp, #108]	@ 0x6c
 801f932:	931a      	str	r3, [sp, #104]	@ 0x68
 801f934:	6850      	ldr	r0, [r2, #4]
 801f936:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f938:	6812      	ldr	r2, [r2, #0]
 801f93a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801f93e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801f942:	fb00 1303 	mla	r3, r0, r3, r1
 801f946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f94a:	18d3      	adds	r3, r2, r3
 801f94c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f94e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	9310      	str	r3, [sp, #64]	@ 0x40
 801f954:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f958:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f95a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	dc03      	bgt.n	801f968 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f962:	2b00      	cmp	r3, #0
 801f964:	f340 8368 	ble.w	8020038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f968:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f96a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f96e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f972:	1e48      	subs	r0, r1, #1
 801f974:	1e57      	subs	r7, r2, #1
 801f976:	9b07      	ldr	r3, [sp, #28]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	f340 8187 	ble.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f97e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f982:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f986:	d406      	bmi.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f988:	4584      	cmp	ip, r0
 801f98a:	da04      	bge.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	db02      	blt.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f990:	42bb      	cmp	r3, r7
 801f992:	f2c0 817c 	blt.w	801fc8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f996:	f11c 0c01 	adds.w	ip, ip, #1
 801f99a:	f100 816c 	bmi.w	801fc76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f99e:	4561      	cmp	r1, ip
 801f9a0:	f2c0 8169 	blt.w	801fc76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9a4:	3301      	adds	r3, #1
 801f9a6:	f100 8166 	bmi.w	801fc76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9aa:	429a      	cmp	r2, r3
 801f9ac:	f2c0 8163 	blt.w	801fc76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9b0:	9b07      	ldr	r3, [sp, #28]
 801f9b2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f9b4:	9318      	str	r3, [sp, #96]	@ 0x60
 801f9b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	f340 8186 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f9be:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f9c0:	142a      	asrs	r2, r5, #16
 801f9c2:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f9c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9ca:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f9ce:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f9d2:	f100 81cb 	bmi.w	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f9da:	4542      	cmp	r2, r8
 801f9dc:	f280 81c6 	bge.w	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9e0:	2800      	cmp	r0, #0
 801f9e2:	f2c0 81c3 	blt.w	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9e6:	f103 38ff 	add.w	r8, r3, #4294967295
 801f9ea:	4540      	cmp	r0, r8
 801f9ec:	f280 81be 	bge.w	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9f0:	fa0f f38e 	sxth.w	r3, lr
 801f9f4:	fb00 2203 	mla	r2, r0, r3, r2
 801f9f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f9fa:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f9fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801fa02:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fa06:	2900      	cmp	r1, #0
 801fa08:	f000 81a6 	beq.w	801fd58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801fa0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fa10:	900c      	str	r0, [sp, #48]	@ 0x30
 801fa12:	0e00      	lsrs	r0, r0, #24
 801fa14:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fa16:	f1bc 0f00 	cmp.w	ip, #0
 801fa1a:	d00f      	beq.n	801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801fa20:	3b01      	subs	r3, #1
 801fa22:	009b      	lsls	r3, r3, #2
 801fa24:	3304      	adds	r3, #4
 801fa26:	eb08 0003 	add.w	r0, r8, r3
 801fa2a:	f858 3003 	ldr.w	r3, [r8, r3]
 801fa2e:	9308      	str	r3, [sp, #32]
 801fa30:	0e1b      	lsrs	r3, r3, #24
 801fa32:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa34:	6843      	ldr	r3, [r0, #4]
 801fa36:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa38:	0e1b      	lsrs	r3, r3, #24
 801fa3a:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa3c:	b289      	uxth	r1, r1
 801fa3e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fa40:	fa1f fc8c 	uxth.w	ip, ip
 801fa44:	0108      	lsls	r0, r1, #4
 801fa46:	fb01 f90c 	mul.w	r9, r1, ip
 801fa4a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801fa4e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801fa52:	eba0 0809 	sub.w	r8, r0, r9
 801fa56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fa58:	fa1f f18c 	uxth.w	r1, ip
 801fa5c:	fa1f f888 	uxth.w	r8, r8
 801fa60:	1a5b      	subs	r3, r3, r1
 801fa62:	fb08 f000 	mul.w	r0, r8, r0
 801fa66:	b29b      	uxth	r3, r3
 801fa68:	fb03 000e 	mla	r0, r3, lr, r0
 801fa6c:	fb01 0004 	mla	r0, r1, r4, r0
 801fa70:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa72:	fb09 0004 	mla	r0, r9, r4, r0
 801fa76:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fa7a:	2800      	cmp	r0, #0
 801fa7c:	f000 80f2 	beq.w	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fa80:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fa84:	d01b      	beq.n	801fabe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fa86:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801fa8a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fa8e:	fb0e fa0a 	mul.w	sl, lr, sl
 801fa92:	fb0e fe02 	mul.w	lr, lr, r2
 801fa96:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fa9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fa9e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801faa2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801faa6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801faaa:	4452      	add	r2, sl
 801faac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fab0:	0a12      	lsrs	r2, r2, #8
 801fab2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fab6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801faba:	ea42 020c 	orr.w	r2, r2, ip
 801fabe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fac0:	2cff      	cmp	r4, #255	@ 0xff
 801fac2:	d021      	beq.n	801fb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fac4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fac6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801faca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801facc:	fb04 fb0b 	mul.w	fp, r4, fp
 801fad0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fad2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fad6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fad8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fadc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fae0:	fb04 fa0a 	mul.w	sl, r4, sl
 801fae4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fae8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801faec:	44de      	add	lr, fp
 801faee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801faf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801faf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fafa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fafe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb02:	ea4e 040a 	orr.w	r4, lr, sl
 801fb06:	940c      	str	r4, [sp, #48]	@ 0x30
 801fb08:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb0a:	2cff      	cmp	r4, #255	@ 0xff
 801fb0c:	d021      	beq.n	801fb52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801fb0e:	9c08      	ldr	r4, [sp, #32]
 801fb10:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb14:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb16:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb1a:	9c08      	ldr	r4, [sp, #32]
 801fb1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb20:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb22:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb26:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb2e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb32:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb36:	44de      	add	lr, fp
 801fb38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb4c:	ea4e 040a 	orr.w	r4, lr, sl
 801fb50:	9408      	str	r4, [sp, #32]
 801fb52:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb54:	2cff      	cmp	r4, #255	@ 0xff
 801fb56:	d021      	beq.n	801fb9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fb58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb5a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb5e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb60:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb64:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb66:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb6a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb70:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb74:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb7c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb80:	44de      	add	lr, fp
 801fb82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb96:	ea4e 040a 	orr.w	r4, lr, sl
 801fb9a:	940d      	str	r4, [sp, #52]	@ 0x34
 801fb9c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fb9e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801fba2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fba6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fbaa:	9c08      	ldr	r4, [sp, #32]
 801fbac:	fb08 fc0c 	mul.w	ip, r8, ip
 801fbb0:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fbb4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbb8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fbba:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fbbe:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbc2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbc4:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fbc8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fbcc:	fb08 f80e 	mul.w	r8, r8, lr
 801fbd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbd4:	fb03 8202 	mla	r2, r3, r2, r8
 801fbd8:	9b08      	ldr	r3, [sp, #32]
 801fbda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fbde:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801fbe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbe4:	fb01 220a 	mla	r2, r1, sl, r2
 801fbe8:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801fbec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbee:	fb09 2901 	mla	r9, r9, r1, r2
 801fbf2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fbf4:	4343      	muls	r3, r0
 801fbf6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbfa:	1c58      	adds	r0, r3, #1
 801fbfc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801fc00:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fc04:	783b      	ldrb	r3, [r7, #0]
 801fc06:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc0a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fc0e:	fa5f f28c 	uxtb.w	r2, ip
 801fc12:	b2c0      	uxtb	r0, r0
 801fc14:	fb12 f201 	smulbb	r2, r2, r1
 801fc18:	fb03 2300 	mla	r3, r3, r0, r2
 801fc1c:	b29b      	uxth	r3, r3
 801fc1e:	1c5a      	adds	r2, r3, #1
 801fc20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc24:	787a      	ldrb	r2, [r7, #1]
 801fc26:	fb12 f200 	smulbb	r2, r2, r0
 801fc2a:	121b      	asrs	r3, r3, #8
 801fc2c:	703b      	strb	r3, [r7, #0]
 801fc2e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc36:	fb03 2301 	mla	r3, r3, r1, r2
 801fc3a:	b29b      	uxth	r3, r3
 801fc3c:	1c5a      	adds	r2, r3, #1
 801fc3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc42:	121b      	asrs	r3, r3, #8
 801fc44:	707b      	strb	r3, [r7, #1]
 801fc46:	78bb      	ldrb	r3, [r7, #2]
 801fc48:	fb13 f000 	smulbb	r0, r3, r0
 801fc4c:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fc50:	fa1f fc8c 	uxth.w	ip, ip
 801fc54:	f10c 0301 	add.w	r3, ip, #1
 801fc58:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc60:	f887 c002 	strb.w	ip, [r7, #2]
 801fc64:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fc66:	3703      	adds	r7, #3
 801fc68:	441d      	add	r5, r3
 801fc6a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fc6c:	441e      	add	r6, r3
 801fc6e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fc70:	3b01      	subs	r3, #1
 801fc72:	9318      	str	r3, [sp, #96]	@ 0x60
 801fc74:	e69f      	b.n	801f9b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc76:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fc78:	441d      	add	r5, r3
 801fc7a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fc7c:	441e      	add	r6, r3
 801fc7e:	9b07      	ldr	r3, [sp, #28]
 801fc80:	3b01      	subs	r3, #1
 801fc82:	9307      	str	r3, [sp, #28]
 801fc84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc86:	3303      	adds	r3, #3
 801fc88:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc8a:	e674      	b.n	801f976 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fc8c:	d025      	beq.n	801fcda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801fc8e:	9b07      	ldr	r3, [sp, #28]
 801fc90:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801fc92:	3b01      	subs	r3, #1
 801fc94:	fb00 5003 	mla	r0, r0, r3, r5
 801fc98:	1400      	asrs	r0, r0, #16
 801fc9a:	f53f ae89 	bmi.w	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc9e:	3901      	subs	r1, #1
 801fca0:	4288      	cmp	r0, r1
 801fca2:	f6bf ae85 	bge.w	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fca6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801fca8:	fb01 6303 	mla	r3, r1, r3, r6
 801fcac:	141b      	asrs	r3, r3, #16
 801fcae:	f53f ae7f 	bmi.w	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcb2:	3a01      	subs	r2, #1
 801fcb4:	4293      	cmp	r3, r2
 801fcb6:	f6bf ae7b 	bge.w	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcbc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fcc0:	f103 0e03 	add.w	lr, r3, #3
 801fcc4:	f1bb 0f00 	cmp.w	fp, #0
 801fcc8:	dc6e      	bgt.n	801fda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801fcca:	9b07      	ldr	r3, [sp, #28]
 801fccc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcd6:	4423      	add	r3, r4
 801fcd8:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	f340 81ab 	ble.w	8020038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fce6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fce8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcf0:	eef0 6a62 	vmov.f32	s13, s5
 801fcf4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcf8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd00:	ee16 5a90 	vmov	r5, s13
 801fd04:	eef0 6a43 	vmov.f32	s13, s6
 801fd08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd0c:	ee16 6a90 	vmov	r6, s13
 801fd10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd14:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd18:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd28:	ee12 2a90 	vmov	r2, s5
 801fd2c:	eef0 2a47 	vmov.f32	s5, s14
 801fd30:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd34:	ee13 2a10 	vmov	r2, s6
 801fd38:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fd3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd3c:	eeb0 3a67 	vmov.f32	s6, s15
 801fd40:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd44:	932a      	str	r3, [sp, #168]	@ 0xa8
 801fd46:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fd48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd4a:	3b01      	subs	r3, #1
 801fd4c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fd4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd50:	bf08      	it	eq
 801fd52:	4613      	moveq	r3, r2
 801fd54:	9307      	str	r3, [sp, #28]
 801fd56:	e600      	b.n	801f95a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fd58:	f1bc 0f00 	cmp.w	ip, #0
 801fd5c:	f43f ae6e 	beq.w	801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd60:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fd64:	9308      	str	r3, [sp, #32]
 801fd66:	0e1b      	lsrs	r3, r3, #24
 801fd68:	9311      	str	r3, [sp, #68]	@ 0x44
 801fd6a:	e667      	b.n	801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd6c:	f112 0801 	adds.w	r8, r2, #1
 801fd70:	f53f af78 	bmi.w	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd74:	45c6      	cmp	lr, r8
 801fd76:	f6ff af75 	blt.w	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd7a:	f110 0801 	adds.w	r8, r0, #1
 801fd7e:	f53f af71 	bmi.w	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd82:	4543      	cmp	r3, r8
 801fd84:	f6ff af6e 	blt.w	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd88:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801fd8a:	b21b      	sxth	r3, r3
 801fd8c:	9201      	str	r2, [sp, #4]
 801fd8e:	9300      	str	r3, [sp, #0]
 801fd90:	fa0f f38e 	sxth.w	r3, lr
 801fd94:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fd96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fd9a:	e9cd c404 	strd	ip, r4, [sp, #16]
 801fd9e:	4639      	mov	r1, r7
 801fda0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801fda2:	f7ff fc79 	bl	801f698 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801fda6:	e75d      	b.n	801fc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fda8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fdaa:	142f      	asrs	r7, r5, #16
 801fdac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fdae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fdb2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801fdb6:	1433      	asrs	r3, r6, #16
 801fdb8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fdbc:	fb02 7303 	mla	r3, r2, r3, r7
 801fdc0:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801fdc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fdc8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdcc:	2900      	cmp	r1, #0
 801fdce:	f000 812a 	beq.w	8020026 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801fdd2:	687c      	ldr	r4, [r7, #4]
 801fdd4:	940e      	str	r4, [sp, #56]	@ 0x38
 801fdd6:	0e24      	lsrs	r4, r4, #24
 801fdd8:	9415      	str	r4, [sp, #84]	@ 0x54
 801fdda:	b178      	cbz	r0, 801fdfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fddc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801fde0:	3a01      	subs	r2, #1
 801fde2:	0092      	lsls	r2, r2, #2
 801fde4:	3204      	adds	r2, #4
 801fde6:	eb07 0802 	add.w	r8, r7, r2
 801fdea:	58ba      	ldr	r2, [r7, r2]
 801fdec:	9209      	str	r2, [sp, #36]	@ 0x24
 801fdee:	0e12      	lsrs	r2, r2, #24
 801fdf0:	9212      	str	r2, [sp, #72]	@ 0x48
 801fdf2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fdf6:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fdf8:	0e12      	lsrs	r2, r2, #24
 801fdfa:	9216      	str	r2, [sp, #88]	@ 0x58
 801fdfc:	b289      	uxth	r1, r1
 801fdfe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fe00:	b280      	uxth	r0, r0
 801fe02:	fb01 f900 	mul.w	r9, r1, r0
 801fe06:	0109      	lsls	r1, r1, #4
 801fe08:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fe0c:	eba1 0809 	sub.w	r8, r1, r9
 801fe10:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801fe14:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801fe16:	b280      	uxth	r0, r0
 801fe18:	fa1f f888 	uxth.w	r8, r8
 801fe1c:	1a12      	subs	r2, r2, r0
 801fe1e:	fb08 f101 	mul.w	r1, r8, r1
 801fe22:	b292      	uxth	r2, r2
 801fe24:	fb02 110c 	mla	r1, r2, ip, r1
 801fe28:	fb00 1104 	mla	r1, r0, r4, r1
 801fe2c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fe2e:	fb09 1104 	mla	r1, r9, r4, r1
 801fe32:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe36:	2900      	cmp	r1, #0
 801fe38:	f000 80ec 	beq.w	8020014 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801fe3c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fe40:	d019      	beq.n	801fe76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fe42:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fe46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fe4a:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe4e:	fb0c fc03 	mul.w	ip, ip, r3
 801fe52:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe56:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fe5a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fe5e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe62:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe66:	4453      	add	r3, sl
 801fe68:	0a3f      	lsrs	r7, r7, #8
 801fe6a:	0a1b      	lsrs	r3, r3, #8
 801fe6c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fe70:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe74:	433b      	orrs	r3, r7
 801fe76:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe78:	2cff      	cmp	r4, #255	@ 0xff
 801fe7a:	d020      	beq.n	801febe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801fe7c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fe7e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fe82:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe84:	4367      	muls	r7, r4
 801fe86:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fe88:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe8c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fe90:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe92:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fe96:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fe9a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fe9e:	44bc      	add	ip, r7
 801fea0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fea8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801feac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801feb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801feb4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801feb8:	ea4c 040a 	orr.w	r4, ip, sl
 801febc:	940e      	str	r4, [sp, #56]	@ 0x38
 801febe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fec0:	2cff      	cmp	r4, #255	@ 0xff
 801fec2:	d020      	beq.n	801ff06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801fec4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fec6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801feca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fecc:	4367      	muls	r7, r4
 801fece:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fed0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fed4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fed8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801feda:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fede:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fee2:	fb04 fa0a 	mul.w	sl, r4, sl
 801fee6:	44bc      	add	ip, r7
 801fee8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801feec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fef0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fef4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fef8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fefc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff00:	ea4c 040a 	orr.w	r4, ip, sl
 801ff04:	9409      	str	r4, [sp, #36]	@ 0x24
 801ff06:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff08:	2cff      	cmp	r4, #255	@ 0xff
 801ff0a:	d020      	beq.n	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801ff0c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff0e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff12:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff14:	4367      	muls	r7, r4
 801ff16:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff20:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff22:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff2e:	44bc      	add	ip, r7
 801ff30:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff3c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff44:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff48:	ea4c 040a 	orr.w	r4, ip, sl
 801ff4c:	940f      	str	r4, [sp, #60]	@ 0x3c
 801ff4e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff50:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ff54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff58:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ff5e:	fb08 f707 	mul.w	r7, r8, r7
 801ff62:	fb02 770c 	mla	r7, r2, ip, r7
 801ff66:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff6a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff6c:	fb00 770c 	mla	r7, r0, ip, r7
 801ff70:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff76:	fb09 770c 	mla	r7, r9, ip, r7
 801ff7a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ff7e:	fb08 f80c 	mul.w	r8, r8, ip
 801ff82:	0a3f      	lsrs	r7, r7, #8
 801ff84:	fb02 8303 	mla	r3, r2, r3, r8
 801ff88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff8a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ff8e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ff92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff94:	fb00 330a 	mla	r3, r0, sl, r3
 801ff98:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ff9c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ff9e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ffa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffa8:	434b      	muls	r3, r1
 801ffaa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ffae:	1c59      	adds	r1, r3, #1
 801ffb0:	ea47 070c 	orr.w	r7, r7, ip
 801ffb4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffb8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffbc:	b2fa      	uxtb	r2, r7
 801ffbe:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ffc2:	fb12 f200 	smulbb	r2, r2, r0
 801ffc6:	b2c9      	uxtb	r1, r1
 801ffc8:	fb03 2301 	mla	r3, r3, r1, r2
 801ffcc:	b29b      	uxth	r3, r3
 801ffce:	1c5a      	adds	r2, r3, #1
 801ffd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffd4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ffd8:	fb12 f201 	smulbb	r2, r2, r1
 801ffdc:	121b      	asrs	r3, r3, #8
 801ffde:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ffe2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ffe6:	0c3f      	lsrs	r7, r7, #16
 801ffe8:	fb03 2300 	mla	r3, r3, r0, r2
 801ffec:	b29b      	uxth	r3, r3
 801ffee:	1c5a      	adds	r2, r3, #1
 801fff0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fff4:	121b      	asrs	r3, r3, #8
 801fff6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fffa:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fffe:	fb13 f101 	smulbb	r1, r3, r1
 8020002:	fb07 1700 	mla	r7, r7, r0, r1
 8020006:	b2bf      	uxth	r7, r7
 8020008:	1c79      	adds	r1, r7, #1
 802000a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802000e:	123f      	asrs	r7, r7, #8
 8020010:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020014:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020016:	f10e 0e03 	add.w	lr, lr, #3
 802001a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802001e:	441d      	add	r5, r3
 8020020:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020022:	441e      	add	r6, r3
 8020024:	e64e      	b.n	801fcc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8020026:	2800      	cmp	r0, #0
 8020028:	f43f aee8 	beq.w	801fdfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802002c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020030:	9209      	str	r2, [sp, #36]	@ 0x24
 8020032:	0e12      	lsrs	r2, r2, #24
 8020034:	9212      	str	r2, [sp, #72]	@ 0x48
 8020036:	e6e1      	b.n	801fdfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020038:	b01d      	add	sp, #116	@ 0x74
 802003a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802003e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802003e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020042:	b087      	sub	sp, #28
 8020044:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8020048:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802004c:	fb05 7003 	mla	r0, r5, r3, r7
 8020050:	2d00      	cmp	r5, #0
 8020052:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8020056:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802005a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802005e:	f2c0 810a 	blt.w	8020276 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020062:	45a8      	cmp	r8, r5
 8020064:	f340 8107 	ble.w	8020276 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020068:	2f00      	cmp	r7, #0
 802006a:	f2c0 8102 	blt.w	8020272 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802006e:	42bb      	cmp	r3, r7
 8020070:	f340 80ff 	ble.w	8020272 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020074:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020078:	1c7a      	adds	r2, r7, #1
 802007a:	f100 80ff 	bmi.w	802027c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802007e:	4293      	cmp	r3, r2
 8020080:	f340 80fc 	ble.w	802027c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020084:	2c00      	cmp	r4, #0
 8020086:	f000 80fb 	beq.w	8020280 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802008a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802008e:	3501      	adds	r5, #1
 8020090:	f100 80fa 	bmi.w	8020288 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020094:	45a8      	cmp	r8, r5
 8020096:	f340 80f7 	ble.w	8020288 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802009a:	f1be 0f00 	cmp.w	lr, #0
 802009e:	f000 80f6 	beq.w	802028e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80200a2:	2f00      	cmp	r7, #0
 80200a4:	f2c0 80ee 	blt.w	8020284 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80200a8:	42bb      	cmp	r3, r7
 80200aa:	f340 80eb 	ble.w	8020284 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80200ae:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80200b2:	3701      	adds	r7, #1
 80200b4:	f100 80ee 	bmi.w	8020294 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200b8:	42bb      	cmp	r3, r7
 80200ba:	f340 80eb 	ble.w	8020294 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200be:	2c00      	cmp	r4, #0
 80200c0:	f000 80ea 	beq.w	8020298 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80200c4:	3301      	adds	r3, #1
 80200c6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80200ca:	fa1f fc84 	uxth.w	ip, r4
 80200ce:	fa1f fe8e 	uxth.w	lr, lr
 80200d2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80200d6:	fb0c f90e 	mul.w	r9, ip, lr
 80200da:	0e13      	lsrs	r3, r2, #24
 80200dc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80200e0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80200e4:	9302      	str	r3, [sp, #8]
 80200e6:	ebac 0709 	sub.w	r7, ip, r9
 80200ea:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80200ee:	fa1f f48e 	uxth.w	r4, lr
 80200f2:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80200f6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80200fa:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80200fe:	fb0a fe0e 	mul.w	lr, sl, lr
 8020102:	1b1b      	subs	r3, r3, r4
 8020104:	fb0a f606 	mul.w	r6, sl, r6
 8020108:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802010c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020110:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8020114:	b29b      	uxth	r3, r3
 8020116:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802011a:	b2bf      	uxth	r7, r7
 802011c:	9301      	str	r3, [sp, #4]
 802011e:	44e6      	add	lr, ip
 8020120:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8020124:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020128:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802012c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8020130:	9303      	str	r3, [sp, #12]
 8020132:	0a33      	lsrs	r3, r6, #8
 8020134:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8020138:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802013c:	9304      	str	r3, [sp, #16]
 802013e:	fb0b f606 	mul.w	r6, fp, r6
 8020142:	fb0b f000 	mul.w	r0, fp, r0
 8020146:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802014a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802014e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020152:	44b6      	add	lr, r6
 8020154:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8020158:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802015c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8020160:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020164:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020168:	fb08 f606 	mul.w	r6, r8, r6
 802016c:	0a03      	lsrs	r3, r0, #8
 802016e:	fb08 f505 	mul.w	r5, r8, r5
 8020172:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020176:	0a30      	lsrs	r0, r6, #8
 8020178:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802017c:	9305      	str	r3, [sp, #20]
 802017e:	0e13      	lsrs	r3, r2, #24
 8020180:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020184:	fb0e fe07 	mul.w	lr, lr, r7
 8020188:	4430      	add	r0, r6
 802018a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802018e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020192:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8020196:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802019a:	0a00      	lsrs	r0, r0, #8
 802019c:	435e      	muls	r6, r3
 802019e:	0a2d      	lsrs	r5, r5, #8
 80201a0:	435a      	muls	r2, r3
 80201a2:	9b03      	ldr	r3, [sp, #12]
 80201a4:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80201a8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80201ac:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80201b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201b4:	44b4      	add	ip, r6
 80201b6:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80201ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201be:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80201c2:	9e01      	ldr	r6, [sp, #4]
 80201c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201c8:	fb03 ee06 	mla	lr, r3, r6, lr
 80201cc:	9b04      	ldr	r3, [sp, #16]
 80201ce:	0a12      	lsrs	r2, r2, #8
 80201d0:	fb0c ee09 	mla	lr, ip, r9, lr
 80201d4:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80201d8:	9b05      	ldr	r3, [sp, #20]
 80201da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80201de:	fb00 ee04 	mla	lr, r0, r4, lr
 80201e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201e6:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80201ea:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80201ee:	9b01      	ldr	r3, [sp, #4]
 80201f0:	fb07 fe0e 	mul.w	lr, r7, lr
 80201f4:	fb07 f70b 	mul.w	r7, r7, fp
 80201f8:	fb03 ee06 	mla	lr, r3, r6, lr
 80201fc:	fb03 730a 	mla	r3, r3, sl, r7
 8020200:	fb09 e202 	mla	r2, r9, r2, lr
 8020204:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8020208:	fb04 2e0e 	mla	lr, r4, lr, r2
 802020c:	fb04 3408 	mla	r4, r4, r8, r3
 8020210:	9b02      	ldr	r3, [sp, #8]
 8020212:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020216:	fb09 4903 	mla	r9, r9, r3, r4
 802021a:	780b      	ldrb	r3, [r1, #0]
 802021c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020220:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020224:	ea40 0e0e 	orr.w	lr, r0, lr
 8020228:	fa5f f989 	uxtb.w	r9, r9
 802022c:	fb03 f209 	mul.w	r2, r3, r9
 8020230:	1c53      	adds	r3, r2, #1
 8020232:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020236:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802023a:	700b      	strb	r3, [r1, #0]
 802023c:	784b      	ldrb	r3, [r1, #1]
 802023e:	fb03 f309 	mul.w	r3, r3, r9
 8020242:	1c5a      	adds	r2, r3, #1
 8020244:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020248:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802024c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020250:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020254:	704b      	strb	r3, [r1, #1]
 8020256:	788b      	ldrb	r3, [r1, #2]
 8020258:	fb03 f909 	mul.w	r9, r3, r9
 802025c:	f109 0301 	add.w	r3, r9, #1
 8020260:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020264:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8020268:	f881 e002 	strb.w	lr, [r1, #2]
 802026c:	b007      	add	sp, #28
 802026e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020272:	2600      	movs	r6, #0
 8020274:	e700      	b.n	8020078 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8020276:	2000      	movs	r0, #0
 8020278:	4606      	mov	r6, r0
 802027a:	e708      	b.n	802008e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802027c:	2000      	movs	r0, #0
 802027e:	e706      	b.n	802008e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020280:	4620      	mov	r0, r4
 8020282:	e704      	b.n	802008e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020284:	2500      	movs	r5, #0
 8020286:	e714      	b.n	80200b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8020288:	2200      	movs	r2, #0
 802028a:	4615      	mov	r5, r2
 802028c:	e71d      	b.n	80200ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802028e:	4672      	mov	r2, lr
 8020290:	4675      	mov	r5, lr
 8020292:	e71a      	b.n	80200ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020294:	2200      	movs	r2, #0
 8020296:	e718      	b.n	80200ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020298:	4622      	mov	r2, r4
 802029a:	e716      	b.n	80200ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802029c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a0:	b099      	sub	sp, #100	@ 0x64
 80202a2:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80202a6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80202a8:	9017      	str	r0, [sp, #92]	@ 0x5c
 80202aa:	9306      	str	r3, [sp, #24]
 80202ac:	6850      	ldr	r0, [r2, #4]
 80202ae:	6812      	ldr	r2, [r2, #0]
 80202b0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80202b4:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80202b8:	fb00 1303 	mla	r3, r0, r3, r1
 80202bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202c0:	18d3      	adds	r3, r2, r3
 80202c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80202c4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80202ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	dc03      	bgt.n	80202d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80202d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	f340 8360 	ble.w	8020998 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80202d8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202e2:	1e48      	subs	r0, r1, #1
 80202e4:	1e57      	subs	r7, r2, #1
 80202e6:	9b06      	ldr	r3, [sp, #24]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	f340 817b 	ble.w	80205e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80202ee:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80202f2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80202f6:	d406      	bmi.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202f8:	4584      	cmp	ip, r0
 80202fa:	da04      	bge.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	db02      	blt.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020300:	42bb      	cmp	r3, r7
 8020302:	f2c0 8170 	blt.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020306:	f11c 0c01 	adds.w	ip, ip, #1
 802030a:	f100 8160 	bmi.w	80205ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802030e:	4561      	cmp	r1, ip
 8020310:	f2c0 815d 	blt.w	80205ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020314:	3301      	adds	r3, #1
 8020316:	f100 815a 	bmi.w	80205ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802031a:	429a      	cmp	r2, r3
 802031c:	f2c0 8157 	blt.w	80205ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020320:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020324:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020326:	f1b8 0f00 	cmp.w	r8, #0
 802032a:	f340 8179 	ble.w	8020620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802032e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8020330:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020334:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020336:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802033a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802033e:	142a      	asrs	r2, r5, #16
 8020340:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020344:	689b      	ldr	r3, [r3, #8]
 8020346:	f100 81be 	bmi.w	80206c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802034a:	f103 39ff 	add.w	r9, r3, #4294967295
 802034e:	454a      	cmp	r2, r9
 8020350:	f280 81b9 	bge.w	80206c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020354:	f1bc 0f00 	cmp.w	ip, #0
 8020358:	f2c0 81b5 	blt.w	80206c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802035c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8020360:	45cc      	cmp	ip, r9
 8020362:	f280 81b0 	bge.w	80206c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020366:	b21b      	sxth	r3, r3
 8020368:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802036a:	fb0c 2203 	mla	r2, ip, r3, r2
 802036e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8020372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020376:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802037a:	2900      	cmp	r1, #0
 802037c:	f000 8197 	beq.w	80206ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020380:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020384:	940a      	str	r4, [sp, #40]	@ 0x28
 8020386:	0e24      	lsrs	r4, r4, #24
 8020388:	9411      	str	r4, [sp, #68]	@ 0x44
 802038a:	b180      	cbz	r0, 80203ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802038c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020390:	3b01      	subs	r3, #1
 8020392:	009b      	lsls	r3, r3, #2
 8020394:	3304      	adds	r3, #4
 8020396:	eb09 0c03 	add.w	ip, r9, r3
 802039a:	f859 3003 	ldr.w	r3, [r9, r3]
 802039e:	9307      	str	r3, [sp, #28]
 80203a0:	0e1b      	lsrs	r3, r3, #24
 80203a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80203a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203aa:	0e1b      	lsrs	r3, r3, #24
 80203ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80203ae:	b289      	uxth	r1, r1
 80203b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80203b2:	b280      	uxth	r0, r0
 80203b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80203b6:	fb01 fa00 	mul.w	sl, r1, r0
 80203ba:	0109      	lsls	r1, r1, #4
 80203bc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80203c0:	eba1 090a 	sub.w	r9, r1, sl
 80203c4:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80203c8:	b280      	uxth	r0, r0
 80203ca:	fa1f f989 	uxth.w	r9, r9
 80203ce:	1a09      	subs	r1, r1, r0
 80203d0:	fb09 f303 	mul.w	r3, r9, r3
 80203d4:	b289      	uxth	r1, r1
 80203d6:	fb01 330e 	mla	r3, r1, lr, r3
 80203da:	fb00 3304 	mla	r3, r0, r4, r3
 80203de:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80203e0:	fb0a 3304 	mla	r3, sl, r4, r3
 80203e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	f000 80e8 	beq.w	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80203ee:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80203f2:	d01b      	beq.n	802042c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80203f4:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80203f8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80203fc:	fb0e fb0b 	mul.w	fp, lr, fp
 8020400:	fb0e fe02 	mul.w	lr, lr, r2
 8020404:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8020408:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802040c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020410:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020414:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020418:	445a      	add	r2, fp
 802041a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802041e:	0a12      	lsrs	r2, r2, #8
 8020420:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020424:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020428:	ea42 020c 	orr.w	r2, r2, ip
 802042c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802042e:	2cff      	cmp	r4, #255	@ 0xff
 8020430:	d021      	beq.n	8020476 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020432:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020434:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020438:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802043a:	fb04 fc0c 	mul.w	ip, r4, ip
 802043e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020440:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020444:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020448:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802044a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802044e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020452:	fb04 fb0b 	mul.w	fp, r4, fp
 8020456:	44e6      	add	lr, ip
 8020458:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802045c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020460:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020464:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020468:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802046c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020470:	ea4e 040b 	orr.w	r4, lr, fp
 8020474:	940a      	str	r4, [sp, #40]	@ 0x28
 8020476:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020478:	2cff      	cmp	r4, #255	@ 0xff
 802047a:	d021      	beq.n	80204c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802047c:	9c07      	ldr	r4, [sp, #28]
 802047e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020482:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020484:	fb04 fc0c 	mul.w	ip, r4, ip
 8020488:	9c07      	ldr	r4, [sp, #28]
 802048a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802048e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020492:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020494:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020498:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802049c:	fb04 fb0b 	mul.w	fp, r4, fp
 80204a0:	44e6      	add	lr, ip
 80204a2:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80204a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204aa:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80204ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204b2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80204b6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80204ba:	ea4e 040b 	orr.w	r4, lr, fp
 80204be:	9407      	str	r4, [sp, #28]
 80204c0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204c2:	2cff      	cmp	r4, #255	@ 0xff
 80204c4:	d021      	beq.n	802050a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80204c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204c8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204ce:	fb04 fc0c 	mul.w	ip, r4, ip
 80204d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80204d8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80204dc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204de:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80204e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204e6:	fb04 fb0b 	mul.w	fp, r4, fp
 80204ea:	44e6      	add	lr, ip
 80204ec:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80204f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204f4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80204f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204fc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020500:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020504:	ea4e 040b 	orr.w	r4, lr, fp
 8020508:	940b      	str	r4, [sp, #44]	@ 0x2c
 802050a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802050c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8020510:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020514:	2bff      	cmp	r3, #255	@ 0xff
 8020516:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802051a:	9c07      	ldr	r4, [sp, #28]
 802051c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020520:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020524:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020528:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802052a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802052e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020532:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020534:	fb0a cc0e 	mla	ip, sl, lr, ip
 8020538:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802053c:	fb09 f90e 	mul.w	r9, r9, lr
 8020540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020544:	fb01 9202 	mla	r2, r1, r2, r9
 8020548:	9907      	ldr	r1, [sp, #28]
 802054a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802054e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8020552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020554:	fb00 220b 	mla	r2, r0, fp, r2
 8020558:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802055c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8020560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020564:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020568:	ea4c 0c0a 	orr.w	ip, ip, sl
 802056c:	fa5f f08c 	uxtb.w	r0, ip
 8020570:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020574:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020578:	f000 80a2 	beq.w	80206c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802057c:	43db      	mvns	r3, r3
 802057e:	783a      	ldrb	r2, [r7, #0]
 8020580:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020584:	b2db      	uxtb	r3, r3
 8020586:	fb02 fe03 	mul.w	lr, r2, r3
 802058a:	fb0a fa03 	mul.w	sl, sl, r3
 802058e:	f10e 0201 	add.w	r2, lr, #1
 8020592:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020596:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802059a:	703a      	strb	r2, [r7, #0]
 802059c:	787a      	ldrb	r2, [r7, #1]
 802059e:	fb02 f003 	mul.w	r0, r2, r3
 80205a2:	f10a 0301 	add.w	r3, sl, #1
 80205a6:	1c42      	adds	r2, r0, #1
 80205a8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80205ac:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80205b0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80205b4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80205b8:	707a      	strb	r2, [r7, #1]
 80205ba:	f887 c002 	strb.w	ip, [r7, #2]
 80205be:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205c0:	3703      	adds	r7, #3
 80205c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80205c6:	441d      	add	r5, r3
 80205c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205ca:	441e      	add	r6, r3
 80205cc:	e6ab      	b.n	8020326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80205ce:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205d0:	441d      	add	r5, r3
 80205d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205d4:	441e      	add	r6, r3
 80205d6:	9b06      	ldr	r3, [sp, #24]
 80205d8:	3b01      	subs	r3, #1
 80205da:	9306      	str	r3, [sp, #24]
 80205dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205de:	3303      	adds	r3, #3
 80205e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80205e2:	e680      	b.n	80202e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80205e4:	d024      	beq.n	8020630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80205e6:	9b06      	ldr	r3, [sp, #24]
 80205e8:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80205ea:	3b01      	subs	r3, #1
 80205ec:	fb00 5003 	mla	r0, r0, r3, r5
 80205f0:	1400      	asrs	r0, r0, #16
 80205f2:	f53f ae95 	bmi.w	8020320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205f6:	3901      	subs	r1, #1
 80205f8:	4288      	cmp	r0, r1
 80205fa:	f6bf ae91 	bge.w	8020320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205fe:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8020600:	fb01 6303 	mla	r3, r1, r3, r6
 8020604:	141b      	asrs	r3, r3, #16
 8020606:	f53f ae8b 	bmi.w	8020320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802060a:	3a01      	subs	r2, #1
 802060c:	4293      	cmp	r3, r2
 802060e:	f6bf ae87 	bge.w	8020320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020614:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020618:	1cdf      	adds	r7, r3, #3
 802061a:	f1bb 0f00 	cmp.w	fp, #0
 802061e:	dc6e      	bgt.n	80206fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8020620:	9b06      	ldr	r3, [sp, #24]
 8020622:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020628:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802062c:	4423      	add	r3, r4
 802062e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020630:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020632:	2b00      	cmp	r3, #0
 8020634:	f340 81b0 	ble.w	8020998 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020638:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802063c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802063e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020642:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020646:	eef0 6a62 	vmov.f32	s13, s5
 802064a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802064e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020656:	ee16 5a90 	vmov	r5, s13
 802065a:	eef0 6a43 	vmov.f32	s13, s6
 802065e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020662:	ee16 6a90 	vmov	r6, s13
 8020666:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802066a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802066e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020672:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020676:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802067a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802067e:	ee12 2a90 	vmov	r2, s5
 8020682:	eef0 2a47 	vmov.f32	s5, s14
 8020686:	fb92 f3f3 	sdiv	r3, r2, r3
 802068a:	ee13 2a10 	vmov	r2, s6
 802068e:	9325      	str	r3, [sp, #148]	@ 0x94
 8020690:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020692:	eeb0 3a67 	vmov.f32	s6, s15
 8020696:	fb92 f3f3 	sdiv	r3, r2, r3
 802069a:	9326      	str	r3, [sp, #152]	@ 0x98
 802069c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802069e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80206a0:	3b01      	subs	r3, #1
 80206a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80206a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206a6:	bf08      	it	eq
 80206a8:	4613      	moveq	r3, r2
 80206aa:	9306      	str	r3, [sp, #24]
 80206ac:	e60d      	b.n	80202ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80206ae:	2800      	cmp	r0, #0
 80206b0:	f43f ae7d 	beq.w	80203ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80206b8:	9307      	str	r3, [sp, #28]
 80206ba:	0e1b      	lsrs	r3, r3, #24
 80206bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206be:	e676      	b.n	80203ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206c0:	7038      	strb	r0, [r7, #0]
 80206c2:	7079      	strb	r1, [r7, #1]
 80206c4:	e779      	b.n	80205ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80206c6:	f112 0901 	adds.w	r9, r2, #1
 80206ca:	f53f af78 	bmi.w	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206ce:	454b      	cmp	r3, r9
 80206d0:	f6ff af75 	blt.w	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206d4:	f11c 0901 	adds.w	r9, ip, #1
 80206d8:	f53f af71 	bmi.w	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206dc:	45ce      	cmp	lr, r9
 80206de:	f6ff af6e 	blt.w	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206e2:	b21b      	sxth	r3, r3
 80206e4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80206e8:	fa0f f28e 	sxth.w	r2, lr
 80206ec:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80206f0:	9200      	str	r2, [sp, #0]
 80206f2:	4639      	mov	r1, r7
 80206f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80206f6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80206f8:	f7ff fca1 	bl	802003e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80206fc:	e75f      	b.n	80205be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206fe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020700:	1429      	asrs	r1, r5, #16
 8020702:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020704:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020708:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802070c:	1433      	asrs	r3, r6, #16
 802070e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020712:	fb0c 1303 	mla	r3, ip, r3, r1
 8020716:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020718:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802071c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020720:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020724:	2a00      	cmp	r2, #0
 8020726:	f000 8129 	beq.w	802097c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802072a:	684c      	ldr	r4, [r1, #4]
 802072c:	940c      	str	r4, [sp, #48]	@ 0x30
 802072e:	0e24      	lsrs	r4, r4, #24
 8020730:	9413      	str	r4, [sp, #76]	@ 0x4c
 8020732:	b198      	cbz	r0, 802075c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020734:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8020738:	f10c 3cff 	add.w	ip, ip, #4294967295
 802073c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020740:	f10c 0c04 	add.w	ip, ip, #4
 8020744:	eb01 080c 	add.w	r8, r1, ip
 8020748:	f851 100c 	ldr.w	r1, [r1, ip]
 802074c:	9108      	str	r1, [sp, #32]
 802074e:	0e09      	lsrs	r1, r1, #24
 8020750:	9110      	str	r1, [sp, #64]	@ 0x40
 8020752:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020756:	910d      	str	r1, [sp, #52]	@ 0x34
 8020758:	0e09      	lsrs	r1, r1, #24
 802075a:	9114      	str	r1, [sp, #80]	@ 0x50
 802075c:	b292      	uxth	r2, r2
 802075e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020760:	b280      	uxth	r0, r0
 8020762:	fb02 f900 	mul.w	r9, r2, r0
 8020766:	0112      	lsls	r2, r2, #4
 8020768:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802076c:	eba2 0809 	sub.w	r8, r2, r9
 8020770:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020774:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020776:	b280      	uxth	r0, r0
 8020778:	fa1f f888 	uxth.w	r8, r8
 802077c:	1a09      	subs	r1, r1, r0
 802077e:	fb08 f202 	mul.w	r2, r8, r2
 8020782:	b289      	uxth	r1, r1
 8020784:	fb01 220e 	mla	r2, r1, lr, r2
 8020788:	fb00 2204 	mla	r2, r0, r4, r2
 802078c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802078e:	fb09 2204 	mla	r2, r9, r4, r2
 8020792:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020796:	2a00      	cmp	r2, #0
 8020798:	f000 80e8 	beq.w	802096c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802079c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80207a0:	d01b      	beq.n	80207da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80207a2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80207a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80207aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80207ae:	fb0e fe03 	mul.w	lr, lr, r3
 80207b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80207b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80207ba:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80207be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80207c6:	4453      	add	r3, sl
 80207c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207cc:	0a1b      	lsrs	r3, r3, #8
 80207ce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80207d2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207d6:	ea43 030c 	orr.w	r3, r3, ip
 80207da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207dc:	2cff      	cmp	r4, #255	@ 0xff
 80207de:	d021      	beq.n	8020824 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80207e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80207e2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80207e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207e8:	fb04 fc0c 	mul.w	ip, r4, ip
 80207ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80207ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80207f2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80207f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207f8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80207fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020800:	fb04 fa0a 	mul.w	sl, r4, sl
 8020804:	44e6      	add	lr, ip
 8020806:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802080a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802080e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020812:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020816:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802081a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802081e:	ea4e 040a 	orr.w	r4, lr, sl
 8020822:	940c      	str	r4, [sp, #48]	@ 0x30
 8020824:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020826:	2cff      	cmp	r4, #255	@ 0xff
 8020828:	d021      	beq.n	802086e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802082a:	9c08      	ldr	r4, [sp, #32]
 802082c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020830:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020832:	fb04 fc0c 	mul.w	ip, r4, ip
 8020836:	9c08      	ldr	r4, [sp, #32]
 8020838:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802083c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802083e:	fb04 fa0e 	mul.w	sl, r4, lr
 8020842:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020846:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802084a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802084e:	44e6      	add	lr, ip
 8020850:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020854:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020858:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802085c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020860:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020864:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020868:	ea4e 040a 	orr.w	r4, lr, sl
 802086c:	9408      	str	r4, [sp, #32]
 802086e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020870:	2cff      	cmp	r4, #255	@ 0xff
 8020872:	d021      	beq.n	80208b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8020874:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020876:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802087a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802087c:	fb04 fc0c 	mul.w	ip, r4, ip
 8020880:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020882:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020886:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802088a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802088c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020890:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020894:	fb04 fa0a 	mul.w	sl, r4, sl
 8020898:	44e6      	add	lr, ip
 802089a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802089e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80208aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80208b2:	ea4e 040a 	orr.w	r4, lr, sl
 80208b6:	940d      	str	r4, [sp, #52]	@ 0x34
 80208b8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80208ba:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80208be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80208c2:	2aff      	cmp	r2, #255	@ 0xff
 80208c4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208c8:	9c08      	ldr	r4, [sp, #32]
 80208ca:	fb08 fc0c 	mul.w	ip, r8, ip
 80208ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 80208d2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208d6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80208d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80208dc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80208e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80208e6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80208ea:	fb08 f80e 	mul.w	r8, r8, lr
 80208ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208f2:	fb01 8303 	mla	r3, r1, r3, r8
 80208f6:	9908      	ldr	r1, [sp, #32]
 80208f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80208fc:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020900:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020902:	fb00 330a 	mla	r3, r0, sl, r3
 8020906:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802090a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802090e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020912:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020916:	ea4c 0c0e 	orr.w	ip, ip, lr
 802091a:	fa5f f08c 	uxtb.w	r0, ip
 802091e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020922:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020926:	d032      	beq.n	802098e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020928:	43d2      	mvns	r2, r2
 802092a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802092e:	b2d2      	uxtb	r2, r2
 8020930:	fb0e fe02 	mul.w	lr, lr, r2
 8020934:	f10e 0301 	add.w	r3, lr, #1
 8020938:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802093c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020940:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8020944:	4350      	muls	r0, r2
 8020946:	f807 3c03 	strb.w	r3, [r7, #-3]
 802094a:	1c43      	adds	r3, r0, #1
 802094c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020950:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020954:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8020958:	4353      	muls	r3, r2
 802095a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802095e:	1c5a      	adds	r2, r3, #1
 8020960:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020964:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020968:	f807 cc01 	strb.w	ip, [r7, #-1]
 802096c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802096e:	3703      	adds	r7, #3
 8020970:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020974:	441d      	add	r5, r3
 8020976:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020978:	441e      	add	r6, r3
 802097a:	e64e      	b.n	802061a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802097c:	2800      	cmp	r0, #0
 802097e:	f43f aeed 	beq.w	802075c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020982:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020986:	9108      	str	r1, [sp, #32]
 8020988:	0e09      	lsrs	r1, r1, #24
 802098a:	9110      	str	r1, [sp, #64]	@ 0x40
 802098c:	e6e6      	b.n	802075c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802098e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8020992:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020996:	e7e7      	b.n	8020968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8020998:	b019      	add	sp, #100	@ 0x64
 802099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080209a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80209a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80209a8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80209ac:	2c00      	cmp	r4, #0
 80209ae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80209b2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80209b6:	fb00 4e03 	mla	lr, r0, r3, r4
 80209ba:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80209be:	f2c0 80b8 	blt.w	8020b32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209c2:	45a1      	cmp	r9, r4
 80209c4:	f340 80b5 	ble.w	8020b32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209c8:	2800      	cmp	r0, #0
 80209ca:	f2c0 80b2 	blt.w	8020b32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209ce:	4580      	cmp	r8, r0
 80209d0:	f340 80af 	ble.w	8020b32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209d4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80209d8:	f01e 0f01 	tst.w	lr, #1
 80209dc:	5d56      	ldrb	r6, [r2, r5]
 80209de:	bf0c      	ite	eq
 80209e0:	f006 060f 	andeq.w	r6, r6, #15
 80209e4:	1136      	asrne	r6, r6, #4
 80209e6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80209ea:	b2f6      	uxtb	r6, r6
 80209ec:	f114 0a01 	adds.w	sl, r4, #1
 80209f0:	f100 80a1 	bmi.w	8020b36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209f4:	45d1      	cmp	r9, sl
 80209f6:	f340 809e 	ble.w	8020b36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209fa:	2800      	cmp	r0, #0
 80209fc:	f2c0 809b 	blt.w	8020b36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a00:	4580      	cmp	r8, r0
 8020a02:	f340 8098 	ble.w	8020b36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a06:	2f00      	cmp	r7, #0
 8020a08:	f000 8097 	beq.w	8020b3a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020a0c:	f10e 0b01 	add.w	fp, lr, #1
 8020a10:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020a14:	f01b 0f01 	tst.w	fp, #1
 8020a18:	5d55      	ldrb	r5, [r2, r5]
 8020a1a:	bf0c      	ite	eq
 8020a1c:	f005 050f 	andeq.w	r5, r5, #15
 8020a20:	112d      	asrne	r5, r5, #4
 8020a22:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020a26:	b2ed      	uxtb	r5, r5
 8020a28:	f1bc 0f00 	cmp.w	ip, #0
 8020a2c:	f000 8089 	beq.w	8020b42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020a30:	2c00      	cmp	r4, #0
 8020a32:	f100 0001 	add.w	r0, r0, #1
 8020a36:	f2c0 8082 	blt.w	8020b3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a3a:	45a1      	cmp	r9, r4
 8020a3c:	dd7f      	ble.n	8020b3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a3e:	2800      	cmp	r0, #0
 8020a40:	db7d      	blt.n	8020b3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a42:	4580      	cmp	r8, r0
 8020a44:	dd7b      	ble.n	8020b3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a46:	eb03 0b0e 	add.w	fp, r3, lr
 8020a4a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020a4e:	f01b 0f01 	tst.w	fp, #1
 8020a52:	5d14      	ldrb	r4, [r2, r4]
 8020a54:	bf0c      	ite	eq
 8020a56:	f004 040f 	andeq.w	r4, r4, #15
 8020a5a:	1124      	asrne	r4, r4, #4
 8020a5c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020a60:	b2e4      	uxtb	r4, r4
 8020a62:	f1ba 0f00 	cmp.w	sl, #0
 8020a66:	db6f      	blt.n	8020b48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a68:	45d1      	cmp	r9, sl
 8020a6a:	dd6d      	ble.n	8020b48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a6c:	2800      	cmp	r0, #0
 8020a6e:	db6b      	blt.n	8020b48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a70:	4580      	cmp	r8, r0
 8020a72:	dd69      	ble.n	8020b48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a74:	2f00      	cmp	r7, #0
 8020a76:	d069      	beq.n	8020b4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8020a78:	3301      	adds	r3, #1
 8020a7a:	449e      	add	lr, r3
 8020a7c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020a80:	f01e 0f01 	tst.w	lr, #1
 8020a84:	5cd0      	ldrb	r0, [r2, r3]
 8020a86:	bf0c      	ite	eq
 8020a88:	f000 000f 	andeq.w	r0, r0, #15
 8020a8c:	1100      	asrne	r0, r0, #4
 8020a8e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020a92:	b2c3      	uxtb	r3, r0
 8020a94:	b2ba      	uxth	r2, r7
 8020a96:	fa1f fc8c 	uxth.w	ip, ip
 8020a9a:	fb02 f00c 	mul.w	r0, r2, ip
 8020a9e:	0112      	lsls	r2, r2, #4
 8020aa0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020aa4:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020aa8:	1a12      	subs	r2, r2, r0
 8020aaa:	fa1f fc8c 	uxth.w	ip, ip
 8020aae:	b292      	uxth	r2, r2
 8020ab0:	eba7 070c 	sub.w	r7, r7, ip
 8020ab4:	436a      	muls	r2, r5
 8020ab6:	b2bf      	uxth	r7, r7
 8020ab8:	fb06 2207 	mla	r2, r6, r7, r2
 8020abc:	fb0c 2404 	mla	r4, ip, r4, r2
 8020ac0:	fb00 4303 	mla	r3, r0, r3, r4
 8020ac4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ac8:	b38b      	cbz	r3, 8020b2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8020aca:	4a21      	ldr	r2, [pc, #132]	@ (8020b50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020acc:	6814      	ldr	r4, [r2, #0]
 8020ace:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8020ad2:	b2e5      	uxtb	r5, r4
 8020ad4:	4353      	muls	r3, r2
 8020ad6:	1c5a      	adds	r2, r3, #1
 8020ad8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020adc:	1212      	asrs	r2, r2, #8
 8020ade:	b290      	uxth	r0, r2
 8020ae0:	43d2      	mvns	r2, r2
 8020ae2:	fb15 f500 	smulbb	r5, r5, r0
 8020ae6:	b2d3      	uxtb	r3, r2
 8020ae8:	780a      	ldrb	r2, [r1, #0]
 8020aea:	fb02 5203 	mla	r2, r2, r3, r5
 8020aee:	b292      	uxth	r2, r2
 8020af0:	1c55      	adds	r5, r2, #1
 8020af2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020af6:	784d      	ldrb	r5, [r1, #1]
 8020af8:	fb15 f503 	smulbb	r5, r5, r3
 8020afc:	1212      	asrs	r2, r2, #8
 8020afe:	700a      	strb	r2, [r1, #0]
 8020b00:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020b04:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020b08:	fb02 5200 	mla	r2, r2, r0, r5
 8020b0c:	b292      	uxth	r2, r2
 8020b0e:	1c55      	adds	r5, r2, #1
 8020b10:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020b14:	1212      	asrs	r2, r2, #8
 8020b16:	704a      	strb	r2, [r1, #1]
 8020b18:	788a      	ldrb	r2, [r1, #2]
 8020b1a:	fb12 f303 	smulbb	r3, r2, r3
 8020b1e:	fb04 3300 	mla	r3, r4, r0, r3
 8020b22:	b29b      	uxth	r3, r3
 8020b24:	1c5a      	adds	r2, r3, #1
 8020b26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b2a:	121b      	asrs	r3, r3, #8
 8020b2c:	708b      	strb	r3, [r1, #2]
 8020b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b32:	2600      	movs	r6, #0
 8020b34:	e75a      	b.n	80209ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020b36:	2500      	movs	r5, #0
 8020b38:	e776      	b.n	8020a28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b3a:	463d      	mov	r5, r7
 8020b3c:	e774      	b.n	8020a28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b3e:	2400      	movs	r4, #0
 8020b40:	e78f      	b.n	8020a62 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020b42:	4663      	mov	r3, ip
 8020b44:	4664      	mov	r4, ip
 8020b46:	e7a5      	b.n	8020a94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b48:	2300      	movs	r3, #0
 8020b4a:	e7a3      	b.n	8020a94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b4c:	463b      	mov	r3, r7
 8020b4e:	e7a1      	b.n	8020a94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b50:	240253c4 	.word	0x240253c4

08020b54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b58:	b097      	sub	sp, #92	@ 0x5c
 8020b5a:	9214      	str	r2, [sp, #80]	@ 0x50
 8020b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b5e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020b60:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020b64:	9015      	str	r0, [sp, #84]	@ 0x54
 8020b66:	910c      	str	r1, [sp, #48]	@ 0x30
 8020b68:	6850      	ldr	r0, [r2, #4]
 8020b6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b6c:	6812      	ldr	r2, [r2, #0]
 8020b6e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8020b72:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8020b76:	fb00 1303 	mla	r3, r0, r3, r1
 8020b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b7e:	eb02 0a03 	add.w	sl, r2, r3
 8020b82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b84:	689b      	ldr	r3, [r3, #8]
 8020b86:	3301      	adds	r3, #1
 8020b88:	f023 0301 	bic.w	r3, r3, #1
 8020b8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b90:	681f      	ldr	r7, [r3, #0]
 8020b92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	dc03      	bgt.n	8020ba0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	f340 8247 	ble.w	802102e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020ba0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020ba2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ba6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020baa:	1e48      	subs	r0, r1, #1
 8020bac:	f102 3cff 	add.w	ip, r2, #4294967295
 8020bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	f340 80e5 	ble.w	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020bb8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020bbc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020bc0:	d406      	bmi.n	8020bd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bc2:	4586      	cmp	lr, r0
 8020bc4:	da04      	bge.n	8020bd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	db02      	blt.n	8020bd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bca:	4563      	cmp	r3, ip
 8020bcc:	f2c0 80da 	blt.w	8020d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020bd0:	f11e 0e01 	adds.w	lr, lr, #1
 8020bd4:	f100 80cb 	bmi.w	8020d6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bd8:	4571      	cmp	r1, lr
 8020bda:	f2c0 80c8 	blt.w	8020d6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bde:	3301      	adds	r3, #1
 8020be0:	f100 80c5 	bmi.w	8020d6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020be4:	429a      	cmp	r2, r3
 8020be6:	f2c0 80c2 	blt.w	8020d6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bec:	46d0      	mov	r8, sl
 8020bee:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020bf2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	f340 80e3 	ble.w	8020dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020bfc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bfe:	1430      	asrs	r0, r6, #16
 8020c00:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020c04:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020c08:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020c0c:	142b      	asrs	r3, r5, #16
 8020c0e:	f100 812e 	bmi.w	8020e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c12:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020c16:	455b      	cmp	r3, fp
 8020c18:	f280 8129 	bge.w	8020e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c1c:	2800      	cmp	r0, #0
 8020c1e:	f2c0 8126 	blt.w	8020e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c22:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020c26:	4558      	cmp	r0, fp
 8020c28:	f280 8121 	bge.w	8020e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c2c:	fb00 3309 	mla	r3, r0, r9, r3
 8020c30:	0858      	lsrs	r0, r3, #1
 8020c32:	07dc      	lsls	r4, r3, #31
 8020c34:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020c38:	bf54      	ite	pl
 8020c3a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020c3e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020c42:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c46:	fa5f fc8c 	uxtb.w	ip, ip
 8020c4a:	2a00      	cmp	r2, #0
 8020c4c:	f000 80fe 	beq.w	8020e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020c50:	1c58      	adds	r0, r3, #1
 8020c52:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020c56:	07c0      	lsls	r0, r0, #31
 8020c58:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020c5c:	bf54      	ite	pl
 8020c5e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020c62:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020c66:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020c6a:	fa5f f08e 	uxtb.w	r0, lr
 8020c6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8020c70:	b1d9      	cbz	r1, 8020caa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020c72:	444b      	add	r3, r9
 8020c74:	0858      	lsrs	r0, r3, #1
 8020c76:	07dc      	lsls	r4, r3, #31
 8020c78:	f103 0301 	add.w	r3, r3, #1
 8020c7c:	5c38      	ldrb	r0, [r7, r0]
 8020c7e:	bf54      	ite	pl
 8020c80:	f000 000f 	andpl.w	r0, r0, #15
 8020c84:	1100      	asrmi	r0, r0, #4
 8020c86:	07dc      	lsls	r4, r3, #31
 8020c88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020c8c:	b2c0      	uxtb	r0, r0
 8020c8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c90:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020c94:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020c98:	bf54      	ite	pl
 8020c9a:	f00e 030f 	andpl.w	r3, lr, #15
 8020c9e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020ca2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ca6:	b2db      	uxtb	r3, r3
 8020ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8020caa:	b292      	uxth	r2, r2
 8020cac:	b289      	uxth	r1, r1
 8020cae:	0113      	lsls	r3, r2, #4
 8020cb0:	fb02 f001 	mul.w	r0, r2, r1
 8020cb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020cb6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8020cba:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020cbe:	1a1b      	subs	r3, r3, r0
 8020cc0:	b289      	uxth	r1, r1
 8020cc2:	b29b      	uxth	r3, r3
 8020cc4:	ebae 0e01 	sub.w	lr, lr, r1
 8020cc8:	4353      	muls	r3, r2
 8020cca:	fa1f fe8e 	uxth.w	lr, lr
 8020cce:	fb0c 320e 	mla	r2, ip, lr, r3
 8020cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020cd4:	fb01 2203 	mla	r2, r1, r3, r2
 8020cd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020cda:	fb00 2203 	mla	r2, r0, r3, r2
 8020cde:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020ce2:	2a00      	cmp	r2, #0
 8020ce4:	d039      	beq.n	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ce6:	4bc7      	ldr	r3, [pc, #796]	@ (8021004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020ce8:	6819      	ldr	r1, [r3, #0]
 8020cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cec:	fa5f fc81 	uxtb.w	ip, r1
 8020cf0:	435a      	muls	r2, r3
 8020cf2:	1c53      	adds	r3, r2, #1
 8020cf4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020cf8:	1212      	asrs	r2, r2, #8
 8020cfa:	b290      	uxth	r0, r2
 8020cfc:	43d2      	mvns	r2, r2
 8020cfe:	fb1c fc00 	smulbb	ip, ip, r0
 8020d02:	b2d3      	uxtb	r3, r2
 8020d04:	f898 2000 	ldrb.w	r2, [r8]
 8020d08:	fb02 c203 	mla	r2, r2, r3, ip
 8020d0c:	b292      	uxth	r2, r2
 8020d0e:	f102 0c01 	add.w	ip, r2, #1
 8020d12:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d16:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020d1a:	fb1c fc03 	smulbb	ip, ip, r3
 8020d1e:	1212      	asrs	r2, r2, #8
 8020d20:	f888 2000 	strb.w	r2, [r8]
 8020d24:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020d28:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020d2c:	fb02 c200 	mla	r2, r2, r0, ip
 8020d30:	b292      	uxth	r2, r2
 8020d32:	f102 0c01 	add.w	ip, r2, #1
 8020d36:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d3a:	1212      	asrs	r2, r2, #8
 8020d3c:	f888 2001 	strb.w	r2, [r8, #1]
 8020d40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020d44:	fb12 f303 	smulbb	r3, r2, r3
 8020d48:	fb01 3300 	mla	r3, r1, r0, r3
 8020d4c:	b29b      	uxth	r3, r3
 8020d4e:	1c5a      	adds	r2, r3, #1
 8020d50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d54:	121b      	asrs	r3, r3, #8
 8020d56:	f888 3002 	strb.w	r3, [r8, #2]
 8020d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d5c:	f108 0803 	add.w	r8, r8, #3
 8020d60:	441d      	add	r5, r3
 8020d62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d64:	441e      	add	r6, r3
 8020d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d68:	3b01      	subs	r3, #1
 8020d6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d6c:	e742      	b.n	8020bf4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020d6e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d70:	f10a 0a03 	add.w	sl, sl, #3
 8020d74:	441d      	add	r5, r3
 8020d76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d78:	441e      	add	r6, r3
 8020d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d7c:	3b01      	subs	r3, #1
 8020d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d80:	e716      	b.n	8020bb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020d82:	d024      	beq.n	8020dce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d86:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020d88:	3b01      	subs	r3, #1
 8020d8a:	fb00 5003 	mla	r0, r0, r3, r5
 8020d8e:	1400      	asrs	r0, r0, #16
 8020d90:	f53f af2b 	bmi.w	8020bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d94:	3901      	subs	r1, #1
 8020d96:	4288      	cmp	r0, r1
 8020d98:	f6bf af27 	bge.w	8020bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d9c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8020d9e:	fb01 6303 	mla	r3, r1, r3, r6
 8020da2:	141b      	asrs	r3, r3, #16
 8020da4:	f53f af21 	bmi.w	8020bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020da8:	3a01      	subs	r2, #1
 8020daa:	4293      	cmp	r3, r2
 8020dac:	f6bf af1d 	bge.w	8020bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020db0:	f10a 0e03 	add.w	lr, sl, #3
 8020db4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8020db8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020dbc:	f1b8 0f00 	cmp.w	r8, #0
 8020dc0:	dc76      	bgt.n	8020eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dc4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020dc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020dcc:	44a2      	add	sl, r4
 8020dce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	f340 812c 	ble.w	802102e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020dda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020ddc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020de0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020de4:	eef0 6a62 	vmov.f32	s13, s5
 8020de8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020dec:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020df0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020df4:	ee16 5a90 	vmov	r5, s13
 8020df8:	eef0 6a43 	vmov.f32	s13, s6
 8020dfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e00:	ee16 6a90 	vmov	r6, s13
 8020e04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e1c:	ee12 2a90 	vmov	r2, s5
 8020e20:	eef0 2a47 	vmov.f32	s5, s14
 8020e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e28:	ee13 2a10 	vmov	r2, s6
 8020e2c:	9323      	str	r3, [sp, #140]	@ 0x8c
 8020e2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e30:	eeb0 3a67 	vmov.f32	s6, s15
 8020e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e38:	9324      	str	r3, [sp, #144]	@ 0x90
 8020e3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e3e:	3b01      	subs	r3, #1
 8020e40:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e44:	bf08      	it	eq
 8020e46:	4613      	moveq	r3, r2
 8020e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e4a:	e6a2      	b.n	8020b92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020e4c:	2900      	cmp	r1, #0
 8020e4e:	f43f af2c 	beq.w	8020caa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e52:	eb09 0003 	add.w	r0, r9, r3
 8020e56:	0843      	lsrs	r3, r0, #1
 8020e58:	07c0      	lsls	r0, r0, #31
 8020e5a:	5cfb      	ldrb	r3, [r7, r3]
 8020e5c:	bf54      	ite	pl
 8020e5e:	f003 030f 	andpl.w	r3, r3, #15
 8020e62:	111b      	asrmi	r3, r3, #4
 8020e64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020e68:	b2db      	uxtb	r3, r3
 8020e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e6c:	e71d      	b.n	8020caa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e6e:	f113 0b01 	adds.w	fp, r3, #1
 8020e72:	f53f af72 	bmi.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e76:	45dc      	cmp	ip, fp
 8020e78:	f6ff af6f 	blt.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e7c:	f110 0b01 	adds.w	fp, r0, #1
 8020e80:	f53f af6b 	bmi.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e84:	45de      	cmp	lr, fp
 8020e86:	f6ff af68 	blt.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e8a:	9302      	str	r3, [sp, #8]
 8020e8c:	fa0f f38e 	sxth.w	r3, lr
 8020e90:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e92:	9301      	str	r3, [sp, #4]
 8020e94:	fa0f f38c 	sxth.w	r3, ip
 8020e98:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020e9c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020ea0:	9300      	str	r3, [sp, #0]
 8020ea2:	463a      	mov	r2, r7
 8020ea4:	464b      	mov	r3, r9
 8020ea6:	4641      	mov	r1, r8
 8020ea8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020eaa:	f7ff fd79 	bl	80209a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020eae:	e754      	b.n	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020eb0:	142a      	asrs	r2, r5, #16
 8020eb2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020eb6:	1433      	asrs	r3, r6, #16
 8020eb8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020ebc:	fb09 2303 	mla	r3, r9, r3, r2
 8020ec0:	085a      	lsrs	r2, r3, #1
 8020ec2:	07dc      	lsls	r4, r3, #31
 8020ec4:	5cba      	ldrb	r2, [r7, r2]
 8020ec6:	bf54      	ite	pl
 8020ec8:	f002 020f 	andpl.w	r2, r2, #15
 8020ecc:	1112      	asrmi	r2, r2, #4
 8020ece:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020ed2:	b2d2      	uxtb	r2, r2
 8020ed4:	2900      	cmp	r1, #0
 8020ed6:	f000 8097 	beq.w	8021008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020eda:	f103 0b01 	add.w	fp, r3, #1
 8020ede:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020ee2:	f01b 0f01 	tst.w	fp, #1
 8020ee6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020eea:	bf0c      	ite	eq
 8020eec:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020ef0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020ef4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ef8:	fa5f f48c 	uxtb.w	r4, ip
 8020efc:	9412      	str	r4, [sp, #72]	@ 0x48
 8020efe:	b300      	cbz	r0, 8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020f00:	444b      	add	r3, r9
 8020f02:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f06:	07dc      	lsls	r4, r3, #31
 8020f08:	f103 0301 	add.w	r3, r3, #1
 8020f0c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f10:	bf54      	ite	pl
 8020f12:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f16:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f1e:	fa5f f48c 	uxtb.w	r4, ip
 8020f22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020f28:	07dc      	lsls	r4, r3, #31
 8020f2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f2e:	bf54      	ite	pl
 8020f30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f3c:	fa5f f38c 	uxtb.w	r3, ip
 8020f40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020f42:	b289      	uxth	r1, r1
 8020f44:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f46:	b280      	uxth	r0, r0
 8020f48:	fb01 f300 	mul.w	r3, r1, r0
 8020f4c:	0109      	lsls	r1, r1, #4
 8020f4e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020f52:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8020f56:	1ac9      	subs	r1, r1, r3
 8020f58:	b280      	uxth	r0, r0
 8020f5a:	b289      	uxth	r1, r1
 8020f5c:	ebac 0c00 	sub.w	ip, ip, r0
 8020f60:	4361      	muls	r1, r4
 8020f62:	fa1f fc8c 	uxth.w	ip, ip
 8020f66:	fb02 120c 	mla	r2, r2, ip, r1
 8020f6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f6c:	fb00 2001 	mla	r0, r0, r1, r2
 8020f70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020f72:	fb03 0302 	mla	r3, r3, r2, r0
 8020f76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d039      	beq.n	8020ff2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020f7e:	4a21      	ldr	r2, [pc, #132]	@ (8021004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020f80:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020f84:	6810      	ldr	r0, [r2, #0]
 8020f86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f88:	fa5f fc80 	uxtb.w	ip, r0
 8020f8c:	4353      	muls	r3, r2
 8020f8e:	1c5a      	adds	r2, r3, #1
 8020f90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f94:	121b      	asrs	r3, r3, #8
 8020f96:	b29a      	uxth	r2, r3
 8020f98:	43db      	mvns	r3, r3
 8020f9a:	fb1c fc02 	smulbb	ip, ip, r2
 8020f9e:	b2db      	uxtb	r3, r3
 8020fa0:	fb01 c103 	mla	r1, r1, r3, ip
 8020fa4:	b289      	uxth	r1, r1
 8020fa6:	f101 0c01 	add.w	ip, r1, #1
 8020faa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020fae:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020fb2:	fb1c fc03 	smulbb	ip, ip, r3
 8020fb6:	1209      	asrs	r1, r1, #8
 8020fb8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020fbc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020fc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020fc4:	fb01 c102 	mla	r1, r1, r2, ip
 8020fc8:	b289      	uxth	r1, r1
 8020fca:	f101 0c01 	add.w	ip, r1, #1
 8020fce:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020fd2:	1209      	asrs	r1, r1, #8
 8020fd4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020fd8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020fdc:	fb11 f303 	smulbb	r3, r1, r3
 8020fe0:	fb00 3002 	mla	r0, r0, r2, r3
 8020fe4:	b280      	uxth	r0, r0
 8020fe6:	1c42      	adds	r2, r0, #1
 8020fe8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020fec:	1200      	asrs	r0, r0, #8
 8020fee:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020ff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ff4:	f10e 0e03 	add.w	lr, lr, #3
 8020ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8020ffc:	441d      	add	r5, r3
 8020ffe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021000:	441e      	add	r6, r3
 8021002:	e6db      	b.n	8020dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021004:	240253c4 	.word	0x240253c4
 8021008:	2800      	cmp	r0, #0
 802100a:	d09a      	beq.n	8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802100c:	444b      	add	r3, r9
 802100e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021012:	07db      	lsls	r3, r3, #31
 8021014:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021018:	bf54      	ite	pl
 802101a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802101e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021022:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021026:	fa5f f38c 	uxtb.w	r3, ip
 802102a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802102c:	e789      	b.n	8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802102e:	b017      	add	sp, #92	@ 0x5c
 8021030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021034 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021038:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 802103c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021040:	2d00      	cmp	r5, #0
 8021042:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8021046:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802104a:	fb04 5e03 	mla	lr, r4, r3, r5
 802104e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8021052:	f2c0 80b1 	blt.w	80211b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021056:	45a9      	cmp	r9, r5
 8021058:	f340 80ae 	ble.w	80211b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802105c:	2c00      	cmp	r4, #0
 802105e:	f2c0 80ab 	blt.w	80211b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021062:	45a0      	cmp	r8, r4
 8021064:	f340 80a8 	ble.w	80211b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021068:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802106c:	f01e 0f01 	tst.w	lr, #1
 8021070:	5d97      	ldrb	r7, [r2, r6]
 8021072:	bf0c      	ite	eq
 8021074:	f007 070f 	andeq.w	r7, r7, #15
 8021078:	113f      	asrne	r7, r7, #4
 802107a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802107e:	b2ff      	uxtb	r7, r7
 8021080:	f115 0a01 	adds.w	sl, r5, #1
 8021084:	f100 809a 	bmi.w	80211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021088:	45d1      	cmp	r9, sl
 802108a:	f340 8097 	ble.w	80211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802108e:	2c00      	cmp	r4, #0
 8021090:	f2c0 8094 	blt.w	80211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021094:	45a0      	cmp	r8, r4
 8021096:	f340 8091 	ble.w	80211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802109a:	2800      	cmp	r0, #0
 802109c:	f000 8090 	beq.w	80211c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80210a0:	f10e 0b01 	add.w	fp, lr, #1
 80210a4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80210a8:	f01b 0f01 	tst.w	fp, #1
 80210ac:	5d96      	ldrb	r6, [r2, r6]
 80210ae:	bf0c      	ite	eq
 80210b0:	f006 060f 	andeq.w	r6, r6, #15
 80210b4:	1136      	asrne	r6, r6, #4
 80210b6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80210ba:	b2f6      	uxtb	r6, r6
 80210bc:	f1bc 0f00 	cmp.w	ip, #0
 80210c0:	f000 8082 	beq.w	80211c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80210c4:	2d00      	cmp	r5, #0
 80210c6:	f104 0401 	add.w	r4, r4, #1
 80210ca:	db7b      	blt.n	80211c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210cc:	45a9      	cmp	r9, r5
 80210ce:	dd79      	ble.n	80211c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210d0:	2c00      	cmp	r4, #0
 80210d2:	db77      	blt.n	80211c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210d4:	45a0      	cmp	r8, r4
 80210d6:	dd75      	ble.n	80211c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210d8:	eb03 0b0e 	add.w	fp, r3, lr
 80210dc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80210e0:	f01b 0f01 	tst.w	fp, #1
 80210e4:	5d55      	ldrb	r5, [r2, r5]
 80210e6:	bf0c      	ite	eq
 80210e8:	f005 050f 	andeq.w	r5, r5, #15
 80210ec:	112d      	asrne	r5, r5, #4
 80210ee:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80210f2:	b2ed      	uxtb	r5, r5
 80210f4:	f1ba 0f00 	cmp.w	sl, #0
 80210f8:	db69      	blt.n	80211ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210fa:	45d1      	cmp	r9, sl
 80210fc:	dd67      	ble.n	80211ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210fe:	2c00      	cmp	r4, #0
 8021100:	db65      	blt.n	80211ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021102:	45a0      	cmp	r8, r4
 8021104:	dd63      	ble.n	80211ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021106:	2800      	cmp	r0, #0
 8021108:	d063      	beq.n	80211d2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802110a:	3301      	adds	r3, #1
 802110c:	449e      	add	lr, r3
 802110e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021112:	f01e 0f01 	tst.w	lr, #1
 8021116:	5cd4      	ldrb	r4, [r2, r3]
 8021118:	bf0c      	ite	eq
 802111a:	f004 040f 	andeq.w	r4, r4, #15
 802111e:	1124      	asrne	r4, r4, #4
 8021120:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021124:	b2e3      	uxtb	r3, r4
 8021126:	b282      	uxth	r2, r0
 8021128:	fa1f fc8c 	uxth.w	ip, ip
 802112c:	fb02 f40c 	mul.w	r4, r2, ip
 8021130:	0112      	lsls	r2, r2, #4
 8021132:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8021136:	fa1f f08c 	uxth.w	r0, ip
 802113a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802113e:	1b12      	subs	r2, r2, r4
 8021140:	ebac 0c00 	sub.w	ip, ip, r0
 8021144:	b292      	uxth	r2, r2
 8021146:	fa1f fc8c 	uxth.w	ip, ip
 802114a:	4372      	muls	r2, r6
 802114c:	fb07 220c 	mla	r2, r7, ip, r2
 8021150:	fb00 2005 	mla	r0, r0, r5, r2
 8021154:	fb04 0303 	mla	r3, r4, r3, r0
 8021158:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802115c:	b353      	cbz	r3, 80211b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802115e:	4a1e      	ldr	r2, [pc, #120]	@ (80211d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8021160:	7808      	ldrb	r0, [r1, #0]
 8021162:	6814      	ldr	r4, [r2, #0]
 8021164:	b29a      	uxth	r2, r3
 8021166:	43db      	mvns	r3, r3
 8021168:	b2e5      	uxtb	r5, r4
 802116a:	b2db      	uxtb	r3, r3
 802116c:	fb15 f502 	smulbb	r5, r5, r2
 8021170:	fb00 5003 	mla	r0, r0, r3, r5
 8021174:	b280      	uxth	r0, r0
 8021176:	1c45      	adds	r5, r0, #1
 8021178:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802117c:	784d      	ldrb	r5, [r1, #1]
 802117e:	fb15 f503 	smulbb	r5, r5, r3
 8021182:	1200      	asrs	r0, r0, #8
 8021184:	7008      	strb	r0, [r1, #0]
 8021186:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802118a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802118e:	fb00 5002 	mla	r0, r0, r2, r5
 8021192:	b280      	uxth	r0, r0
 8021194:	1c45      	adds	r5, r0, #1
 8021196:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802119a:	1200      	asrs	r0, r0, #8
 802119c:	7048      	strb	r0, [r1, #1]
 802119e:	7888      	ldrb	r0, [r1, #2]
 80211a0:	fb10 f303 	smulbb	r3, r0, r3
 80211a4:	fb04 3202 	mla	r2, r4, r2, r3
 80211a8:	b292      	uxth	r2, r2
 80211aa:	1c53      	adds	r3, r2, #1
 80211ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80211b0:	1212      	asrs	r2, r2, #8
 80211b2:	708a      	strb	r2, [r1, #2]
 80211b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211b8:	2700      	movs	r7, #0
 80211ba:	e761      	b.n	8021080 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80211bc:	2600      	movs	r6, #0
 80211be:	e77d      	b.n	80210bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211c0:	4606      	mov	r6, r0
 80211c2:	e77b      	b.n	80210bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211c4:	2500      	movs	r5, #0
 80211c6:	e795      	b.n	80210f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80211c8:	4663      	mov	r3, ip
 80211ca:	4665      	mov	r5, ip
 80211cc:	e7ab      	b.n	8021126 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211ce:	2300      	movs	r3, #0
 80211d0:	e7a9      	b.n	8021126 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211d2:	4603      	mov	r3, r0
 80211d4:	e7a7      	b.n	8021126 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211d6:	bf00      	nop
 80211d8:	240253c4 	.word	0x240253c4

080211dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211e0:	b093      	sub	sp, #76	@ 0x4c
 80211e2:	461c      	mov	r4, r3
 80211e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80211e6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80211e8:	9011      	str	r0, [sp, #68]	@ 0x44
 80211ea:	9107      	str	r1, [sp, #28]
 80211ec:	6850      	ldr	r0, [r2, #4]
 80211ee:	6812      	ldr	r2, [r2, #0]
 80211f0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80211f4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80211f8:	fb00 1303 	mla	r3, r0, r3, r1
 80211fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021200:	eb02 0b03 	add.w	fp, r2, r3
 8021204:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021206:	689b      	ldr	r3, [r3, #8]
 8021208:	3301      	adds	r3, #1
 802120a:	f023 0301 	bic.w	r3, r3, #1
 802120e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021210:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021212:	f8d3 8000 	ldr.w	r8, [r3]
 8021216:	9b07      	ldr	r3, [sp, #28]
 8021218:	2b00      	cmp	r3, #0
 802121a:	dc03      	bgt.n	8021224 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802121c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802121e:	2b00      	cmp	r3, #0
 8021220:	f340 822b 	ble.w	802167a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021224:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021226:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802122a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802122e:	1e48      	subs	r0, r1, #1
 8021230:	1e57      	subs	r7, r2, #1
 8021232:	2c00      	cmp	r4, #0
 8021234:	f340 80d7 	ble.w	80213e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021238:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802123c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021240:	d406      	bmi.n	8021250 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021242:	4584      	cmp	ip, r0
 8021244:	da04      	bge.n	8021250 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021246:	2b00      	cmp	r3, #0
 8021248:	db02      	blt.n	8021250 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802124a:	42bb      	cmp	r3, r7
 802124c:	f2c0 80cc 	blt.w	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021250:	f11c 0c01 	adds.w	ip, ip, #1
 8021254:	f100 80bf 	bmi.w	80213d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021258:	4561      	cmp	r1, ip
 802125a:	f2c0 80bc 	blt.w	80213d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802125e:	3301      	adds	r3, #1
 8021260:	f100 80b9 	bmi.w	80213d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021264:	429a      	cmp	r2, r3
 8021266:	f2c0 80b6 	blt.w	80213d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802126a:	46a2      	mov	sl, r4
 802126c:	465f      	mov	r7, fp
 802126e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021272:	f1ba 0f00 	cmp.w	sl, #0
 8021276:	f340 80d4 	ble.w	8021422 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802127a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802127e:	1430      	asrs	r0, r6, #16
 8021280:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021284:	9308      	str	r3, [sp, #32]
 8021286:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021288:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802128c:	142b      	asrs	r3, r5, #16
 802128e:	f100 8124 	bmi.w	80214da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021292:	f10c 32ff 	add.w	r2, ip, #4294967295
 8021296:	4293      	cmp	r3, r2
 8021298:	f280 811f 	bge.w	80214da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802129c:	2800      	cmp	r0, #0
 802129e:	f2c0 811c 	blt.w	80214da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212a2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80212a6:	4290      	cmp	r0, r2
 80212a8:	f280 8117 	bge.w	80214da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212ac:	fb00 3309 	mla	r3, r0, r9, r3
 80212b0:	0858      	lsrs	r0, r3, #1
 80212b2:	07da      	lsls	r2, r3, #31
 80212b4:	9a08      	ldr	r2, [sp, #32]
 80212b6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80212ba:	bf54      	ite	pl
 80212bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80212c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80212c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212c8:	fa5f fc8c 	uxtb.w	ip, ip
 80212cc:	2a00      	cmp	r2, #0
 80212ce:	f000 80ed 	beq.w	80214ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80212d2:	1c58      	adds	r0, r3, #1
 80212d4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80212d8:	07c0      	lsls	r0, r0, #31
 80212da:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80212de:	bf54      	ite	pl
 80212e0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80212e4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80212e8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80212ec:	fa5f fe8e 	uxtb.w	lr, lr
 80212f0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80212f4:	b1c9      	cbz	r1, 802132a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80212f6:	444b      	add	r3, r9
 80212f8:	0858      	lsrs	r0, r3, #1
 80212fa:	07da      	lsls	r2, r3, #31
 80212fc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021300:	bf54      	ite	pl
 8021302:	f000 000f 	andpl.w	r0, r0, #15
 8021306:	1100      	asrmi	r0, r0, #4
 8021308:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802130c:	b2c0      	uxtb	r0, r0
 802130e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021310:	1c58      	adds	r0, r3, #1
 8021312:	0843      	lsrs	r3, r0, #1
 8021314:	07c2      	lsls	r2, r0, #31
 8021316:	f818 3003 	ldrb.w	r3, [r8, r3]
 802131a:	bf54      	ite	pl
 802131c:	f003 030f 	andpl.w	r3, r3, #15
 8021320:	111b      	asrmi	r3, r3, #4
 8021322:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021326:	b2db      	uxtb	r3, r3
 8021328:	930e      	str	r3, [sp, #56]	@ 0x38
 802132a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802132e:	b289      	uxth	r1, r1
 8021330:	fb02 f301 	mul.w	r3, r2, r1
 8021334:	0112      	lsls	r2, r2, #4
 8021336:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802133a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802133e:	1ad2      	subs	r2, r2, r3
 8021340:	b289      	uxth	r1, r1
 8021342:	b292      	uxth	r2, r2
 8021344:	1a40      	subs	r0, r0, r1
 8021346:	fa1f fe80 	uxth.w	lr, r0
 802134a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802134c:	4342      	muls	r2, r0
 802134e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021352:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021354:	fb01 c102 	mla	r1, r1, r2, ip
 8021358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802135a:	fb03 1302 	mla	r3, r3, r2, r1
 802135e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021362:	b383      	cbz	r3, 80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021364:	4ac6      	ldr	r2, [pc, #792]	@ (8021680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021366:	2bff      	cmp	r3, #255	@ 0xff
 8021368:	6812      	ldr	r2, [r2, #0]
 802136a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802136e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8021372:	b2d2      	uxtb	r2, r2
 8021374:	f000 80ac 	beq.w	80214d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021378:	b299      	uxth	r1, r3
 802137a:	43db      	mvns	r3, r3
 802137c:	f897 c000 	ldrb.w	ip, [r7]
 8021380:	fb12 f201 	smulbb	r2, r2, r1
 8021384:	b2db      	uxtb	r3, r3
 8021386:	fb10 f001 	smulbb	r0, r0, r1
 802138a:	fb0c 2203 	mla	r2, ip, r3, r2
 802138e:	fb1e f101 	smulbb	r1, lr, r1
 8021392:	b292      	uxth	r2, r2
 8021394:	f102 0c01 	add.w	ip, r2, #1
 8021398:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802139c:	1212      	asrs	r2, r2, #8
 802139e:	703a      	strb	r2, [r7, #0]
 80213a0:	787a      	ldrb	r2, [r7, #1]
 80213a2:	fb02 0003 	mla	r0, r2, r3, r0
 80213a6:	b280      	uxth	r0, r0
 80213a8:	1c42      	adds	r2, r0, #1
 80213aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80213ae:	78ba      	ldrb	r2, [r7, #2]
 80213b0:	fb02 1303 	mla	r3, r2, r3, r1
 80213b4:	1200      	asrs	r0, r0, #8
 80213b6:	b29b      	uxth	r3, r3
 80213b8:	7078      	strb	r0, [r7, #1]
 80213ba:	f103 0e01 	add.w	lr, r3, #1
 80213be:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80213c2:	121b      	asrs	r3, r3, #8
 80213c4:	70bb      	strb	r3, [r7, #2]
 80213c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213c8:	3703      	adds	r7, #3
 80213ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213ce:	441d      	add	r5, r3
 80213d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213d2:	441e      	add	r6, r3
 80213d4:	e74d      	b.n	8021272 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80213d6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213d8:	3c01      	subs	r4, #1
 80213da:	f10b 0b03 	add.w	fp, fp, #3
 80213de:	441d      	add	r5, r3
 80213e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213e2:	441e      	add	r6, r3
 80213e4:	e725      	b.n	8021232 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80213e6:	d021      	beq.n	802142c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80213e8:	1e63      	subs	r3, r4, #1
 80213ea:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80213ec:	fb00 5003 	mla	r0, r0, r3, r5
 80213f0:	1400      	asrs	r0, r0, #16
 80213f2:	f53f af3a 	bmi.w	802126a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213f6:	3901      	subs	r1, #1
 80213f8:	4288      	cmp	r0, r1
 80213fa:	f6bf af36 	bge.w	802126a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213fe:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8021400:	fb01 6303 	mla	r3, r1, r3, r6
 8021404:	141b      	asrs	r3, r3, #16
 8021406:	f53f af30 	bmi.w	802126a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802140a:	3a01      	subs	r2, #1
 802140c:	4293      	cmp	r3, r2
 802140e:	f6bf af2c 	bge.w	802126a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021412:	f10b 0c03 	add.w	ip, fp, #3
 8021416:	46a6      	mov	lr, r4
 8021418:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802141c:	f1be 0f00 	cmp.w	lr, #0
 8021420:	dc79      	bgt.n	8021516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8021422:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8021426:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802142a:	44a3      	add	fp, r4
 802142c:	9b07      	ldr	r3, [sp, #28]
 802142e:	2b00      	cmp	r3, #0
 8021430:	f340 8123 	ble.w	802167a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021438:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802143a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802143e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021442:	eef0 6a62 	vmov.f32	s13, s5
 8021446:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802144a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802144e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021452:	ee16 5a90 	vmov	r5, s13
 8021456:	eef0 6a43 	vmov.f32	s13, s6
 802145a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802145e:	ee16 6a90 	vmov	r6, s13
 8021462:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021466:	ee61 7a27 	vmul.f32	s15, s2, s15
 802146a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802146e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021472:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021476:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802147a:	ee12 2a90 	vmov	r2, s5
 802147e:	eef0 2a47 	vmov.f32	s5, s14
 8021482:	fb92 f3f3 	sdiv	r3, r2, r3
 8021486:	ee13 2a10 	vmov	r2, s6
 802148a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802148c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802148e:	eeb0 3a67 	vmov.f32	s6, s15
 8021492:	fb92 f3f3 	sdiv	r3, r2, r3
 8021496:	9320      	str	r3, [sp, #128]	@ 0x80
 8021498:	9b07      	ldr	r3, [sp, #28]
 802149a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802149c:	3b01      	subs	r3, #1
 802149e:	9307      	str	r3, [sp, #28]
 80214a0:	bf08      	it	eq
 80214a2:	4614      	moveq	r4, r2
 80214a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80214a6:	bf18      	it	ne
 80214a8:	461c      	movne	r4, r3
 80214aa:	e6b4      	b.n	8021216 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80214ac:	2900      	cmp	r1, #0
 80214ae:	f43f af3c 	beq.w	802132a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80214b2:	eb09 0003 	add.w	r0, r9, r3
 80214b6:	0843      	lsrs	r3, r0, #1
 80214b8:	07c0      	lsls	r0, r0, #31
 80214ba:	f818 3003 	ldrb.w	r3, [r8, r3]
 80214be:	bf54      	ite	pl
 80214c0:	f003 030f 	andpl.w	r3, r3, #15
 80214c4:	111b      	asrmi	r3, r3, #4
 80214c6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214ca:	b2db      	uxtb	r3, r3
 80214cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80214ce:	e72c      	b.n	802132a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80214d0:	703a      	strb	r2, [r7, #0]
 80214d2:	7078      	strb	r0, [r7, #1]
 80214d4:	f887 e002 	strb.w	lr, [r7, #2]
 80214d8:	e775      	b.n	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214da:	1c5a      	adds	r2, r3, #1
 80214dc:	f53f af73 	bmi.w	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214e0:	4594      	cmp	ip, r2
 80214e2:	f6ff af70 	blt.w	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214e6:	1c42      	adds	r2, r0, #1
 80214e8:	f53f af6d 	bmi.w	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214ec:	4596      	cmp	lr, r2
 80214ee:	f6ff af6a 	blt.w	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214f2:	9302      	str	r3, [sp, #8]
 80214f4:	fa0f f38e 	sxth.w	r3, lr
 80214f8:	9a08      	ldr	r2, [sp, #32]
 80214fa:	9301      	str	r3, [sp, #4]
 80214fc:	fa0f f38c 	sxth.w	r3, ip
 8021500:	9105      	str	r1, [sp, #20]
 8021502:	4639      	mov	r1, r7
 8021504:	9300      	str	r3, [sp, #0]
 8021506:	464b      	mov	r3, r9
 8021508:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802150c:	4642      	mov	r2, r8
 802150e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021510:	f7ff fd90 	bl	8021034 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021514:	e757      	b.n	80213c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021516:	142a      	asrs	r2, r5, #16
 8021518:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802151c:	1433      	asrs	r3, r6, #16
 802151e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8021522:	fb09 2303 	mla	r3, r9, r3, r2
 8021526:	085a      	lsrs	r2, r3, #1
 8021528:	07d9      	lsls	r1, r3, #31
 802152a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802152e:	bf54      	ite	pl
 8021530:	f002 020f 	andpl.w	r2, r2, #15
 8021534:	1112      	asrmi	r2, r2, #4
 8021536:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802153a:	b2d2      	uxtb	r2, r2
 802153c:	2800      	cmp	r0, #0
 802153e:	f000 8085 	beq.w	802164c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021542:	f103 0a01 	add.w	sl, r3, #1
 8021546:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802154a:	f01a 0f01 	tst.w	sl, #1
 802154e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021552:	bf0c      	ite	eq
 8021554:	f001 010f 	andeq.w	r1, r1, #15
 8021558:	1109      	asrne	r1, r1, #4
 802155a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802155e:	b2c9      	uxtb	r1, r1
 8021560:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021562:	b1df      	cbz	r7, 802159c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021564:	444b      	add	r3, r9
 8021566:	0859      	lsrs	r1, r3, #1
 8021568:	f013 0f01 	tst.w	r3, #1
 802156c:	f103 0301 	add.w	r3, r3, #1
 8021570:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021574:	bf0c      	ite	eq
 8021576:	f001 010f 	andeq.w	r1, r1, #15
 802157a:	1109      	asrne	r1, r1, #4
 802157c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021580:	b2c9      	uxtb	r1, r1
 8021582:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021584:	0859      	lsrs	r1, r3, #1
 8021586:	07db      	lsls	r3, r3, #31
 8021588:	f818 1001 	ldrb.w	r1, [r8, r1]
 802158c:	bf54      	ite	pl
 802158e:	f001 010f 	andpl.w	r1, r1, #15
 8021592:	1109      	asrmi	r1, r1, #4
 8021594:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021598:	b2c9      	uxtb	r1, r1
 802159a:	9110      	str	r1, [sp, #64]	@ 0x40
 802159c:	b280      	uxth	r0, r0
 802159e:	b2bf      	uxth	r7, r7
 80215a0:	fb00 f307 	mul.w	r3, r0, r7
 80215a4:	0100      	lsls	r0, r0, #4
 80215a6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80215aa:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80215ae:	1ac0      	subs	r0, r0, r3
 80215b0:	b2bf      	uxth	r7, r7
 80215b2:	b280      	uxth	r0, r0
 80215b4:	1bc9      	subs	r1, r1, r7
 80215b6:	fa1f fa81 	uxth.w	sl, r1
 80215ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80215bc:	4348      	muls	r0, r1
 80215be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80215c0:	fb02 020a 	mla	r2, r2, sl, r0
 80215c4:	fb07 2701 	mla	r7, r7, r1, r2
 80215c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80215ca:	fb03 7302 	mla	r3, r3, r2, r7
 80215ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215d2:	b393      	cbz	r3, 802163a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80215d4:	4a2a      	ldr	r2, [pc, #168]	@ (8021680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80215d6:	2bff      	cmp	r3, #255	@ 0xff
 80215d8:	6811      	ldr	r1, [r2, #0]
 80215da:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80215de:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80215e2:	b2c9      	uxtb	r1, r1
 80215e4:	d042      	beq.n	802166c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80215e6:	b298      	uxth	r0, r3
 80215e8:	43db      	mvns	r3, r3
 80215ea:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80215ee:	fb11 f100 	smulbb	r1, r1, r0
 80215f2:	b2db      	uxtb	r3, r3
 80215f4:	fb17 f700 	smulbb	r7, r7, r0
 80215f8:	fb02 1103 	mla	r1, r2, r3, r1
 80215fc:	fb1a f000 	smulbb	r0, sl, r0
 8021600:	b289      	uxth	r1, r1
 8021602:	1c4a      	adds	r2, r1, #1
 8021604:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021608:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802160c:	fb02 7703 	mla	r7, r2, r3, r7
 8021610:	1209      	asrs	r1, r1, #8
 8021612:	b2bf      	uxth	r7, r7
 8021614:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021618:	1c7a      	adds	r2, r7, #1
 802161a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802161e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8021622:	fb02 0303 	mla	r3, r2, r3, r0
 8021626:	123f      	asrs	r7, r7, #8
 8021628:	b29b      	uxth	r3, r3
 802162a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802162e:	1c5a      	adds	r2, r3, #1
 8021630:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021634:	121b      	asrs	r3, r3, #8
 8021636:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802163a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802163c:	f10c 0c03 	add.w	ip, ip, #3
 8021640:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021644:	441d      	add	r5, r3
 8021646:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021648:	441e      	add	r6, r3
 802164a:	e6e7      	b.n	802141c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802164c:	2f00      	cmp	r7, #0
 802164e:	d0a5      	beq.n	802159c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021650:	444b      	add	r3, r9
 8021652:	0859      	lsrs	r1, r3, #1
 8021654:	07db      	lsls	r3, r3, #31
 8021656:	f818 1001 	ldrb.w	r1, [r8, r1]
 802165a:	bf54      	ite	pl
 802165c:	f001 010f 	andpl.w	r1, r1, #15
 8021660:	1109      	asrmi	r1, r1, #4
 8021662:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021666:	b2c9      	uxtb	r1, r1
 8021668:	910b      	str	r1, [sp, #44]	@ 0x2c
 802166a:	e797      	b.n	802159c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802166c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021670:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021674:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021678:	e7df      	b.n	802163a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802167a:	b013      	add	sp, #76	@ 0x4c
 802167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021680:	240253c4 	.word	0x240253c4

08021684 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8021684:	b530      	push	{r4, r5, lr}
 8021686:	b29d      	uxth	r5, r3
 8021688:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802168c:	780c      	ldrb	r4, [r1, #0]
 802168e:	b298      	uxth	r0, r3
 8021690:	7813      	ldrb	r3, [r2, #0]
 8021692:	fb14 f405 	smulbb	r4, r4, r5
 8021696:	fb13 f300 	smulbb	r3, r3, r0
 802169a:	441c      	add	r4, r3
 802169c:	b2a4      	uxth	r4, r4
 802169e:	1c63      	adds	r3, r4, #1
 80216a0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216a4:	7853      	ldrb	r3, [r2, #1]
 80216a6:	fb13 f300 	smulbb	r3, r3, r0
 80216aa:	1224      	asrs	r4, r4, #8
 80216ac:	7014      	strb	r4, [r2, #0]
 80216ae:	784c      	ldrb	r4, [r1, #1]
 80216b0:	fb14 f405 	smulbb	r4, r4, r5
 80216b4:	441c      	add	r4, r3
 80216b6:	b2a4      	uxth	r4, r4
 80216b8:	1c63      	adds	r3, r4, #1
 80216ba:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216be:	1224      	asrs	r4, r4, #8
 80216c0:	7054      	strb	r4, [r2, #1]
 80216c2:	788b      	ldrb	r3, [r1, #2]
 80216c4:	7891      	ldrb	r1, [r2, #2]
 80216c6:	fb13 f305 	smulbb	r3, r3, r5
 80216ca:	fb11 f000 	smulbb	r0, r1, r0
 80216ce:	4403      	add	r3, r0
 80216d0:	b29b      	uxth	r3, r3
 80216d2:	1c59      	adds	r1, r3, #1
 80216d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80216d8:	121b      	asrs	r3, r3, #8
 80216da:	7093      	strb	r3, [r2, #2]
 80216dc:	bd30      	pop	{r4, r5, pc}
	...

080216e0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80216e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216e4:	461c      	mov	r4, r3
 80216e6:	b08b      	sub	sp, #44	@ 0x2c
 80216e8:	460e      	mov	r6, r1
 80216ea:	4615      	mov	r5, r2
 80216ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80216ee:	4682      	mov	sl, r0
 80216f0:	6861      	ldr	r1, [r4, #4]
 80216f2:	aa06      	add	r2, sp, #24
 80216f4:	6820      	ldr	r0, [r4, #0]
 80216f6:	2702      	movs	r7, #2
 80216f8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80216fc:	3504      	adds	r5, #4
 80216fe:	c203      	stmia	r2!, {r0, r1}
 8021700:	6818      	ldr	r0, [r3, #0]
 8021702:	aa08      	add	r2, sp, #32
 8021704:	6859      	ldr	r1, [r3, #4]
 8021706:	c203      	stmia	r2!, {r0, r1}
 8021708:	a806      	add	r0, sp, #24
 802170a:	f7f2 fd4f 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802170e:	4621      	mov	r1, r4
 8021710:	a808      	add	r0, sp, #32
 8021712:	f7f2 fd8f 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021716:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802171a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802171e:	f002 0301 	and.w	r3, r2, #1
 8021722:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8021726:	9302      	str	r3, [sp, #8]
 8021728:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802172c:	f003 0101 	and.w	r1, r3, #1
 8021730:	9101      	str	r1, [sp, #4]
 8021732:	9801      	ldr	r0, [sp, #4]
 8021734:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021738:	4403      	add	r3, r0
 802173a:	fb01 2303 	mla	r3, r1, r3, r2
 802173e:	fb93 f3f7 	sdiv	r3, r3, r7
 8021742:	441e      	add	r6, r3
 8021744:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8021748:	441a      	add	r2, r3
 802174a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802174e:	4419      	add	r1, r3
 8021750:	4b70      	ldr	r3, [pc, #448]	@ (8021914 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021752:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021756:	6818      	ldr	r0, [r3, #0]
 8021758:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802175c:	6803      	ldr	r3, [r0, #0]
 802175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021760:	4798      	blx	r3
 8021762:	4a6d      	ldr	r2, [pc, #436]	@ (8021918 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8021764:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021768:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802176c:	8813      	ldrh	r3, [r2, #0]
 802176e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021772:	fb03 1404 	mla	r4, r3, r4, r1
 8021776:	4611      	mov	r1, r2
 8021778:	fb0b f303 	mul.w	r3, fp, r3
 802177c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021784:	4404      	add	r4, r0
 8021786:	4423      	add	r3, r4
 8021788:	d073      	beq.n	8021872 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802178a:	9705      	str	r7, [sp, #20]
 802178c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021790:	9b03      	ldr	r3, [sp, #12]
 8021792:	429c      	cmp	r4, r3
 8021794:	f080 80b5 	bcs.w	8021902 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021798:	9b02      	ldr	r3, [sp, #8]
 802179a:	b35b      	cbz	r3, 80217f4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802179c:	7831      	ldrb	r1, [r6, #0]
 802179e:	4622      	mov	r2, r4
 80217a0:	1c77      	adds	r7, r6, #1
 80217a2:	3403      	adds	r4, #3
 80217a4:	f001 010f 	and.w	r1, r1, #15
 80217a8:	f108 3bff 	add.w	fp, r8, #4294967295
 80217ac:	464b      	mov	r3, r9
 80217ae:	4650      	mov	r0, sl
 80217b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217b4:	4429      	add	r1, r5
 80217b6:	f7ff ff65 	bl	8021684 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217ba:	f1bb 0f01 	cmp.w	fp, #1
 80217be:	dd1c      	ble.n	80217fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80217c0:	7839      	ldrb	r1, [r7, #0]
 80217c2:	4622      	mov	r2, r4
 80217c4:	464b      	mov	r3, r9
 80217c6:	4650      	mov	r0, sl
 80217c8:	0909      	lsrs	r1, r1, #4
 80217ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80217ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217d2:	4429      	add	r1, r5
 80217d4:	f7ff ff56 	bl	8021684 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217d8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80217dc:	1ce2      	adds	r2, r4, #3
 80217de:	464b      	mov	r3, r9
 80217e0:	f001 010f 	and.w	r1, r1, #15
 80217e4:	4650      	mov	r0, sl
 80217e6:	3406      	adds	r4, #6
 80217e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217ec:	4429      	add	r1, r5
 80217ee:	f7ff ff49 	bl	8021684 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217f2:	e7e2      	b.n	80217ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80217f4:	4637      	mov	r7, r6
 80217f6:	46c3      	mov	fp, r8
 80217f8:	e7df      	b.n	80217ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80217fa:	d10a      	bne.n	8021812 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80217fc:	7839      	ldrb	r1, [r7, #0]
 80217fe:	4622      	mov	r2, r4
 8021800:	3403      	adds	r4, #3
 8021802:	464b      	mov	r3, r9
 8021804:	0909      	lsrs	r1, r1, #4
 8021806:	4650      	mov	r0, sl
 8021808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802180c:	4429      	add	r1, r5
 802180e:	f7ff ff39 	bl	8021684 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021812:	9b04      	ldr	r3, [sp, #16]
 8021814:	9a01      	ldr	r2, [sp, #4]
 8021816:	881b      	ldrh	r3, [r3, #0]
 8021818:	eba3 0308 	sub.w	r3, r3, r8
 802181c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021820:	441c      	add	r4, r3
 8021822:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021826:	4413      	add	r3, r2
 8021828:	9a05      	ldr	r2, [sp, #20]
 802182a:	fb93 f3f2 	sdiv	r3, r3, r2
 802182e:	441e      	add	r6, r3
 8021830:	e7ae      	b.n	8021790 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8021832:	4632      	mov	r2, r6
 8021834:	46c4      	mov	ip, r8
 8021836:	e037      	b.n	80218a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021838:	d10e      	bne.n	8021858 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802183a:	7812      	ldrb	r2, [r2, #0]
 802183c:	3003      	adds	r0, #3
 802183e:	0912      	lsrs	r2, r2, #4
 8021840:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021844:	18ac      	adds	r4, r5, r2
 8021846:	5caa      	ldrb	r2, [r5, r2]
 8021848:	f800 2c03 	strb.w	r2, [r0, #-3]
 802184c:	7862      	ldrb	r2, [r4, #1]
 802184e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021852:	78a2      	ldrb	r2, [r4, #2]
 8021854:	f800 2c01 	strb.w	r2, [r0, #-1]
 8021858:	880c      	ldrh	r4, [r1, #0]
 802185a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802185e:	eba4 0408 	sub.w	r4, r4, r8
 8021862:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021866:	4404      	add	r4, r0
 8021868:	9801      	ldr	r0, [sp, #4]
 802186a:	4402      	add	r2, r0
 802186c:	fb92 f2f7 	sdiv	r2, r2, r7
 8021870:	4416      	add	r6, r2
 8021872:	429c      	cmp	r4, r3
 8021874:	d245      	bcs.n	8021902 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021876:	9a02      	ldr	r2, [sp, #8]
 8021878:	2a00      	cmp	r2, #0
 802187a:	d0da      	beq.n	8021832 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802187c:	7830      	ldrb	r0, [r6, #0]
 802187e:	1c72      	adds	r2, r6, #1
 8021880:	3403      	adds	r4, #3
 8021882:	f000 000f 	and.w	r0, r0, #15
 8021886:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802188a:	eb05 0c00 	add.w	ip, r5, r0
 802188e:	5c28      	ldrb	r0, [r5, r0]
 8021890:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021894:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021898:	f804 0c02 	strb.w	r0, [r4, #-2]
 802189c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80218a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80218a4:	f804 0c01 	strb.w	r0, [r4, #-1]
 80218a8:	f1bc 0f01 	cmp.w	ip, #1
 80218ac:	4620      	mov	r0, r4
 80218ae:	f104 0406 	add.w	r4, r4, #6
 80218b2:	ddc1      	ble.n	8021838 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80218b4:	7810      	ldrb	r0, [r2, #0]
 80218b6:	f1ac 0c02 	sub.w	ip, ip, #2
 80218ba:	0900      	lsrs	r0, r0, #4
 80218bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218c0:	eb05 0e00 	add.w	lr, r5, r0
 80218c4:	5c28      	ldrb	r0, [r5, r0]
 80218c6:	f804 0c06 	strb.w	r0, [r4, #-6]
 80218ca:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80218ce:	f804 0c05 	strb.w	r0, [r4, #-5]
 80218d2:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80218d6:	f804 0c04 	strb.w	r0, [r4, #-4]
 80218da:	f812 0b01 	ldrb.w	r0, [r2], #1
 80218de:	f000 000f 	and.w	r0, r0, #15
 80218e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218e6:	eb05 0e00 	add.w	lr, r5, r0
 80218ea:	5c28      	ldrb	r0, [r5, r0]
 80218ec:	f804 0c03 	strb.w	r0, [r4, #-3]
 80218f0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80218f4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80218f8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80218fc:	f804 0c01 	strb.w	r0, [r4, #-1]
 8021900:	e7d2      	b.n	80218a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021902:	4b04      	ldr	r3, [pc, #16]	@ (8021914 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021904:	6818      	ldr	r0, [r3, #0]
 8021906:	6803      	ldr	r3, [r0, #0]
 8021908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802190a:	4798      	blx	r3
 802190c:	b00b      	add	sp, #44	@ 0x2c
 802190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021912:	bf00      	nop
 8021914:	240253b4 	.word	0x240253b4
 8021918:	240253ae 	.word	0x240253ae

0802191c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802191c:	b530      	push	{r4, r5, lr}
 802191e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021922:	780d      	ldrb	r5, [r1, #0]
 8021924:	28ff      	cmp	r0, #255	@ 0xff
 8021926:	d107      	bne.n	8021938 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021928:	2bff      	cmp	r3, #255	@ 0xff
 802192a:	d105      	bne.n	8021938 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802192c:	7015      	strb	r5, [r2, #0]
 802192e:	784b      	ldrb	r3, [r1, #1]
 8021930:	7053      	strb	r3, [r2, #1]
 8021932:	788b      	ldrb	r3, [r1, #2]
 8021934:	7093      	strb	r3, [r2, #2]
 8021936:	bd30      	pop	{r4, r5, pc}
 8021938:	fb10 f003 	smulbb	r0, r0, r3
 802193c:	b283      	uxth	r3, r0
 802193e:	1c58      	adds	r0, r3, #1
 8021940:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021944:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021948:	b284      	uxth	r4, r0
 802194a:	43c0      	mvns	r0, r0
 802194c:	fb15 f504 	smulbb	r5, r5, r4
 8021950:	b2c3      	uxtb	r3, r0
 8021952:	7810      	ldrb	r0, [r2, #0]
 8021954:	fb00 5003 	mla	r0, r0, r3, r5
 8021958:	b280      	uxth	r0, r0
 802195a:	1c45      	adds	r5, r0, #1
 802195c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021960:	7855      	ldrb	r5, [r2, #1]
 8021962:	fb15 f503 	smulbb	r5, r5, r3
 8021966:	1200      	asrs	r0, r0, #8
 8021968:	7010      	strb	r0, [r2, #0]
 802196a:	7848      	ldrb	r0, [r1, #1]
 802196c:	fb00 5004 	mla	r0, r0, r4, r5
 8021970:	b280      	uxth	r0, r0
 8021972:	1c45      	adds	r5, r0, #1
 8021974:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021978:	1200      	asrs	r0, r0, #8
 802197a:	7050      	strb	r0, [r2, #1]
 802197c:	7888      	ldrb	r0, [r1, #2]
 802197e:	7891      	ldrb	r1, [r2, #2]
 8021980:	fb11 f303 	smulbb	r3, r1, r3
 8021984:	fb00 3304 	mla	r3, r0, r4, r3
 8021988:	b29b      	uxth	r3, r3
 802198a:	1c59      	adds	r1, r3, #1
 802198c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021990:	121b      	asrs	r3, r3, #8
 8021992:	e7cf      	b.n	8021934 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08021994 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021998:	461d      	mov	r5, r3
 802199a:	b08f      	sub	sp, #60	@ 0x3c
 802199c:	460c      	mov	r4, r1
 802199e:	4616      	mov	r6, r2
 80219a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80219a2:	4680      	mov	r8, r0
 80219a4:	6869      	ldr	r1, [r5, #4]
 80219a6:	aa0a      	add	r2, sp, #40	@ 0x28
 80219a8:	6828      	ldr	r0, [r5, #0]
 80219aa:	3604      	adds	r6, #4
 80219ac:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80219b0:	4f57      	ldr	r7, [pc, #348]	@ (8021b10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80219b2:	c203      	stmia	r2!, {r0, r1}
 80219b4:	6818      	ldr	r0, [r3, #0]
 80219b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80219b8:	6859      	ldr	r1, [r3, #4]
 80219ba:	c203      	stmia	r2!, {r0, r1}
 80219bc:	a80a      	add	r0, sp, #40	@ 0x28
 80219be:	f7f2 fbf5 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219c2:	4629      	mov	r1, r5
 80219c4:	a80c      	add	r0, sp, #48	@ 0x30
 80219c6:	2502      	movs	r5, #2
 80219c8:	f7f2 fc34 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219cc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80219d0:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80219d4:	f002 0301 	and.w	r3, r2, #1
 80219d8:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80219dc:	9304      	str	r3, [sp, #16]
 80219de:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80219e2:	f003 0101 	and.w	r1, r3, #1
 80219e6:	9103      	str	r1, [sp, #12]
 80219e8:	9803      	ldr	r0, [sp, #12]
 80219ea:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80219ee:	4403      	add	r3, r0
 80219f0:	6838      	ldr	r0, [r7, #0]
 80219f2:	fb01 2303 	mla	r3, r1, r3, r2
 80219f6:	fb93 f3f5 	sdiv	r3, r3, r5
 80219fa:	18e5      	adds	r5, r4, r3
 80219fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021a00:	441a      	add	r2, r3
 8021a02:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021a06:	4419      	add	r1, r3
 8021a08:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021a0c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8021a10:	6803      	ldr	r3, [r0, #0]
 8021a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a14:	4798      	blx	r3
 8021a16:	4a3f      	ldr	r2, [pc, #252]	@ (8021b14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8021a18:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8021a1c:	8813      	ldrh	r3, [r2, #0]
 8021a1e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021a22:	9207      	str	r2, [sp, #28]
 8021a24:	fb03 1404 	mla	r4, r3, r4, r1
 8021a28:	fb0a f303 	mul.w	r3, sl, r3
 8021a2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a34:	4404      	add	r4, r0
 8021a36:	18e3      	adds	r3, r4, r3
 8021a38:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8021a3c:	9b05      	ldr	r3, [sp, #20]
 8021a3e:	429c      	cmp	r4, r3
 8021a40:	d25d      	bcs.n	8021afe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8021a42:	9b04      	ldr	r3, [sp, #16]
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d037      	beq.n	8021ab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021a48:	782b      	ldrb	r3, [r5, #0]
 8021a4a:	1c6f      	adds	r7, r5, #1
 8021a4c:	f003 030f 	and.w	r3, r3, #15
 8021a50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a56:	0e1b      	lsrs	r3, r3, #24
 8021a58:	d006      	beq.n	8021a68 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8021a5a:	9300      	str	r3, [sp, #0]
 8021a5c:	4622      	mov	r2, r4
 8021a5e:	464b      	mov	r3, r9
 8021a60:	a909      	add	r1, sp, #36	@ 0x24
 8021a62:	4640      	mov	r0, r8
 8021a64:	f7ff ff5a 	bl	802191c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a68:	3403      	adds	r4, #3
 8021a6a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021a6e:	f1ba 0f01 	cmp.w	sl, #1
 8021a72:	dd24      	ble.n	8021abe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021a74:	783b      	ldrb	r3, [r7, #0]
 8021a76:	091b      	lsrs	r3, r3, #4
 8021a78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a7c:	9308      	str	r3, [sp, #32]
 8021a7e:	0e1b      	lsrs	r3, r3, #24
 8021a80:	d006      	beq.n	8021a90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021a82:	9300      	str	r3, [sp, #0]
 8021a84:	4622      	mov	r2, r4
 8021a86:	464b      	mov	r3, r9
 8021a88:	a908      	add	r1, sp, #32
 8021a8a:	4640      	mov	r0, r8
 8021a8c:	f7ff ff46 	bl	802191c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a90:	f817 3b01 	ldrb.w	r3, [r7], #1
 8021a94:	f003 030f 	and.w	r3, r3, #15
 8021a98:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a9e:	0e1b      	lsrs	r3, r3, #24
 8021aa0:	d006      	beq.n	8021ab0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021aa2:	9300      	str	r3, [sp, #0]
 8021aa4:	1ce2      	adds	r2, r4, #3
 8021aa6:	464b      	mov	r3, r9
 8021aa8:	a909      	add	r1, sp, #36	@ 0x24
 8021aaa:	4640      	mov	r0, r8
 8021aac:	f7ff ff36 	bl	802191c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021ab0:	3406      	adds	r4, #6
 8021ab2:	f1aa 0a02 	sub.w	sl, sl, #2
 8021ab6:	e7da      	b.n	8021a6e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021ab8:	462f      	mov	r7, r5
 8021aba:	46da      	mov	sl, fp
 8021abc:	e7d7      	b.n	8021a6e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021abe:	d10e      	bne.n	8021ade <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021ac0:	783b      	ldrb	r3, [r7, #0]
 8021ac2:	091b      	lsrs	r3, r3, #4
 8021ac4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8021aca:	0e1b      	lsrs	r3, r3, #24
 8021acc:	d006      	beq.n	8021adc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8021ace:	9300      	str	r3, [sp, #0]
 8021ad0:	4622      	mov	r2, r4
 8021ad2:	464b      	mov	r3, r9
 8021ad4:	a909      	add	r1, sp, #36	@ 0x24
 8021ad6:	4640      	mov	r0, r8
 8021ad8:	f7ff ff20 	bl	802191c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021adc:	3403      	adds	r4, #3
 8021ade:	9b07      	ldr	r3, [sp, #28]
 8021ae0:	9a03      	ldr	r2, [sp, #12]
 8021ae2:	881b      	ldrh	r3, [r3, #0]
 8021ae4:	eba3 030b 	sub.w	r3, r3, fp
 8021ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021aec:	441c      	add	r4, r3
 8021aee:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021af2:	4413      	add	r3, r2
 8021af4:	2202      	movs	r2, #2
 8021af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8021afa:	441d      	add	r5, r3
 8021afc:	e79e      	b.n	8021a3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8021afe:	9b06      	ldr	r3, [sp, #24]
 8021b00:	6818      	ldr	r0, [r3, #0]
 8021b02:	6803      	ldr	r3, [r0, #0]
 8021b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b06:	4798      	blx	r3
 8021b08:	b00f      	add	sp, #60	@ 0x3c
 8021b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b0e:	bf00      	nop
 8021b10:	240253b4 	.word	0x240253b4
 8021b14:	240253ae 	.word	0x240253ae

08021b18 <CRC_Lock>:
 8021b18:	4a2d      	ldr	r2, [pc, #180]	@ (8021bd0 <CRC_Lock+0xb8>)
 8021b1a:	b530      	push	{r4, r5, lr}
 8021b1c:	6813      	ldr	r3, [r2, #0]
 8021b1e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8021b22:	f023 0301 	bic.w	r3, r3, #1
 8021b26:	6013      	str	r3, [r2, #0]
 8021b28:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8021b2c:	4b29      	ldr	r3, [pc, #164]	@ (8021bd4 <CRC_Lock+0xbc>)
 8021b2e:	681c      	ldr	r4, [r3, #0]
 8021b30:	4014      	ands	r4, r2
 8021b32:	42ac      	cmp	r4, r5
 8021b34:	d005      	beq.n	8021b42 <CRC_Lock+0x2a>
 8021b36:	681c      	ldr	r4, [r3, #0]
 8021b38:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8021b3c:	4014      	ands	r4, r2
 8021b3e:	42ac      	cmp	r4, r5
 8021b40:	d125      	bne.n	8021b8e <CRC_Lock+0x76>
 8021b42:	4b25      	ldr	r3, [pc, #148]	@ (8021bd8 <CRC_Lock+0xc0>)
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d139      	bne.n	8021bbe <CRC_Lock+0xa6>
 8021b4a:	4b24      	ldr	r3, [pc, #144]	@ (8021bdc <CRC_Lock+0xc4>)
 8021b4c:	681a      	ldr	r2, [r3, #0]
 8021b4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b52:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021b56:	d00d      	beq.n	8021b74 <CRC_Lock+0x5c>
 8021b58:	681a      	ldr	r2, [r3, #0]
 8021b5a:	f240 4483 	movw	r4, #1155	@ 0x483
 8021b5e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b62:	42a2      	cmp	r2, r4
 8021b64:	d006      	beq.n	8021b74 <CRC_Lock+0x5c>
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	f240 4285 	movw	r2, #1157	@ 0x485
 8021b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021b70:	4293      	cmp	r3, r2
 8021b72:	d124      	bne.n	8021bbe <CRC_Lock+0xa6>
 8021b74:	4b1a      	ldr	r3, [pc, #104]	@ (8021be0 <CRC_Lock+0xc8>)
 8021b76:	2201      	movs	r2, #1
 8021b78:	601a      	str	r2, [r3, #0]
 8021b7a:	681a      	ldr	r2, [r3, #0]
 8021b7c:	2a00      	cmp	r2, #0
 8021b7e:	d1fc      	bne.n	8021b7a <CRC_Lock+0x62>
 8021b80:	4b18      	ldr	r3, [pc, #96]	@ (8021be4 <CRC_Lock+0xcc>)
 8021b82:	6018      	str	r0, [r3, #0]
 8021b84:	6818      	ldr	r0, [r3, #0]
 8021b86:	1a43      	subs	r3, r0, r1
 8021b88:	4258      	negs	r0, r3
 8021b8a:	4158      	adcs	r0, r3
 8021b8c:	e00e      	b.n	8021bac <CRC_Lock+0x94>
 8021b8e:	681b      	ldr	r3, [r3, #0]
 8021b90:	4013      	ands	r3, r2
 8021b92:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8021b96:	4293      	cmp	r3, r2
 8021b98:	d111      	bne.n	8021bbe <CRC_Lock+0xa6>
 8021b9a:	4b13      	ldr	r3, [pc, #76]	@ (8021be8 <CRC_Lock+0xd0>)
 8021b9c:	f240 4286 	movw	r2, #1158	@ 0x486
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021ba6:	4293      	cmp	r3, r2
 8021ba8:	d001      	beq.n	8021bae <CRC_Lock+0x96>
 8021baa:	2000      	movs	r0, #0
 8021bac:	bd30      	pop	{r4, r5, pc}
 8021bae:	4b0f      	ldr	r3, [pc, #60]	@ (8021bec <CRC_Lock+0xd4>)
 8021bb0:	2201      	movs	r2, #1
 8021bb2:	601a      	str	r2, [r3, #0]
 8021bb4:	681a      	ldr	r2, [r3, #0]
 8021bb6:	2a00      	cmp	r2, #0
 8021bb8:	d1fc      	bne.n	8021bb4 <CRC_Lock+0x9c>
 8021bba:	4b0d      	ldr	r3, [pc, #52]	@ (8021bf0 <CRC_Lock+0xd8>)
 8021bbc:	e7e1      	b.n	8021b82 <CRC_Lock+0x6a>
 8021bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8021bf4 <CRC_Lock+0xdc>)
 8021bc0:	2201      	movs	r2, #1
 8021bc2:	601a      	str	r2, [r3, #0]
 8021bc4:	681a      	ldr	r2, [r3, #0]
 8021bc6:	2a00      	cmp	r2, #0
 8021bc8:	d1fc      	bne.n	8021bc4 <CRC_Lock+0xac>
 8021bca:	4b0b      	ldr	r3, [pc, #44]	@ (8021bf8 <CRC_Lock+0xe0>)
 8021bcc:	e7d9      	b.n	8021b82 <CRC_Lock+0x6a>
 8021bce:	bf00      	nop
 8021bd0:	e0002000 	.word	0xe0002000
 8021bd4:	e000ed00 	.word	0xe000ed00
 8021bd8:	e0042000 	.word	0xe0042000
 8021bdc:	5c001000 	.word	0x5c001000
 8021be0:	58024c08 	.word	0x58024c08
 8021be4:	58024c00 	.word	0x58024c00
 8021be8:	46008ff0 	.word	0x46008ff0
 8021bec:	46024c08 	.word	0x46024c08
 8021bf0:	46024c00 	.word	0x46024c00
 8021bf4:	40023008 	.word	0x40023008
 8021bf8:	40023000 	.word	0x40023000

08021bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021bfc:	6101      	str	r1, [r0, #16]
 8021bfe:	4770      	bx	lr

08021c00 <_ZN8touchgfx8Gestures4tickEv>:
 8021c00:	7b83      	ldrb	r3, [r0, #14]
 8021c02:	b14b      	cbz	r3, 8021c18 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021c04:	8903      	ldrh	r3, [r0, #8]
 8021c06:	3301      	adds	r3, #1
 8021c08:	b29b      	uxth	r3, r3
 8021c0a:	2b07      	cmp	r3, #7
 8021c0c:	8103      	strh	r3, [r0, #8]
 8021c0e:	bf81      	itttt	hi
 8021c10:	2300      	movhi	r3, #0
 8021c12:	8143      	strhhi	r3, [r0, #10]
 8021c14:	8183      	strhhi	r3, [r0, #12]
 8021c16:	7383      	strbhi	r3, [r0, #14]
 8021c18:	4770      	bx	lr
	...

08021c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021c20:	4698      	mov	r8, r3
 8021c22:	8883      	ldrh	r3, [r0, #4]
 8021c24:	4604      	mov	r4, r0
 8021c26:	4617      	mov	r7, r2
 8021c28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021c2c:	eba8 0303 	sub.w	r3, r8, r3
 8021c30:	4a19      	ldr	r2, [pc, #100]	@ (8021c98 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021c32:	460e      	mov	r6, r1
 8021c34:	b21b      	sxth	r3, r3
 8021c36:	88c1      	ldrh	r1, [r0, #6]
 8021c38:	9200      	str	r2, [sp, #0]
 8021c3a:	2000      	movs	r0, #0
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	8aa2      	ldrh	r2, [r4, #20]
 8021c40:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8021c44:	bfb8      	it	lt
 8021c46:	425b      	neglt	r3, r3
 8021c48:	f88d 0004 	strb.w	r0, [sp, #4]
 8021c4c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021c50:	b21b      	sxth	r3, r3
 8021c52:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c56:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c5a:	4293      	cmp	r3, r2
 8021c5c:	dc07      	bgt.n	8021c6e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021c5e:	1a69      	subs	r1, r5, r1
 8021c60:	b209      	sxth	r1, r1
 8021c62:	2900      	cmp	r1, #0
 8021c64:	bfb8      	it	lt
 8021c66:	4249      	neglt	r1, r1
 8021c68:	b209      	sxth	r1, r1
 8021c6a:	428a      	cmp	r2, r1
 8021c6c:	da10      	bge.n	8021c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021c6e:	6920      	ldr	r0, [r4, #16]
 8021c70:	4669      	mov	r1, sp
 8021c72:	eba8 0606 	sub.w	r6, r8, r6
 8021c76:	1bef      	subs	r7, r5, r7
 8021c78:	6803      	ldr	r3, [r0, #0]
 8021c7a:	685b      	ldr	r3, [r3, #4]
 8021c7c:	4798      	blx	r3
 8021c7e:	2300      	movs	r3, #0
 8021c80:	2001      	movs	r0, #1
 8021c82:	8166      	strh	r6, [r4, #10]
 8021c84:	8123      	strh	r3, [r4, #8]
 8021c86:	81a7      	strh	r7, [r4, #12]
 8021c88:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021c8c:	80e5      	strh	r5, [r4, #6]
 8021c8e:	73a0      	strb	r0, [r4, #14]
 8021c90:	b004      	add	sp, #16
 8021c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c96:	bf00      	nop
 8021c98:	08028a9c 	.word	0x08028a9c

08021c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c9e:	461e      	mov	r6, r3
 8021ca0:	1e4b      	subs	r3, r1, #1
 8021ca2:	b085      	sub	sp, #20
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	2b01      	cmp	r3, #1
 8021ca8:	460d      	mov	r5, r1
 8021caa:	4617      	mov	r7, r2
 8021cac:	d84b      	bhi.n	8021d46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021cae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021cb2:	1cd3      	adds	r3, r2, #3
 8021cb4:	b29b      	uxth	r3, r3
 8021cb6:	2b06      	cmp	r3, #6
 8021cb8:	d916      	bls.n	8021ce8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021cba:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021cbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cc2:	f8cd c004 	str.w	ip, [sp, #4]
 8021cc6:	f04f 0c00 	mov.w	ip, #0
 8021cca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021cce:	6900      	ldr	r0, [r0, #16]
 8021cd0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021cd4:	a901      	add	r1, sp, #4
 8021cd6:	f88d c008 	strb.w	ip, [sp, #8]
 8021cda:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021cde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021ce2:	6803      	ldr	r3, [r0, #0]
 8021ce4:	689b      	ldr	r3, [r3, #8]
 8021ce6:	4798      	blx	r3
 8021ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cec:	1cd3      	adds	r3, r2, #3
 8021cee:	b29b      	uxth	r3, r3
 8021cf0:	2b06      	cmp	r3, #6
 8021cf2:	d916      	bls.n	8021d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021cf4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021cf8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cfc:	f8cd c004 	str.w	ip, [sp, #4]
 8021d00:	f04f 0c01 	mov.w	ip, #1
 8021d04:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021d08:	6920      	ldr	r0, [r4, #16]
 8021d0a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021d0e:	a901      	add	r1, sp, #4
 8021d10:	f88d c008 	strb.w	ip, [sp, #8]
 8021d14:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021d18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d1c:	6803      	ldr	r3, [r0, #0]
 8021d1e:	689b      	ldr	r3, [r3, #8]
 8021d20:	4798      	blx	r3
 8021d22:	4b0d      	ldr	r3, [pc, #52]	@ (8021d58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021d24:	a901      	add	r1, sp, #4
 8021d26:	6920      	ldr	r0, [r4, #16]
 8021d28:	9301      	str	r3, [sp, #4]
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	f88d 5008 	strb.w	r5, [sp, #8]
 8021d30:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021d34:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021d38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d3c:	6803      	ldr	r3, [r0, #0]
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	4798      	blx	r3
 8021d42:	b005      	add	sp, #20
 8021d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d46:	2900      	cmp	r1, #0
 8021d48:	d1eb      	bne.n	8021d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d4a:	80a2      	strh	r2, [r4, #4]
 8021d4c:	80c6      	strh	r6, [r0, #6]
 8021d4e:	60a1      	str	r1, [r4, #8]
 8021d50:	81a1      	strh	r1, [r4, #12]
 8021d52:	73a1      	strb	r1, [r4, #14]
 8021d54:	e7e5      	b.n	8021d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d56:	bf00      	nop
 8021d58:	08028a88 	.word	0x08028a88
 8021d5c:	08028ab0 	.word	0x08028ab0

08021d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8021d60:	10c9      	asrs	r1, r1, #3
 8021d62:	2900      	cmp	r1, #0
 8021d64:	bfb8      	it	lt
 8021d66:	4249      	neglt	r1, r1
 8021d68:	2801      	cmp	r0, #1
 8021d6a:	d108      	bne.n	8021d7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021d6c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021d70:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021d74:	4601      	mov	r1, r0
 8021d76:	dd02      	ble.n	8021d7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021d78:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8021d7c:	4770      	bx	lr
 8021d7e:	29ff      	cmp	r1, #255	@ 0xff
 8021d80:	bfa8      	it	ge
 8021d82:	21ff      	movge	r1, #255	@ 0xff
 8021d84:	4608      	mov	r0, r1
 8021d86:	4770      	bx	lr

08021d88 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021d88:	b410      	push	{r4}
 8021d8a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021d8e:	429c      	cmp	r4, r3
 8021d90:	d803      	bhi.n	8021d9a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d96:	f7f1 b9bd 	b.w	8013114 <_ZN8touchgfx7Outline6lineToEii>
 8021d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d9e:	4770      	bx	lr

08021da0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da4:	b08b      	sub	sp, #44	@ 0x2c
 8021da6:	4606      	mov	r6, r0
 8021da8:	468a      	mov	sl, r1
 8021daa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021dae:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8021db2:	9308      	str	r3, [sp, #32]
 8021db4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8021db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8021dba:	f7f1 fb16 	bl	80133ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8021dbe:	68b5      	ldr	r5, [r6, #8]
 8021dc0:	4604      	mov	r4, r0
 8021dc2:	2d00      	cmp	r5, #0
 8021dc4:	d044      	beq.n	8021e50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021dc6:	6873      	ldr	r3, [r6, #4]
 8021dc8:	42ab      	cmp	r3, r5
 8021dca:	d33d      	bcc.n	8021e48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8021dcc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021dd0:	f04f 0800 	mov.w	r8, #0
 8021dd4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8021dd8:	eb02 0b03 	add.w	fp, r2, r3
 8021ddc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021de0:	fb02 1203 	mla	r2, r2, r3, r1
 8021de4:	9205      	str	r2, [sp, #20]
 8021de6:	1e6a      	subs	r2, r5, #1
 8021de8:	9204      	str	r2, [sp, #16]
 8021dea:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8021dee:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021df2:	454b      	cmp	r3, r9
 8021df4:	463a      	mov	r2, r7
 8021df6:	d008      	beq.n	8021e0a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8021df8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8021dfc:	eb03 0b09 	add.w	fp, r3, r9
 8021e00:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021e04:	fb03 1309 	mla	r3, r3, r9, r1
 8021e08:	9305      	str	r3, [sp, #20]
 8021e0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021e0e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021e12:	4498      	add	r8, r3
 8021e14:	9b04      	ldr	r3, [sp, #16]
 8021e16:	3b01      	subs	r3, #1
 8021e18:	9304      	str	r3, [sp, #16]
 8021e1a:	9b04      	ldr	r3, [sp, #16]
 8021e1c:	3301      	adds	r3, #1
 8021e1e:	d015      	beq.n	8021e4c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021e20:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021e24:	42bb      	cmp	r3, r7
 8021e26:	d117      	bne.n	8021e58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021e28:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021e2c:	9b04      	ldr	r3, [sp, #16]
 8021e2e:	4548      	cmp	r0, r9
 8021e30:	f103 33ff 	add.w	r3, r3, #4294967295
 8021e34:	d17d      	bne.n	8021f32 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8021e36:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021e3a:	4401      	add	r1, r0
 8021e3c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e40:	4480      	add	r8, r0
 8021e42:	e7e9      	b.n	8021e18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8021e44:	461f      	mov	r7, r3
 8021e46:	e042      	b.n	8021ece <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021e48:	2000      	movs	r0, #0
 8021e4a:	e002      	b.n	8021e52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021e4c:	2900      	cmp	r1, #0
 8021e4e:	d16d      	bne.n	8021f2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8021e50:	2001      	movs	r0, #1
 8021e52:	b00b      	add	sp, #44	@ 0x2c
 8021e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e58:	b379      	cbz	r1, 8021eba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021e5a:	2f00      	cmp	r7, #0
 8021e5c:	db29      	blt.n	8021eb2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e5e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021e62:	42bb      	cmp	r3, r7
 8021e64:	dd25      	ble.n	8021eb2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e66:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021e6a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021e6e:	f7ff ff77 	bl	8021d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e74:	fb10 f003 	smulbb	r0, r0, r3
 8021e78:	b280      	uxth	r0, r0
 8021e7a:	1c41      	adds	r1, r0, #1
 8021e7c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021e80:	1209      	asrs	r1, r1, #8
 8021e82:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021e86:	d014      	beq.n	8021eb2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e88:	b2c9      	uxtb	r1, r1
 8021e8a:	9808      	ldr	r0, [sp, #32]
 8021e8c:	b2ba      	uxth	r2, r7
 8021e8e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021e90:	9102      	str	r1, [sp, #8]
 8021e92:	2101      	movs	r1, #1
 8021e94:	4413      	add	r3, r2
 8021e96:	4402      	add	r2, r0
 8021e98:	9101      	str	r1, [sp, #4]
 8021e9a:	fa0f f18b 	sxth.w	r1, fp
 8021e9e:	f8da 0000 	ldr.w	r0, [sl]
 8021ea2:	b21b      	sxth	r3, r3
 8021ea4:	9100      	str	r1, [sp, #0]
 8021ea6:	b212      	sxth	r2, r2
 8021ea8:	6941      	ldr	r1, [r0, #20]
 8021eaa:	4650      	mov	r0, sl
 8021eac:	460d      	mov	r5, r1
 8021eae:	9905      	ldr	r1, [sp, #20]
 8021eb0:	47a8      	blx	r5
 8021eb2:	9b04      	ldr	r3, [sp, #16]
 8021eb4:	1c7a      	adds	r2, r7, #1
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	d0ca      	beq.n	8021e50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021eba:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021ebe:	1abb      	subs	r3, r7, r2
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	dd31      	ble.n	8021f28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021ec4:	2a00      	cmp	r2, #0
 8021ec6:	dabd      	bge.n	8021e44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021ec8:	2f00      	cmp	r7, #0
 8021eca:	dd2d      	ble.n	8021f28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021ecc:	2200      	movs	r2, #0
 8021ece:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021ed2:	19d1      	adds	r1, r2, r7
 8021ed4:	4299      	cmp	r1, r3
 8021ed6:	db02      	blt.n	8021ede <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021ed8:	1a9f      	subs	r7, r3, r2
 8021eda:	2f00      	cmp	r7, #0
 8021edc:	dd24      	ble.n	8021f28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021ede:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021ee2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021ee6:	f7ff ff3b 	bl	8021d60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021eec:	fb10 f003 	smulbb	r0, r0, r3
 8021ef0:	b280      	uxth	r0, r0
 8021ef2:	1c41      	adds	r1, r0, #1
 8021ef4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021ef8:	1209      	asrs	r1, r1, #8
 8021efa:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021efe:	d013      	beq.n	8021f28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f00:	b292      	uxth	r2, r2
 8021f02:	9808      	ldr	r0, [sp, #32]
 8021f04:	b2c9      	uxtb	r1, r1
 8021f06:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021f08:	b23f      	sxth	r7, r7
 8021f0a:	4413      	add	r3, r2
 8021f0c:	9102      	str	r1, [sp, #8]
 8021f0e:	4402      	add	r2, r0
 8021f10:	fa0f f18b 	sxth.w	r1, fp
 8021f14:	f8da 0000 	ldr.w	r0, [sl]
 8021f18:	b21b      	sxth	r3, r3
 8021f1a:	9100      	str	r1, [sp, #0]
 8021f1c:	b212      	sxth	r2, r2
 8021f1e:	9701      	str	r7, [sp, #4]
 8021f20:	9905      	ldr	r1, [sp, #20]
 8021f22:	6947      	ldr	r7, [r0, #20]
 8021f24:	4650      	mov	r0, sl
 8021f26:	47b8      	blx	r7
 8021f28:	464b      	mov	r3, r9
 8021f2a:	e75e      	b.n	8021dea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021f2c:	2f00      	cmp	r7, #0
 8021f2e:	da96      	bge.n	8021e5e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021f30:	e78e      	b.n	8021e50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021f32:	2900      	cmp	r1, #0
 8021f34:	d0f8      	beq.n	8021f28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f36:	e790      	b.n	8021e5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021f38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021f3c:	461e      	mov	r6, r3
 8021f3e:	4b36      	ldr	r3, [pc, #216]	@ (8022018 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8021f40:	2500      	movs	r5, #0
 8021f42:	f100 0814 	add.w	r8, r0, #20
 8021f46:	4604      	mov	r4, r0
 8021f48:	4617      	mov	r7, r2
 8021f4a:	e9c0 3100 	strd	r3, r1, [r0]
 8021f4e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8021f52:	8185      	strh	r5, [r0, #12]
 8021f54:	8103      	strh	r3, [r0, #8]
 8021f56:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021f5a:	81c5      	strh	r5, [r0, #14]
 8021f5c:	7283      	strb	r3, [r0, #10]
 8021f5e:	8205      	strh	r5, [r0, #16]
 8021f60:	8245      	strh	r5, [r0, #18]
 8021f62:	4640      	mov	r0, r8
 8021f64:	f7f0 fc1c 	bl	80127a0 <_ZN8touchgfx7OutlineC1Ev>
 8021f68:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021f6c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8021f70:	466b      	mov	r3, sp
 8021f72:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8021f76:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021f7a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8021f7e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8021f82:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8021f86:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021f8a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8021f8e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8021f92:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8021f96:	6830      	ldr	r0, [r6, #0]
 8021f98:	6871      	ldr	r1, [r6, #4]
 8021f9a:	8872      	ldrh	r2, [r6, #2]
 8021f9c:	8835      	ldrh	r5, [r6, #0]
 8021f9e:	c303      	stmia	r3!, {r0, r1}
 8021fa0:	887b      	ldrh	r3, [r7, #2]
 8021fa2:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8021fa6:	4413      	add	r3, r2
 8021fa8:	883a      	ldrh	r2, [r7, #0]
 8021faa:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8021fae:	442a      	add	r2, r5
 8021fb0:	81e3      	strh	r3, [r4, #14]
 8021fb2:	8220      	strh	r0, [r4, #16]
 8021fb4:	4668      	mov	r0, sp
 8021fb6:	81a2      	strh	r2, [r4, #12]
 8021fb8:	8261      	strh	r1, [r4, #18]
 8021fba:	4639      	mov	r1, r7
 8021fbc:	f7f2 f93a 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fc0:	f104 000c 	add.w	r0, r4, #12
 8021fc4:	f7f2 f8f2 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021fcc:	f8bd 2000 	ldrh.w	r2, [sp]
 8021fd0:	4640      	mov	r0, r8
 8021fd2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8021fd6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8021fda:	f7f0 fbc5 	bl	8012768 <_ZN8touchgfx7Outline5resetEv>
 8021fde:	f9bd 3000 	ldrsh.w	r3, [sp]
 8021fe2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8021fe6:	4620      	mov	r0, r4
 8021fe8:	015b      	lsls	r3, r3, #5
 8021fea:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8021fec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021ff0:	015b      	lsls	r3, r3, #5
 8021ff2:	6523      	str	r3, [r4, #80]	@ 0x50
 8021ff4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021ff8:	015b      	lsls	r3, r3, #5
 8021ffa:	6563      	str	r3, [r4, #84]	@ 0x54
 8021ffc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8022000:	015b      	lsls	r3, r3, #5
 8022002:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022004:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8022008:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802200c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8022010:	b002      	add	sp, #8
 8022012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022016:	bf00      	nop
 8022018:	08028d40 	.word	0x08028d40

0802201c <_ZN8touchgfx6Canvas5closeEv>:
 802201c:	b538      	push	{r3, r4, r5, lr}
 802201e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8022022:	4604      	mov	r4, r0
 8022024:	b193      	cbz	r3, 802204c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022026:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802202a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802202e:	4213      	tst	r3, r2
 8022030:	d10c      	bne.n	802204c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022032:	f100 0514 	add.w	r5, r0, #20
 8022036:	b123      	cbz	r3, 8022042 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022038:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802203c:	4628      	mov	r0, r5
 802203e:	f7ff fea3 	bl	8021d88 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022042:	4628      	mov	r0, r5
 8022044:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8022048:	f7ff fe9e 	bl	8021d88 <_ZN8touchgfx10Rasterizer6lineToEii>
 802204c:	2300      	movs	r3, #0
 802204e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022052:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8022056:	4298      	cmp	r0, r3
 8022058:	bf34      	ite	cc
 802205a:	2000      	movcc	r0, #0
 802205c:	2001      	movcs	r0, #1
 802205e:	bd38      	pop	{r3, r4, r5, pc}

08022060 <_ZN8touchgfx6Canvas6renderEh>:
 8022060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022064:	7a85      	ldrb	r5, [r0, #10]
 8022066:	4604      	mov	r4, r0
 8022068:	4369      	muls	r1, r5
 802206a:	1c4d      	adds	r5, r1, #1
 802206c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022070:	122d      	asrs	r5, r5, #8
 8022072:	f000 8098 	beq.w	80221a6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022076:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802207a:	2b00      	cmp	r3, #0
 802207c:	f000 8093 	beq.w	80221a6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022080:	f7ff ffcc 	bl	802201c <_ZN8touchgfx6Canvas5closeEv>
 8022084:	4607      	mov	r7, r0
 8022086:	2800      	cmp	r0, #0
 8022088:	d045      	beq.n	8022116 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802208a:	6860      	ldr	r0, [r4, #4]
 802208c:	4e47      	ldr	r6, [pc, #284]	@ (80221ac <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802208e:	6803      	ldr	r3, [r0, #0]
 8022090:	6837      	ldr	r7, [r6, #0]
 8022092:	689b      	ldr	r3, [r3, #8]
 8022094:	4798      	blx	r3
 8022096:	4601      	mov	r1, r0
 8022098:	4638      	mov	r0, r7
 802209a:	f7ee fae1 	bl	8010660 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802209e:	4607      	mov	r7, r0
 80220a0:	f7e1 fee0 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 80220a4:	6803      	ldr	r3, [r0, #0]
 80220a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220a8:	4798      	blx	r3
 80220aa:	4680      	mov	r8, r0
 80220ac:	f7e1 feda 	bl	8003e64 <_ZN8touchgfx3HAL3lcdEv>
 80220b0:	6803      	ldr	r3, [r0, #0]
 80220b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220b4:	4798      	blx	r3
 80220b6:	280b      	cmp	r0, #11
 80220b8:	d85a      	bhi.n	8022170 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80220ba:	e8df f000 	tbb	[pc, r0]
 80220be:	5b50      	.short	0x5b50
 80220c0:	3059066b 	.word	0x3059066b
 80220c4:	64646440 	.word	0x64646440
 80220c8:	6464      	.short	0x6464
 80220ca:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80220ce:	2208      	movs	r2, #8
 80220d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80220d4:	fb91 f2f2 	sdiv	r2, r1, r2
 80220d8:	fb08 2303 	mla	r3, r8, r3, r2
 80220dc:	441f      	add	r7, r3
 80220de:	424b      	negs	r3, r1
 80220e0:	f001 0107 	and.w	r1, r1, #7
 80220e4:	f003 0307 	and.w	r3, r3, #7
 80220e8:	bf58      	it	pl
 80220ea:	4259      	negpl	r1, r3
 80220ec:	b2c9      	uxtb	r1, r1
 80220ee:	b2ed      	uxtb	r5, r5
 80220f0:	463a      	mov	r2, r7
 80220f2:	fa0f f388 	sxth.w	r3, r8
 80220f6:	f104 0014 	add.w	r0, r4, #20
 80220fa:	e9cd 1500 	strd	r1, r5, [sp]
 80220fe:	6861      	ldr	r1, [r4, #4]
 8022100:	f7ff fe4e 	bl	8021da0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8022104:	4607      	mov	r7, r0
 8022106:	6860      	ldr	r0, [r4, #4]
 8022108:	6803      	ldr	r3, [r0, #0]
 802210a:	691b      	ldr	r3, [r3, #16]
 802210c:	4798      	blx	r3
 802210e:	6830      	ldr	r0, [r6, #0]
 8022110:	6803      	ldr	r3, [r0, #0]
 8022112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022114:	4798      	blx	r3
 8022116:	4638      	mov	r0, r7
 8022118:	b002      	add	sp, #8
 802211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802211e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8022122:	2204      	movs	r2, #4
 8022124:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022128:	fb91 f2f2 	sdiv	r2, r1, r2
 802212c:	fb08 2303 	mla	r3, r8, r3, r2
 8022130:	441f      	add	r7, r3
 8022132:	424b      	negs	r3, r1
 8022134:	f001 0103 	and.w	r1, r1, #3
 8022138:	f003 0303 	and.w	r3, r3, #3
 802213c:	e7d4      	b.n	80220e8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802213e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8022142:	2202      	movs	r2, #2
 8022144:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022148:	2900      	cmp	r1, #0
 802214a:	fb91 f2f2 	sdiv	r2, r1, r2
 802214e:	f001 0101 	and.w	r1, r1, #1
 8022152:	fb08 2303 	mla	r3, r8, r3, r2
 8022156:	bfb8      	it	lt
 8022158:	4249      	neglt	r1, r1
 802215a:	441f      	add	r7, r3
 802215c:	e7c6      	b.n	80220ec <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802215e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022166:	fb08 f303 	mul.w	r3, r8, r3
 802216a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802216e:	441f      	add	r7, r3
 8022170:	2100      	movs	r1, #0
 8022172:	e7bc      	b.n	80220ee <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8022174:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022178:	2103      	movs	r1, #3
 802217a:	fb08 f203 	mul.w	r2, r8, r3
 802217e:	89a3      	ldrh	r3, [r4, #12]
 8022180:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022184:	e7f3      	b.n	802216e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022186:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802218a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802218e:	fb08 2303 	mla	r3, r8, r3, r2
 8022192:	e7ec      	b.n	802216e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022194:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802219c:	fb08 f303 	mul.w	r3, r8, r3
 80221a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80221a4:	e7e3      	b.n	802216e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80221a6:	2701      	movs	r7, #1
 80221a8:	e7b5      	b.n	8022116 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80221aa:	bf00      	nop
 80221ac:	240253b4 	.word	0x240253b4

080221b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80221b0:	4b06      	ldr	r3, [pc, #24]	@ (80221cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80221b2:	b510      	push	{r4, lr}
 80221b4:	781b      	ldrb	r3, [r3, #0]
 80221b6:	2b01      	cmp	r3, #1
 80221b8:	d107      	bne.n	80221ca <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80221ba:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80221be:	680b      	ldr	r3, [r1, #0]
 80221c0:	6814      	ldr	r4, [r2, #0]
 80221c2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80221c6:	6013      	str	r3, [r2, #0]
 80221c8:	600c      	str	r4, [r1, #0]
 80221ca:	bd10      	pop	{r4, pc}
 80221cc:	240253ac 	.word	0x240253ac

080221d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80221d0:	b513      	push	{r0, r1, r4, lr}
 80221d2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80221d6:	4604      	mov	r4, r0
 80221d8:	e9cd 2100 	strd	r2, r1, [sp]
 80221dc:	b9a3      	cbnz	r3, 8022208 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80221de:	466a      	mov	r2, sp
 80221e0:	a901      	add	r1, sp, #4
 80221e2:	4620      	mov	r0, r4
 80221e4:	f7ff ffe4 	bl	80221b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80221e8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80221ea:	9901      	ldr	r1, [sp, #4]
 80221ec:	9a00      	ldr	r2, [sp, #0]
 80221ee:	1ac9      	subs	r1, r1, r3
 80221f0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80221f2:	1ad2      	subs	r2, r2, r3
 80221f4:	9101      	str	r1, [sp, #4]
 80221f6:	2a00      	cmp	r2, #0
 80221f8:	9200      	str	r2, [sp, #0]
 80221fa:	da0b      	bge.n	8022214 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80221fc:	2301      	movs	r3, #1
 80221fe:	2900      	cmp	r1, #0
 8022200:	da0e      	bge.n	8022220 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8022202:	f043 0304 	orr.w	r3, r3, #4
 8022206:	e013      	b.n	8022230 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8022208:	f7ff ff08 	bl	802201c <_ZN8touchgfx6Canvas5closeEv>
 802220c:	2800      	cmp	r0, #0
 802220e:	d1e6      	bne.n	80221de <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8022210:	b002      	add	sp, #8
 8022212:	bd10      	pop	{r4, pc}
 8022214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022216:	429a      	cmp	r2, r3
 8022218:	bfac      	ite	ge
 802221a:	2302      	movge	r3, #2
 802221c:	2300      	movlt	r3, #0
 802221e:	e7ee      	b.n	80221fe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8022220:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8022222:	4281      	cmp	r1, r0
 8022224:	bfac      	ite	ge
 8022226:	2008      	movge	r0, #8
 8022228:	2000      	movlt	r0, #0
 802222a:	4318      	orrs	r0, r3
 802222c:	b2c3      	uxtb	r3, r0
 802222e:	b158      	cbz	r0, 8022248 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8022230:	2200      	movs	r2, #0
 8022232:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8022236:	9901      	ldr	r1, [sp, #4]
 8022238:	9a00      	ldr	r2, [sp, #0]
 802223a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802223c:	6722      	str	r2, [r4, #112]	@ 0x70
 802223e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8022242:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8022246:	e7e3      	b.n	8022210 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8022248:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802224c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8022250:	4298      	cmp	r0, r3
 8022252:	d803      	bhi.n	802225c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8022254:	f104 0014 	add.w	r0, r4, #20
 8022258:	f7f0 ff76 	bl	8013148 <_ZN8touchgfx7Outline6moveToEii>
 802225c:	2301      	movs	r3, #1
 802225e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022262:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022266:	2300      	movs	r3, #0
 8022268:	e7e5      	b.n	8022236 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802226a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802226c:	ab02      	add	r3, sp, #8
 802226e:	4604      	mov	r4, r0
 8022270:	9101      	str	r1, [sp, #4]
 8022272:	a901      	add	r1, sp, #4
 8022274:	f843 2d08 	str.w	r2, [r3, #-8]!
 8022278:	461a      	mov	r2, r3
 802227a:	f7ff ff99 	bl	80221b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802227e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022280:	9901      	ldr	r1, [sp, #4]
 8022282:	9a00      	ldr	r2, [sp, #0]
 8022284:	1ac9      	subs	r1, r1, r3
 8022286:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022288:	1ad2      	subs	r2, r2, r3
 802228a:	9101      	str	r1, [sp, #4]
 802228c:	2a00      	cmp	r2, #0
 802228e:	9200      	str	r2, [sp, #0]
 8022290:	db1c      	blt.n	80222cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8022292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022294:	429a      	cmp	r2, r3
 8022296:	bfac      	ite	ge
 8022298:	2002      	movge	r0, #2
 802229a:	2000      	movlt	r0, #0
 802229c:	2900      	cmp	r1, #0
 802229e:	db17      	blt.n	80222d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80222a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80222a2:	4299      	cmp	r1, r3
 80222a4:	bfac      	ite	ge
 80222a6:	2308      	movge	r3, #8
 80222a8:	2300      	movlt	r3, #0
 80222aa:	4303      	orrs	r3, r0
 80222ac:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80222b0:	b2dd      	uxtb	r5, r3
 80222b2:	b978      	cbnz	r0, 80222d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80222b4:	f104 0014 	add.w	r0, r4, #20
 80222b8:	f7ff fd66 	bl	8021d88 <_ZN8touchgfx10Rasterizer6lineToEii>
 80222bc:	9b01      	ldr	r3, [sp, #4]
 80222be:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80222c2:	6623      	str	r3, [r4, #96]	@ 0x60
 80222c4:	9b00      	ldr	r3, [sp, #0]
 80222c6:	6663      	str	r3, [r4, #100]	@ 0x64
 80222c8:	b002      	add	sp, #8
 80222ca:	bd70      	pop	{r4, r5, r6, pc}
 80222cc:	2001      	movs	r0, #1
 80222ce:	e7e5      	b.n	802229c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80222d0:	2304      	movs	r3, #4
 80222d2:	e7ea      	b.n	80222aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80222d4:	b113      	cbz	r3, 80222dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80222d6:	ea10 0305 	ands.w	r3, r0, r5
 80222da:	d11c      	bne.n	8022316 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80222dc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80222e0:	f104 0614 	add.w	r6, r4, #20
 80222e4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80222e8:	b98b      	cbnz	r3, 802230e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80222ea:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80222ee:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80222f2:	4298      	cmp	r0, r3
 80222f4:	d802      	bhi.n	80222fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80222f6:	4630      	mov	r0, r6
 80222f8:	f7f0 ff26 	bl	8013148 <_ZN8touchgfx7Outline6moveToEii>
 80222fc:	2301      	movs	r3, #1
 80222fe:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022302:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022306:	4630      	mov	r0, r6
 8022308:	e9dd 2100 	ldrd	r2, r1, [sp]
 802230c:	e7d4      	b.n	80222b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802230e:	4630      	mov	r0, r6
 8022310:	f7ff fd3a 	bl	8021d88 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022314:	e7f7      	b.n	8022306 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8022316:	461d      	mov	r5, r3
 8022318:	e7d0      	b.n	80222bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802231c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802231c:	b538      	push	{r3, r4, r5, lr}
 802231e:	ed2d 8b10 	vpush	{d8-d15}
 8022322:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8022326:	4605      	mov	r5, r0
 8022328:	eeb0 ca40 	vmov.f32	s24, s0
 802232c:	460c      	mov	r4, r1
 802232e:	eef0 ca60 	vmov.f32	s25, s1
 8022332:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8022490 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8022336:	eeb0 da41 	vmov.f32	s26, s2
 802233a:	eef0 da61 	vmov.f32	s27, s3
 802233e:	eeb0 ea42 	vmov.f32	s28, s4
 8022342:	eef0 ea62 	vmov.f32	s29, s5
 8022346:	eef0 aa6b 	vmov.f32	s21, s23
 802234a:	2c08      	cmp	r4, #8
 802234c:	d86e      	bhi.n	802242c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802234e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8022352:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8022356:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802235a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802235e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8022362:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8022366:	ee7c faad 	vadd.f32	s31, s25, s27
 802236a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802236e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8022372:	ee3d aaae 	vadd.f32	s20, s27, s29
 8022376:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802237a:	ee6f faab 	vmul.f32	s31, s31, s23
 802237e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8022382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022386:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802238a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022392:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8022396:	ee68 8aab 	vmul.f32	s17, s17, s23
 802239a:	bf48      	it	mi
 802239c:	eef1 7a67 	vnegmi.f32	s15, s15
 80223a0:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80223a4:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80223a8:	eef4 7acb 	vcmpe.f32	s15, s22
 80223ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223b0:	dd3f      	ble.n	8022432 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80223b2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80223b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80223ba:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80223be:	ee27 7a06 	vmul.f32	s14, s14, s12
 80223c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223ca:	d847      	bhi.n	802245c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80223cc:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80223d0:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80223d4:	f001 fe0b 	bl	8023fee <atan2f>
 80223d8:	eeb0 8a40 	vmov.f32	s16, s0
 80223dc:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80223e0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80223e4:	f001 fe03 	bl	8023fee <atan2f>
 80223e8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80223ec:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8022494 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80223f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80223f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223f8:	bf48      	it	mi
 80223fa:	eeb1 0a40 	vnegmi.f32	s0, s0
 80223fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022406:	bfa4      	itt	ge
 8022408:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8022498 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802240c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022410:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802249c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8022414:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802241c:	d51e      	bpl.n	802245c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802241e:	eef0 0a49 	vmov.f32	s1, s18
 8022422:	4628      	mov	r0, r5
 8022424:	eeb0 0a68 	vmov.f32	s0, s17
 8022428:	f7ef f820 	bl	801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802242c:	ecbd 8b10 	vpop	{d8-d15}
 8022430:	bd38      	pop	{r3, r4, r5, pc}
 8022432:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8022436:	eeb0 7a68 	vmov.f32	s14, s17
 802243a:	eef0 6a49 	vmov.f32	s13, s18
 802243e:	eea7 7aea 	vfms.f32	s14, s15, s21
 8022442:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8022446:	eee7 6aea 	vfms.f32	s13, s15, s21
 802244a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802244e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8022452:	eef4 7ac6 	vcmpe.f32	s15, s12
 8022456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802245a:	d9e0      	bls.n	802241e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802245c:	3401      	adds	r4, #1
 802245e:	eef0 0a6c 	vmov.f32	s1, s25
 8022462:	eeb0 0a4c 	vmov.f32	s0, s24
 8022466:	4628      	mov	r0, r5
 8022468:	4621      	mov	r1, r4
 802246a:	eef0 2a49 	vmov.f32	s5, s18
 802246e:	eeb0 2a68 	vmov.f32	s4, s17
 8022472:	eef0 1a6f 	vmov.f32	s3, s31
 8022476:	eeb0 1a4f 	vmov.f32	s2, s30
 802247a:	f7ff ff4f 	bl	802231c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802247e:	eef0 da4a 	vmov.f32	s27, s20
 8022482:	eeb0 da69 	vmov.f32	s26, s19
 8022486:	eef0 ca49 	vmov.f32	s25, s18
 802248a:	eeb0 ca68 	vmov.f32	s24, s17
 802248e:	e75c      	b.n	802234a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8022490:	2edbe6ff 	.word	0x2edbe6ff
 8022494:	40490fdb 	.word	0x40490fdb
 8022498:	40c90fdb 	.word	0x40c90fdb
 802249c:	3dcccccd 	.word	0x3dcccccd

080224a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80224a0:	b530      	push	{r4, r5, lr}
 80224a2:	ed2d 8b10 	vpush	{d8-d15}
 80224a6:	eef0 8a40 	vmov.f32	s17, s0
 80224aa:	b085      	sub	sp, #20
 80224ac:	eef0 9a60 	vmov.f32	s19, s1
 80224b0:	4604      	mov	r4, r0
 80224b2:	eef0 fa41 	vmov.f32	s31, s2
 80224b6:	460d      	mov	r5, r1
 80224b8:	eeb0 fa61 	vmov.f32	s30, s3
 80224bc:	eef0 ba42 	vmov.f32	s23, s4
 80224c0:	eeb0 ca62 	vmov.f32	s24, s5
 80224c4:	eef0 aa43 	vmov.f32	s21, s6
 80224c8:	eeb0 ba63 	vmov.f32	s22, s7
 80224cc:	2d08      	cmp	r5, #8
 80224ce:	f200 8113 	bhi.w	80226f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80224d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80224d6:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80224da:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80224de:	ee38 daaf 	vadd.f32	s26, s17, s31
 80224e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80224e6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80224ea:	ee2d da27 	vmul.f32	s26, s26, s15
 80224ee:	ed8d 6a01 	vstr	s12, [sp, #4]
 80224f2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80224f6:	ee6c caa7 	vmul.f32	s25, s25, s15
 80224fa:	eeb0 ea4d 	vmov.f32	s28, s26
 80224fe:	ee79 da8f 	vadd.f32	s27, s19, s30
 8022502:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8022506:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802250a:	ee66 6a27 	vmul.f32	s13, s12, s15
 802250e:	ee6d daa7 	vmul.f32	s27, s27, s15
 8022512:	edcd 6a03 	vstr	s13, [sp, #12]
 8022516:	eef0 6a6c 	vmov.f32	s13, s25
 802251a:	eef0 ea6d 	vmov.f32	s29, s27
 802251e:	ee2e ea27 	vmul.f32	s28, s28, s15
 8022522:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022526:	eee7 ea27 	vfma.f32	s29, s14, s15
 802252a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802252e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8022532:	eef0 6a67 	vmov.f32	s13, s15
 8022536:	ed8d 7a02 	vstr	s14, [sp, #8]
 802253a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802253e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8022542:	ed9d 7a02 	vldr	s14, [sp, #8]
 8022546:	ee3e aa87 	vadd.f32	s20, s29, s14
 802254a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802254e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8022552:	2d00      	cmp	r5, #0
 8022554:	f000 810b 	beq.w	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022558:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802255c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80227b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022560:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8022564:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8022568:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802256c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8022570:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8022574:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022578:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802257c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8022580:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8022584:	eea5 6a27 	vfma.f32	s12, s10, s15
 8022588:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022590:	bf48      	it	mi
 8022592:	eeb1 7a47 	vnegmi.f32	s14, s14
 8022596:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802259e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80225a2:	bf48      	it	mi
 80225a4:	eeb1 6a46 	vnegmi.f32	s12, s12
 80225a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225ac:	f340 80a8 	ble.w	8022700 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80225b0:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80225b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225b8:	dd5a      	ble.n	8022670 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80225ba:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80225be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80225c2:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80225c6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80225ca:	ee65 7a85 	vmul.f32	s15, s11, s10
 80225ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80225d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225d6:	f200 80ca 	bhi.w	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80225da:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80225de:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80225e2:	f001 fd04 	bl	8023fee <atan2f>
 80225e6:	eeb0 8a40 	vmov.f32	s16, s0
 80225ea:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80225ee:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80225f2:	f001 fcfc 	bl	8023fee <atan2f>
 80225f6:	ee38 fa40 	vsub.f32	s30, s16, s0
 80225fa:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80225fe:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022602:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8022606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802260a:	bf48      	it	mi
 802260c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8022610:	f001 fced 	bl	8023fee <atan2f>
 8022614:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022618:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80227b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802261c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022624:	eeb4 fae7 	vcmpe.f32	s30, s15
 8022628:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80227b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802262c:	bf48      	it	mi
 802262e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022636:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802263a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80227bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802263e:	bfa4      	itt	ge
 8022640:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80227c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022644:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8022648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802264c:	bfa4      	itt	ge
 802264e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80227c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022652:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8022656:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802265a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022662:	f140 8084 	bpl.w	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022666:	eef0 0a4a 	vmov.f32	s1, s20
 802266a:	eeb0 0a49 	vmov.f32	s0, s18
 802266e:	e040      	b.n	80226f2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8022670:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022674:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022678:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802267c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022688:	d871      	bhi.n	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802268a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802268e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022692:	f001 fcac 	bl	8023fee <atan2f>
 8022696:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802269a:	eeb0 8a40 	vmov.f32	s16, s0
 802269e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80226a2:	f001 fca4 	bl	8023fee <atan2f>
 80226a6:	ee38 0a40 	vsub.f32	s0, s16, s0
 80226aa:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80227b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80226ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80226b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226b6:	bf48      	it	mi
 80226b8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80226bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226c4:	bfa4      	itt	ge
 80226c6:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80227c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80226ca:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80226ce:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80227bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80226d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226da:	d548      	bpl.n	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80226dc:	eef0 0a4f 	vmov.f32	s1, s30
 80226e0:	4620      	mov	r0, r4
 80226e2:	eeb0 0a6f 	vmov.f32	s0, s31
 80226e6:	f7ee fec1 	bl	801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80226ea:	eef0 0a4c 	vmov.f32	s1, s24
 80226ee:	eeb0 0a6b 	vmov.f32	s0, s23
 80226f2:	4620      	mov	r0, r4
 80226f4:	f7ee feba 	bl	801146c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80226f8:	b005      	add	sp, #20
 80226fa:	ecbd 8b10 	vpop	{d8-d15}
 80226fe:	bd30      	pop	{r4, r5, pc}
 8022700:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80227b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022704:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8022708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802270c:	dd19      	ble.n	8022742 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802270e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022712:	ee26 7a06 	vmul.f32	s14, s12, s12
 8022716:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802271a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802271e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022726:	d822      	bhi.n	802276e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022728:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802272c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022730:	f001 fc5d 	bl	8023fee <atan2f>
 8022734:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022738:	eeb0 8a40 	vmov.f32	s16, s0
 802273c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022740:	e7af      	b.n	80226a2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8022742:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8022746:	eeb0 7a49 	vmov.f32	s14, s18
 802274a:	eeb0 6a4a 	vmov.f32	s12, s20
 802274e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8022752:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8022756:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802275a:	ee66 7a06 	vmul.f32	s15, s12, s12
 802275e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8022762:	eef4 7ac5 	vcmpe.f32	s15, s10
 8022766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802276a:	f67f af7c 	bls.w	8022666 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802276e:	3501      	adds	r5, #1
 8022770:	eef0 0a69 	vmov.f32	s1, s19
 8022774:	eeb0 0a68 	vmov.f32	s0, s17
 8022778:	4620      	mov	r0, r4
 802277a:	4629      	mov	r1, r5
 802277c:	eef0 3a4a 	vmov.f32	s7, s20
 8022780:	eeb0 3a49 	vmov.f32	s6, s18
 8022784:	eef0 2a6e 	vmov.f32	s5, s29
 8022788:	eeb0 2a4e 	vmov.f32	s4, s28
 802278c:	eef0 1a6d 	vmov.f32	s3, s27
 8022790:	eeb0 1a4d 	vmov.f32	s2, s26
 8022794:	f7ff fe84 	bl	80224a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8022798:	eeb0 ca6c 	vmov.f32	s24, s25
 802279c:	eddd ba01 	vldr	s23, [sp, #4]
 80227a0:	eef0 9a4a 	vmov.f32	s19, s20
 80227a4:	ed9d fa02 	vldr	s30, [sp, #8]
 80227a8:	eef0 8a49 	vmov.f32	s17, s18
 80227ac:	eddd fa03 	vldr	s31, [sp, #12]
 80227b0:	e68c      	b.n	80224cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80227b2:	bf00      	nop
 80227b4:	2edbe6ff 	.word	0x2edbe6ff
 80227b8:	40490fdb 	.word	0x40490fdb
 80227bc:	3dcccccd 	.word	0x3dcccccd
 80227c0:	40c90fdb 	.word	0x40c90fdb

080227c4 <_ZN8touchgfx6CanvasD1Ev>:
 80227c4:	4b04      	ldr	r3, [pc, #16]	@ (80227d8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80227c6:	b510      	push	{r4, lr}
 80227c8:	4604      	mov	r4, r0
 80227ca:	f840 3b14 	str.w	r3, [r0], #20
 80227ce:	f7ef ffc3 	bl	8012758 <_ZN8touchgfx7OutlineD1Ev>
 80227d2:	4620      	mov	r0, r4
 80227d4:	bd10      	pop	{r4, pc}
 80227d6:	bf00      	nop
 80227d8:	08028d40 	.word	0x08028d40

080227dc <_ZN8touchgfx6CanvasD0Ev>:
 80227dc:	b510      	push	{r4, lr}
 80227de:	4604      	mov	r4, r0
 80227e0:	f7ff fff0 	bl	80227c4 <_ZN8touchgfx6CanvasD1Ev>
 80227e4:	2174      	movs	r1, #116	@ 0x74
 80227e6:	4620      	mov	r0, r4
 80227e8:	f001 fbd9 	bl	8023f9e <_ZdlPvj>
 80227ec:	4620      	mov	r0, r4
 80227ee:	bd10      	pop	{r4, pc}

080227f0 <_ZN8touchgfx6CircleD1Ev>:
 80227f0:	4770      	bx	lr

080227f2 <_ZN8touchgfx6CircleD0Ev>:
 80227f2:	b510      	push	{r4, lr}
 80227f4:	4604      	mov	r4, r0
 80227f6:	2148      	movs	r1, #72	@ 0x48
 80227f8:	f001 fbd1 	bl	8023f9e <_ZdlPvj>
 80227fc:	4620      	mov	r0, r4
 80227fe:	bd10      	pop	{r4, pc}

08022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8022800:	b507      	push	{r0, r1, r2, lr}
 8022802:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8022806:	ab01      	add	r3, sp, #4
 8022808:	6809      	ldr	r1, [r1, #0]
 802280a:	6800      	ldr	r0, [r0, #0]
 802280c:	f7f3 fdfc 	bl	8016408 <_ZN8touchgfx6muldivElllRl>
 8022810:	b003      	add	sp, #12
 8022812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022818 <_ZN8touchgfx7CWRUtil4sineEi>:
 8022818:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 802281c:	fb90 f2f3 	sdiv	r2, r0, r3
 8022820:	fb02 0013 	mls	r0, r2, r3, r0
 8022824:	2800      	cmp	r0, #0
 8022826:	bfb8      	it	lt
 8022828:	18c0      	addlt	r0, r0, r3
 802282a:	4b0a      	ldr	r3, [pc, #40]	@ (8022854 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 802282c:	285a      	cmp	r0, #90	@ 0x5a
 802282e:	dc02      	bgt.n	8022836 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8022830:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022834:	4770      	bx	lr
 8022836:	28b4      	cmp	r0, #180	@ 0xb4
 8022838:	dc02      	bgt.n	8022840 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 802283a:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 802283e:	e7f7      	b.n	8022830 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8022840:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8022844:	bfd4      	ite	le
 8022846:	38b4      	suble	r0, #180	@ 0xb4
 8022848:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 802284c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022850:	4240      	negs	r0, r0
 8022852:	4770      	bx	lr
 8022854:	08028d4c 	.word	0x08028d4c

08022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8022858:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 802285c:	fb90 f2f3 	sdiv	r2, r0, r3
 8022860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022862:	fb02 0013 	mls	r0, r2, r3, r0
 8022866:	2800      	cmp	r0, #0
 8022868:	bfb8      	it	lt
 802286a:	18c0      	addlt	r0, r0, r3
 802286c:	1144      	asrs	r4, r0, #5
 802286e:	f000 061f 	and.w	r6, r0, #31
 8022872:	4620      	mov	r0, r4
 8022874:	f7ff ffd0 	bl	8022818 <_ZN8touchgfx7CWRUtil4sineEi>
 8022878:	4605      	mov	r5, r0
 802287a:	b90e      	cbnz	r6, 8022880 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 802287c:	b002      	add	sp, #8
 802287e:	bd70      	pop	{r4, r5, r6, pc}
 8022880:	1c60      	adds	r0, r4, #1
 8022882:	f7ff ffc9 	bl	8022818 <_ZN8touchgfx7CWRUtil4sineEi>
 8022886:	ab01      	add	r3, sp, #4
 8022888:	2220      	movs	r2, #32
 802288a:	4631      	mov	r1, r6
 802288c:	1b40      	subs	r0, r0, r5
 802288e:	f7f3 fdbb 	bl	8016408 <_ZN8touchgfx6muldivElllRl>
 8022892:	4428      	add	r0, r5
 8022894:	e7f2      	b.n	802287c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8022896:	b508      	push	{r3, lr}
 8022898:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 802289c:	f7ff ffdc 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80228a0:	bd08      	pop	{r3, pc}
	...

080228a4 <_ZN8touchgfx6CircleC1Ev>:
 80228a4:	b510      	push	{r4, lr}
 80228a6:	4604      	mov	r4, r0
 80228a8:	f7ef fc16 	bl	80120d8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80228ac:	4b08      	ldr	r3, [pc, #32]	@ (80228d0 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80228ae:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 80228b2:	4620      	mov	r0, r4
 80228b4:	6023      	str	r3, [r4, #0]
 80228b6:	2300      	movs	r3, #0
 80228b8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80228bc:	f24b 4205 	movw	r2, #46085	@ 0xb405
 80228c0:	60a3      	str	r3, [r4, #8]
 80228c2:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 80228c6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80228ca:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 80228ce:	bd10      	pop	{r4, pc}
 80228d0:	08028e0c 	.word	0x08028e0c

080228d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80228d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228d8:	428a      	cmp	r2, r1
 80228da:	4680      	mov	r8, r0
 80228dc:	4610      	mov	r0, r2
 80228de:	4699      	mov	r9, r3
 80228e0:	bfaa      	itet	ge
 80228e2:	460a      	movge	r2, r1
 80228e4:	460b      	movlt	r3, r1
 80228e6:	4603      	movge	r3, r0
 80228e8:	b085      	sub	sp, #20
 80228ea:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
 80228ee:	f108 0a34 	add.w	sl, r8, #52	@ 0x34
 80228f2:	1a99      	subs	r1, r3, r2
 80228f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80228f6:	f5b1 5f34 	cmp.w	r1, #11520	@ 0x2d00
 80228fa:	bfa4      	itt	ge
 80228fc:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 8022900:	2200      	movge	r2, #0
 8022902:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	@ 0x38
 8022906:	9300      	str	r3, [sp, #0]
 8022908:	f102 0b01 	add.w	fp, r2, #1
 802290c:	2c00      	cmp	r4, #0
 802290e:	f040 80ae 	bne.w	8022a6e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8022912:	4610      	mov	r0, r2
 8022914:	9201      	str	r2, [sp, #4]
 8022916:	f7ff ff9f 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802291a:	a903      	add	r1, sp, #12
 802291c:	9003      	str	r0, [sp, #12]
 802291e:	4650      	mov	r0, sl
 8022920:	f7ff ff6e 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022924:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8022928:	9a01      	ldr	r2, [sp, #4]
 802292a:	4408      	add	r0, r1
 802292c:	f8d9 1000 	ldr.w	r1, [r9]
 8022930:	4281      	cmp	r1, r0
 8022932:	bfc8      	it	gt
 8022934:	f8c9 0000 	strgt.w	r0, [r9]
 8022938:	6839      	ldr	r1, [r7, #0]
 802293a:	4288      	cmp	r0, r1
 802293c:	bfc8      	it	gt
 802293e:	6038      	strgt	r0, [r7, #0]
 8022940:	4610      	mov	r0, r2
 8022942:	f7ff ffa8 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022946:	a903      	add	r1, sp, #12
 8022948:	9003      	str	r0, [sp, #12]
 802294a:	4650      	mov	r0, sl
 802294c:	f7ff ff58 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022950:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8022954:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8022958:	1a10      	subs	r0, r2, r0
 802295a:	6832      	ldr	r2, [r6, #0]
 802295c:	4282      	cmp	r2, r0
 802295e:	bfc8      	it	gt
 8022960:	6030      	strgt	r0, [r6, #0]
 8022962:	682a      	ldr	r2, [r5, #0]
 8022964:	4290      	cmp	r0, r2
 8022966:	fb9b f2f1 	sdiv	r2, fp, r1
 802296a:	fb01 b212 	mls	r2, r1, r2, fp
 802296e:	bfc8      	it	gt
 8022970:	6028      	strgt	r0, [r5, #0]
 8022972:	1a8a      	subs	r2, r1, r2
 8022974:	fb92 f0f1 	sdiv	r0, r2, r1
 8022978:	fb01 2210 	mls	r2, r1, r0, r2
 802297c:	4493      	add	fp, r2
 802297e:	9b00      	ldr	r3, [sp, #0]
 8022980:	455b      	cmp	r3, fp
 8022982:	db2a      	blt.n	80229da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8022984:	4658      	mov	r0, fp
 8022986:	f7ff ff67 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802298a:	a903      	add	r1, sp, #12
 802298c:	9003      	str	r0, [sp, #12]
 802298e:	4650      	mov	r0, sl
 8022990:	f7ff ff36 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022994:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8022998:	4410      	add	r0, r2
 802299a:	f8d9 2000 	ldr.w	r2, [r9]
 802299e:	4282      	cmp	r2, r0
 80229a0:	bfc8      	it	gt
 80229a2:	f8c9 0000 	strgt.w	r0, [r9]
 80229a6:	683a      	ldr	r2, [r7, #0]
 80229a8:	4290      	cmp	r0, r2
 80229aa:	bfc8      	it	gt
 80229ac:	6038      	strgt	r0, [r7, #0]
 80229ae:	4658      	mov	r0, fp
 80229b0:	f7ff ff71 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80229b4:	a903      	add	r1, sp, #12
 80229b6:	9003      	str	r0, [sp, #12]
 80229b8:	4650      	mov	r0, sl
 80229ba:	f7ff ff21 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80229be:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80229c2:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 80229c6:	1a10      	subs	r0, r2, r0
 80229c8:	6832      	ldr	r2, [r6, #0]
 80229ca:	4282      	cmp	r2, r0
 80229cc:	bfc8      	it	gt
 80229ce:	6030      	strgt	r0, [r6, #0]
 80229d0:	682a      	ldr	r2, [r5, #0]
 80229d2:	4290      	cmp	r0, r2
 80229d4:	bfc8      	it	gt
 80229d6:	6028      	strgt	r0, [r5, #0]
 80229d8:	e7d1      	b.n	802297e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80229da:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 80229de:	9b00      	ldr	r3, [sp, #0]
 80229e0:	455b      	cmp	r3, fp
 80229e2:	dd27      	ble.n	8022a34 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80229e4:	4618      	mov	r0, r3
 80229e6:	f7ff ff37 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80229ea:	a903      	add	r1, sp, #12
 80229ec:	9003      	str	r0, [sp, #12]
 80229ee:	4650      	mov	r0, sl
 80229f0:	f7ff ff06 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80229f4:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80229f8:	4410      	add	r0, r2
 80229fa:	f8d9 2000 	ldr.w	r2, [r9]
 80229fe:	4282      	cmp	r2, r0
 8022a00:	bfc8      	it	gt
 8022a02:	f8c9 0000 	strgt.w	r0, [r9]
 8022a06:	683a      	ldr	r2, [r7, #0]
 8022a08:	4290      	cmp	r0, r2
 8022a0a:	bfc8      	it	gt
 8022a0c:	6038      	strgt	r0, [r7, #0]
 8022a0e:	9800      	ldr	r0, [sp, #0]
 8022a10:	f7ff ff41 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022a14:	a903      	add	r1, sp, #12
 8022a16:	9003      	str	r0, [sp, #12]
 8022a18:	4650      	mov	r0, sl
 8022a1a:	f7ff fef1 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022a1e:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8022a22:	1a10      	subs	r0, r2, r0
 8022a24:	6832      	ldr	r2, [r6, #0]
 8022a26:	4282      	cmp	r2, r0
 8022a28:	bfc8      	it	gt
 8022a2a:	6030      	strgt	r0, [r6, #0]
 8022a2c:	682a      	ldr	r2, [r5, #0]
 8022a2e:	4290      	cmp	r0, r2
 8022a30:	bfc8      	it	gt
 8022a32:	6028      	strgt	r0, [r5, #0]
 8022a34:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8022a38:	f8d9 1000 	ldr.w	r1, [r9]
 8022a3c:	4291      	cmp	r1, r2
 8022a3e:	bfc8      	it	gt
 8022a40:	f8c9 2000 	strgt.w	r2, [r9]
 8022a44:	683a      	ldr	r2, [r7, #0]
 8022a46:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8022a4a:	429a      	cmp	r2, r3
 8022a4c:	bfb8      	it	lt
 8022a4e:	603b      	strlt	r3, [r7, #0]
 8022a50:	6832      	ldr	r2, [r6, #0]
 8022a52:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8022a56:	429a      	cmp	r2, r3
 8022a58:	bfc8      	it	gt
 8022a5a:	6033      	strgt	r3, [r6, #0]
 8022a5c:	682a      	ldr	r2, [r5, #0]
 8022a5e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8022a62:	429a      	cmp	r2, r3
 8022a64:	da00      	bge.n	8022a68 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8022a66:	602b      	str	r3, [r5, #0]
 8022a68:	b005      	add	sp, #20
 8022a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a6e:	2002      	movs	r0, #2
 8022a70:	3401      	adds	r4, #1
 8022a72:	9201      	str	r2, [sp, #4]
 8022a74:	fb94 f4f0 	sdiv	r4, r4, r0
 8022a78:	4610      	mov	r0, r2
 8022a7a:	f7ff feed 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022a7e:	a903      	add	r1, sp, #12
 8022a80:	9003      	str	r0, [sp, #12]
 8022a82:	4650      	mov	r0, sl
 8022a84:	f7ff febc 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022a88:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8022a8c:	9a01      	ldr	r2, [sp, #4]
 8022a8e:	4408      	add	r0, r1
 8022a90:	f8d9 1000 	ldr.w	r1, [r9]
 8022a94:	1b03      	subs	r3, r0, r4
 8022a96:	4420      	add	r0, r4
 8022a98:	4299      	cmp	r1, r3
 8022a9a:	bfc8      	it	gt
 8022a9c:	f8c9 3000 	strgt.w	r3, [r9]
 8022aa0:	6839      	ldr	r1, [r7, #0]
 8022aa2:	428b      	cmp	r3, r1
 8022aa4:	bfc8      	it	gt
 8022aa6:	603b      	strgt	r3, [r7, #0]
 8022aa8:	f8d9 1000 	ldr.w	r1, [r9]
 8022aac:	4281      	cmp	r1, r0
 8022aae:	bfc8      	it	gt
 8022ab0:	f8c9 0000 	strgt.w	r0, [r9]
 8022ab4:	6839      	ldr	r1, [r7, #0]
 8022ab6:	4288      	cmp	r0, r1
 8022ab8:	bfc8      	it	gt
 8022aba:	6038      	strgt	r0, [r7, #0]
 8022abc:	4610      	mov	r0, r2
 8022abe:	f7ff feea 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022ac2:	a903      	add	r1, sp, #12
 8022ac4:	9003      	str	r0, [sp, #12]
 8022ac6:	4650      	mov	r0, sl
 8022ac8:	f7ff fe9a 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022acc:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8022ad0:	1a10      	subs	r0, r2, r0
 8022ad2:	6832      	ldr	r2, [r6, #0]
 8022ad4:	1b01      	subs	r1, r0, r4
 8022ad6:	4420      	add	r0, r4
 8022ad8:	428a      	cmp	r2, r1
 8022ada:	bfc8      	it	gt
 8022adc:	6031      	strgt	r1, [r6, #0]
 8022ade:	682a      	ldr	r2, [r5, #0]
 8022ae0:	4291      	cmp	r1, r2
 8022ae2:	bfc8      	it	gt
 8022ae4:	6029      	strgt	r1, [r5, #0]
 8022ae6:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8022aea:	6832      	ldr	r2, [r6, #0]
 8022aec:	4282      	cmp	r2, r0
 8022aee:	bfc8      	it	gt
 8022af0:	6030      	strgt	r0, [r6, #0]
 8022af2:	682a      	ldr	r2, [r5, #0]
 8022af4:	4290      	cmp	r0, r2
 8022af6:	fb9b f2f1 	sdiv	r2, fp, r1
 8022afa:	fb01 b212 	mls	r2, r1, r2, fp
 8022afe:	bfc8      	it	gt
 8022b00:	6028      	strgt	r0, [r5, #0]
 8022b02:	1a8a      	subs	r2, r1, r2
 8022b04:	fb92 f0f1 	sdiv	r0, r2, r1
 8022b08:	fb01 2210 	mls	r2, r1, r0, r2
 8022b0c:	4493      	add	fp, r2
 8022b0e:	9b00      	ldr	r3, [sp, #0]
 8022b10:	455b      	cmp	r3, fp
 8022b12:	db40      	blt.n	8022b96 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8022b14:	4658      	mov	r0, fp
 8022b16:	f7ff fe9f 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022b1a:	a903      	add	r1, sp, #12
 8022b1c:	9003      	str	r0, [sp, #12]
 8022b1e:	4650      	mov	r0, sl
 8022b20:	f7ff fe6e 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022b24:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8022b28:	4410      	add	r0, r2
 8022b2a:	f8d9 2000 	ldr.w	r2, [r9]
 8022b2e:	1b01      	subs	r1, r0, r4
 8022b30:	4420      	add	r0, r4
 8022b32:	428a      	cmp	r2, r1
 8022b34:	bfc8      	it	gt
 8022b36:	f8c9 1000 	strgt.w	r1, [r9]
 8022b3a:	683a      	ldr	r2, [r7, #0]
 8022b3c:	4291      	cmp	r1, r2
 8022b3e:	bfc8      	it	gt
 8022b40:	6039      	strgt	r1, [r7, #0]
 8022b42:	f8d9 2000 	ldr.w	r2, [r9]
 8022b46:	4282      	cmp	r2, r0
 8022b48:	bfc8      	it	gt
 8022b4a:	f8c9 0000 	strgt.w	r0, [r9]
 8022b4e:	683a      	ldr	r2, [r7, #0]
 8022b50:	4290      	cmp	r0, r2
 8022b52:	bfc8      	it	gt
 8022b54:	6038      	strgt	r0, [r7, #0]
 8022b56:	4658      	mov	r0, fp
 8022b58:	f7ff fe9d 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022b5c:	a903      	add	r1, sp, #12
 8022b5e:	9003      	str	r0, [sp, #12]
 8022b60:	4650      	mov	r0, sl
 8022b62:	f7ff fe4d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022b66:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8022b6a:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 8022b6e:	1a10      	subs	r0, r2, r0
 8022b70:	6832      	ldr	r2, [r6, #0]
 8022b72:	1b01      	subs	r1, r0, r4
 8022b74:	4420      	add	r0, r4
 8022b76:	428a      	cmp	r2, r1
 8022b78:	bfc8      	it	gt
 8022b7a:	6031      	strgt	r1, [r6, #0]
 8022b7c:	682a      	ldr	r2, [r5, #0]
 8022b7e:	4291      	cmp	r1, r2
 8022b80:	bfc8      	it	gt
 8022b82:	6029      	strgt	r1, [r5, #0]
 8022b84:	6832      	ldr	r2, [r6, #0]
 8022b86:	4282      	cmp	r2, r0
 8022b88:	bfc8      	it	gt
 8022b8a:	6030      	strgt	r0, [r6, #0]
 8022b8c:	682a      	ldr	r2, [r5, #0]
 8022b8e:	4290      	cmp	r0, r2
 8022b90:	bfc8      	it	gt
 8022b92:	6028      	strgt	r0, [r5, #0]
 8022b94:	e7bb      	b.n	8022b0e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8022b96:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 8022b9a:	9b00      	ldr	r3, [sp, #0]
 8022b9c:	455b      	cmp	r3, fp
 8022b9e:	f77f af63 	ble.w	8022a68 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8022ba2:	4618      	mov	r0, r3
 8022ba4:	f7ff fe58 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022ba8:	a903      	add	r1, sp, #12
 8022baa:	9003      	str	r0, [sp, #12]
 8022bac:	4650      	mov	r0, sl
 8022bae:	f7ff fe27 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022bb2:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8022bb6:	4410      	add	r0, r2
 8022bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8022bbc:	1b01      	subs	r1, r0, r4
 8022bbe:	4420      	add	r0, r4
 8022bc0:	428a      	cmp	r2, r1
 8022bc2:	bfc8      	it	gt
 8022bc4:	f8c9 1000 	strgt.w	r1, [r9]
 8022bc8:	683a      	ldr	r2, [r7, #0]
 8022bca:	4291      	cmp	r1, r2
 8022bcc:	bfc8      	it	gt
 8022bce:	6039      	strgt	r1, [r7, #0]
 8022bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8022bd4:	4282      	cmp	r2, r0
 8022bd6:	bfc8      	it	gt
 8022bd8:	f8c9 0000 	strgt.w	r0, [r9]
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	4298      	cmp	r0, r3
 8022be0:	bfc8      	it	gt
 8022be2:	6038      	strgt	r0, [r7, #0]
 8022be4:	9800      	ldr	r0, [sp, #0]
 8022be6:	f7ff fe56 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022bea:	a903      	add	r1, sp, #12
 8022bec:	9003      	str	r0, [sp, #12]
 8022bee:	4650      	mov	r0, sl
 8022bf0:	f7ff fe06 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022bf4:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8022bf8:	6832      	ldr	r2, [r6, #0]
 8022bfa:	1a18      	subs	r0, r3, r0
 8022bfc:	1b03      	subs	r3, r0, r4
 8022bfe:	4404      	add	r4, r0
 8022c00:	429a      	cmp	r2, r3
 8022c02:	bfc8      	it	gt
 8022c04:	6033      	strgt	r3, [r6, #0]
 8022c06:	682a      	ldr	r2, [r5, #0]
 8022c08:	4293      	cmp	r3, r2
 8022c0a:	bfc8      	it	gt
 8022c0c:	602b      	strgt	r3, [r5, #0]
 8022c0e:	6833      	ldr	r3, [r6, #0]
 8022c10:	42a3      	cmp	r3, r4
 8022c12:	bfc8      	it	gt
 8022c14:	6034      	strgt	r4, [r6, #0]
 8022c16:	682b      	ldr	r3, [r5, #0]
 8022c18:	429c      	cmp	r4, r3
 8022c1a:	bfc8      	it	gt
 8022c1c:	602c      	strgt	r4, [r5, #0]
 8022c1e:	e723      	b.n	8022a68 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08022c20 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8022c20:	b530      	push	{r4, r5, lr}
 8022c22:	4604      	mov	r4, r0
 8022c24:	4608      	mov	r0, r1
 8022c26:	4611      	mov	r1, r2
 8022c28:	461a      	mov	r2, r3
 8022c2a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8022c2e:	b089      	sub	sp, #36	@ 0x24
 8022c30:	2500      	movs	r5, #0
 8022c32:	015b      	lsls	r3, r3, #5
 8022c34:	9505      	str	r5, [sp, #20]
 8022c36:	9304      	str	r3, [sp, #16]
 8022c38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8022c3c:	015b      	lsls	r3, r3, #5
 8022c3e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8022c42:	ab07      	add	r3, sp, #28
 8022c44:	2520      	movs	r5, #32
 8022c46:	9302      	str	r3, [sp, #8]
 8022c48:	ab06      	add	r3, sp, #24
 8022c4a:	9301      	str	r3, [sp, #4]
 8022c4c:	ab05      	add	r3, sp, #20
 8022c4e:	9300      	str	r3, [sp, #0]
 8022c50:	ab04      	add	r3, sp, #16
 8022c52:	f7ff fe3f 	bl	80228d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8022c56:	9a04      	ldr	r2, [sp, #16]
 8022c58:	9805      	ldr	r0, [sp, #20]
 8022c5a:	9b06      	ldr	r3, [sp, #24]
 8022c5c:	9907      	ldr	r1, [sp, #28]
 8022c5e:	fb92 f2f5 	sdiv	r2, r2, r5
 8022c62:	fb90 f0f5 	sdiv	r0, r0, r5
 8022c66:	fb93 f3f5 	sdiv	r3, r3, r5
 8022c6a:	fb91 f1f5 	sdiv	r1, r1, r5
 8022c6e:	b292      	uxth	r2, r2
 8022c70:	3002      	adds	r0, #2
 8022c72:	b29b      	uxth	r3, r3
 8022c74:	3102      	adds	r1, #2
 8022c76:	1a80      	subs	r0, r0, r2
 8022c78:	3a01      	subs	r2, #1
 8022c7a:	1ac9      	subs	r1, r1, r3
 8022c7c:	3b01      	subs	r3, #1
 8022c7e:	80a0      	strh	r0, [r4, #4]
 8022c80:	4620      	mov	r0, r4
 8022c82:	8022      	strh	r2, [r4, #0]
 8022c84:	8063      	strh	r3, [r4, #2]
 8022c86:	80e1      	strh	r1, [r4, #6]
 8022c88:	b009      	add	sp, #36	@ 0x24
 8022c8a:	bd30      	pop	{r4, r5, pc}

08022c8c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8022c8c:	b510      	push	{r4, lr}
 8022c8e:	4604      	mov	r4, r0
 8022c90:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8022c94:	f7ff ffc4 	bl	8022c20 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8022c98:	4620      	mov	r0, r4
 8022c9a:	bd10      	pop	{r4, pc}

08022c9c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8022c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c9e:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	@ 0x38
 8022ca2:	4606      	mov	r6, r0
 8022ca4:	f891 0044 	ldrb.w	r0, [r1, #68]	@ 0x44
 8022ca8:	42a5      	cmp	r5, r4
 8022caa:	6813      	ldr	r3, [r2, #0]
 8022cac:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8022cb0:	da2b      	bge.n	8022d0a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8022cb2:	42a3      	cmp	r3, r4
 8022cb4:	dd14      	ble.n	8022ce0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8022cb6:	b168      	cbz	r0, 8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8022cb8:	4267      	negs	r7, r4
 8022cba:	fb97 f2f0 	sdiv	r2, r7, r0
 8022cbe:	fb00 7212 	mls	r2, r0, r2, r7
 8022cc2:	1a82      	subs	r2, r0, r2
 8022cc4:	fb92 f7f0 	sdiv	r7, r2, r0
 8022cc8:	fb00 2017 	mls	r0, r0, r7, r2
 8022ccc:	1a24      	subs	r4, r4, r0
 8022cce:	42ac      	cmp	r4, r5
 8022cd0:	bfb8      	it	lt
 8022cd2:	462c      	movlt	r4, r5
 8022cd4:	4630      	mov	r0, r6
 8022cd6:	4622      	mov	r2, r4
 8022cd8:	f7ff ffa2 	bl	8022c20 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8022cdc:	4630      	mov	r0, r6
 8022cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ce0:	42ab      	cmp	r3, r5
 8022ce2:	dd0e      	ble.n	8022d02 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8022ce4:	b168      	cbz	r0, 8022d02 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8022ce6:	425f      	negs	r7, r3
 8022ce8:	fb97 f2f0 	sdiv	r2, r7, r0
 8022cec:	fb00 7212 	mls	r2, r0, r2, r7
 8022cf0:	1a82      	subs	r2, r0, r2
 8022cf2:	fb92 f7f0 	sdiv	r7, r2, r0
 8022cf6:	fb00 2017 	mls	r0, r0, r7, r2
 8022cfa:	1a1b      	subs	r3, r3, r0
 8022cfc:	42ab      	cmp	r3, r5
 8022cfe:	bfb8      	it	lt
 8022d00:	462b      	movlt	r3, r5
 8022d02:	4622      	mov	r2, r4
 8022d04:	461c      	mov	r4, r3
 8022d06:	4613      	mov	r3, r2
 8022d08:	e7e4      	b.n	8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8022d0a:	42a3      	cmp	r3, r4
 8022d0c:	da10      	bge.n	8022d30 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8022d0e:	b148      	cbz	r0, 8022d24 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8022d10:	fb94 f2f0 	sdiv	r2, r4, r0
 8022d14:	fb00 4212 	mls	r2, r0, r2, r4
 8022d18:	1a82      	subs	r2, r0, r2
 8022d1a:	fb92 f7f0 	sdiv	r7, r2, r0
 8022d1e:	fb00 2017 	mls	r0, r0, r7, r2
 8022d22:	4404      	add	r4, r0
 8022d24:	42a5      	cmp	r5, r4
 8022d26:	bfa8      	it	ge
 8022d28:	4625      	movge	r5, r4
 8022d2a:	461c      	mov	r4, r3
 8022d2c:	462b      	mov	r3, r5
 8022d2e:	e7d1      	b.n	8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8022d30:	42ab      	cmp	r3, r5
 8022d32:	dacf      	bge.n	8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8022d34:	2800      	cmp	r0, #0
 8022d36:	d0cd      	beq.n	8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8022d38:	fb93 f2f0 	sdiv	r2, r3, r0
 8022d3c:	fb00 3212 	mls	r2, r0, r2, r3
 8022d40:	1a82      	subs	r2, r0, r2
 8022d42:	fb92 f7f0 	sdiv	r7, r2, r0
 8022d46:	fb00 2017 	mls	r0, r0, r7, r2
 8022d4a:	4403      	add	r3, r0
 8022d4c:	42ab      	cmp	r3, r5
 8022d4e:	bfa8      	it	ge
 8022d50:	462b      	movge	r3, r5
 8022d52:	e7bf      	b.n	8022cd4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08022d54 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8022d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d58:	e9d0 650e 	ldrd	r6, r5, [r0, #56]	@ 0x38
 8022d5c:	468a      	mov	sl, r1
 8022d5e:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	@ 0x2c
 8022d62:	42b5      	cmp	r5, r6
 8022d64:	f9b0 b030 	ldrsh.w	fp, [r0, #48]	@ 0x30
 8022d68:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8022d6a:	b0af      	sub	sp, #188	@ 0xbc
 8022d6c:	bfa4      	itt	ge
 8022d6e:	462b      	movge	r3, r5
 8022d70:	4635      	movge	r5, r6
 8022d72:	4604      	mov	r4, r0
 8022d74:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8022d76:	bfa8      	it	ge
 8022d78:	461e      	movge	r6, r3
 8022d7a:	1b73      	subs	r3, r6, r5
 8022d7c:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8022d80:	f04f 0320 	mov.w	r3, #32
 8022d84:	bfa4      	itt	ge
 8022d86:	f44f 5634 	movge.w	r6, #11520	@ 0x2d00
 8022d8a:	2500      	movge	r5, #0
 8022d8c:	fb99 f9f3 	sdiv	r9, r9, r3
 8022d90:	fb9b fbf3 	sdiv	fp, fp, r3
 8022d94:	2900      	cmp	r1, #0
 8022d96:	f000 80fb 	beq.w	8022f90 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x23c>
 8022d9a:	f9ba 0000 	ldrsh.w	r0, [sl]
 8022d9e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8022da2:	eba9 0700 	sub.w	r7, r9, r0
 8022da6:	ebab 0803 	sub.w	r8, fp, r3
 8022daa:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8022dae:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8022db2:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8022db6:	4407      	add	r7, r0
 8022db8:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8022dbc:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 8022dc0:	f8ba 8006 	ldrh.w	r8, [sl, #6]
 8022dc4:	b23f      	sxth	r7, r7
 8022dc6:	4498      	add	r8, r3
 8022dc8:	2302      	movs	r3, #2
 8022dca:	eba9 0707 	sub.w	r7, r9, r7
 8022dce:	fa0f f888 	sxth.w	r8, r8
 8022dd2:	9303      	str	r3, [sp, #12]
 8022dd4:	2f00      	cmp	r7, #0
 8022dd6:	ebab 0808 	sub.w	r8, fp, r8
 8022dda:	bfb8      	it	lt
 8022ddc:	427f      	neglt	r7, r7
 8022dde:	f1b8 0f00 	cmp.w	r8, #0
 8022de2:	bfb8      	it	lt
 8022de4:	f1c8 0800 	rsblt	r8, r8, #0
 8022de8:	45bc      	cmp	ip, r7
 8022dea:	bfcc      	ite	gt
 8022dec:	f10c 0701 	addgt.w	r7, ip, #1
 8022df0:	3701      	addle	r7, #1
 8022df2:	4540      	cmp	r0, r8
 8022df4:	bfc8      	it	gt
 8022df6:	f100 0801 	addgt.w	r8, r0, #1
 8022dfa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8022dfe:	bfd8      	it	le
 8022e00:	f108 0801 	addle.w	r8, r8, #1
 8022e04:	3001      	adds	r0, #1
 8022e06:	fb08 f808 	mul.w	r8, r8, r8
 8022e0a:	1040      	asrs	r0, r0, #1
 8022e0c:	fb07 8707 	mla	r7, r7, r7, r8
 8022e10:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8022e14:	fb91 f1f3 	sdiv	r1, r1, r3
 8022e18:	1a52      	subs	r2, r2, r1
 8022e1a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022e1c:	f7ff fcfc 	bl	8022818 <_ZN8touchgfx7CWRUtil4sineEi>
 8022e20:	a92e      	add	r1, sp, #184	@ 0xb8
 8022e22:	f841 0d74 	str.w	r0, [r1, #-116]!
 8022e26:	a80f      	add	r0, sp, #60	@ 0x3c
 8022e28:	f7ff fcea 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022e2c:	f04f 0c20 	mov.w	ip, #32
 8022e30:	9b03      	ldr	r3, [sp, #12]
 8022e32:	fb90 f0fc 	sdiv	r0, r0, ip
 8022e36:	4340      	muls	r0, r0
 8022e38:	4287      	cmp	r7, r0
 8022e3a:	da04      	bge.n	8022e46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf2>
 8022e3c:	2401      	movs	r4, #1
 8022e3e:	4620      	mov	r0, r4
 8022e40:	b02f      	add	sp, #188	@ 0xbc
 8022e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e46:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8022e48:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8022e4a:	fb91 f2f3 	sdiv	r2, r1, r3
 8022e4e:	4402      	add	r2, r0
 8022e50:	fb92 f2fc 	sdiv	r2, r2, ip
 8022e54:	f9ba 1000 	ldrsh.w	r1, [sl]
 8022e58:	3201      	adds	r2, #1
 8022e5a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8022e5e:	4352      	muls	r2, r2
 8022e60:	440b      	add	r3, r1
 8022e62:	b21b      	sxth	r3, r3
 8022e64:	454b      	cmp	r3, r9
 8022e66:	bfa8      	it	ge
 8022e68:	464b      	movge	r3, r9
 8022e6a:	428b      	cmp	r3, r1
 8022e6c:	bfac      	ite	ge
 8022e6e:	eba9 0903 	subge.w	r9, r9, r3
 8022e72:	eba9 0901 	sublt.w	r9, r9, r1
 8022e76:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8022e7a:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 8022e7e:	440b      	add	r3, r1
 8022e80:	b21b      	sxth	r3, r3
 8022e82:	455b      	cmp	r3, fp
 8022e84:	bfa8      	it	ge
 8022e86:	465b      	movge	r3, fp
 8022e88:	428b      	cmp	r3, r1
 8022e8a:	bfac      	ite	ge
 8022e8c:	ebab 0b03 	subge.w	fp, fp, r3
 8022e90:	ebab 0b01 	sublt.w	fp, fp, r1
 8022e94:	fb0b fb0b 	mul.w	fp, fp, fp
 8022e98:	fb09 b909 	mla	r9, r9, r9, fp
 8022e9c:	4591      	cmp	r9, r2
 8022e9e:	dccd      	bgt.n	8022e3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 8022ea0:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 8022ea4:	4621      	mov	r1, r4
 8022ea6:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8022ea8:	4648      	mov	r0, r9
 8022eaa:	f7f2 fdd1 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8022eae:	6823      	ldr	r3, [r4, #0]
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022eb4:	4798      	blx	r3
 8022eb6:	4653      	mov	r3, sl
 8022eb8:	9000      	str	r0, [sp, #0]
 8022eba:	464a      	mov	r2, r9
 8022ebc:	4639      	mov	r1, r7
 8022ebe:	a811      	add	r0, sp, #68	@ 0x44
 8022ec0:	f7ff f83a 	bl	8021f38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8022ec4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8022ec6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022ec8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022eca:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8022ece:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ed0:	dd07      	ble.n	8022ee2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18e>
 8022ed2:	2102      	movs	r1, #2
 8022ed4:	fb93 f3f1 	sdiv	r3, r3, r1
 8022ed8:	4413      	add	r3, r2
 8022eda:	930c      	str	r3, [sp, #48]	@ 0x30
 8022edc:	fb93 f3f1 	sdiv	r3, r3, r1
 8022ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ee2:	f04f 0a02 	mov.w	sl, #2
 8022ee6:	4628      	mov	r0, r5
 8022ee8:	f894 7044 	ldrb.w	r7, [r4, #68]	@ 0x44
 8022eec:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 8022ef0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8022ef4:	017f      	lsls	r7, r7, #5
 8022ef6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8022efa:	930d      	str	r3, [sp, #52]	@ 0x34
 8022efc:	f7ff fcac 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022f00:	4649      	mov	r1, r9
 8022f02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022f04:	a80d      	add	r0, sp, #52	@ 0x34
 8022f06:	f7ff fc7b 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022f0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8022f0c:	fb90 f0fa 	sdiv	r0, r0, sl
 8022f10:	eb00 0b03 	add.w	fp, r0, r3
 8022f14:	4628      	mov	r0, r5
 8022f16:	f7ff fcbe 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022f1a:	f848 0d80 	str.w	r0, [r8, #-128]!
 8022f1e:	a80d      	add	r0, sp, #52	@ 0x34
 8022f20:	4641      	mov	r1, r8
 8022f22:	f7ff fc6d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022f26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022f28:	4659      	mov	r1, fp
 8022f2a:	fb90 f0fa 	sdiv	r0, r0, sl
 8022f2e:	1a12      	subs	r2, r2, r0
 8022f30:	a811      	add	r0, sp, #68	@ 0x44
 8022f32:	f7ff f94d 	bl	80221d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8022f36:	f105 0a20 	add.w	sl, r5, #32
 8022f3a:	bb67      	cbnz	r7, 8022f96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8022f3c:	46ab      	mov	fp, r5
 8022f3e:	45b2      	cmp	sl, r6
 8022f40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022f42:	dc33      	bgt.n	8022fac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
 8022f44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022f46:	4650      	mov	r0, sl
 8022f48:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8022f4c:	920d      	str	r2, [sp, #52]	@ 0x34
 8022f4e:	f7ff fc83 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022f52:	4641      	mov	r1, r8
 8022f54:	900e      	str	r0, [sp, #56]	@ 0x38
 8022f56:	a80d      	add	r0, sp, #52	@ 0x34
 8022f58:	f7ff fc52 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022f5c:	2302      	movs	r3, #2
 8022f5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8022f60:	fb90 f0f3 	sdiv	r0, r0, r3
 8022f64:	eb00 0b02 	add.w	fp, r0, r2
 8022f68:	4650      	mov	r0, sl
 8022f6a:	f7ff fc94 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022f6e:	4649      	mov	r1, r9
 8022f70:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022f72:	a80d      	add	r0, sp, #52	@ 0x34
 8022f74:	f7ff fc44 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022f78:	2302      	movs	r3, #2
 8022f7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022f7c:	4659      	mov	r1, fp
 8022f7e:	46d3      	mov	fp, sl
 8022f80:	44ba      	add	sl, r7
 8022f82:	fb90 f0f3 	sdiv	r0, r0, r3
 8022f86:	1a12      	subs	r2, r2, r0
 8022f88:	a811      	add	r0, sp, #68	@ 0x44
 8022f8a:	f7ff f96e 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8022f8e:	e7d6      	b.n	8022f3e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8022f90:	fb92 f2f3 	sdiv	r2, r2, r3
 8022f94:	e75e      	b.n	8022e54 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x100>
 8022f96:	fb9a f2f7 	sdiv	r2, sl, r7
 8022f9a:	fb07 a212 	mls	r2, r7, r2, sl
 8022f9e:	1aba      	subs	r2, r7, r2
 8022fa0:	fb92 f1f7 	sdiv	r1, r2, r7
 8022fa4:	fb07 2211 	mls	r2, r7, r1, r2
 8022fa8:	4492      	add	sl, r2
 8022faa:	e7c7      	b.n	8022f3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8022fac:	455e      	cmp	r6, fp
 8022fae:	dd23      	ble.n	8022ff8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8022fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022fb2:	f04f 0a02 	mov.w	sl, #2
 8022fb6:	4630      	mov	r0, r6
 8022fb8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8022fbc:	920d      	str	r2, [sp, #52]	@ 0x34
 8022fbe:	f7ff fc4b 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8022fc2:	4641      	mov	r1, r8
 8022fc4:	900e      	str	r0, [sp, #56]	@ 0x38
 8022fc6:	a80d      	add	r0, sp, #52	@ 0x34
 8022fc8:	f7ff fc1a 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022fcc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8022fce:	fb90 f0fa 	sdiv	r0, r0, sl
 8022fd2:	4403      	add	r3, r0
 8022fd4:	4630      	mov	r0, r6
 8022fd6:	9303      	str	r3, [sp, #12]
 8022fd8:	f7ff fc5d 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8022fdc:	4649      	mov	r1, r9
 8022fde:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022fe0:	a80d      	add	r0, sp, #52	@ 0x34
 8022fe2:	f7ff fc0d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8022fe6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022fe8:	9b03      	ldr	r3, [sp, #12]
 8022fea:	fb90 f0fa 	sdiv	r0, r0, sl
 8022fee:	4619      	mov	r1, r3
 8022ff0:	1a12      	subs	r2, r2, r0
 8022ff2:	a811      	add	r0, sp, #68	@ 0x44
 8022ff4:	f7ff f939 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8022ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ffa:	b99b      	cbnz	r3, 8023024 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2d0>
 8022ffc:	1b75      	subs	r5, r6, r5
 8022ffe:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 8023002:	da04      	bge.n	802300e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8023004:	a811      	add	r0, sp, #68	@ 0x44
 8023006:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 802300a:	f7ff f92e 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 802300e:	21ff      	movs	r1, #255	@ 0xff
 8023010:	a811      	add	r0, sp, #68	@ 0x44
 8023012:	f7ff f825 	bl	8022060 <_ZN8touchgfx6Canvas6renderEh>
 8023016:	4604      	mov	r4, r0
 8023018:	4b89      	ldr	r3, [pc, #548]	@ (8023240 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ec>)
 802301a:	a816      	add	r0, sp, #88	@ 0x58
 802301c:	9311      	str	r3, [sp, #68]	@ 0x44
 802301e:	f7ef fb9b 	bl	8012758 <_ZN8touchgfx7OutlineD1Ev>
 8023022:	e70c      	b.n	8022e3e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8023024:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
 8023028:	429a      	cmp	r2, r3
 802302a:	f0c0 8107 	bcc.w	802323c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e8>
 802302e:	1b73      	subs	r3, r6, r5
 8023030:	f894 a045 	ldrb.w	sl, [r4, #69]	@ 0x45
 8023034:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8023038:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 802303c:	9303      	str	r3, [sp, #12]
 802303e:	da43      	bge.n	80230c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8023040:	4630      	mov	r0, r6
 8023042:	f7ff fc09 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023046:	4649      	mov	r1, r9
 8023048:	900f      	str	r0, [sp, #60]	@ 0x3c
 802304a:	a80b      	add	r0, sp, #44	@ 0x2c
 802304c:	f7ff fbd8 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023050:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8023052:	18c3      	adds	r3, r0, r3
 8023054:	4630      	mov	r0, r6
 8023056:	9305      	str	r3, [sp, #20]
 8023058:	f7ff fc1d 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802305c:	4649      	mov	r1, r9
 802305e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023060:	a80b      	add	r0, sp, #44	@ 0x2c
 8023062:	f7ff fbcd 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023068:	f506 52b4 	add.w	r2, r6, #5760	@ 0x1680
 802306c:	1a1b      	subs	r3, r3, r0
 802306e:	9206      	str	r2, [sp, #24]
 8023070:	9304      	str	r3, [sp, #16]
 8023072:	eb06 030a 	add.w	r3, r6, sl
 8023076:	9a06      	ldr	r2, [sp, #24]
 8023078:	4293      	cmp	r3, r2
 802307a:	da25      	bge.n	80230c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 802307c:	4618      	mov	r0, r3
 802307e:	9308      	str	r3, [sp, #32]
 8023080:	f7ff fbea 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023084:	4649      	mov	r1, r9
 8023086:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023088:	a80c      	add	r0, sp, #48	@ 0x30
 802308a:	f7ff fbb9 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802308e:	2202      	movs	r2, #2
 8023090:	9b05      	ldr	r3, [sp, #20]
 8023092:	9209      	str	r2, [sp, #36]	@ 0x24
 8023094:	fb90 f0f2 	sdiv	r0, r0, r2
 8023098:	18c3      	adds	r3, r0, r3
 802309a:	9307      	str	r3, [sp, #28]
 802309c:	9b08      	ldr	r3, [sp, #32]
 802309e:	4618      	mov	r0, r3
 80230a0:	f7ff fbf9 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80230a4:	a92e      	add	r1, sp, #184	@ 0xb8
 80230a6:	f841 0d80 	str.w	r0, [r1, #-128]!
 80230aa:	a80c      	add	r0, sp, #48	@ 0x30
 80230ac:	f7ff fba8 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80230b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80230b2:	9b04      	ldr	r3, [sp, #16]
 80230b4:	9907      	ldr	r1, [sp, #28]
 80230b6:	fb90 f2f2 	sdiv	r2, r0, r2
 80230ba:	a811      	add	r0, sp, #68	@ 0x44
 80230bc:	1a9a      	subs	r2, r3, r2
 80230be:	f7ff f8d4 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80230c2:	9b08      	ldr	r3, [sp, #32]
 80230c4:	4453      	add	r3, sl
 80230c6:	e7d6      	b.n	8023076 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x322>
 80230c8:	455e      	cmp	r6, fp
 80230ca:	dd25      	ble.n	8023118 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c4>
 80230cc:	4630      	mov	r0, r6
 80230ce:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80230d2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80230d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80230d8:	f7ff fbbe 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80230dc:	4641      	mov	r1, r8
 80230de:	900e      	str	r0, [sp, #56]	@ 0x38
 80230e0:	a80d      	add	r0, sp, #52	@ 0x34
 80230e2:	f7ff fb8d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80230e6:	2202      	movs	r2, #2
 80230e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80230ea:	9204      	str	r2, [sp, #16]
 80230ec:	fb90 f0f2 	sdiv	r0, r0, r2
 80230f0:	eb00 0903 	add.w	r9, r0, r3
 80230f4:	4630      	mov	r0, r6
 80230f6:	f7ff fbce 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80230fa:	a92e      	add	r1, sp, #184	@ 0xb8
 80230fc:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8023100:	a80d      	add	r0, sp, #52	@ 0x34
 8023102:	f7ff fb7d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023106:	9a04      	ldr	r2, [sp, #16]
 8023108:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802310a:	4649      	mov	r1, r9
 802310c:	fb90 f2f2 	sdiv	r2, r0, r2
 8023110:	a811      	add	r0, sp, #68	@ 0x44
 8023112:	1a9a      	subs	r2, r3, r2
 8023114:	f7ff f8a9 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023118:	46d9      	mov	r9, fp
 802311a:	2602      	movs	r6, #2
 802311c:	45a9      	cmp	r9, r5
 802311e:	db25      	blt.n	802316c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x418>
 8023120:	4648      	mov	r0, r9
 8023122:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8023126:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 802312a:	930d      	str	r3, [sp, #52]	@ 0x34
 802312c:	f7ff fb94 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023130:	4641      	mov	r1, r8
 8023132:	900e      	str	r0, [sp, #56]	@ 0x38
 8023134:	a80d      	add	r0, sp, #52	@ 0x34
 8023136:	f7ff fb63 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802313a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802313c:	fb90 f0f6 	sdiv	r0, r0, r6
 8023140:	eb00 0b03 	add.w	fp, r0, r3
 8023144:	4648      	mov	r0, r9
 8023146:	f7ff fba6 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802314a:	a90f      	add	r1, sp, #60	@ 0x3c
 802314c:	900f      	str	r0, [sp, #60]	@ 0x3c
 802314e:	a80d      	add	r0, sp, #52	@ 0x34
 8023150:	f7ff fb56 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023154:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8023156:	4659      	mov	r1, fp
 8023158:	46cb      	mov	fp, r9
 802315a:	eba9 0907 	sub.w	r9, r9, r7
 802315e:	fb90 f0f6 	sdiv	r0, r0, r6
 8023162:	1a12      	subs	r2, r2, r0
 8023164:	a811      	add	r0, sp, #68	@ 0x44
 8023166:	f7ff f880 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 802316a:	e7d7      	b.n	802311c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c8>
 802316c:	455d      	cmp	r5, fp
 802316e:	da22      	bge.n	80231b6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
 8023170:	2602      	movs	r6, #2
 8023172:	4628      	mov	r0, r5
 8023174:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8023178:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 802317c:	930d      	str	r3, [sp, #52]	@ 0x34
 802317e:	f7ff fb6b 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023182:	4641      	mov	r1, r8
 8023184:	900e      	str	r0, [sp, #56]	@ 0x38
 8023186:	a80d      	add	r0, sp, #52	@ 0x34
 8023188:	f7ff fb3a 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802318c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 802318e:	fb90 f0f6 	sdiv	r0, r0, r6
 8023192:	4407      	add	r7, r0
 8023194:	4628      	mov	r0, r5
 8023196:	f7ff fb7e 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802319a:	a92e      	add	r1, sp, #184	@ 0xb8
 802319c:	f841 0d7c 	str.w	r0, [r1, #-124]!
 80231a0:	a80d      	add	r0, sp, #52	@ 0x34
 80231a2:	f7ff fb2d 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80231a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80231a8:	4639      	mov	r1, r7
 80231aa:	fb90 f0f6 	sdiv	r0, r0, r6
 80231ae:	1a12      	subs	r2, r2, r0
 80231b0:	a811      	add	r0, sp, #68	@ 0x44
 80231b2:	f7ff f85a 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80231b6:	9b03      	ldr	r3, [sp, #12]
 80231b8:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 80231bc:	f6bf af27 	bge.w	802300e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80231c0:	ae2e      	add	r6, sp, #184	@ 0xb8
 80231c2:	4628      	mov	r0, r5
 80231c4:	f7ff fb48 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80231c8:	f04f 0b02 	mov.w	fp, #2
 80231cc:	f846 0d7c 	str.w	r0, [r6, #-124]!
 80231d0:	a80b      	add	r0, sp, #44	@ 0x2c
 80231d2:	4631      	mov	r1, r6
 80231d4:	f7ff fb14 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80231d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80231da:	eb00 0903 	add.w	r9, r0, r3
 80231de:	4628      	mov	r0, r5
 80231e0:	f7ff fb59 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80231e4:	4631      	mov	r1, r6
 80231e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80231e8:	a80b      	add	r0, sp, #44	@ 0x2c
 80231ea:	f7ff fb09 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80231ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80231f0:	f5a5 54b4 	sub.w	r4, r5, #5760	@ 0x1680
 80231f4:	eba3 0800 	sub.w	r8, r3, r0
 80231f8:	4454      	add	r4, sl
 80231fa:	42a5      	cmp	r5, r4
 80231fc:	f77f af07 	ble.w	802300e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8023200:	4620      	mov	r0, r4
 8023202:	f7ff fb29 	bl	8022858 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023206:	4631      	mov	r1, r6
 8023208:	900f      	str	r0, [sp, #60]	@ 0x3c
 802320a:	a80c      	add	r0, sp, #48	@ 0x30
 802320c:	f7ff faf8 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023210:	fb90 f0fb 	sdiv	r0, r0, fp
 8023214:	eb00 0709 	add.w	r7, r0, r9
 8023218:	4620      	mov	r0, r4
 802321a:	f7ff fb3c 	bl	8022896 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802321e:	a90e      	add	r1, sp, #56	@ 0x38
 8023220:	900e      	str	r0, [sp, #56]	@ 0x38
 8023222:	a80c      	add	r0, sp, #48	@ 0x30
 8023224:	f7ff faec 	bl	8022800 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023228:	4639      	mov	r1, r7
 802322a:	4454      	add	r4, sl
 802322c:	fb90 f2fb 	sdiv	r2, r0, fp
 8023230:	a811      	add	r0, sp, #68	@ 0x44
 8023232:	eba8 0202 	sub.w	r2, r8, r2
 8023236:	f7ff f818 	bl	802226a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 802323a:	e7de      	b.n	80231fa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a6>
 802323c:	2400      	movs	r4, #0
 802323e:	e6eb      	b.n	8023018 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c4>
 8023240:	08028d40 	.word	0x08028d40

08023244 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8023244:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8023248:	4770      	bx	lr

0802324a <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 802324a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 802324e:	4770      	bx	lr

08023250 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8023250:	6802      	ldr	r2, [r0, #0]
 8023252:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8023256:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8023258:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 802325c:	4710      	bx	r2

0802325e <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 802325e:	6802      	ldr	r2, [r0, #0]
 8023260:	eef0 0a40 	vmov.f32	s1, s0
 8023264:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8023268:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 802326a:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 802326e:	4710      	bx	r2

08023270 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8023270:	6802      	ldr	r2, [r0, #0]
 8023272:	eeb0 1a40 	vmov.f32	s2, s0
 8023276:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 802327a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 802327c:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8023280:	4710      	bx	r2

08023282 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8023282:	6802      	ldr	r2, [r0, #0]
 8023284:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8023288:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 802328a:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 802328e:	4710      	bx	r2

08023290 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8023290:	6802      	ldr	r2, [r0, #0]
 8023292:	eef0 0a40 	vmov.f32	s1, s0
 8023296:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 802329a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 802329c:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80232a0:	4710      	bx	r2

080232a2 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80232a2:	6802      	ldr	r2, [r0, #0]
 80232a4:	eeb0 1a40 	vmov.f32	s2, s0
 80232a8:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 80232ac:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80232ae:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80232b2:	4710      	bx	r2

080232b4 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 80232b4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80232b8:	4770      	bx	lr

080232ba <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 80232ba:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 80232be:	4770      	bx	lr

080232c0 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 80232c0:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 80232c4:	4770      	bx	lr

080232c6 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80232c6:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 80232ca:	4770      	bx	lr

080232cc <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80232cc:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 80232d0:	4770      	bx	lr

080232d2 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 80232d2:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 80232d6:	4770      	bx	lr

080232d8 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 80232d8:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 80232dc:	4770      	bx	lr

080232de <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 80232de:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 80232e2:	4770      	bx	lr

080232e4 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 80232e4:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 80232e8:	4770      	bx	lr

080232ea <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 80232ea:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 80232ee:	4770      	bx	lr

080232f0 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 80232f0:	ee07 2a90 	vmov	s15, r2
 80232f4:	6803      	ldr	r3, [r0, #0]
 80232f6:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80232fa:	ee07 1a90 	vmov	s15, r1
 80232fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8023302:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8023306:	4718      	bx	r3

08023308 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8023308:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 802330c:	4770      	bx	lr

0802330e <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 802330e:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8023312:	4770      	bx	lr

08023314 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8023314:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 8023318:	4770      	bx	lr

0802331a <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 802331a:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 802331e:	4770      	bx	lr

08023320 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8023320:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 8023324:	4770      	bx	lr

08023326 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8023326:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 802332a:	4770      	bx	lr

0802332c <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 802332c:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8023330:	4770      	bx	lr

08023332 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8023332:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8023336:	4770      	bx	lr

08023338 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8023338:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 802333c:	4770      	bx	lr

0802333e <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 802333e:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8023342:	4770      	bx	lr

08023344 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8023344:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 8023348:	4770      	bx	lr

0802334a <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 802334a:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 802334e:	4770      	bx	lr

08023350 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8023350:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 8023354:	4770      	bx	lr

08023356 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8023356:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 802335a:	4770      	bx	lr

0802335c <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 802335c:	b510      	push	{r4, lr}
 802335e:	ed2d 8b04 	vpush	{d8-d9}
 8023362:	6803      	ldr	r3, [r0, #0]
 8023364:	4604      	mov	r4, r0
 8023366:	eeb0 8a40 	vmov.f32	s16, s0
 802336a:	eef0 8a60 	vmov.f32	s17, s1
 802336e:	699b      	ldr	r3, [r3, #24]
 8023370:	eeb0 9a41 	vmov.f32	s18, s2
 8023374:	4798      	blx	r3
 8023376:	6823      	ldr	r3, [r4, #0]
 8023378:	4620      	mov	r0, r4
 802337a:	eef0 0a68 	vmov.f32	s1, s17
 802337e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8023380:	eeb0 1a49 	vmov.f32	s2, s18
 8023384:	eeb0 0a48 	vmov.f32	s0, s16
 8023388:	4798      	blx	r3
 802338a:	6823      	ldr	r3, [r4, #0]
 802338c:	4620      	mov	r0, r4
 802338e:	699b      	ldr	r3, [r3, #24]
 8023390:	ecbd 8b04 	vpop	{d8-d9}
 8023394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023398:	4718      	bx	r3

0802339a <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 802339a:	b510      	push	{r4, lr}
 802339c:	ed2d 8b02 	vpush	{d8}
 80233a0:	6803      	ldr	r3, [r0, #0]
 80233a2:	4604      	mov	r4, r0
 80233a4:	eeb0 8a40 	vmov.f32	s16, s0
 80233a8:	699b      	ldr	r3, [r3, #24]
 80233aa:	4798      	blx	r3
 80233ac:	6823      	ldr	r3, [r4, #0]
 80233ae:	4620      	mov	r0, r4
 80233b0:	eeb0 0a48 	vmov.f32	s0, s16
 80233b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80233b8:	4798      	blx	r3
 80233ba:	6823      	ldr	r3, [r4, #0]
 80233bc:	4620      	mov	r0, r4
 80233be:	699b      	ldr	r3, [r3, #24]
 80233c0:	ecbd 8b02 	vpop	{d8}
 80233c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233c8:	4718      	bx	r3

080233ca <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 80233ca:	2200      	movs	r2, #0
 80233cc:	8002      	strh	r2, [r0, #0]
 80233ce:	8042      	strh	r2, [r0, #2]
 80233d0:	8082      	strh	r2, [r0, #4]
 80233d2:	80c2      	strh	r2, [r0, #6]
 80233d4:	4770      	bx	lr

080233d6 <_ZN8touchgfx13TextureMapperD1Ev>:
 80233d6:	4770      	bx	lr

080233d8 <_ZN8touchgfx13TextureMapperD0Ev>:
 80233d8:	b510      	push	{r4, lr}
 80233da:	4604      	mov	r4, r0
 80233dc:	2190      	movs	r1, #144	@ 0x90
 80233de:	f000 fdde 	bl	8023f9e <_ZdlPvj>
 80233e2:	4620      	mov	r0, r4
 80233e4:	bd10      	pop	{r4, pc}
	...

080233e8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 80233e8:	b538      	push	{r3, r4, r5, lr}
 80233ea:	2301      	movs	r3, #1
 80233ec:	2500      	movs	r5, #0
 80233ee:	4604      	mov	r4, r0
 80233f0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 80233f4:	4b1f      	ldr	r3, [pc, #124]	@ (8023474 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80233f6:	8085      	strh	r5, [r0, #4]
 80233f8:	80c5      	strh	r5, [r0, #6]
 80233fa:	8105      	strh	r5, [r0, #8]
 80233fc:	8145      	strh	r5, [r0, #10]
 80233fe:	8185      	strh	r5, [r0, #12]
 8023400:	81c5      	strh	r5, [r0, #14]
 8023402:	8205      	strh	r5, [r0, #16]
 8023404:	8245      	strh	r5, [r0, #18]
 8023406:	61c5      	str	r5, [r0, #28]
 8023408:	8405      	strh	r5, [r0, #32]
 802340a:	8445      	strh	r5, [r0, #34]	@ 0x22
 802340c:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8023410:	6003      	str	r3, [r0, #0]
 8023412:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8023416:	880b      	ldrh	r3, [r1, #0]
 8023418:	84c3      	strh	r3, [r0, #38]	@ 0x26
 802341a:	23ff      	movs	r3, #255	@ 0xff
 802341c:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8023420:	f7ef f927 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8023424:	4b14      	ldr	r3, [pc, #80]	@ (8023478 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8023426:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 802342a:	4914      	ldr	r1, [pc, #80]	@ (802347c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 802342c:	6023      	str	r3, [r4, #0]
 802342e:	2300      	movs	r3, #0
 8023430:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8023434:	4620      	mov	r0, r4
 8023436:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023438:	6323      	str	r3, [r4, #48]	@ 0x30
 802343a:	6363      	str	r3, [r4, #52]	@ 0x34
 802343c:	63a3      	str	r3, [r4, #56]	@ 0x38
 802343e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8023440:	6463      	str	r3, [r4, #68]	@ 0x44
 8023442:	64a3      	str	r3, [r4, #72]	@ 0x48
 8023444:	6523      	str	r3, [r4, #80]	@ 0x50
 8023446:	6563      	str	r3, [r4, #84]	@ 0x54
 8023448:	65e3      	str	r3, [r4, #92]	@ 0x5c
 802344a:	6623      	str	r3, [r4, #96]	@ 0x60
 802344c:	66a3      	str	r3, [r4, #104]	@ 0x68
 802344e:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8023450:	6763      	str	r3, [r4, #116]	@ 0x74
 8023452:	67a3      	str	r3, [r4, #120]	@ 0x78
 8023454:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8023458:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 802345c:	230c      	movs	r3, #12
 802345e:	6422      	str	r2, [r4, #64]	@ 0x40
 8023460:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8023462:	65a1      	str	r1, [r4, #88]	@ 0x58
 8023464:	6662      	str	r2, [r4, #100]	@ 0x64
 8023466:	6722      	str	r2, [r4, #112]	@ 0x70
 8023468:	67e2      	str	r2, [r4, #124]	@ 0x7c
 802346a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 802346e:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 8023472:	bd38      	pop	{r3, r4, r5, pc}
 8023474:	080288d4 	.word	0x080288d4
 8023478:	08028e84 	.word	0x08028e84
 802347c:	447a0000 	.word	0x447a0000

08023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8023480:	b570      	push	{r4, r5, r6, lr}
 8023482:	ed2d 8b04 	vpush	{d8-d9}
 8023486:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 802348a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 802348c:	4604      	mov	r4, r0
 802348e:	add0      	add	r5, sp, #832	@ 0x340
 8023490:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8023494:	4628      	mov	r0, r5
 8023496:	f7f4 fbb5 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802349a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 802349c:	4606      	mov	r6, r0
 802349e:	4628      	mov	r0, r5
 80234a0:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 80234a4:	f7f4 fbe2 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80234a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80234ac:	1c72      	adds	r2, r6, #1
 80234ae:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80234b2:	3001      	adds	r0, #1
 80234b4:	ee07 2a90 	vmov	s15, r2
 80234b8:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 80234bc:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80234c0:	ee06 0a90 	vmov	s13, r0
 80234c4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80234c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80234ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80234ce:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 80234d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80234d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80234d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80234da:	a830      	add	r0, sp, #192	@ 0xc0
 80234dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80234e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80234e2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80234e6:	931e      	str	r3, [sp, #120]	@ 0x78
 80234e8:	2300      	movs	r3, #0
 80234ea:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80234ee:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 80234f2:	ae70      	add	r6, sp, #448	@ 0x1c0
 80234f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80234f6:	9321      	str	r3, [sp, #132]	@ 0x84
 80234f8:	9322      	str	r3, [sp, #136]	@ 0x88
 80234fa:	9324      	str	r3, [sp, #144]	@ 0x90
 80234fc:	9325      	str	r3, [sp, #148]	@ 0x94
 80234fe:	9326      	str	r3, [sp, #152]	@ 0x98
 8023500:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023502:	9329      	str	r3, [sp, #164]	@ 0xa4
 8023504:	932a      	str	r3, [sp, #168]	@ 0xa8
 8023506:	932c      	str	r3, [sp, #176]	@ 0xb0
 8023508:	932d      	str	r3, [sp, #180]	@ 0xb4
 802350a:	932e      	str	r3, [sp, #184]	@ 0xb8
 802350c:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8023510:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8023514:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 8023518:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 802351c:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 8023520:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 8023524:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 8023528:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 802352c:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8023530:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8023534:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 8023538:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 802353c:	f000 fc08 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023540:	eeb1 0a49 	vneg.f32	s0, s18
 8023544:	a830      	add	r0, sp, #192	@ 0xc0
 8023546:	f000 fcd3 	bl	8023ef0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802354a:	eeb1 0a68 	vneg.f32	s0, s17
 802354e:	f000 fcdd 	bl	8023f0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8023552:	eeb1 0a48 	vneg.f32	s0, s16
 8023556:	f000 fce8 	bl	8023f2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 802355a:	a840      	add	r0, sp, #256	@ 0x100
 802355c:	f000 fbf8 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023560:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 8023564:	a840      	add	r0, sp, #256	@ 0x100
 8023566:	f000 fc47 	bl	8023df8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 802356a:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 802356e:	f000 fc6d 	bl	8023e4c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8023572:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 8023576:	f000 fc92 	bl	8023e9e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 802357a:	a850      	add	r0, sp, #320	@ 0x140
 802357c:	f000 fbe8 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023580:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8023584:	a850      	add	r0, sp, #320	@ 0x140
 8023586:	f000 fcdf 	bl	8023f48 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 802358a:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 802358e:	f000 fce7 	bl	8023f60 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8023592:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8023596:	f000 fcf0 	bl	8023f7a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 802359a:	a860      	add	r0, sp, #384	@ 0x180
 802359c:	f000 fbd8 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 80235a0:	eeb0 0a49 	vmov.f32	s0, s18
 80235a4:	a860      	add	r0, sp, #384	@ 0x180
 80235a6:	f000 fca3 	bl	8023ef0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80235aa:	eeb0 0a68 	vmov.f32	s0, s17
 80235ae:	f000 fcad 	bl	8023f0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80235b2:	eeb0 0a48 	vmov.f32	s0, s16
 80235b6:	f000 fcb8 	bl	8023f2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80235ba:	aa50      	add	r2, sp, #320	@ 0x140
 80235bc:	a960      	add	r1, sp, #384	@ 0x180
 80235be:	a8b0      	add	r0, sp, #704	@ 0x2c0
 80235c0:	f000 fbde 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80235c4:	4628      	mov	r0, r5
 80235c6:	aa40      	add	r2, sp, #256	@ 0x100
 80235c8:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80235ca:	f000 fbd9 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80235ce:	4629      	mov	r1, r5
 80235d0:	aa30      	add	r2, sp, #192	@ 0xc0
 80235d2:	a870      	add	r0, sp, #448	@ 0x1c0
 80235d4:	f000 fbd4 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80235d8:	a880      	add	r0, sp, #512	@ 0x200
 80235da:	f000 fbb9 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 80235de:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 80235e2:	a880      	add	r0, sp, #512	@ 0x200
 80235e4:	eeb1 0a40 	vneg.f32	s0, s0
 80235e8:	f000 fc82 	bl	8023ef0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80235ec:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 80235f0:	a880      	add	r0, sp, #512	@ 0x200
 80235f2:	eeb1 0a40 	vneg.f32	s0, s0
 80235f6:	f000 fc89 	bl	8023f0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80235fa:	a890      	add	r0, sp, #576	@ 0x240
 80235fc:	f000 fba8 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023600:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8023604:	a890      	add	r0, sp, #576	@ 0x240
 8023606:	f000 fbe7 	bl	8023dd8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 802360a:	a8a0      	add	r0, sp, #640	@ 0x280
 802360c:	f000 fba0 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023610:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8023614:	a8a0      	add	r0, sp, #640	@ 0x280
 8023616:	f000 fc6b 	bl	8023ef0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802361a:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 802361e:	f000 fc75 	bl	8023f0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8023622:	aa90      	add	r2, sp, #576	@ 0x240
 8023624:	a9a0      	add	r1, sp, #640	@ 0x280
 8023626:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8023628:	f000 fbaa 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802362c:	4628      	mov	r0, r5
 802362e:	aa80      	add	r2, sp, #512	@ 0x200
 8023630:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8023632:	f000 fba5 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8023636:	4629      	mov	r1, r5
 8023638:	466d      	mov	r5, sp
 802363a:	aa70      	add	r2, sp, #448	@ 0x1c0
 802363c:	4668      	mov	r0, sp
 802363e:	f000 fb9f 	bl	8023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8023642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023644:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8023646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023648:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802364a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802364c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802364e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8023652:	2500      	movs	r5, #0
 8023654:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8023658:	0129      	lsls	r1, r5, #4
 802365a:	ab20      	add	r3, sp, #128	@ 0x80
 802365c:	3501      	adds	r5, #1
 802365e:	a870      	add	r0, sp, #448	@ 0x1c0
 8023660:	185e      	adds	r6, r3, r1
 8023662:	ab10      	add	r3, sp, #64	@ 0x40
 8023664:	4419      	add	r1, r3
 8023666:	f000 fb43 	bl	8023cf0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 802366a:	2d04      	cmp	r5, #4
 802366c:	ed86 0a00 	vstr	s0, [r6]
 8023670:	edc6 0a01 	vstr	s1, [r6, #4]
 8023674:	ed86 1a02 	vstr	s2, [r6, #8]
 8023678:	edc6 1a03 	vstr	s3, [r6, #12]
 802367c:	d1ec      	bne.n	8023658 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 802367e:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8023682:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 8023686:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 802368a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802368e:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 8023692:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8023696:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 802369a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802369e:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 80236a2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80236a6:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 80236aa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80236ae:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 80236b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80236b6:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 80236ba:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80236be:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 80236c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80236c6:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 80236ca:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80236ce:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 80236d2:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 80236d6:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 80236da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80236de:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 80236e2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80236e6:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 80236ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80236ee:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 80236f2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80236f6:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80236fa:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 80236fe:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 8023702:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023706:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 802370a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802370e:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 8023712:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023716:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802371a:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 802371e:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 8023722:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 8023726:	ecbd 8b04 	vpop	{d8-d9}
 802372a:	bd70      	pop	{r4, r5, r6, pc}

0802372c <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 802372c:	b510      	push	{r4, lr}
 802372e:	4604      	mov	r4, r0
 8023730:	f7ee ff9f 	bl	8012672 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8023734:	4620      	mov	r0, r4
 8023736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802373a:	f7ff bea1 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802373e <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 802373e:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8023742:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 8023746:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 802374a:	f7ff be99 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802374e <_ZN8touchgfx13TextureMapper8setScaleEf>:
 802374e:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 8023752:	f7ff be95 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023756 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8023756:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 802375a:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 802375e:	f7ff be8f 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023762 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8023762:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8023766:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802376e:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8023772:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 8023776:	f7ff be83 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802377a <_ZN8touchgfx13TextureMapper9setCameraEff>:
 802377a:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 802377e:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 8023782:	f7ff be7d 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023786 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8023786:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 802378a:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 802378e:	f7ff be77 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023792 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8023792:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8023796:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 802379a:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 802379e:	f7ff be6f 	b.w	8023480 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080237a2 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 80237a2:	b510      	push	{r4, lr}
 80237a4:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 80237a8:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 80237ac:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 80237b0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80237b4:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 80237b8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80237bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237c0:	bf54      	ite	pl
 80237c2:	eeb0 7a65 	vmovpl.f32	s14, s11
 80237c6:	eeb0 7a67 	vmovmi.f32	s14, s15
 80237ca:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80237ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237d2:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80237d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80237da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237de:	fe37 7a26 	vselgt.f32	s14, s14, s13
 80237e2:	febb 7a47 	vrintm.f32	s14, s14
 80237e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80237ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237ee:	eef4 7ae5 	vcmpe.f32	s15, s11
 80237f2:	bf56      	itet	pl
 80237f4:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80237f8:	2200      	movmi	r2, #0
 80237fa:	ee17 3a10 	vmovpl	r3, s14
 80237fe:	ee07 4a10 	vmov	s14, r4
 8023802:	bf58      	it	pl
 8023804:	b21a      	sxthpl	r2, r3
 8023806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802380a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802380e:	8002      	strh	r2, [r0, #0]
 8023810:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8023814:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8023818:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 802381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023820:	bf58      	it	pl
 8023822:	eef0 7a46 	vmovpl.f32	s15, s12
 8023826:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 802382a:	eef4 6ae7 	vcmpe.f32	s13, s15
 802382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023832:	bf58      	it	pl
 8023834:	eef0 7a66 	vmovpl.f32	s15, s13
 8023838:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 802383c:	fefa 7a67 	vrintp.f32	s15, s15
 8023840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023848:	bfdc      	itt	le
 802384a:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 802384e:	ee17 3a90 	vmovle	r3, s15
 8023852:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 8023856:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 802385a:	eef4 7ae5 	vcmpe.f32	s15, s11
 802385e:	bfd8      	it	le
 8023860:	b21c      	sxthle	r4, r3
 8023862:	1aa2      	subs	r2, r4, r2
 8023864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023868:	8082      	strh	r2, [r0, #4]
 802386a:	bf54      	ite	pl
 802386c:	eeb0 7a65 	vmovpl.f32	s14, s11
 8023870:	eeb0 7a67 	vmovmi.f32	s14, s15
 8023874:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8023878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802387c:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8023880:	eef4 6ac7 	vcmpe.f32	s13, s14
 8023884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023888:	fe37 7a26 	vselgt.f32	s14, s14, s13
 802388c:	febb 7a47 	vrintm.f32	s14, s14
 8023890:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023898:	eef4 7ae5 	vcmpe.f32	s15, s11
 802389c:	bf56      	itet	pl
 802389e:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80238a2:	2300      	movmi	r3, #0
 80238a4:	ee17 3a10 	vmovpl	r3, s14
 80238a8:	ee07 1a10 	vmov	s14, r1
 80238ac:	bf58      	it	pl
 80238ae:	b21b      	sxthpl	r3, r3
 80238b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80238b8:	8043      	strh	r3, [r0, #2]
 80238ba:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80238be:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80238c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238c6:	bf58      	it	pl
 80238c8:	eef0 7a46 	vmovpl.f32	s15, s12
 80238cc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80238d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238d4:	bf58      	it	pl
 80238d6:	eef0 7a66 	vmovpl.f32	s15, s13
 80238da:	fefa 7a67 	vrintp.f32	s15, s15
 80238de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80238e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238e6:	bfde      	ittt	le
 80238e8:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80238ec:	ee17 1a90 	vmovle	r1, s15
 80238f0:	b209      	sxthle	r1, r1
 80238f2:	1acb      	subs	r3, r1, r3
 80238f4:	80c3      	strh	r3, [r0, #6]
 80238f6:	bd10      	pop	{r4, pc}

080238f8 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 80238f8:	b513      	push	{r0, r1, r4, lr}
 80238fa:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80238fe:	4604      	mov	r4, r0
 8023900:	b143      	cbz	r3, 8023914 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 8023902:	4601      	mov	r1, r0
 8023904:	4668      	mov	r0, sp
 8023906:	f7ff ff4c 	bl	80237a2 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 802390a:	6823      	ldr	r3, [r4, #0]
 802390c:	4669      	mov	r1, sp
 802390e:	4620      	mov	r0, r4
 8023910:	691b      	ldr	r3, [r3, #16]
 8023912:	4798      	blx	r3
 8023914:	b002      	add	sp, #8
 8023916:	bd10      	pop	{r4, pc}

08023918 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8023918:	4603      	mov	r3, r0
 802391a:	3026      	adds	r0, #38	@ 0x26
 802391c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8023920:	b90b      	cbnz	r3, 8023926 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8023922:	f7f2 bce3 	b.w	80162ec <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8023926:	f7f2 bcf1 	b.w	801630c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0802392c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 802392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023930:	ed2d 8b04 	vpush	{d8-d9}
 8023934:	b0b3      	sub	sp, #204	@ 0xcc
 8023936:	4604      	mov	r4, r0
 8023938:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802393c:	2500      	movs	r5, #0
 802393e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8023942:	469b      	mov	fp, r3
 8023944:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8023948:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 802394c:	4648      	mov	r0, r9
 802394e:	9206      	str	r2, [sp, #24]
 8023950:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8023954:	9511      	str	r5, [sp, #68]	@ 0x44
 8023956:	ad13      	add	r5, sp, #76	@ 0x4c
 8023958:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 802395c:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8023960:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 8023962:	f7eb ff3b 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 8023966:	4621      	mov	r1, r4
 8023968:	a81e      	add	r0, sp, #120	@ 0x78
 802396a:	f7ff ff1a 	bl	80237a2 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 802396e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023972:	e885 0003 	stmia.w	r5, {r0, r1}
 8023976:	4628      	mov	r0, r5
 8023978:	a91e      	add	r1, sp, #120	@ 0x78
 802397a:	f7eb ff2f 	bl	800f7dc <_ZN8touchgfx4RectaNERKS0_>
 802397e:	6821      	ldr	r1, [r4, #0]
 8023980:	4620      	mov	r0, r4
 8023982:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8023984:	4629      	mov	r1, r5
 8023986:	47b0      	blx	r6
 8023988:	4621      	mov	r1, r4
 802398a:	a815      	add	r0, sp, #84	@ 0x54
 802398c:	1d26      	adds	r6, r4, #4
 802398e:	f7f2 f85f 	bl	8015a50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8023992:	a815      	add	r0, sp, #84	@ 0x54
 8023994:	f7f0 fc0a 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023998:	4631      	mov	r1, r6
 802399a:	4648      	mov	r0, r9
 802399c:	f7f0 fc4a 	bl	8014234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239a0:	4628      	mov	r0, r5
 80239a2:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80239a6:	f7f0 fc01 	bl	80141ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239aa:	4628      	mov	r0, r5
 80239ac:	f7f4 fa1c 	bl	8017de8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80239b0:	9007      	str	r0, [sp, #28]
 80239b2:	2800      	cmp	r0, #0
 80239b4:	f000 80dc 	beq.w	8023b70 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x244>
 80239b8:	f8db 200c 	ldr.w	r2, [fp, #12]
 80239bc:	a809      	add	r0, sp, #36	@ 0x24
 80239be:	f8db 1000 	ldr.w	r1, [fp]
 80239c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80239c4:	f8da 2000 	ldr.w	r2, [sl]
 80239c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80239ca:	920d      	str	r2, [sp, #52]	@ 0x34
 80239cc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80239d0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80239d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80239d6:	f8da 2008 	ldr.w	r2, [sl, #8]
 80239da:	910a      	str	r1, [sp, #40]	@ 0x28
 80239dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80239de:	f8db 1008 	ldr.w	r1, [fp, #8]
 80239e2:	f8da 200c 	ldr.w	r2, [sl, #12]
 80239e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80239e8:	a90d      	add	r1, sp, #52	@ 0x34
 80239ea:	9210      	str	r2, [sp, #64]	@ 0x40
 80239ec:	4632      	mov	r2, r6
 80239ee:	f7f0 fc05 	bl	80141fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80239f2:	4632      	mov	r2, r6
 80239f4:	a90e      	add	r1, sp, #56	@ 0x38
 80239f6:	a80a      	add	r0, sp, #40	@ 0x28
 80239f8:	f7f0 fc00 	bl	80141fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80239fc:	4632      	mov	r2, r6
 80239fe:	a90f      	add	r1, sp, #60	@ 0x3c
 8023a00:	a80b      	add	r0, sp, #44	@ 0x2c
 8023a02:	f7f0 fbfb 	bl	80141fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8023a06:	4632      	mov	r2, r6
 8023a08:	a910      	add	r1, sp, #64	@ 0x40
 8023a0a:	a80c      	add	r0, sp, #48	@ 0x30
 8023a0c:	f7f0 fbf6 	bl	80141fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8023a10:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8023a14:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023a16:	eef0 6a67 	vmov.f32	s13, s15
 8023a1a:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8023a1e:	ed97 4a00 	vldr	s8, [r7]
 8023a22:	eeb0 7a67 	vmov.f32	s14, s15
 8023a26:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8023a2a:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8023a2e:	ed97 5a01 	vldr	s10, [r7, #4]
 8023a32:	eeb0 6a67 	vmov.f32	s12, s15
 8023a36:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8023a3a:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8023a3e:	edd8 3a00 	vldr	s7, [r8]
 8023a42:	edd8 4a01 	vldr	s9, [r8, #4]
 8023a46:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8023a4a:	ed93 9a00 	vldr	s18, [r3]
 8023a4e:	ed93 8a01 	vldr	s16, [r3, #4]
 8023a52:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8023a56:	ee16 6a10 	vmov	r6, s12
 8023a5a:	eeb0 6a67 	vmov.f32	s12, s15
 8023a5e:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8023a62:	edd8 5a02 	vldr	s11, [r8, #8]
 8023a66:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8023a6a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8023a6e:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8023a72:	edcd 3a21 	vstr	s7, [sp, #132]	@ 0x84
 8023a76:	ee16 0a10 	vmov	r0, s12
 8023a7a:	eeb0 6a67 	vmov.f32	s12, s15
 8023a7e:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8023a82:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 8023a86:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8023a8a:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8023a8e:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
 8023a92:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
 8023a96:	ee16 1a10 	vmov	r1, s12
 8023a9a:	eeb0 6a67 	vmov.f32	s12, s15
 8023a9e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8023aa2:	edd3 8a02 	vldr	s17, [r3, #8]
 8023aa6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8023aaa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8023aae:	9624      	str	r6, [sp, #144]	@ 0x90
 8023ab0:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8023ab4:	68ff      	ldr	r7, [r7, #12]
 8023ab6:	ee16 2a10 	vmov	r2, s12
 8023aba:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8023abe:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 8023ac2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8023ac6:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 8023aca:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8023ace:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8023ad2:	9b06      	ldr	r3, [sp, #24]
 8023ad4:	4628      	mov	r0, r5
 8023ad6:	922d      	str	r2, [sp, #180]	@ 0xb4
 8023ad8:	4a28      	ldr	r2, [pc, #160]	@ (8023b7c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>)
 8023ada:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023adc:	8812      	ldrh	r2, [r2, #0]
 8023ade:	9b07      	ldr	r3, [sp, #28]
 8023ae0:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8023ae4:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8023ae8:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8023aec:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8023af0:	9218      	str	r2, [sp, #96]	@ 0x60
 8023af2:	9319      	str	r3, [sp, #100]	@ 0x64
 8023af4:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8023af8:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8023afc:	9731      	str	r7, [sp, #196]	@ 0xc4
 8023afe:	f7f4 f9a3 	bl	8017e48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023b02:	901a      	str	r0, [sp, #104]	@ 0x68
 8023b04:	4628      	mov	r0, r5
 8023b06:	f7f4 f87d 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023b0a:	901b      	str	r0, [sp, #108]	@ 0x6c
 8023b0c:	4628      	mov	r0, r5
 8023b0e:	f7f4 f8ad 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023b12:	901c      	str	r0, [sp, #112]	@ 0x70
 8023b14:	4628      	mov	r0, r5
 8023b16:	f7f4 f875 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023b1a:	eeb4 9a48 	vcmp.f32	s18, s16
 8023b1e:	901d      	str	r0, [sp, #116]	@ 0x74
 8023b20:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 8023b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b28:	d107      	bne.n	8023b3a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x20e>
 8023b2a:	eeb4 8a68 	vcmp.f32	s16, s17
 8023b2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b36:	bf08      	it	eq
 8023b38:	461e      	moveq	r6, r3
 8023b3a:	4b11      	ldr	r3, [pc, #68]	@ (8023b80 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x254>)
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8023b42:	b10a      	cbz	r2, 8023b48 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8023b44:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8023b46:	b905      	cbnz	r5, 8023b4a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21e>
 8023b48:	689d      	ldr	r5, [r3, #8]
 8023b4a:	682b      	ldr	r3, [r5, #0]
 8023b4c:	4620      	mov	r0, r4
 8023b4e:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 8023b50:	f7ff fee2 	bl	8023918 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8023b54:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8023b58:	aa1e      	add	r2, sp, #120	@ 0x78
 8023b5a:	9604      	str	r6, [sp, #16]
 8023b5c:	a917      	add	r1, sp, #92	@ 0x5c
 8023b5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8023b62:	ab13      	add	r3, sp, #76	@ 0x4c
 8023b64:	4628      	mov	r0, r5
 8023b66:	9301      	str	r3, [sp, #4]
 8023b68:	ab15      	add	r3, sp, #84	@ 0x54
 8023b6a:	9300      	str	r3, [sp, #0]
 8023b6c:	ab19      	add	r3, sp, #100	@ 0x64
 8023b6e:	47b8      	blx	r7
 8023b70:	b033      	add	sp, #204	@ 0xcc
 8023b72:	ecbd 8b04 	vpop	{d8-d9}
 8023b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b7a:	bf00      	nop
 8023b7c:	240253ae 	.word	0x240253ae
 8023b80:	240253b4 	.word	0x240253b4

08023b84 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8023b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b88:	ed2d 8b02 	vpush	{d8}
 8023b8c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8023b90:	b098      	sub	sp, #96	@ 0x60
 8023b92:	4604      	mov	r4, r0
 8023b94:	4688      	mov	r8, r1
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d077      	beq.n	8023c8a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8023b9a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8023b9e:	4628      	mov	r0, r5
 8023ba0:	f7f4 f830 	bl	8017c04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023ba4:	ee07 0a90 	vmov	s15, r0
 8023ba8:	4628      	mov	r0, r5
 8023baa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8023bae:	f7f4 f85d 	bl	8017c6c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8023cec <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8023bb4:	ee07 0a90 	vmov	s15, r0
 8023bb8:	781b      	ldrb	r3, [r3, #0]
 8023bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023bbe:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8023bc2:	2b01      	cmp	r3, #1
 8023bc4:	d066      	beq.n	8023c94 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8023bc6:	eeb0 6a47 	vmov.f32	s12, s14
 8023bca:	ee17 3a10 	vmov	r3, s14
 8023bce:	eeb0 4a48 	vmov.f32	s8, s16
 8023bd2:	eeb0 7a48 	vmov.f32	s14, s16
 8023bd6:	eef0 4a67 	vmov.f32	s9, s15
 8023bda:	eeb0 8a67 	vmov.f32	s16, s15
 8023bde:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 8023be2:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 8023be6:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 8023bea:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 8023bee:	ee73 1a65 	vsub.f32	s3, s6, s11
 8023bf2:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 8023bf6:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8023bfa:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 8023bfe:	ee32 1a45 	vsub.f32	s2, s4, s10
 8023c02:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8023c04:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8023c06:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8023c0a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8023c0c:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8023c10:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8023c14:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8023c18:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8023c1c:	eee1 6a21 	vfma.f32	s13, s2, s3
 8023c20:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c28:	dd3d      	ble.n	8023ca6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8023c2a:	ed8d 5a04 	vstr	s10, [sp, #16]
 8023c2e:	ed8d 2a05 	vstr	s4, [sp, #20]
 8023c32:	edcd 2a06 	vstr	s5, [sp, #24]
 8023c36:	f8cd c01c 	str.w	ip, [sp, #28]
 8023c3a:	edcd 5a08 	vstr	s11, [sp, #32]
 8023c3e:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 8023c42:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8023c46:	970b      	str	r7, [sp, #44]	@ 0x2c
 8023c48:	960c      	str	r6, [sp, #48]	@ 0x30
 8023c4a:	950d      	str	r5, [sp, #52]	@ 0x34
 8023c4c:	920e      	str	r2, [sp, #56]	@ 0x38
 8023c4e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023c50:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8023c54:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 8023c58:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 8023c5c:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 8023c60:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 8023c64:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8023c68:	9316      	str	r3, [sp, #88]	@ 0x58
 8023c6a:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 8023c6e:	ab14      	add	r3, sp, #80	@ 0x50
 8023c70:	2200      	movs	r2, #0
 8023c72:	4641      	mov	r1, r8
 8023c74:	4620      	mov	r0, r4
 8023c76:	9303      	str	r3, [sp, #12]
 8023c78:	ab10      	add	r3, sp, #64	@ 0x40
 8023c7a:	9302      	str	r3, [sp, #8]
 8023c7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8023c7e:	9301      	str	r3, [sp, #4]
 8023c80:	ab08      	add	r3, sp, #32
 8023c82:	9300      	str	r3, [sp, #0]
 8023c84:	ab04      	add	r3, sp, #16
 8023c86:	f7ff fe51 	bl	802392c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8023c8a:	b018      	add	sp, #96	@ 0x60
 8023c8c:	ecbd 8b02 	vpop	{d8}
 8023c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c94:	eeb0 6a48 	vmov.f32	s12, s16
 8023c98:	ee17 3a90 	vmov	r3, s15
 8023c9c:	eef0 4a47 	vmov.f32	s9, s14
 8023ca0:	eeb0 4a67 	vmov.f32	s8, s15
 8023ca4:	e79b      	b.n	8023bde <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8023ca6:	ed8d 5a05 	vstr	s10, [sp, #20]
 8023caa:	ed8d 2a04 	vstr	s4, [sp, #16]
 8023cae:	f8cd c018 	str.w	ip, [sp, #24]
 8023cb2:	edcd 2a07 	vstr	s5, [sp, #28]
 8023cb6:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8023cba:	ed8d 3a08 	vstr	s6, [sp, #32]
 8023cbe:	970a      	str	r7, [sp, #40]	@ 0x28
 8023cc0:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 8023cc4:	960d      	str	r6, [sp, #52]	@ 0x34
 8023cc6:	950c      	str	r5, [sp, #48]	@ 0x30
 8023cc8:	900e      	str	r0, [sp, #56]	@ 0x38
 8023cca:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023ccc:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8023cd0:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 8023cd4:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 8023cd8:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8023cdc:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 8023ce0:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8023ce4:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 8023ce8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023cea:	e7c0      	b.n	8023c6e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8023cec:	240253ac 	.word	0x240253ac

08023cf0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8023cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cf2:	2300      	movs	r3, #0
 8023cf4:	b08d      	sub	sp, #52	@ 0x34
 8023cf6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8023cfa:	f101 0710 	add.w	r7, r1, #16
 8023cfe:	9304      	str	r3, [sp, #16]
 8023d00:	aa04      	add	r2, sp, #16
 8023d02:	9305      	str	r3, [sp, #20]
 8023d04:	9306      	str	r3, [sp, #24]
 8023d06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8023d0a:	9307      	str	r3, [sp, #28]
 8023d0c:	4613      	mov	r3, r2
 8023d0e:	460c      	mov	r4, r1
 8023d10:	4605      	mov	r5, r0
 8023d12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8023d4c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8023d16:	ecb4 7a01 	vldmia	r4!, {s14}
 8023d1a:	ecf5 6a01 	vldmia	r5!, {s13}
 8023d1e:	42bc      	cmp	r4, r7
 8023d20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023d24:	d1f7      	bne.n	8023d16 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8023d26:	3010      	adds	r0, #16
 8023d28:	ece2 7a01 	vstmia	r2!, {s15}
 8023d2c:	42b0      	cmp	r0, r6
 8023d2e:	d1ee      	bne.n	8023d0e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8023d30:	ac0c      	add	r4, sp, #48	@ 0x30
 8023d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023d34:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8023d38:	ed9d 0a08 	vldr	s0, [sp, #32]
 8023d3c:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 8023d40:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8023d44:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8023d48:	b00d      	add	sp, #52	@ 0x34
 8023d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d4c:	00000000 	.word	0x00000000

08023d50 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8023d50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8023d54:	2300      	movs	r3, #0
 8023d56:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8023d7c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8023d5a:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8023d5e:	2200      	movs	r2, #0
 8023d60:	4293      	cmp	r3, r2
 8023d62:	f102 0201 	add.w	r2, r2, #1
 8023d66:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8023d6a:	2a04      	cmp	r2, #4
 8023d6c:	ece1 6a01 	vstmia	r1!, {s13}
 8023d70:	d1f6      	bne.n	8023d60 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8023d72:	3301      	adds	r3, #1
 8023d74:	2b04      	cmp	r3, #4
 8023d76:	d1f0      	bne.n	8023d5a <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8023d78:	4770      	bx	lr
 8023d7a:	bf00      	nop
 8023d7c:	00000000 	.word	0x00000000

08023d80 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8023d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d84:	460c      	mov	r4, r1
 8023d86:	4605      	mov	r5, r0
 8023d88:	4690      	mov	r8, r2
 8023d8a:	f7ff ffe1 	bl	8023d50 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023d8e:	4628      	mov	r0, r5
 8023d90:	4621      	mov	r1, r4
 8023d92:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8023d96:	2300      	movs	r3, #0
 8023d98:	eb08 0603 	add.w	r6, r8, r3
 8023d9c:	460f      	mov	r7, r1
 8023d9e:	2400      	movs	r4, #0
 8023da0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8023dd4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8023da4:	4632      	mov	r2, r6
 8023da6:	3401      	adds	r4, #1
 8023da8:	ecf7 6a01 	vldmia	r7!, {s13}
 8023dac:	3610      	adds	r6, #16
 8023dae:	ed92 7a00 	vldr	s14, [r2]
 8023db2:	2c04      	cmp	r4, #4
 8023db4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023db8:	d1f4      	bne.n	8023da4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8023dba:	18c2      	adds	r2, r0, r3
 8023dbc:	3304      	adds	r3, #4
 8023dbe:	2b10      	cmp	r3, #16
 8023dc0:	edc2 7a00 	vstr	s15, [r2]
 8023dc4:	d1e8      	bne.n	8023d98 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8023dc6:	3110      	adds	r1, #16
 8023dc8:	3010      	adds	r0, #16
 8023dca:	4561      	cmp	r1, ip
 8023dcc:	d1e3      	bne.n	8023d96 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8023dce:	4628      	mov	r0, r5
 8023dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dd4:	00000000 	.word	0x00000000

08023dd8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8023dd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8023ddc:	f100 0320 	add.w	r3, r0, #32
 8023de0:	3030      	adds	r0, #48	@ 0x30
 8023de2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8023de6:	ecf3 7a01 	vldmia	r3!, {s15}
 8023dea:	4283      	cmp	r3, r0
 8023dec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8023df0:	edc3 7a03 	vstr	s15, [r3, #12]
 8023df4:	d1f7      	bne.n	8023de6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8023df6:	4770      	bx	lr

08023df8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8023df8:	b510      	push	{r4, lr}
 8023dfa:	ed2d 8b02 	vpush	{d8}
 8023dfe:	eef0 8a40 	vmov.f32	s17, s0
 8023e02:	4604      	mov	r4, r0
 8023e04:	f000 f940 	bl	8024088 <sinf>
 8023e08:	eeb0 8a40 	vmov.f32	s16, s0
 8023e0c:	eeb0 0a68 	vmov.f32	s0, s17
 8023e10:	f000 f9fe 	bl	8024210 <cosf>
 8023e14:	eeb1 6a48 	vneg.f32	s12, s16
 8023e18:	f104 0310 	add.w	r3, r4, #16
 8023e1c:	f104 0220 	add.w	r2, r4, #32
 8023e20:	edd3 7a04 	vldr	s15, [r3, #16]
 8023e24:	edd3 6a00 	vldr	s13, [r3]
 8023e28:	ee26 7a27 	vmul.f32	s14, s12, s15
 8023e2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023e30:	eea6 7a80 	vfma.f32	s14, s13, s0
 8023e34:	eee6 7a88 	vfma.f32	s15, s13, s16
 8023e38:	eca3 7a01 	vstmia	r3!, {s14}
 8023e3c:	429a      	cmp	r2, r3
 8023e3e:	edc3 7a03 	vstr	s15, [r3, #12]
 8023e42:	d1ed      	bne.n	8023e20 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8023e44:	4620      	mov	r0, r4
 8023e46:	ecbd 8b02 	vpop	{d8}
 8023e4a:	bd10      	pop	{r4, pc}

08023e4c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8023e4c:	b510      	push	{r4, lr}
 8023e4e:	ed2d 8b02 	vpush	{d8}
 8023e52:	eef0 8a40 	vmov.f32	s17, s0
 8023e56:	4604      	mov	r4, r0
 8023e58:	f000 f916 	bl	8024088 <sinf>
 8023e5c:	eeb0 8a40 	vmov.f32	s16, s0
 8023e60:	eeb0 0a68 	vmov.f32	s0, s17
 8023e64:	f000 f9d4 	bl	8024210 <cosf>
 8023e68:	eeb1 6a48 	vneg.f32	s12, s16
 8023e6c:	4623      	mov	r3, r4
 8023e6e:	f104 0210 	add.w	r2, r4, #16
 8023e72:	edd3 7a08 	vldr	s15, [r3, #32]
 8023e76:	edd3 6a00 	vldr	s13, [r3]
 8023e7a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8023e7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023e82:	eea6 7a80 	vfma.f32	s14, s13, s0
 8023e86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8023e8a:	eca3 7a01 	vstmia	r3!, {s14}
 8023e8e:	429a      	cmp	r2, r3
 8023e90:	edc3 7a07 	vstr	s15, [r3, #28]
 8023e94:	d1ed      	bne.n	8023e72 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8023e96:	4620      	mov	r0, r4
 8023e98:	ecbd 8b02 	vpop	{d8}
 8023e9c:	bd10      	pop	{r4, pc}

08023e9e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8023e9e:	b510      	push	{r4, lr}
 8023ea0:	ed2d 8b02 	vpush	{d8}
 8023ea4:	eef0 8a40 	vmov.f32	s17, s0
 8023ea8:	4604      	mov	r4, r0
 8023eaa:	f000 f8ed 	bl	8024088 <sinf>
 8023eae:	eeb0 8a40 	vmov.f32	s16, s0
 8023eb2:	eeb0 0a68 	vmov.f32	s0, s17
 8023eb6:	f000 f9ab 	bl	8024210 <cosf>
 8023eba:	eeb1 6a48 	vneg.f32	s12, s16
 8023ebe:	4623      	mov	r3, r4
 8023ec0:	f104 0210 	add.w	r2, r4, #16
 8023ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8023ec8:	edd3 6a00 	vldr	s13, [r3]
 8023ecc:	ee26 7a27 	vmul.f32	s14, s12, s15
 8023ed0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023ed4:	eea6 7a80 	vfma.f32	s14, s13, s0
 8023ed8:	eee6 7a88 	vfma.f32	s15, s13, s16
 8023edc:	eca3 7a01 	vstmia	r3!, {s14}
 8023ee0:	429a      	cmp	r2, r3
 8023ee2:	edc3 7a03 	vstr	s15, [r3, #12]
 8023ee6:	d1ed      	bne.n	8023ec4 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8023ee8:	4620      	mov	r0, r4
 8023eea:	ecbd 8b02 	vpop	{d8}
 8023eee:	bd10      	pop	{r4, pc}

08023ef0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8023ef0:	4603      	mov	r3, r0
 8023ef2:	f100 0210 	add.w	r2, r0, #16
 8023ef6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8023efa:	edd3 7a00 	vldr	s15, [r3]
 8023efe:	eee7 7a00 	vfma.f32	s15, s14, s0
 8023f02:	ece3 7a01 	vstmia	r3!, {s15}
 8023f06:	4293      	cmp	r3, r2
 8023f08:	d1f5      	bne.n	8023ef6 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8023f0a:	4770      	bx	lr

08023f0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8023f0c:	f100 0310 	add.w	r3, r0, #16
 8023f10:	f100 0220 	add.w	r2, r0, #32
 8023f14:	ed93 7a08 	vldr	s14, [r3, #32]
 8023f18:	edd3 7a00 	vldr	s15, [r3]
 8023f1c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8023f20:	ece3 7a01 	vstmia	r3!, {s15}
 8023f24:	4293      	cmp	r3, r2
 8023f26:	d1f5      	bne.n	8023f14 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8023f28:	4770      	bx	lr

08023f2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8023f2a:	f100 0320 	add.w	r3, r0, #32
 8023f2e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8023f32:	ed93 7a04 	vldr	s14, [r3, #16]
 8023f36:	edd3 7a00 	vldr	s15, [r3]
 8023f3a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8023f3e:	ece3 7a01 	vstmia	r3!, {s15}
 8023f42:	4293      	cmp	r3, r2
 8023f44:	d1f5      	bne.n	8023f32 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8023f46:	4770      	bx	lr

08023f48 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8023f48:	4603      	mov	r3, r0
 8023f4a:	f100 0210 	add.w	r2, r0, #16
 8023f4e:	edd3 7a00 	vldr	s15, [r3]
 8023f52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023f56:	ece3 7a01 	vstmia	r3!, {s15}
 8023f5a:	4293      	cmp	r3, r2
 8023f5c:	d1f7      	bne.n	8023f4e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8023f5e:	4770      	bx	lr

08023f60 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8023f60:	f100 0310 	add.w	r3, r0, #16
 8023f64:	f100 0220 	add.w	r2, r0, #32
 8023f68:	edd3 7a00 	vldr	s15, [r3]
 8023f6c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023f70:	ece3 7a01 	vstmia	r3!, {s15}
 8023f74:	4293      	cmp	r3, r2
 8023f76:	d1f7      	bne.n	8023f68 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8023f78:	4770      	bx	lr

08023f7a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8023f7a:	f100 0320 	add.w	r3, r0, #32
 8023f7e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8023f82:	edd3 7a00 	vldr	s15, [r3]
 8023f86:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023f8a:	ece3 7a01 	vstmia	r3!, {s15}
 8023f8e:	4293      	cmp	r3, r2
 8023f90:	d1f7      	bne.n	8023f82 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8023f92:	4770      	bx	lr

08023f94 <__aeabi_atexit>:
 8023f94:	460b      	mov	r3, r1
 8023f96:	4601      	mov	r1, r0
 8023f98:	4618      	mov	r0, r3
 8023f9a:	f000 bc5b 	b.w	8024854 <__cxa_atexit>

08023f9e <_ZdlPvj>:
 8023f9e:	f000 b812 	b.w	8023fc6 <_ZdlPv>

08023fa2 <__cxa_guard_acquire>:
 8023fa2:	6802      	ldr	r2, [r0, #0]
 8023fa4:	07d2      	lsls	r2, r2, #31
 8023fa6:	4603      	mov	r3, r0
 8023fa8:	d405      	bmi.n	8023fb6 <__cxa_guard_acquire+0x14>
 8023faa:	7842      	ldrb	r2, [r0, #1]
 8023fac:	b102      	cbz	r2, 8023fb0 <__cxa_guard_acquire+0xe>
 8023fae:	deff      	udf	#255	@ 0xff
 8023fb0:	2001      	movs	r0, #1
 8023fb2:	7058      	strb	r0, [r3, #1]
 8023fb4:	4770      	bx	lr
 8023fb6:	2000      	movs	r0, #0
 8023fb8:	4770      	bx	lr

08023fba <__cxa_guard_release>:
 8023fba:	2301      	movs	r3, #1
 8023fbc:	6003      	str	r3, [r0, #0]
 8023fbe:	4770      	bx	lr

08023fc0 <__cxa_pure_virtual>:
 8023fc0:	b508      	push	{r3, lr}
 8023fc2:	f000 f80f 	bl	8023fe4 <_ZSt9terminatev>

08023fc6 <_ZdlPv>:
 8023fc6:	f000 bb8f 	b.w	80246e8 <free>

08023fca <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023fca:	b508      	push	{r3, lr}
 8023fcc:	4780      	blx	r0
 8023fce:	f000 fb58 	bl	8024682 <abort>
	...

08023fd4 <_ZSt13get_terminatev>:
 8023fd4:	4b02      	ldr	r3, [pc, #8]	@ (8023fe0 <_ZSt13get_terminatev+0xc>)
 8023fd6:	6818      	ldr	r0, [r3, #0]
 8023fd8:	f3bf 8f5b 	dmb	ish
 8023fdc:	4770      	bx	lr
 8023fde:	bf00      	nop
 8023fe0:	240000d8 	.word	0x240000d8

08023fe4 <_ZSt9terminatev>:
 8023fe4:	b508      	push	{r3, lr}
 8023fe6:	f7ff fff5 	bl	8023fd4 <_ZSt13get_terminatev>
 8023fea:	f7ff ffee 	bl	8023fca <_ZN10__cxxabiv111__terminateEPFvvE>

08023fee <atan2f>:
 8023fee:	f000 b9cf 	b.w	8024390 <__ieee754_atan2f>
	...

08023ff4 <sqrtf>:
 8023ff4:	b508      	push	{r3, lr}
 8023ff6:	ed2d 8b02 	vpush	{d8}
 8023ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8023ffe:	f000 f9c4 	bl	802438a <__ieee754_sqrtf>
 8024002:	eeb4 8a48 	vcmp.f32	s16, s16
 8024006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802400a:	d60c      	bvs.n	8024026 <sqrtf+0x32>
 802400c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802402c <sqrtf+0x38>
 8024010:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024018:	d505      	bpl.n	8024026 <sqrtf+0x32>
 802401a:	f000 fe89 	bl	8024d30 <__errno>
 802401e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8024022:	2321      	movs	r3, #33	@ 0x21
 8024024:	6003      	str	r3, [r0, #0]
 8024026:	ecbd 8b02 	vpop	{d8}
 802402a:	bd08      	pop	{r3, pc}
 802402c:	00000000 	.word	0x00000000

08024030 <sinf_poly>:
 8024030:	07cb      	lsls	r3, r1, #31
 8024032:	d412      	bmi.n	802405a <sinf_poly+0x2a>
 8024034:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024038:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802403c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024040:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024044:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024048:	ee21 1b05 	vmul.f64	d1, d1, d5
 802404c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024050:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024054:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024058:	4770      	bx	lr
 802405a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802405e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024062:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024066:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802406a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802406e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024072:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024076:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802407a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802407e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024082:	e7e5      	b.n	8024050 <sinf_poly+0x20>
 8024084:	0000      	movs	r0, r0
	...

08024088 <sinf>:
 8024088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802408a:	ee10 4a10 	vmov	r4, s0
 802408e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024092:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024096:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802409a:	eef0 7a40 	vmov.f32	s15, s0
 802409e:	d218      	bcs.n	80240d2 <sinf+0x4a>
 80240a0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80240a4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80240a8:	d20a      	bcs.n	80240c0 <sinf+0x38>
 80240aa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80240ae:	d103      	bne.n	80240b8 <sinf+0x30>
 80240b0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80240b4:	ed8d 1a01 	vstr	s2, [sp, #4]
 80240b8:	eeb0 0a67 	vmov.f32	s0, s15
 80240bc:	b003      	add	sp, #12
 80240be:	bd30      	pop	{r4, r5, pc}
 80240c0:	483b      	ldr	r0, [pc, #236]	@ (80241b0 <sinf+0x128>)
 80240c2:	eeb0 0b46 	vmov.f64	d0, d6
 80240c6:	2100      	movs	r1, #0
 80240c8:	b003      	add	sp, #12
 80240ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80240ce:	f7ff bfaf 	b.w	8024030 <sinf_poly>
 80240d2:	f240 422e 	movw	r2, #1070	@ 0x42e
 80240d6:	4293      	cmp	r3, r2
 80240d8:	d824      	bhi.n	8024124 <sinf+0x9c>
 80240da:	4b35      	ldr	r3, [pc, #212]	@ (80241b0 <sinf+0x128>)
 80240dc:	ed93 7b08 	vldr	d7, [r3, #32]
 80240e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80240e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80240e8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80240ec:	ee17 1a90 	vmov	r1, s15
 80240f0:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80240f4:	1609      	asrs	r1, r1, #24
 80240f6:	ee07 1a90 	vmov	s15, r1
 80240fa:	f001 0203 	and.w	r2, r1, #3
 80240fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024102:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8024106:	ed92 0b00 	vldr	d0, [r2]
 802410a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802410e:	f011 0f02 	tst.w	r1, #2
 8024112:	eea5 6b47 	vfms.f64	d6, d5, d7
 8024116:	bf08      	it	eq
 8024118:	4618      	moveq	r0, r3
 802411a:	ee26 1b06 	vmul.f64	d1, d6, d6
 802411e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8024122:	e7d1      	b.n	80240c8 <sinf+0x40>
 8024124:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024128:	d237      	bcs.n	802419a <sinf+0x112>
 802412a:	4922      	ldr	r1, [pc, #136]	@ (80241b4 <sinf+0x12c>)
 802412c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024130:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024134:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024138:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802413c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024140:	6a10      	ldr	r0, [r2, #32]
 8024142:	6912      	ldr	r2, [r2, #16]
 8024144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024148:	40ab      	lsls	r3, r5
 802414a:	fba0 5003 	umull	r5, r0, r0, r3
 802414e:	4359      	muls	r1, r3
 8024150:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024154:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024158:	0f9d      	lsrs	r5, r3, #30
 802415a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802415e:	1ac9      	subs	r1, r1, r3
 8024160:	f7dc fa9c 	bl	800069c <__aeabi_l2d>
 8024164:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024168:	4b11      	ldr	r3, [pc, #68]	@ (80241b0 <sinf+0x128>)
 802416a:	f004 0203 	and.w	r2, r4, #3
 802416e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024172:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80241a8 <sinf+0x120>
 8024176:	ed92 0b00 	vldr	d0, [r2]
 802417a:	ec41 0b17 	vmov	d7, r0, r1
 802417e:	f014 0f02 	tst.w	r4, #2
 8024182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024186:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802418a:	4629      	mov	r1, r5
 802418c:	bf08      	it	eq
 802418e:	4618      	moveq	r0, r3
 8024190:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024194:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024198:	e796      	b.n	80240c8 <sinf+0x40>
 802419a:	b003      	add	sp, #12
 802419c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80241a0:	f000 b8e4 	b.w	802436c <__math_invalidf>
 80241a4:	f3af 8000 	nop.w
 80241a8:	54442d18 	.word	0x54442d18
 80241ac:	3c1921fb 	.word	0x3c1921fb
 80241b0:	08028ff0 	.word	0x08028ff0
 80241b4:	08028f90 	.word	0x08028f90

080241b8 <sinf_poly>:
 80241b8:	07cb      	lsls	r3, r1, #31
 80241ba:	d412      	bmi.n	80241e2 <sinf_poly+0x2a>
 80241bc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80241c0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80241c4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80241c8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80241cc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80241d0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80241d4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80241d8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80241dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80241e0:	4770      	bx	lr
 80241e2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80241e6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80241ea:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80241ee:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80241f2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80241f6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80241fa:	eea1 0b06 	vfma.f64	d0, d1, d6
 80241fe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8024202:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024206:	eea5 0b06 	vfma.f64	d0, d5, d6
 802420a:	e7e5      	b.n	80241d8 <sinf_poly+0x20>
 802420c:	0000      	movs	r0, r0
	...

08024210 <cosf>:
 8024210:	b538      	push	{r3, r4, r5, lr}
 8024212:	ee10 4a10 	vmov	r4, s0
 8024216:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802421a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802421e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8024222:	d21f      	bcs.n	8024264 <cosf+0x54>
 8024224:	ee27 7b07 	vmul.f64	d7, d7, d7
 8024228:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802422c:	f0c0 8082 	bcc.w	8024334 <cosf+0x124>
 8024230:	ee27 4b07 	vmul.f64	d4, d7, d7
 8024234:	4b44      	ldr	r3, [pc, #272]	@ (8024348 <cosf+0x138>)
 8024236:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802423a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802423e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8024242:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024246:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802424a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802424e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8024252:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024256:	eea4 0b05 	vfma.f64	d0, d4, d5
 802425a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802425e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024262:	bd38      	pop	{r3, r4, r5, pc}
 8024264:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024268:	4293      	cmp	r3, r2
 802426a:	d829      	bhi.n	80242c0 <cosf+0xb0>
 802426c:	4b36      	ldr	r3, [pc, #216]	@ (8024348 <cosf+0x138>)
 802426e:	ed93 6b08 	vldr	d6, [r3, #32]
 8024272:	ee27 6b06 	vmul.f64	d6, d7, d6
 8024276:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802427a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802427e:	ee16 1a90 	vmov	r1, s13
 8024282:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024286:	1609      	asrs	r1, r1, #24
 8024288:	ee06 1a90 	vmov	s13, r1
 802428c:	f001 0203 	and.w	r2, r1, #3
 8024290:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024294:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024298:	ed92 0b00 	vldr	d0, [r2]
 802429c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80242a0:	f011 0f02 	tst.w	r1, #2
 80242a4:	f081 0101 	eor.w	r1, r1, #1
 80242a8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80242ac:	bf08      	it	eq
 80242ae:	4618      	moveq	r0, r3
 80242b0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80242b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80242b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80242bc:	f7ff bf7c 	b.w	80241b8 <sinf_poly>
 80242c0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80242c4:	d232      	bcs.n	802432c <cosf+0x11c>
 80242c6:	4921      	ldr	r1, [pc, #132]	@ (802434c <cosf+0x13c>)
 80242c8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80242cc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80242d0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80242d4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80242d8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80242dc:	6a10      	ldr	r0, [r2, #32]
 80242de:	6912      	ldr	r2, [r2, #16]
 80242e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80242e4:	40ab      	lsls	r3, r5
 80242e6:	fba0 5003 	umull	r5, r0, r0, r3
 80242ea:	4359      	muls	r1, r3
 80242ec:	fbe3 0102 	umlal	r0, r1, r3, r2
 80242f0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80242f4:	0f9d      	lsrs	r5, r3, #30
 80242f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80242fa:	1ac9      	subs	r1, r1, r3
 80242fc:	f7dc f9ce 	bl	800069c <__aeabi_l2d>
 8024300:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024304:	4b10      	ldr	r3, [pc, #64]	@ (8024348 <cosf+0x138>)
 8024306:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8024340 <cosf+0x130>
 802430a:	ec41 0b17 	vmov	d7, r0, r1
 802430e:	f004 0203 	and.w	r2, r4, #3
 8024312:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024316:	ed92 0b00 	vldr	d0, [r2]
 802431a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802431e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024322:	f014 0f02 	tst.w	r4, #2
 8024326:	f085 0101 	eor.w	r1, r5, #1
 802432a:	e7bf      	b.n	80242ac <cosf+0x9c>
 802432c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024330:	f000 b81c 	b.w	802436c <__math_invalidf>
 8024334:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024338:	e793      	b.n	8024262 <cosf+0x52>
 802433a:	bf00      	nop
 802433c:	f3af 8000 	nop.w
 8024340:	54442d18 	.word	0x54442d18
 8024344:	3c1921fb 	.word	0x3c1921fb
 8024348:	08028ff0 	.word	0x08028ff0
 802434c:	08028f90 	.word	0x08028f90

08024350 <with_errnof>:
 8024350:	b510      	push	{r4, lr}
 8024352:	ed2d 8b02 	vpush	{d8}
 8024356:	eeb0 8a40 	vmov.f32	s16, s0
 802435a:	4604      	mov	r4, r0
 802435c:	f000 fce8 	bl	8024d30 <__errno>
 8024360:	eeb0 0a48 	vmov.f32	s0, s16
 8024364:	ecbd 8b02 	vpop	{d8}
 8024368:	6004      	str	r4, [r0, #0]
 802436a:	bd10      	pop	{r4, pc}

0802436c <__math_invalidf>:
 802436c:	eef0 7a40 	vmov.f32	s15, s0
 8024370:	ee30 7a40 	vsub.f32	s14, s0, s0
 8024374:	eef4 7a67 	vcmp.f32	s15, s15
 8024378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802437c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8024380:	d602      	bvs.n	8024388 <__math_invalidf+0x1c>
 8024382:	2021      	movs	r0, #33	@ 0x21
 8024384:	f7ff bfe4 	b.w	8024350 <with_errnof>
 8024388:	4770      	bx	lr

0802438a <__ieee754_sqrtf>:
 802438a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802438e:	4770      	bx	lr

08024390 <__ieee754_atan2f>:
 8024390:	ee10 2a90 	vmov	r2, s1
 8024394:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8024398:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802439c:	b510      	push	{r4, lr}
 802439e:	eef0 7a40 	vmov.f32	s15, s0
 80243a2:	d806      	bhi.n	80243b2 <__ieee754_atan2f+0x22>
 80243a4:	ee10 0a10 	vmov	r0, s0
 80243a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80243ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80243b0:	d904      	bls.n	80243bc <__ieee754_atan2f+0x2c>
 80243b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80243b6:	eeb0 0a67 	vmov.f32	s0, s15
 80243ba:	bd10      	pop	{r4, pc}
 80243bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80243c0:	d103      	bne.n	80243ca <__ieee754_atan2f+0x3a>
 80243c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243c6:	f000 b881 	b.w	80244cc <atanf>
 80243ca:	1794      	asrs	r4, r2, #30
 80243cc:	f004 0402 	and.w	r4, r4, #2
 80243d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80243d4:	b93b      	cbnz	r3, 80243e6 <__ieee754_atan2f+0x56>
 80243d6:	2c02      	cmp	r4, #2
 80243d8:	d05c      	beq.n	8024494 <__ieee754_atan2f+0x104>
 80243da:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80244a8 <__ieee754_atan2f+0x118>
 80243de:	2c03      	cmp	r4, #3
 80243e0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80243e4:	e7e7      	b.n	80243b6 <__ieee754_atan2f+0x26>
 80243e6:	b939      	cbnz	r1, 80243f8 <__ieee754_atan2f+0x68>
 80243e8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80244ac <__ieee754_atan2f+0x11c>
 80243ec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80244b0 <__ieee754_atan2f+0x120>
 80243f0:	2800      	cmp	r0, #0
 80243f2:	fe67 7a27 	vselge.f32	s15, s14, s15
 80243f6:	e7de      	b.n	80243b6 <__ieee754_atan2f+0x26>
 80243f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80243fc:	d110      	bne.n	8024420 <__ieee754_atan2f+0x90>
 80243fe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024402:	f104 34ff 	add.w	r4, r4, #4294967295
 8024406:	d107      	bne.n	8024418 <__ieee754_atan2f+0x88>
 8024408:	2c02      	cmp	r4, #2
 802440a:	d846      	bhi.n	802449a <__ieee754_atan2f+0x10a>
 802440c:	4b29      	ldr	r3, [pc, #164]	@ (80244b4 <__ieee754_atan2f+0x124>)
 802440e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024412:	edd3 7a00 	vldr	s15, [r3]
 8024416:	e7ce      	b.n	80243b6 <__ieee754_atan2f+0x26>
 8024418:	2c02      	cmp	r4, #2
 802441a:	d841      	bhi.n	80244a0 <__ieee754_atan2f+0x110>
 802441c:	4b26      	ldr	r3, [pc, #152]	@ (80244b8 <__ieee754_atan2f+0x128>)
 802441e:	e7f6      	b.n	802440e <__ieee754_atan2f+0x7e>
 8024420:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024424:	d0e0      	beq.n	80243e8 <__ieee754_atan2f+0x58>
 8024426:	1a5b      	subs	r3, r3, r1
 8024428:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802442c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024430:	da1a      	bge.n	8024468 <__ieee754_atan2f+0xd8>
 8024432:	2a00      	cmp	r2, #0
 8024434:	da01      	bge.n	802443a <__ieee754_atan2f+0xaa>
 8024436:	313c      	adds	r1, #60	@ 0x3c
 8024438:	db19      	blt.n	802446e <__ieee754_atan2f+0xde>
 802443a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802443e:	f000 f919 	bl	8024674 <fabsf>
 8024442:	f000 f843 	bl	80244cc <atanf>
 8024446:	eef0 7a40 	vmov.f32	s15, s0
 802444a:	2c01      	cmp	r4, #1
 802444c:	d012      	beq.n	8024474 <__ieee754_atan2f+0xe4>
 802444e:	2c02      	cmp	r4, #2
 8024450:	d017      	beq.n	8024482 <__ieee754_atan2f+0xf2>
 8024452:	2c00      	cmp	r4, #0
 8024454:	d0af      	beq.n	80243b6 <__ieee754_atan2f+0x26>
 8024456:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80244bc <__ieee754_atan2f+0x12c>
 802445a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802445e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80244c0 <__ieee754_atan2f+0x130>
 8024462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024466:	e7a6      	b.n	80243b6 <__ieee754_atan2f+0x26>
 8024468:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80244b0 <__ieee754_atan2f+0x120>
 802446c:	e7ed      	b.n	802444a <__ieee754_atan2f+0xba>
 802446e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80244c4 <__ieee754_atan2f+0x134>
 8024472:	e7ea      	b.n	802444a <__ieee754_atan2f+0xba>
 8024474:	ee17 3a90 	vmov	r3, s15
 8024478:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802447c:	ee07 3a90 	vmov	s15, r3
 8024480:	e799      	b.n	80243b6 <__ieee754_atan2f+0x26>
 8024482:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80244bc <__ieee754_atan2f+0x12c>
 8024486:	ee77 7a87 	vadd.f32	s15, s15, s14
 802448a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80244c0 <__ieee754_atan2f+0x130>
 802448e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024492:	e790      	b.n	80243b6 <__ieee754_atan2f+0x26>
 8024494:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80244c0 <__ieee754_atan2f+0x130>
 8024498:	e78d      	b.n	80243b6 <__ieee754_atan2f+0x26>
 802449a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80244c8 <__ieee754_atan2f+0x138>
 802449e:	e78a      	b.n	80243b6 <__ieee754_atan2f+0x26>
 80244a0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80244c4 <__ieee754_atan2f+0x134>
 80244a4:	e787      	b.n	80243b6 <__ieee754_atan2f+0x26>
 80244a6:	bf00      	nop
 80244a8:	c0490fdb 	.word	0xc0490fdb
 80244ac:	bfc90fdb 	.word	0xbfc90fdb
 80244b0:	3fc90fdb 	.word	0x3fc90fdb
 80244b4:	080290dc 	.word	0x080290dc
 80244b8:	080290d0 	.word	0x080290d0
 80244bc:	33bbbd2e 	.word	0x33bbbd2e
 80244c0:	40490fdb 	.word	0x40490fdb
 80244c4:	00000000 	.word	0x00000000
 80244c8:	3f490fdb 	.word	0x3f490fdb

080244cc <atanf>:
 80244cc:	b538      	push	{r3, r4, r5, lr}
 80244ce:	ee10 5a10 	vmov	r5, s0
 80244d2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80244d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80244da:	eef0 7a40 	vmov.f32	s15, s0
 80244de:	d30f      	bcc.n	8024500 <atanf+0x34>
 80244e0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80244e4:	d904      	bls.n	80244f0 <atanf+0x24>
 80244e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80244ea:	eeb0 0a67 	vmov.f32	s0, s15
 80244ee:	bd38      	pop	{r3, r4, r5, pc}
 80244f0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8024628 <atanf+0x15c>
 80244f4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802462c <atanf+0x160>
 80244f8:	2d00      	cmp	r5, #0
 80244fa:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80244fe:	e7f4      	b.n	80244ea <atanf+0x1e>
 8024500:	4b4b      	ldr	r3, [pc, #300]	@ (8024630 <atanf+0x164>)
 8024502:	429c      	cmp	r4, r3
 8024504:	d810      	bhi.n	8024528 <atanf+0x5c>
 8024506:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802450a:	d20a      	bcs.n	8024522 <atanf+0x56>
 802450c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8024634 <atanf+0x168>
 8024510:	ee30 7a07 	vadd.f32	s14, s0, s14
 8024514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024518:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024520:	dce3      	bgt.n	80244ea <atanf+0x1e>
 8024522:	f04f 33ff 	mov.w	r3, #4294967295
 8024526:	e013      	b.n	8024550 <atanf+0x84>
 8024528:	f000 f8a4 	bl	8024674 <fabsf>
 802452c:	4b42      	ldr	r3, [pc, #264]	@ (8024638 <atanf+0x16c>)
 802452e:	429c      	cmp	r4, r3
 8024530:	d84f      	bhi.n	80245d2 <atanf+0x106>
 8024532:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8024536:	429c      	cmp	r4, r3
 8024538:	d841      	bhi.n	80245be <atanf+0xf2>
 802453a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802453e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8024542:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024546:	2300      	movs	r3, #0
 8024548:	ee30 0a27 	vadd.f32	s0, s0, s15
 802454c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024550:	1c5a      	adds	r2, r3, #1
 8024552:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8024556:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802463c <atanf+0x170>
 802455a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8024640 <atanf+0x174>
 802455e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8024644 <atanf+0x178>
 8024562:	ee66 6a06 	vmul.f32	s13, s12, s12
 8024566:	eee6 5a87 	vfma.f32	s11, s13, s14
 802456a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8024648 <atanf+0x17c>
 802456e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024572:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802464c <atanf+0x180>
 8024576:	eee7 5a26 	vfma.f32	s11, s14, s13
 802457a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8024650 <atanf+0x184>
 802457e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024582:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8024654 <atanf+0x188>
 8024586:	eee7 5a26 	vfma.f32	s11, s14, s13
 802458a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024658 <atanf+0x18c>
 802458e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8024592:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802465c <atanf+0x190>
 8024596:	eea5 7a26 	vfma.f32	s14, s10, s13
 802459a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8024660 <atanf+0x194>
 802459e:	eea7 5a26 	vfma.f32	s10, s14, s13
 80245a2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024664 <atanf+0x198>
 80245a6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80245aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80245ae:	eea5 7a86 	vfma.f32	s14, s11, s12
 80245b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80245b6:	d121      	bne.n	80245fc <atanf+0x130>
 80245b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80245bc:	e795      	b.n	80244ea <atanf+0x1e>
 80245be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80245c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80245c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80245ca:	2301      	movs	r3, #1
 80245cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80245d0:	e7be      	b.n	8024550 <atanf+0x84>
 80245d2:	4b25      	ldr	r3, [pc, #148]	@ (8024668 <atanf+0x19c>)
 80245d4:	429c      	cmp	r4, r3
 80245d6:	d80b      	bhi.n	80245f0 <atanf+0x124>
 80245d8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80245dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80245e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80245e4:	2302      	movs	r3, #2
 80245e6:	ee70 6a67 	vsub.f32	s13, s0, s15
 80245ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80245ee:	e7af      	b.n	8024550 <atanf+0x84>
 80245f0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80245f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80245f8:	2303      	movs	r3, #3
 80245fa:	e7a9      	b.n	8024550 <atanf+0x84>
 80245fc:	4a1b      	ldr	r2, [pc, #108]	@ (802466c <atanf+0x1a0>)
 80245fe:	491c      	ldr	r1, [pc, #112]	@ (8024670 <atanf+0x1a4>)
 8024600:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8024604:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024608:	edd3 6a00 	vldr	s13, [r3]
 802460c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8024610:	2d00      	cmp	r5, #0
 8024612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024616:	edd2 7a00 	vldr	s15, [r2]
 802461a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802461e:	bfb8      	it	lt
 8024620:	eef1 7a67 	vneglt.f32	s15, s15
 8024624:	e761      	b.n	80244ea <atanf+0x1e>
 8024626:	bf00      	nop
 8024628:	bfc90fdb 	.word	0xbfc90fdb
 802462c:	3fc90fdb 	.word	0x3fc90fdb
 8024630:	3edfffff 	.word	0x3edfffff
 8024634:	7149f2ca 	.word	0x7149f2ca
 8024638:	3f97ffff 	.word	0x3f97ffff
 802463c:	3c8569d7 	.word	0x3c8569d7
 8024640:	3d4bda59 	.word	0x3d4bda59
 8024644:	bd6ef16b 	.word	0xbd6ef16b
 8024648:	3d886b35 	.word	0x3d886b35
 802464c:	3dba2e6e 	.word	0x3dba2e6e
 8024650:	3e124925 	.word	0x3e124925
 8024654:	3eaaaaab 	.word	0x3eaaaaab
 8024658:	bd15a221 	.word	0xbd15a221
 802465c:	bd9d8795 	.word	0xbd9d8795
 8024660:	bde38e38 	.word	0xbde38e38
 8024664:	be4ccccd 	.word	0xbe4ccccd
 8024668:	401bffff 	.word	0x401bffff
 802466c:	080290f8 	.word	0x080290f8
 8024670:	080290e8 	.word	0x080290e8

08024674 <fabsf>:
 8024674:	ee10 3a10 	vmov	r3, s0
 8024678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802467c:	ee00 3a10 	vmov	s0, r3
 8024680:	4770      	bx	lr

08024682 <abort>:
 8024682:	b508      	push	{r3, lr}
 8024684:	2006      	movs	r0, #6
 8024686:	f000 fae1 	bl	8024c4c <raise>
 802468a:	2001      	movs	r0, #1
 802468c:	f7dd f92a 	bl	80018e4 <_exit>

08024690 <__assert_func>:
 8024690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024692:	4614      	mov	r4, r2
 8024694:	461a      	mov	r2, r3
 8024696:	4b09      	ldr	r3, [pc, #36]	@ (80246bc <__assert_func+0x2c>)
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	4605      	mov	r5, r0
 802469c:	68d8      	ldr	r0, [r3, #12]
 802469e:	b14c      	cbz	r4, 80246b4 <__assert_func+0x24>
 80246a0:	4b07      	ldr	r3, [pc, #28]	@ (80246c0 <__assert_func+0x30>)
 80246a2:	9100      	str	r1, [sp, #0]
 80246a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80246a8:	4906      	ldr	r1, [pc, #24]	@ (80246c4 <__assert_func+0x34>)
 80246aa:	462b      	mov	r3, r5
 80246ac:	f000 f984 	bl	80249b8 <fiprintf>
 80246b0:	f7ff ffe7 	bl	8024682 <abort>
 80246b4:	4b04      	ldr	r3, [pc, #16]	@ (80246c8 <__assert_func+0x38>)
 80246b6:	461c      	mov	r4, r3
 80246b8:	e7f3      	b.n	80246a2 <__assert_func+0x12>
 80246ba:	bf00      	nop
 80246bc:	240000e8 	.word	0x240000e8
 80246c0:	0802747f 	.word	0x0802747f
 80246c4:	0802748c 	.word	0x0802748c
 80246c8:	080274ba 	.word	0x080274ba

080246cc <atexit>:
 80246cc:	2300      	movs	r3, #0
 80246ce:	4601      	mov	r1, r0
 80246d0:	461a      	mov	r2, r3
 80246d2:	4618      	mov	r0, r3
 80246d4:	f000 bb68 	b.w	8024da8 <__register_exitproc>

080246d8 <malloc>:
 80246d8:	4b02      	ldr	r3, [pc, #8]	@ (80246e4 <malloc+0xc>)
 80246da:	4601      	mov	r1, r0
 80246dc:	6818      	ldr	r0, [r3, #0]
 80246de:	f000 b82d 	b.w	802473c <_malloc_r>
 80246e2:	bf00      	nop
 80246e4:	240000e8 	.word	0x240000e8

080246e8 <free>:
 80246e8:	4b02      	ldr	r3, [pc, #8]	@ (80246f4 <free+0xc>)
 80246ea:	4601      	mov	r1, r0
 80246ec:	6818      	ldr	r0, [r3, #0]
 80246ee:	f000 bbb7 	b.w	8024e60 <_free_r>
 80246f2:	bf00      	nop
 80246f4:	240000e8 	.word	0x240000e8

080246f8 <sbrk_aligned>:
 80246f8:	b570      	push	{r4, r5, r6, lr}
 80246fa:	4e0f      	ldr	r6, [pc, #60]	@ (8024738 <sbrk_aligned+0x40>)
 80246fc:	460c      	mov	r4, r1
 80246fe:	6831      	ldr	r1, [r6, #0]
 8024700:	4605      	mov	r5, r0
 8024702:	b911      	cbnz	r1, 802470a <sbrk_aligned+0x12>
 8024704:	f000 faf2 	bl	8024cec <_sbrk_r>
 8024708:	6030      	str	r0, [r6, #0]
 802470a:	4621      	mov	r1, r4
 802470c:	4628      	mov	r0, r5
 802470e:	f000 faed 	bl	8024cec <_sbrk_r>
 8024712:	1c43      	adds	r3, r0, #1
 8024714:	d103      	bne.n	802471e <sbrk_aligned+0x26>
 8024716:	f04f 34ff 	mov.w	r4, #4294967295
 802471a:	4620      	mov	r0, r4
 802471c:	bd70      	pop	{r4, r5, r6, pc}
 802471e:	1cc4      	adds	r4, r0, #3
 8024720:	f024 0403 	bic.w	r4, r4, #3
 8024724:	42a0      	cmp	r0, r4
 8024726:	d0f8      	beq.n	802471a <sbrk_aligned+0x22>
 8024728:	1a21      	subs	r1, r4, r0
 802472a:	4628      	mov	r0, r5
 802472c:	f000 fade 	bl	8024cec <_sbrk_r>
 8024730:	3001      	adds	r0, #1
 8024732:	d1f2      	bne.n	802471a <sbrk_aligned+0x22>
 8024734:	e7ef      	b.n	8024716 <sbrk_aligned+0x1e>
 8024736:	bf00      	nop
 8024738:	24025df0 	.word	0x24025df0

0802473c <_malloc_r>:
 802473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024740:	1ccd      	adds	r5, r1, #3
 8024742:	f025 0503 	bic.w	r5, r5, #3
 8024746:	3508      	adds	r5, #8
 8024748:	2d0c      	cmp	r5, #12
 802474a:	bf38      	it	cc
 802474c:	250c      	movcc	r5, #12
 802474e:	2d00      	cmp	r5, #0
 8024750:	4606      	mov	r6, r0
 8024752:	db01      	blt.n	8024758 <_malloc_r+0x1c>
 8024754:	42a9      	cmp	r1, r5
 8024756:	d904      	bls.n	8024762 <_malloc_r+0x26>
 8024758:	230c      	movs	r3, #12
 802475a:	6033      	str	r3, [r6, #0]
 802475c:	2000      	movs	r0, #0
 802475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024838 <_malloc_r+0xfc>
 8024766:	f000 f869 	bl	802483c <__malloc_lock>
 802476a:	f8d8 3000 	ldr.w	r3, [r8]
 802476e:	461c      	mov	r4, r3
 8024770:	bb44      	cbnz	r4, 80247c4 <_malloc_r+0x88>
 8024772:	4629      	mov	r1, r5
 8024774:	4630      	mov	r0, r6
 8024776:	f7ff ffbf 	bl	80246f8 <sbrk_aligned>
 802477a:	1c43      	adds	r3, r0, #1
 802477c:	4604      	mov	r4, r0
 802477e:	d158      	bne.n	8024832 <_malloc_r+0xf6>
 8024780:	f8d8 4000 	ldr.w	r4, [r8]
 8024784:	4627      	mov	r7, r4
 8024786:	2f00      	cmp	r7, #0
 8024788:	d143      	bne.n	8024812 <_malloc_r+0xd6>
 802478a:	2c00      	cmp	r4, #0
 802478c:	d04b      	beq.n	8024826 <_malloc_r+0xea>
 802478e:	6823      	ldr	r3, [r4, #0]
 8024790:	4639      	mov	r1, r7
 8024792:	4630      	mov	r0, r6
 8024794:	eb04 0903 	add.w	r9, r4, r3
 8024798:	f000 faa8 	bl	8024cec <_sbrk_r>
 802479c:	4581      	cmp	r9, r0
 802479e:	d142      	bne.n	8024826 <_malloc_r+0xea>
 80247a0:	6821      	ldr	r1, [r4, #0]
 80247a2:	1a6d      	subs	r5, r5, r1
 80247a4:	4629      	mov	r1, r5
 80247a6:	4630      	mov	r0, r6
 80247a8:	f7ff ffa6 	bl	80246f8 <sbrk_aligned>
 80247ac:	3001      	adds	r0, #1
 80247ae:	d03a      	beq.n	8024826 <_malloc_r+0xea>
 80247b0:	6823      	ldr	r3, [r4, #0]
 80247b2:	442b      	add	r3, r5
 80247b4:	6023      	str	r3, [r4, #0]
 80247b6:	f8d8 3000 	ldr.w	r3, [r8]
 80247ba:	685a      	ldr	r2, [r3, #4]
 80247bc:	bb62      	cbnz	r2, 8024818 <_malloc_r+0xdc>
 80247be:	f8c8 7000 	str.w	r7, [r8]
 80247c2:	e00f      	b.n	80247e4 <_malloc_r+0xa8>
 80247c4:	6822      	ldr	r2, [r4, #0]
 80247c6:	1b52      	subs	r2, r2, r5
 80247c8:	d420      	bmi.n	802480c <_malloc_r+0xd0>
 80247ca:	2a0b      	cmp	r2, #11
 80247cc:	d917      	bls.n	80247fe <_malloc_r+0xc2>
 80247ce:	1961      	adds	r1, r4, r5
 80247d0:	42a3      	cmp	r3, r4
 80247d2:	6025      	str	r5, [r4, #0]
 80247d4:	bf18      	it	ne
 80247d6:	6059      	strne	r1, [r3, #4]
 80247d8:	6863      	ldr	r3, [r4, #4]
 80247da:	bf08      	it	eq
 80247dc:	f8c8 1000 	streq.w	r1, [r8]
 80247e0:	5162      	str	r2, [r4, r5]
 80247e2:	604b      	str	r3, [r1, #4]
 80247e4:	4630      	mov	r0, r6
 80247e6:	f000 f82f 	bl	8024848 <__malloc_unlock>
 80247ea:	f104 000b 	add.w	r0, r4, #11
 80247ee:	1d23      	adds	r3, r4, #4
 80247f0:	f020 0007 	bic.w	r0, r0, #7
 80247f4:	1ac2      	subs	r2, r0, r3
 80247f6:	bf1c      	itt	ne
 80247f8:	1a1b      	subne	r3, r3, r0
 80247fa:	50a3      	strne	r3, [r4, r2]
 80247fc:	e7af      	b.n	802475e <_malloc_r+0x22>
 80247fe:	6862      	ldr	r2, [r4, #4]
 8024800:	42a3      	cmp	r3, r4
 8024802:	bf0c      	ite	eq
 8024804:	f8c8 2000 	streq.w	r2, [r8]
 8024808:	605a      	strne	r2, [r3, #4]
 802480a:	e7eb      	b.n	80247e4 <_malloc_r+0xa8>
 802480c:	4623      	mov	r3, r4
 802480e:	6864      	ldr	r4, [r4, #4]
 8024810:	e7ae      	b.n	8024770 <_malloc_r+0x34>
 8024812:	463c      	mov	r4, r7
 8024814:	687f      	ldr	r7, [r7, #4]
 8024816:	e7b6      	b.n	8024786 <_malloc_r+0x4a>
 8024818:	461a      	mov	r2, r3
 802481a:	685b      	ldr	r3, [r3, #4]
 802481c:	42a3      	cmp	r3, r4
 802481e:	d1fb      	bne.n	8024818 <_malloc_r+0xdc>
 8024820:	2300      	movs	r3, #0
 8024822:	6053      	str	r3, [r2, #4]
 8024824:	e7de      	b.n	80247e4 <_malloc_r+0xa8>
 8024826:	230c      	movs	r3, #12
 8024828:	6033      	str	r3, [r6, #0]
 802482a:	4630      	mov	r0, r6
 802482c:	f000 f80c 	bl	8024848 <__malloc_unlock>
 8024830:	e794      	b.n	802475c <_malloc_r+0x20>
 8024832:	6005      	str	r5, [r0, #0]
 8024834:	e7d6      	b.n	80247e4 <_malloc_r+0xa8>
 8024836:	bf00      	nop
 8024838:	24025df4 	.word	0x24025df4

0802483c <__malloc_lock>:
 802483c:	4801      	ldr	r0, [pc, #4]	@ (8024844 <__malloc_lock+0x8>)
 802483e:	f000 baa2 	b.w	8024d86 <__retarget_lock_acquire_recursive>
 8024842:	bf00      	nop
 8024844:	24025f38 	.word	0x24025f38

08024848 <__malloc_unlock>:
 8024848:	4801      	ldr	r0, [pc, #4]	@ (8024850 <__malloc_unlock+0x8>)
 802484a:	f000 ba9d 	b.w	8024d88 <__retarget_lock_release_recursive>
 802484e:	bf00      	nop
 8024850:	24025f38 	.word	0x24025f38

08024854 <__cxa_atexit>:
 8024854:	b510      	push	{r4, lr}
 8024856:	4604      	mov	r4, r0
 8024858:	4804      	ldr	r0, [pc, #16]	@ (802486c <__cxa_atexit+0x18>)
 802485a:	4613      	mov	r3, r2
 802485c:	b120      	cbz	r0, 8024868 <__cxa_atexit+0x14>
 802485e:	460a      	mov	r2, r1
 8024860:	2002      	movs	r0, #2
 8024862:	4621      	mov	r1, r4
 8024864:	f000 faa0 	bl	8024da8 <__register_exitproc>
 8024868:	bd10      	pop	{r4, pc}
 802486a:	bf00      	nop
 802486c:	08024da9 	.word	0x08024da9

08024870 <std>:
 8024870:	2300      	movs	r3, #0
 8024872:	b510      	push	{r4, lr}
 8024874:	4604      	mov	r4, r0
 8024876:	e9c0 3300 	strd	r3, r3, [r0]
 802487a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802487e:	6083      	str	r3, [r0, #8]
 8024880:	8181      	strh	r1, [r0, #12]
 8024882:	6643      	str	r3, [r0, #100]	@ 0x64
 8024884:	81c2      	strh	r2, [r0, #14]
 8024886:	6183      	str	r3, [r0, #24]
 8024888:	4619      	mov	r1, r3
 802488a:	2208      	movs	r2, #8
 802488c:	305c      	adds	r0, #92	@ 0x5c
 802488e:	f000 f99b 	bl	8024bc8 <memset>
 8024892:	4b0d      	ldr	r3, [pc, #52]	@ (80248c8 <std+0x58>)
 8024894:	6263      	str	r3, [r4, #36]	@ 0x24
 8024896:	4b0d      	ldr	r3, [pc, #52]	@ (80248cc <std+0x5c>)
 8024898:	62a3      	str	r3, [r4, #40]	@ 0x28
 802489a:	4b0d      	ldr	r3, [pc, #52]	@ (80248d0 <std+0x60>)
 802489c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802489e:	4b0d      	ldr	r3, [pc, #52]	@ (80248d4 <std+0x64>)
 80248a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80248a2:	4b0d      	ldr	r3, [pc, #52]	@ (80248d8 <std+0x68>)
 80248a4:	6224      	str	r4, [r4, #32]
 80248a6:	429c      	cmp	r4, r3
 80248a8:	d006      	beq.n	80248b8 <std+0x48>
 80248aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80248ae:	4294      	cmp	r4, r2
 80248b0:	d002      	beq.n	80248b8 <std+0x48>
 80248b2:	33d0      	adds	r3, #208	@ 0xd0
 80248b4:	429c      	cmp	r4, r3
 80248b6:	d105      	bne.n	80248c4 <std+0x54>
 80248b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80248bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248c0:	f000 ba60 	b.w	8024d84 <__retarget_lock_init_recursive>
 80248c4:	bd10      	pop	{r4, pc}
 80248c6:	bf00      	nop
 80248c8:	08024a19 	.word	0x08024a19
 80248cc:	08024a3b 	.word	0x08024a3b
 80248d0:	08024a73 	.word	0x08024a73
 80248d4:	08024a97 	.word	0x08024a97
 80248d8:	24025df8 	.word	0x24025df8

080248dc <stdio_exit_handler>:
 80248dc:	4a02      	ldr	r2, [pc, #8]	@ (80248e8 <stdio_exit_handler+0xc>)
 80248de:	4903      	ldr	r1, [pc, #12]	@ (80248ec <stdio_exit_handler+0x10>)
 80248e0:	4803      	ldr	r0, [pc, #12]	@ (80248f0 <stdio_exit_handler+0x14>)
 80248e2:	f000 b87b 	b.w	80249dc <_fwalk_sglue>
 80248e6:	bf00      	nop
 80248e8:	240000dc 	.word	0x240000dc
 80248ec:	08025599 	.word	0x08025599
 80248f0:	240000ec 	.word	0x240000ec

080248f4 <cleanup_stdio>:
 80248f4:	6841      	ldr	r1, [r0, #4]
 80248f6:	4b0c      	ldr	r3, [pc, #48]	@ (8024928 <cleanup_stdio+0x34>)
 80248f8:	4299      	cmp	r1, r3
 80248fa:	b510      	push	{r4, lr}
 80248fc:	4604      	mov	r4, r0
 80248fe:	d001      	beq.n	8024904 <cleanup_stdio+0x10>
 8024900:	f000 fe4a 	bl	8025598 <_fflush_r>
 8024904:	68a1      	ldr	r1, [r4, #8]
 8024906:	4b09      	ldr	r3, [pc, #36]	@ (802492c <cleanup_stdio+0x38>)
 8024908:	4299      	cmp	r1, r3
 802490a:	d002      	beq.n	8024912 <cleanup_stdio+0x1e>
 802490c:	4620      	mov	r0, r4
 802490e:	f000 fe43 	bl	8025598 <_fflush_r>
 8024912:	68e1      	ldr	r1, [r4, #12]
 8024914:	4b06      	ldr	r3, [pc, #24]	@ (8024930 <cleanup_stdio+0x3c>)
 8024916:	4299      	cmp	r1, r3
 8024918:	d004      	beq.n	8024924 <cleanup_stdio+0x30>
 802491a:	4620      	mov	r0, r4
 802491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024920:	f000 be3a 	b.w	8025598 <_fflush_r>
 8024924:	bd10      	pop	{r4, pc}
 8024926:	bf00      	nop
 8024928:	24025df8 	.word	0x24025df8
 802492c:	24025e60 	.word	0x24025e60
 8024930:	24025ec8 	.word	0x24025ec8

08024934 <global_stdio_init.part.0>:
 8024934:	b510      	push	{r4, lr}
 8024936:	4b0b      	ldr	r3, [pc, #44]	@ (8024964 <global_stdio_init.part.0+0x30>)
 8024938:	4c0b      	ldr	r4, [pc, #44]	@ (8024968 <global_stdio_init.part.0+0x34>)
 802493a:	4a0c      	ldr	r2, [pc, #48]	@ (802496c <global_stdio_init.part.0+0x38>)
 802493c:	601a      	str	r2, [r3, #0]
 802493e:	4620      	mov	r0, r4
 8024940:	2200      	movs	r2, #0
 8024942:	2104      	movs	r1, #4
 8024944:	f7ff ff94 	bl	8024870 <std>
 8024948:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802494c:	2201      	movs	r2, #1
 802494e:	2109      	movs	r1, #9
 8024950:	f7ff ff8e 	bl	8024870 <std>
 8024954:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024958:	2202      	movs	r2, #2
 802495a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802495e:	2112      	movs	r1, #18
 8024960:	f7ff bf86 	b.w	8024870 <std>
 8024964:	24025f30 	.word	0x24025f30
 8024968:	24025df8 	.word	0x24025df8
 802496c:	080248dd 	.word	0x080248dd

08024970 <__sfp_lock_acquire>:
 8024970:	4801      	ldr	r0, [pc, #4]	@ (8024978 <__sfp_lock_acquire+0x8>)
 8024972:	f000 ba08 	b.w	8024d86 <__retarget_lock_acquire_recursive>
 8024976:	bf00      	nop
 8024978:	24025f3a 	.word	0x24025f3a

0802497c <__sfp_lock_release>:
 802497c:	4801      	ldr	r0, [pc, #4]	@ (8024984 <__sfp_lock_release+0x8>)
 802497e:	f000 ba03 	b.w	8024d88 <__retarget_lock_release_recursive>
 8024982:	bf00      	nop
 8024984:	24025f3a 	.word	0x24025f3a

08024988 <__sinit>:
 8024988:	b510      	push	{r4, lr}
 802498a:	4604      	mov	r4, r0
 802498c:	f7ff fff0 	bl	8024970 <__sfp_lock_acquire>
 8024990:	6a23      	ldr	r3, [r4, #32]
 8024992:	b11b      	cbz	r3, 802499c <__sinit+0x14>
 8024994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024998:	f7ff bff0 	b.w	802497c <__sfp_lock_release>
 802499c:	4b04      	ldr	r3, [pc, #16]	@ (80249b0 <__sinit+0x28>)
 802499e:	6223      	str	r3, [r4, #32]
 80249a0:	4b04      	ldr	r3, [pc, #16]	@ (80249b4 <__sinit+0x2c>)
 80249a2:	681b      	ldr	r3, [r3, #0]
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	d1f5      	bne.n	8024994 <__sinit+0xc>
 80249a8:	f7ff ffc4 	bl	8024934 <global_stdio_init.part.0>
 80249ac:	e7f2      	b.n	8024994 <__sinit+0xc>
 80249ae:	bf00      	nop
 80249b0:	080248f5 	.word	0x080248f5
 80249b4:	24025f30 	.word	0x24025f30

080249b8 <fiprintf>:
 80249b8:	b40e      	push	{r1, r2, r3}
 80249ba:	b503      	push	{r0, r1, lr}
 80249bc:	4601      	mov	r1, r0
 80249be:	ab03      	add	r3, sp, #12
 80249c0:	4805      	ldr	r0, [pc, #20]	@ (80249d8 <fiprintf+0x20>)
 80249c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80249c6:	6800      	ldr	r0, [r0, #0]
 80249c8:	9301      	str	r3, [sp, #4]
 80249ca:	f000 fabd 	bl	8024f48 <_vfiprintf_r>
 80249ce:	b002      	add	sp, #8
 80249d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80249d4:	b003      	add	sp, #12
 80249d6:	4770      	bx	lr
 80249d8:	240000e8 	.word	0x240000e8

080249dc <_fwalk_sglue>:
 80249dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80249e0:	4607      	mov	r7, r0
 80249e2:	4688      	mov	r8, r1
 80249e4:	4614      	mov	r4, r2
 80249e6:	2600      	movs	r6, #0
 80249e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80249ec:	f1b9 0901 	subs.w	r9, r9, #1
 80249f0:	d505      	bpl.n	80249fe <_fwalk_sglue+0x22>
 80249f2:	6824      	ldr	r4, [r4, #0]
 80249f4:	2c00      	cmp	r4, #0
 80249f6:	d1f7      	bne.n	80249e8 <_fwalk_sglue+0xc>
 80249f8:	4630      	mov	r0, r6
 80249fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80249fe:	89ab      	ldrh	r3, [r5, #12]
 8024a00:	2b01      	cmp	r3, #1
 8024a02:	d907      	bls.n	8024a14 <_fwalk_sglue+0x38>
 8024a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024a08:	3301      	adds	r3, #1
 8024a0a:	d003      	beq.n	8024a14 <_fwalk_sglue+0x38>
 8024a0c:	4629      	mov	r1, r5
 8024a0e:	4638      	mov	r0, r7
 8024a10:	47c0      	blx	r8
 8024a12:	4306      	orrs	r6, r0
 8024a14:	3568      	adds	r5, #104	@ 0x68
 8024a16:	e7e9      	b.n	80249ec <_fwalk_sglue+0x10>

08024a18 <__sread>:
 8024a18:	b510      	push	{r4, lr}
 8024a1a:	460c      	mov	r4, r1
 8024a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a20:	f000 f93e 	bl	8024ca0 <_read_r>
 8024a24:	2800      	cmp	r0, #0
 8024a26:	bfab      	itete	ge
 8024a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8024a2c:	181b      	addge	r3, r3, r0
 8024a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024a32:	bfac      	ite	ge
 8024a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024a36:	81a3      	strhlt	r3, [r4, #12]
 8024a38:	bd10      	pop	{r4, pc}

08024a3a <__swrite>:
 8024a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a3e:	461f      	mov	r7, r3
 8024a40:	898b      	ldrh	r3, [r1, #12]
 8024a42:	05db      	lsls	r3, r3, #23
 8024a44:	4605      	mov	r5, r0
 8024a46:	460c      	mov	r4, r1
 8024a48:	4616      	mov	r6, r2
 8024a4a:	d505      	bpl.n	8024a58 <__swrite+0x1e>
 8024a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a50:	2302      	movs	r3, #2
 8024a52:	2200      	movs	r2, #0
 8024a54:	f000 f912 	bl	8024c7c <_lseek_r>
 8024a58:	89a3      	ldrh	r3, [r4, #12]
 8024a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024a62:	81a3      	strh	r3, [r4, #12]
 8024a64:	4632      	mov	r2, r6
 8024a66:	463b      	mov	r3, r7
 8024a68:	4628      	mov	r0, r5
 8024a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024a6e:	f000 b94d 	b.w	8024d0c <_write_r>

08024a72 <__sseek>:
 8024a72:	b510      	push	{r4, lr}
 8024a74:	460c      	mov	r4, r1
 8024a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a7a:	f000 f8ff 	bl	8024c7c <_lseek_r>
 8024a7e:	1c43      	adds	r3, r0, #1
 8024a80:	89a3      	ldrh	r3, [r4, #12]
 8024a82:	bf15      	itete	ne
 8024a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024a8e:	81a3      	strheq	r3, [r4, #12]
 8024a90:	bf18      	it	ne
 8024a92:	81a3      	strhne	r3, [r4, #12]
 8024a94:	bd10      	pop	{r4, pc}

08024a96 <__sclose>:
 8024a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a9a:	f000 b8df 	b.w	8024c5c <_close_r>

08024a9e <__swbuf_r>:
 8024a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024aa0:	460e      	mov	r6, r1
 8024aa2:	4614      	mov	r4, r2
 8024aa4:	4605      	mov	r5, r0
 8024aa6:	b118      	cbz	r0, 8024ab0 <__swbuf_r+0x12>
 8024aa8:	6a03      	ldr	r3, [r0, #32]
 8024aaa:	b90b      	cbnz	r3, 8024ab0 <__swbuf_r+0x12>
 8024aac:	f7ff ff6c 	bl	8024988 <__sinit>
 8024ab0:	69a3      	ldr	r3, [r4, #24]
 8024ab2:	60a3      	str	r3, [r4, #8]
 8024ab4:	89a3      	ldrh	r3, [r4, #12]
 8024ab6:	071a      	lsls	r2, r3, #28
 8024ab8:	d501      	bpl.n	8024abe <__swbuf_r+0x20>
 8024aba:	6923      	ldr	r3, [r4, #16]
 8024abc:	b943      	cbnz	r3, 8024ad0 <__swbuf_r+0x32>
 8024abe:	4621      	mov	r1, r4
 8024ac0:	4628      	mov	r0, r5
 8024ac2:	f000 f82b 	bl	8024b1c <__swsetup_r>
 8024ac6:	b118      	cbz	r0, 8024ad0 <__swbuf_r+0x32>
 8024ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8024acc:	4638      	mov	r0, r7
 8024ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ad0:	6823      	ldr	r3, [r4, #0]
 8024ad2:	6922      	ldr	r2, [r4, #16]
 8024ad4:	1a98      	subs	r0, r3, r2
 8024ad6:	6963      	ldr	r3, [r4, #20]
 8024ad8:	b2f6      	uxtb	r6, r6
 8024ada:	4283      	cmp	r3, r0
 8024adc:	4637      	mov	r7, r6
 8024ade:	dc05      	bgt.n	8024aec <__swbuf_r+0x4e>
 8024ae0:	4621      	mov	r1, r4
 8024ae2:	4628      	mov	r0, r5
 8024ae4:	f000 fd58 	bl	8025598 <_fflush_r>
 8024ae8:	2800      	cmp	r0, #0
 8024aea:	d1ed      	bne.n	8024ac8 <__swbuf_r+0x2a>
 8024aec:	68a3      	ldr	r3, [r4, #8]
 8024aee:	3b01      	subs	r3, #1
 8024af0:	60a3      	str	r3, [r4, #8]
 8024af2:	6823      	ldr	r3, [r4, #0]
 8024af4:	1c5a      	adds	r2, r3, #1
 8024af6:	6022      	str	r2, [r4, #0]
 8024af8:	701e      	strb	r6, [r3, #0]
 8024afa:	6962      	ldr	r2, [r4, #20]
 8024afc:	1c43      	adds	r3, r0, #1
 8024afe:	429a      	cmp	r2, r3
 8024b00:	d004      	beq.n	8024b0c <__swbuf_r+0x6e>
 8024b02:	89a3      	ldrh	r3, [r4, #12]
 8024b04:	07db      	lsls	r3, r3, #31
 8024b06:	d5e1      	bpl.n	8024acc <__swbuf_r+0x2e>
 8024b08:	2e0a      	cmp	r6, #10
 8024b0a:	d1df      	bne.n	8024acc <__swbuf_r+0x2e>
 8024b0c:	4621      	mov	r1, r4
 8024b0e:	4628      	mov	r0, r5
 8024b10:	f000 fd42 	bl	8025598 <_fflush_r>
 8024b14:	2800      	cmp	r0, #0
 8024b16:	d0d9      	beq.n	8024acc <__swbuf_r+0x2e>
 8024b18:	e7d6      	b.n	8024ac8 <__swbuf_r+0x2a>
	...

08024b1c <__swsetup_r>:
 8024b1c:	b538      	push	{r3, r4, r5, lr}
 8024b1e:	4b29      	ldr	r3, [pc, #164]	@ (8024bc4 <__swsetup_r+0xa8>)
 8024b20:	4605      	mov	r5, r0
 8024b22:	6818      	ldr	r0, [r3, #0]
 8024b24:	460c      	mov	r4, r1
 8024b26:	b118      	cbz	r0, 8024b30 <__swsetup_r+0x14>
 8024b28:	6a03      	ldr	r3, [r0, #32]
 8024b2a:	b90b      	cbnz	r3, 8024b30 <__swsetup_r+0x14>
 8024b2c:	f7ff ff2c 	bl	8024988 <__sinit>
 8024b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024b34:	0719      	lsls	r1, r3, #28
 8024b36:	d422      	bmi.n	8024b7e <__swsetup_r+0x62>
 8024b38:	06da      	lsls	r2, r3, #27
 8024b3a:	d407      	bmi.n	8024b4c <__swsetup_r+0x30>
 8024b3c:	2209      	movs	r2, #9
 8024b3e:	602a      	str	r2, [r5, #0]
 8024b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024b44:	81a3      	strh	r3, [r4, #12]
 8024b46:	f04f 30ff 	mov.w	r0, #4294967295
 8024b4a:	e033      	b.n	8024bb4 <__swsetup_r+0x98>
 8024b4c:	0758      	lsls	r0, r3, #29
 8024b4e:	d512      	bpl.n	8024b76 <__swsetup_r+0x5a>
 8024b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b52:	b141      	cbz	r1, 8024b66 <__swsetup_r+0x4a>
 8024b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024b58:	4299      	cmp	r1, r3
 8024b5a:	d002      	beq.n	8024b62 <__swsetup_r+0x46>
 8024b5c:	4628      	mov	r0, r5
 8024b5e:	f000 f97f 	bl	8024e60 <_free_r>
 8024b62:	2300      	movs	r3, #0
 8024b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8024b66:	89a3      	ldrh	r3, [r4, #12]
 8024b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024b6c:	81a3      	strh	r3, [r4, #12]
 8024b6e:	2300      	movs	r3, #0
 8024b70:	6063      	str	r3, [r4, #4]
 8024b72:	6923      	ldr	r3, [r4, #16]
 8024b74:	6023      	str	r3, [r4, #0]
 8024b76:	89a3      	ldrh	r3, [r4, #12]
 8024b78:	f043 0308 	orr.w	r3, r3, #8
 8024b7c:	81a3      	strh	r3, [r4, #12]
 8024b7e:	6923      	ldr	r3, [r4, #16]
 8024b80:	b94b      	cbnz	r3, 8024b96 <__swsetup_r+0x7a>
 8024b82:	89a3      	ldrh	r3, [r4, #12]
 8024b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024b8c:	d003      	beq.n	8024b96 <__swsetup_r+0x7a>
 8024b8e:	4621      	mov	r1, r4
 8024b90:	4628      	mov	r0, r5
 8024b92:	f000 fd4f 	bl	8025634 <__smakebuf_r>
 8024b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024b9a:	f013 0201 	ands.w	r2, r3, #1
 8024b9e:	d00a      	beq.n	8024bb6 <__swsetup_r+0x9a>
 8024ba0:	2200      	movs	r2, #0
 8024ba2:	60a2      	str	r2, [r4, #8]
 8024ba4:	6962      	ldr	r2, [r4, #20]
 8024ba6:	4252      	negs	r2, r2
 8024ba8:	61a2      	str	r2, [r4, #24]
 8024baa:	6922      	ldr	r2, [r4, #16]
 8024bac:	b942      	cbnz	r2, 8024bc0 <__swsetup_r+0xa4>
 8024bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024bb2:	d1c5      	bne.n	8024b40 <__swsetup_r+0x24>
 8024bb4:	bd38      	pop	{r3, r4, r5, pc}
 8024bb6:	0799      	lsls	r1, r3, #30
 8024bb8:	bf58      	it	pl
 8024bba:	6962      	ldrpl	r2, [r4, #20]
 8024bbc:	60a2      	str	r2, [r4, #8]
 8024bbe:	e7f4      	b.n	8024baa <__swsetup_r+0x8e>
 8024bc0:	2000      	movs	r0, #0
 8024bc2:	e7f7      	b.n	8024bb4 <__swsetup_r+0x98>
 8024bc4:	240000e8 	.word	0x240000e8

08024bc8 <memset>:
 8024bc8:	4402      	add	r2, r0
 8024bca:	4603      	mov	r3, r0
 8024bcc:	4293      	cmp	r3, r2
 8024bce:	d100      	bne.n	8024bd2 <memset+0xa>
 8024bd0:	4770      	bx	lr
 8024bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8024bd6:	e7f9      	b.n	8024bcc <memset+0x4>

08024bd8 <strncmp>:
 8024bd8:	b510      	push	{r4, lr}
 8024bda:	b16a      	cbz	r2, 8024bf8 <strncmp+0x20>
 8024bdc:	3901      	subs	r1, #1
 8024bde:	1884      	adds	r4, r0, r2
 8024be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024be4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024be8:	429a      	cmp	r2, r3
 8024bea:	d103      	bne.n	8024bf4 <strncmp+0x1c>
 8024bec:	42a0      	cmp	r0, r4
 8024bee:	d001      	beq.n	8024bf4 <strncmp+0x1c>
 8024bf0:	2a00      	cmp	r2, #0
 8024bf2:	d1f5      	bne.n	8024be0 <strncmp+0x8>
 8024bf4:	1ad0      	subs	r0, r2, r3
 8024bf6:	bd10      	pop	{r4, pc}
 8024bf8:	4610      	mov	r0, r2
 8024bfa:	e7fc      	b.n	8024bf6 <strncmp+0x1e>

08024bfc <_raise_r>:
 8024bfc:	291f      	cmp	r1, #31
 8024bfe:	b538      	push	{r3, r4, r5, lr}
 8024c00:	4605      	mov	r5, r0
 8024c02:	460c      	mov	r4, r1
 8024c04:	d904      	bls.n	8024c10 <_raise_r+0x14>
 8024c06:	2316      	movs	r3, #22
 8024c08:	6003      	str	r3, [r0, #0]
 8024c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8024c0e:	bd38      	pop	{r3, r4, r5, pc}
 8024c10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024c12:	b112      	cbz	r2, 8024c1a <_raise_r+0x1e>
 8024c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024c18:	b94b      	cbnz	r3, 8024c2e <_raise_r+0x32>
 8024c1a:	4628      	mov	r0, r5
 8024c1c:	f000 f864 	bl	8024ce8 <_getpid_r>
 8024c20:	4622      	mov	r2, r4
 8024c22:	4601      	mov	r1, r0
 8024c24:	4628      	mov	r0, r5
 8024c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024c2a:	f000 b84b 	b.w	8024cc4 <_kill_r>
 8024c2e:	2b01      	cmp	r3, #1
 8024c30:	d00a      	beq.n	8024c48 <_raise_r+0x4c>
 8024c32:	1c59      	adds	r1, r3, #1
 8024c34:	d103      	bne.n	8024c3e <_raise_r+0x42>
 8024c36:	2316      	movs	r3, #22
 8024c38:	6003      	str	r3, [r0, #0]
 8024c3a:	2001      	movs	r0, #1
 8024c3c:	e7e7      	b.n	8024c0e <_raise_r+0x12>
 8024c3e:	2100      	movs	r1, #0
 8024c40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024c44:	4620      	mov	r0, r4
 8024c46:	4798      	blx	r3
 8024c48:	2000      	movs	r0, #0
 8024c4a:	e7e0      	b.n	8024c0e <_raise_r+0x12>

08024c4c <raise>:
 8024c4c:	4b02      	ldr	r3, [pc, #8]	@ (8024c58 <raise+0xc>)
 8024c4e:	4601      	mov	r1, r0
 8024c50:	6818      	ldr	r0, [r3, #0]
 8024c52:	f7ff bfd3 	b.w	8024bfc <_raise_r>
 8024c56:	bf00      	nop
 8024c58:	240000e8 	.word	0x240000e8

08024c5c <_close_r>:
 8024c5c:	b538      	push	{r3, r4, r5, lr}
 8024c5e:	4d06      	ldr	r5, [pc, #24]	@ (8024c78 <_close_r+0x1c>)
 8024c60:	2300      	movs	r3, #0
 8024c62:	4604      	mov	r4, r0
 8024c64:	4608      	mov	r0, r1
 8024c66:	602b      	str	r3, [r5, #0]
 8024c68:	f7dc fe5e 	bl	8001928 <_close>
 8024c6c:	1c43      	adds	r3, r0, #1
 8024c6e:	d102      	bne.n	8024c76 <_close_r+0x1a>
 8024c70:	682b      	ldr	r3, [r5, #0]
 8024c72:	b103      	cbz	r3, 8024c76 <_close_r+0x1a>
 8024c74:	6023      	str	r3, [r4, #0]
 8024c76:	bd38      	pop	{r3, r4, r5, pc}
 8024c78:	24025f34 	.word	0x24025f34

08024c7c <_lseek_r>:
 8024c7c:	b538      	push	{r3, r4, r5, lr}
 8024c7e:	4d07      	ldr	r5, [pc, #28]	@ (8024c9c <_lseek_r+0x20>)
 8024c80:	4604      	mov	r4, r0
 8024c82:	4608      	mov	r0, r1
 8024c84:	4611      	mov	r1, r2
 8024c86:	2200      	movs	r2, #0
 8024c88:	602a      	str	r2, [r5, #0]
 8024c8a:	461a      	mov	r2, r3
 8024c8c:	f7dc fe56 	bl	800193c <_lseek>
 8024c90:	1c43      	adds	r3, r0, #1
 8024c92:	d102      	bne.n	8024c9a <_lseek_r+0x1e>
 8024c94:	682b      	ldr	r3, [r5, #0]
 8024c96:	b103      	cbz	r3, 8024c9a <_lseek_r+0x1e>
 8024c98:	6023      	str	r3, [r4, #0]
 8024c9a:	bd38      	pop	{r3, r4, r5, pc}
 8024c9c:	24025f34 	.word	0x24025f34

08024ca0 <_read_r>:
 8024ca0:	b538      	push	{r3, r4, r5, lr}
 8024ca2:	4d07      	ldr	r5, [pc, #28]	@ (8024cc0 <_read_r+0x20>)
 8024ca4:	4604      	mov	r4, r0
 8024ca6:	4608      	mov	r0, r1
 8024ca8:	4611      	mov	r1, r2
 8024caa:	2200      	movs	r2, #0
 8024cac:	602a      	str	r2, [r5, #0]
 8024cae:	461a      	mov	r2, r3
 8024cb0:	f7dc fe1e 	bl	80018f0 <_read>
 8024cb4:	1c43      	adds	r3, r0, #1
 8024cb6:	d102      	bne.n	8024cbe <_read_r+0x1e>
 8024cb8:	682b      	ldr	r3, [r5, #0]
 8024cba:	b103      	cbz	r3, 8024cbe <_read_r+0x1e>
 8024cbc:	6023      	str	r3, [r4, #0]
 8024cbe:	bd38      	pop	{r3, r4, r5, pc}
 8024cc0:	24025f34 	.word	0x24025f34

08024cc4 <_kill_r>:
 8024cc4:	b538      	push	{r3, r4, r5, lr}
 8024cc6:	4d07      	ldr	r5, [pc, #28]	@ (8024ce4 <_kill_r+0x20>)
 8024cc8:	2300      	movs	r3, #0
 8024cca:	4604      	mov	r4, r0
 8024ccc:	4608      	mov	r0, r1
 8024cce:	4611      	mov	r1, r2
 8024cd0:	602b      	str	r3, [r5, #0]
 8024cd2:	f7dc fdff 	bl	80018d4 <_kill>
 8024cd6:	1c43      	adds	r3, r0, #1
 8024cd8:	d102      	bne.n	8024ce0 <_kill_r+0x1c>
 8024cda:	682b      	ldr	r3, [r5, #0]
 8024cdc:	b103      	cbz	r3, 8024ce0 <_kill_r+0x1c>
 8024cde:	6023      	str	r3, [r4, #0]
 8024ce0:	bd38      	pop	{r3, r4, r5, pc}
 8024ce2:	bf00      	nop
 8024ce4:	24025f34 	.word	0x24025f34

08024ce8 <_getpid_r>:
 8024ce8:	f7dc bdf2 	b.w	80018d0 <_getpid>

08024cec <_sbrk_r>:
 8024cec:	b538      	push	{r3, r4, r5, lr}
 8024cee:	4d06      	ldr	r5, [pc, #24]	@ (8024d08 <_sbrk_r+0x1c>)
 8024cf0:	2300      	movs	r3, #0
 8024cf2:	4604      	mov	r4, r0
 8024cf4:	4608      	mov	r0, r1
 8024cf6:	602b      	str	r3, [r5, #0]
 8024cf8:	f7dc fe22 	bl	8001940 <_sbrk>
 8024cfc:	1c43      	adds	r3, r0, #1
 8024cfe:	d102      	bne.n	8024d06 <_sbrk_r+0x1a>
 8024d00:	682b      	ldr	r3, [r5, #0]
 8024d02:	b103      	cbz	r3, 8024d06 <_sbrk_r+0x1a>
 8024d04:	6023      	str	r3, [r4, #0]
 8024d06:	bd38      	pop	{r3, r4, r5, pc}
 8024d08:	24025f34 	.word	0x24025f34

08024d0c <_write_r>:
 8024d0c:	b538      	push	{r3, r4, r5, lr}
 8024d0e:	4d07      	ldr	r5, [pc, #28]	@ (8024d2c <_write_r+0x20>)
 8024d10:	4604      	mov	r4, r0
 8024d12:	4608      	mov	r0, r1
 8024d14:	4611      	mov	r1, r2
 8024d16:	2200      	movs	r2, #0
 8024d18:	602a      	str	r2, [r5, #0]
 8024d1a:	461a      	mov	r2, r3
 8024d1c:	f7dc fdf6 	bl	800190c <_write>
 8024d20:	1c43      	adds	r3, r0, #1
 8024d22:	d102      	bne.n	8024d2a <_write_r+0x1e>
 8024d24:	682b      	ldr	r3, [r5, #0]
 8024d26:	b103      	cbz	r3, 8024d2a <_write_r+0x1e>
 8024d28:	6023      	str	r3, [r4, #0]
 8024d2a:	bd38      	pop	{r3, r4, r5, pc}
 8024d2c:	24025f34 	.word	0x24025f34

08024d30 <__errno>:
 8024d30:	4b01      	ldr	r3, [pc, #4]	@ (8024d38 <__errno+0x8>)
 8024d32:	6818      	ldr	r0, [r3, #0]
 8024d34:	4770      	bx	lr
 8024d36:	bf00      	nop
 8024d38:	240000e8 	.word	0x240000e8

08024d3c <__libc_init_array>:
 8024d3c:	b570      	push	{r4, r5, r6, lr}
 8024d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8024d74 <__libc_init_array+0x38>)
 8024d40:	4c0d      	ldr	r4, [pc, #52]	@ (8024d78 <__libc_init_array+0x3c>)
 8024d42:	1b64      	subs	r4, r4, r5
 8024d44:	10a4      	asrs	r4, r4, #2
 8024d46:	2600      	movs	r6, #0
 8024d48:	42a6      	cmp	r6, r4
 8024d4a:	d109      	bne.n	8024d60 <__libc_init_array+0x24>
 8024d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8024d7c <__libc_init_array+0x40>)
 8024d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8024d80 <__libc_init_array+0x44>)
 8024d50:	f000 fcce 	bl	80256f0 <_init>
 8024d54:	1b64      	subs	r4, r4, r5
 8024d56:	10a4      	asrs	r4, r4, #2
 8024d58:	2600      	movs	r6, #0
 8024d5a:	42a6      	cmp	r6, r4
 8024d5c:	d105      	bne.n	8024d6a <__libc_init_array+0x2e>
 8024d5e:	bd70      	pop	{r4, r5, r6, pc}
 8024d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8024d64:	4798      	blx	r3
 8024d66:	3601      	adds	r6, #1
 8024d68:	e7ee      	b.n	8024d48 <__libc_init_array+0xc>
 8024d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8024d6e:	4798      	blx	r3
 8024d70:	3601      	adds	r6, #1
 8024d72:	e7f2      	b.n	8024d5a <__libc_init_array+0x1e>
 8024d74:	080292d4 	.word	0x080292d4
 8024d78:	080292d4 	.word	0x080292d4
 8024d7c:	080292d4 	.word	0x080292d4
 8024d80:	080292f0 	.word	0x080292f0

08024d84 <__retarget_lock_init_recursive>:
 8024d84:	4770      	bx	lr

08024d86 <__retarget_lock_acquire_recursive>:
 8024d86:	4770      	bx	lr

08024d88 <__retarget_lock_release_recursive>:
 8024d88:	4770      	bx	lr

08024d8a <memcpy>:
 8024d8a:	440a      	add	r2, r1
 8024d8c:	4291      	cmp	r1, r2
 8024d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8024d92:	d100      	bne.n	8024d96 <memcpy+0xc>
 8024d94:	4770      	bx	lr
 8024d96:	b510      	push	{r4, lr}
 8024d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024da0:	4291      	cmp	r1, r2
 8024da2:	d1f9      	bne.n	8024d98 <memcpy+0xe>
 8024da4:	bd10      	pop	{r4, pc}
	...

08024da8 <__register_exitproc>:
 8024da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024dac:	4d27      	ldr	r5, [pc, #156]	@ (8024e4c <__register_exitproc+0xa4>)
 8024dae:	4607      	mov	r7, r0
 8024db0:	6828      	ldr	r0, [r5, #0]
 8024db2:	4691      	mov	r9, r2
 8024db4:	460e      	mov	r6, r1
 8024db6:	4698      	mov	r8, r3
 8024db8:	f7ff ffe5 	bl	8024d86 <__retarget_lock_acquire_recursive>
 8024dbc:	4a24      	ldr	r2, [pc, #144]	@ (8024e50 <__register_exitproc+0xa8>)
 8024dbe:	6814      	ldr	r4, [r2, #0]
 8024dc0:	b93c      	cbnz	r4, 8024dd2 <__register_exitproc+0x2a>
 8024dc2:	4b24      	ldr	r3, [pc, #144]	@ (8024e54 <__register_exitproc+0xac>)
 8024dc4:	6013      	str	r3, [r2, #0]
 8024dc6:	4a24      	ldr	r2, [pc, #144]	@ (8024e58 <__register_exitproc+0xb0>)
 8024dc8:	b112      	cbz	r2, 8024dd0 <__register_exitproc+0x28>
 8024dca:	6812      	ldr	r2, [r2, #0]
 8024dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8024dd0:	4c20      	ldr	r4, [pc, #128]	@ (8024e54 <__register_exitproc+0xac>)
 8024dd2:	6863      	ldr	r3, [r4, #4]
 8024dd4:	2b1f      	cmp	r3, #31
 8024dd6:	dd06      	ble.n	8024de6 <__register_exitproc+0x3e>
 8024dd8:	6828      	ldr	r0, [r5, #0]
 8024dda:	f7ff ffd5 	bl	8024d88 <__retarget_lock_release_recursive>
 8024dde:	f04f 30ff 	mov.w	r0, #4294967295
 8024de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024de6:	b32f      	cbz	r7, 8024e34 <__register_exitproc+0x8c>
 8024de8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8024dec:	b968      	cbnz	r0, 8024e0a <__register_exitproc+0x62>
 8024dee:	4b1b      	ldr	r3, [pc, #108]	@ (8024e5c <__register_exitproc+0xb4>)
 8024df0:	2b00      	cmp	r3, #0
 8024df2:	d0f1      	beq.n	8024dd8 <__register_exitproc+0x30>
 8024df4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8024df8:	f7ff fc6e 	bl	80246d8 <malloc>
 8024dfc:	2800      	cmp	r0, #0
 8024dfe:	d0eb      	beq.n	8024dd8 <__register_exitproc+0x30>
 8024e00:	2300      	movs	r3, #0
 8024e02:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8024e06:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8024e0a:	6863      	ldr	r3, [r4, #4]
 8024e0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024e10:	2201      	movs	r2, #1
 8024e12:	409a      	lsls	r2, r3
 8024e14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024e18:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8024e1c:	4313      	orrs	r3, r2
 8024e1e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8024e22:	2f02      	cmp	r7, #2
 8024e24:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8024e28:	bf02      	ittt	eq
 8024e2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8024e2e:	4313      	orreq	r3, r2
 8024e30:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8024e34:	6863      	ldr	r3, [r4, #4]
 8024e36:	6828      	ldr	r0, [r5, #0]
 8024e38:	1c5a      	adds	r2, r3, #1
 8024e3a:	3302      	adds	r3, #2
 8024e3c:	6062      	str	r2, [r4, #4]
 8024e3e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8024e42:	f7ff ffa1 	bl	8024d88 <__retarget_lock_release_recursive>
 8024e46:	2000      	movs	r0, #0
 8024e48:	e7cb      	b.n	8024de2 <__register_exitproc+0x3a>
 8024e4a:	bf00      	nop
 8024e4c:	24000138 	.word	0x24000138
 8024e50:	24025fc8 	.word	0x24025fc8
 8024e54:	24025f3c 	.word	0x24025f3c
 8024e58:	08029108 	.word	0x08029108
 8024e5c:	080246d9 	.word	0x080246d9

08024e60 <_free_r>:
 8024e60:	b538      	push	{r3, r4, r5, lr}
 8024e62:	4605      	mov	r5, r0
 8024e64:	2900      	cmp	r1, #0
 8024e66:	d041      	beq.n	8024eec <_free_r+0x8c>
 8024e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024e6c:	1f0c      	subs	r4, r1, #4
 8024e6e:	2b00      	cmp	r3, #0
 8024e70:	bfb8      	it	lt
 8024e72:	18e4      	addlt	r4, r4, r3
 8024e74:	f7ff fce2 	bl	802483c <__malloc_lock>
 8024e78:	4a1d      	ldr	r2, [pc, #116]	@ (8024ef0 <_free_r+0x90>)
 8024e7a:	6813      	ldr	r3, [r2, #0]
 8024e7c:	b933      	cbnz	r3, 8024e8c <_free_r+0x2c>
 8024e7e:	6063      	str	r3, [r4, #4]
 8024e80:	6014      	str	r4, [r2, #0]
 8024e82:	4628      	mov	r0, r5
 8024e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e88:	f7ff bcde 	b.w	8024848 <__malloc_unlock>
 8024e8c:	42a3      	cmp	r3, r4
 8024e8e:	d908      	bls.n	8024ea2 <_free_r+0x42>
 8024e90:	6820      	ldr	r0, [r4, #0]
 8024e92:	1821      	adds	r1, r4, r0
 8024e94:	428b      	cmp	r3, r1
 8024e96:	bf01      	itttt	eq
 8024e98:	6819      	ldreq	r1, [r3, #0]
 8024e9a:	685b      	ldreq	r3, [r3, #4]
 8024e9c:	1809      	addeq	r1, r1, r0
 8024e9e:	6021      	streq	r1, [r4, #0]
 8024ea0:	e7ed      	b.n	8024e7e <_free_r+0x1e>
 8024ea2:	461a      	mov	r2, r3
 8024ea4:	685b      	ldr	r3, [r3, #4]
 8024ea6:	b10b      	cbz	r3, 8024eac <_free_r+0x4c>
 8024ea8:	42a3      	cmp	r3, r4
 8024eaa:	d9fa      	bls.n	8024ea2 <_free_r+0x42>
 8024eac:	6811      	ldr	r1, [r2, #0]
 8024eae:	1850      	adds	r0, r2, r1
 8024eb0:	42a0      	cmp	r0, r4
 8024eb2:	d10b      	bne.n	8024ecc <_free_r+0x6c>
 8024eb4:	6820      	ldr	r0, [r4, #0]
 8024eb6:	4401      	add	r1, r0
 8024eb8:	1850      	adds	r0, r2, r1
 8024eba:	4283      	cmp	r3, r0
 8024ebc:	6011      	str	r1, [r2, #0]
 8024ebe:	d1e0      	bne.n	8024e82 <_free_r+0x22>
 8024ec0:	6818      	ldr	r0, [r3, #0]
 8024ec2:	685b      	ldr	r3, [r3, #4]
 8024ec4:	6053      	str	r3, [r2, #4]
 8024ec6:	4408      	add	r0, r1
 8024ec8:	6010      	str	r0, [r2, #0]
 8024eca:	e7da      	b.n	8024e82 <_free_r+0x22>
 8024ecc:	d902      	bls.n	8024ed4 <_free_r+0x74>
 8024ece:	230c      	movs	r3, #12
 8024ed0:	602b      	str	r3, [r5, #0]
 8024ed2:	e7d6      	b.n	8024e82 <_free_r+0x22>
 8024ed4:	6820      	ldr	r0, [r4, #0]
 8024ed6:	1821      	adds	r1, r4, r0
 8024ed8:	428b      	cmp	r3, r1
 8024eda:	bf04      	itt	eq
 8024edc:	6819      	ldreq	r1, [r3, #0]
 8024ede:	685b      	ldreq	r3, [r3, #4]
 8024ee0:	6063      	str	r3, [r4, #4]
 8024ee2:	bf04      	itt	eq
 8024ee4:	1809      	addeq	r1, r1, r0
 8024ee6:	6021      	streq	r1, [r4, #0]
 8024ee8:	6054      	str	r4, [r2, #4]
 8024eea:	e7ca      	b.n	8024e82 <_free_r+0x22>
 8024eec:	bd38      	pop	{r3, r4, r5, pc}
 8024eee:	bf00      	nop
 8024ef0:	24025df4 	.word	0x24025df4

08024ef4 <__sfputc_r>:
 8024ef4:	6893      	ldr	r3, [r2, #8]
 8024ef6:	3b01      	subs	r3, #1
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	b410      	push	{r4}
 8024efc:	6093      	str	r3, [r2, #8]
 8024efe:	da08      	bge.n	8024f12 <__sfputc_r+0x1e>
 8024f00:	6994      	ldr	r4, [r2, #24]
 8024f02:	42a3      	cmp	r3, r4
 8024f04:	db01      	blt.n	8024f0a <__sfputc_r+0x16>
 8024f06:	290a      	cmp	r1, #10
 8024f08:	d103      	bne.n	8024f12 <__sfputc_r+0x1e>
 8024f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f0e:	f7ff bdc6 	b.w	8024a9e <__swbuf_r>
 8024f12:	6813      	ldr	r3, [r2, #0]
 8024f14:	1c58      	adds	r0, r3, #1
 8024f16:	6010      	str	r0, [r2, #0]
 8024f18:	7019      	strb	r1, [r3, #0]
 8024f1a:	4608      	mov	r0, r1
 8024f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f20:	4770      	bx	lr

08024f22 <__sfputs_r>:
 8024f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f24:	4606      	mov	r6, r0
 8024f26:	460f      	mov	r7, r1
 8024f28:	4614      	mov	r4, r2
 8024f2a:	18d5      	adds	r5, r2, r3
 8024f2c:	42ac      	cmp	r4, r5
 8024f2e:	d101      	bne.n	8024f34 <__sfputs_r+0x12>
 8024f30:	2000      	movs	r0, #0
 8024f32:	e007      	b.n	8024f44 <__sfputs_r+0x22>
 8024f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024f38:	463a      	mov	r2, r7
 8024f3a:	4630      	mov	r0, r6
 8024f3c:	f7ff ffda 	bl	8024ef4 <__sfputc_r>
 8024f40:	1c43      	adds	r3, r0, #1
 8024f42:	d1f3      	bne.n	8024f2c <__sfputs_r+0xa>
 8024f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024f48 <_vfiprintf_r>:
 8024f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f4c:	460d      	mov	r5, r1
 8024f4e:	b09d      	sub	sp, #116	@ 0x74
 8024f50:	4614      	mov	r4, r2
 8024f52:	4698      	mov	r8, r3
 8024f54:	4606      	mov	r6, r0
 8024f56:	b118      	cbz	r0, 8024f60 <_vfiprintf_r+0x18>
 8024f58:	6a03      	ldr	r3, [r0, #32]
 8024f5a:	b90b      	cbnz	r3, 8024f60 <_vfiprintf_r+0x18>
 8024f5c:	f7ff fd14 	bl	8024988 <__sinit>
 8024f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024f62:	07d9      	lsls	r1, r3, #31
 8024f64:	d405      	bmi.n	8024f72 <_vfiprintf_r+0x2a>
 8024f66:	89ab      	ldrh	r3, [r5, #12]
 8024f68:	059a      	lsls	r2, r3, #22
 8024f6a:	d402      	bmi.n	8024f72 <_vfiprintf_r+0x2a>
 8024f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024f6e:	f7ff ff0a 	bl	8024d86 <__retarget_lock_acquire_recursive>
 8024f72:	89ab      	ldrh	r3, [r5, #12]
 8024f74:	071b      	lsls	r3, r3, #28
 8024f76:	d501      	bpl.n	8024f7c <_vfiprintf_r+0x34>
 8024f78:	692b      	ldr	r3, [r5, #16]
 8024f7a:	b99b      	cbnz	r3, 8024fa4 <_vfiprintf_r+0x5c>
 8024f7c:	4629      	mov	r1, r5
 8024f7e:	4630      	mov	r0, r6
 8024f80:	f7ff fdcc 	bl	8024b1c <__swsetup_r>
 8024f84:	b170      	cbz	r0, 8024fa4 <_vfiprintf_r+0x5c>
 8024f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024f88:	07dc      	lsls	r4, r3, #31
 8024f8a:	d504      	bpl.n	8024f96 <_vfiprintf_r+0x4e>
 8024f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8024f90:	b01d      	add	sp, #116	@ 0x74
 8024f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f96:	89ab      	ldrh	r3, [r5, #12]
 8024f98:	0598      	lsls	r0, r3, #22
 8024f9a:	d4f7      	bmi.n	8024f8c <_vfiprintf_r+0x44>
 8024f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024f9e:	f7ff fef3 	bl	8024d88 <__retarget_lock_release_recursive>
 8024fa2:	e7f3      	b.n	8024f8c <_vfiprintf_r+0x44>
 8024fa4:	2300      	movs	r3, #0
 8024fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fa8:	2320      	movs	r3, #32
 8024faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8024fb2:	2330      	movs	r3, #48	@ 0x30
 8024fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025164 <_vfiprintf_r+0x21c>
 8024fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024fbc:	f04f 0901 	mov.w	r9, #1
 8024fc0:	4623      	mov	r3, r4
 8024fc2:	469a      	mov	sl, r3
 8024fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024fc8:	b10a      	cbz	r2, 8024fce <_vfiprintf_r+0x86>
 8024fca:	2a25      	cmp	r2, #37	@ 0x25
 8024fcc:	d1f9      	bne.n	8024fc2 <_vfiprintf_r+0x7a>
 8024fce:	ebba 0b04 	subs.w	fp, sl, r4
 8024fd2:	d00b      	beq.n	8024fec <_vfiprintf_r+0xa4>
 8024fd4:	465b      	mov	r3, fp
 8024fd6:	4622      	mov	r2, r4
 8024fd8:	4629      	mov	r1, r5
 8024fda:	4630      	mov	r0, r6
 8024fdc:	f7ff ffa1 	bl	8024f22 <__sfputs_r>
 8024fe0:	3001      	adds	r0, #1
 8024fe2:	f000 80a7 	beq.w	8025134 <_vfiprintf_r+0x1ec>
 8024fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024fe8:	445a      	add	r2, fp
 8024fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8024fec:	f89a 3000 	ldrb.w	r3, [sl]
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	f000 809f 	beq.w	8025134 <_vfiprintf_r+0x1ec>
 8024ff6:	2300      	movs	r3, #0
 8024ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8024ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025000:	f10a 0a01 	add.w	sl, sl, #1
 8025004:	9304      	str	r3, [sp, #16]
 8025006:	9307      	str	r3, [sp, #28]
 8025008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802500c:	931a      	str	r3, [sp, #104]	@ 0x68
 802500e:	4654      	mov	r4, sl
 8025010:	2205      	movs	r2, #5
 8025012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025016:	4853      	ldr	r0, [pc, #332]	@ (8025164 <_vfiprintf_r+0x21c>)
 8025018:	f7db f962 	bl	80002e0 <memchr>
 802501c:	9a04      	ldr	r2, [sp, #16]
 802501e:	b9d8      	cbnz	r0, 8025058 <_vfiprintf_r+0x110>
 8025020:	06d1      	lsls	r1, r2, #27
 8025022:	bf44      	itt	mi
 8025024:	2320      	movmi	r3, #32
 8025026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802502a:	0713      	lsls	r3, r2, #28
 802502c:	bf44      	itt	mi
 802502e:	232b      	movmi	r3, #43	@ 0x2b
 8025030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025034:	f89a 3000 	ldrb.w	r3, [sl]
 8025038:	2b2a      	cmp	r3, #42	@ 0x2a
 802503a:	d015      	beq.n	8025068 <_vfiprintf_r+0x120>
 802503c:	9a07      	ldr	r2, [sp, #28]
 802503e:	4654      	mov	r4, sl
 8025040:	2000      	movs	r0, #0
 8025042:	f04f 0c0a 	mov.w	ip, #10
 8025046:	4621      	mov	r1, r4
 8025048:	f811 3b01 	ldrb.w	r3, [r1], #1
 802504c:	3b30      	subs	r3, #48	@ 0x30
 802504e:	2b09      	cmp	r3, #9
 8025050:	d94b      	bls.n	80250ea <_vfiprintf_r+0x1a2>
 8025052:	b1b0      	cbz	r0, 8025082 <_vfiprintf_r+0x13a>
 8025054:	9207      	str	r2, [sp, #28]
 8025056:	e014      	b.n	8025082 <_vfiprintf_r+0x13a>
 8025058:	eba0 0308 	sub.w	r3, r0, r8
 802505c:	fa09 f303 	lsl.w	r3, r9, r3
 8025060:	4313      	orrs	r3, r2
 8025062:	9304      	str	r3, [sp, #16]
 8025064:	46a2      	mov	sl, r4
 8025066:	e7d2      	b.n	802500e <_vfiprintf_r+0xc6>
 8025068:	9b03      	ldr	r3, [sp, #12]
 802506a:	1d19      	adds	r1, r3, #4
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	9103      	str	r1, [sp, #12]
 8025070:	2b00      	cmp	r3, #0
 8025072:	bfbb      	ittet	lt
 8025074:	425b      	neglt	r3, r3
 8025076:	f042 0202 	orrlt.w	r2, r2, #2
 802507a:	9307      	strge	r3, [sp, #28]
 802507c:	9307      	strlt	r3, [sp, #28]
 802507e:	bfb8      	it	lt
 8025080:	9204      	strlt	r2, [sp, #16]
 8025082:	7823      	ldrb	r3, [r4, #0]
 8025084:	2b2e      	cmp	r3, #46	@ 0x2e
 8025086:	d10a      	bne.n	802509e <_vfiprintf_r+0x156>
 8025088:	7863      	ldrb	r3, [r4, #1]
 802508a:	2b2a      	cmp	r3, #42	@ 0x2a
 802508c:	d132      	bne.n	80250f4 <_vfiprintf_r+0x1ac>
 802508e:	9b03      	ldr	r3, [sp, #12]
 8025090:	1d1a      	adds	r2, r3, #4
 8025092:	681b      	ldr	r3, [r3, #0]
 8025094:	9203      	str	r2, [sp, #12]
 8025096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802509a:	3402      	adds	r4, #2
 802509c:	9305      	str	r3, [sp, #20]
 802509e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025174 <_vfiprintf_r+0x22c>
 80250a2:	7821      	ldrb	r1, [r4, #0]
 80250a4:	2203      	movs	r2, #3
 80250a6:	4650      	mov	r0, sl
 80250a8:	f7db f91a 	bl	80002e0 <memchr>
 80250ac:	b138      	cbz	r0, 80250be <_vfiprintf_r+0x176>
 80250ae:	9b04      	ldr	r3, [sp, #16]
 80250b0:	eba0 000a 	sub.w	r0, r0, sl
 80250b4:	2240      	movs	r2, #64	@ 0x40
 80250b6:	4082      	lsls	r2, r0
 80250b8:	4313      	orrs	r3, r2
 80250ba:	3401      	adds	r4, #1
 80250bc:	9304      	str	r3, [sp, #16]
 80250be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80250c2:	4829      	ldr	r0, [pc, #164]	@ (8025168 <_vfiprintf_r+0x220>)
 80250c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80250c8:	2206      	movs	r2, #6
 80250ca:	f7db f909 	bl	80002e0 <memchr>
 80250ce:	2800      	cmp	r0, #0
 80250d0:	d03f      	beq.n	8025152 <_vfiprintf_r+0x20a>
 80250d2:	4b26      	ldr	r3, [pc, #152]	@ (802516c <_vfiprintf_r+0x224>)
 80250d4:	bb1b      	cbnz	r3, 802511e <_vfiprintf_r+0x1d6>
 80250d6:	9b03      	ldr	r3, [sp, #12]
 80250d8:	3307      	adds	r3, #7
 80250da:	f023 0307 	bic.w	r3, r3, #7
 80250de:	3308      	adds	r3, #8
 80250e0:	9303      	str	r3, [sp, #12]
 80250e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250e4:	443b      	add	r3, r7
 80250e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80250e8:	e76a      	b.n	8024fc0 <_vfiprintf_r+0x78>
 80250ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80250ee:	460c      	mov	r4, r1
 80250f0:	2001      	movs	r0, #1
 80250f2:	e7a8      	b.n	8025046 <_vfiprintf_r+0xfe>
 80250f4:	2300      	movs	r3, #0
 80250f6:	3401      	adds	r4, #1
 80250f8:	9305      	str	r3, [sp, #20]
 80250fa:	4619      	mov	r1, r3
 80250fc:	f04f 0c0a 	mov.w	ip, #10
 8025100:	4620      	mov	r0, r4
 8025102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025106:	3a30      	subs	r2, #48	@ 0x30
 8025108:	2a09      	cmp	r2, #9
 802510a:	d903      	bls.n	8025114 <_vfiprintf_r+0x1cc>
 802510c:	2b00      	cmp	r3, #0
 802510e:	d0c6      	beq.n	802509e <_vfiprintf_r+0x156>
 8025110:	9105      	str	r1, [sp, #20]
 8025112:	e7c4      	b.n	802509e <_vfiprintf_r+0x156>
 8025114:	fb0c 2101 	mla	r1, ip, r1, r2
 8025118:	4604      	mov	r4, r0
 802511a:	2301      	movs	r3, #1
 802511c:	e7f0      	b.n	8025100 <_vfiprintf_r+0x1b8>
 802511e:	ab03      	add	r3, sp, #12
 8025120:	9300      	str	r3, [sp, #0]
 8025122:	462a      	mov	r2, r5
 8025124:	4b12      	ldr	r3, [pc, #72]	@ (8025170 <_vfiprintf_r+0x228>)
 8025126:	a904      	add	r1, sp, #16
 8025128:	4630      	mov	r0, r6
 802512a:	f3af 8000 	nop.w
 802512e:	4607      	mov	r7, r0
 8025130:	1c78      	adds	r0, r7, #1
 8025132:	d1d6      	bne.n	80250e2 <_vfiprintf_r+0x19a>
 8025134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025136:	07d9      	lsls	r1, r3, #31
 8025138:	d405      	bmi.n	8025146 <_vfiprintf_r+0x1fe>
 802513a:	89ab      	ldrh	r3, [r5, #12]
 802513c:	059a      	lsls	r2, r3, #22
 802513e:	d402      	bmi.n	8025146 <_vfiprintf_r+0x1fe>
 8025140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025142:	f7ff fe21 	bl	8024d88 <__retarget_lock_release_recursive>
 8025146:	89ab      	ldrh	r3, [r5, #12]
 8025148:	065b      	lsls	r3, r3, #25
 802514a:	f53f af1f 	bmi.w	8024f8c <_vfiprintf_r+0x44>
 802514e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025150:	e71e      	b.n	8024f90 <_vfiprintf_r+0x48>
 8025152:	ab03      	add	r3, sp, #12
 8025154:	9300      	str	r3, [sp, #0]
 8025156:	462a      	mov	r2, r5
 8025158:	4b05      	ldr	r3, [pc, #20]	@ (8025170 <_vfiprintf_r+0x228>)
 802515a:	a904      	add	r1, sp, #16
 802515c:	4630      	mov	r0, r6
 802515e:	f000 f879 	bl	8025254 <_printf_i>
 8025162:	e7e4      	b.n	802512e <_vfiprintf_r+0x1e6>
 8025164:	080274bb 	.word	0x080274bb
 8025168:	080274c5 	.word	0x080274c5
 802516c:	00000000 	.word	0x00000000
 8025170:	08024f23 	.word	0x08024f23
 8025174:	080274c1 	.word	0x080274c1

08025178 <_printf_common>:
 8025178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802517c:	4616      	mov	r6, r2
 802517e:	4698      	mov	r8, r3
 8025180:	688a      	ldr	r2, [r1, #8]
 8025182:	690b      	ldr	r3, [r1, #16]
 8025184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025188:	4293      	cmp	r3, r2
 802518a:	bfb8      	it	lt
 802518c:	4613      	movlt	r3, r2
 802518e:	6033      	str	r3, [r6, #0]
 8025190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025194:	4607      	mov	r7, r0
 8025196:	460c      	mov	r4, r1
 8025198:	b10a      	cbz	r2, 802519e <_printf_common+0x26>
 802519a:	3301      	adds	r3, #1
 802519c:	6033      	str	r3, [r6, #0]
 802519e:	6823      	ldr	r3, [r4, #0]
 80251a0:	0699      	lsls	r1, r3, #26
 80251a2:	bf42      	ittt	mi
 80251a4:	6833      	ldrmi	r3, [r6, #0]
 80251a6:	3302      	addmi	r3, #2
 80251a8:	6033      	strmi	r3, [r6, #0]
 80251aa:	6825      	ldr	r5, [r4, #0]
 80251ac:	f015 0506 	ands.w	r5, r5, #6
 80251b0:	d106      	bne.n	80251c0 <_printf_common+0x48>
 80251b2:	f104 0a19 	add.w	sl, r4, #25
 80251b6:	68e3      	ldr	r3, [r4, #12]
 80251b8:	6832      	ldr	r2, [r6, #0]
 80251ba:	1a9b      	subs	r3, r3, r2
 80251bc:	42ab      	cmp	r3, r5
 80251be:	dc26      	bgt.n	802520e <_printf_common+0x96>
 80251c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80251c4:	6822      	ldr	r2, [r4, #0]
 80251c6:	3b00      	subs	r3, #0
 80251c8:	bf18      	it	ne
 80251ca:	2301      	movne	r3, #1
 80251cc:	0692      	lsls	r2, r2, #26
 80251ce:	d42b      	bmi.n	8025228 <_printf_common+0xb0>
 80251d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80251d4:	4641      	mov	r1, r8
 80251d6:	4638      	mov	r0, r7
 80251d8:	47c8      	blx	r9
 80251da:	3001      	adds	r0, #1
 80251dc:	d01e      	beq.n	802521c <_printf_common+0xa4>
 80251de:	6823      	ldr	r3, [r4, #0]
 80251e0:	6922      	ldr	r2, [r4, #16]
 80251e2:	f003 0306 	and.w	r3, r3, #6
 80251e6:	2b04      	cmp	r3, #4
 80251e8:	bf02      	ittt	eq
 80251ea:	68e5      	ldreq	r5, [r4, #12]
 80251ec:	6833      	ldreq	r3, [r6, #0]
 80251ee:	1aed      	subeq	r5, r5, r3
 80251f0:	68a3      	ldr	r3, [r4, #8]
 80251f2:	bf0c      	ite	eq
 80251f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80251f8:	2500      	movne	r5, #0
 80251fa:	4293      	cmp	r3, r2
 80251fc:	bfc4      	itt	gt
 80251fe:	1a9b      	subgt	r3, r3, r2
 8025200:	18ed      	addgt	r5, r5, r3
 8025202:	2600      	movs	r6, #0
 8025204:	341a      	adds	r4, #26
 8025206:	42b5      	cmp	r5, r6
 8025208:	d11a      	bne.n	8025240 <_printf_common+0xc8>
 802520a:	2000      	movs	r0, #0
 802520c:	e008      	b.n	8025220 <_printf_common+0xa8>
 802520e:	2301      	movs	r3, #1
 8025210:	4652      	mov	r2, sl
 8025212:	4641      	mov	r1, r8
 8025214:	4638      	mov	r0, r7
 8025216:	47c8      	blx	r9
 8025218:	3001      	adds	r0, #1
 802521a:	d103      	bne.n	8025224 <_printf_common+0xac>
 802521c:	f04f 30ff 	mov.w	r0, #4294967295
 8025220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025224:	3501      	adds	r5, #1
 8025226:	e7c6      	b.n	80251b6 <_printf_common+0x3e>
 8025228:	18e1      	adds	r1, r4, r3
 802522a:	1c5a      	adds	r2, r3, #1
 802522c:	2030      	movs	r0, #48	@ 0x30
 802522e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025232:	4422      	add	r2, r4
 8025234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802523c:	3302      	adds	r3, #2
 802523e:	e7c7      	b.n	80251d0 <_printf_common+0x58>
 8025240:	2301      	movs	r3, #1
 8025242:	4622      	mov	r2, r4
 8025244:	4641      	mov	r1, r8
 8025246:	4638      	mov	r0, r7
 8025248:	47c8      	blx	r9
 802524a:	3001      	adds	r0, #1
 802524c:	d0e6      	beq.n	802521c <_printf_common+0xa4>
 802524e:	3601      	adds	r6, #1
 8025250:	e7d9      	b.n	8025206 <_printf_common+0x8e>
	...

08025254 <_printf_i>:
 8025254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025258:	7e0f      	ldrb	r7, [r1, #24]
 802525a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802525c:	2f78      	cmp	r7, #120	@ 0x78
 802525e:	4691      	mov	r9, r2
 8025260:	4680      	mov	r8, r0
 8025262:	460c      	mov	r4, r1
 8025264:	469a      	mov	sl, r3
 8025266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802526a:	d807      	bhi.n	802527c <_printf_i+0x28>
 802526c:	2f62      	cmp	r7, #98	@ 0x62
 802526e:	d80a      	bhi.n	8025286 <_printf_i+0x32>
 8025270:	2f00      	cmp	r7, #0
 8025272:	f000 80d1 	beq.w	8025418 <_printf_i+0x1c4>
 8025276:	2f58      	cmp	r7, #88	@ 0x58
 8025278:	f000 80b8 	beq.w	80253ec <_printf_i+0x198>
 802527c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025284:	e03a      	b.n	80252fc <_printf_i+0xa8>
 8025286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802528a:	2b15      	cmp	r3, #21
 802528c:	d8f6      	bhi.n	802527c <_printf_i+0x28>
 802528e:	a101      	add	r1, pc, #4	@ (adr r1, 8025294 <_printf_i+0x40>)
 8025290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025294:	080252ed 	.word	0x080252ed
 8025298:	08025301 	.word	0x08025301
 802529c:	0802527d 	.word	0x0802527d
 80252a0:	0802527d 	.word	0x0802527d
 80252a4:	0802527d 	.word	0x0802527d
 80252a8:	0802527d 	.word	0x0802527d
 80252ac:	08025301 	.word	0x08025301
 80252b0:	0802527d 	.word	0x0802527d
 80252b4:	0802527d 	.word	0x0802527d
 80252b8:	0802527d 	.word	0x0802527d
 80252bc:	0802527d 	.word	0x0802527d
 80252c0:	080253ff 	.word	0x080253ff
 80252c4:	0802532b 	.word	0x0802532b
 80252c8:	080253b9 	.word	0x080253b9
 80252cc:	0802527d 	.word	0x0802527d
 80252d0:	0802527d 	.word	0x0802527d
 80252d4:	08025421 	.word	0x08025421
 80252d8:	0802527d 	.word	0x0802527d
 80252dc:	0802532b 	.word	0x0802532b
 80252e0:	0802527d 	.word	0x0802527d
 80252e4:	0802527d 	.word	0x0802527d
 80252e8:	080253c1 	.word	0x080253c1
 80252ec:	6833      	ldr	r3, [r6, #0]
 80252ee:	1d1a      	adds	r2, r3, #4
 80252f0:	681b      	ldr	r3, [r3, #0]
 80252f2:	6032      	str	r2, [r6, #0]
 80252f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80252f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80252fc:	2301      	movs	r3, #1
 80252fe:	e09c      	b.n	802543a <_printf_i+0x1e6>
 8025300:	6833      	ldr	r3, [r6, #0]
 8025302:	6820      	ldr	r0, [r4, #0]
 8025304:	1d19      	adds	r1, r3, #4
 8025306:	6031      	str	r1, [r6, #0]
 8025308:	0606      	lsls	r6, r0, #24
 802530a:	d501      	bpl.n	8025310 <_printf_i+0xbc>
 802530c:	681d      	ldr	r5, [r3, #0]
 802530e:	e003      	b.n	8025318 <_printf_i+0xc4>
 8025310:	0645      	lsls	r5, r0, #25
 8025312:	d5fb      	bpl.n	802530c <_printf_i+0xb8>
 8025314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025318:	2d00      	cmp	r5, #0
 802531a:	da03      	bge.n	8025324 <_printf_i+0xd0>
 802531c:	232d      	movs	r3, #45	@ 0x2d
 802531e:	426d      	negs	r5, r5
 8025320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025324:	4858      	ldr	r0, [pc, #352]	@ (8025488 <_printf_i+0x234>)
 8025326:	230a      	movs	r3, #10
 8025328:	e011      	b.n	802534e <_printf_i+0xfa>
 802532a:	6821      	ldr	r1, [r4, #0]
 802532c:	6833      	ldr	r3, [r6, #0]
 802532e:	0608      	lsls	r0, r1, #24
 8025330:	f853 5b04 	ldr.w	r5, [r3], #4
 8025334:	d402      	bmi.n	802533c <_printf_i+0xe8>
 8025336:	0649      	lsls	r1, r1, #25
 8025338:	bf48      	it	mi
 802533a:	b2ad      	uxthmi	r5, r5
 802533c:	2f6f      	cmp	r7, #111	@ 0x6f
 802533e:	4852      	ldr	r0, [pc, #328]	@ (8025488 <_printf_i+0x234>)
 8025340:	6033      	str	r3, [r6, #0]
 8025342:	bf14      	ite	ne
 8025344:	230a      	movne	r3, #10
 8025346:	2308      	moveq	r3, #8
 8025348:	2100      	movs	r1, #0
 802534a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802534e:	6866      	ldr	r6, [r4, #4]
 8025350:	60a6      	str	r6, [r4, #8]
 8025352:	2e00      	cmp	r6, #0
 8025354:	db05      	blt.n	8025362 <_printf_i+0x10e>
 8025356:	6821      	ldr	r1, [r4, #0]
 8025358:	432e      	orrs	r6, r5
 802535a:	f021 0104 	bic.w	r1, r1, #4
 802535e:	6021      	str	r1, [r4, #0]
 8025360:	d04b      	beq.n	80253fa <_printf_i+0x1a6>
 8025362:	4616      	mov	r6, r2
 8025364:	fbb5 f1f3 	udiv	r1, r5, r3
 8025368:	fb03 5711 	mls	r7, r3, r1, r5
 802536c:	5dc7      	ldrb	r7, [r0, r7]
 802536e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025372:	462f      	mov	r7, r5
 8025374:	42bb      	cmp	r3, r7
 8025376:	460d      	mov	r5, r1
 8025378:	d9f4      	bls.n	8025364 <_printf_i+0x110>
 802537a:	2b08      	cmp	r3, #8
 802537c:	d10b      	bne.n	8025396 <_printf_i+0x142>
 802537e:	6823      	ldr	r3, [r4, #0]
 8025380:	07df      	lsls	r7, r3, #31
 8025382:	d508      	bpl.n	8025396 <_printf_i+0x142>
 8025384:	6923      	ldr	r3, [r4, #16]
 8025386:	6861      	ldr	r1, [r4, #4]
 8025388:	4299      	cmp	r1, r3
 802538a:	bfde      	ittt	le
 802538c:	2330      	movle	r3, #48	@ 0x30
 802538e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025396:	1b92      	subs	r2, r2, r6
 8025398:	6122      	str	r2, [r4, #16]
 802539a:	f8cd a000 	str.w	sl, [sp]
 802539e:	464b      	mov	r3, r9
 80253a0:	aa03      	add	r2, sp, #12
 80253a2:	4621      	mov	r1, r4
 80253a4:	4640      	mov	r0, r8
 80253a6:	f7ff fee7 	bl	8025178 <_printf_common>
 80253aa:	3001      	adds	r0, #1
 80253ac:	d14a      	bne.n	8025444 <_printf_i+0x1f0>
 80253ae:	f04f 30ff 	mov.w	r0, #4294967295
 80253b2:	b004      	add	sp, #16
 80253b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80253b8:	6823      	ldr	r3, [r4, #0]
 80253ba:	f043 0320 	orr.w	r3, r3, #32
 80253be:	6023      	str	r3, [r4, #0]
 80253c0:	4832      	ldr	r0, [pc, #200]	@ (802548c <_printf_i+0x238>)
 80253c2:	2778      	movs	r7, #120	@ 0x78
 80253c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80253c8:	6823      	ldr	r3, [r4, #0]
 80253ca:	6831      	ldr	r1, [r6, #0]
 80253cc:	061f      	lsls	r7, r3, #24
 80253ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80253d2:	d402      	bmi.n	80253da <_printf_i+0x186>
 80253d4:	065f      	lsls	r7, r3, #25
 80253d6:	bf48      	it	mi
 80253d8:	b2ad      	uxthmi	r5, r5
 80253da:	6031      	str	r1, [r6, #0]
 80253dc:	07d9      	lsls	r1, r3, #31
 80253de:	bf44      	itt	mi
 80253e0:	f043 0320 	orrmi.w	r3, r3, #32
 80253e4:	6023      	strmi	r3, [r4, #0]
 80253e6:	b11d      	cbz	r5, 80253f0 <_printf_i+0x19c>
 80253e8:	2310      	movs	r3, #16
 80253ea:	e7ad      	b.n	8025348 <_printf_i+0xf4>
 80253ec:	4826      	ldr	r0, [pc, #152]	@ (8025488 <_printf_i+0x234>)
 80253ee:	e7e9      	b.n	80253c4 <_printf_i+0x170>
 80253f0:	6823      	ldr	r3, [r4, #0]
 80253f2:	f023 0320 	bic.w	r3, r3, #32
 80253f6:	6023      	str	r3, [r4, #0]
 80253f8:	e7f6      	b.n	80253e8 <_printf_i+0x194>
 80253fa:	4616      	mov	r6, r2
 80253fc:	e7bd      	b.n	802537a <_printf_i+0x126>
 80253fe:	6833      	ldr	r3, [r6, #0]
 8025400:	6825      	ldr	r5, [r4, #0]
 8025402:	6961      	ldr	r1, [r4, #20]
 8025404:	1d18      	adds	r0, r3, #4
 8025406:	6030      	str	r0, [r6, #0]
 8025408:	062e      	lsls	r6, r5, #24
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	d501      	bpl.n	8025412 <_printf_i+0x1be>
 802540e:	6019      	str	r1, [r3, #0]
 8025410:	e002      	b.n	8025418 <_printf_i+0x1c4>
 8025412:	0668      	lsls	r0, r5, #25
 8025414:	d5fb      	bpl.n	802540e <_printf_i+0x1ba>
 8025416:	8019      	strh	r1, [r3, #0]
 8025418:	2300      	movs	r3, #0
 802541a:	6123      	str	r3, [r4, #16]
 802541c:	4616      	mov	r6, r2
 802541e:	e7bc      	b.n	802539a <_printf_i+0x146>
 8025420:	6833      	ldr	r3, [r6, #0]
 8025422:	1d1a      	adds	r2, r3, #4
 8025424:	6032      	str	r2, [r6, #0]
 8025426:	681e      	ldr	r6, [r3, #0]
 8025428:	6862      	ldr	r2, [r4, #4]
 802542a:	2100      	movs	r1, #0
 802542c:	4630      	mov	r0, r6
 802542e:	f7da ff57 	bl	80002e0 <memchr>
 8025432:	b108      	cbz	r0, 8025438 <_printf_i+0x1e4>
 8025434:	1b80      	subs	r0, r0, r6
 8025436:	6060      	str	r0, [r4, #4]
 8025438:	6863      	ldr	r3, [r4, #4]
 802543a:	6123      	str	r3, [r4, #16]
 802543c:	2300      	movs	r3, #0
 802543e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025442:	e7aa      	b.n	802539a <_printf_i+0x146>
 8025444:	6923      	ldr	r3, [r4, #16]
 8025446:	4632      	mov	r2, r6
 8025448:	4649      	mov	r1, r9
 802544a:	4640      	mov	r0, r8
 802544c:	47d0      	blx	sl
 802544e:	3001      	adds	r0, #1
 8025450:	d0ad      	beq.n	80253ae <_printf_i+0x15a>
 8025452:	6823      	ldr	r3, [r4, #0]
 8025454:	079b      	lsls	r3, r3, #30
 8025456:	d413      	bmi.n	8025480 <_printf_i+0x22c>
 8025458:	68e0      	ldr	r0, [r4, #12]
 802545a:	9b03      	ldr	r3, [sp, #12]
 802545c:	4298      	cmp	r0, r3
 802545e:	bfb8      	it	lt
 8025460:	4618      	movlt	r0, r3
 8025462:	e7a6      	b.n	80253b2 <_printf_i+0x15e>
 8025464:	2301      	movs	r3, #1
 8025466:	4632      	mov	r2, r6
 8025468:	4649      	mov	r1, r9
 802546a:	4640      	mov	r0, r8
 802546c:	47d0      	blx	sl
 802546e:	3001      	adds	r0, #1
 8025470:	d09d      	beq.n	80253ae <_printf_i+0x15a>
 8025472:	3501      	adds	r5, #1
 8025474:	68e3      	ldr	r3, [r4, #12]
 8025476:	9903      	ldr	r1, [sp, #12]
 8025478:	1a5b      	subs	r3, r3, r1
 802547a:	42ab      	cmp	r3, r5
 802547c:	dcf2      	bgt.n	8025464 <_printf_i+0x210>
 802547e:	e7eb      	b.n	8025458 <_printf_i+0x204>
 8025480:	2500      	movs	r5, #0
 8025482:	f104 0619 	add.w	r6, r4, #25
 8025486:	e7f5      	b.n	8025474 <_printf_i+0x220>
 8025488:	080274cc 	.word	0x080274cc
 802548c:	080274dd 	.word	0x080274dd

08025490 <__sflush_r>:
 8025490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025498:	0716      	lsls	r6, r2, #28
 802549a:	4605      	mov	r5, r0
 802549c:	460c      	mov	r4, r1
 802549e:	d454      	bmi.n	802554a <__sflush_r+0xba>
 80254a0:	684b      	ldr	r3, [r1, #4]
 80254a2:	2b00      	cmp	r3, #0
 80254a4:	dc02      	bgt.n	80254ac <__sflush_r+0x1c>
 80254a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80254a8:	2b00      	cmp	r3, #0
 80254aa:	dd48      	ble.n	802553e <__sflush_r+0xae>
 80254ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80254ae:	2e00      	cmp	r6, #0
 80254b0:	d045      	beq.n	802553e <__sflush_r+0xae>
 80254b2:	2300      	movs	r3, #0
 80254b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80254b8:	682f      	ldr	r7, [r5, #0]
 80254ba:	6a21      	ldr	r1, [r4, #32]
 80254bc:	602b      	str	r3, [r5, #0]
 80254be:	d030      	beq.n	8025522 <__sflush_r+0x92>
 80254c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80254c2:	89a3      	ldrh	r3, [r4, #12]
 80254c4:	0759      	lsls	r1, r3, #29
 80254c6:	d505      	bpl.n	80254d4 <__sflush_r+0x44>
 80254c8:	6863      	ldr	r3, [r4, #4]
 80254ca:	1ad2      	subs	r2, r2, r3
 80254cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80254ce:	b10b      	cbz	r3, 80254d4 <__sflush_r+0x44>
 80254d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80254d2:	1ad2      	subs	r2, r2, r3
 80254d4:	2300      	movs	r3, #0
 80254d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80254d8:	6a21      	ldr	r1, [r4, #32]
 80254da:	4628      	mov	r0, r5
 80254dc:	47b0      	blx	r6
 80254de:	1c43      	adds	r3, r0, #1
 80254e0:	89a3      	ldrh	r3, [r4, #12]
 80254e2:	d106      	bne.n	80254f2 <__sflush_r+0x62>
 80254e4:	6829      	ldr	r1, [r5, #0]
 80254e6:	291d      	cmp	r1, #29
 80254e8:	d82b      	bhi.n	8025542 <__sflush_r+0xb2>
 80254ea:	4a2a      	ldr	r2, [pc, #168]	@ (8025594 <__sflush_r+0x104>)
 80254ec:	40ca      	lsrs	r2, r1
 80254ee:	07d6      	lsls	r6, r2, #31
 80254f0:	d527      	bpl.n	8025542 <__sflush_r+0xb2>
 80254f2:	2200      	movs	r2, #0
 80254f4:	6062      	str	r2, [r4, #4]
 80254f6:	04d9      	lsls	r1, r3, #19
 80254f8:	6922      	ldr	r2, [r4, #16]
 80254fa:	6022      	str	r2, [r4, #0]
 80254fc:	d504      	bpl.n	8025508 <__sflush_r+0x78>
 80254fe:	1c42      	adds	r2, r0, #1
 8025500:	d101      	bne.n	8025506 <__sflush_r+0x76>
 8025502:	682b      	ldr	r3, [r5, #0]
 8025504:	b903      	cbnz	r3, 8025508 <__sflush_r+0x78>
 8025506:	6560      	str	r0, [r4, #84]	@ 0x54
 8025508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802550a:	602f      	str	r7, [r5, #0]
 802550c:	b1b9      	cbz	r1, 802553e <__sflush_r+0xae>
 802550e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025512:	4299      	cmp	r1, r3
 8025514:	d002      	beq.n	802551c <__sflush_r+0x8c>
 8025516:	4628      	mov	r0, r5
 8025518:	f7ff fca2 	bl	8024e60 <_free_r>
 802551c:	2300      	movs	r3, #0
 802551e:	6363      	str	r3, [r4, #52]	@ 0x34
 8025520:	e00d      	b.n	802553e <__sflush_r+0xae>
 8025522:	2301      	movs	r3, #1
 8025524:	4628      	mov	r0, r5
 8025526:	47b0      	blx	r6
 8025528:	4602      	mov	r2, r0
 802552a:	1c50      	adds	r0, r2, #1
 802552c:	d1c9      	bne.n	80254c2 <__sflush_r+0x32>
 802552e:	682b      	ldr	r3, [r5, #0]
 8025530:	2b00      	cmp	r3, #0
 8025532:	d0c6      	beq.n	80254c2 <__sflush_r+0x32>
 8025534:	2b1d      	cmp	r3, #29
 8025536:	d001      	beq.n	802553c <__sflush_r+0xac>
 8025538:	2b16      	cmp	r3, #22
 802553a:	d11e      	bne.n	802557a <__sflush_r+0xea>
 802553c:	602f      	str	r7, [r5, #0]
 802553e:	2000      	movs	r0, #0
 8025540:	e022      	b.n	8025588 <__sflush_r+0xf8>
 8025542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025546:	b21b      	sxth	r3, r3
 8025548:	e01b      	b.n	8025582 <__sflush_r+0xf2>
 802554a:	690f      	ldr	r7, [r1, #16]
 802554c:	2f00      	cmp	r7, #0
 802554e:	d0f6      	beq.n	802553e <__sflush_r+0xae>
 8025550:	0793      	lsls	r3, r2, #30
 8025552:	680e      	ldr	r6, [r1, #0]
 8025554:	bf08      	it	eq
 8025556:	694b      	ldreq	r3, [r1, #20]
 8025558:	600f      	str	r7, [r1, #0]
 802555a:	bf18      	it	ne
 802555c:	2300      	movne	r3, #0
 802555e:	eba6 0807 	sub.w	r8, r6, r7
 8025562:	608b      	str	r3, [r1, #8]
 8025564:	f1b8 0f00 	cmp.w	r8, #0
 8025568:	dde9      	ble.n	802553e <__sflush_r+0xae>
 802556a:	6a21      	ldr	r1, [r4, #32]
 802556c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802556e:	4643      	mov	r3, r8
 8025570:	463a      	mov	r2, r7
 8025572:	4628      	mov	r0, r5
 8025574:	47b0      	blx	r6
 8025576:	2800      	cmp	r0, #0
 8025578:	dc08      	bgt.n	802558c <__sflush_r+0xfc>
 802557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802557e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025582:	81a3      	strh	r3, [r4, #12]
 8025584:	f04f 30ff 	mov.w	r0, #4294967295
 8025588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802558c:	4407      	add	r7, r0
 802558e:	eba8 0800 	sub.w	r8, r8, r0
 8025592:	e7e7      	b.n	8025564 <__sflush_r+0xd4>
 8025594:	20400001 	.word	0x20400001

08025598 <_fflush_r>:
 8025598:	b538      	push	{r3, r4, r5, lr}
 802559a:	690b      	ldr	r3, [r1, #16]
 802559c:	4605      	mov	r5, r0
 802559e:	460c      	mov	r4, r1
 80255a0:	b913      	cbnz	r3, 80255a8 <_fflush_r+0x10>
 80255a2:	2500      	movs	r5, #0
 80255a4:	4628      	mov	r0, r5
 80255a6:	bd38      	pop	{r3, r4, r5, pc}
 80255a8:	b118      	cbz	r0, 80255b2 <_fflush_r+0x1a>
 80255aa:	6a03      	ldr	r3, [r0, #32]
 80255ac:	b90b      	cbnz	r3, 80255b2 <_fflush_r+0x1a>
 80255ae:	f7ff f9eb 	bl	8024988 <__sinit>
 80255b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	d0f3      	beq.n	80255a2 <_fflush_r+0xa>
 80255ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80255bc:	07d0      	lsls	r0, r2, #31
 80255be:	d404      	bmi.n	80255ca <_fflush_r+0x32>
 80255c0:	0599      	lsls	r1, r3, #22
 80255c2:	d402      	bmi.n	80255ca <_fflush_r+0x32>
 80255c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255c6:	f7ff fbde 	bl	8024d86 <__retarget_lock_acquire_recursive>
 80255ca:	4628      	mov	r0, r5
 80255cc:	4621      	mov	r1, r4
 80255ce:	f7ff ff5f 	bl	8025490 <__sflush_r>
 80255d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255d4:	07da      	lsls	r2, r3, #31
 80255d6:	4605      	mov	r5, r0
 80255d8:	d4e4      	bmi.n	80255a4 <_fflush_r+0xc>
 80255da:	89a3      	ldrh	r3, [r4, #12]
 80255dc:	059b      	lsls	r3, r3, #22
 80255de:	d4e1      	bmi.n	80255a4 <_fflush_r+0xc>
 80255e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255e2:	f7ff fbd1 	bl	8024d88 <__retarget_lock_release_recursive>
 80255e6:	e7dd      	b.n	80255a4 <_fflush_r+0xc>

080255e8 <__swhatbuf_r>:
 80255e8:	b570      	push	{r4, r5, r6, lr}
 80255ea:	460c      	mov	r4, r1
 80255ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255f0:	2900      	cmp	r1, #0
 80255f2:	b096      	sub	sp, #88	@ 0x58
 80255f4:	4615      	mov	r5, r2
 80255f6:	461e      	mov	r6, r3
 80255f8:	da0d      	bge.n	8025616 <__swhatbuf_r+0x2e>
 80255fa:	89a3      	ldrh	r3, [r4, #12]
 80255fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025600:	f04f 0100 	mov.w	r1, #0
 8025604:	bf14      	ite	ne
 8025606:	2340      	movne	r3, #64	@ 0x40
 8025608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802560c:	2000      	movs	r0, #0
 802560e:	6031      	str	r1, [r6, #0]
 8025610:	602b      	str	r3, [r5, #0]
 8025612:	b016      	add	sp, #88	@ 0x58
 8025614:	bd70      	pop	{r4, r5, r6, pc}
 8025616:	466a      	mov	r2, sp
 8025618:	f000 f848 	bl	80256ac <_fstat_r>
 802561c:	2800      	cmp	r0, #0
 802561e:	dbec      	blt.n	80255fa <__swhatbuf_r+0x12>
 8025620:	9901      	ldr	r1, [sp, #4]
 8025622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802562a:	4259      	negs	r1, r3
 802562c:	4159      	adcs	r1, r3
 802562e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025632:	e7eb      	b.n	802560c <__swhatbuf_r+0x24>

08025634 <__smakebuf_r>:
 8025634:	898b      	ldrh	r3, [r1, #12]
 8025636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025638:	079d      	lsls	r5, r3, #30
 802563a:	4606      	mov	r6, r0
 802563c:	460c      	mov	r4, r1
 802563e:	d507      	bpl.n	8025650 <__smakebuf_r+0x1c>
 8025640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025644:	6023      	str	r3, [r4, #0]
 8025646:	6123      	str	r3, [r4, #16]
 8025648:	2301      	movs	r3, #1
 802564a:	6163      	str	r3, [r4, #20]
 802564c:	b003      	add	sp, #12
 802564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025650:	ab01      	add	r3, sp, #4
 8025652:	466a      	mov	r2, sp
 8025654:	f7ff ffc8 	bl	80255e8 <__swhatbuf_r>
 8025658:	9f00      	ldr	r7, [sp, #0]
 802565a:	4605      	mov	r5, r0
 802565c:	4639      	mov	r1, r7
 802565e:	4630      	mov	r0, r6
 8025660:	f7ff f86c 	bl	802473c <_malloc_r>
 8025664:	b948      	cbnz	r0, 802567a <__smakebuf_r+0x46>
 8025666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802566a:	059a      	lsls	r2, r3, #22
 802566c:	d4ee      	bmi.n	802564c <__smakebuf_r+0x18>
 802566e:	f023 0303 	bic.w	r3, r3, #3
 8025672:	f043 0302 	orr.w	r3, r3, #2
 8025676:	81a3      	strh	r3, [r4, #12]
 8025678:	e7e2      	b.n	8025640 <__smakebuf_r+0xc>
 802567a:	89a3      	ldrh	r3, [r4, #12]
 802567c:	6020      	str	r0, [r4, #0]
 802567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025682:	81a3      	strh	r3, [r4, #12]
 8025684:	9b01      	ldr	r3, [sp, #4]
 8025686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802568a:	b15b      	cbz	r3, 80256a4 <__smakebuf_r+0x70>
 802568c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025690:	4630      	mov	r0, r6
 8025692:	f000 f81d 	bl	80256d0 <_isatty_r>
 8025696:	b128      	cbz	r0, 80256a4 <__smakebuf_r+0x70>
 8025698:	89a3      	ldrh	r3, [r4, #12]
 802569a:	f023 0303 	bic.w	r3, r3, #3
 802569e:	f043 0301 	orr.w	r3, r3, #1
 80256a2:	81a3      	strh	r3, [r4, #12]
 80256a4:	89a3      	ldrh	r3, [r4, #12]
 80256a6:	431d      	orrs	r5, r3
 80256a8:	81a5      	strh	r5, [r4, #12]
 80256aa:	e7cf      	b.n	802564c <__smakebuf_r+0x18>

080256ac <_fstat_r>:
 80256ac:	b538      	push	{r3, r4, r5, lr}
 80256ae:	4d07      	ldr	r5, [pc, #28]	@ (80256cc <_fstat_r+0x20>)
 80256b0:	2300      	movs	r3, #0
 80256b2:	4604      	mov	r4, r0
 80256b4:	4608      	mov	r0, r1
 80256b6:	4611      	mov	r1, r2
 80256b8:	602b      	str	r3, [r5, #0]
 80256ba:	f7dc f938 	bl	800192e <_fstat>
 80256be:	1c43      	adds	r3, r0, #1
 80256c0:	d102      	bne.n	80256c8 <_fstat_r+0x1c>
 80256c2:	682b      	ldr	r3, [r5, #0]
 80256c4:	b103      	cbz	r3, 80256c8 <_fstat_r+0x1c>
 80256c6:	6023      	str	r3, [r4, #0]
 80256c8:	bd38      	pop	{r3, r4, r5, pc}
 80256ca:	bf00      	nop
 80256cc:	24025f34 	.word	0x24025f34

080256d0 <_isatty_r>:
 80256d0:	b538      	push	{r3, r4, r5, lr}
 80256d2:	4d06      	ldr	r5, [pc, #24]	@ (80256ec <_isatty_r+0x1c>)
 80256d4:	2300      	movs	r3, #0
 80256d6:	4604      	mov	r4, r0
 80256d8:	4608      	mov	r0, r1
 80256da:	602b      	str	r3, [r5, #0]
 80256dc:	f7dc f92c 	bl	8001938 <_isatty>
 80256e0:	1c43      	adds	r3, r0, #1
 80256e2:	d102      	bne.n	80256ea <_isatty_r+0x1a>
 80256e4:	682b      	ldr	r3, [r5, #0]
 80256e6:	b103      	cbz	r3, 80256ea <_isatty_r+0x1a>
 80256e8:	6023      	str	r3, [r4, #0]
 80256ea:	bd38      	pop	{r3, r4, r5, pc}
 80256ec:	24025f34 	.word	0x24025f34

080256f0 <_init>:
 80256f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256f2:	bf00      	nop
 80256f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80256f6:	bc08      	pop	{r3}
 80256f8:	469e      	mov	lr, r3
 80256fa:	4770      	bx	lr

080256fc <_fini>:
 80256fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256fe:	bf00      	nop
 8025700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025702:	bc08      	pop	{r3}
 8025704:	469e      	mov	lr, r3
 8025706:	4770      	bx	lr
