
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000230b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000378c  08023358  08023358  00024358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000080a  08026ae4  08026ae4  00027ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  080272f0  080272f0  000282f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0023f300  90000000  90000000  00033000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001e  9023f300  9023f300  00272300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08027310  08027310  0027231e  2**0
                  CONTENTS
  8 .ARM          00000008  08027310  08027310  00028310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08027318  08027318  0027231e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08027318  08027318  00028318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08027334  08027334  00028334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  0802733c  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  08027478  00029140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802bf78  0002dc40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  08030a78  00032740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  08030b78  00032840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c64c  24009940  08030c78  00032940  2**2
                  ALLOC
 18 ._user_heap_stack 00002004  24025f8c  08030c78  00032f8c  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  0027231e  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00273000  2**2
                  ALLOC
 21 .debug_info   000cb74e  00000000  00000000  0027234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00016cfe  00000000  00000000  0033da9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003b10  00000000  00000000  00354798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00003e2e  00000000  00000000  003582a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00052b64  00000000  00000000  0035c0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   00065c6e  00000000  00000000  003aec3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001e103e  00000000  00000000  004148a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  005f58e6  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000a6f4  00000000  00000000  005f59a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00024718  00000000  00000000  0060009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 00000067  00000000  00000000  006247b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023340 	.word	0x08023340

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08023340 	.word	0x08023340

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c bbce 	b.w	800ce9c <vTaskSetApplicationTaskTag>
 8000700:	08002045 	.word	0x08002045

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f022 f883 	bl	8022818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f022 f87e 	bl	8022818 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fd91 	bl	8009244 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f009 f858 	bl	8009838 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 fbde 	bl	8009f68 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 fae6 	bl	8009d88 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f022 f81e 	bl	8022818 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 ff3a 	bl	8006654 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 ff4d 	bl	8006690 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 ff45 	bl	8006690 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 ff37 	bl	8006690 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 ff28 	bl	8006690 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 ff1d 	bl	8006690 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 ff10 	bl	8006690 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fefd 	bl	8006670 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fda9 	bl	800947c <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f005 f969 	bl	8005c14 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f005 f910 	bl	8005b6c <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 ff20 	bl	80067aa <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f006 fdfa 	bl	8007570 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fded 	bl	800655c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f006 fdf2 	bl	8007570 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fde5 	bl	800655c <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f021 ff3e 	bl	8022818 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f021 ff39 	bl	8022818 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f021 ff34 	bl	8022818 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f021 ff2f 	bl	8022818 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f006 f836 	bl	8006a44 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f006 fa92 	bl	8006f1c <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 fa44 	bl	8006ea2 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f006 fa2c 	bl	8006e80 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f006 fbfb 	bl	800722e <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f005 ff9c 	bl	800697e <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f006 f9ba 	bl	8006e18 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f006 f92f 	bl	8006d34 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240099c8 	.word	0x240099c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24009c08 	.word	0x24009c08
 8000afc:	58021800 	.word	0x58021800
 8000b00:	24009bec 	.word	0x24009bec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f006 f902 	bl	8006d12 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f021 fe7b 	bl	8022818 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f008 f865 	bl	8008c30 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f008 f8fa 	bl	8008d9a <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f006 fa15 	bl	8006fe8 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fdc2 	bl	8005758 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f004 fa2d 	bl	8005038 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 fa31 	bl	800704e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f006 f907 	bl	8006e18 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f008 f8ef 	bl	8008df4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f005 fd5b 	bl	80066e8 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f007 f9f1 	bl	8008024 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00a fbca 	bl	800b3e8 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00a fbf1 	bl	800b440 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00a fbea 	bl	800b440 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00a fbcc 	bl	800b40c <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	24009bec 	.word	0x24009bec
 8000c7c:	24009a14 	.word	0x24009a14
 8000c80:	2400995c 	.word	0x2400995c
 8000c84:	08005b3d 	.word	0x08005b3d
 8000c88:	2400996c 	.word	0x2400996c
 8000c8c:	08001d3d 	.word	0x08001d3d
 8000c90:	08001d75 	.word	0x08001d75
 8000c94:	24009c70 	.word	0x24009c70
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24009b94 	.word	0x24009b94
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	08025264 	.word	0x08025264
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24009990 	.word	0x24009990
 8000cb0:	08025240 	.word	0x08025240
 8000cb4:	080038d1 	.word	0x080038d1
 8000cb8:	2400998c 	.word	0x2400998c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f021 fda6 	bl	8022818 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 fbcc 	bl	8007570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f006 fbc7 	bl	8007570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f006 fbc1 	bl	8007570 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f006 fa2d 	bl	800725c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f006 fa23 	bl	800725c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f006 fa1b 	bl	800725c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f006 fa13 	bl	800725c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f005 fbab 	bl	80065b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f005 fbda 	bl	8006614 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f009 ffe9 	bl	800ae80 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f005 f867 	bl	8005f88 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f005 f8b2 	bl	8006024 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f005 fb06 	bl	80064dc <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f006 fb4d 	bl	800758c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f006 fb57 	bl	80075a8 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24009994 	.word	0x24009994
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f005 bafe 	b.w	8006538 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f005 bb1f 	b.w	80065b0 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f005 faed 	bl	80065b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f005 bb19 	b.w	8006614 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f021 fc0c 	bl	8022818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f021 fc07 	bl	8022818 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f009 fa25 	bl	800a46c <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f006 f8f4 	bl	800725c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f005 fa99 	bl	80065b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f005 fac8 	bl	8006614 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f007 fedc 	bl	8008eae <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f007 ff62 	bl	8008fca <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f007 feb0 	bl	8008eae <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f007 ff36 	bl	8008fca <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f005 fa1f 	bl	80065b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f005 ba4b 	b.w	8006614 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24009b28 	.word	0x24009b28
 8001190:	520001c0 	.word	0x520001c0
 8001194:	24009abc 	.word	0x24009abc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f021 fb36 	bl	8022818 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f009 f948 	bl	800a46c <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f005 f9d5 	bl	80065b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f005 fa04 	bl	8006614 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f021 faf8 	bl	8022818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f021 faf3 	bl	8022818 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f009 f910 	bl	800a46c <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f005 ffad 	bl	800725c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 ffa3 	bl	800725c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f005 ff99 	bl	800725c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f005 ff8e 	bl	800725c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f005 ff84 	bl	800725c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f005 ff7a 	bl	800725c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f005 ff6f 	bl	800725c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f021 fa35 	bl	8022818 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f021 fa2b 	bl	8022818 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f009 f84d 	bl	800a46c <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f005 ff26 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f005 ff1c 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f005 ff11 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f005 ff06 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f005 fefb 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f005 fef0 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f005 fee5 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f005 fedb 	bl	800725c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24009c98 	.word	0x24009c98
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f005 ff9a 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f005 ff96 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f005 ff91 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f005 ff8c 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f005 ff87 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f005 ff82 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f005 ff7d 	bl	800742c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f005 bf77 	b.w	800742c <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24009c94 	.word	0x24009c94
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f005 f817 	bl	80065b0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f005 f846 	bl	8006614 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f008 fe49 	bl	800a240 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f008 fe21 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f009 fe32 	bl	800b23c <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f009 fcf7 	bl	800afd0 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f008 fe08 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	24009c9c 	.word	0x24009c9c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f009 bd21 	b.w	800b054 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	24009c9c 	.word	0x24009c9c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f007 bb61 	b.w	8008ce0 <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24009a14 	.word	0x24009a14

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f005 b8ff 	b.w	8006828 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24009c08 	.word	0x24009c08

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f007 ba2d 	b.w	8008a90 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24009b94 	.word	0x24009b94

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f007 fd48 	bl	80090d4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f007 bd43 	b.w	80090d4 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	24009abc 	.word	0x24009abc
 8001654:	24009b28 	.word	0x24009b28

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f005 bae8 	b.w	8006c2e <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	24009bec 	.word	0x24009bec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f021 f989 	bl	8022980 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f021 f981 	bl	8022980 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f021 f946 	bl	8022980 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	24009ce8 	.word	0x24009ce8
 8001708:	24025f90 	.word	0x24025f90
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f004 fe70 	bl	80063fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f021 f923 	bl	802298c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	0802733c 	.word	0x0802733c
  ldr r2, =_sbss
 800175c:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 8001760:	24025f8c 	.word	0x24025f8c

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd25 	bl	80031b8 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bca9 	b.w	80030c8 <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd21 	b.w	80031bc <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	24009cec 	.word	0x24009cec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f008 fcde 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 fb13 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f009 fd19 	bl	800b23c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f009 bba3 	b.w	800af5c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f008 fcef 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	24009cec 	.word	0x24009cec
 8001828:	08025fd8 	.word	0x08025fd8

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f020 f9de 	bl	8021bf2 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f004 fd66 	bl	8006344 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24009d48 	.word	0x24009d48
 800188c:	24009d38 	.word	0x24009d38

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f020 f9ac 	bl	8021bf2 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f004 fcb3 	bl	8006224 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f020 fd03 	bl	80222e0 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24009d44 	.word	0x24009d44
 80018e0:	24009d48 	.word	0x24009d48
 80018e4:	080233af 	.word	0x080233af
 80018e8:	080233c2 	.word	0x080233c2
 80018ec:	080233ec 	.word	0x080233ec

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f005 be31 	b.w	8007570 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24009d4c 	.word	0x24009d4c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f005 be01 	b.w	8007570 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24009d4c 	.word	0x24009d4c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f005 bddb 	b.w	800757a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f005 fdb5 	bl	8007564 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	24009d4c 	.word	0x24009d4c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001a58:	4770      	bx	lr

08001a5a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4770      	bx	lr
	...

08001a60 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a60:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a62:	3900      	subs	r1, #0
 8001a64:	4b02      	ldr	r3, [pc, #8]	@ (8001a70 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a66:	bf18      	it	ne
 8001a68:	2101      	movne	r1, #1
 8001a6a:	7019      	strb	r1, [r3, #0]
    }
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	2402526b 	.word	0x2402526b

08001a74 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001a74:	4770      	bx	lr

08001a76 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a76:	2000      	movs	r0, #0
 8001a78:	4770      	bx	lr

08001a7a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a7a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a7c:	b10b      	cbz	r3, 8001a82 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4718      	bx	r3
        }
    }
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a84:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a88:	4770      	bx	lr

08001a8a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a8a:	6840      	ldr	r0, [r0, #4]
 8001a8c:	6803      	ldr	r3, [r0, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4718      	bx	r3

08001a92 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001a92:	4770      	bx	lr

08001a94 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001a94:	4770      	bx	lr
	...

08001a98 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a98:	4b01      	ldr	r3, [pc, #4]	@ (8001aa0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	24009d70 	.word	0x24009d70

08001aa4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001aa4:	4770      	bx	lr

08001aa6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001aa6:	f001 bc86 	b.w	80033b6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001aaa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001aaa:	f001 bc17 	b.w	80032dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aae <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aae:	f001 bde7 	b.w	8003680 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ab2 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ab2:	f001 bdd9 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ab8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001abc:	f001 fd9c 	bl	80035f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ac0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ac4:	b113      	cbz	r3, 8001acc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ac6:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
    }
}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400000c 	.word	0x2400000c

08001ad4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ad4:	f001 bc0a 	b.w	80032ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ad8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001adc:	f00c fec6 	bl	800e86c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001aec:	4718      	bx	r3

08001aee <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001aee:	b510      	push	{r4, lr}
 8001af0:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001af2:	f00c fa21 	bl	800df38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	6803      	ldr	r3, [r0, #0]
    }
 8001afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4718      	bx	r3

08001b02 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001b02:	f00c b8e1 	b.w	800dcc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001b06 <_ZN11TouchGFXHALD0Ev>:
 8001b06:	b510      	push	{r4, lr}
 8001b08:	4604      	mov	r4, r0
 8001b0a:	2184      	movs	r1, #132	@ 0x84
 8001b0c:	f020 f871 	bl	8021bf2 <_ZdlPvj>
 8001b10:	4620      	mov	r0, r4
 8001b12:	bd10      	pop	{r4, pc}

08001b14 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b1a:	f00c b911 	b.w	800dd40 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b1e:	bf00      	nop
 8001b20:	2400000c 	.word	0x2400000c

08001b24 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b28:	4d06      	ldr	r5, [pc, #24]	@ (8001b44 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b2a:	f001 fc05 	bl	8003338 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b2e:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b30:	4628      	mov	r0, r5
 8001b32:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b36:	f7ff fe35 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b3a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b3c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b3e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	24009d60 	.word	0x24009d60

08001b48 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b48:	6803      	ldr	r3, [r0, #0]
{
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b52:	4798      	blx	r3
    enableInterrupts();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b5a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b5c:	f000 ff66 	bl	8002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	4620      	mov	r0, r4
 8001b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b66:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2329      	movs	r3, #41	@ 0x29
 8001b6c:	2215      	movs	r2, #21
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b70:	9100      	str	r1, [sp, #0]
 8001b72:	f005 fa6c 	bl	800704e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b76:	f000 ff59 	bl	8002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b80:	4798      	blx	r3
    for (;;)
 8001b82:	e7f8      	b.n	8001b76 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b84:	24009bec 	.word	0x24009bec

08001b88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001b88:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b8e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b90:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b94:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b96:	428c      	cmp	r4, r1
 8001b98:	d009      	beq.n	8001bae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b9a:	b93a      	cbnz	r2, 8001bac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b9c:	490a      	ldr	r1, [pc, #40]	@ (8001bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001ba4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001ba6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba8:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001baa:	701a      	strb	r2, [r3, #0]
    }
 8001bac:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d0fc      	beq.n	8001bac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb2:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb4:	4904      	ldr	r1, [pc, #16]	@ (8001bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bba:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bbc:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	e7f3      	b.n	8001baa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bc2:	bf00      	nop
 8001bc4:	24025264 	.word	0x24025264
 8001bc8:	24025262 	.word	0x24025262
 8001bcc:	24025260 	.word	0x24025260

08001bd0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bd0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d803      	bhi.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d905      	bls.n	8001bee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001be4:	21a3      	movs	r1, #163	@ 0xa3
 8001be6:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bea:	f020 fb79 	bl	80222e0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001bf0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001bf4:	801a      	strh	r2, [r3, #0]
    }
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	24025260 	.word	0x24025260
 8001bfc:	24025262 	.word	0x24025262
 8001c00:	08023435 	.word	0x08023435
 8001c04:	08023498 	.word	0x08023498
 8001c08:	080234db 	.word	0x080234db
 8001c0c:	24025266 	.word	0x24025266
 8001c10:	24025268 	.word	0x24025268

08001c14 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c14:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c16:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c1a:	b118      	cbz	r0, 8001c24 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c1c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4718      	bx	r3
    }
 8001c24:	4770      	bx	lr
	...

08001c28 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	460d      	mov	r5, r1
 8001c2c:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c30:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c32:	b935      	cbnz	r5, 8001c42 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c36:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c3e:	f020 fb4f 	bl	80222e0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c42:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c46:	3a00      	subs	r2, #0
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c4a:	bf18      	it	ne
 8001c4c:	2201      	movne	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c50:	6803      	ldr	r3, [r0, #0]
}
 8001c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	4718      	bx	r3
 8001c5c:	24009d70 	.word	0x24009d70
 8001c60:	0802352e 	.word	0x0802352e
 8001c64:	08023566 	.word	0x08023566
 8001c68:	080234db 	.word	0x080234db
 8001c6c:	2402526a 	.word	0x2402526a

08001c70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c70:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8001c72:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c76:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c82:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001c86:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c88:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c8a:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8001c8e:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c90:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c92:	8603      	strh	r3, [r0, #48]	@ 0x30
 8001c94:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8001c96:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c9a:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c9c:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 8001c9e:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8001ca2:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8001ca8:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 8001cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001cb2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001cb6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001cba:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cbe:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cc2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cc6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 8001cca:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001ccc:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8001cd6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8001cda:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001cde:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ce2:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8001ce6:	f04f 0214 	mov.w	r2, #20
 8001cea:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8001cee:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8001cf0:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8001cf4:	8015      	strh	r5, [r2, #0]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8001cf8:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cfa:	bf28      	it	cs
 8001cfc:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d00:	bf38      	it	cc
 8001d02:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d04:	8016      	strh	r6, [r2, #0]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d08:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d0c:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8001d10:	7013      	strb	r3, [r2, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8001d14:	6003      	str	r3, [r0, #0]
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	01000001 	.word	0x01000001
 8001d1c:	01010000 	.word	0x01010000
 8001d20:	2402526c 	.word	0x2402526c
 8001d24:	24025260 	.word	0x24025260
 8001d28:	24025266 	.word	0x24025266
 8001d2c:	24025262 	.word	0x24025262
 8001d30:	24025268 	.word	0x24025268
 8001d34:	24025264 	.word	0x24025264
 8001d38:	080252d0 	.word	0x080252d0

08001d3c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d3c:	2b01      	cmp	r3, #1
    {
 8001d3e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d40:	d80e      	bhi.n	8001d60 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	2215      	movs	r2, #21
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <DSI_IO_Write+0x34>)
 8001d4e:	f005 f97e 	bl	800704e <HAL_DSI_ShortWrite>
 8001d52:	b118      	cbz	r0, 8001d5c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d54:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	e7fb      	b.n	8001d58 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d60:	e9cd 1200 	strd	r1, r2, [sp]
 8001d64:	4601      	mov	r1, r0
 8001d66:	2239      	movs	r2, #57	@ 0x39
 8001d68:	4801      	ldr	r0, [pc, #4]	@ (8001d70 <DSI_IO_Write+0x34>)
 8001d6a:	f005 f981 	bl	8007070 <HAL_DSI_LongWrite>
 8001d6e:	e7f0      	b.n	8001d52 <DSI_IO_Write+0x16>
 8001d70:	24009bec 	.word	0x24009bec

08001d74 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d76:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d7a:	2106      	movs	r1, #6
 8001d7c:	9100      	str	r1, [sp, #0]
 8001d7e:	4601      	mov	r1, r0
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <DSI_IO_Read+0x24>)
 8001d82:	f005 f9d5 	bl	8007130 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d86:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d88:	bf14      	ite	ne
 8001d8a:	f06f 0007 	mvnne.w	r0, #7
 8001d8e:	2000      	moveq	r0, #0
 8001d90:	b005      	add	sp, #20
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d96:	bf00      	nop
 8001d98:	24009bec 	.word	0x24009bec

08001d9c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d9e:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001da2:	4c0b      	ldr	r4, [pc, #44]	@ (8001dd0 <LCD_ReqTear+0x34>)
 8001da4:	2239      	movs	r2, #57	@ 0x39
 8001da6:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001da8:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001dac:	ab03      	add	r3, sp, #12
 8001dae:	4620      	mov	r0, r4
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	2344      	movs	r3, #68	@ 0x44
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2302      	movs	r3, #2
 8001db8:	f005 f95a 	bl	8007070 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2335      	movs	r3, #53	@ 0x35
 8001dc0:	2215      	movs	r2, #21
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	9100      	str	r1, [sp, #0]
 8001dc6:	f005 f942 	bl	800704e <HAL_DSI_ShortWrite>
    }
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	24009bec 	.word	0x24009bec

08001dd4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001dd4:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001dd6:	f7ff ffe1 	bl	8001d9c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dda:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001de4:	2201      	movs	r2, #1
 8001de6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001df6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dfa:	f042 0202 	orr.w	r2, r2, #2
 8001dfe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001e02:	2203      	movs	r2, #3
 8001e04:	4b02      	ldr	r3, [pc, #8]	@ (8001e10 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e08:	bd08      	pop	{r3, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24009bec 	.word	0x24009bec
 8001e10:	50001000 	.word	0x50001000

08001e14 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <LCD_ReqEnable+0x20>)
    {
 8001e16:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001e18:	7819      	ldrb	r1, [r3, #0]
 8001e1a:	b939      	cbnz	r1, 8001e2c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001e1c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001e20:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001e22:	2329      	movs	r3, #41	@ 0x29
 8001e24:	2215      	movs	r2, #21
 8001e26:	9100      	str	r1, [sp, #0]
 8001e28:	f005 f911 	bl	800704e <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e2c:	b003      	add	sp, #12
 8001e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e32:	bf00      	nop
 8001e34:	24009d5c 	.word	0x24009d5c
 8001e38:	24009bec 	.word	0x24009bec

08001e3c <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e3e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	232a      	movs	r3, #42	@ 0x2a
 8001e44:	2239      	movs	r2, #57	@ 0x39
 8001e46:	2100      	movs	r1, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <LCD_SetUpdateRegionLeft+0x20>)
 8001e4e:	f005 f90f 	bl	8007070 <HAL_DSI_LongWrite>
    }
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e58:	24000008 	.word	0x24000008
 8001e5c:	24009bec 	.word	0x24009bec

08001e60 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	232a      	movs	r3, #42	@ 0x2a
 8001e68:	2239      	movs	r2, #57	@ 0x39
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2304      	movs	r3, #4
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <LCD_SetUpdateRegionRight+0x20>)
 8001e72:	f005 f8fd 	bl	8007070 <HAL_DSI_LongWrite>
    }
 8001e76:	b003      	add	sp, #12
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e7c:	24000004 	.word	0x24000004
 8001e80:	24009bec 	.word	0x24009bec

08001e84 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e84:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e86:	4d15      	ldr	r5, [pc, #84]	@ (8001edc <HAL_DSI_TearingEffectCallback+0x58>)
 8001e88:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fd30 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e90:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 8001e92:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8001e96:	3201      	adds	r2, #1
 8001e98:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001ea2:	f000 fdb7 	bl	8002a14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8001ea8:	682a      	ldr	r2, [r5, #0]
 8001eaa:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001eb2:	b173      	cbz	r3, 8001ed2 <HAL_DSI_TearingEffectCallback+0x4e>
 8001eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8001ee4 <HAL_DSI_TearingEffectCallback+0x60>)
 8001eb6:	782b      	ldrb	r3, [r5, #0]
 8001eb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001ebc:	b94b      	cbnz	r3, 8001ed2 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_DSI_TearingEffectCallback+0x64>)
 8001ec0:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ec2:	f7ff ffbb 	bl	8001e3c <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f005 f8b1 	bl	800702e <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ed2:	2000      	movs	r0, #0
    }
 8001ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ed8:	f7ff bd3a 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001edc:	2402526c 	.word	0x2402526c
 8001ee0:	2400000c 	.word	0x2400000c
 8001ee4:	24009d78 	.word	0x24009d78
 8001ee8:	24009d74 	.word	0x24009d74

08001eec <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ef0:	4e49      	ldr	r6, [pc, #292]	@ (8002018 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ef6:	7833      	ldrb	r3, [r6, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8089 	beq.w	8002010 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 8001efe:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 800203c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001f02:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8002040 <HAL_DSI_EndOfRefreshCallback+0x154>
 8001f06:	f8d9 5000 	ldr.w	r5, [r9]
 8001f0a:	4f44      	ldr	r7, [pc, #272]	@ (800201c <HAL_DSI_EndOfRefreshCallback+0x130>)
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d13e      	bne.n	8001f8e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001f10:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4e43      	ldr	r6, [pc, #268]	@ (8002020 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8001f14:	f004 fb22 	bl	800655c <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	9500      	str	r5, [sp, #0]
 8001f1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f20:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f22:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f26:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f2a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f32:	f002 0208 	and.w	r2, r2, #8
 8001f36:	9200      	str	r2, [sp, #0]
 8001f38:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f3a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f3e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f42:	4838      	ldr	r0, [pc, #224]	@ (8002024 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f44:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f46:	4e38      	ldr	r6, [pc, #224]	@ (8002028 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f48:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f4a:	4838      	ldr	r0, [pc, #224]	@ (800202c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f4c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f50:	4837      	ldr	r0, [pc, #220]	@ (8002030 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8001f52:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f56:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f58:	f041 0101 	orr.w	r1, r1, #1
 8001f5c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f5e:	9501      	str	r5, [sp, #4]
 8001f60:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f64:	f042 0208 	orr.w	r2, r2, #8
 8001f68:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f78:	f7ff ff72 	bl	8001e60 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f7c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f7e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f80:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f84:	b005      	add	sp, #20
 8001f86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f8a:	f005 b850 	b.w	800702e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f92:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f94:	9502      	str	r5, [sp, #8]
 8001f96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f9a:	4c26      	ldr	r4, [pc, #152]	@ (8002034 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fa4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fa8:	f002 0208 	and.w	r2, r2, #8
 8001fac:	9202      	str	r2, [sp, #8]
 8001fae:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001fb0:	f8d8 2000 	ldr.w	r2, [r8]
 8001fb4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001fb8:	481a      	ldr	r0, [pc, #104]	@ (8002024 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001fba:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001fbc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001fc0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001fc2:	481a      	ldr	r0, [pc, #104]	@ (800202c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001fc4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001fc8:	4819      	ldr	r0, [pc, #100]	@ (8002030 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8001fca:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fce:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fd0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fd2:	f041 0101 	orr.w	r1, r1, #1
 8001fd6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fd8:	9503      	str	r5, [sp, #12]
 8001fda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fde:	f042 0208 	orr.w	r2, r2, #8
 8001fe2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001ff2:	f7ff fcad 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001ff6:	f7ff ff0d 	bl	8001e14 <LCD_ReqEnable>
        return instance;
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8001ffc:	7035      	strb	r5, [r6, #0]
 8001ffe:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 8002000:	b134      	cbz	r4, 8002010 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	4620      	mov	r0, r4
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4798      	blx	r3
        isFrontPorchEntered = true;
 800200a:	2301      	movs	r3, #1
 800200c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 8002010:	b005      	add	sp, #20
 8002012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002016:	bf00      	nop
 8002018:	24009d78 	.word	0x24009d78
 800201c:	24009d70 	.word	0x24009d70
 8002020:	01b201e2 	.word	0x01b201e2
 8002024:	50001000 	.word	0x50001000
 8002028:	019201e3 	.word	0x019201e3
 800202c:	01920003 	.word	0x01920003
 8002030:	09c004b3 	.word	0x09c004b3
 8002034:	019201e2 	.word	0x019201e2
 8002038:	2402526c 	.word	0x2402526c
 800203c:	24009d74 	.word	0x24009d74
 8002040:	24009a14 	.word	0x24009a14

08002044 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002044:	4601      	mov	r1, r0
 8002046:	b508      	push	{r3, lr}
        return instance;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <IdleTaskHook+0x14>)
 800204a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800204c:	b101      	cbz	r1, 8002050 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800204e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002050:	f00c fc26 	bl	800e8a0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002054:	2001      	movs	r0, #1
 8002056:	bd08      	pop	{r3, pc}
 8002058:	2402526c 	.word	0x2402526c

0800205c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	4a02      	ldr	r2, [pc, #8]	@ (8002070 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002066:	601a      	str	r2, [r3, #0]

}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	24009d60 	.word	0x24009d60
 8002070:	08025290 	.word	0x08025290

08002074 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002074:	6940      	ldr	r0, [r0, #20]
 8002076:	4770      	bx	lr

08002078 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002078:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800207c:	4770      	bx	lr

0800207e <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800207e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002080:	b923      	cbnz	r3, 800208c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002082:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002084:	3800      	subs	r0, #0
 8002086:	bf18      	it	ne
 8002088:	2001      	movne	r0, #1
 800208a:	4770      	bx	lr
 800208c:	2001      	movs	r0, #1
}
 800208e:	4770      	bx	lr

08002090 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002090:	6880      	ldr	r0, [r0, #8]
 8002092:	4770      	bx	lr

08002094 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002094:	4770      	bx	lr

08002096 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002096:	3004      	adds	r0, #4
{
 8002098:	b510      	push	{r4, lr}
 800209a:	460c      	mov	r4, r1
    *data = videoInfo;
 800209c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800209e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80020a4:	4770      	bx	lr
	...

080020a8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80020a8:	b508      	push	{r3, lr}
    assert(0);
 80020aa:	4a03      	ldr	r2, [pc, #12]	@ (80020b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80020ac:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80020b2:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80020b4:	f020 f914 	bl	80222e0 <__assert_func>
 80020b8:	080235b4 	.word	0x080235b4
 80020bc:	08024fd6 	.word	0x08024fd6
 80020c0:	0802360f 	.word	0x0802360f

080020c4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	4604      	mov	r4, r0
 80020c8:	2148      	movs	r1, #72	@ 0x48
 80020ca:	f01f fd92 	bl	8021bf2 <_ZdlPvj>
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd10      	pop	{r4, pc}
	...

080020d4 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020d4:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020d8:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020da:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020dc:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020de:	6003      	str	r3, [r0, #0]
 80020e0:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020e2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020e6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020ea:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ee:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020f2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020f6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020fa:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020fe:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002102:	2001      	movs	r0, #1
 8002104:	f009 fa5a 	bl	800b5bc <osSemaphoreNew>
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800210a:	6018      	str	r0, [r3, #0]
}
 800210c:	4620      	mov	r0, r4
 800210e:	bd10      	pop	{r4, pc}
 8002110:	080253bc 	.word	0x080253bc
 8002114:	24009d98 	.word	0x24009d98

08002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002118:	b410      	push	{r4}
 800211a:	460c      	mov	r4, r1
 800211c:	4611      	mov	r1, r2
 800211e:	461a      	mov	r2, r3
    if (reader != 0)
 8002120:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002122:	b13b      	cbz	r3, 8002134 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002124:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002126:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002128:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800212a:	4420      	add	r0, r4
}
 800212c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002130:	f020 bb7a 	b.w	8022828 <strncmp>
        src = (const char*)movieData + offset;
 8002134:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002136:	e7f8      	b.n	800212a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002138 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800213a:	b510      	push	{r4, lr}
    if (reader != 0)
 800213c:	b173      	cbz	r3, 800215c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002140:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002142:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002144:	1853      	adds	r3, r2, r1
 8002146:	5c52      	ldrb	r2, [r2, r1]
 8002148:	7898      	ldrb	r0, [r3, #2]
 800214a:	785c      	ldrb	r4, [r3, #1]
 800214c:	0400      	lsls	r0, r0, #16
 800214e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002152:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800215a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800215c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800215e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002160:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002162:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002164:	7898      	ldrb	r0, [r3, #2]
 8002166:	0400      	lsls	r0, r0, #16
 8002168:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800216c:	e7f1      	b.n	8002152 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800216e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800216e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002170:	b143      	cbz	r3, 8002184 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002172:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002174:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002176:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002178:	185a      	adds	r2, r3, r1
 800217a:	5c58      	ldrb	r0, [r3, r1]
 800217c:	7852      	ldrb	r2, [r2, #1]
 800217e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002182:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002184:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002186:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002188:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800218a:	7853      	ldrb	r3, [r2, #1]
 800218c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002190:	4770      	bx	lr
	...

08002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4604      	mov	r4, r0
    if (reader != 0)
 8002198:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800219a:	460d      	mov	r5, r1
 800219c:	4616      	mov	r6, r2
    if (reader != 0)
 800219e:	b1d8      	cbz	r0, 80021d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80021a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d208      	bcs.n	80021b8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80021a6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80021aa:	21a0      	movs	r1, #160	@ 0xa0
 80021ac:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80021ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80021b4:	f020 f894 	bl	80222e0 <__assert_func>
        reader->seek(offset);
 80021b8:	6803      	ldr	r3, [r0, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80021be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80021c0:	4632      	mov	r2, r6
 80021c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021c4:	6803      	ldr	r3, [r0, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4798      	blx	r3
 80021ca:	b910      	cbnz	r0, 80021d2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80021cc:	230d      	movs	r3, #13
 80021ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80021d2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021d4:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021da:	4408      	add	r0, r1
 80021dc:	e7fb      	b.n	80021d6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021de:	bf00      	nop
 80021e0:	08023675 	.word	0x08023675
 80021e4:	0802360f 	.word	0x0802360f
 80021e8:	08023662 	.word	0x08023662

080021ec <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021f0:	6943      	ldr	r3, [r0, #20]
{
 80021f2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021f4:	b92b      	cbnz	r3, 8002202 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021f8:	21e6      	movs	r1, #230	@ 0xe6
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021fc:	4822      	ldr	r0, [pc, #136]	@ (8002288 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021fe:	f020 f86f 	bl	80222e0 <__assert_func>
    readData(currentMovieOffset, 8);
 8002202:	2208      	movs	r2, #8
 8002204:	6981      	ldr	r1, [r0, #24]
 8002206:	f7ff ffc5 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800220a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800220c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002210:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002214:	3104      	adds	r1, #4
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff ff8e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800221c:	69a3      	ldr	r3, [r4, #24]
 800221e:	4418      	add	r0, r3
 8002220:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002222:	f100 0208 	add.w	r2, r0, #8
 8002226:	429a      	cmp	r2, r3
 8002228:	d306      	bcc.n	8002238 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800222a:	2301      	movs	r3, #1
    return false;
 800222c:	2000      	movs	r0, #0
    frameNumber = 1;
 800222e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002230:	6a23      	ldr	r3, [r4, #32]
 8002232:	61a3      	str	r3, [r4, #24]
}
 8002234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002238:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800223a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800223e:	2208      	movs	r2, #8
 8002240:	4620      	mov	r0, r4
        frameNumber++;
 8002242:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002244:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002248:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800224a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800224c:	f7ff ffa2 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002250:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002254:	4620      	mov	r0, r4
 8002256:	4649      	mov	r1, r9
 8002258:	f7ff ff89 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800225c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002260:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff ff83 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002268:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800226c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff ff62 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002274:	45b0      	cmp	r8, r6
 8002276:	d1d1      	bne.n	800221c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002278:	42bd      	cmp	r5, r7
 800227a:	d1cf      	bne.n	800221c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800227c:	2001      	movs	r0, #1
 800227e:	e7d9      	b.n	8002234 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002280:	080236b7 	.word	0x080236b7
 8002284:	08023700 	.word	0x08023700
 8002288:	0802360f 	.word	0x0802360f

0800228c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800228c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	bf38      	it	cc
 8002292:	2101      	movcc	r1, #1
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	460d      	mov	r5, r1
 800229a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800229c:	4798      	blx	r3
 800229e:	42a8      	cmp	r0, r5
 80022a0:	d204      	bcs.n	80022ac <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	4620      	mov	r0, r4
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4798      	blx	r3
 80022aa:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022ac:	1e6b      	subs	r3, r5, #1
 80022ae:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80022b0:	2210      	movs	r2, #16
 80022b2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022b4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80022b8:	f106 0108 	add.w	r1, r6, #8
 80022bc:	f7ff ff6a 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80022c0:	f106 0110 	add.w	r1, r6, #16
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff37 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80022ca:	6a23      	ldr	r3, [r4, #32]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80022d0:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022d8:	2100      	movs	r1, #0
    readData(0, 72);
 80022da:	2248      	movs	r2, #72	@ 0x48
{
 80022dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022e2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022e4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022e8:	f7ff ff54 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022ec:	69a6      	ldr	r6, [r4, #24]
 80022ee:	2304      	movs	r3, #4
 80022f0:	4a63      	ldr	r2, [pc, #396]	@ (8002480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022f2:	4631      	mov	r1, r6
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff0f 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022fa:	b148      	cbz	r0, 8002310 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022fc:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022fe:	4a61      	ldr	r2, [pc, #388]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002300:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002304:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002308:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800230a:	4860      	ldr	r0, [pc, #384]	@ (800248c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800230c:	f01f ffe8 	bl	80222e0 <__assert_func>
    currentMovieOffset += 8;
 8002310:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002314:	2304      	movs	r3, #4
 8002316:	4a5e      	ldr	r2, [pc, #376]	@ (8002490 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002318:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800231a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800231c:	f7ff fefc 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002320:	b138      	cbz	r0, 8002332 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002322:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002324:	4a57      	ldr	r2, [pc, #348]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002326:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800232a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800232e:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002330:	e7eb      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002332:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002336:	2304      	movs	r3, #4
 8002338:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800233a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800233c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800233e:	f7ff feeb 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002342:	4607      	mov	r7, r0
 8002344:	b138      	cbz	r0, 8002356 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002346:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002348:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800234a:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800234e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002352:	4b52      	ldr	r3, [pc, #328]	@ (800249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002354:	e7d9      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002356:	f106 0110 	add.w	r1, r6, #16
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff feec 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002360:	4605      	mov	r5, r0
 8002362:	b920      	cbnz	r0, 800236e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002364:	4b4e      	ldr	r3, [pc, #312]	@ (80024a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002366:	f240 1143 	movw	r1, #323	@ 0x143
 800236a:	4a46      	ldr	r2, [pc, #280]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800236c:	e7cd      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800236e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002372:	2304      	movs	r3, #4
 8002374:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002376:	4620      	mov	r0, r4
 8002378:	4641      	mov	r1, r8
 800237a:	f7ff fecd 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800237e:	2800      	cmp	r0, #0
 8002380:	d049      	beq.n	8002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002382:	2306      	movs	r3, #6
 8002384:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002388:	2304      	movs	r3, #4
 800238a:	4a47      	ldr	r2, [pc, #284]	@ (80024a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800238c:	f106 0118 	add.w	r1, r6, #24
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fec1 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002396:	2800      	cmp	r0, #0
 8002398:	d03f      	beq.n	800241a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800239a:	2307      	movs	r3, #7
 800239c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80023a0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80023a2:	4f42      	ldr	r7, [pc, #264]	@ (80024ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80023a4:	220c      	movs	r2, #12
 80023a6:	4620      	mov	r0, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	f7ff fef3 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80023ae:	f105 0608 	add.w	r6, r5, #8
 80023b2:	2304      	movs	r3, #4
 80023b4:	463a      	mov	r2, r7
 80023b6:	4620      	mov	r0, r4
 80023b8:	4631      	mov	r1, r6
 80023ba:	f7ff fead 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d048      	beq.n	8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d148      	bne.n	800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80023ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023cc:	42ab      	cmp	r3, r5
 80023ce:	d849      	bhi.n	8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023d0:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023d4:	3504      	adds	r5, #4
 80023d6:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023d8:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023da:	4629      	mov	r1, r5
 80023dc:	f7ff feac 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023e0:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023e2:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023e4:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff fea6 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023ec:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ee:	2204      	movs	r2, #4
 80023f0:	4620      	mov	r0, r4
 80023f2:	4631      	mov	r1, r6
 80023f4:	f7ff fece 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023f8:	2304      	movs	r3, #4
 80023fa:	4a2d      	ldr	r2, [pc, #180]	@ (80024b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023fc:	4631      	mov	r1, r6
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fe8a 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002404:	2800      	cmp	r0, #0
 8002406:	d138      	bne.n	800247a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002408:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800240a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800240c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800240e:	69a3      	ldr	r3, [r4, #24]
 8002410:	6223      	str	r3, [r4, #32]
}
 8002412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002416:	2701      	movs	r7, #1
 8002418:	e7b6      	b.n	8002388 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800241a:	2f00      	cmp	r7, #0
 800241c:	d0c0      	beq.n	80023a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800241e:	f106 0120 	add.w	r1, r6, #32
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff fe88 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800242c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002430:	fbb0 f0f3 	udiv	r0, r0, r3
 8002434:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff fe7e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800243c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002440:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fe78 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002448:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800244c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff fe72 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002454:	6120      	str	r0, [r4, #16]
 8002456:	e7a3      	b.n	80023a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0b9      	beq.n	80023d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800245c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800245e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002462:	e7d6      	b.n	8002412 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002464:	1d29      	adds	r1, r5, #4
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fe66 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800246c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800246e:	220c      	movs	r2, #12
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7ff fe8e 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002478:	e799      	b.n	80023ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800247a:	230b      	movs	r3, #11
 800247c:	e7ef      	b.n	800245e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800247e:	bf00      	nop
 8002480:	08023733 	.word	0x08023733
 8002484:	08023751 	.word	0x08023751
 8002488:	08023738 	.word	0x08023738
 800248c:	0802360f 	.word	0x0802360f
 8002490:	0802377e 	.word	0x0802377e
 8002494:	08023783 	.word	0x08023783
 8002498:	0802379b 	.word	0x0802379b
 800249c:	080237a0 	.word	0x080237a0
 80024a0:	080237b6 	.word	0x080237b6
 80024a4:	080237c2 	.word	0x080237c2
 80024a8:	080237c7 	.word	0x080237c7
 80024ac:	080237cc 	.word	0x080237cc
 80024b0:	080237d1 	.word	0x080237d1

080024b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80024b4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80024b8:	2200      	movs	r2, #0
 80024ba:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80024bc:	f7ff bf0c 	b.w	80022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080024c0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80024c0:	b510      	push	{r4, lr}
    movieData = 0;
 80024c2:	2300      	movs	r3, #0
{
 80024c4:	4604      	mov	r4, r0
 80024c6:	4608      	mov	r0, r1
    movieData = 0;
 80024c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80024ca:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80024cc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4798      	blx	r3
 80024d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024d4:	4620      	mov	r0, r4
}
 80024d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024da:	f7ff befd 	b.w	80022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024e0 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <JPEG_Decode_DMA+0x50>)
 80024e4:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024e6:	4d13      	ldr	r5, [pc, #76]	@ (8002534 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 80024e8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <JPEG_Decode_DMA+0x58>)
 80024ec:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024f0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024f2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <JPEG_Decode_DMA+0x60>)
 80024f6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <JPEG_Decode_DMA+0x64>)
 80024fa:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <JPEG_Decode_DMA+0x68>)
 80024fe:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002502:	682a      	ldr	r2, [r5, #0]
 8002504:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002508:	701c      	strb	r4, [r3, #0]
 800250a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800250c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002510:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002514:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <JPEG_Decode_DMA+0x70>)
 800251a:	68d2      	ldr	r2, [r2, #12]
 800251c:	436a      	muls	r2, r5
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f005 ff2b 	bl	8008380 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800252a:	4620      	mov	r0, r4
 800252c:	b003      	add	sp, #12
 800252e:	bd30      	pop	{r4, r5, pc}
 8002530:	24009db0 	.word	0x24009db0
 8002534:	24009da0 	.word	0x24009da0
 8002538:	24009d94 	.word	0x24009d94
 800253c:	24009dc0 	.word	0x24009dc0
 8002540:	24009db8 	.word	0x24009db8
 8002544:	24009dbc 	.word	0x24009dbc
 8002548:	24009d9c 	.word	0x24009d9c
 800254c:	24000010 	.word	0x24000010
 8002550:	24009d7c 	.word	0x24009d7c

08002554 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002554:	684b      	ldr	r3, [r1, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d115      	bne.n	8002586 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800255a:	68cb      	ldr	r3, [r1, #12]
 800255c:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800255e:	bf1e      	ittt	ne
 8002560:	f023 030f 	bicne.w	r3, r3, #15
 8002564:	3310      	addne	r3, #16
 8002566:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002568:	688b      	ldr	r3, [r1, #8]
 800256a:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800256c:	bf1e      	ittt	ne
 800256e:	f023 030f 	bicne.w	r3, r3, #15
 8002572:	3310      	addne	r3, #16
 8002574:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002576:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002578:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800257a:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800257c:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 800257e:	4353      	muls	r3, r2
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_JPEG_InfoReadyCallback+0x68>)
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002586:	2b02      	cmp	r3, #2
 8002588:	d10e      	bne.n	80025a8 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800258a:	68cb      	ldr	r3, [r1, #12]
 800258c:	071a      	lsls	r2, r3, #28
 800258e:	d003      	beq.n	8002598 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002596:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002598:	688b      	ldr	r3, [r1, #8]
 800259a:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800259c:	bf1e      	ittt	ne
 800259e:	f023 0307 	bicne.w	r3, r3, #7
 80025a2:	3308      	addne	r3, #8
 80025a4:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80025a6:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1fc      	bne.n	80025a6 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80025ac:	68cb      	ldr	r3, [r1, #12]
 80025ae:	0758      	lsls	r0, r3, #29
 80025b0:	d0f2      	beq.n	8002598 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	3308      	adds	r3, #8
 80025b8:	e7ed      	b.n	8002596 <HAL_JPEG_InfoReadyCallback+0x42>
 80025ba:	bf00      	nop
 80025bc:	24009da8 	.word	0x24009da8

080025c0 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80025c0:	4a0b      	ldr	r2, [pc, #44]	@ (80025f0 <HAL_JPEG_GetDataCallback+0x30>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	440b      	add	r3, r1
    {
 80025c6:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80025c8:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_JPEG_GetDataCallback+0x34>)
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d20c      	bcs.n	80025ec <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025d2:	4c09      	ldr	r4, [pc, #36]	@ (80025f8 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025d4:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025d6:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025d8:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025dc:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025de:	bf28      	it	cs
 80025e0:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025e4:	6021      	str	r1, [r4, #0]
        }
    }
 80025e6:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025e8:	f005 bf2c 	b.w	8008444 <HAL_JPEG_ConfigInputBuffer>
    }
 80025ec:	bc30      	pop	{r4, r5}
 80025ee:	4770      	bx	lr
 80025f0:	24009dc0 	.word	0x24009dc0
 80025f4:	24009dbc 	.word	0x24009dbc
 80025f8:	24009db8 	.word	0x24009db8

080025fc <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025fe:	4c20      	ldr	r4, [pc, #128]	@ (8002680 <HAL_JPEG_DataReadyCallback+0x84>)
 8002600:	2101      	movs	r1, #1
 8002602:	4d20      	ldr	r5, [pc, #128]	@ (8002684 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002604:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002606:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002608:	4f1f      	ldr	r7, [pc, #124]	@ (8002688 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002614:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002616:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_JPEG_DataReadyCallback+0x90>)
 8002618:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002620:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	440a      	add	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d901      	bls.n	800263a <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	5ceb      	ldrb	r3, [r5, r3]
 8002640:	b133      	cbz	r3, 8002650 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002642:	2102      	movs	r1, #2
 8002644:	4630      	mov	r0, r6
 8002646:	f005 fecf 	bl	80083e8 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_JPEG_DataReadyCallback+0x94>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	4630      	mov	r0, r6
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800265a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800265e:	6869      	ldr	r1, [r5, #4]
 8002660:	435a      	muls	r2, r3
 8002662:	f005 fef2 	bl	800844a <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_JPEG_DataReadyCallback+0x98>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	7a1a      	ldrb	r2, [r3, #8]
 800266c:	b93a      	cbnz	r2, 800267e <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 800266e:	7a9b      	ldrb	r3, [r3, #10]
 8002670:	b92b      	cbnz	r3, 800267e <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002674:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800267a:	f009 b815 	b.w	800b6a8 <osSemaphoreRelease>
    }
 800267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002680:	24009da0 	.word	0x24009da0
 8002684:	24000010 	.word	0x24000010
 8002688:	24009d7c 	.word	0x24009d7c
 800268c:	24009d9c 	.word	0x24009d9c
 8002690:	24009db0 	.word	0x24009db0
 8002694:	24009da4 	.word	0x24009da4
 8002698:	24009d98 	.word	0x24009d98

0800269c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 800269c:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 800269e:	e7fe      	b.n	800269e <HAL_JPEG_ErrorCallback+0x2>

080026a0 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80026a0:	4b01      	ldr	r3, [pc, #4]	@ (80026a8 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    }
 80026a6:	4770      	bx	lr
 80026a8:	24009db4 	.word	0x24009db4

080026ac <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026ae:	4d16      	ldr	r5, [pc, #88]	@ (8002708 <JPEG_OutputHandler+0x5c>)
{
 80026b0:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	b113      	cbz	r3, 80026bc <JPEG_OutputHandler+0x10>
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <JPEG_OutputHandler+0x60>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	bb1b      	cbnz	r3, 8002704 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <JPEG_OutputHandler+0x64>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	7a03      	ldrb	r3, [r0, #8]
 80026c2:	b963      	cbnz	r3, 80026de <JPEG_OutputHandler+0x32>
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <JPEG_OutputHandler+0x68>)
 80026c6:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <JPEG_OutputHandler+0x6c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <JPEG_OutputHandler+0x32>
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <JPEG_OutputHandler+0x60>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b913      	cbnz	r3, 80026de <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026d8:	6803      	ldr	r3, [r0, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <JPEG_OutputHandler+0x70>)
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10c      	bne.n	8002700 <JPEG_OutputHandler+0x54>
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <JPEG_OutputHandler+0x74>)
 80026e8:	490b      	ldr	r1, [pc, #44]	@ (8002718 <JPEG_OutputHandler+0x6c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	b933      	cbnz	r3, 8002700 <JPEG_OutputHandler+0x54>
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	b923      	cbnz	r3, 8002700 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026f6:	2102      	movs	r1, #2
 80026f8:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026fa:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026fc:	f006 f8d1 	bl	80088a2 <HAL_JPEG_Resume>
        return 1;
 8002700:	2002      	movs	r0, #2
    }

    return 2;
}
 8002702:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002704:	2001      	movs	r0, #1
 8002706:	e7fc      	b.n	8002702 <JPEG_OutputHandler+0x56>
 8002708:	24009db4 	.word	0x24009db4
 800270c:	24009d90 	.word	0x24009d90
 8002710:	24009da4 	.word	0x24009da4
 8002714:	24009d94 	.word	0x24009d94
 8002718:	24000010 	.word	0x24000010
 800271c:	24009db0 	.word	0x24009db0
 8002720:	24009da0 	.word	0x24009da0

08002724 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4605      	mov	r5, r0
    if (length == 0)
 8002728:	2a00      	cmp	r2, #0
 800272a:	d037      	beq.n	800279c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 800272c:	2b00      	cmp	r3, #0
 800272e:	d035      	beq.n	800279c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002730:	481b      	ldr	r0, [pc, #108]	@ (80027a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002732:	2403      	movs	r4, #3
 8002734:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002736:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002738:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800273a:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800273e:	bf18      	it	ne
 8002740:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002744:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002746:	bf18      	it	ne
 8002748:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800274a:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800274c:	0924      	lsrs	r4, r4, #4
 800274e:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002750:	692c      	ldr	r4, [r5, #16]
 8002752:	f014 040f 	ands.w	r4, r4, #15
 8002756:	bf18      	it	ne
 8002758:	f1c4 0410 	rsbne	r4, r4, #16
 800275c:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 800275e:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002760:	4c11      	ldr	r4, [pc, #68]	@ (80027a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 8002762:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002764:	4811      	ldr	r0, [pc, #68]	@ (80027ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002766:	f7ff febb 	bl	80024e0 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 800276a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800276e:	4d0f      	ldr	r5, [pc, #60]	@ (80027ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 8002770:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002772:	4628      	mov	r0, r5
 8002774:	f7ff ff9a 	bl	80026ac <JPEG_OutputHandler>
 8002778:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d105      	bne.n	800278c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f008 ff62 	bl	800b650 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d1ef      	bne.n	8002772 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002796:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002798:	4a08      	ldr	r2, [pc, #32]	@ (80027bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	bf00      	nop
 80027a0:	24009d7c 	.word	0x24009d7c
 80027a4:	24009dc4 	.word	0x24009dc4
 80027a8:	24009dac 	.word	0x24009dac
 80027ac:	24009b94 	.word	0x24009b94
 80027b0:	24009da4 	.word	0x24009da4
 80027b4:	24009d98 	.word	0x24009d98
 80027b8:	24009db4 	.word	0x24009db4
 80027bc:	24009d90 	.word	0x24009d90

080027c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027c6:	6943      	ldr	r3, [r0, #20]
{
 80027c8:	b085      	sub	sp, #20
 80027ca:	4604      	mov	r4, r0
 80027cc:	460f      	mov	r7, r1
 80027ce:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027d0:	b92b      	cbnz	r3, 80027de <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80027d2:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027d4:	21b2      	movs	r1, #178	@ 0xb2
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027d8:	4829      	ldr	r0, [pc, #164]	@ (8002880 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027da:	f01f fd81 	bl	80222e0 <__assert_func>
    readData(currentMovieOffset, 8);
 80027de:	2208      	movs	r2, #8
 80027e0:	6981      	ldr	r1, [r0, #24]
 80027e2:	f7ff fcd7 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027e6:	69a6      	ldr	r6, [r4, #24]
 80027e8:	4620      	mov	r0, r4
 80027ea:	4631      	mov	r1, r6
 80027ec:	f7ff fcbf 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027f0:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027f2:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcba 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027fa:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027fc:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff fc9a 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002804:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002808:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800280a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800280c:	180a      	adds	r2, r1, r0
 800280e:	429a      	cmp	r2, r3
 8002810:	d226      	bcs.n	8002860 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002812:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002816:	459b      	cmp	fp, r3
 8002818:	d117      	bne.n	800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800281a:	f246 3364 	movw	r3, #25444	@ 0x6364
 800281e:	459a      	cmp	sl, r3
 8002820:	d113      	bne.n	800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002822:	b190      	cbz	r0, 800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002824:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002826:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fcb3 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800282e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002830:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002832:	462a      	mov	r2, r5
 8002834:	4620      	mov	r0, r4
 8002836:	f8cd 8000 	str.w	r8, [sp]
 800283a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800283e:	463b      	mov	r3, r7
 8002840:	f7ff ff70 	bl	8002724 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002844:	6963      	ldr	r3, [r4, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800284a:	69a3      	ldr	r3, [r4, #24]
 800284c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800284e:	b905      	cbnz	r5, 8002852 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002850:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002852:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002854:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002856:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800285a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800285c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800285e:	d109      	bne.n	8002874 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002860:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002862:	2001      	movs	r0, #1
        frameNumber = 1;
 8002864:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002866:	6a23      	ldr	r3, [r4, #32]
 8002868:	61a3      	str	r3, [r4, #24]
}
 800286a:	f080 0001 	eor.w	r0, r0, #1
 800286e:	b005      	add	sp, #20
 8002870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002874:	2000      	movs	r0, #0
 8002876:	e7f8      	b.n	800286a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002878:	080236b7 	.word	0x080236b7
 800287c:	080237d6 	.word	0x080237d6
 8002880:	0802360f 	.word	0x0802360f

08002884 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002888:	6981      	ldr	r1, [r0, #24]
{
 800288a:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 800288c:	2208      	movs	r2, #8
 800288e:	f7ff fc81 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002892:	69a7      	ldr	r7, [r4, #24]
 8002894:	4620      	mov	r0, r4
 8002896:	1d39      	adds	r1, r7, #4
 8002898:	f7ff fc4e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800289c:	f107 0108 	add.w	r1, r7, #8
 80028a0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80028a2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fc75 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80028aa:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 80028ac:	b16e      	cbz	r6, 80028ca <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80028ae:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028b0:	4c07      	ldr	r4, [pc, #28]	@ (80028d0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 80028b2:	4d08      	ldr	r5, [pc, #32]	@ (80028d4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80028b4:	4633      	mov	r3, r6
 80028b6:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 80028b8:	f7ff fe12 	bl	80024e0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff fef5 	bl	80026ac <JPEG_OutputHandler>
 80028c2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f8      	beq.n	80028bc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 80028ca:	2001      	movs	r0, #1
 80028cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	24009dac 	.word	0x24009dac
 80028d4:	24009b94 	.word	0x24009b94

080028d8 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028da:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028dc:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028de:	4c15      	ldr	r4, [pc, #84]	@ (8002934 <DMA2D_CopyBuffer+0x5c>)
 80028e0:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028e2:	4e15      	ldr	r6, [pc, #84]	@ (8002938 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80028ea:	6863      	ldr	r3, [r4, #4]
 80028ec:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <DMA2D_CopyBuffer+0x64>)
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80028f2:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028f4:	68e2      	ldr	r2, [r4, #12]
 80028f6:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028f8:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028fa:	1ab6      	subs	r6, r6, r2
 80028fc:	42b7      	cmp	r7, r6
 80028fe:	d315      	bcc.n	800292c <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002900:	68a4      	ldr	r4, [r4, #8]
 8002902:	f1c4 0410 	rsb	r4, r4, #16
 8002906:	432c      	orrs	r4, r5
 8002908:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 800290a:	4c0d      	ldr	r4, [pc, #52]	@ (8002940 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800290c:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002910:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002912:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002914:	4421      	add	r1, r4
 8002916:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <DMA2D_CopyBuffer+0x6c>)
 8002920:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002922:	6842      	ldr	r2, [r0, #4]
 8002924:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <DMA2D_CopyBuffer+0x70>)
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800292c:	f045 0510 	orr.w	r5, r5, #16
 8002930:	645d      	str	r5, [r3, #68]	@ 0x44
 8002932:	e7ea      	b.n	800290a <DMA2D_CopyBuffer+0x32>
 8002934:	24009d7c 	.word	0x24009d7c
 8002938:	24009da8 	.word	0x24009da8
 800293c:	52001000 	.word	0x52001000
 8002940:	24009dc4 	.word	0x24009dc4
 8002944:	ff09000b 	.word	0xff09000b
 8002948:	00012301 	.word	0x00012301

0800294c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800294e:	2200      	movs	r2, #0
 8002950:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002952:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002954:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002956:	3101      	adds	r1, #1
 8002958:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	2901      	cmp	r1, #1
 800295e:	d900      	bls.n	8002962 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002960:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <DMA2D_ExternalJobCompleted+0x38>)
 8002964:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <DMA2D_ExternalJobCompleted+0x3c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	68c2      	ldr	r2, [r0, #12]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <DMA2D_ExternalJobCompleted+0x40>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <DMA2D_ExternalJobCompleted+0x44>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	f008 be94 	b.w	800b6a8 <osSemaphoreRelease>
 8002980:	24009d94 	.word	0x24009d94
 8002984:	24009da8 	.word	0x24009da8
 8002988:	24009d7c 	.word	0x24009d7c
 800298c:	24009d90 	.word	0x24009d90
 8002990:	24009d98 	.word	0x24009d98

08002994 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002994:	2101      	movs	r1, #1
 8002996:	2200      	movs	r2, #0
{
 8002998:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800299a:	4608      	mov	r0, r1
 800299c:	f008 fe0e 	bl	800b5bc <osSemaphoreNew>
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80029a2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80029a4:	b928      	cbnz	r0, 80029b2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80029a8:	2128      	movs	r1, #40	@ 0x28
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029ac:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80029ae:	f01f fc97 	bl	80222e0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	2001      	movs	r0, #1
 80029b8:	f008 fe9f 	bl	800b6fa <osMessageQueueNew>
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80029be:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029c0:	b918      	cbnz	r0, 80029ca <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029c4:	212c      	movs	r1, #44	@ 0x2c
 80029c6:	4a03      	ldr	r2, [pc, #12]	@ (80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029c8:	e7f0      	b.n	80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029ca:	bd08      	pop	{r3, pc}
 80029cc:	24009dcc 	.word	0x24009dcc
 80029d0:	08023831 	.word	0x08023831
 80029d4:	0802387a 	.word	0x0802387a
 80029d8:	080238a9 	.word	0x080238a9
 80029dc:	24009dc8 	.word	0x24009dc8
 80029e0:	080238f2 	.word	0x080238f2

080029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029e4:	4b02      	ldr	r3, [pc, #8]	@ (80029f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f008 be30 	b.w	800b650 <osSemaphoreAcquire>
 80029f0:	24009dcc 	.word	0x24009dcc

080029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029f4:	4b01      	ldr	r3, [pc, #4]	@ (80029fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f008 be56 	b.w	800b6a8 <osSemaphoreRelease>
 80029fc:	24009dcc 	.word	0x24009dcc

08002a00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002a02:	2100      	movs	r1, #0
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	f008 be23 	b.w	800b650 <osSemaphoreAcquire>
 8002a0a:	bf00      	nop
 8002a0c:	24009dcc 	.word	0x24009dcc

08002a10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002a10:	f7ff bff0 	b.w	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002a14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002a14:	2300      	movs	r3, #0
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6800      	ldr	r0, [r0, #0]
 8002a1e:	f008 bea7 	b.w	800b770 <osMessageQueuePut>
 8002a22:	bf00      	nop
 8002a24:	24009dc8 	.word	0x24009dc8
 8002a28:	24000030 	.word	0x24000030

08002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a2c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4c07      	ldr	r4, [pc, #28]	@ (8002a50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a32:	a901      	add	r1, sp, #4
 8002a34:	461a      	mov	r2, r3
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	f008 fecb 	bl	800b7d2 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	2200      	movs	r2, #0
 8002a42:	a901      	add	r1, sp, #4
 8002a44:	6820      	ldr	r0, [r4, #0]
 8002a46:	f008 fec4 	bl	800b7d2 <osMessageQueueGet>
}
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	24009dc8 	.word	0x24009dc8

08002a54 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	4718      	bx	r3

08002a5a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	4770      	bx	lr

08002a5e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a5e:	e7fe      	b.n	8002a5e <DMA2D_XferErrorCallback>

08002a60 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a60:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a64:	4770      	bx	lr
	...

08002a68 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a74:	f008 fd60 	bl	800b538 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a78:	6860      	ldr	r0, [r4, #4]
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4798      	blx	r3
 8002a80:	b978      	cbnz	r0, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
 8002a82:	7a63      	ldrb	r3, [r4, #9]
 8002a84:	b16b      	cbz	r3, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
 8002a86:	7a23      	ldrb	r3, [r4, #8]
 8002a88:	b95b      	cbnz	r3, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a8a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a8e:	4620      	mov	r0, r4
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a96:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a9e:	f008 bd6e 	b.w	800b57e <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002aa2:	490b      	ldr	r1, [pc, #44]	@ (8002ad0 <_ZN8STM32DMA5startEv+0x68>)
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <_ZN8STM32DMA5startEv+0x6c>)
 8002aa6:	680b      	ldr	r3, [r1, #0]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d1f2      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ab0:	7a20      	ldrb	r0, [r4, #8]
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1ef      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ab6:	7aa0      	ldrb	r0, [r4, #10]
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d1ec      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002abc:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002abe:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002ac6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac8:	f7ff ff06 	bl	80028d8 <DMA2D_CopyBuffer>
    }
 8002acc:	e7e3      	b.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ace:	bf00      	nop
 8002ad0:	24009d94 	.word	0x24009d94
 8002ad4:	24000010 	.word	0x24000010

08002ad8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ade:	6003      	str	r3, [r0, #0]
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aea:	f3bf 8f6f 	isb	sy
}
 8002aee:	4770      	bx	lr
 8002af0:	08025400 	.word	0x08025400
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4604      	mov	r4, r0
}
 8002afc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002b00:	f7ff ffea 	bl	8002ad8 <_ZN8STM32DMAD1Ev>
 8002b04:	4620      	mov	r0, r4
 8002b06:	f01f f874 	bl	8021bf2 <_ZdlPvj>
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
	...

08002b10 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b10:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002b12:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b18:	f042 0210 	orr.w	r2, r2, #16
 8002b1c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b24:	f002 0210 	and.w	r2, r2, #16
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b2c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b2e:	f042 0210 	orr.w	r2, r2, #16
 8002b32:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b34:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b36:	f022 0210 	bic.w	r2, r2, #16
 8002b3a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b3e:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b40:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	b002      	add	sp, #8
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	58024400 	.word	0x58024400
 8002b58:	24009c08 	.word	0x24009c08
 8002b5c:	08002dad 	.word	0x08002dad
 8002b60:	08002a5f 	.word	0x08002a5f
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b68:	b508      	push	{r3, lr}
    switch (format)
 8002b6a:	280a      	cmp	r0, #10
 8002b6c:	d809      	bhi.n	8002b82 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b6e:	e8df f000 	tbb	[pc, r0]
 8002b72:	1006      	.short	0x1006
 8002b74:	0808080e 	.word	0x0808080e
 8002b78:	10101008 	.word	0x10101008
 8002b7c:	10          	.byte	0x10
 8002b7d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b7e:	2002      	movs	r0, #2
}
 8002b80:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b84:	2191      	movs	r1, #145	@ 0x91
 8002b86:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b8a:	f01f fba9 	bl	80222e0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b8e:	2000      	movs	r0, #0
 8002b90:	e7f6      	b.n	8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b92:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b94:	e7f4      	b.n	8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b96:	bf00      	nop
 8002b98:	08023934 	.word	0x08023934
 8002b9c:	0802394f 	.word	0x0802394f
 8002ba0:	0802399a 	.word	0x0802399a

08002ba4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ba8:	7f88      	ldrb	r0, [r1, #30]
 8002baa:	f7ff ffdd 	bl	8002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bb0:	8aa5      	ldrh	r5, [r4, #20]
 8002bb2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bb4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bb6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bba:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bbe:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bc2:	1b52      	subs	r2, r2, r5
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	2d08      	cmp	r5, #8
 8002bca:	d10e      	bne.n	8002bea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bcc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bce:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bd0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bd4:	7f20      	ldrb	r0, [r4, #28]
 8002bd6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bda:	61da      	str	r2, [r3, #28]
        return color;
 8002bdc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bde:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002be6:	601a      	str	r2, [r3, #0]
    }
}
 8002be8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bea:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bec:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bee:	611a      	str	r2, [r3, #16]
 8002bf0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bf4:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bf6:	e7f6      	b.n	8002be6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bf8:	52001000 	.word	0x52001000
 8002bfc:	00010009 	.word	0x00010009
 8002c00:	00022301 	.word	0x00022301
 8002c04:	00032301 	.word	0x00032301

08002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002c08:	b508      	push	{r3, lr}
    switch (format)
 8002c0a:	280b      	cmp	r0, #11
 8002c0c:	d80b      	bhi.n	8002c26 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002c0e:	e8df f000 	tbb	[pc, r0]
 8002c12:	1206      	.short	0x1206
 8002c14:	0a0a0a10 	.word	0x0a0a0a10
 8002c18:	0808080a 	.word	0x0808080a
 8002c1c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c1e:	2002      	movs	r0, #2
}
 8002c20:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c22:	2005      	movs	r0, #5
        break;
 8002c24:	e7fc      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c28:	2170      	movs	r1, #112	@ 0x70
 8002c2a:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c2c:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c2e:	f01f fb57 	bl	80222e0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c32:	2000      	movs	r0, #0
 8002c34:	e7f4      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c36:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c38:	e7f2      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c3a:	bf00      	nop
 8002c3c:	08023934 	.word	0x08023934
 8002c40:	080239e1 	.word	0x080239e1
 8002c44:	0802399a 	.word	0x0802399a

08002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c4c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c4e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c50:	4638      	mov	r0, r7
 8002c52:	f7ff ffd9 	bl	8002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c56:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c5a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7ff ffd3 	bl	8002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c62:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c64:	4628      	mov	r0, r5
 8002c66:	f7ff ff7f 	bl	8002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c6a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c6e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c72:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c76:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c78:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c7a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c7c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c7e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c80:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c82:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c86:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c92:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c96:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c98:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c9a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c9e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002ca2:	2c80      	cmp	r4, #128	@ 0x80
 8002ca4:	d022      	beq.n	8002cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002ca6:	d80f      	bhi.n	8002cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002ca8:	2c20      	cmp	r4, #32
 8002caa:	d066      	beq.n	8002d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cac:	2c40      	cmp	r4, #64	@ 0x40
 8002cae:	d064      	beq.n	8002d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cb0:	2c04      	cmp	r4, #4
 8002cb2:	d05c      	beq.n	8002d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002cb8:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cba:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cbc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cc0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cc2:	d060      	beq.n	8002d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002cc4:	4a32      	ldr	r2, [pc, #200]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002cc6:	e03f      	b.n	8002d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002cc8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002ccc:	d004      	beq.n	8002cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cce:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cd2:	d1ef      	bne.n	8002cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	482f      	ldr	r0, [pc, #188]	@ (8002d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cd6:	e000      	b.n	8002cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd8:	482f      	ldr	r0, [pc, #188]	@ (8002d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cda:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ce4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ce6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ce8:	6159      	str	r1, [r3, #20]
 8002cea:	e02c      	b.n	8002d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cec:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cf0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cf4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cf8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cfa:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cfe:	1d21      	adds	r1, r4, #4
 8002d00:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002d02:	7821      	ldrb	r1, [r4, #0]
 8002d04:	b141      	cbz	r1, 8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002d06:	2901      	cmp	r1, #1
 8002d08:	d021      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002d0c:	f240 110b 	movw	r1, #267	@ 0x10b
 8002d10:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002d12:	4824      	ldr	r0, [pc, #144]	@ (8002da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002d14:	f01f fae4 	bl	80222e0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	8861      	ldrh	r1, [r4, #2]
 8002d1c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d20:	3901      	subs	r1, #1
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d2a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d2c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d30:	69d9      	ldr	r1, [r3, #28]
 8002d32:	f041 0120 	orr.w	r1, r1, #32
 8002d36:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d38:	69d9      	ldr	r1, [r3, #28]
 8002d3a:	0689      	lsls	r1, r1, #26
 8002d3c:	d4fc      	bmi.n	8002d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d3e:	2110      	movs	r1, #16
 8002d40:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d0be      	beq.n	8002cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d4e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d50:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d52:	8860      	ldrh	r0, [r4, #2]
 8002d54:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d58:	bf18      	it	ne
 8002d5a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d5c:	3801      	subs	r0, #1
 8002d5e:	f021 0110 	bic.w	r1, r1, #16
 8002d62:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d66:	f041 0110 	orr.w	r1, r1, #16
 8002d6a:	61d9      	str	r1, [r3, #28]
                break;
 8002d6c:	e7df      	b.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d6e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d72:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d76:	61da      	str	r2, [r3, #28]
 8002d78:	e7b5      	b.n	8002ce6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d7a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d7e:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d80:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d84:	e7f7      	b.n	8002d76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d86:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d8a:	e7dd      	b.n	8002d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d8c:	52001000 	.word	0x52001000
 8002d90:	00012301 	.word	0x00012301
 8002d94:	00020009 	.word	0x00020009
 8002d98:	0002000a 	.word	0x0002000a
 8002d9c:	08023a2b 	.word	0x08023a2b
 8002da0:	08023a45 	.word	0x08023a45
 8002da4:	0802399a 	.word	0x0802399a
 8002da8:	00022301 	.word	0x00022301

08002dac <DMA2D_XferCpltCallback>:
 8002dac:	4b02      	ldr	r3, [pc, #8]	@ (8002db8 <DMA2D_XferCpltCallback+0xc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4718      	bx	r3
 8002db8:	2402526c 	.word	0x2402526c

08002dbc <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002dbc:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002dc4:	b9d3      	cbnz	r3, 8002dfc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dcc:	4919      	ldr	r1, [pc, #100]	@ (8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d12a      	bne.n	8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dda:	4818      	ldr	r0, [pc, #96]	@ (8002e3c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	bb38      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de0:	7a20      	ldrb	r0, [r4, #8]
 8002de2:	bb28      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de4:	7aa0      	ldrb	r0, [r4, #10]
 8002de6:	bb18      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dea:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dee:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002df0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002df8:	f7ff bd6e 	b.w	80028d8 <DMA2D_CopyBuffer>
        if (isRunning)
 8002dfc:	7a03      	ldrb	r3, [r0, #8]
 8002dfe:	b143      	cbz	r3, 8002e12 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002e00:	2300      	movs	r3, #0
 8002e02:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002e0a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002e0e:	f7ff fd9d 	bl	800294c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002e12:	6860      	ldr	r0, [r4, #4]
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4798      	blx	r3
 8002e1a:	b948      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e1c:	7a63      	ldrb	r3, [r4, #9]
 8002e1e:	b13b      	cbz	r3, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e20:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e22:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e26:	4620      	mov	r0, r4
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e2e:	4718      	bx	r3
    }
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	bf00      	nop
 8002e34:	24009d94 	.word	0x24009d94
 8002e38:	24000010 	.word	0x24000010
 8002e3c:	24009d90 	.word	0x24009d90

08002e40 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e44:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <_ZN8STM32DMAC1Ev+0x40>)
 8002e46:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e48:	2600      	movs	r6, #0
 8002e4a:	4625      	mov	r5, r4
 8002e4c:	2260      	movs	r2, #96	@ 0x60
 8002e4e:	6060      	str	r0, [r4, #4]
 8002e50:	7226      	strb	r6, [r4, #8]
 8002e52:	7266      	strb	r6, [r4, #9]
 8002e54:	f845 3b20 	str.w	r3, [r5], #32
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f00b fe63 	bl	800eb24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e5e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e62:	60ee      	str	r6, [r5, #12]
 8002e64:	3524      	adds	r5, #36	@ 0x24
 8002e66:	429d      	cmp	r5, r3
 8002e68:	d1fb      	bne.n	8002e62 <_ZN8STM32DMAC1Ev+0x22>
 8002e6a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e6e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e70:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e74:	f008 fb28 	bl	800b4c8 <osMutexNew>
 8002e78:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	08025400 	.word	0x08025400

08002e84 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	07d2      	lsls	r2, r2, #31
 8002e8a:	d4fc      	bmi.n	8002e86 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e8c:	2223      	movs	r2, #35	@ 0x23
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	52001000 	.word	0x52001000

08002e98 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e9a:	6953      	ldr	r3, [r2, #20]
 8002e9c:	03db      	lsls	r3, r3, #15
 8002e9e:	d511      	bpl.n	8002ec4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	dd0f      	ble.n	8002ec4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002ea4:	f000 031f 	and.w	r3, r0, #31
 8002ea8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002eaa:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002eae:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002eb0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002eb4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002eb6:	1a0b      	subs	r3, r1, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	dcf9      	bgt.n	8002eb0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ec0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002ecc:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002ece:	4c10      	ldr	r4, [pc, #64]	@ (8002f10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002ed0:	6825      	ldr	r5, [r4, #0]
 8002ed2:	07ed      	lsls	r5, r5, #31
 8002ed4:	d4fc      	bmi.n	8002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ed6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ed8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eda:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002edc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ede:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ee2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ee6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ee8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eea:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002eec:	d00c      	beq.n	8002f08 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002eee:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ef0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ef4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ef6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002efa:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002efe:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002f00:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002f02:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f04:	6023      	str	r3, [r4, #0]
    }
}
 8002f06:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f08:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002f0c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f0e:	e7f9      	b.n	8002f04 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002f10:	52001000 	.word	0x52001000
 8002f14:	00010009 	.word	0x00010009
 8002f18:	00020001 	.word	0x00020001
 8002f1c:	00030001 	.word	0x00030001

08002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f20:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f22:	4c0e      	ldr	r4, [pc, #56]	@ (8002f5c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	07ed      	lsls	r5, r5, #31
 8002f28:	d4fc      	bmi.n	8002f24 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f2a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f2c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f2e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f30:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f32:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f36:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f3a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f3c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f3e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f40:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f42:	d007      	beq.n	8002f54 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f44:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f46:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f4a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f4c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f4e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f50:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f52:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f56:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f58:	6025      	str	r5, [r4, #0]
}
 8002f5a:	e7fa      	b.n	8002f52 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f5c:	52001000 	.word	0x52001000
 8002f60:	00020001 	.word	0x00020001
 8002f64:	ff020001 	.word	0xff020001

08002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f68:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f6a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f98 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f6c:	6825      	ldr	r5, [r4, #0]
 8002f6e:	07ed      	lsls	r5, r5, #31
 8002f70:	d4fc      	bmi.n	8002f6c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f72:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f74:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f76:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f78:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f7a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f80:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f82:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f84:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f86:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f88:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f8a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f8e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f90:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f92:	6023      	str	r3, [r4, #0]
}
 8002f94:	bd30      	pop	{r4, r5, pc}
 8002f96:	bf00      	nop
 8002f98:	52001000 	.word	0x52001000
 8002f9c:	00020001 	.word	0x00020001

08002fa0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	4770      	bx	lr

08002fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002fa4:	200c      	movs	r0, #12
 8002fa6:	4770      	bx	lr

08002fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002fa8:	230c      	movs	r3, #12
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fb8:	3008      	adds	r0, #8
 8002fba:	4770      	bx	lr

08002fbc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	4770      	bx	lr

08002fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc0:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8002fca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fce:	3008      	adds	r0, #8
 8002fd0:	4770      	bx	lr

08002fd2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fd2:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8002fd6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fda:	3008      	adds	r0, #8
 8002fdc:	4770      	bx	lr

08002fde <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	4770      	bx	lr

08002fe6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fe6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fea:	3008      	adds	r0, #8
 8002fec:	4770      	bx	lr

08002fee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002ff2:	3008      	adds	r0, #8
 8002ff4:	4770      	bx	lr

08002ff6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	f000 be4c 	b.w	8003c94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002ffe:	b510      	push	{r4, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	6003      	str	r3, [r0, #0]
 8003004:	f00a fbb9 	bl	800d77a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003008:	4620      	mov	r0, r4
 800300a:	bd10      	pop	{r4, pc}
 800300c:	080254b8 	.word	0x080254b8

08003010 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff2 	bl	8002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003018:	2114      	movs	r1, #20
 800301a:	4620      	mov	r0, r4
 800301c:	f01e fde9 	bl	8021bf2 <_ZdlPvj>
 8003020:	4620      	mov	r0, r4
 8003022:	bd10      	pop	{r4, pc}

08003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003026:	b510      	push	{r4, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	6003      	str	r3, [r0, #0]
 800302c:	f00a fba5 	bl	800d77a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003030:	4620      	mov	r0, r4
 8003032:	bd10      	pop	{r4, pc}
 8003034:	08025484 	.word	0x08025484

08003038 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4604      	mov	r4, r0
 800303c:	f7ff fff2 	bl	8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003044:	4620      	mov	r0, r4
 8003046:	f01e fdd4 	bl	8021bf2 <_ZdlPvj>
 800304a:	4620      	mov	r0, r4
 800304c:	bd10      	pop	{r4, pc}
	...

08003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003052:	b510      	push	{r4, lr}
 8003054:	4604      	mov	r4, r0
 8003056:	6003      	str	r3, [r0, #0]
 8003058:	f00a fb8f 	bl	800d77a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800305c:	4620      	mov	r0, r4
 800305e:	bd10      	pop	{r4, pc}
 8003060:	08025450 	.word	0x08025450

08003064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f7ff fff2 	bl	8003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800306c:	2118      	movs	r1, #24
 800306e:	4620      	mov	r0, r4
 8003070:	f01e fdbf 	bl	8021bf2 <_ZdlPvj>
 8003074:	4620      	mov	r0, r4
 8003076:	bd10      	pop	{r4, pc}

08003078 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <_ZN12FrontendHeapD1Ev+0x24>)
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	6003      	str	r3, [r0, #0]
 8003080:	f500 700b 	add.w	r0, r0, #556	@ 0x22c
 8003084:	f7ff ffba 	bl	8002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003088:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800308c:	f7ff ffca 	bl	8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003090:	f104 0014 	add.w	r0, r4, #20
 8003094:	f7ff ffdc 	bl	8003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003098:	4620      	mov	r0, r4
 800309a:	bd10      	pop	{r4, pc}
 800309c:	080254ec 	.word	0x080254ec

080030a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80030a0:	b508      	push	{r3, lr}
 80030a2:	4802      	ldr	r0, [pc, #8]	@ (80030ac <__tcf_0+0xc>)
 80030a4:	f7ff ffe8 	bl	8003078 <_ZN12FrontendHeapD1Ev>
 80030a8:	bd08      	pop	{r3, pc}
 80030aa:	bf00      	nop
 80030ac:	2400ac90 	.word	0x2400ac90

080030b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4604      	mov	r4, r0
 80030b4:	f7ff ffe0 	bl	8003078 <_ZN12FrontendHeapD1Ev>
 80030b8:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
 80030bc:	4620      	mov	r0, r4
 80030be:	f01e fd98 	bl	8021bf2 <_ZdlPvj>
 80030c2:	4620      	mov	r0, r4
 80030c4:	bd10      	pop	{r4, pc}
	...

080030c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030cc:	f000 fc58 	bl	8003980 <_ZN14BitmapDatabase11getInstanceEv>
 80030d0:	2400      	movs	r4, #0
 80030d2:	4605      	mov	r5, r0
 80030d4:	f000 fc58 	bl	8003988 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030d8:	4623      	mov	r3, r4
 80030da:	4601      	mov	r1, r0
 80030dc:	4622      	mov	r2, r4
 80030de:	4628      	mov	r0, r5
 80030e0:	9400      	str	r4, [sp, #0]
 80030e2:	f013 ff77 	bl	8016fd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030e6:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <touchgfx_init+0xbc>)
 80030e8:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030ec:	4d27      	ldr	r5, [pc, #156]	@ (800318c <touchgfx_init+0xc4>)
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f001 fab0 	bl	8004654 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030f4:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <touchgfx_init+0xc8>)
 80030f6:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030f8:	4827      	ldr	r0, [pc, #156]	@ (8003198 <touchgfx_init+0xd0>)
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	f013 fe16 	bl	8016d2c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	f3bf 8f5b 	dmb	ish
 8003106:	07db      	lsls	r3, r3, #31
 8003108:	d435      	bmi.n	8003176 <touchgfx_init+0xae>
 800310a:	4628      	mov	r0, r5
 800310c:	f01e fd73 	bl	8021bf6 <__cxa_guard_acquire>
 8003110:	b388      	cbz	r0, 8003176 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003112:	4c22      	ldr	r4, [pc, #136]	@ (800319c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003116:	f504 7611 	add.w	r6, r4, #580	@ 0x244
        : presenterStorage(pres),
 800311a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800311e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003122:	f504 770b 	add.w	r7, r4, #556	@ 0x22c
 8003126:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003128:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800312a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800312e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003130:	6126      	str	r6, [r4, #16]
 8003132:	f00a fb23 	bl	800d77c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003136:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <touchgfx_init+0xdc>)
 8003138:	4640      	mov	r0, r8
 800313a:	6163      	str	r3, [r4, #20]
 800313c:	f00a fb1e 	bl	800d77c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003140:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <touchgfx_init+0xe0>)
 8003142:	4638      	mov	r0, r7
 8003144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003146:	f00a fb19 	bl	800d77c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800314a:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <touchgfx_init+0xe4>)
 800314c:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 8003150:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8003154:	f001 fb06 	bl	8004764 <_ZN5ModelC1Ev>
 8003158:	4622      	mov	r2, r4
 800315a:	f504 7110 	add.w	r1, r4, #576	@ 0x240
 800315e:	4630      	mov	r0, r6
 8003160:	f001 faf6 	bl	8004750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003164:	4630      	mov	r0, r6
 8003166:	f000 fd95 	bl	8003c94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800316a:	4811      	ldr	r0, [pc, #68]	@ (80031b0 <touchgfx_init+0xe8>)
 800316c:	f01f f8d6 	bl	802231c <atexit>
 8003170:	4628      	mov	r0, r5
 8003172:	f01e fd4c 	bl	8021c0e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003176:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <touchgfx_init+0xec>)
}
 8003178:	b002      	add	sp, #8
 800317a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800317e:	f7fe bcd1 	b.w	8001b24 <_ZN11TouchGFXHAL10initializeEv>
 8003182:	bf00      	nop
 8003184:	240252d0 	.word	0x240252d0
 8003188:	24009e54 	.word	0x24009e54
 800318c:	2400ac8c 	.word	0x2400ac8c
 8003190:	24009e74 	.word	0x24009e74
 8003194:	24009e58 	.word	0x24009e58
 8003198:	24000034 	.word	0x24000034
 800319c:	2400ac90 	.word	0x2400ac90
 80031a0:	080254ec 	.word	0x080254ec
 80031a4:	08025450 	.word	0x08025450
 80031a8:	08025484 	.word	0x08025484
 80031ac:	080254b8 	.word	0x080254b8
 80031b0:	080030a1 	.word	0x080030a1
 80031b4:	24009dd0 	.word	0x24009dd0

080031b8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031b8:	4770      	bx	lr
	...

080031bc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031bc:	4801      	ldr	r0, [pc, #4]	@ (80031c4 <touchgfx_taskEntry+0x8>)
 80031be:	f7fe bcc3 	b.w	8001b48 <_ZN11TouchGFXHAL9taskEntryEv>
 80031c2:	bf00      	nop
 80031c4:	24009dd0 	.word	0x24009dd0

080031c8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031ca:	4c0e      	ldr	r4, [pc, #56]	@ (8003204 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031ce:	4e0f      	ldr	r6, [pc, #60]	@ (800320c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031d0:	4620      	mov	r0, r4
static LCD24bpp display;
 80031d2:	4d0f      	ldr	r5, [pc, #60]	@ (8003210 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031d4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031d6:	f7ff fe33 	bl	8002e40 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031da:	4628      	mov	r0, r5
 80031dc:	f017 fd9c 	bl	801ad18 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031e0:	480c      	ldr	r0, [pc, #48]	@ (8003214 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031e2:	f011 fb3d 	bl	8014860 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031e6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031ee:	4621      	mov	r1, r4
 80031f0:	4809      	ldr	r0, [pc, #36]	@ (8003218 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031f2:	e9cd 3200 	strd	r3, r2, [sp]
 80031f6:	4633      	mov	r3, r6
 80031f8:	462a      	mov	r2, r5
 80031fa:	f7fe fd39 	bl	8001c70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031fe:	b002      	add	sp, #8
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	bf00      	nop
 8003204:	24009ee0 	.word	0x24009ee0
 8003208:	080252b8 	.word	0x080252b8
 800320c:	2400ac88 	.word	0x2400ac88
 8003210:	24009e74 	.word	0x24009e74
 8003214:	24009e58 	.word	0x24009e58
 8003218:	24009dd0 	.word	0x24009dd0

0800321c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800321c:	4801      	ldr	r0, [pc, #4]	@ (8003224 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800321e:	f7ff bc5b 	b.w	8002ad8 <_ZN8STM32DMAD1Ev>
 8003222:	bf00      	nop
 8003224:	24009ee0 	.word	0x24009ee0

08003228 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003228:	2000      	movs	r0, #0
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800322c:	8081      	strh	r1, [r0, #4]
    }
 800322e:	4770      	bx	lr

08003230 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003230:	80c1      	strh	r1, [r0, #6]
    }
 8003232:	4770      	bx	lr

08003234 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003234:	8101      	strh	r1, [r0, #8]
    }
 8003236:	4770      	bx	lr

08003238 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003238:	8141      	strh	r1, [r0, #10]
    }
 800323a:	4770      	bx	lr

0800323c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800323c:	4770      	bx	lr

0800323e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800323e:	4770      	bx	lr

08003240 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003240:	4770      	bx	lr

08003242 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003242:	4770      	bx	lr

08003244 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003246:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003248:	88c4      	ldrh	r4, [r0, #6]
 800324a:	6803      	ldr	r3, [r0, #0]
 800324c:	1b12      	subs	r2, r2, r4
 800324e:	8884      	ldrh	r4, [r0, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	1b09      	subs	r1, r1, r4
 8003254:	b212      	sxth	r2, r2
    }
 8003256:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800325a:	b209      	sxth	r1, r1
 800325c:	4718      	bx	r3

0800325e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800325e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003262:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800326e:	6010      	str	r0, [r2, #0]
    }
 8003270:	4770      	bx	lr

08003272 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003272:	2000      	movs	r0, #0
 8003274:	4770      	bx	lr

08003276 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003276:	888b      	ldrh	r3, [r1, #4]
 8003278:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800327a:	2001      	movs	r0, #1
 800327c:	4770      	bx	lr

0800327e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800327e:	4770      	bx	lr

08003280 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003280:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003284:	4770      	bx	lr

08003286 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003286:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800328a:	4770      	bx	lr

0800328c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800328c:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800328e:	2200      	movs	r2, #0
        return rect.width;
 8003290:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003294:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003298:	8002      	strh	r2, [r0, #0]
 800329a:	8042      	strh	r2, [r0, #2]
 800329c:	8084      	strh	r4, [r0, #4]
 800329e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80032a2:	2200      	movs	r2, #0
 80032a4:	8002      	strh	r2, [r0, #0]
 80032a6:	8042      	strh	r2, [r0, #2]
 80032a8:	8082      	strh	r2, [r0, #4]
 80032aa:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80032ac:	4770      	bx	lr

080032ae <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80032ae:	7701      	strb	r1, [r0, #28]
    }
 80032b0:	4770      	bx	lr

080032b2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80032b2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032b8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032be:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032c2:	4770      	bx	lr

080032c4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032c4:	2001      	movs	r0, #1
 80032c6:	4770      	bx	lr

080032c8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032c8:	3098      	adds	r0, #152	@ 0x98
 80032ca:	4770      	bx	lr

080032cc <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032cc:	308c      	adds	r0, #140	@ 0x8c
 80032ce:	4770      	bx	lr

080032d0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032d0:	3084      	adds	r0, #132	@ 0x84
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032d4:	4770      	bx	lr

080032d6 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032d6:	4770      	bx	lr

080032d8 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032d8:	4770      	bx	lr
	...

080032dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	4b02      	ldr	r3, [pc, #8]	@ (80032e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032de:	2290      	movs	r2, #144	@ 0x90
 80032e0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032ec:	4770      	bx	lr

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032ee:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032f0:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032f4:	4770      	bx	lr

080032f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032f6:	4770      	bx	lr

080032f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032fc:	4611      	mov	r1, r2
 80032fe:	6840      	ldr	r0, [r0, #4]
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4718      	bx	r3

08003306 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003306:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800330a:	4770      	bx	lr

0800330c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	2148      	movs	r1, #72	@ 0x48
 8003312:	f01e fc6e 	bl	8021bf2 <_ZdlPvj>
 8003316:	4620      	mov	r0, r4
 8003318:	bd10      	pop	{r4, pc}

0800331a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
 800331e:	212c      	movs	r1, #44	@ 0x2c
 8003320:	f01e fc67 	bl	8021bf2 <_ZdlPvj>
 8003324:	4620      	mov	r0, r4
 8003326:	bd10      	pop	{r4, pc}

08003328 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	21bc      	movs	r1, #188	@ 0xbc
 800332e:	f01e fc60 	bl	8021bf2 <_ZdlPvj>
 8003332:	4620      	mov	r0, r4
 8003334:	bd10      	pop	{r4, pc}
	...

08003338 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
    HAL::initialize();
 800333c:	f00a fd19 	bl	800dd72 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003344:	f010 f81e 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 8003348:	4601      	mov	r1, r0
 800334a:	4620      	mov	r0, r4
 800334c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4908      	ldr	r1, [pc, #32]	@ (8003374 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003352:	4620      	mov	r0, r4
 8003354:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8003358:	2300      	movs	r3, #0
 800335a:	461a      	mov	r2, r3
 800335c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003362:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003366:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003368:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800336e:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	d0119400 	.word	0xd0119400
 8003378:	2400b138 	.word	0x2400b138
 800337c:	2400b0f0 	.word	0x2400b0f0
 8003380:	d0000000 	.word	0xd0000000
 8003384:	00119400 	.word	0x00119400

08003388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800338e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	f008 f8d0 	bl	800b538 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003398:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800339a:	f008 f8f0 	bl	800b57e <osMutexRelease>
        streams[handle].isActive = false;
 800339e:	2324      	movs	r3, #36	@ 0x24
 80033a0:	fb03 4505 	mla	r5, r3, r5, r4
 80033a4:	2300      	movs	r3, #0
 80033a6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80033aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80033ae:	b90b      	cbnz	r3, 80033b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80033b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80033b4:	bd38      	pop	{r3, r4, r5, pc}

080033b6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80033b6:	f00a bc8d 	b.w	800dcd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033ba <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033ba:	f00a bdfc 	b.w	800dfb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033be <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033be:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033c2:	b112      	cbz	r2, 80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4718      	bx	r3
    }
 80033ca:	4770      	bx	lr

080033cc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033cc:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033ce:	6953      	ldr	r3, [r2, #20]
 80033d0:	03db      	lsls	r3, r3, #15
{
 80033d2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033d4:	d51e      	bpl.n	8003414 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033dc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033e0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033e8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033ec:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033f0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033f2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033f6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033f8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033fc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033fe:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003402:	d2f9      	bcs.n	80033f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003404:	3b20      	subs	r3, #32
 8003406:	f113 0f20 	cmn.w	r3, #32
 800340a:	d1f2      	bne.n	80033f2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800340c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003410:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800341c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800341e:	b131      	cbz	r1, 800342e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003422:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003426:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003428:	4804      	ldr	r0, [pc, #16]	@ (800343c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800342a:	f01e ff59 	bl	80222e0 <__assert_func>
    }
 800342e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003432:	bd08      	pop	{r3, pc}
 8003434:	08023a83 	.word	0x08023a83
 8003438:	08023a97 	.word	0x08023a97
 800343c:	08023c21 	.word	0x08023c21

08003440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003440:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003442:	b131      	cbz	r1, 8003452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003446:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800344a:	4a06      	ldr	r2, [pc, #24]	@ (8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800344c:	4806      	ldr	r0, [pc, #24]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800344e:	f01e ff47 	bl	80222e0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003452:	6840      	ldr	r0, [r0, #4]
 8003454:	4611      	mov	r1, r2
 8003456:	6803      	ldr	r3, [r0, #0]
    }
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	4718      	bx	r3
 8003460:	08023a83 	.word	0x08023a83
 8003464:	08023c6b 	.word	0x08023c6b
 8003468:	08023c21 	.word	0x08023c21

0800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800346c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800346e:	b129      	cbz	r1, 800347c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003472:	2179      	movs	r1, #121	@ 0x79
 8003474:	4a03      	ldr	r2, [pc, #12]	@ (8003484 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003476:	4804      	ldr	r0, [pc, #16]	@ (8003488 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003478:	f01e ff32 	bl	80222e0 <__assert_func>
    }
 800347c:	68c0      	ldr	r0, [r0, #12]
 800347e:	bd08      	pop	{r3, pc}
 8003480:	08023a83 	.word	0x08023a83
 8003484:	08023e19 	.word	0x08023e19
 8003488:	08023c21 	.word	0x08023c21

0800348c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003490:	b129      	cbz	r1, 800349e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003492:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003494:	21a2      	movs	r1, #162	@ 0xa2
 8003496:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003498:	4819      	ldr	r0, [pc, #100]	@ (8003500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800349a:	f01e ff21 	bl	80222e0 <__assert_func>
        switch (cmd)
 800349e:	2a05      	cmp	r2, #5
 80034a0:	d815      	bhi.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034a2:	e8df f002 	tbb	[pc, r2]
 80034a6:	1103      	.short	0x1103
 80034a8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80034ac:	6840      	ldr	r0, [r0, #4]
 80034ae:	6803      	ldr	r3, [r0, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	4798      	blx	r3
 80034b4:	b158      	cbz	r0, 80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034bc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034c0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034c2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034c6:	e002      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034ce:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034d0:	6203      	str	r3, [r0, #32]
 80034d2:	e7f5      	b.n	80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034d4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034dc:	e7f0      	b.n	80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034de:	2300      	movs	r3, #0
 80034e0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	6203      	str	r3, [r0, #32]
            break;
 80034e8:	e7f1      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034ea:	3b00      	subs	r3, #0
 80034ec:	bf18      	it	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034f4:	e7eb      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034f6:	bf00      	nop
 80034f8:	08023a83 	.word	0x08023a83
 80034fc:	08023fce 	.word	0x08023fce
 8003500:	08023c21 	.word	0x08023c21

08003504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003504:	b510      	push	{r4, lr}
 8003506:	460c      	mov	r4, r1
 8003508:	4611      	mov	r1, r2
 800350a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800350c:	b12c      	cbz	r4, 800351a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003510:	2190      	movs	r1, #144	@ 0x90
 8003512:	4a06      	ldr	r2, [pc, #24]	@ (800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003514:	4806      	ldr	r0, [pc, #24]	@ (8003530 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003516:	f01e fee3 	bl	80222e0 <__assert_func>
        stream.frameNumber = 0;
 800351a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800351c:	6840      	ldr	r0, [r0, #4]
 800351e:	6803      	ldr	r3, [r0, #0]
    }
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4718      	bx	r3
 8003528:	08023a83 	.word	0x08023a83
 800352c:	080241a2 	.word	0x080241a2
 8003530:	08023c21 	.word	0x08023c21

08003534 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003536:	b129      	cbz	r1, 8003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800353a:	2182      	movs	r1, #130	@ 0x82
 800353c:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800353e:	4806      	ldr	r0, [pc, #24]	@ (8003558 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003540:	f01e fece 	bl	80222e0 <__assert_func>
        stream.tickCount = 0;
 8003544:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003548:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800354c:	bd08      	pop	{r3, pc}
 800354e:	bf00      	nop
 8003550:	08023a83 	.word	0x08023a83
 8003554:	0802437d 	.word	0x0802437d
 8003558:	08023c21 	.word	0x08023c21

0800355c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800355c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003564:	b153      	cbz	r3, 800357c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003566:	f04f 31ff 	mov.w	r1, #4294967295
 800356a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800356c:	f007 ffe4 	bl	800b538 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003570:	2300      	movs	r3, #0
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003576:	2301      	movs	r3, #1
 8003578:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800357c:	bd10      	pop	{r4, pc}

0800357e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800357e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003582:	b11a      	cbz	r2, 800358c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003584:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003588:	b102      	cbz	r2, 800358c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800358a:	6018      	str	r0, [r3, #0]
        }
    }
 800358c:	4770      	bx	lr
	...

08003590 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
 8003594:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003596:	b129      	cbz	r1, 80035a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003598:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800359a:	21d0      	movs	r1, #208	@ 0xd0
 800359c:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800359e:	4814      	ldr	r0, [pc, #80]	@ (80035f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80035a0:	f01e fe9e 	bl	80222e0 <__assert_func>
        if (stream.isPlaying)
 80035a4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035a8:	b133      	cbz	r3, 80035b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80035b2:	6963      	ldr	r3, [r4, #20]
 80035b4:	4413      	add	r3, r2
 80035b6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035b8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035bc:	b90b      	cbnz	r3, 80035c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035be:	2001      	movs	r0, #1
    }
 80035c0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035c2:	68a3      	ldr	r3, [r4, #8]
 80035c4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035cc:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035ce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035d2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1f1      	bne.n	80035be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ee      	bne.n	80035c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035e2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035e6:	e7eb      	b.n	80035c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035e8:	08023a83 	.word	0x08023a83
 80035ec:	08024539 	.word	0x08024539
 80035f0:	08023c21 	.word	0x08023c21
 80035f4:	2402526c 	.word	0x2402526c

080035f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035fa:	4c1a      	ldr	r4, [pc, #104]	@ (8003664 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035fc:	4605      	mov	r5, r0
    HAL::endFrame();
 80035fe:	f00a fbab 	bl	800dd58 <_ZN8touchgfx3HAL8endFrameEv>
 8003602:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003606:	b913      	cbnz	r3, 800360e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003608:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800360c:	b1ab      	cbz	r3, 800363a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800360e:	69e1      	ldr	r1, [r4, #28]
 8003610:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003614:	4353      	muls	r3, r2
 8003616:	6922      	ldr	r2, [r4, #16]
 8003618:	434a      	muls	r2, r1
 800361a:	4293      	cmp	r3, r2
 800361c:	d30d      	bcc.n	800363a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800361e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003622:	b138      	cbz	r0, 8003634 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800362a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800362c:	bf98      	it	ls
 800362e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003632:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003634:	2301      	movs	r3, #1
 8003636:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800363a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800363c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800363e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003642:	f008 f831 	bl	800b6a8 <osSemaphoreRelease>
        if (uiHasMutex)
 8003646:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800364a:	b12b      	cbz	r3, 8003658 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800364c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800364e:	f007 ff96 	bl	800b57e <osMutexRelease>
            uiHasMutex = false;
 8003652:	2300      	movs	r3, #0
 8003654:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003658:	6868      	ldr	r0, [r5, #4]
 800365a:	6803      	ldr	r3, [r0, #0]
}
 800365c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4718      	bx	r3
 8003664:	2400b0f0 	.word	0x2400b0f0

08003668 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003672:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003676:	f3bf 8f6f 	isb	sy
}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003680:	4b02      	ldr	r3, [pc, #8]	@ (800368c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003682:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100

08003690 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003694:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003698:	b9d8      	cbnz	r0, 80036d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 800369a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800369e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80036a0:	2501      	movs	r5, #1
                streams[i] = Stream();
 80036a2:	60d8      	str	r0, [r3, #12]
 80036a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80036aa:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036ac:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80036b0:	6158      	str	r0, [r3, #20]
 80036b2:	6198      	str	r0, [r3, #24]
 80036b4:	61d8      	str	r0, [r3, #28]
 80036b6:	6218      	str	r0, [r3, #32]
 80036b8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036ba:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036bc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036c0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036c4:	443c      	add	r4, r7
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	d90a      	bls.n	80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036cc:	2152      	movs	r1, #82	@ 0x52
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036d0:	e003      	b.n	80036da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036d4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036da:	480b      	ldr	r0, [pc, #44]	@ (8003708 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036dc:	f01e fe00 	bl	80222e0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036e0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036e4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036e8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036ec:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036f2:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036f4:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f8:	08024891 	.word	0x08024891
 80036fc:	080248cc 	.word	0x080248cc
 8003700:	080246da 	.word	0x080246da
 8003704:	0802470a 	.word	0x0802470a
 8003708:	08023c21 	.word	0x08023c21

0800370c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800370c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800370e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003710:	4e12      	ldr	r6, [pc, #72]	@ (800375c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003712:	4604      	mov	r4, r0
 8003714:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003716:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003718:	6003      	str	r3, [r0, #0]
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003720:	b10a      	cbz	r2, 8003726 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003722:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003724:	b900      	cbnz	r0, 8003728 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003726:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003728:	6803      	ldr	r3, [r0, #0]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4798      	blx	r3
 800372e:	1e43      	subs	r3, r0, #1
 8003730:	425d      	negs	r5, r3
 8003732:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003738:	b130      	cbz	r0, 8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800373a:	6803      	ldr	r3, [r0, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	4798      	blx	r3
 8003740:	2801      	cmp	r0, #1
 8003742:	bf08      	it	eq
 8003744:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003748:	b92d      	cbnz	r5, 8003756 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 800374c:	2127      	movs	r1, #39	@ 0x27
 800374e:	4a06      	ldr	r2, [pc, #24]	@ (8003768 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003750:	4806      	ldr	r0, [pc, #24]	@ (800376c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003752:	f01e fdc5 	bl	80222e0 <__assert_func>
    }
 8003756:	4620      	mov	r0, r4
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	bf00      	nop
 800375c:	2402526c 	.word	0x2402526c
 8003760:	08025500 	.word	0x08025500
 8003764:	08024a6f 	.word	0x08024a6f
 8003768:	08024acd 	.word	0x08024acd
 800376c:	08024b06 	.word	0x08024b06

08003770 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003770:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003772:	4e25      	ldr	r6, [pc, #148]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	6835      	ldr	r5, [r6, #0]
 8003776:	f3bf 8f5b 	dmb	ish
 800377a:	f015 0501 	ands.w	r5, r5, #1
 800377e:	d140      	bne.n	8003802 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 8003780:	4630      	mov	r0, r6
 8003782:	f01e fa38 	bl	8021bf6 <__cxa_guard_acquire>
 8003786:	2800      	cmp	r0, #0
 8003788:	d03b      	beq.n	8003802 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 800378a:	4c20      	ldr	r4, [pc, #128]	@ (800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 800378c:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 800378e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003792:	6125      	str	r5, [r4, #16]
 8003794:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003796:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003798:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 800379a:	e9c4 3500 	strd	r3, r5, [r4]
 800379e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80037a2:	f011 fb42 	bl	8014e2a <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80037a6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037aa:	f00c fdfb 	bl	80103a4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037b0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80037b2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037b4:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037b6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037ba:	f7ff ffa7 	bl	800370c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037be:	4b17      	ldr	r3, [pc, #92]	@ (800381c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037c0:	4817      	ldr	r0, [pc, #92]	@ (8003820 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037c2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037c6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037c8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037cc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037d0:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 80037d4:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037d8:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037dc:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037e6:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037ea:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037ee:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 80037f4:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037f8:	f01e fd90 	bl	802231c <atexit>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f01e fa06 	bl	8021c0e <__cxa_guard_release>
}
 8003802:	4802      	ldr	r0, [pc, #8]	@ (800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	bf00      	nop
 8003808:	2400b030 	.word	0x2400b030
 800380c:	2400b034 	.word	0x2400b034
 8003810:	0802635c 	.word	0x0802635c
 8003814:	08025520 	.word	0x08025520
 8003818:	08025598 	.word	0x08025598
 800381c:	080263a8 	.word	0x080263a8
 8003820:	080032d9 	.word	0x080032d9
 8003824:	080263e0 	.word	0x080263e0

08003828 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800382c:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800382e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003830:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003834:	f04f 31ff 	mov.w	r1, #4294967295
 8003838:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800383a:	f007 ff09 	bl	800b650 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800383e:	f04f 31ff 	mov.w	r1, #4294967295
 8003842:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003844:	f007 fe78 	bl	800b538 <osMutexAcquire>
                if (stream.doDecode)
 8003848:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800384c:	b343      	cbz	r3, 80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800384e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003850:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003854:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003856:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800385a:	f1b8 0f00 	cmp.w	r8, #0
 800385e:	d023      	beq.n	80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	4641      	mov	r1, r8
 8003864:	4628      	mov	r0, r5
 8003866:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003872:	9700      	str	r7, [sp, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800387a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800387e:	68a1      	ldr	r1, [r4, #8]
 8003880:	47c0      	blx	r8
                    stream.frameCount++;
 8003882:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003884:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003888:	3301      	adds	r3, #1
 800388a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 800388c:	b1f0      	cbz	r0, 80038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	4628      	mov	r0, r5
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	4798      	blx	r3
 8003896:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003898:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800389a:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 800389c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80038a0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038a2:	f007 fe6c 	bl	800b57e <osMutexRelease>
        while (1)
 80038a6:	e7c5      	b.n	8003834 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80038a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d0de      	beq.n	800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80038ae:	4628      	mov	r0, r5
 80038b0:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80038b4:	4798      	blx	r3
 80038b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80038b8:	4401      	add	r1, r0
 80038ba:	4628      	mov	r0, r5
 80038bc:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038c2:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038c6:	4413      	add	r3, r2
 80038c8:	6123      	str	r3, [r4, #16]
 80038ca:	e7cf      	b.n	800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038cc:	2001      	movs	r0, #1
 80038ce:	e7e3      	b.n	8003898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038d0 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038d0:	4801      	ldr	r0, [pc, #4]	@ (80038d8 <videoTaskFunc+0x8>)
{
 80038d2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038d4:	f7ff ffa8 	bl	8003828 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038d8:	2400b0f0 	.word	0x2400b0f0

080038dc <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038dc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038de:	4814      	ldr	r0, [pc, #80]	@ (8003930 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e0:	2500      	movs	r5, #0
 80038e2:	f7fe fbf7 	bl	80020d4 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e6:	4c13      	ldr	r4, [pc, #76]	@ (8003934 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ea:	462a      	mov	r2, r5
 80038ec:	4629      	mov	r1, r5
 80038ee:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038f6:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038f8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038fa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038fc:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003900:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003904:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003908:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 800390c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003910:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003914:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003918:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800391c:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003920:	f007 fe4c 	bl	800b5bc <osSemaphoreNew>
 8003924:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003926:	4628      	mov	r0, r5
 8003928:	f007 fdce 	bl	800b4c8 <osMutexNew>
 800392c:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	2400b138 	.word	0x2400b138
 8003934:	2400b0f0 	.word	0x2400b0f0
 8003938:	080255e4 	.word	0x080255e4

0800393c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId COUNTER = 3; // arial_25_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800393c:	4770      	bx	lr

0800393e <_ZN23ApplicationFontProviderD0Ev>:
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	2104      	movs	r1, #4
 8003944:	f01e f955 	bl	8021bf2 <_ZdlPvj>
 8003948:	4620      	mov	r0, r4
 800394a:	bd10      	pop	{r4, pc}

0800394c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800394c:	b508      	push	{r3, lr}
    switch (typography)
 800394e:	2903      	cmp	r1, #3
 8003950:	d813      	bhi.n	800397a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8003952:	e8df f001 	tbb	[pc, r1]
 8003956:	0602      	.short	0x0602
 8003958:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800395a:	f000 fec7 	bl	80046ec <_ZN17TypedTextDatabase8getFontsEv>
 800395e:	6800      	ldr	r0, [r0, #0]
        // arial_25_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8003960:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003962:	f000 fec3 	bl	80046ec <_ZN17TypedTextDatabase8getFontsEv>
 8003966:	6840      	ldr	r0, [r0, #4]
 8003968:	e7fa      	b.n	8003960 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800396a:	f000 febf 	bl	80046ec <_ZN17TypedTextDatabase8getFontsEv>
 800396e:	6880      	ldr	r0, [r0, #8]
 8003970:	e7f6      	b.n	8003960 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003972:	f000 febb 	bl	80046ec <_ZN17TypedTextDatabase8getFontsEv>
 8003976:	68c0      	ldr	r0, [r0, #12]
 8003978:	e7f2      	b.n	8003960 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800397a:	2000      	movs	r0, #0
 800397c:	e7f0      	b.n	8003960 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003980 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003980:	4800      	ldr	r0, [pc, #0]	@ (8003984 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003982:	4770      	bx	lr
 8003984:	08025634 	.word	0x08025634

08003988 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003988:	2004      	movs	r0, #4
 800398a:	4770      	bx	lr

0800398c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800398c:	b513      	push	{r0, r1, r4, lr}
 800398e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003990:	b151      	cbz	r1, 80039a8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003992:	6803      	ldr	r3, [r0, #0]
 8003994:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003996:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003998:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800399c:	689c      	ldr	r4, [r3, #8]
 800399e:	f10d 0303 	add.w	r3, sp, #3
 80039a2:	47a0      	blx	r4
        return glyph;
    }
 80039a4:	b002      	add	sp, #8
 80039a6:	bd10      	pop	{r4, pc}
            return 0;
 80039a8:	4608      	mov	r0, r1
 80039aa:	e7fb      	b.n	80039a4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080039ac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80039ac:	89c0      	ldrh	r0, [r0, #14]
 80039ae:	4770      	bx	lr

080039b0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80039b0:	8a00      	ldrh	r0, [r0, #16]
 80039b2:	4770      	bx	lr

080039b4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80039b4:	88c0      	ldrh	r0, [r0, #6]
 80039b6:	4770      	bx	lr

080039b8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80039b8:	8880      	ldrh	r0, [r0, #4]
 80039ba:	4770      	bx	lr

080039bc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039bc:	7a80      	ldrb	r0, [r0, #10]
    }
 80039be:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039c2:	4770      	bx	lr

080039c4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039c4:	7a80      	ldrb	r0, [r0, #10]
    }
 80039c6:	09c0      	lsrs	r0, r0, #7
 80039c8:	4770      	bx	lr

080039ca <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039ca:	2000      	movs	r0, #0
 80039cc:	4770      	bx	lr
	...

080039d0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039d8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	00000000 	.word	0x00000000

080039dc <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039dc:	4770      	bx	lr

080039de <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80039de:	b510      	push	{r4, lr}
 80039e0:	4604      	mov	r4, r0
    }
 80039e2:	2108      	movs	r1, #8
 80039e4:	f01e f905 	bl	8021bf2 <_ZdlPvj>
 80039e8:	4620      	mov	r0, r4
 80039ea:	bd10      	pop	{r4, pc}

080039ec <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039ec:	4770      	bx	lr

080039ee <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039ee:	4770      	bx	lr

080039f0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039f0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	6849      	ldr	r1, [r1, #4]
 80039f8:	c303      	stmia	r3!, {r0, r1}
    }
 80039fa:	4770      	bx	lr

080039fc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039fc:	4770      	bx	lr

080039fe <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039fe:	4770      	bx	lr

08003a00 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003a00:	6041      	str	r1, [r0, #4]
    }
 8003a02:	4770      	bx	lr

08003a04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a04:	4770      	bx	lr

08003a06 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003a06:	4770      	bx	lr

08003a08 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003a08:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003a0a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003a0e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003a18:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a1c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	08003ac9 	.word	0x08003ac9

08003a28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	7203      	strb	r3, [r0, #8]
    }
 8003a2c:	4770      	bx	lr

08003a2e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a2e:	4770      	bx	lr

08003a30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a30:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a32:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a34:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a36:	68c2      	ldr	r2, [r0, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	1054      	asrs	r4, r2, #1
 8003a3c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a40:	07d2      	lsls	r2, r2, #31
 8003a42:	bf48      	it	mi
 8003a44:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a46:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a4a:	bf48      	it	mi
 8003a4c:	58d3      	ldrmi	r3, [r2, r3]
 8003a4e:	4718      	bx	r3

08003a50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a50:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a52:	6840      	ldr	r0, [r0, #4]
 8003a54:	b130      	cbz	r0, 8003a64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	b91a      	cbnz	r2, 8003a62 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a5a:	68d8      	ldr	r0, [r3, #12]
 8003a5c:	f000 0001 	and.w	r0, r0, #1
 8003a60:	4770      	bx	lr
 8003a62:	2001      	movs	r0, #1
    }
 8003a64:	4770      	bx	lr

08003a66 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a66:	b510      	push	{r4, lr}
 8003a68:	4604      	mov	r4, r0
 8003a6a:	210c      	movs	r1, #12
 8003a6c:	f01e f8c1 	bl	8021bf2 <_ZdlPvj>
 8003a70:	4620      	mov	r0, r4
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a74:	b510      	push	{r4, lr}
 8003a76:	4604      	mov	r4, r0
 8003a78:	2110      	movs	r1, #16
 8003a7a:	f01e f8ba 	bl	8021bf2 <_ZdlPvj>
 8003a7e:	4620      	mov	r0, r4
 8003a80:	bd10      	pop	{r4, pc}

08003a82 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003a8a:	f01e f8b2 	bl	8021bf2 <_ZdlPvj>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003a92:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003a94:	f00f fc76 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 8003a98:	6803      	ldr	r3, [r0, #0]
    }
 8003a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	4718      	bx	r3

08003aa2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003aa6:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003aaa:	b158      	cbz	r0, 8003ac4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003aac:	6803      	ldr	r3, [r0, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4798      	blx	r3
 8003ab2:	b138      	cbz	r0, 8003ac4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003ab4:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003ac4:	bd10      	pop	{r4, pc}
	...

08003ac8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003ac8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003acc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ad0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ad2:	68b0      	ldr	r0, [r6, #8]
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4798      	blx	r3
 8003ada:	f5b0 7ffc 	cmp.w	r0, #504	@ 0x1f8
 8003ade:	d205      	bcs.n	8003aec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003ae0:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003ae2:	21a3      	movs	r1, #163	@ 0xa3
 8003ae4:	4a44      	ldr	r2, [pc, #272]	@ (8003bf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003ae6:	4845      	ldr	r0, [pc, #276]	@ (8003bfc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003ae8:	f01e fbfa 	bl	80222e0 <__assert_func>
 8003aec:	6870      	ldr	r0, [r6, #4]
 8003aee:	6803      	ldr	r3, [r0, #0]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4798      	blx	r3
 8003af4:	280f      	cmp	r0, #15
 8003af6:	d803      	bhi.n	8003b00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003af8:	4b41      	ldr	r3, [pc, #260]	@ (8003c00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003afa:	21a4      	movs	r1, #164	@ 0xa4
 8003afc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003afe:	e7f2      	b.n	8003ae6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003b00:	68f0      	ldr	r0, [r6, #12]
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4798      	blx	r3
 8003b08:	280b      	cmp	r0, #11
 8003b0a:	d803      	bhi.n	8003b14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003b0e:	21a5      	movs	r1, #165	@ 0xa5
 8003b10:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003b12:	e7e8      	b.n	8003ae6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003b14:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003c0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003b18:	f00f fc34 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003b1c:	3004      	adds	r0, #4
 8003b1e:	f00f fc56 	bl	80133ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003b22:	f8d9 0000 	ldr.w	r0, [r9]
 8003b26:	b110      	cbz	r0, 8003b2e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4798      	blx	r3
    if (*currentTrans)
 8003b2e:	f8d9 0000 	ldr.w	r0, [r9]
 8003b32:	b110      	cbz	r0, 8003b3a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4798      	blx	r3
    if (*currentScreen)
 8003b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003b3e:	f8d8 0000 	ldr.w	r0, [r8]
 8003b42:	b110      	cbz	r0, 8003b4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003b44:	6803      	ldr	r3, [r0, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4798      	blx	r3
    if (*currentPresenter)
 8003b4a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b4e:	b110      	cbz	r0, 8003b56 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003b50:	6803      	ldr	r3, [r0, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4798      	blx	r3
    if (*currentScreen)
 8003b56:	f8d8 0000 	ldr.w	r0, [r8]
 8003b5a:	b110      	cbz	r0, 8003b62 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003b5c:	6803      	ldr	r3, [r0, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4798      	blx	r3
    if (*currentPresenter)
 8003b62:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b66:	b110      	cbz	r0, 8003b6e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003b68:	6803      	ldr	r3, [r0, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003b6e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003b70:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003b72:	f04f 0b00 	mov.w	fp, #0
 8003b76:	6803      	ldr	r3, [r0, #0]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	4798      	blx	r3
 8003b7c:	4b22      	ldr	r3, [pc, #136]	@ (8003c08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003b7e:	4604      	mov	r4, r0
 8003b80:	f8c0 b004 	str.w	fp, [r0, #4]
 8003b84:	f880 b008 	strb.w	fp, [r0, #8]
 8003b88:	4659      	mov	r1, fp
 8003b8a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003b8c:	68b0      	ldr	r0, [r6, #8]
 8003b8e:	6803      	ldr	r3, [r0, #0]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	4798      	blx	r3
 8003b94:	4605      	mov	r5, r0
 8003b96:	f000 fe19 	bl	80047cc <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003b9a:	6870      	ldr	r0, [r6, #4]
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	6803      	ldr	r3, [r0, #0]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	4798      	blx	r3
 8003ba4:	4606      	mov	r6, r0
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f000 fdee 	bl	8004788 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003bac:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003bae:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003bb2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003bb4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003bb8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003bbc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003bc0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003bc2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003bc6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003bc8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003bca:	4798      	blx	r3
    newPresenter->activate();
 8003bcc:	6833      	ldr	r3, [r6, #0]
 8003bce:	4630      	mov	r0, r6
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f011 fdac 	bl	8015734 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	4620      	mov	r0, r4
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4798      	blx	r3
    newTransition->invalidate();
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	4620      	mov	r0, r4
 8003be8:	695b      	ldr	r3, [r3, #20]
}
 8003bea:	b001      	add	sp, #4
 8003bec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	4718      	bx	r3
 8003bf2:	bf00      	nop
 8003bf4:	08024b76 	.word	0x08024b76
 8003bf8:	08024c04 	.word	0x08024c04
 8003bfc:	08024cd6 	.word	0x08024cd6
 8003c00:	08024d2b 	.word	0x08024d2b
 8003c04:	08024dce 	.word	0x08024dce
 8003c08:	08025708 	.word	0x08025708
 8003c0c:	240252b4 	.word	0x240252b4
 8003c10:	240252b0 	.word	0x240252b0

08003c14 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c14:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c1c:	b10a      	cbz	r2, 8003c22 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003c1e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c20:	b900      	cbnz	r0, 8003c24 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003c22:	6898      	ldr	r0, [r3, #8]
    }
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2402526c 	.word	0x2402526c

08003c2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	4617      	mov	r7, r2
 8003c30:	4604      	mov	r4, r0
 8003c32:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003c34:	f00f fc6c 	bl	8013510 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003c38:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003c3a:	2500      	movs	r5, #0
        instance = this;
 8003c3c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c3e:	4629      	mov	r1, r5
      model(m)
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003c42:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003c44:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003c46:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003c4a:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c52:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003c54:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003c58:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003c5a:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c5e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003c60:	4628      	mov	r0, r5
 8003c62:	f000 fcf7 	bl	8004654 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003c66:	f7ff ffd5 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 8003c6a:	f018 f956 	bl	801bf1a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003c6e:	f7ff ffd1 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 8003c72:	f018 f9c9 	bl	801c008 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003c76:	f7ff ffcd 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 8003c7a:	f018 f9d1 	bl	801c020 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003c7e:	4620      	mov	r0, r4
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c82:	bf00      	nop
 8003c84:	240252c0 	.word	0x240252c0
 8003c88:	080256b4 	.word	0x080256b4
 8003c8c:	0802569c 	.word	0x0802569c
 8003c90:	2402526c 	.word	0x2402526c

08003c94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003c96:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003c9a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003ca4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003ca8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	08003ac9 	.word	0x08003ac9

08003cb4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003cb4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003cb6:	4770      	bx	lr

08003cb8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003cb8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003cba:	4770      	bx	lr

08003cbc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003cbc:	4770      	bx	lr

08003cbe <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8003cbe:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003cc0:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8003cc2:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003cc4:	0ad2      	lsrs	r2, r2, #11
{
 8003cc6:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 8003cc8:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003cca:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8003ccc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8003cd0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8003cd4:	4418      	add	r0, r3
 8003cd6:	bd10      	pop	{r4, pc}

08003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003cdc:	b1ba      	cbz	r2, 8003d0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003cde:	7b10      	ldrb	r0, [r2, #12]
 8003ce0:	b168      	cbz	r0, 8003cfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003ce2:	7b53      	ldrb	r3, [r2, #13]
 8003ce4:	7ad2      	ldrb	r2, [r2, #11]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003cec:	431a      	orrs	r2, r3
 8003cee:	6a23      	ldr	r3, [r4, #32]
 8003cf0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	428a      	cmp	r2, r1
 8003cf8:	d102      	bne.n	8003d00 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003cfa:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003cfe:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003d00:	d805      	bhi.n	8003d0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003d02:	3801      	subs	r0, #1
 8003d04:	3304      	adds	r3, #4
 8003d06:	b280      	uxth	r0, r0
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d1f3      	bne.n	8003cf4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003d0c:	e7f7      	b.n	8003cfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e7f5      	b.n	8003cfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003d12 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d12:	b510      	push	{r4, lr}
 8003d14:	4604      	mov	r4, r0
 8003d16:	212c      	movs	r1, #44	@ 0x2c
 8003d18:	f01d ff6b 	bl	8021bf2 <_ZdlPvj>
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	bd10      	pop	{r4, pc}

08003d20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003d20:	b530      	push	{r4, r5, lr}
 8003d22:	b08b      	sub	sp, #44	@ 0x2c
 8003d24:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003d26:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003d2a:	9508      	str	r5, [sp, #32]
 8003d2c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003d30:	9507      	str	r5, [sp, #28]
 8003d32:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003d36:	9506      	str	r5, [sp, #24]
 8003d38:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003d3c:	9505      	str	r5, [sp, #20]
 8003d3e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003d42:	9504      	str	r5, [sp, #16]
 8003d44:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003d48:	9503      	str	r5, [sp, #12]
 8003d4a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003d4e:	9502      	str	r5, [sp, #8]
 8003d50:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003d54:	9501      	str	r5, [sp, #4]
 8003d56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003d5a:	9500      	str	r5, [sp, #0]
 8003d5c:	f011 f922 	bl	8014fa4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003d62:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003d64:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003d66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d68:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003d6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d6c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003d6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d70:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003d72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003d74:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003d76:	b00b      	add	sp, #44	@ 0x2c
 8003d78:	bd30      	pop	{r4, r5, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0802572c 	.word	0x0802572c

08003d80 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8003d80:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003d82:	4770      	bx	lr

08003d84 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003d84:	4770      	bx	lr

08003d86 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003d86:	4770      	bx	lr

08003d88 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003d88:	4770      	bx	lr

08003d8a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003d8a:	4770      	bx	lr

08003d8c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003d8c:	4770      	bx	lr

08003d8e <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8003d8e:	b530      	push	{r4, r5, lr}
 8003d90:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003d92:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003d94:	4604      	mov	r4, r0
        rect.width = width;
 8003d96:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003d98:	466d      	mov	r5, sp
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da0:	343c      	adds	r4, #60	@ 0x3c
 8003da2:	4628      	mov	r0, r5
 8003da4:	4798      	blx	r3
 8003da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003dae:	b005      	add	sp, #20
 8003db0:	bd30      	pop	{r4, r5, pc}

08003db2 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003db2:	b530      	push	{r4, r5, lr}
 8003db4:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003db6:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003db8:	4604      	mov	r4, r0
        rect.height = height;
 8003dba:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003dbc:	466d      	mov	r5, sp
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc4:	343c      	adds	r4, #60	@ 0x3c
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	4798      	blx	r3
 8003dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003dd2:	b005      	add	sp, #20
 8003dd4:	bd30      	pop	{r4, r5, pc}

08003dd6 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	8002      	strh	r2, [r0, #0]
 8003dda:	8042      	strh	r2, [r0, #2]
 8003ddc:	8082      	strh	r2, [r0, #4]
 8003dde:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003de0:	4770      	bx	lr

08003de2 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003de2:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003de6:	4770      	bx	lr

08003de8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003de8:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003dea:	b570      	push	{r4, r5, r6, lr}
 8003dec:	4604      	mov	r4, r0
        setX(x);
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003df0:	4615      	mov	r5, r2
        setX(x);
 8003df2:	4798      	blx	r3
        setBaselineY(baselineY);
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003e00:	4718      	bx	r3

08003e02 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003e02:	2000      	movs	r0, #0
 8003e04:	4770      	bx	lr

08003e06 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003e06:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003e08:	4770      	bx	lr

08003e0a <_ZN15Screen1ViewBase10Up_ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void Up_Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003e0a:	4770      	bx	lr

08003e0c <_ZN15Screen1ViewBase11DownClickedEv>:
    virtual void DownClicked()
    {
        // Override and implement this function in Screen1
    }
 8003e0c:	4770      	bx	lr

08003e0e <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003e0e:	4770      	bx	lr

08003e10 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class ImageButtonStyle : public T
 8003e10:	4770      	bx	lr

08003e12 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e12:	4770      	bx	lr

08003e14 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003e14:	4770      	bx	lr

08003e16 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003e16:	4770      	bx	lr

08003e18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003e18:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003e1a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003e1c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003e1e:	68c2      	ldr	r2, [r0, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	1055      	asrs	r5, r2, #1
 8003e24:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003e28:	07d2      	lsls	r2, r2, #31
 8003e2a:	bf48      	it	mi
 8003e2c:	5962      	ldrmi	r2, [r4, r5]
    }
 8003e2e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003e30:	bf48      	it	mi
 8003e32:	58d3      	ldrmi	r3, [r2, r3]
 8003e34:	4718      	bx	r3

08003e36 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8003e36:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003e38:	6840      	ldr	r0, [r0, #4]
 8003e3a:	b130      	cbz	r0, 8003e4a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	b91a      	cbnz	r2, 8003e48 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8003e40:	68d8      	ldr	r0, [r3, #12]
 8003e42:	f000 0001 	and.w	r0, r0, #1
 8003e46:	4770      	bx	lr
 8003e48:	2001      	movs	r0, #1
    }
 8003e4a:	4770      	bx	lr

08003e4c <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003e4c:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8003e50:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        buttonImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8003e54:	4770      	bx	lr

08003e56 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8003e56:	4601      	mov	r1, r0
        buttonImage.setBitmap(T::getPressed() ? down : up);
 8003e58:	3034      	adds	r0, #52	@ 0x34
 8003e5a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8003e5e:	b113      	cbz	r3, 8003e66 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8003e60:	3162      	adds	r1, #98	@ 0x62
 8003e62:	f00c be94 	b.w	8010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003e66:	3160      	adds	r1, #96	@ 0x60
 8003e68:	e7fb      	b.n	8003e62 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0xc>

08003e6a <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	214c      	movs	r1, #76	@ 0x4c
 8003e70:	f01d febf 	bl	8021bf2 <_ZdlPvj>
 8003e74:	4620      	mov	r0, r4
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEED0Ev>:
class ImageButtonStyle : public T
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	2164      	movs	r1, #100	@ 0x64
 8003e7e:	f01d feb8 	bl	8021bf2 <_ZdlPvj>
 8003e82:	4620      	mov	r0, r4
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e86:	b510      	push	{r4, lr}
 8003e88:	4604      	mov	r4, r0
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	f01d feb1 	bl	8021bf2 <_ZdlPvj>
 8003e90:	4620      	mov	r0, r4
 8003e92:	bd10      	pop	{r4, pc}

08003e94 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
}
 8003e98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003e9c:	f01d fea9 	bl	8021bf2 <_ZdlPvj>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	bd10      	pop	{r4, pc}

08003ea4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003ea4:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003ea6:	f7ff fa8a 	bl	80033be <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003eaa:	bd08      	pop	{r3, pc}

08003eac <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8003eac:	b510      	push	{r4, lr}
 8003eae:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8003eb0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003eb2:	b150      	cbz	r0, 8003eca <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8003eb4:	6803      	ldr	r3, [r0, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4798      	blx	r3
 8003eba:	b130      	cbz	r0, 8003eca <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8003ebc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	6803      	ldr	r3, [r0, #0]
        }
    }
 8003ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4718      	bx	r3
    }
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8003ecc:	f500 7388 	add.w	r3, r0, #272	@ 0x110
 8003ed0:	4299      	cmp	r1, r3
{
 8003ed2:	b570      	push	{r4, r5, r6, lr}
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
    if (&src == &flexButton1)
 8003ed8:	d102      	bne.n	8003ee0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    {
        //Interaction1
        //When flexButton1 clicked call virtual function
        //Call Up_Clicked
        Up_Clicked();
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4798      	blx	r3
    }
    if (&src == &flexButton2)
 8003ee0:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8003ee4:	429d      	cmp	r5, r3
 8003ee6:	d105      	bne.n	8003ef4 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x28>
    {
        //Interaction2
        //When flexButton2 clicked call virtual function
        //Call DownClicked
        DownClicked();
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	4620      	mov	r0, r4
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
}
 8003eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DownClicked();
 8003ef2:	4718      	bx	r3
}
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ef8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ef8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003efa:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003efc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003efe:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f02:	b28d      	uxth	r5, r1
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b92b      	cbnz	r3, 8003f14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003f08:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003f0a:	216c      	movs	r1, #108	@ 0x6c
 8003f0c:	4a10      	ldr	r2, [pc, #64]	@ (8003f50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003f0e:	4811      	ldr	r0, [pc, #68]	@ (8003f54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003f10:	f01e f9e6 	bl	80222e0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003f14:	4910      	ldr	r1, [pc, #64]	@ (8003f58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003f16:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003f18:	8809      	ldrh	r1, [r1, #0]
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	d803      	bhi.n	8003f26 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003f20:	216d      	movs	r1, #109	@ 0x6d
 8003f22:	4a0b      	ldr	r2, [pc, #44]	@ (8003f50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003f24:	e7f3      	b.n	8003f0e <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003f26:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f32:	6803      	ldr	r3, [r0, #0]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	4798      	blx	r3
 8003f38:	1a29      	subs	r1, r5, r0
 8003f3a:	4633      	mov	r3, r6
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	b209      	sxth	r1, r1
    }
 8003f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f44:	4718      	bx	r3
 8003f46:	bf00      	nop
 8003f48:	240252c4 	.word	0x240252c4
 8003f4c:	08024e71 	.word	0x08024e71
 8003f50:	08024eb3 	.word	0x08024eb3
 8003f54:	08024eee 	.word	0x08024eee
 8003f58:	240252c8 	.word	0x240252c8
 8003f5c:	08024f43 	.word	0x08024f43
 8003f60:	240252cc 	.word	0x240252cc

08003f64 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003f64:	b570      	push	{r4, r5, r6, lr}
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8003f66:	790d      	ldrb	r5, [r1, #4]
 8003f68:	4604      	mov	r4, r0
        return pressed;
 8003f6a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003f6e:	b93d      	cbnz	r5, 8003f80 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1c>
 8003f70:	b13b      	cbz	r3, 8003f82 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            setPressed(newPressedValue);
            invalidate();
        }
        if (newPressedValue)
        {
            executeAction();
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	4620      	mov	r0, r4
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
        }
    }
 8003f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8003f7e:	4718      	bx	r3
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003f80:	b17b      	cbz	r3, 8003fa2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3e>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8003f82:	fab5 f385 	clz	r3, r5
        handlePressedUpdated();
 8003f86:	4620      	mov	r0, r4
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f94:	4798      	blx	r3
            invalidate();
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	4620      	mov	r0, r4
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	4798      	blx	r3
        if (newPressedValue)
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	d0e7      	beq.n	8003f72 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xe>
    }
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}

08003fa4 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003faa:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003fac:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8003fb0:	4770      	bx	lr

08003fb2 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003fb2:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4604      	mov	r4, r0
        setX(x);
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003fba:	4615      	mov	r5, r2
        setX(x);
 8003fbc:	4798      	blx	r3
        setY(y);
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003fca:	4718      	bx	r3

08003fcc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 8003fcc:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 8003fce:	b570      	push	{r4, r5, r6, lr}
 8003fd0:	4604      	mov	r4, r0
        setWidth(width);
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    void setWidthHeight(int16_t width, int16_t height)
 8003fd4:	4615      	mov	r5, r2
        setWidth(width);
 8003fd6:	4798      	blx	r3
        setHeight(height);
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003fe4:	4718      	bx	r3

08003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003fe6:	b538      	push	{r3, r4, r5, lr}
 8003fe8:	4604      	mov	r4, r0
 8003fea:	461d      	mov	r5, r3
        setXY(x, y);
 8003fec:	f7ff ffe1 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003ff0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff ffe8 	bl	8003fcc <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003ffc:	bd38      	pop	{r3, r4, r5, pc}

08003ffe <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
        up = bmpReleased;
 8003ffe:	880b      	ldrh	r3, [r1, #0]
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8004000:	b570      	push	{r4, r5, r6, lr}
        down = bmpPressed;
 8004002:	4605      	mov	r5, r0
        up = bmpReleased;
 8004004:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        down = bmpPressed;
 8004008:	8813      	ldrh	r3, [r2, #0]
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800400a:	4604      	mov	r4, r0
        down = bmpPressed;
 800400c:	f825 3f62 	strh.w	r3, [r5, #98]!
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8004010:	4628      	mov	r0, r5
 8004012:	f012 fff3 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004016:	4606      	mov	r6, r0
 8004018:	4628      	mov	r0, r5
 800401a:	f013 f823 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800401e:	4631      	mov	r1, r6
 8004020:	4602      	mov	r2, r0
 8004022:	4620      	mov	r0, r4
 8004024:	f7ff ffd2 	bl	8003fcc <_ZN8touchgfx8Drawable14setWidthHeightEss>
        handlePressedUpdated();
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	4620      	mov	r0, r4
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8004030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        handlePressedUpdated();
 8004034:	4718      	bx	r3
	...

08004038 <_ZN8touchgfx6WidgetC1Ev>:
 8004038:	2200      	movs	r2, #0
 800403a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800403e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8004042:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004046:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800404a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800404e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004050:	4a01      	ldr	r2, [pc, #4]	@ (8004058 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004052:	6002      	str	r2, [r0, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	08025794 	.word	0x08025794

0800405c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8004062:	2226      	movs	r2, #38	@ 0x26
 8004064:	2100      	movs	r1, #0
 8004066:	f01e fbd7 	bl	8022818 <memset>
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff ffe4 	bl	8004038 <_ZN8touchgfx6WidgetC1Ev>
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	882b      	ldrh	r3, [r5, #0]
 800407a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800407c:	23ff      	movs	r3, #255	@ 0xff
 800407e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8004082:	f00c fd84 	bl	8010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004086:	4620      	mov	r0, r4
 8004088:	bd38      	pop	{r3, r4, r5, pc}
 800408a:	bf00      	nop
 800408c:	08026554 	.word	0x08026554

08004090 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
        : pressed(false), alpha(255), action(0)
 8004090:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
    ImageButtonStyle()
 8004094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004096:	8583      	strh	r3, [r0, #44]	@ 0x2c
        touchable = touch;
 8004098:	f240 1301 	movw	r3, #257	@ 0x101
          firstChild(0)
 800409c:	2500      	movs	r5, #0
        : T(), up(), down()
 800409e:	4606      	mov	r6, r0
 80040a0:	8483      	strh	r3, [r0, #36]	@ 0x24
    ImageButtonStyle()
 80040a2:	4604      	mov	r4, r0
        : T(), up(), down()
 80040a4:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x60>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80040a6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80040aa:	6285      	str	r5, [r0, #40]	@ 0x28
 80040ac:	a901      	add	r1, sp, #4
 80040ae:	6305      	str	r5, [r0, #48]	@ 0x30
 80040b0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80040b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040b8:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 80040bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 80040c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80040c4:	f846 3b34 	str.w	r3, [r6], #52
 80040c8:	4630      	mov	r0, r6
 80040ca:	f7ff ffc7 	bl	800405c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        buttonImage.setXY(0, 0);
 80040ce:	462a      	mov	r2, r5
 80040d0:	4629      	mov	r1, r5
 80040d2:	4630      	mov	r0, r6
 80040d4:	f8a4 7060 	strh.w	r7, [r4, #96]	@ 0x60
 80040d8:	f8a4 7062 	strh.w	r7, [r4, #98]	@ 0x62
 80040dc:	f7ff ff69 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 80040e0:	4620      	mov	r0, r4
 80040e2:	4631      	mov	r1, r6
 80040e4:	f009 fb5c 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80040e8:	4620      	mov	r0, r4
 80040ea:	b003      	add	sp, #12
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	0802588c 	.word	0x0802588c

080040f4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	4604      	mov	r4, r0
 80040fa:	b08d      	sub	sp, #52	@ 0x34
        : presenter(0)
 80040fc:	2500      	movs	r5, #0
 80040fe:	f011 f96d 	bl	80153dc <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 8004102:	46a0      	mov	r8, r4
 8004104:	4b8f      	ldr	r3, [pc, #572]	@ (8004344 <_ZN15Screen1ViewBaseC1Ev+0x250>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004106:	2226      	movs	r2, #38	@ 0x26
 8004108:	4629      	mov	r1, r5
 800410a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800410c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8004110:	f848 3b40 	str.w	r3, [r8], #64
 8004114:	4640      	mov	r0, r8
 8004116:	f01e fb7f 	bl	8022818 <memset>
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff ff8c 	bl	8004038 <_ZN8touchgfx6WidgetC1Ev>
 8004120:	4b89      	ldr	r3, [pc, #548]	@ (8004348 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 8004122:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8004126:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800412a:	6423      	str	r3, [r4, #64]	@ 0x40
 800412c:	23ff      	movs	r3, #255	@ 0xff
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800412e:	f104 07c4 	add.w	r7, r4, #196	@ 0xc4
 8004132:	a90a      	add	r1, sp, #40	@ 0x28
 8004134:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8004138:	4658      	mov	r0, fp
        : color(col)
 800413a:	66a5      	str	r5, [r4, #104]	@ 0x68
 800413c:	f504 7a88 	add.w	sl, r4, #272	@ 0x110
 8004140:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8004144:	f7ff ff8a 	bl	800405c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004148:	a90a      	add	r1, sp, #40	@ 0x28
 800414a:	4648      	mov	r0, r9
 800414c:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8004150:	f00c f990 	bl	8010474 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8004154:	2226      	movs	r2, #38	@ 0x26
 8004156:	4629      	mov	r1, r5
 8004158:	4638      	mov	r0, r7
 800415a:	f01e fb5d 	bl	8022818 <memset>
 800415e:	4638      	mov	r0, r7
 8004160:	f7ff ff6a 	bl	8004038 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8004164:	4b79      	ldr	r3, [pc, #484]	@ (800434c <_ZN15Screen1ViewBaseC1Ev+0x258>)
 8004166:	f8a4 60f0 	strh.w	r6, [r4, #240]	@ 0xf0
 800416a:	4650      	mov	r0, sl
 800416c:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
 8004170:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8004174:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004178:	1d26      	adds	r6, r4, #4
 800417a:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
        : TextAreaWithWildcardBase(), wc1(0)
 800417e:	4b74      	ldr	r3, [pc, #464]	@ (8004350 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
 8004180:	f8a4 50fc 	strh.w	r5, [r4, #252]	@ 0xfc
 8004184:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 8004190:	f8c4 510c 	str.w	r5, [r4, #268]	@ 0x10c
              text(0)
 8004194:	e9c4 3541 	strd	r3, r5, [r4, #260]	@ 0x104
 8004198:	f7ff ff7a 	bl	8004090 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 800419c:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 80041a0:	4618      	mov	r0, r3
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	f7ff ff74 	bl	8004090 <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEEC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80041a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <_ZN15Screen1ViewBaseC1Ev+0x260>)
    __background.setPosition(0, 0, 800, 480);
 80041aa:	462a      	mov	r2, r5
 80041ac:	4640      	mov	r0, r8
 80041ae:	4629      	mov	r1, r5
 80041b0:	e9c4 3479 	strd	r3, r4, [r4, #484]	@ 0x1e4
 80041b4:	4b68      	ldr	r3, [pc, #416]	@ (8004358 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 80041b6:	e9c4 357b 	strd	r3, r5, [r4, #492]	@ 0x1ec
 80041ba:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80041c4:	f7ff ff0f 	bl	8003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80041c8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80041cc:	4641      	mov	r1, r8
 80041ce:	4630      	mov	r0, r6
 80041d0:	66a3      	str	r3, [r4, #104]	@ 0x68
        boundingArea = calculateBoundingArea();
 80041d2:	f10d 0810 	add.w	r8, sp, #16
 80041d6:	f009 fae3 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-132, -100);
 80041da:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80041de:	f06f 0183 	mvn.w	r1, #131	@ 0x83
 80041e2:	4658      	mov	r0, fp
 80041e4:	f7ff fee5 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_LINES_ID));
 80041e8:	a90a      	add	r1, sp, #40	@ 0x28
 80041ea:	4658      	mov	r0, fp
 80041ec:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 80041f0:	f00c fccd 	bl	8010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80041f4:	4659      	mov	r1, fp
 80041f6:	4630      	mov	r0, r6
 80041f8:	f009 fad2 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80041fc:	2301      	movs	r3, #1
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_TEXTURES_SEAMLESS_TEXTURE_1_ID));
 80041fe:	a90a      	add	r1, sp, #40	@ 0x28
 8004200:	4648      	mov	r0, r9
 8004202:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8004206:	f00c fcc2 	bl	8010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(239, 138, 322, 125);
 800420a:	237d      	movs	r3, #125	@ 0x7d
 800420c:	228a      	movs	r2, #138	@ 0x8a
 800420e:	21ef      	movs	r1, #239	@ 0xef
 8004210:	4648      	mov	r0, r9
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8004218:	f7ff fee5 	bl	8003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800421c:	4629      	mov	r1, r5
 800421e:	4648      	mov	r0, r9
 8004220:	f00c f8e3 	bl	80103ea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004224:	4649      	mov	r1, r9
 8004226:	4630      	mov	r0, r6
 8004228:	f009 faba 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(308, 190, 184, 43);
 800422c:	232b      	movs	r3, #43	@ 0x2b
 800422e:	22be      	movs	r2, #190	@ 0xbe
 8004230:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8004234:	4638      	mov	r0, r7
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	23b8      	movs	r3, #184	@ 0xb8
 800423a:	f7ff fed4 	bl	8003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800423e:	4b47      	ldr	r3, [pc, #284]	@ (800435c <_ZN15Screen1ViewBaseC1Ev+0x268>)
        boundingArea = calculateBoundingArea();
 8004240:	4640      	mov	r0, r8
 8004242:	4639      	mov	r1, r7
        color = newColor;
 8004244:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
        boundingArea = calculateBoundingArea();
 8004248:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
        linespace = space;
 800424c:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
        boundingArea = calculateBoundingArea();
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004254:	4798      	blx	r3
 8004256:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 800425a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800425e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004262:	4b3f      	ldr	r3, [pc, #252]	@ (8004360 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_WC).getText());
 8004264:	f504 78ec 	add.w	r8, r4, #472	@ 0x1d8
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	b92b      	cbnz	r3, 8004278 <_ZN15Screen1ViewBaseC1Ev+0x184>
 800426c:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 800426e:	2160      	movs	r1, #96	@ 0x60
 8004270:	4a3d      	ldr	r2, [pc, #244]	@ (8004368 <_ZN15Screen1ViewBaseC1Ev+0x274>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004272:	483e      	ldr	r0, [pc, #248]	@ (800436c <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8004274:	f01e f834 	bl	80222e0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004278:	4b3d      	ldr	r3, [pc, #244]	@ (8004370 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b91b      	cbnz	r3, 8004286 <_ZN15Screen1ViewBaseC1Ev+0x192>
 800427e:	4b3d      	ldr	r3, [pc, #244]	@ (8004374 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8004280:	2161      	movs	r1, #97	@ 0x61
 8004282:	4a39      	ldr	r2, [pc, #228]	@ (8004368 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8004284:	e7f5      	b.n	8004272 <_ZN15Screen1ViewBaseC1Ev+0x17e>
        return texts->getText(typedTextId);
 8004286:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8004288:	4629      	mov	r1, r5
    flexButton1.setAction(flexButtonCallback);
 800428a:	f504 79f2 	add.w	r9, r4, #484	@ 0x1e4
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	f000 fa1c 	bl	80046cc <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_WC).getText());
 8004294:	4a39      	ldr	r2, [pc, #228]	@ (800437c <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8004296:	4603      	mov	r3, r0
 8004298:	2105      	movs	r1, #5
 800429a:	4640      	mov	r0, r8
 800429c:	f012 fd38 	bl	8016d10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80042a0:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <_ZN15Screen1ViewBaseC1Ev+0x258>)
        wc1 = value;
 80042a2:	f8c4 810c 	str.w	r8, [r4, #268]	@ 0x10c
 80042a6:	f04f 0802 	mov.w	r8, #2
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XI3E));
 80042aa:	a90a      	add	r1, sp, #40	@ 0x28
 80042ac:	4638      	mov	r0, r7
 80042ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80042b0:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 80042b4:	f00c fba4 	bl	8010a00 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80042b8:	4639      	mov	r1, r7
 80042ba:	4630      	mov	r0, r6
 80042bc:	f009 fa70 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80042c0:	2303      	movs	r3, #3
    flexButton1.setPosition(239, 314, 76, 76);
 80042c2:	274c      	movs	r7, #76	@ 0x4c
    flexButton1.setBitmaps(Bitmap(BITMAP_UP_ARROW_BUTTON_ID), Bitmap(BITMAP_UP_ARROW_BUTTON_ID));
 80042c4:	aa0a      	add	r2, sp, #40	@ 0x28
 80042c6:	a909      	add	r1, sp, #36	@ 0x24
 80042c8:	4650      	mov	r0, sl
 80042ca:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80042ce:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80042d2:	f7ff fe94 	bl	8003ffe <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
        buttonImage.setXY(x, y);
 80042d6:	462a      	mov	r2, r5
 80042d8:	4629      	mov	r1, r5
 80042da:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 80042de:	f7ff fe68 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
    flexButton1.setPosition(239, 314, 76, 76);
 80042e2:	463b      	mov	r3, r7
 80042e4:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 80042e8:	4650      	mov	r0, sl
        action = &callback;
 80042ea:	f8c4 9140 	str.w	r9, [r4, #320]	@ 0x140
 80042ee:	21ef      	movs	r1, #239	@ 0xef
 80042f0:	9700      	str	r7, [sp, #0]
 80042f2:	f7ff fe78 	bl	8003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80042f6:	4651      	mov	r1, sl
 80042f8:	4630      	mov	r0, r6
 80042fa:	f009 fa51 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButton2.setBitmaps(Bitmap(BITMAP_DOWN_ARROW_ID), Bitmap(BITMAP_DOWN_ARROW_ID));
 80042fe:	aa0a      	add	r2, sp, #40	@ 0x28
 8004300:	a909      	add	r1, sp, #36	@ 0x24
 8004302:	9803      	ldr	r0, [sp, #12]
 8004304:	f8ad 8024 	strh.w	r8, [sp, #36]	@ 0x24
 8004308:	f8ad 8028 	strh.w	r8, [sp, #40]	@ 0x28
 800430c:	f7ff fe77 	bl	8003ffe <_ZN8touchgfx16ImageButtonStyleINS_18TouchButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
 8004310:	462a      	mov	r2, r5
 8004312:	4629      	mov	r1, r5
 8004314:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 8004318:	f7ff fe4b 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
    flexButton2.setPosition(484, 314, 77, 76);
 800431c:	234d      	movs	r3, #77	@ 0x4d
 800431e:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8004322:	9803      	ldr	r0, [sp, #12]
 8004324:	f8c4 91a4 	str.w	r9, [r4, #420]	@ 0x1a4
 8004328:	f44f 71f2 	mov.w	r1, #484	@ 0x1e4
 800432c:	9700      	str	r7, [sp, #0]
 800432e:	f7ff fe5a 	bl	8003fe6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004332:	4630      	mov	r0, r6
 8004334:	9903      	ldr	r1, [sp, #12]
 8004336:	f009 fa33 	bl	800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800433a:	4620      	mov	r0, r4
 800433c:	b00d      	add	sp, #52	@ 0x34
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	bf00      	nop
 8004344:	08025944 	.word	0x08025944
 8004348:	080264ec 	.word	0x080264ec
 800434c:	0802568c 	.word	0x0802568c
 8004350:	080257fc 	.word	0x080257fc
 8004354:	0802592c 	.word	0x0802592c
 8004358:	08003ecd 	.word	0x08003ecd
 800435c:	fffffafa 	.word	0xfffffafa
 8004360:	240252c4 	.word	0x240252c4
 8004364:	08024e71 	.word	0x08024e71
 8004368:	08024f81 	.word	0x08024f81
 800436c:	08024eee 	.word	0x08024eee
 8004370:	240252c8 	.word	0x240252c8
 8004374:	08024f43 	.word	0x08024f43
 8004378:	240252d0 	.word	0x240252d0
 800437c:	08024fcc 	.word	0x08024fcc

08004380 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_25_4bpp();

touchgfx::GeneratedFont& getFont_arial_25_4bpp()
{
    static touchgfx::GeneratedFont arial_25_4bpp(glyphs_arial_25_4bpp, 11, 25, 25, 0, 0, 4, 1, 0, 0, unicodes_arial_25_4bpp, kerning_arial_25_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 8004380:	4770      	bx	lr
	...

08004384 <_Z21getFont_arial_25_4bppv>:
{
 8004384:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arial_25_4bpp(glyphs_arial_25_4bpp, 11, 25, 25, 0, 0, 4, 1, 0, 0, unicodes_arial_25_4bpp, kerning_arial_25_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 8004386:	4d17      	ldr	r5, [pc, #92]	@ (80043e4 <_Z21getFont_arial_25_4bppv+0x60>)
{
 8004388:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arial_25_4bpp(glyphs_arial_25_4bpp, 11, 25, 25, 0, 0, 4, 1, 0, 0, unicodes_arial_25_4bpp, kerning_arial_25_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 800438a:	682c      	ldr	r4, [r5, #0]
 800438c:	f3bf 8f5b 	dmb	ish
 8004390:	f014 0401 	ands.w	r4, r4, #1
 8004394:	d122      	bne.n	80043dc <_Z21getFont_arial_25_4bppv+0x58>
 8004396:	4628      	mov	r0, r5
 8004398:	f01d fc2d 	bl	8021bf6 <__cxa_guard_acquire>
 800439c:	b1f0      	cbz	r0, 80043dc <_Z21getFont_arial_25_4bppv+0x58>
 800439e:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <_Z21getFont_arial_25_4bppv+0x64>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	4912      	ldr	r1, [pc, #72]	@ (80043ec <_Z21getFont_arial_25_4bppv+0x68>)
 80043a4:	4812      	ldr	r0, [pc, #72]	@ (80043f0 <_Z21getFont_arial_25_4bppv+0x6c>)
 80043a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80043a8:	9405      	str	r4, [sp, #20]
 80043aa:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 80043ae:	233f      	movs	r3, #63	@ 0x3f
 80043b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <_Z21getFont_arial_25_4bppv+0x70>)
 80043b4:	9308      	str	r3, [sp, #32]
 80043b6:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <_Z21getFont_arial_25_4bppv+0x74>)
 80043b8:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80043bc:	2304      	movs	r3, #4
 80043be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80043c2:	2319      	movs	r3, #25
 80043c4:	220b      	movs	r2, #11
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80043cc:	f7ff fca8 	bl	8003d20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80043d0:	480a      	ldr	r0, [pc, #40]	@ (80043fc <_Z21getFont_arial_25_4bppv+0x78>)
 80043d2:	f01d ffa3 	bl	802231c <atexit>
 80043d6:	4628      	mov	r0, r5
 80043d8:	f01d fc19 	bl	8021c0e <__cxa_guard_release>
    return arial_25_4bpp;
}
 80043dc:	4804      	ldr	r0, [pc, #16]	@ (80043f0 <_Z21getFont_arial_25_4bppv+0x6c>)
 80043de:	b00f      	add	sp, #60	@ 0x3c
 80043e0:	bd30      	pop	{r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	2400b180 	.word	0x2400b180
 80043e8:	08025978 	.word	0x08025978
 80043ec:	08027218 	.word	0x08027218
 80043f0:	2400b184 	.word	0x2400b184
 80043f4:	080272f0 	.word	0x080272f0
 80043f8:	08027300 	.word	0x08027300
 80043fc:	08004381 	.word	0x08004381

08004400 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004400:	4770      	bx	lr
	...

08004404 <_Z23getFont_verdana_10_4bppv>:
{
 8004404:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004406:	4d16      	ldr	r5, [pc, #88]	@ (8004460 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004408:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800440a:	682c      	ldr	r4, [r5, #0]
 800440c:	f3bf 8f5b 	dmb	ish
 8004410:	f014 0401 	ands.w	r4, r4, #1
 8004414:	d120      	bne.n	8004458 <_Z23getFont_verdana_10_4bppv+0x54>
 8004416:	4628      	mov	r0, r5
 8004418:	f01d fbed 	bl	8021bf6 <__cxa_guard_acquire>
 800441c:	b1e0      	cbz	r0, 8004458 <_Z23getFont_verdana_10_4bppv+0x54>
 800441e:	233f      	movs	r3, #63	@ 0x3f
 8004420:	2201      	movs	r2, #1
 8004422:	4910      	ldr	r1, [pc, #64]	@ (8004464 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004424:	9309      	str	r3, [sp, #36]	@ 0x24
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004428:	4810      	ldr	r0, [pc, #64]	@ (800446c <_Z23getFont_verdana_10_4bppv+0x68>)
 800442a:	9308      	str	r3, [sp, #32]
 800442c:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800442e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004430:	9405      	str	r4, [sp, #20]
 8004432:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004436:	2304      	movs	r3, #4
 8004438:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800443c:	230a      	movs	r3, #10
 800443e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004448:	f7ff fc6a 	bl	8003d20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800444c:	4809      	ldr	r0, [pc, #36]	@ (8004474 <_Z23getFont_verdana_10_4bppv+0x70>)
 800444e:	f01d ff65 	bl	802231c <atexit>
 8004452:	4628      	mov	r0, r5
 8004454:	f01d fbdb 	bl	8021c0e <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004458:	4804      	ldr	r0, [pc, #16]	@ (800446c <_Z23getFont_verdana_10_4bppv+0x68>)
 800445a:	b00f      	add	sp, #60	@ 0x3c
 800445c:	bd30      	pop	{r4, r5, pc}
 800445e:	bf00      	nop
 8004460:	2400b1b0 	.word	0x2400b1b0
 8004464:	080272b4 	.word	0x080272b4
 8004468:	080272f4 	.word	0x080272f4
 800446c:	2400b1b4 	.word	0x2400b1b4
 8004470:	08027304 	.word	0x08027304
 8004474:	08004401 	.word	0x08004401

08004478 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 2, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004478:	4770      	bx	lr
	...

0800447c <_Z23getFont_verdana_30_4bppv>:
{
 800447c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 2, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800447e:	4d16      	ldr	r5, [pc, #88]	@ (80044d8 <_Z23getFont_verdana_30_4bppv+0x5c>)
{
 8004480:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 2, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004482:	682c      	ldr	r4, [r5, #0]
 8004484:	f3bf 8f5b 	dmb	ish
 8004488:	f014 0401 	ands.w	r4, r4, #1
 800448c:	d121      	bne.n	80044d2 <_Z23getFont_verdana_30_4bppv+0x56>
 800448e:	4628      	mov	r0, r5
 8004490:	f01d fbb1 	bl	8021bf6 <__cxa_guard_acquire>
 8004494:	b1e8      	cbz	r0, 80044d2 <_Z23getFont_verdana_30_4bppv+0x56>
 8004496:	233f      	movs	r3, #63	@ 0x3f
 8004498:	2201      	movs	r2, #1
 800449a:	4910      	ldr	r1, [pc, #64]	@ (80044dc <_Z23getFont_verdana_30_4bppv+0x60>)
 800449c:	9309      	str	r3, [sp, #36]	@ 0x24
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <_Z23getFont_verdana_30_4bppv+0x64>)
 80044a0:	4810      	ldr	r0, [pc, #64]	@ (80044e4 <_Z23getFont_verdana_30_4bppv+0x68>)
 80044a2:	9308      	str	r3, [sp, #32]
 80044a4:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80044a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80044a8:	9405      	str	r4, [sp, #20]
 80044aa:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80044ae:	2304      	movs	r3, #4
 80044b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80044b4:	231e      	movs	r3, #30
 80044b6:	2202      	movs	r2, #2
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80044be:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80044c2:	f7ff fc2d 	bl	8003d20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80044c6:	4809      	ldr	r0, [pc, #36]	@ (80044ec <_Z23getFont_verdana_30_4bppv+0x70>)
 80044c8:	f01d ff28 	bl	802231c <atexit>
 80044cc:	4628      	mov	r0, r5
 80044ce:	f01d fb9e 	bl	8021c0e <__cxa_guard_release>
    return verdana_30_4bpp;
}
 80044d2:	4804      	ldr	r0, [pc, #16]	@ (80044e4 <_Z23getFont_verdana_30_4bppv+0x68>)
 80044d4:	b00f      	add	sp, #60	@ 0x3c
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	2400b1e0 	.word	0x2400b1e0
 80044dc:	080272c4 	.word	0x080272c4
 80044e0:	080272f8 	.word	0x080272f8
 80044e4:	2400b1e4 	.word	0x2400b1e4
 80044e8:	08027308 	.word	0x08027308
 80044ec:	08004479 	.word	0x08004479

080044f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80044f0:	4770      	bx	lr
	...

080044f4 <_Z23getFont_verdana_40_4bppv>:
{
 80044f4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80044f6:	4d16      	ldr	r5, [pc, #88]	@ (8004550 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80044f8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80044fa:	682c      	ldr	r4, [r5, #0]
 80044fc:	f3bf 8f5b 	dmb	ish
 8004500:	f014 0401 	ands.w	r4, r4, #1
 8004504:	d120      	bne.n	8004548 <_Z23getFont_verdana_40_4bppv+0x54>
 8004506:	4628      	mov	r0, r5
 8004508:	f01d fb75 	bl	8021bf6 <__cxa_guard_acquire>
 800450c:	b1e0      	cbz	r0, 8004548 <_Z23getFont_verdana_40_4bppv+0x54>
 800450e:	233f      	movs	r3, #63	@ 0x3f
 8004510:	2201      	movs	r2, #1
 8004512:	4910      	ldr	r1, [pc, #64]	@ (8004554 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004514:	9309      	str	r3, [sp, #36]	@ 0x24
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004518:	4810      	ldr	r0, [pc, #64]	@ (800455c <_Z23getFont_verdana_40_4bppv+0x68>)
 800451a:	9308      	str	r3, [sp, #32]
 800451c:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800451e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004520:	9405      	str	r4, [sp, #20]
 8004522:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004526:	2304      	movs	r3, #4
 8004528:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800452c:	2328      	movs	r3, #40	@ 0x28
 800452e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004538:	f7ff fbf2 	bl	8003d20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800453c:	4809      	ldr	r0, [pc, #36]	@ (8004564 <_Z23getFont_verdana_40_4bppv+0x70>)
 800453e:	f01d feed 	bl	802231c <atexit>
 8004542:	4628      	mov	r0, r5
 8004544:	f01d fb63 	bl	8021c0e <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004548:	4804      	ldr	r0, [pc, #16]	@ (800455c <_Z23getFont_verdana_40_4bppv+0x68>)
 800454a:	b00f      	add	sp, #60	@ 0x3c
 800454c:	bd30      	pop	{r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	2400b210 	.word	0x2400b210
 8004554:	080272e0 	.word	0x080272e0
 8004558:	080272fc 	.word	0x080272fc
 800455c:	2400b214 	.word	0x2400b214
 8004560:	0802730c 	.word	0x0802730c
 8004564:	080044f1 	.word	0x080044f1

08004568 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004568:	2000      	movs	r0, #0
 800456a:	4770      	bx	lr

0800456c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 800456c:	2000      	movs	r0, #0
 800456e:	4770      	bx	lr

08004570 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004570:	b40e      	push	{r1, r2, r3}
 8004572:	b503      	push	{r0, r1, lr}
 8004574:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004576:	2100      	movs	r1, #0
{
 8004578:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800457c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800457e:	f00f ff8f 	bl	80144a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004582:	b002      	add	sp, #8
 8004584:	f85d eb04 	ldr.w	lr, [sp], #4
 8004588:	b003      	add	sp, #12
 800458a:	4770      	bx	lr

0800458c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800458c:	b40c      	push	{r2, r3}
 800458e:	b507      	push	{r0, r1, r2, lr}
 8004590:	ab04      	add	r3, sp, #16
 8004592:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004596:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004598:	f00f ff82 	bl	80144a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800459c:	b003      	add	sp, #12
 800459e:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a2:	b002      	add	sp, #8
 80045a4:	4770      	bx	lr
	...

080045a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80045a8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80045aa:	b510      	push	{r4, lr}
 80045ac:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80045ae:	b373      	cbz	r3, 800460e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80045b0:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80045b2:	b92b      	cbnz	r3, 80045c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80045b4:	4b18      	ldr	r3, [pc, #96]	@ (8004618 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80045b6:	21c5      	movs	r1, #197	@ 0xc5
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80045ba:	4819      	ldr	r0, [pc, #100]	@ (8004620 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80045bc:	f01d fe90 	bl	80222e0 <__assert_func>
            return buffer[pos];
 80045c0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80045c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80045c6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045c8:	b30b      	cbz	r3, 800460e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80045ca:	f011 fdf9 	bl	80161c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80045ce:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d803      	bhi.n	80045dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80045d6:	21cb      	movs	r1, #203	@ 0xcb
 80045d8:	4a13      	ldr	r2, [pc, #76]	@ (8004628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80045da:	e7ee      	b.n	80045ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80045dc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80045de:	f640 103f 	movw	r0, #2367	@ 0x93f
 80045e2:	1c53      	adds	r3, r2, #1
 80045e4:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80045e6:	2b09      	cmp	r3, #9
 80045e8:	4619      	mov	r1, r3
 80045ea:	bf88      	it	hi
 80045ec:	f1a3 010a 	subhi.w	r1, r3, #10
 80045f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80045f4:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80045f6:	4281      	cmp	r1, r0
 80045f8:	d109      	bne.n	800460e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80045fa:	2b0a      	cmp	r3, #10
 80045fc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004600:	bf28      	it	cs
 8004602:	2300      	movcs	r3, #0
            return buffer[pos];
 8004604:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8004606:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800460a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800460c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800460e:	4620      	mov	r0, r4
}
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004614:	f011 bcd6 	b.w	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004618:	08024fcf 	.word	0x08024fcf
 800461c:	08024fd8 	.word	0x08024fd8
 8004620:	08025083 	.word	0x08025083
 8004624:	080250db 	.word	0x080250db
 8004628:	080250e9 	.word	0x080250e9

0800462c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800462c:	f011 bc93 	b.w	8015f56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004630 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004630:	b510      	push	{r4, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	ac02      	add	r4, sp, #8
 8004636:	e884 0006 	stmia.w	r4, {r1, r2}
 800463a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800463c:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800463e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004640:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	9b08      	ldr	r3, [sp, #32]
 800464a:	f00e fa1d 	bl	8012a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800464e:	b006      	add	sp, #24
 8004650:	bd10      	pop	{r4, pc}
	...

08004654 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004654:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004656:	bb18      	cbnz	r0, 80046a0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800465a:	4813      	ldr	r0, [pc, #76]	@ (80046a8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800465c:	681c      	ldr	r4, [r3, #0]
 800465e:	4913      	ldr	r1, [pc, #76]	@ (80046ac <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004660:	b1b4      	cbz	r4, 8004690 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	4422      	add	r2, r4
 8004666:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004668:	6862      	ldr	r2, [r4, #4]
 800466a:	4422      	add	r2, r4
 800466c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800466e:	68a2      	ldr	r2, [r4, #8]
 8004670:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004674:	2200      	movs	r2, #0
 8004676:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004678:	f000 f838 	bl	80046ec <_ZN17TypedTextDatabase8getFontsEv>
 800467c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800467e:	f000 f833 	bl	80046e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004682:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004684:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004686:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004688:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800468a:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800468c:	8018      	strh	r0, [r3, #0]
    }
}
 800468e:	e007      	b.n	80046a0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004692:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004696:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800469a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800469c:	2c00      	cmp	r4, #0
 800469e:	d1e8      	bne.n	8004672 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
 80046a2:	bf00      	nop
 80046a4:	2400b24c 	.word	0x2400b24c
 80046a8:	2400b244 	.word	0x2400b244
 80046ac:	2400b240 	.word	0x2400b240
 80046b0:	2400b248 	.word	0x2400b248
 80046b4:	240252c4 	.word	0x240252c4
 80046b8:	240252cc 	.word	0x240252cc
 80046bc:	240252c8 	.word	0x240252c8
 80046c0:	9023f30c 	.word	0x9023f30c
 80046c4:	9023f300 	.word	0x9023f300
 80046c8:	9023f314 	.word	0x9023f314

080046cc <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	2400b240 	.word	0x2400b240
 80046e4:	2400b244 	.word	0x2400b244

080046e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80046e8:	2003      	movs	r0, #3
 80046ea:	4770      	bx	lr

080046ec <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80046ec:	4800      	ldr	r0, [pc, #0]	@ (80046f0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80046ee:	4770      	bx	lr
 80046f0:	2400b250 	.word	0x2400b250

080046f4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_arial_25_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80046f4:	b510      	push	{r4, lr}
};
 80046f6:	4c07      	ldr	r4, [pc, #28]	@ (8004714 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 80046f8:	f7ff fec0 	bl	800447c <_Z23getFont_verdana_30_4bppv>
};
 80046fc:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80046fe:	f7ff fef9 	bl	80044f4 <_Z23getFont_verdana_40_4bppv>
};
 8004702:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004704:	f7ff fe7e 	bl	8004404 <_Z23getFont_verdana_10_4bppv>
};
 8004708:	60a0      	str	r0, [r4, #8]
    &(getFont_arial_25_4bpp())
 800470a:	f7ff fe3b 	bl	8004384 <_Z21getFont_arial_25_4bppv>
};
 800470e:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8004710:	bd10      	pop	{r4, pc}
 8004712:	bf00      	nop
 8004714:	2400b250 	.word	0x2400b250

08004718 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004718:	b510      	push	{r4, lr}
    pointArray = 0;
 800471a:	2400      	movs	r4, #0
 800471c:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800471e:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004720:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004722:	601c      	str	r4, [r3, #0]
}
 8004724:	bd10      	pop	{r4, pc}

08004726 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004726:	4770      	bx	lr

08004728 <_ZN19FrontendApplicationD0Ev>:
 8004728:	b510      	push	{r4, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004730:	f01d fa5f 	bl	8021bf2 <_ZdlPvj>
 8004734:	4620      	mov	r0, r4
 8004736:	bd10      	pop	{r4, pc}

08004738 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004738:	b510      	push	{r4, lr}
 800473a:	4604      	mov	r4, r0
    {
        model.tick();
 800473c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004740:	f000 f813 	bl	800476a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004744:	4620      	mov	r0, r4
    }
 8004746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800474a:	f00e be9d 	b.w	8013488 <_ZN8touchgfx11Application15handleTickEventEv>
	...

08004750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004750:	b510      	push	{r4, lr}
 8004752:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004754:	f7ff fa6a 	bl	8003c2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004758:	4b01      	ldr	r3, [pc, #4]	@ (8004760 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800475a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800475c:	6023      	str	r3, [r4, #0]
}
 800475e:	bd10      	pop	{r4, pc}
 8004760:	08025dd8 	.word	0x08025dd8

08004764 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004764:	2200      	movs	r2, #0
 8004766:	6002      	str	r2, [r0, #0]
{

}
 8004768:	4770      	bx	lr

0800476a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800476a:	4770      	bx	lr

0800476c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800476c:	4770      	bx	lr

0800476e <_ZThn4_N16Screen1PresenterD1Ev>:
 800476e:	3804      	subs	r0, #4
 8004770:	4770      	bx	lr

08004772 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004772:	4770      	bx	lr

08004774 <_ZN16Screen1PresenterD0Ev>:
 8004774:	b510      	push	{r4, lr}
 8004776:	4604      	mov	r4, r0
 8004778:	2110      	movs	r1, #16
 800477a:	f01d fa3a 	bl	8021bf2 <_ZdlPvj>
 800477e:	4620      	mov	r0, r4
 8004780:	bd10      	pop	{r4, pc}

08004782 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004782:	f1a0 0004 	sub.w	r0, r0, #4
 8004786:	e7f5      	b.n	8004774 <_ZN16Screen1PresenterD0Ev>

08004788 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004788:	2200      	movs	r2, #0
    : view(v)
 800478a:	60c1      	str	r1, [r0, #12]
 800478c:	6082      	str	r2, [r0, #8]
 800478e:	4a02      	ldr	r2, [pc, #8]	@ (8004798 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8004790:	6002      	str	r2, [r0, #0]
 8004792:	3218      	adds	r2, #24
 8004794:	6042      	str	r2, [r0, #4]
}
 8004796:	4770      	bx	lr
 8004798:	08025e2c 	.word	0x08025e2c

0800479c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800479c:	4770      	bx	lr
	...

080047a0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80047a0:	4b03      	ldr	r3, [pc, #12]	@ (80047b0 <_ZN11Screen1ViewD1Ev+0x10>)
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
 80047a6:	6003      	str	r3, [r0, #0]
 80047a8:	f7ff fb34 	bl	8003e14 <_ZN15Screen1ViewBaseD1Ev>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd10      	pop	{r4, pc}
 80047b0:	08025e54 	.word	0x08025e54

080047b4 <_ZN11Screen1ViewD0Ev>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	f7ff fff2 	bl	80047a0 <_ZN11Screen1ViewD1Ev>
 80047bc:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 80047c0:	4620      	mov	r0, r4
 80047c2:	f01d fa16 	bl	8021bf2 <_ZdlPvj>
 80047c6:	4620      	mov	r0, r4
 80047c8:	bd10      	pop	{r4, pc}
	...

080047cc <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80047cc:	b510      	push	{r4, lr}
 80047ce:	4604      	mov	r4, r0
 80047d0:	f7ff fc90 	bl	80040f4 <_ZN15Screen1ViewBaseC1Ev>
 80047d4:	4b03      	ldr	r3, [pc, #12]	@ (80047e4 <_ZN11Screen1ViewC1Ev+0x18>)
}
 80047d6:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	f8a4 31f4 	strh.w	r3, [r4, #500]	@ 0x1f4
}
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	08025e54 	.word	0x08025e54

080047e8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80047e8:	f7ff bb15 	b.w	8003e16 <_ZN15Screen1ViewBase11setupScreenEv>

080047ec <_ZN11Screen1View10Up_ClickedEv>:


void Screen1View::Up_Clicked(){

	count++;
 80047ec:	f8b0 31f4 	ldrh.w	r3, [r0, #500]	@ 0x1f4

	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", count);
 80047f0:	2105      	movs	r1, #5
 80047f2:	4a08      	ldr	r2, [pc, #32]	@ (8004814 <_ZN11Screen1View10Up_ClickedEv+0x28>)
	count++;
 80047f4:	3301      	adds	r3, #1
 80047f6:	b29b      	uxth	r3, r3
void Screen1View::Up_Clicked(){
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4604      	mov	r4, r0
	count++;
 80047fc:	f8a0 31f4 	strh.w	r3, [r0, #500]	@ 0x1f4
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", count);
 8004800:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8004804:	f012 fa84 	bl	8016d10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
 8004808:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4

}
 800480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
 8004810:	f00f bf71 	b.w	80146f6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8004814:	080251bb 	.word	0x080251bb

08004818 <_ZN11Screen1View11DownClickedEv>:


void Screen1View::DownClicked(){

	    count--;
 8004818:	f8b0 31f4 	ldrh.w	r3, [r0, #500]	@ 0x1f4
	    if(count <= 0) count = 0;
		Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", count);
 800481c:	2105      	movs	r1, #5
 800481e:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <_ZN11Screen1View11DownClickedEv+0x28>)
	    count--;
 8004820:	3b01      	subs	r3, #1
 8004822:	b29b      	uxth	r3, r3
void Screen1View::DownClicked(){
 8004824:	b510      	push	{r4, lr}
 8004826:	4604      	mov	r4, r0
 8004828:	f8a0 31f4 	strh.w	r3, [r0, #500]	@ 0x1f4
		Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", count);
 800482c:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8004830:	f012 fa6e 	bl	8016d10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textArea1.invalidate();
 8004834:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4

}
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		textArea1.invalidate();
 800483c:	f00f bf5b 	b.w	80146f6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8004840:	080251bb 	.word	0x080251bb

08004844 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004844:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004846:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 800484a:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 800484c:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800484e:	2302      	movs	r3, #2
 8004850:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004852:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004856:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 800485a:	4770      	bx	lr

0800485c <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 800485c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004860:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004862:	bf04      	itt	eq
 8004864:	2300      	moveq	r3, #0
 8004866:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 800486a:	2000      	movs	r0, #0
 800486c:	4770      	bx	lr

0800486e <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800486e:	2000      	movs	r0, #0
 8004870:	4770      	bx	lr

08004872 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004872:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004874:	6904      	ldr	r4, [r0, #16]
 8004876:	8900      	ldrh	r0, [r0, #8]
 8004878:	46a4      	mov	ip, r4
}
 800487a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800487e:	4760      	bx	ip

08004880 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004880:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004882:	68c4      	ldr	r4, [r0, #12]
 8004884:	8900      	ldrh	r0, [r0, #8]
 8004886:	46a4      	mov	ip, r4
}
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800488c:	4760      	bx	ip

0800488e <FT6X06_GestureConfig>:
{
 800488e:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004890:	f100 0518 	add.w	r5, r0, #24
{
 8004894:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004896:	7809      	ldrb	r1, [r1, #0]
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f911 	bl	8004ac0 <ft6x06_radian_value>
 800489e:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80048a0:	7931      	ldrb	r1, [r6, #4]
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 f918 	bl	8004ad8 <ft6x06_offset_left_right>
 80048a8:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80048aa:	7a31      	ldrb	r1, [r6, #8]
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f91f 	bl	8004af0 <ft6x06_offset_up_down>
 80048b2:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80048b4:	7b31      	ldrb	r1, [r6, #12]
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 f926 	bl	8004b08 <ft6x06_disatnce_left_right>
 80048bc:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80048be:	7c31      	ldrb	r1, [r6, #16]
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 f92d 	bl	8004b20 <ft6x06_distance_up_down>
 80048c6:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80048c8:	7d31      	ldrb	r1, [r6, #20]
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 f934 	bl	8004b38 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80048d0:	42c4      	cmn	r4, r0
}
 80048d2:	bf14      	ite	ne
 80048d4:	f04f 30ff 	movne.w	r0, #4294967295
 80048d8:	2000      	moveq	r0, #0
 80048da:	bd70      	pop	{r4, r5, r6, pc}

080048dc <FT6X06_ReadID>:
{
 80048dc:	b513      	push	{r0, r1, r4, lr}
 80048de:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80048e0:	3018      	adds	r0, #24
 80048e2:	f10d 0107 	add.w	r1, sp, #7
 80048e6:	f000 f93f 	bl	8004b68 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80048ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048ee:	6023      	str	r3, [r4, #0]
}
 80048f0:	b002      	add	sp, #8
 80048f2:	bd10      	pop	{r4, pc}

080048f4 <FT6X06_GetState>:
{
 80048f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80048f6:	f100 0518 	add.w	r5, r0, #24
{
 80048fa:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80048fc:	a901      	add	r1, sp, #4
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f8d1 	bl	8004aa6 <ft6x06_td_status>
 8004904:	bb08      	cbnz	r0, 800494a <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004906:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800490a:	2b02      	cmp	r3, #2
 800490c:	bf98      	it	ls
 800490e:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004910:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004912:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004914:	2103      	movs	r1, #3
 8004916:	4628      	mov	r0, r5
 8004918:	eb0d 0203 	add.w	r2, sp, r3
 800491c:	f000 f8b0 	bl	8004a80 <ft6x06_read_reg>
 8004920:	b9b0      	cbnz	r0, 8004950 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004922:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004926:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004930:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004932:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004936:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004938:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004942:	4313      	orrs	r3, r2
 8004944:	60a3      	str	r3, [r4, #8]
}
 8004946:	b003      	add	sp, #12
 8004948:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	e7df      	b.n	8004910 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004954:	e7f7      	b.n	8004946 <FT6X06_GetState+0x52>

08004956 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004956:	3018      	adds	r0, #24
 8004958:	f000 b8a0 	b.w	8004a9c <ft6x06_gest_id>

0800495c <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 800495c:	2101      	movs	r1, #1
 800495e:	3018      	adds	r0, #24
 8004960:	f000 b8f6 	b.w	8004b50 <ft6x06_g_mode>

08004964 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004964:	2100      	movs	r1, #0
 8004966:	3018      	adds	r0, #24
 8004968:	f000 b8f2 	b.w	8004b50 <ft6x06_g_mode>

0800496c <FT6X06_Init>:
{
 800496c:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800496e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004972:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004974:	b96b      	cbnz	r3, 8004992 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004976:	6803      	ldr	r3, [r0, #0]
 8004978:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff fff2 	bl	8004964 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004980:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004982:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004986:	bf18      	it	ne
 8004988:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 800498a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 800498e:	4240      	negs	r0, r0
}
 8004990:	bd10      	pop	{r4, pc}
 8004992:	2000      	movs	r0, #0
  return ret;
 8004994:	e7fc      	b.n	8004990 <FT6X06_Init+0x24>

08004996 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8004996:	2000      	movs	r0, #0
 8004998:	4770      	bx	lr

0800499a <FT6X06_GetMultiTouchState>:
{
 800499a:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800499c:	f100 0518 	add.w	r5, r0, #24
{
 80049a0:	b085      	sub	sp, #20
 80049a2:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80049a4:	4628      	mov	r0, r5
 80049a6:	a901      	add	r1, sp, #4
 80049a8:	f000 f87d 	bl	8004aa6 <ft6x06_td_status>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d145      	bne.n	8004a3c <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80049b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	bf98      	it	ls
 80049b8:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80049ba:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80049bc:	230c      	movs	r3, #12
 80049be:	aa01      	add	r2, sp, #4
 80049c0:	2103      	movs	r1, #3
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f85c 	bl	8004a80 <ft6x06_read_reg>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d13a      	bne.n	8004a42 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80049cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80049d0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80049d4:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80049d6:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80049d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80049dc:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80049de:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80049e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80049e4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80049e8:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80049ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049f4:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80049f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80049fa:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80049fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004a00:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004a02:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004a0a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004a0c:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004a0e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004a12:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004a14:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004a16:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004a1a:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004a1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a26:	430b      	orrs	r3, r1
 8004a28:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004a2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004a2e:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004a30:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004a38:	b005      	add	sp, #20
 8004a3a:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e7bb      	b.n	80049ba <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004a46:	e7f7      	b.n	8004a38 <FT6X06_GetMultiTouchState+0x9e>

08004a48 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004a48:	b190      	cbz	r0, 8004a70 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004a4a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004a4c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004a4e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004a50:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004a52:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004a54:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004a56:	68ca      	ldr	r2, [r1, #12]
 8004a58:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004a5a:	690a      	ldr	r2, [r1, #16]
 8004a5c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a5e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004a60:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a62:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004a64:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <FT6X06_RegisterBusIO+0x30>)
 8004a66:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <FT6X06_RegisterBusIO+0x34>)
 8004a6a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004a6c:	b103      	cbz	r3, 8004a70 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004a6e:	4718      	bx	r3
}
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	08004873 	.word	0x08004873
 8004a7c:	08004881 	.word	0x08004881

08004a80 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004a80:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004a82:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004a86:	46a4      	mov	ip, r4
}
 8004a88:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004a8c:	4760      	bx	ip

08004a8e <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004a8e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004a90:	6804      	ldr	r4, [r0, #0]
 8004a92:	6880      	ldr	r0, [r0, #8]
 8004a94:	46a4      	mov	ip, r4
}
 8004a96:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004a9a:	4760      	bx	ip

08004a9c <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004a9c:	2301      	movs	r3, #1
{
 8004a9e:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f7ff bfed 	b.w	8004a80 <ft6x06_read_reg>

08004aa6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004aa6:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004aa8:	460a      	mov	r2, r1
{
 8004aaa:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004aac:	2301      	movs	r3, #1
 8004aae:	2102      	movs	r1, #2
 8004ab0:	f7ff ffe6 	bl	8004a80 <ft6x06_read_reg>
  
  if(ret == 0)
 8004ab4:	b918      	cbnz	r0, 8004abe <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004ab6:	7823      	ldrb	r3, [r4, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004abe:	bd10      	pop	{r4, pc}

08004ac0 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ac0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004ac2:	2301      	movs	r3, #1
{
 8004ac4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004ac8:	f10d 0207 	add.w	r2, sp, #7
 8004acc:	2191      	movs	r1, #145	@ 0x91
 8004ace:	f7ff ffde 	bl	8004a8e <ft6x06_write_reg>
}
 8004ad2:	b003      	add	sp, #12
 8004ad4:	f85d fb04 	ldr.w	pc, [sp], #4

08004ad8 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ad8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004ada:	2301      	movs	r3, #1
{
 8004adc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004ae0:	f10d 0207 	add.w	r2, sp, #7
 8004ae4:	2192      	movs	r1, #146	@ 0x92
 8004ae6:	f7ff ffd2 	bl	8004a8e <ft6x06_write_reg>
}
 8004aea:	b003      	add	sp, #12
 8004aec:	f85d fb04 	ldr.w	pc, [sp], #4

08004af0 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004af0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004af2:	2301      	movs	r3, #1
{
 8004af4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004af8:	f10d 0207 	add.w	r2, sp, #7
 8004afc:	2193      	movs	r1, #147	@ 0x93
 8004afe:	f7ff ffc6 	bl	8004a8e <ft6x06_write_reg>
}
 8004b02:	b003      	add	sp, #12
 8004b04:	f85d fb04 	ldr.w	pc, [sp], #4

08004b08 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004b08:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004b0a:	2301      	movs	r3, #1
{
 8004b0c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004b10:	f10d 0207 	add.w	r2, sp, #7
 8004b14:	2194      	movs	r1, #148	@ 0x94
 8004b16:	f7ff ffba 	bl	8004a8e <ft6x06_write_reg>
}
 8004b1a:	b003      	add	sp, #12
 8004b1c:	f85d fb04 	ldr.w	pc, [sp], #4

08004b20 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004b20:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004b22:	2301      	movs	r3, #1
{
 8004b24:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004b28:	f10d 0207 	add.w	r2, sp, #7
 8004b2c:	2195      	movs	r1, #149	@ 0x95
 8004b2e:	f7ff ffae 	bl	8004a8e <ft6x06_write_reg>
}
 8004b32:	b003      	add	sp, #12
 8004b34:	f85d fb04 	ldr.w	pc, [sp], #4

08004b38 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004b38:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004b3a:	2301      	movs	r3, #1
{
 8004b3c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004b40:	f10d 0207 	add.w	r2, sp, #7
 8004b44:	2196      	movs	r1, #150	@ 0x96
 8004b46:	f7ff ffa2 	bl	8004a8e <ft6x06_write_reg>
}
 8004b4a:	b003      	add	sp, #12
 8004b4c:	f85d fb04 	ldr.w	pc, [sp], #4

08004b50 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004b50:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004b52:	2301      	movs	r3, #1
{
 8004b54:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004b58:	f10d 0207 	add.w	r2, sp, #7
 8004b5c:	21a4      	movs	r1, #164	@ 0xa4
 8004b5e:	f7ff ff96 	bl	8004a8e <ft6x06_write_reg>
}
 8004b62:	b003      	add	sp, #12
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4

08004b68 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004b68:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	21a8      	movs	r1, #168	@ 0xa8
 8004b6e:	f7ff bf87 	b.w	8004a80 <ft6x06_read_reg>
	...

08004b74 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004b74:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004b76:	2201      	movs	r2, #1
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004b7a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004b7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b80:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004b82:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004b84:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b8a:	f006 f9af 	bl	800aeec <HAL_SDRAM_SendCommand>
 8004b8e:	3800      	subs	r0, #0
 8004b90:	bf18      	it	ne
 8004b92:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004b94:	4240      	negs	r0, r0
 8004b96:	bd08      	pop	{r3, pc}
 8004b98:	2400b260 	.word	0x2400b260

08004b9c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004b9c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004ba2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	2200      	movs	r2, #0
 8004baa:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f006 f99a 	bl	800aeec <HAL_SDRAM_SendCommand>
 8004bb8:	3800      	subs	r0, #0
 8004bba:	bf18      	it	ne
 8004bbc:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004bbe:	4240      	negs	r0, r0
 8004bc0:	bd08      	pop	{r3, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2400b260 	.word	0x2400b260

08004bc8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004bc8:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004bca:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8004bce:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004bd0:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004bd2:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004bd4:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004bd6:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004bd8:	6991      	ldr	r1, [r2, #24]
 8004bda:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004bdc:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004bde:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004be0:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004be2:	4907      	ldr	r1, [pc, #28]	@ (8004c00 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004be4:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004be6:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004be8:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004bea:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf2:	f006 f97b 	bl	800aeec <HAL_SDRAM_SendCommand>
 8004bf6:	3800      	subs	r0, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004bfc:	4240      	negs	r0, r0
 8004bfe:	bd10      	pop	{r4, pc}
 8004c00:	2400b260 	.word	0x2400b260

08004c04 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004c04:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004c08:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004c0c:	2108      	movs	r1, #8
 8004c0e:	2200      	movs	r2, #0
 8004c10:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f006 f967 	bl	800aeec <HAL_SDRAM_SendCommand>
 8004c1e:	3800      	subs	r0, #0
 8004c20:	bf18      	it	ne
 8004c22:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004c24:	4240      	negs	r0, r0
 8004c26:	bd08      	pop	{r3, pc}
 8004c28:	2400b260 	.word	0x2400b260

08004c2c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004c2c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004c2e:	f006 f97c 	bl	800af2a <HAL_SDRAM_ProgramRefreshRate>
 8004c32:	3800      	subs	r0, #0
 8004c34:	bf18      	it	ne
 8004c36:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004c38:	4240      	negs	r0, r0
 8004c3a:	bd08      	pop	{r3, pc}

08004c3c <IS42S32800J_Init>:
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004c40:	6809      	ldr	r1, [r1, #0]
{
 8004c42:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004c44:	f7ff ff96 	bl	8004b74 <IS42S32800J_ClockEnable>
 8004c48:	b110      	cbz	r0, 8004c50 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004c50:	f001 fc7e 	bl	8006550 <HAL_GetTick>
 8004c54:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004c56:	f001 fc7b 	bl	8006550 <HAL_GetTick>
 8004c5a:	4286      	cmp	r6, r0
 8004c5c:	d0fb      	beq.n	8004c56 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff ff9b 	bl	8004b9c <IS42S32800J_Precharge>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d1ef      	bne.n	8004c4a <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004c70:	f7ff ffc8 	bl	8004c04 <IS42S32800J_RefreshMode>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1e8      	bne.n	8004c4a <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f7ff ffa4 	bl	8004bc8 <IS42S32800J_ModeRegConfig>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d1e2      	bne.n	8004c4a <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004c84:	68a1      	ldr	r1, [r4, #8]
 8004c86:	4628      	mov	r0, r5
 8004c88:	f7ff ffd0 	bl	8004c2c <IS42S32800J_RefreshRate>
 8004c8c:	3800      	subs	r0, #0
 8004c8e:	bf18      	it	ne
 8004c90:	2001      	movne	r0, #1
 8004c92:	4240      	negs	r0, r0
  return ret;
 8004c94:	e7db      	b.n	8004c4e <IS42S32800J_Init+0x12>

08004c96 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004c96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004c9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004ca2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004ca6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004caa:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004cae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cb2:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4770      	bx	lr

08004cb8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004cb8:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004cba:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004cbe:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004cc0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004cc4:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004cc6:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004cc8:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004cca:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004ccc:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004cce:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004cd0:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cd2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cd4:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004cd6:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004cd8:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004cda:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cdc:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004cde:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ce2:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cee:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004cf0:	f240 1301 	movw	r3, #257	@ 0x101
 8004cf4:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cf6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cfa:	f004 fd0b 	bl	8009714 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004cfe:	2800      	cmp	r0, #0

}
 8004d00:	bf14      	ite	ne
 8004d02:	f06f 0004 	mvnne.w	r0, #4
 8004d06:	2000      	moveq	r0, #0
 8004d08:	b015      	add	sp, #84	@ 0x54
 8004d0a:	f85d fb04 	ldr.w	pc, [sp], #4

08004d0e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d0e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d10:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004d14:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d16:	bf18      	it	ne
 8004d18:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004d1c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d1e:	bf08      	it	eq
 8004d20:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004d24:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d26:	a906      	add	r1, sp, #24
{
 8004d28:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d2a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004d2c:	2306      	movs	r3, #6
 8004d2e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004d30:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d32:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004d36:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004d38:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d3c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d40:	f004 fbe8 	bl	8009514 <HAL_QSPI_Command>
 8004d44:	bb20      	cbnz	r0, 8004d90 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004d46:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004d4a:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004d4c:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004d4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004d52:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d54:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004d56:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004d5a:	f04f 0310 	mov.w	r3, #16
 8004d5e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004d62:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d66:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004d68:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004d6c:	bf14      	ite	ne
 8004d6e:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004d72:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d76:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004d78:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d7e:	f004 fcc9 	bl	8009714 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004d82:	2800      	cmp	r0, #0
 8004d84:	bf14      	ite	ne
 8004d86:	f06f 0004 	mvnne.w	r0, #4
 8004d8a:	2000      	moveq	r0, #0
}
 8004d8c:	b015      	add	sp, #84	@ 0x54
 8004d8e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004d90:	f06f 0001 	mvn.w	r0, #1
 8004d94:	e7fa      	b.n	8004d8c <MT25TL01G_WriteEnable+0x7e>

08004d96 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d96:	2903      	cmp	r1, #3
{
 8004d98:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d9a:	bf18      	it	ne
 8004d9c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004da0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004da2:	bf08      	it	eq
 8004da4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004da8:	4604      	mov	r4, r0
 8004daa:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004dac:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004dae:	23b7      	movs	r3, #183	@ 0xb7
 8004db0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004db2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004db4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004db8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004dba:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004dbc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004dbe:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004dc2:	f7ff ffa4 	bl	8004d0e <MT25TL01G_WriteEnable>
 8004dc6:	b118      	cbz	r0, 8004dd0 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004dc8:	f06f 0001 	mvn.w	r0, #1
}
 8004dcc:	b00f      	add	sp, #60	@ 0x3c
 8004dce:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd4:	4669      	mov	r1, sp
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f004 fb9c 	bl	8009514 <HAL_QSPI_Command>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1f3      	bne.n	8004dc8 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004de0:	4629      	mov	r1, r5
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff ff68 	bl	8004cb8 <MT25TL01G_AutoPollingMemReady>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0ef      	beq.n	8004dcc <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004dec:	e7ec      	b.n	8004dc8 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004dee <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004dee:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004df4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004df6:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004dfa:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004dfc:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dfe:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004e00:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e02:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e04:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004e08:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004e0a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e0c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e0e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e12:	f004 fb7f 	bl	8009514 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004e16:	2800      	cmp	r0, #0
}
 8004e18:	bf14      	ite	ne
 8004e1a:	f06f 0001 	mvnne.w	r0, #1
 8004e1e:	2000      	moveq	r0, #0
 8004e20:	b00f      	add	sp, #60	@ 0x3c
 8004e22:	f85d fb04 	ldr.w	pc, [sp], #4

08004e26 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004e26:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004e2c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e32:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004e34:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e36:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004e38:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e3a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004e40:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004e42:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e44:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e46:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e4a:	f004 fb63 	bl	8009514 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004e4e:	2800      	cmp	r0, #0
}
 8004e50:	bf14      	ite	ne
 8004e52:	f06f 0001 	mvnne.w	r0, #1
 8004e56:	2000      	moveq	r0, #0
 8004e58:	b00f      	add	sp, #60	@ 0x3c
 8004e5a:	f85d fb04 	ldr.w	pc, [sp], #4

08004e5e <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004e5e:	b500      	push	{lr}
 8004e60:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004e62:	2903      	cmp	r1, #3
 8004e64:	d80e      	bhi.n	8004e84 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004e66:	e8df f001 	tbb	[pc, r1]
 8004e6a:	2902      	.short	0x2902
 8004e6c:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e72:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004e74:	230e      	movs	r3, #14
 8004e76:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e7c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004e7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004e82:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004e84:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004e86:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004e8a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004e8e:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004e90:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004e96:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e98:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004e9a:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004e9e:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ea0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004ea4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ea8:	f004 fc85 	bl	80097b6 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004eac:	2800      	cmp	r0, #0
}
 8004eae:	bf14      	ite	ne
 8004eb0:	f06f 0005 	mvnne.w	r0, #5
 8004eb4:	2000      	moveq	r0, #0
 8004eb6:	b011      	add	sp, #68	@ 0x44
 8004eb8:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ec0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004ec2:	233d      	movs	r3, #61	@ 0x3d
 8004ec4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eca:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ed0:	e7d7      	b.n	8004e82 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ed6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004ed8:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004eda:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004edc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ee0:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004ee2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004ee6:	e7cc      	b.n	8004e82 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004ee8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004eec:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004eee:	23ed      	movs	r3, #237	@ 0xed
 8004ef0:	e7f3      	b.n	8004eda <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004ef2 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004ef2:	b500      	push	{lr}
 8004ef4:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004ef6:	2903      	cmp	r1, #3
 8004ef8:	d80e      	bhi.n	8004f18 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004efa:	e8df f001 	tbb	[pc, r1]
 8004efe:	2502      	.short	0x2502
 8004f00:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f06:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004f08:	230c      	movs	r3, #12
 8004f0a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f10:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004f16:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004f18:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004f1a:	466a      	mov	r2, sp
 8004f1c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004f1e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004f20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004f24:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f2c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004f30:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004f34:	f004 fc3f 	bl	80097b6 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004f38:	2800      	cmp	r0, #0
}
 8004f3a:	bf14      	ite	ne
 8004f3c:	f06f 0005 	mvnne.w	r0, #5
 8004f40:	2000      	moveq	r0, #0
 8004f42:	b011      	add	sp, #68	@ 0x44
 8004f44:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f4c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004f4e:	23bc      	movs	r3, #188	@ 0xbc
 8004f50:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004f52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f56:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f5c:	e7db      	b.n	8004f16 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f62:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004f64:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004f66:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004f68:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f6c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004f6e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004f72:	e7d0      	b.n	8004f16 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004f74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004f78:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004f7a:	23eb      	movs	r3, #235	@ 0xeb
 8004f7c:	e7f3      	b.n	8004f66 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004f7e <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f7e:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004f84:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f86:	bf18      	it	ne
 8004f88:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004f8c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f8e:	bf08      	it	eq
 8004f90:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f94:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f96:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004f98:	2366      	movs	r3, #102	@ 0x66
 8004f9a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004f9c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f9e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004fa2:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004fa4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fa6:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004fa8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fac:	f004 fab2 	bl	8009514 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004fb0:	2800      	cmp	r0, #0
}
 8004fb2:	bf14      	ite	ne
 8004fb4:	f06f 0001 	mvnne.w	r0, #1
 8004fb8:	2000      	moveq	r0, #0
 8004fba:	b00f      	add	sp, #60	@ 0x3c
 8004fbc:	f85d fb04 	ldr.w	pc, [sp], #4

08004fc0 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004fc0:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004fc6:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004fc8:	bf18      	it	ne
 8004fca:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004fce:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004fd0:	bf08      	it	eq
 8004fd2:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fd6:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004fd8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004fda:	2399      	movs	r3, #153	@ 0x99
 8004fdc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004fde:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fe0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004fe6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fe8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004fea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fee:	f004 fa91 	bl	8009514 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004ff2:	2800      	cmp	r0, #0
}
 8004ff4:	bf14      	ite	ne
 8004ff6:	f06f 0001 	mvnne.w	r0, #1
 8004ffa:	2000      	moveq	r0, #0
 8004ffc:	b00f      	add	sp, #60	@ 0x3c
 8004ffe:	f85d fb04 	ldr.w	pc, [sp], #4

08005002 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005002:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005004:	6884      	ldr	r4, [r0, #8]
 8005006:	8800      	ldrh	r0, [r0, #0]
 8005008:	46a4      	mov	ip, r4
}
 800500a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800500e:	4760      	bx	ip

08005010 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005010:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005012:	6844      	ldr	r4, [r0, #4]
 8005014:	8800      	ldrh	r0, [r0, #0]
 8005016:	46a4      	mov	ip, r4
}
 8005018:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800501c:	4760      	bx	ip

0800501e <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800501e:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005020:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8005026:	4798      	blx	r3
 8005028:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	4798      	blx	r3
 800502e:	1b83      	subs	r3, r0, r6
 8005030:	42ab      	cmp	r3, r5
 8005032:	d3fa      	bcc.n	800502a <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005034:	bd70      	pop	{r4, r5, r6, pc}
	...

08005038 <OTM8009A_Init>:
{
 8005038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800503c:	2300      	movs	r3, #0
 800503e:	f100 0510 	add.w	r5, r0, #16
{
 8005042:	4607      	mov	r7, r0
 8005044:	460e      	mov	r6, r1
 8005046:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005048:	4619      	mov	r1, r3
 800504a:	4ade      	ldr	r2, [pc, #888]	@ (80053c4 <OTM8009A_Init+0x38c>)
 800504c:	4628      	mov	r0, r5
 800504e:	f000 fb99 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005052:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005054:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005056:	4adc      	ldr	r2, [pc, #880]	@ (80053c8 <OTM8009A_Init+0x390>)
 8005058:	21ff      	movs	r1, #255	@ 0xff
 800505a:	4628      	mov	r0, r5
 800505c:	f000 fb92 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005060:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005062:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005064:	4ad9      	ldr	r2, [pc, #868]	@ (80053cc <OTM8009A_Init+0x394>)
 8005066:	4619      	mov	r1, r3
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fb8b 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800506e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005070:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005072:	4ad7      	ldr	r2, [pc, #860]	@ (80053d0 <OTM8009A_Init+0x398>)
 8005074:	21ff      	movs	r1, #255	@ 0xff
 8005076:	4628      	mov	r0, r5
 8005078:	f000 fb84 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800507c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800507e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005080:	4ad2      	ldr	r2, [pc, #840]	@ (80053cc <OTM8009A_Init+0x394>)
 8005082:	4619      	mov	r1, r3
 8005084:	4628      	mov	r0, r5
 8005086:	f000 fb7d 	bl	8005784 <otm8009a_write_reg>
 800508a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800508c:	2300      	movs	r3, #0
 800508e:	4ad1      	ldr	r2, [pc, #836]	@ (80053d4 <OTM8009A_Init+0x39c>)
 8005090:	21c4      	movs	r1, #196	@ 0xc4
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fb76 	bl	8005784 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005098:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800509a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff ffbe 	bl	800501e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80050a2:	2300      	movs	r3, #0
 80050a4:	4acc      	ldr	r2, [pc, #816]	@ (80053d8 <OTM8009A_Init+0x3a0>)
 80050a6:	4628      	mov	r0, r5
 80050a8:	4619      	mov	r1, r3
 80050aa:	f000 fb6b 	bl	8005784 <otm8009a_write_reg>
 80050ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80050b0:	2300      	movs	r3, #0
 80050b2:	4aca      	ldr	r2, [pc, #808]	@ (80053dc <OTM8009A_Init+0x3a4>)
 80050b4:	21c4      	movs	r1, #196	@ 0xc4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fb64 	bl	8005784 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80050bc:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80050be:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7ff ffac 	bl	800501e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80050c6:	2300      	movs	r3, #0
 80050c8:	4ac5      	ldr	r2, [pc, #788]	@ (80053e0 <OTM8009A_Init+0x3a8>)
 80050ca:	4628      	mov	r0, r5
 80050cc:	4619      	mov	r1, r3
 80050ce:	f000 fb59 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80050d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80050d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80050d6:	4ac3      	ldr	r2, [pc, #780]	@ (80053e4 <OTM8009A_Init+0x3ac>)
 80050d8:	21c5      	movs	r1, #197	@ 0xc5
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fb52 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80050e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80050e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80050e4:	4ac0      	ldr	r2, [pc, #768]	@ (80053e8 <OTM8009A_Init+0x3b0>)
 80050e6:	4619      	mov	r1, r3
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 fb4b 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80050ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80050f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80050f2:	4abe      	ldr	r2, [pc, #760]	@ (80053ec <OTM8009A_Init+0x3b4>)
 80050f4:	21c5      	movs	r1, #197	@ 0xc5
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fb44 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80050fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80050fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005100:	4abb      	ldr	r2, [pc, #748]	@ (80053f0 <OTM8009A_Init+0x3b8>)
 8005102:	4619      	mov	r1, r3
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fb3d 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800510a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800510c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800510e:	4ab9      	ldr	r2, [pc, #740]	@ (80053f4 <OTM8009A_Init+0x3bc>)
 8005110:	21c0      	movs	r1, #192	@ 0xc0
 8005112:	4628      	mov	r0, r5
 8005114:	f000 fb36 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005118:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800511a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800511c:	4aa9      	ldr	r2, [pc, #676]	@ (80053c4 <OTM8009A_Init+0x38c>)
 800511e:	4619      	mov	r1, r3
 8005120:	4628      	mov	r0, r5
 8005122:	f000 fb2f 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005126:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005128:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800512a:	4ab3      	ldr	r2, [pc, #716]	@ (80053f8 <OTM8009A_Init+0x3c0>)
 800512c:	21d9      	movs	r1, #217	@ 0xd9
 800512e:	4628      	mov	r0, r5
 8005130:	f000 fb28 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005134:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005136:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005138:	4ab0      	ldr	r2, [pc, #704]	@ (80053fc <OTM8009A_Init+0x3c4>)
 800513a:	4619      	mov	r1, r3
 800513c:	4628      	mov	r0, r5
 800513e:	f000 fb21 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005142:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005144:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005146:	4aae      	ldr	r2, [pc, #696]	@ (8005400 <OTM8009A_Init+0x3c8>)
 8005148:	21c1      	movs	r1, #193	@ 0xc1
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fb1a 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005150:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005152:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005154:	4aab      	ldr	r2, [pc, #684]	@ (8005404 <OTM8009A_Init+0x3cc>)
 8005156:	4619      	mov	r1, r3
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fb13 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800515e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005160:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005162:	4aa9      	ldr	r2, [pc, #676]	@ (8005408 <OTM8009A_Init+0x3d0>)
 8005164:	21c5      	movs	r1, #197	@ 0xc5
 8005166:	4628      	mov	r0, r5
 8005168:	f000 fb0c 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800516c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800516e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005170:	4aa6      	ldr	r2, [pc, #664]	@ (800540c <OTM8009A_Init+0x3d4>)
 8005172:	4619      	mov	r1, r3
 8005174:	4628      	mov	r0, r5
 8005176:	f000 fb05 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800517a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800517c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800517e:	4a9b      	ldr	r2, [pc, #620]	@ (80053ec <OTM8009A_Init+0x3b4>)
 8005180:	21c5      	movs	r1, #197	@ 0xc5
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fafe 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005188:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800518a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800518c:	4a8d      	ldr	r2, [pc, #564]	@ (80053c4 <OTM8009A_Init+0x38c>)
 800518e:	4619      	mov	r1, r3
 8005190:	4628      	mov	r0, r5
 8005192:	f000 faf7 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005196:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005198:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800519a:	4a9d      	ldr	r2, [pc, #628]	@ (8005410 <OTM8009A_Init+0x3d8>)
 800519c:	21d8      	movs	r1, #216	@ 0xd8
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 faf0 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80051a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80051a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80051a8:	4a9a      	ldr	r2, [pc, #616]	@ (8005414 <OTM8009A_Init+0x3dc>)
 80051aa:	4619      	mov	r1, r3
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 fae9 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80051b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80051b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80051b6:	4a98      	ldr	r2, [pc, #608]	@ (8005418 <OTM8009A_Init+0x3e0>)
 80051b8:	21c5      	movs	r1, #197	@ 0xc5
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 fae2 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80051c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80051c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80051c4:	4a95      	ldr	r2, [pc, #596]	@ (800541c <OTM8009A_Init+0x3e4>)
 80051c6:	4619      	mov	r1, r3
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 fadb 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80051ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80051d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80051d2:	4a93      	ldr	r2, [pc, #588]	@ (8005420 <OTM8009A_Init+0x3e8>)
 80051d4:	21c0      	movs	r1, #192	@ 0xc0
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 fad4 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80051dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80051de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80051e0:	4a90      	ldr	r2, [pc, #576]	@ (8005424 <OTM8009A_Init+0x3ec>)
 80051e2:	4619      	mov	r1, r3
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 facd 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80051ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80051ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80051ee:	4a8e      	ldr	r2, [pc, #568]	@ (8005428 <OTM8009A_Init+0x3f0>)
 80051f0:	21c5      	movs	r1, #197	@ 0xc5
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fac6 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80051f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80051fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80051fc:	4a8b      	ldr	r2, [pc, #556]	@ (800542c <OTM8009A_Init+0x3f4>)
 80051fe:	4619      	mov	r1, r3
 8005200:	4628      	mov	r0, r5
 8005202:	f000 fabf 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005206:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005208:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800520a:	4a89      	ldr	r2, [pc, #548]	@ (8005430 <OTM8009A_Init+0x3f8>)
 800520c:	21c4      	movs	r1, #196	@ 0xc4
 800520e:	4628      	mov	r0, r5
 8005210:	f000 fab8 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005214:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005216:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005218:	4a78      	ldr	r2, [pc, #480]	@ (80053fc <OTM8009A_Init+0x3c4>)
 800521a:	4619      	mov	r1, r3
 800521c:	4628      	mov	r0, r5
 800521e:	f000 fab1 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005222:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005224:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005226:	4a83      	ldr	r2, [pc, #524]	@ (8005434 <OTM8009A_Init+0x3fc>)
 8005228:	21c1      	movs	r1, #193	@ 0xc1
 800522a:	4628      	mov	r0, r5
 800522c:	f000 faaa 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005230:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005232:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005234:	4a80      	ldr	r2, [pc, #512]	@ (8005438 <OTM8009A_Init+0x400>)
 8005236:	4619      	mov	r1, r3
 8005238:	4628      	mov	r0, r5
 800523a:	f000 faa3 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800523e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005240:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005242:	4a7e      	ldr	r2, [pc, #504]	@ (800543c <OTM8009A_Init+0x404>)
 8005244:	21b3      	movs	r1, #179	@ 0xb3
 8005246:	4628      	mov	r0, r5
 8005248:	f000 fa9c 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800524c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800524e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005250:	4a5e      	ldr	r2, [pc, #376]	@ (80053cc <OTM8009A_Init+0x394>)
 8005252:	4619      	mov	r1, r3
 8005254:	4628      	mov	r0, r5
 8005256:	f000 fa95 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800525a:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800525c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800525e:	4a78      	ldr	r2, [pc, #480]	@ (8005440 <OTM8009A_Init+0x408>)
 8005260:	21ce      	movs	r1, #206	@ 0xce
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fa8e 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005268:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800526a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800526c:	4a75      	ldr	r2, [pc, #468]	@ (8005444 <OTM8009A_Init+0x40c>)
 800526e:	4619      	mov	r1, r3
 8005270:	4628      	mov	r0, r5
 8005272:	f000 fa87 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005276:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005278:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800527a:	4a73      	ldr	r2, [pc, #460]	@ (8005448 <OTM8009A_Init+0x410>)
 800527c:	21ce      	movs	r1, #206	@ 0xce
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fa80 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005284:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005286:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005288:	4a70      	ldr	r2, [pc, #448]	@ (800544c <OTM8009A_Init+0x414>)
 800528a:	4619      	mov	r1, r3
 800528c:	4628      	mov	r0, r5
 800528e:	f000 fa79 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005292:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005294:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005296:	4a6e      	ldr	r2, [pc, #440]	@ (8005450 <OTM8009A_Init+0x418>)
 8005298:	21ce      	movs	r1, #206	@ 0xce
 800529a:	4628      	mov	r0, r5
 800529c:	f000 fa72 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80052a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052a4:	4a6b      	ldr	r2, [pc, #428]	@ (8005454 <OTM8009A_Init+0x41c>)
 80052a6:	4619      	mov	r1, r3
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 fa6b 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80052ae:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80052b2:	4a69      	ldr	r2, [pc, #420]	@ (8005458 <OTM8009A_Init+0x420>)
 80052b4:	21cf      	movs	r1, #207	@ 0xcf
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fa64 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80052be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052c0:	4a66      	ldr	r2, [pc, #408]	@ (800545c <OTM8009A_Init+0x424>)
 80052c2:	4619      	mov	r1, r3
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 fa5d 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80052ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80052ce:	4a64      	ldr	r2, [pc, #400]	@ (8005460 <OTM8009A_Init+0x428>)
 80052d0:	21cf      	movs	r1, #207	@ 0xcf
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 fa56 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80052d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80052da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80052dc:	4a3b      	ldr	r2, [pc, #236]	@ (80053cc <OTM8009A_Init+0x394>)
 80052de:	4619      	mov	r1, r3
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 fa4f 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80052e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80052e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80052ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005464 <OTM8009A_Init+0x42c>)
 80052ec:	21cb      	movs	r1, #203	@ 0xcb
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fa48 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80052f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80052f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80052f8:	4a5b      	ldr	r2, [pc, #364]	@ (8005468 <OTM8009A_Init+0x430>)
 80052fa:	4619      	mov	r1, r3
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 fa41 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005302:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005304:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005306:	4a59      	ldr	r2, [pc, #356]	@ (800546c <OTM8009A_Init+0x434>)
 8005308:	21cb      	movs	r1, #203	@ 0xcb
 800530a:	4628      	mov	r0, r5
 800530c:	f000 fa3a 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005310:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005312:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005314:	4a4b      	ldr	r2, [pc, #300]	@ (8005444 <OTM8009A_Init+0x40c>)
 8005316:	4619      	mov	r1, r3
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fa33 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800531e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005320:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005322:	4a53      	ldr	r2, [pc, #332]	@ (8005470 <OTM8009A_Init+0x438>)
 8005324:	21cb      	movs	r1, #203	@ 0xcb
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fa2c 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800532c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800532e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005330:	4a46      	ldr	r2, [pc, #280]	@ (800544c <OTM8009A_Init+0x414>)
 8005332:	4619      	mov	r1, r3
 8005334:	4628      	mov	r0, r5
 8005336:	f000 fa25 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800533a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800533c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800533e:	4a4d      	ldr	r2, [pc, #308]	@ (8005474 <OTM8009A_Init+0x43c>)
 8005340:	21cb      	movs	r1, #203	@ 0xcb
 8005342:	4628      	mov	r0, r5
 8005344:	f000 fa1e 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005348:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800534a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800534c:	4a41      	ldr	r2, [pc, #260]	@ (8005454 <OTM8009A_Init+0x41c>)
 800534e:	4619      	mov	r1, r3
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fa17 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005356:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005358:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800535a:	4a47      	ldr	r2, [pc, #284]	@ (8005478 <OTM8009A_Init+0x440>)
 800535c:	21cb      	movs	r1, #203	@ 0xcb
 800535e:	4628      	mov	r0, r5
 8005360:	f000 fa10 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005364:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005366:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005368:	4a3c      	ldr	r2, [pc, #240]	@ (800545c <OTM8009A_Init+0x424>)
 800536a:	4619      	mov	r1, r3
 800536c:	4628      	mov	r0, r5
 800536e:	f000 fa09 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005372:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005374:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005376:	4a41      	ldr	r2, [pc, #260]	@ (800547c <OTM8009A_Init+0x444>)
 8005378:	21cb      	movs	r1, #203	@ 0xcb
 800537a:	4628      	mov	r0, r5
 800537c:	f000 fa02 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005380:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005382:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005384:	4a3e      	ldr	r2, [pc, #248]	@ (8005480 <OTM8009A_Init+0x448>)
 8005386:	4619      	mov	r1, r3
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f9fb 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800538e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005390:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005392:	4a3c      	ldr	r2, [pc, #240]	@ (8005484 <OTM8009A_Init+0x44c>)
 8005394:	21cb      	movs	r1, #203	@ 0xcb
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f9f4 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800539c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800539e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80053a0:	4a39      	ldr	r2, [pc, #228]	@ (8005488 <OTM8009A_Init+0x450>)
 80053a2:	4619      	mov	r1, r3
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f9ed 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80053aa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80053ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80053ae:	4a37      	ldr	r2, [pc, #220]	@ (800548c <OTM8009A_Init+0x454>)
 80053b0:	21cb      	movs	r1, #203	@ 0xcb
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f9e6 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80053b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80053ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80053bc:	4a03      	ldr	r2, [pc, #12]	@ (80053cc <OTM8009A_Init+0x394>)
 80053be:	4619      	mov	r1, r3
 80053c0:	4628      	mov	r0, r5
 80053c2:	e065      	b.n	8005490 <OTM8009A_Init+0x458>
 80053c4:	08025f95 	.word	0x08025f95
 80053c8:	08025f91 	.word	0x08025f91
 80053cc:	08025f96 	.word	0x08025f96
 80053d0:	08025f8f 	.word	0x08025f8f
 80053d4:	08025f97 	.word	0x08025f97
 80053d8:	08025f98 	.word	0x08025f98
 80053dc:	08025f99 	.word	0x08025f99
 80053e0:	08025f9a 	.word	0x08025f9a
 80053e4:	08025f9b 	.word	0x08025f9b
 80053e8:	08025f9c 	.word	0x08025f9c
 80053ec:	08025f9d 	.word	0x08025f9d
 80053f0:	08025f9e 	.word	0x08025f9e
 80053f4:	08025f9f 	.word	0x08025f9f
 80053f8:	08025fa0 	.word	0x08025fa0
 80053fc:	08025fa3 	.word	0x08025fa3
 8005400:	08025fa4 	.word	0x08025fa4
 8005404:	08025fa5 	.word	0x08025fa5
 8005408:	08025fa6 	.word	0x08025fa6
 800540c:	08025fa7 	.word	0x08025fa7
 8005410:	08025f8d 	.word	0x08025f8d
 8005414:	08025fa8 	.word	0x08025fa8
 8005418:	08025fa9 	.word	0x08025fa9
 800541c:	08025faa 	.word	0x08025faa
 8005420:	08025fab 	.word	0x08025fab
 8005424:	08025fac 	.word	0x08025fac
 8005428:	08025fad 	.word	0x08025fad
 800542c:	08025fa1 	.word	0x08025fa1
 8005430:	08025fae 	.word	0x08025fae
 8005434:	08025faf 	.word	0x08025faf
 8005438:	08025fb0 	.word	0x08025fb0
 800543c:	08025f8b 	.word	0x08025f8b
 8005440:	08025f85 	.word	0x08025f85
 8005444:	08025fb1 	.word	0x08025fb1
 8005448:	08025f77 	.word	0x08025f77
 800544c:	08025fb2 	.word	0x08025fb2
 8005450:	08025f69 	.word	0x08025f69
 8005454:	08025fb3 	.word	0x08025fb3
 8005458:	08025f5f 	.word	0x08025f5f
 800545c:	08025fb4 	.word	0x08025fb4
 8005460:	08025fc1 	.word	0x08025fc1
 8005464:	08025f55 	.word	0x08025f55
 8005468:	08025fb5 	.word	0x08025fb5
 800546c:	08025f46 	.word	0x08025f46
 8005470:	08025f37 	.word	0x08025f37
 8005474:	08025f2d 	.word	0x08025f2d
 8005478:	08025f1e 	.word	0x08025f1e
 800547c:	08025f0f 	.word	0x08025f0f
 8005480:	08025fb6 	.word	0x08025fb6
 8005484:	08025f05 	.word	0x08025f05
 8005488:	08025fb7 	.word	0x08025fb7
 800548c:	08025efb 	.word	0x08025efb
 8005490:	f000 f978 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005494:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005496:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005498:	4a8e      	ldr	r2, [pc, #568]	@ (80056d4 <OTM8009A_Init+0x69c>)
 800549a:	21cc      	movs	r1, #204	@ 0xcc
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f971 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80054a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054a6:	4a8c      	ldr	r2, [pc, #560]	@ (80056d8 <OTM8009A_Init+0x6a0>)
 80054a8:	4619      	mov	r1, r3
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f96a 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80054b0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80054b4:	4a89      	ldr	r2, [pc, #548]	@ (80056dc <OTM8009A_Init+0x6a4>)
 80054b6:	21cc      	movs	r1, #204	@ 0xcc
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 f963 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80054c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054c2:	4a87      	ldr	r2, [pc, #540]	@ (80056e0 <OTM8009A_Init+0x6a8>)
 80054c4:	4619      	mov	r1, r3
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f95c 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80054cc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80054d0:	4a84      	ldr	r2, [pc, #528]	@ (80056e4 <OTM8009A_Init+0x6ac>)
 80054d2:	21cc      	movs	r1, #204	@ 0xcc
 80054d4:	4628      	mov	r0, r5
 80054d6:	f000 f955 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80054dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054de:	4a82      	ldr	r2, [pc, #520]	@ (80056e8 <OTM8009A_Init+0x6b0>)
 80054e0:	4619      	mov	r1, r3
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f94e 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80054e8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80054ec:	4a7f      	ldr	r2, [pc, #508]	@ (80056ec <OTM8009A_Init+0x6b4>)
 80054ee:	21cc      	movs	r1, #204	@ 0xcc
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f947 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80054f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80054f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80054fa:	4a7d      	ldr	r2, [pc, #500]	@ (80056f0 <OTM8009A_Init+0x6b8>)
 80054fc:	4619      	mov	r1, r3
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f940 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005504:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005506:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005508:	4a7a      	ldr	r2, [pc, #488]	@ (80056f4 <OTM8009A_Init+0x6bc>)
 800550a:	21cc      	movs	r1, #204	@ 0xcc
 800550c:	4628      	mov	r0, r5
 800550e:	f000 f939 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005512:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005514:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005516:	4a78      	ldr	r2, [pc, #480]	@ (80056f8 <OTM8009A_Init+0x6c0>)
 8005518:	4619      	mov	r1, r3
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f932 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005520:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005522:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005524:	4a75      	ldr	r2, [pc, #468]	@ (80056fc <OTM8009A_Init+0x6c4>)
 8005526:	21cc      	movs	r1, #204	@ 0xcc
 8005528:	4628      	mov	r0, r5
 800552a:	f000 f92b 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800552e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005530:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005532:	4a73      	ldr	r2, [pc, #460]	@ (8005700 <OTM8009A_Init+0x6c8>)
 8005534:	4619      	mov	r1, r3
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f924 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800553c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800553e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005540:	4a70      	ldr	r2, [pc, #448]	@ (8005704 <OTM8009A_Init+0x6cc>)
 8005542:	21c5      	movs	r1, #197	@ 0xc5
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f91d 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800554a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800554c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800554e:	4a6e      	ldr	r2, [pc, #440]	@ (8005708 <OTM8009A_Init+0x6d0>)
 8005550:	4619      	mov	r1, r3
 8005552:	4628      	mov	r0, r5
 8005554:	f000 f916 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005558:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800555a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800555c:	4a6b      	ldr	r2, [pc, #428]	@ (800570c <OTM8009A_Init+0x6d4>)
 800555e:	21f5      	movs	r1, #245	@ 0xf5
 8005560:	4628      	mov	r0, r5
 8005562:	f000 f90f 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005566:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005568:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800556a:	4a69      	ldr	r2, [pc, #420]	@ (8005710 <OTM8009A_Init+0x6d8>)
 800556c:	4619      	mov	r1, r3
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f908 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005574:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005576:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005578:	4a66      	ldr	r2, [pc, #408]	@ (8005714 <OTM8009A_Init+0x6dc>)
 800557a:	21c6      	movs	r1, #198	@ 0xc6
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f901 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005582:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005584:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005586:	4a64      	ldr	r2, [pc, #400]	@ (8005718 <OTM8009A_Init+0x6e0>)
 8005588:	4619      	mov	r1, r3
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f8fa 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005590:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005592:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005594:	4a61      	ldr	r2, [pc, #388]	@ (800571c <OTM8009A_Init+0x6e4>)
 8005596:	21ff      	movs	r1, #255	@ 0xff
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f8f3 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800559e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80055a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005718 <OTM8009A_Init+0x6e0>)
 80055a4:	4619      	mov	r1, r3
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 f8ec 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055b0:	4a59      	ldr	r2, [pc, #356]	@ (8005718 <OTM8009A_Init+0x6e0>)
 80055b2:	4619      	mov	r1, r3
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 f8e5 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80055ba:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80055be:	4a58      	ldr	r2, [pc, #352]	@ (8005720 <OTM8009A_Init+0x6e8>)
 80055c0:	21e1      	movs	r1, #225	@ 0xe1
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f8de 	bl	8005784 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80055ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80055cc:	4a52      	ldr	r2, [pc, #328]	@ (8005718 <OTM8009A_Init+0x6e0>)
 80055ce:	4619      	mov	r1, r3
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f8d7 	bl	8005784 <otm8009a_write_reg>
 80055d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80055d8:	2310      	movs	r3, #16
 80055da:	4a52      	ldr	r2, [pc, #328]	@ (8005724 <OTM8009A_Init+0x6ec>)
 80055dc:	21e2      	movs	r1, #226	@ 0xe2
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f8d0 	bl	8005784 <otm8009a_write_reg>
 80055e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80055e6:	2300      	movs	r3, #0
 80055e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005728 <OTM8009A_Init+0x6f0>)
 80055ea:	2111      	movs	r1, #17
 80055ec:	4628      	mov	r0, r5
 80055ee:	f000 f8c9 	bl	8005784 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80055f2:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80055f4:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7ff fd11 	bl	800501e <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80055fc:	4f4b      	ldr	r7, [pc, #300]	@ (800572c <OTM8009A_Init+0x6f4>)
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d061      	beq.n	80056c6 <OTM8009A_Init+0x68e>
 8005602:	2e02      	cmp	r6, #2
 8005604:	d107      	bne.n	8005616 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005606:	2300      	movs	r3, #0
 8005608:	4a49      	ldr	r2, [pc, #292]	@ (8005730 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800560a:	213a      	movs	r1, #58	@ 0x3a
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f8b9 	bl	8005784 <otm8009a_write_reg>
 8005612:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005614:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005616:	f1b8 0f01 	cmp.w	r8, #1
 800561a:	d157      	bne.n	80056cc <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800561c:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800561e:	f10d 0207 	add.w	r2, sp, #7
 8005622:	2136      	movs	r1, #54	@ 0x36
 8005624:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005626:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800562a:	2300      	movs	r3, #0
 800562c:	f000 f8aa 	bl	8005784 <otm8009a_write_reg>
 8005630:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005632:	2304      	movs	r3, #4
 8005634:	4a3f      	ldr	r2, [pc, #252]	@ (8005734 <OTM8009A_Init+0x6fc>)
 8005636:	212a      	movs	r1, #42	@ 0x2a
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f8a3 	bl	8005784 <otm8009a_write_reg>
 800563e:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005640:	2304      	movs	r3, #4
 8005642:	4a3d      	ldr	r2, [pc, #244]	@ (8005738 <OTM8009A_Init+0x700>)
 8005644:	212b      	movs	r1, #43	@ 0x2b
 8005646:	4628      	mov	r0, r5
 8005648:	f000 f89c 	bl	8005784 <otm8009a_write_reg>
 800564c:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800564e:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005652:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005654:	2300      	movs	r3, #0
 8005656:	4a39      	ldr	r2, [pc, #228]	@ (800573c <OTM8009A_Init+0x704>)
 8005658:	2151      	movs	r1, #81	@ 0x51
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f892 	bl	8005784 <otm8009a_write_reg>
 8005660:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005662:	4633      	mov	r3, r6
 8005664:	4a36      	ldr	r2, [pc, #216]	@ (8005740 <OTM8009A_Init+0x708>)
 8005666:	2153      	movs	r1, #83	@ 0x53
 8005668:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800566a:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800566c:	f000 f88a 	bl	8005784 <otm8009a_write_reg>
 8005670:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005672:	4633      	mov	r3, r6
 8005674:	4a33      	ldr	r2, [pc, #204]	@ (8005744 <OTM8009A_Init+0x70c>)
 8005676:	2155      	movs	r1, #85	@ 0x55
 8005678:	4628      	mov	r0, r5
 800567a:	f000 f883 	bl	8005784 <otm8009a_write_reg>
 800567e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005680:	4633      	mov	r3, r6
 8005682:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <OTM8009A_Init+0x710>)
 8005684:	215e      	movs	r1, #94	@ 0x5e
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f87c 	bl	8005784 <otm8009a_write_reg>
 800568c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800568e:	4633      	mov	r3, r6
 8005690:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <OTM8009A_Init+0x714>)
 8005692:	2129      	movs	r1, #41	@ 0x29
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f875 	bl	8005784 <otm8009a_write_reg>
 800569a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800569c:	4633      	mov	r3, r6
 800569e:	4631      	mov	r1, r6
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <OTM8009A_Init+0x6e0>)
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f86e 	bl	8005784 <otm8009a_write_reg>
 80056a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80056aa:	4633      	mov	r3, r6
 80056ac:	4a28      	ldr	r2, [pc, #160]	@ (8005750 <OTM8009A_Init+0x718>)
 80056ae:	212c      	movs	r1, #44	@ 0x2c
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f867 	bl	8005784 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80056b6:	42c4      	cmn	r4, r0
}
 80056b8:	bf14      	ite	ne
 80056ba:	f04f 30ff 	movne.w	r0, #4294967295
 80056be:	4630      	moveq	r0, r6
 80056c0:	b002      	add	sp, #8
 80056c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80056c6:	4633      	mov	r3, r6
 80056c8:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <OTM8009A_Init+0x71c>)
 80056ca:	e79e      	b.n	800560a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80056cc:	2300      	movs	r3, #0
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	e7bf      	b.n	8005652 <OTM8009A_Init+0x61a>
 80056d2:	bf00      	nop
 80056d4:	08025ef1 	.word	0x08025ef1
 80056d8:	08025fb5 	.word	0x08025fb5
 80056dc:	08025ee2 	.word	0x08025ee2
 80056e0:	08025fb1 	.word	0x08025fb1
 80056e4:	08025ed3 	.word	0x08025ed3
 80056e8:	08025fb2 	.word	0x08025fb2
 80056ec:	08025ec9 	.word	0x08025ec9
 80056f0:	08025fb3 	.word	0x08025fb3
 80056f4:	08025eba 	.word	0x08025eba
 80056f8:	08025fb4 	.word	0x08025fb4
 80056fc:	08025eab 	.word	0x08025eab
 8005700:	08025fa1 	.word	0x08025fa1
 8005704:	08025fc2 	.word	0x08025fc2
 8005708:	08025fc3 	.word	0x08025fc3
 800570c:	08025fc4 	.word	0x08025fc4
 8005710:	08025fc5 	.word	0x08025fc5
 8005714:	08025fc6 	.word	0x08025fc6
 8005718:	08025f95 	.word	0x08025f95
 800571c:	08025ea8 	.word	0x08025ea8
 8005720:	08025e98 	.word	0x08025e98
 8005724:	08025e88 	.word	0x08025e88
 8005728:	08025fb8 	.word	0x08025fb8
 800572c:	2400b270 	.word	0x2400b270
 8005730:	08025fb9 	.word	0x08025fb9
 8005734:	08025fcb 	.word	0x08025fcb
 8005738:	08025fc7 	.word	0x08025fc7
 800573c:	08025fbb 	.word	0x08025fbb
 8005740:	08025fbc 	.word	0x08025fbc
 8005744:	08025fbd 	.word	0x08025fbd
 8005748:	08025fbe 	.word	0x08025fbe
 800574c:	08025fbf 	.word	0x08025fbf
 8005750:	08025fc0 	.word	0x08025fc0
 8005754:	08025fba 	.word	0x08025fba

08005758 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005758:	b160      	cbz	r0, 8005774 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800575a:	684b      	ldr	r3, [r1, #4]
 800575c:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800575e:	688b      	ldr	r3, [r1, #8]
 8005760:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005762:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005764:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005766:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <OTM8009A_RegisterBusIO+0x24>)
 800576a:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800576c:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <OTM8009A_RegisterBusIO+0x28>)
 800576e:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005770:	2000      	movs	r0, #0
 8005772:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	08005003 	.word	0x08005003
 8005780:	08005011 	.word	0x08005011

08005784 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005784:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005786:	6804      	ldr	r4, [r0, #0]
 8005788:	6880      	ldr	r0, [r0, #8]
 800578a:	46a4      	mov	ip, r4
}
 800578c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005790:	4760      	bx	ip
	...

08005794 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005794:	4a10      	ldr	r2, [pc, #64]	@ (80057d8 <BSP_I2C4_DeInit+0x44>)
{
 8005796:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800579e:	b10b      	cbz	r3, 80057a4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80057a0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80057a2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80057a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057a8:	480c      	ldr	r0, [pc, #48]	@ (80057dc <BSP_I2C4_DeInit+0x48>)
 80057aa:	f001 fe3f 	bl	800742c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80057ae:	480b      	ldr	r0, [pc, #44]	@ (80057dc <BSP_I2C4_DeInit+0x48>)
 80057b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057b4:	f001 fe3a 	bl	800742c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80057b8:	4a09      	ldr	r2, [pc, #36]	@ (80057e0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80057ba:	480a      	ldr	r0, [pc, #40]	@ (80057e4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80057bc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80057c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80057c8:	f002 f880 	bl	80078cc <HAL_I2C_DeInit>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d0e7      	beq.n	80057a0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80057d0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80057d4:	e7e5      	b.n	80057a2 <BSP_I2C4_DeInit+0xe>
 80057d6:	bf00      	nop
 80057d8:	2400bcd4 	.word	0x2400bcd4
 80057dc:	58020c00 	.word	0x58020c00
 80057e0:	58024400 	.word	0x58024400
 80057e4:	2400b27c 	.word	0x2400b27c

080057e8 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80057e8:	2300      	movs	r3, #0
 80057ea:	2201      	movs	r2, #1
{
 80057ec:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80057ee:	6041      	str	r1, [r0, #4]
{
 80057f0:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80057f2:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80057f4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80057f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80057fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005800:	f002 f80e 	bl	8007820 <HAL_I2C_Init>
 8005804:	4601      	mov	r1, r0
 8005806:	b108      	cbz	r0, 800580c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005808:	2001      	movs	r0, #1
}
 800580a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800580c:	4620      	mov	r0, r4
 800580e:	f002 fa34 	bl	8007c7a <HAL_I2CEx_ConfigAnalogFilter>
 8005812:	4601      	mov	r1, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d1f7      	bne.n	8005808 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005818:	4620      	mov	r0, r4
 800581a:	f002 fa54 	bl	8007cc6 <HAL_I2CEx_ConfigDigitalFilter>
 800581e:	3800      	subs	r0, #0
 8005820:	bf18      	it	ne
 8005822:	2001      	movne	r0, #1
 8005824:	e7f1      	b.n	800580a <MX_I2C4_Init+0x22>
	...

08005828 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005828:	4ba2      	ldr	r3, [pc, #648]	@ (8005ab4 <BSP_I2C4_Init+0x28c>)
 800582a:	48a3      	ldr	r0, [pc, #652]	@ (8005ab8 <BSP_I2C4_Init+0x290>)
{
 800582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 8005832:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 8005834:	4ba1      	ldr	r3, [pc, #644]	@ (8005abc <BSP_I2C4_Init+0x294>)
 8005836:	681c      	ldr	r4, [r3, #0]
 8005838:	b11c      	cbz	r4, 8005842 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800583a:	2000      	movs	r0, #0
}
 800583c:	b013      	add	sp, #76	@ 0x4c
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005846:	f002 fa13 	bl	8007c70 <HAL_I2C_GetState>
 800584a:	2800      	cmp	r0, #0
 800584c:	d1f5      	bne.n	800583a <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800584e:	4d9c      	ldr	r5, [pc, #624]	@ (8005ac0 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005850:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005854:	2702      	movs	r7, #2
 8005856:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005858:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800585c:	a90d      	add	r1, sp, #52	@ 0x34
 800585e:	4899      	ldr	r0, [pc, #612]	@ (8005ac4 <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005860:	f043 0308 	orr.w	r3, r3, #8
 8005864:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005868:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	930a      	str	r3, [sp, #40]	@ 0x28
 8005872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005874:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005878:	f043 0308 	orr.w	r3, r3, #8
 800587c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005880:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005884:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800588c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800588e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005892:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005896:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800589a:	f001 fcdf 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800589e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80058a2:	a90d      	add	r1, sp, #52	@ 0x34
 80058a4:	4887      	ldr	r0, [pc, #540]	@ (8005ac4 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80058a6:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80058a8:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80058ac:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80058b0:	f001 fcd4 	bl	800725c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80058b4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80058b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058bc:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80058c0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80058c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80058ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80058cc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80058d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d4:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80058d8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80058dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e0:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80058e4:	f004 fc9a 	bl	800a21c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d06d      	beq.n	80059c8 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80058ec:	4b76      	ldr	r3, [pc, #472]	@ (8005ac8 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 80058ee:	4622      	mov	r2, r4
 80058f0:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80058f2:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80058f6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80058fa:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 8005ad0 <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80058fe:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005902:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005906:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800590a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800590c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005910:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005918:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 800591c:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800591e:	4b6b      	ldr	r3, [pc, #428]	@ (8005acc <BSP_I2C4_Init+0x2a4>)
 8005920:	681b      	ldr	r3, [r3, #0]
{
 8005922:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005924:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005928:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800592c:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005930:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005934:	d35b      	bcc.n	80059ee <BSP_I2C4_Init+0x1c6>
 8005936:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005938:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800593a:	9d00      	ldr	r5, [sp, #0]
 800593c:	42bd      	cmp	r5, r7
 800593e:	d850      	bhi.n	80059e2 <BSP_I2C4_Init+0x1ba>
 8005940:	42be      	cmp	r6, r7
 8005942:	d34e      	bcc.n	80059e2 <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 8005944:	4591      	cmp	r9, r2
 8005946:	d04c      	beq.n	80059e2 <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005948:	2514      	movs	r5, #20
 800594a:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 800594e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005950:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005952:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005956:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005958:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800595c:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005960:	d93c      	bls.n	80059dc <BSP_I2C4_Init+0x1b4>
 8005962:	4a5a      	ldr	r2, [pc, #360]	@ (8005acc <BSP_I2C4_Init+0x2a4>)
 8005964:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005966:	4b59      	ldr	r3, [pc, #356]	@ (8005acc <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005968:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 800596c:	4958      	ldr	r1, [pc, #352]	@ (8005ad0 <BSP_I2C4_Init+0x2a8>)
 800596e:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005974:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 8005984:	9309      	str	r3, [sp, #36]	@ 0x24
 8005986:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 800598a:	3301      	adds	r3, #1
 800598c:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800598e:	9b06      	ldr	r3, [sp, #24]
 8005990:	429f      	cmp	r7, r3
 8005992:	d138      	bne.n	8005a06 <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	2b7f      	cmp	r3, #127	@ 0x7f
 8005998:	d816      	bhi.n	80059c8 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800599a:	2114      	movs	r1, #20
 800599c:	9a00      	ldr	r2, [sp, #0]
 800599e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ad0 <BSP_I2C4_Init+0x2a8>)
 80059a0:	434a      	muls	r2, r1
 80059a2:	1899      	adds	r1, r3, r2
 80059a4:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80059a6:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80059a8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80059ac:	684b      	ldr	r3, [r1, #4]
 80059ae:	051b      	lsls	r3, r3, #20
 80059b0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80059b4:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80059b6:	688b      	ldr	r3, [r1, #8]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80059be:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80059c0:	68cb      	ldr	r3, [r1, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80059c6:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80059c8:	4621      	mov	r1, r4
 80059ca:	483b      	ldr	r0, [pc, #236]	@ (8005ab8 <BSP_I2C4_Init+0x290>)
 80059cc:	f7ff ff0c 	bl	80057e8 <MX_I2C4_Init>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f43f af32 	beq.w	800583a <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80059d6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80059da:	e72f      	b.n	800583c <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 80059dc:	4691      	mov	r9, r2
 80059de:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80059e2:	f10e 0e01 	add.w	lr, lr, #1
 80059e6:	440f      	add	r7, r1
 80059e8:	f1be 0f10 	cmp.w	lr, #16
 80059ec:	d1a5      	bne.n	800593a <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80059ee:	f1bc 0f10 	cmp.w	ip, #16
 80059f2:	4488      	add	r8, r1
 80059f4:	d198      	bne.n	8005928 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80059f6:	3201      	adds	r2, #1
 80059f8:	4401      	add	r1, r0
 80059fa:	2a10      	cmp	r2, #16
 80059fc:	d191      	bne.n	8005922 <BSP_I2C4_Init+0xfa>
 80059fe:	f1ba 0f00 	cmp.w	sl, #0
 8005a02:	d1ae      	bne.n	8005962 <BSP_I2C4_Init+0x13a>
 8005a04:	e7af      	b.n	8005966 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005a06:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005a08:	f04f 0c00 	mov.w	ip, #0
 8005a0c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005a0e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005a12:	441d      	add	r5, r3
 8005a14:	eb03 060b 	add.w	r6, r3, fp
 8005a18:	9503      	str	r5, [sp, #12]
 8005a1a:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 8005a1e:	9d02      	ldr	r5, [sp, #8]
 8005a20:	9608      	str	r6, [sp, #32]
 8005a22:	1aed      	subs	r5, r5, r3
 8005a24:	006d      	lsls	r5, r5, #1
 8005a26:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005a28:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005a2a:	f240 5214 	movw	r2, #1300	@ 0x514
 8005a2e:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005a32:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005a36:	4295      	cmp	r5, r2
 8005a38:	d930      	bls.n	8005a9c <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005a3a:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005a3e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005a42:	d22b      	bcs.n	8005a9c <BSP_I2C4_Init+0x274>
 8005a44:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005a46:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005a4a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a4e:	442e      	add	r6, r5
 8005a50:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005a54:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005a58:	f240 4212 	movw	r2, #1042	@ 0x412
 8005a5c:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005a60:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005a64:	4592      	cmp	sl, r2
 8005a66:	d812      	bhi.n	8005a8e <BSP_I2C4_Init+0x266>
 8005a68:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005a6c:	d30f      	bcc.n	8005a8e <BSP_I2C4_Init+0x266>
 8005a6e:	4540      	cmp	r0, r8
 8005a70:	d20d      	bcs.n	8005a8e <BSP_I2C4_Init+0x266>
              error = -error;
 8005a72:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005a76:	bf28      	it	cs
 8005a78:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	4592      	cmp	sl, r2
 8005a7e:	d206      	bcs.n	8005a8e <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005a80:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 8005a82:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 8005a86:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005a88:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8005a8a:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005a8c:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005a8e:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005a92:	4498      	add	r8, r3
 8005a94:	441e      	add	r6, r3
 8005a96:	eba9 0903 	sub.w	r9, r9, r3
 8005a9a:	d1db      	bne.n	8005a54 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005aa2:	441d      	add	r5, r3
 8005aa4:	eba2 0203 	sub.w	r2, r2, r3
 8005aa8:	9201      	str	r2, [sp, #4]
 8005aaa:	d1be      	bne.n	8005a2a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005aac:	3701      	adds	r7, #1
 8005aae:	3114      	adds	r1, #20
 8005ab0:	e76d      	b.n	800598e <BSP_I2C4_Init+0x166>
 8005ab2:	bf00      	nop
 8005ab4:	58001c00 	.word	0x58001c00
 8005ab8:	2400b27c 	.word	0x2400b27c
 8005abc:	2400bcd4 	.word	0x2400bcd4
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58020c00 	.word	0x58020c00
 8005ac8:	3b9aca00 	.word	0x3b9aca00
 8005acc:	2400b2d0 	.word	0x2400b2d0
 8005ad0:	2400b2d4 	.word	0x2400b2d4

08005ad4 <BSP_I2C4_WriteReg>:
{
 8005ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005ad6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005ada:	9200      	str	r2, [sp, #0]
 8005adc:	460a      	mov	r2, r1
 8005ade:	4601      	mov	r1, r0
 8005ae0:	4808      	ldr	r0, [pc, #32]	@ (8005b04 <BSP_I2C4_WriteReg+0x30>)
 8005ae2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f001 ff0a 	bl	8007900 <HAL_I2C_Mem_Write>
 8005aec:	b140      	cbz	r0, 8005b00 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005aee:	4805      	ldr	r0, [pc, #20]	@ (8005b04 <BSP_I2C4_WriteReg+0x30>)
 8005af0:	f002 f8c1 	bl	8007c76 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005af4:	2804      	cmp	r0, #4
 8005af6:	bf14      	ite	ne
 8005af8:	f06f 0003 	mvnne.w	r0, #3
 8005afc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005b00:	b004      	add	sp, #16
 8005b02:	bd10      	pop	{r4, pc}
 8005b04:	2400b27c 	.word	0x2400b27c

08005b08 <BSP_I2C4_ReadReg>:
{
 8005b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005b0a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005b0e:	9200      	str	r2, [sp, #0]
 8005b10:	460a      	mov	r2, r1
 8005b12:	4601      	mov	r1, r0
 8005b14:	4808      	ldr	r0, [pc, #32]	@ (8005b38 <BSP_I2C4_ReadReg+0x30>)
 8005b16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f001 ffca 	bl	8007ab4 <HAL_I2C_Mem_Read>
 8005b20:	b140      	cbz	r0, 8005b34 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005b22:	4805      	ldr	r0, [pc, #20]	@ (8005b38 <BSP_I2C4_ReadReg+0x30>)
 8005b24:	f002 f8a7 	bl	8007c76 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005b28:	2804      	cmp	r0, #4
 8005b2a:	bf14      	ite	ne
 8005b2c:	f06f 0003 	mvnne.w	r0, #3
 8005b30:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005b34:	b004      	add	sp, #16
 8005b36:	bd10      	pop	{r4, pc}
 8005b38:	2400b27c 	.word	0x2400b27c

08005b3c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005b3c:	f000 bd08 	b.w	8006550 <HAL_GetTick>

08005b40 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005b40:	4a09      	ldr	r2, [pc, #36]	@ (8005b68 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005b42:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8005b46:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005b48:	684a      	ldr	r2, [r1, #4]
 8005b4a:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005b50:	688a      	ldr	r2, [r1, #8]
 8005b52:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005b54:	680a      	ldr	r2, [r1, #0]
 8005b56:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005b58:	2200      	movs	r2, #0
 8005b5a:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005b5e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005b60:	68ca      	ldr	r2, [r1, #12]
 8005b62:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005b64:	f003 bc8a 	b.w	800947c <HAL_QSPI_Init>
 8005b68:	52005000 	.word	0x52005000

08005b6c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005b6c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005b6e:	b988      	cbnz	r0, 8005b94 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b70:	4c0a      	ldr	r4, [pc, #40]	@ (8005b9c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005b72:	480b      	ldr	r0, [pc, #44]	@ (8005ba0 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005b74:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b76:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005b78:	b94b      	cbnz	r3, 8005b8e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b7a:	f7ff f9ba 	bl	8004ef2 <MT25TL01G_EnableMemoryMappedModeSTR>
 8005b7e:	b110      	cbz	r0, 8005b86 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b80:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005b84:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005b86:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005b88:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005b8a:	7023      	strb	r3, [r4, #0]
 8005b8c:	e7fa      	b.n	8005b84 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b8e:	f7ff f966 	bl	8004e5e <MT25TL01G_EnableMemoryMappedModeDTR>
 8005b92:	e7f4      	b.n	8005b7e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005b94:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005b98:	e7f4      	b.n	8005b84 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005b9a:	bf00      	nop
 8005b9c:	2400bcd8 	.word	0x2400bcd8
 8005ba0:	240099c8 	.word	0x240099c8

08005ba4 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005baa:	bb30      	cbnz	r0, 8005bfa <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005bac:	4d17      	ldr	r5, [pc, #92]	@ (8005c0c <BSP_QSPI_ConfigFlash+0x68>)
 8005bae:	782b      	ldrb	r3, [r5, #0]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d025      	beq.n	8005c00 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005bb4:	fab2 f382 	clz	r3, r2
 8005bb8:	4e15      	ldr	r6, [pc, #84]	@ (8005c10 <BSP_QSPI_ConfigFlash+0x6c>)
 8005bba:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005bbc:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005bc2:	f003 fc5b 	bl	800947c <HAL_QSPI_Init>
 8005bc6:	b9f0      	cbnz	r0, 8005c06 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005bc8:	786b      	ldrb	r3, [r5, #1]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d10f      	bne.n	8005bee <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005bce:	2c03      	cmp	r4, #3
 8005bd0:	d105      	bne.n	8005bde <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005bd2:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005bd4:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005bd6:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005bd8:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005bda:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7ff f921 	bl	8004e26 <MT25TL01G_ExitQPIMode>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0f4      	beq.n	8005bd2 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005be8:	f06f 0004 	mvn.w	r0, #4
 8005bec:	e7f6      	b.n	8005bdc <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8005bee:	2c03      	cmp	r4, #3
 8005bf0:	d1ef      	bne.n	8005bd2 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff f8fb 	bl	8004dee <MT25TL01G_EnterQPIMode>
 8005bf8:	e7f4      	b.n	8005be4 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005bfa:	f06f 0001 	mvn.w	r0, #1
 8005bfe:	e7ed      	b.n	8005bdc <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005c00:	f06f 0019 	mvn.w	r0, #25
 8005c04:	e7ea      	b.n	8005bdc <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005c06:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005c0a:	e7e7      	b.n	8005bdc <BSP_QSPI_ConfigFlash+0x38>
 8005c0c:	2400bcd8 	.word	0x2400bcd8
 8005c10:	240099c8 	.word	0x240099c8

08005c14 <BSP_QSPI_Init>:
{
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f040 81ac 	bne.w	8005f7a <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005c22:	4d03      	ldr	r5, [pc, #12]	@ (8005c30 <BSP_QSPI_Init+0x1c>)
 8005c24:	782f      	ldrb	r7, [r5, #0]
 8005c26:	b12f      	cbz	r7, 8005c34 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005c28:	2000      	movs	r0, #0
}
 8005c2a:	b024      	add	sp, #144	@ 0x90
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	2400bcd8 	.word	0x2400bcd8
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005c34:	4bc3      	ldr	r3, [pc, #780]	@ (8005f44 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c36:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c3a:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005c3c:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005c3e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005c42:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005c46:	48c0      	ldr	r0, [pc, #768]	@ (8005f48 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005c48:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005c4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c50:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005c54:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c58:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005c5c:	9201      	str	r2, [sp, #4]
 8005c5e:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005c60:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c66:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005c68:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005c6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c74:	f042 0202 	orr.w	r2, r2, #2
 8005c78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c80:	f002 0202 	and.w	r2, r2, #2
 8005c84:	9202      	str	r2, [sp, #8]
 8005c86:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c98:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005c9c:	9203      	str	r2, [sp, #12]
 8005c9e:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ca4:	f042 0208 	orr.w	r2, r2, #8
 8005ca8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cb0:	f002 0208 	and.w	r2, r2, #8
 8005cb4:	9204      	str	r2, [sp, #16]
 8005cb6:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cbc:	f042 0220 	orr.w	r2, r2, #32
 8005cc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cc8:	f002 0220 	and.w	r2, r2, #32
 8005ccc:	9205      	str	r2, [sp, #20]
 8005cce:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cd4:	f042 0220 	orr.w	r2, r2, #32
 8005cd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ce0:	f002 0220 	and.w	r2, r2, #32
 8005ce4:	9206      	str	r2, [sp, #24]
 8005ce6:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cec:	f042 0220 	orr.w	r2, r2, #32
 8005cf0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cf8:	f002 0220 	and.w	r2, r2, #32
 8005cfc:	9207      	str	r2, [sp, #28]
 8005cfe:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d10:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005d14:	9208      	str	r2, [sp, #32]
 8005d16:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d28:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d40:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005d44:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005d48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d58:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005d5c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d7e:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005d80:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005d82:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005d86:	f001 fa69 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d8a:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005d8c:	a916      	add	r1, sp, #88	@ 0x58
 8005d8e:	486f      	ldr	r0, [pc, #444]	@ (8005f4c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d90:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005d92:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005d96:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005d9a:	f001 fa5f 	bl	800725c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005d9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005da2:	a916      	add	r1, sp, #88	@ 0x58
 8005da4:	486a      	ldr	r0, [pc, #424]	@ (8005f50 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005da6:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005da8:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005daa:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005dac:	f001 fa56 	bl	800725c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005db0:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005db2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005db6:	4867      	ldr	r0, [pc, #412]	@ (8005f54 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005db8:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005dbc:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005dbe:	f001 fa4d 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005dc2:	a916      	add	r1, sp, #88	@ 0x58
 8005dc4:	4864      	ldr	r0, [pc, #400]	@ (8005f58 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005dc6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005dca:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005dce:	f001 fa45 	bl	800725c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005dd2:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005dd4:	a916      	add	r1, sp, #88	@ 0x58
 8005dd6:	485f      	ldr	r0, [pc, #380]	@ (8005f54 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005dd8:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005dda:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005ddc:	f001 fa3e 	bl	800725c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005de0:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005de2:	a916      	add	r1, sp, #88	@ 0x58
 8005de4:	485c      	ldr	r0, [pc, #368]	@ (8005f58 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005de6:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005de8:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005dea:	f001 fa37 	bl	800725c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005dee:	a916      	add	r1, sp, #88	@ 0x58
 8005df0:	4856      	ldr	r0, [pc, #344]	@ (8005f4c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005df2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005df6:	f001 fa31 	bl	800725c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005dfa:	a916      	add	r1, sp, #88	@ 0x58
 8005dfc:	4856      	ldr	r0, [pc, #344]	@ (8005f58 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005dfe:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005e02:	f001 fa2b 	bl	800725c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005e06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005e0a:	a916      	add	r1, sp, #88	@ 0x58
 8005e0c:	484f      	ldr	r0, [pc, #316]	@ (8005f4c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005e0e:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005e10:	f001 fa24 	bl	800725c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005e14:	463a      	mov	r2, r7
 8005e16:	210f      	movs	r1, #15
 8005e18:	205c      	movs	r0, #92	@ 0x5c
 8005e1a:	f000 fbc9 	bl	80065b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005e1e:	205c      	movs	r0, #92	@ 0x5c
 8005e20:	f000 fbf8 	bl	8006614 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005e24:	a811      	add	r0, sp, #68	@ 0x44
 8005e26:	f7fe ff36 	bl	8004c96 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005e2a:	7863      	ldrb	r3, [r4, #1]
 8005e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8005f5c <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005e2e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005e32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e36:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005e3a:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005e3e:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005e42:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005e46:	a90d      	add	r1, sp, #52	@ 0x34
 8005e48:	4845      	ldr	r0, [pc, #276]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005e4a:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005e4c:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005e4e:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005e50:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005e52:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005e54:	f7ff fe74 	bl	8005b40 <MX_QSPI_Init>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 8091 	bne.w	8005f80 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005e5e:	2103      	movs	r1, #3
 8005e60:	483f      	ldr	r0, [pc, #252]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005e62:	f7ff f88c 	bl	8004f7e <MT25TL01G_ResetEnable>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f040 8084 	bne.w	8005f74 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005e6c:	2103      	movs	r1, #3
 8005e6e:	483c      	ldr	r0, [pc, #240]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005e70:	f7ff f8a6 	bl	8004fc0 <MT25TL01G_ResetMemory>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d17d      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005e78:	7869      	ldrb	r1, [r5, #1]
 8005e7a:	4839      	ldr	r0, [pc, #228]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005e7c:	f7fe ff1c 	bl	8004cb8 <MT25TL01G_AutoPollingMemReady>
 8005e80:	4601      	mov	r1, r0
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d176      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005e86:	4836      	ldr	r0, [pc, #216]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005e88:	f7ff f879 	bl	8004f7e <MT25TL01G_ResetEnable>
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d170      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005e92:	4833      	ldr	r0, [pc, #204]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005e94:	f7ff f894 	bl	8004fc0 <MT25TL01G_ResetMemory>
 8005e98:	4601      	mov	r1, r0
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d16a      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005e9e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005ea0:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ea2:	482f      	ldr	r0, [pc, #188]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005ea4:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ea6:	f7fe ff07 	bl	8004cb8 <MT25TL01G_AutoPollingMemReady>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d162      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005eae:	7869      	ldrb	r1, [r5, #1]
 8005eb0:	482b      	ldr	r0, [pc, #172]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005eb2:	f7fe ff70 	bl	8004d96 <MT25TL01G_Enter4BytesAddressMode>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d15c      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005eba:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005ebe:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005ec2:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ec8:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005eca:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ecc:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005ece:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005ed0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005ed4:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005ed6:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005ed8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005edc:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005ee0:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ee4:	481e      	ldr	r0, [pc, #120]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005ee6:	f003 fb15 	bl	8009514 <HAL_QSPI_Command>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d142      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef2:	f10d 0102 	add.w	r1, sp, #2
 8005ef6:	481a      	ldr	r0, [pc, #104]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005ef8:	f003 fbac 	bl	8009654 <HAL_QSPI_Receive>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d139      	bne.n	8005f74 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005f00:	7869      	ldrb	r1, [r5, #1]
 8005f02:	4817      	ldr	r0, [pc, #92]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005f04:	f7fe ff03 	bl	8004d0e <MT25TL01G_WriteEnable>
 8005f08:	bba0      	cbnz	r0, 8005f74 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005f0a:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f10:	a916      	add	r1, sp, #88	@ 0x58
 8005f12:	4813      	ldr	r0, [pc, #76]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005f14:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005f16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f1e:	051b      	lsls	r3, r3, #20
 8005f20:	0d1b      	lsrs	r3, r3, #20
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f2e:	f003 faf1 	bl	8009514 <HAL_QSPI_Command>
 8005f32:	b9f8      	cbnz	r0, 8005f74 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f38:	f10d 0102 	add.w	r1, sp, #2
 8005f3c:	4808      	ldr	r0, [pc, #32]	@ (8005f60 <BSP_QSPI_Init+0x34c>)
 8005f3e:	f003 fb2d 	bl	800959c <HAL_QSPI_Transmit>
 8005f42:	e00f      	b.n	8005f64 <BSP_QSPI_Init+0x350>
 8005f44:	58024400 	.word	0x58024400
 8005f48:	58020400 	.word	0x58020400
 8005f4c:	58021800 	.word	0x58021800
 8005f50:	58020c00 	.word	0x58020c00
 8005f54:	58021c00 	.word	0x58021c00
 8005f58:	58021400 	.word	0x58021400
 8005f5c:	08025fd0 	.word	0x08025fd0
 8005f60:	240099c8 	.word	0x240099c8
 8005f64:	b930      	cbnz	r0, 8005f74 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005f66:	7862      	ldrb	r2, [r4, #1]
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	f7ff fe1b 	bl	8005ba4 <BSP_QSPI_ConfigFlash>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f43f ae5a 	beq.w	8005c28 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f74:	f06f 0004 	mvn.w	r0, #4
 8005f78:	e657      	b.n	8005c2a <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005f7a:	f06f 0001 	mvn.w	r0, #1
 8005f7e:	e654      	b.n	8005c2a <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005f80:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005f84:	e651      	b.n	8005c2a <BSP_QSPI_Init+0x16>
 8005f86:	bf00      	nop

08005f88 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005f88:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b970      	cbnz	r0, 8005fac <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005f8e:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <BSP_SDRAM_DeInit+0x2c>)
 8005f90:	4809      	ldr	r0, [pc, #36]	@ (8005fb8 <BSP_SDRAM_DeInit+0x30>)
 8005f92:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005f94:	f004 ff9c 	bl	800aed0 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005f98:	207a      	movs	r0, #122	@ 0x7a
 8005f9a:	f000 fb49 	bl	8006630 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005f9e:	4807      	ldr	r0, [pc, #28]	@ (8005fbc <BSP_SDRAM_DeInit+0x34>)
 8005fa0:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <BSP_SDRAM_DeInit+0x38>)
 8005fa2:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005fa4:	f002 fff2 	bl	8008f8c <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005fa8:	4620      	mov	r0, r4
}
 8005faa:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005fac:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005fb0:	e7fb      	b.n	8005faa <BSP_SDRAM_DeInit+0x22>
 8005fb2:	bf00      	nop
 8005fb4:	52004140 	.word	0x52004140
 8005fb8:	2400bddc 	.word	0x2400bddc
 8005fbc:	2400bce4 	.word	0x2400bce4
 8005fc0:	52000040 	.word	0x52000040

08005fc4 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4915      	ldr	r1, [pc, #84]	@ (800601c <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005fc8:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <MX_SDRAM_Init+0x5c>)
{
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005fce:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005fd0:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005fd2:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	2220      	movs	r2, #32
 8005fda:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005fde:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005fe2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005fec:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005ff0:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005ff4:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005ff8:	2207      	movs	r2, #7
 8005ffa:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005ffc:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006000:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8006002:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006004:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8006008:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800600c:	f004 ff38 	bl	800ae80 <HAL_SDRAM_Init>
}
 8006010:	3800      	subs	r0, #0
 8006012:	bf18      	it	ne
 8006014:	2001      	movne	r0, #1
 8006016:	b008      	add	sp, #32
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	52004140 	.word	0x52004140
 8006020:	2400bddc 	.word	0x2400bddc

08006024 <BSP_SDRAM_Init>:
{
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006026:	4605      	mov	r5, r0
{
 8006028:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800602a:	2800      	cmp	r0, #0
 800602c:	f040 80dd 	bne.w	80061ea <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8006030:	4b71      	ldr	r3, [pc, #452]	@ (80061f8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006032:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006034:	a909      	add	r1, sp, #36	@ 0x24
 8006036:	4871      	ldr	r0, [pc, #452]	@ (80061fc <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006038:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800603c:	4c70      	ldr	r4, [pc, #448]	@ (8006200 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800603e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006042:	4e70      	ldr	r6, [pc, #448]	@ (8006204 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006044:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006048:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800604c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006050:	9201      	str	r2, [sp, #4]
 8006052:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006054:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006060:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006064:	f002 0201 	and.w	r2, r2, #1
 8006068:	9202      	str	r2, [sp, #8]
 800606a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800606c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006070:	f042 0208 	orr.w	r2, r2, #8
 8006074:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006078:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800607c:	f002 0208 	and.w	r2, r2, #8
 8006080:	9203      	str	r2, [sp, #12]
 8006082:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006084:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006088:	f042 0210 	orr.w	r2, r2, #16
 800608c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006094:	f002 0210 	and.w	r2, r2, #16
 8006098:	9204      	str	r2, [sp, #16]
 800609a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800609c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060a0:	f042 0220 	orr.w	r2, r2, #32
 80060a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80060a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060ac:	f002 0220 	and.w	r2, r2, #32
 80060b0:	9205      	str	r2, [sp, #20]
 80060b2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80060b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80060c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060c4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80060c8:	9206      	str	r2, [sp, #24]
 80060ca:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80060d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80060e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80060e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80060f0:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80060f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fa:	9308      	str	r3, [sp, #32]
 80060fc:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80060fe:	2301      	movs	r3, #1
 8006100:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006104:	230c      	movs	r3, #12
 8006106:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800610a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800610e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006110:	f001 f8a4 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006114:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006118:	a909      	add	r1, sp, #36	@ 0x24
 800611a:	483b      	ldr	r0, [pc, #236]	@ (8006208 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800611c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800611e:	f001 f89d 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006122:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006126:	a909      	add	r1, sp, #36	@ 0x24
 8006128:	4838      	ldr	r0, [pc, #224]	@ (800620c <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800612a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800612c:	f001 f896 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006130:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006134:	a909      	add	r1, sp, #36	@ 0x24
 8006136:	4836      	ldr	r0, [pc, #216]	@ (8006210 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006138:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800613a:	f001 f88f 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800613e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006142:	a909      	add	r1, sp, #36	@ 0x24
 8006144:	4833      	ldr	r0, [pc, #204]	@ (8006214 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006146:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006148:	f001 f888 	bl	800725c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800614c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006150:	a909      	add	r1, sp, #36	@ 0x24
 8006152:	4831      	ldr	r0, [pc, #196]	@ (8006218 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006154:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006156:	f001 f881 	bl	800725c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800615a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800615e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006162:	f240 2002 	movw	r0, #514	@ 0x202
 8006166:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800616a:	6334      	str	r4, [r6, #48]	@ 0x30
 800616c:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800616e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006172:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006176:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006178:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800617a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800617c:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800617e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006182:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006186:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800618a:	4b24      	ldr	r3, [pc, #144]	@ (800621c <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800618c:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800618e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006190:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006194:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006198:	f002 fef8 	bl	8008f8c <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800619c:	4620      	mov	r0, r4
 800619e:	f002 fe86 	bl	8008eae <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80061a2:	462a      	mov	r2, r5
 80061a4:	210f      	movs	r1, #15
 80061a6:	207a      	movs	r0, #122	@ 0x7a
 80061a8:	f000 fa02 	bl	80065b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80061ac:	207a      	movs	r0, #122	@ 0x7a
 80061ae:	f000 fa31 	bl	8006614 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7ff ff06 	bl	8005fc4 <MX_SDRAM_Init>
 80061b8:	b9d0      	cbnz	r0, 80061f0 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80061ba:	4919      	ldr	r1, [pc, #100]	@ (8006220 <BSP_SDRAM_Init+0x1fc>)
 80061bc:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80061be:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80061c2:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80061c6:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80061c8:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80061cc:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80061ce:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80061d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80061d6:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80061d8:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80061da:	f7fe fd2f 	bl	8004c3c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80061de:	2800      	cmp	r0, #0
 80061e0:	bf18      	it	ne
 80061e2:	f06f 0004 	mvnne.w	r0, #4
}
 80061e6:	b00f      	add	sp, #60	@ 0x3c
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80061ea:	f06f 0001 	mvn.w	r0, #1
 80061ee:	e7fa      	b.n	80061e6 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80061f4:	e7f7      	b.n	80061e6 <BSP_SDRAM_Init+0x1c2>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	58020c00 	.word	0x58020c00
 8006200:	2400bd50 	.word	0x2400bd50
 8006204:	2400bddc 	.word	0x2400bddc
 8006208:	58021000 	.word	0x58021000
 800620c:	58021400 	.word	0x58021400
 8006210:	58021800 	.word	0x58021800
 8006214:	58021c00 	.word	0x58021c00
 8006218:	58022000 	.word	0x58022000
 800621c:	52000040 	.word	0x52000040
 8006220:	2400bdbc 	.word	0x2400bdbc

08006224 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	460c      	mov	r4, r1
 800622a:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800622c:	4606      	mov	r6, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	d15c      	bne.n	80062ec <BSP_TS_Init+0xc8>
 8006232:	680b      	ldr	r3, [r1, #0]
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800623a:	d257      	bcs.n	80062ec <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800623c:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800623e:	1e51      	subs	r1, r2, #1
 8006240:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006244:	d252      	bcs.n	80062ec <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006246:	4293      	cmp	r3, r2
 8006248:	bf28      	it	cs
 800624a:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800624c:	68e2      	ldr	r2, [r4, #12]
 800624e:	429a      	cmp	r2, r3
 8006250:	d84c      	bhi.n	80062ec <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006252:	2370      	movs	r3, #112	@ 0x70
 8006254:	2254      	movs	r2, #84	@ 0x54
 8006256:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800625a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006330 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800625e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8006262:	4b2e      	ldr	r3, [pc, #184]	@ (800631c <BSP_TS_Init+0xf8>)
 8006264:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006266:	4b2e      	ldr	r3, [pc, #184]	@ (8006320 <BSP_TS_Init+0xfc>)
 8006268:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800626a:	4b2e      	ldr	r3, [pc, #184]	@ (8006324 <BSP_TS_Init+0x100>)
 800626c:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800626e:	4b2e      	ldr	r3, [pc, #184]	@ (8006328 <BSP_TS_Init+0x104>)
 8006270:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8006272:	4b2e      	ldr	r3, [pc, #184]	@ (800632c <BSP_TS_Init+0x108>)
 8006274:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006276:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800627a:	a906      	add	r1, sp, #24
 800627c:	482c      	ldr	r0, [pc, #176]	@ (8006330 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800627e:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006282:	f7fe fbe1 	bl	8004a48 <FT6X06_RegisterBusIO>
 8006286:	b9c0      	cbnz	r0, 80062ba <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006288:	4669      	mov	r1, sp
 800628a:	4829      	ldr	r0, [pc, #164]	@ (8006330 <BSP_TS_Init+0x10c>)
 800628c:	f7fe fb26 	bl	80048dc <FT6X06_ReadID>
 8006290:	b998      	cbnz	r0, 80062ba <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	2b11      	cmp	r3, #17
 8006296:	d110      	bne.n	80062ba <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006298:	a903      	add	r1, sp, #12
 800629a:	4825      	ldr	r0, [pc, #148]	@ (8006330 <BSP_TS_Init+0x10c>)
 800629c:	f7fe fad2 	bl	8004844 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80062a0:	4f24      	ldr	r7, [pc, #144]	@ (8006334 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80062a2:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <BSP_TS_Init+0x114>)
 80062a4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006340 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80062a8:	4821      	ldr	r0, [pc, #132]	@ (8006330 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80062aa:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80062ae:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4798      	blx	r3
 80062b6:	4605      	mov	r5, r0
 80062b8:	b1d8      	cbz	r0, 80062f2 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80062ba:	b116      	cbz	r6, 80062c2 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80062bc:	f04f 35ff 	mov.w	r5, #4294967295
 80062c0:	e010      	b.n	80062e4 <BSP_TS_Init+0xc0>
 80062c2:	2601      	movs	r6, #1
 80062c4:	e7d7      	b.n	8006276 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80062c6:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80062c8:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80062ca:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80062cc:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80062ce:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80062d0:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80062d6:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80062d8:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80062da:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80062dc:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80062de:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80062e0:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 80062e4:	4628      	mov	r0, r5
 80062e6:	b00c      	add	sp, #48	@ 0x30
 80062e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80062ec:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80062f0:	e7f8      	b.n	80062e4 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80062f2:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80062f4:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80062f6:	4e11      	ldr	r6, [pc, #68]	@ (800633c <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80062f8:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80062fa:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006304:	68e3      	ldr	r3, [r4, #12]
 8006306:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006308:	f8d8 3000 	ldr.w	r3, [r8]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4798      	blx	r3
 8006310:	2800      	cmp	r0, #0
 8006312:	dad8      	bge.n	80062c6 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006314:	f06f 0504 	mvn.w	r5, #4
 8006318:	e7e4      	b.n	80062e4 <BSP_TS_Init+0xc0>
 800631a:	bf00      	nop
 800631c:	08005829 	.word	0x08005829
 8006320:	08005795 	.word	0x08005795
 8006324:	08005b09 	.word	0x08005b09
 8006328:	08005ad5 	.word	0x08005ad5
 800632c:	08005b3d 	.word	0x08005b3d
 8006330:	2400be10 	.word	0x2400be10
 8006334:	2400be38 	.word	0x2400be38
 8006338:	24000038 	.word	0x24000038
 800633c:	2400be3c 	.word	0x2400be3c
 8006340:	2400be64 	.word	0x2400be64

08006344 <BSP_TS_GetState>:
{
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	460c      	mov	r4, r1
 8006348:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800634a:	2800      	cmp	r0, #0
 800634c:	d14d      	bne.n	80063ea <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800634e:	4b28      	ldr	r3, [pc, #160]	@ (80063f0 <BSP_TS_GetState+0xac>)
 8006350:	a901      	add	r1, sp, #4
 8006352:	4a28      	ldr	r2, [pc, #160]	@ (80063f4 <BSP_TS_GetState+0xb0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6810      	ldr	r0, [r2, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4798      	blx	r3
 800635c:	2800      	cmp	r0, #0
 800635e:	db41      	blt.n	80063e4 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006360:	4925      	ldr	r1, [pc, #148]	@ (80063f8 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8006362:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006364:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006366:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006368:	2e00      	cmp	r6, #0
 800636a:	d037      	beq.n	80063dc <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800636c:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800636e:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006372:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8006376:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800637a:	bf02      	ittt	eq
 800637c:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 800637e:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8006380:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006382:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006386:	bf1c      	itt	ne
 8006388:	f10e 3cff 	addne.w	ip, lr, #4294967295
 800638c:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006390:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006394:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006396:	bf44      	itt	mi
 8006398:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 800639c:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800639e:	680f      	ldr	r7, [r1, #0]
 80063a0:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80063a2:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80063a4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80063a6:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80063a8:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80063aa:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80063ae:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80063b2:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80063b4:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80063b6:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80063b8:	bf8c      	ite	hi
 80063ba:	eba2 0c05 	subhi.w	ip, r2, r5
 80063be:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80063c2:	4283      	cmp	r3, r0
 80063c4:	bf8c      	ite	hi
 80063c6:	1a1e      	subhi	r6, r3, r0
 80063c8:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80063ca:	4567      	cmp	r7, ip
 80063cc:	d301      	bcc.n	80063d2 <BSP_TS_GetState+0x8e>
 80063ce:	42b7      	cmp	r7, r6
 80063d0:	d205      	bcs.n	80063de <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80063d2:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80063d4:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80063d6:	2000      	movs	r0, #0
}
 80063d8:	b005      	add	sp, #20
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 80063dc:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80063de:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80063e2:	e7f8      	b.n	80063d6 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063e4:	f06f 0004 	mvn.w	r0, #4
 80063e8:	e7f6      	b.n	80063d8 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80063ea:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80063ee:	e7f3      	b.n	80063d8 <BSP_TS_GetState+0x94>
 80063f0:	2400be64 	.word	0x2400be64
 80063f4:	2400be38 	.word	0x2400be38
 80063f8:	2400be3c 	.word	0x2400be3c

080063fc <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80063fc:	4b2d      	ldr	r3, [pc, #180]	@ (80064b4 <SystemInit+0xb8>)
 80063fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006402:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	f042 0210 	orr.w	r2, r2, #16
 8006410:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006412:	4a29      	ldr	r2, [pc, #164]	@ (80064b8 <SystemInit+0xbc>)
 8006414:	6813      	ldr	r3, [r2, #0]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	2b06      	cmp	r3, #6
 800641c:	d805      	bhi.n	800642a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	f023 030f 	bic.w	r3, r3, #15
 8006424:	f043 0307 	orr.w	r3, r3, #7
 8006428:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <SystemInit+0xc0>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006434:	2200      	movs	r2, #0
 8006436:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006438:	4a21      	ldr	r2, [pc, #132]	@ (80064c0 <SystemInit+0xc4>)
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800643e:	491e      	ldr	r1, [pc, #120]	@ (80064b8 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006440:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006442:	680a      	ldr	r2, [r1, #0]
 8006444:	0712      	lsls	r2, r2, #28
 8006446:	d505      	bpl.n	8006454 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006448:	680a      	ldr	r2, [r1, #0]
 800644a:	f022 020f 	bic.w	r2, r2, #15
 800644e:	f042 0207 	orr.w	r2, r2, #7
 8006452:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006454:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006456:	491b      	ldr	r1, [pc, #108]	@ (80064c4 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006458:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800645a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800645c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800645e:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006460:	4919      	ldr	r1, [pc, #100]	@ (80064c8 <SystemInit+0xcc>)
 8006462:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006464:	4919      	ldr	r1, [pc, #100]	@ (80064cc <SystemInit+0xd0>)
 8006466:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800646a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800646c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800646e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006478:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800647a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800647c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006480:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006488:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800648c:	4b10      	ldr	r3, [pc, #64]	@ (80064d0 <SystemInit+0xd4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f36f 030f 	bfc	r3, #0, #16
 8006494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006498:	d203      	bcs.n	80064a2 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800649a:	4b0e      	ldr	r3, [pc, #56]	@ (80064d4 <SystemInit+0xd8>)
 800649c:	2201      	movs	r2, #1
 800649e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <SystemInit+0xdc>)
 80064a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80064a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80064aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80064ae:	4b01      	ldr	r3, [pc, #4]	@ (80064b4 <SystemInit+0xb8>)
 80064b0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80064b2:	4770      	bx	lr
 80064b4:	e000ed00 	.word	0xe000ed00
 80064b8:	52002000 	.word	0x52002000
 80064bc:	58024400 	.word	0x58024400
 80064c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80064c4:	02020200 	.word	0x02020200
 80064c8:	01ff0000 	.word	0x01ff0000
 80064cc:	01010280 	.word	0x01010280
 80064d0:	5c001000 	.word	0x5c001000
 80064d4:	51008000 	.word	0x51008000
 80064d8:	52004000 	.word	0x52004000

080064dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064dc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064de:	2003      	movs	r0, #3
 80064e0:	f000 f854 	bl	800658c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064e4:	f003 fc9e 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 80064e8:	490f      	ldr	r1, [pc, #60]	@ (8006528 <HAL_Init+0x4c>)
 80064ea:	4a10      	ldr	r2, [pc, #64]	@ (800652c <HAL_Init+0x50>)
 80064ec:	698b      	ldr	r3, [r1, #24]
 80064ee:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80064f2:	5cd3      	ldrb	r3, [r2, r3]
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064fa:	698b      	ldr	r3, [r1, #24]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	5cd3      	ldrb	r3, [r2, r3]
 8006502:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <HAL_Init+0x54>)
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa20 f303 	lsr.w	r3, r0, r3
 800650c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800650e:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <HAL_Init+0x58>)
 8006510:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006512:	2000      	movs	r0, #0
 8006514:	f7fb f828 	bl	8001568 <HAL_InitTick>
 8006518:	4604      	mov	r4, r0
 800651a:	b918      	cbnz	r0, 8006524 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800651c:	f7fa fd14 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006520:	4620      	mov	r0, r4
 8006522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006524:	2401      	movs	r4, #1
 8006526:	e7fb      	b.n	8006520 <HAL_Init+0x44>
 8006528:	58024400 	.word	0x58024400
 800652c:	08025fd8 	.word	0x08025fd8
 8006530:	24000068 	.word	0x24000068
 8006534:	2400006c 	.word	0x2400006c

08006538 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006538:	4a03      	ldr	r2, [pc, #12]	@ (8006548 <HAL_IncTick+0x10>)
 800653a:	4b04      	ldr	r3, [pc, #16]	@ (800654c <HAL_IncTick+0x14>)
 800653c:	6811      	ldr	r1, [r2, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	440b      	add	r3, r1
 8006542:	6013      	str	r3, [r2, #0]
}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2400be68 	.word	0x2400be68
 800654c:	24000070 	.word	0x24000070

08006550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006550:	4b01      	ldr	r3, [pc, #4]	@ (8006558 <HAL_GetTick+0x8>)
 8006552:	6818      	ldr	r0, [r3, #0]
}
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	2400be68 	.word	0x2400be68

0800655c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006560:	f7ff fff6 	bl	8006550 <HAL_GetTick>
 8006564:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006566:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006568:	bf1e      	ittt	ne
 800656a:	4b04      	ldrne	r3, [pc, #16]	@ (800657c <HAL_Delay+0x20>)
 800656c:	781b      	ldrbne	r3, [r3, #0]
 800656e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006570:	f7ff ffee 	bl	8006550 <HAL_GetTick>
 8006574:	1b43      	subs	r3, r0, r5
 8006576:	42a3      	cmp	r3, r4
 8006578:	d3fa      	bcc.n	8006570 <HAL_Delay+0x14>
  {
  }
}
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	24000070 	.word	0x24000070

08006580 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006580:	4b01      	ldr	r3, [pc, #4]	@ (8006588 <HAL_GetREVID+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
}
 8006584:	0c00      	lsrs	r0, r0, #16
 8006586:	4770      	bx	lr
 8006588:	5c001000 	.word	0x5c001000

0800658c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800658c:	4907      	ldr	r1, [pc, #28]	@ (80065ac <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800658e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006590:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006592:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006596:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800659a:	0412      	lsls	r2, r2, #16
 800659c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800659e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80065a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80065aa:	4770      	bx	lr
 80065ac:	e000ed00 	.word	0xe000ed00

080065b0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065b0:	4b16      	ldr	r3, [pc, #88]	@ (800660c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065b2:	b530      	push	{r4, r5, lr}
 80065b4:	68dc      	ldr	r4, [r3, #12]
 80065b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	bf28      	it	cs
 80065c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065c6:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065cc:	bf8c      	ite	hi
 80065ce:	3c03      	subhi	r4, #3
 80065d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80065d6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065dc:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065e0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e4:	fa03 f304 	lsl.w	r3, r3, r4
 80065e8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80065f0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80065f2:	db06      	blt.n	8006602 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80065f8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80065fc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006600:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006602:	f000 000f 	and.w	r0, r0, #15
 8006606:	4a02      	ldr	r2, [pc, #8]	@ (8006610 <HAL_NVIC_SetPriority+0x60>)
 8006608:	5413      	strb	r3, [r2, r0]
 800660a:	e7f9      	b.n	8006600 <HAL_NVIC_SetPriority+0x50>
 800660c:	e000ed00 	.word	0xe000ed00
 8006610:	e000ed14 	.word	0xe000ed14

08006614 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006614:	2800      	cmp	r0, #0
 8006616:	db07      	blt.n	8006628 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006618:	2301      	movs	r3, #1
 800661a:	0941      	lsrs	r1, r0, #5
 800661c:	f000 001f 	and.w	r0, r0, #31
 8006620:	4a02      	ldr	r2, [pc, #8]	@ (800662c <HAL_NVIC_EnableIRQ+0x18>)
 8006622:	4083      	lsls	r3, r0
 8006624:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	e000e100 	.word	0xe000e100

08006630 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006630:	2800      	cmp	r0, #0
 8006632:	db0c      	blt.n	800664e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006634:	0943      	lsrs	r3, r0, #5
 8006636:	2201      	movs	r2, #1
 8006638:	f000 001f 	and.w	r0, r0, #31
 800663c:	4904      	ldr	r1, [pc, #16]	@ (8006650 <HAL_NVIC_DisableIRQ+0x20>)
 800663e:	3320      	adds	r3, #32
 8006640:	4082      	lsls	r2, r0
 8006642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800664a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800664e:	4770      	bx	lr
 8006650:	e000e100 	.word	0xe000e100

08006654 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006654:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006658:	4b04      	ldr	r3, [pc, #16]	@ (800666c <HAL_MPU_Disable+0x18>)
 800665a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800665c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_MPU_Enable+0x1c>)
 8006672:	f040 0001 	orr.w	r0, r0, #1
 8006676:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800667a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800667c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006682:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006686:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800668a:	4770      	bx	lr
 800668c:	e000ed00 	.word	0xe000ed00

08006690 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006690:	7843      	ldrb	r3, [r0, #1]
 8006692:	4a14      	ldr	r2, [pc, #80]	@ (80066e4 <HAL_MPU_ConfigRegion+0x54>)
 8006694:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006698:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80066a4:	6843      	ldr	r3, [r0, #4]
 80066a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80066aa:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066ac:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80066ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80066b4:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066b6:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80066b8:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066ba:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80066be:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80066c4:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066c6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80066ca:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80066d0:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80066d6:	7a01      	ldrb	r1, [r0, #8]
 80066d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066dc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	e000ed00 	.word	0xe000ed00

080066e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80066e8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80066ea:	4604      	mov	r4, r0
 80066ec:	b908      	cbnz	r0, 80066f2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80066ee:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80066f0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80066f2:	7f43      	ldrb	r3, [r0, #29]
 80066f4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80066f8:	b913      	cbnz	r3, 8006700 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80066fa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80066fc:	f7fa fc3c 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006704:	7923      	ldrb	r3, [r4, #4]
 8006706:	b9e3      	cbnz	r3, 8006742 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	4a13      	ldr	r2, [pc, #76]	@ (8006758 <HAL_CRC_Init+0x70>)
 800670c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	f022 0218 	bic.w	r2, r2, #24
 8006714:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006716:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006718:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800671a:	b9d2      	cbnz	r2, 8006752 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006720:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006722:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	6961      	ldr	r1, [r4, #20]
 8006728:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800672c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800672e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006730:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800673c:	2301      	movs	r3, #1
 800673e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006740:	e7d6      	b.n	80066f0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006742:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f808 	bl	800675c <HAL_CRCEx_Polynomial_Set>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0e2      	beq.n	8006716 <HAL_CRC_Init+0x2e>
 8006750:	e7cd      	b.n	80066ee <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006752:	6922      	ldr	r2, [r4, #16]
 8006754:	e7e4      	b.n	8006720 <HAL_CRC_Init+0x38>
 8006756:	bf00      	nop
 8006758:	04c11db7 	.word	0x04c11db7

0800675c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800675c:	07cb      	lsls	r3, r1, #31
{
 800675e:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006760:	d50d      	bpl.n	800677e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006762:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006764:	3b01      	subs	r3, #1
 8006766:	d31d      	bcc.n	80067a4 <HAL_CRCEx_Polynomial_Set+0x48>
 8006768:	fa21 f403 	lsr.w	r4, r1, r3
 800676c:	07e4      	lsls	r4, r4, #31
 800676e:	d5f9      	bpl.n	8006764 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006770:	2a10      	cmp	r2, #16
 8006772:	d013      	beq.n	800679c <HAL_CRCEx_Polynomial_Set+0x40>
 8006774:	2a10      	cmp	r2, #16
 8006776:	d804      	bhi.n	8006782 <HAL_CRCEx_Polynomial_Set+0x26>
 8006778:	b13a      	cbz	r2, 800678a <HAL_CRCEx_Polynomial_Set+0x2e>
 800677a:	2a08      	cmp	r2, #8
 800677c:	d010      	beq.n	80067a0 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 800677e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006780:	e00b      	b.n	800679a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8006782:	2a18      	cmp	r2, #24
 8006784:	d1fb      	bne.n	800677e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8006786:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8006788:	d8f9      	bhi.n	800677e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800678e:	6883      	ldr	r3, [r0, #8]
 8006790:	f023 0318 	bic.w	r3, r3, #24
 8006794:	4313      	orrs	r3, r2
 8006796:	6083      	str	r3, [r0, #8]
 8006798:	2000      	movs	r0, #0
}
 800679a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800679c:	2b07      	cmp	r3, #7
 800679e:	e7f3      	b.n	8006788 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	e7f1      	b.n	8006788 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80067a4:	2a10      	cmp	r2, #16
 80067a6:	d1e5      	bne.n	8006774 <HAL_CRCEx_Polynomial_Set+0x18>
 80067a8:	e7e9      	b.n	800677e <HAL_CRCEx_Polynomial_Set+0x22>

080067aa <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80067aa:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80067ac:	4604      	mov	r4, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d036      	beq.n	8006820 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80067b2:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80067b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80067ba:	b91b      	cbnz	r3, 80067c4 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80067bc:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80067c0:	f7fa fbf2 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067c4:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80067c6:	69e0      	ldr	r0, [r4, #28]
 80067c8:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067ca:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80067d2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80067da:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80067e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80067e4:	68a2      	ldr	r2, [r4, #8]
 80067e6:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80067ea:	4302      	orrs	r2, r0
 80067ec:	f021 0101 	bic.w	r1, r1, #1
 80067f0:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80067f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80067f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f8:	f36f 020f 	bfc	r2, #0, #16
 80067fc:	430a      	orrs	r2, r1
 80067fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006800:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006802:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006806:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800680a:	0552      	lsls	r2, r2, #21
 800680c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006810:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006812:	430a      	orrs	r2, r1
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006816:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006818:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800681a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800681e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006820:	2001      	movs	r0, #1
 8006822:	e7fc      	b.n	800681e <HAL_DMA2D_Init+0x74>

08006824 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006824:	4770      	bx	lr

08006826 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8006826:	4770      	bx	lr

08006828 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006828:	6803      	ldr	r3, [r0, #0]
{
 800682a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800682c:	685e      	ldr	r6, [r3, #4]
{
 800682e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006830:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006832:	07f2      	lsls	r2, r6, #31
 8006834:	d514      	bpl.n	8006860 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006836:	05e9      	lsls	r1, r5, #23
 8006838:	d512      	bpl.n	8006860 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006840:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006842:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800684a:	2201      	movs	r2, #1
 800684c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800684e:	2304      	movs	r3, #4
 8006850:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006854:	2300      	movs	r3, #0
 8006856:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800685a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800685c:	b103      	cbz	r3, 8006860 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800685e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006860:	06b2      	lsls	r2, r6, #26
 8006862:	d516      	bpl.n	8006892 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006864:	04ab      	lsls	r3, r5, #18
 8006866:	d514      	bpl.n	8006892 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006870:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006872:	2220      	movs	r2, #32
 8006874:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800687e:	2304      	movs	r3, #4
 8006880:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006884:	2300      	movs	r3, #0
 8006886:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800688a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800688c:	b10b      	cbz	r3, 8006892 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800688e:	4620      	mov	r0, r4
 8006890:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006892:	0730      	lsls	r0, r6, #28
 8006894:	d516      	bpl.n	80068c4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006896:	0529      	lsls	r1, r5, #20
 8006898:	d514      	bpl.n	80068c4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80068a4:	2208      	movs	r2, #8
 80068a6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80068a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80068b0:	2304      	movs	r3, #4
 80068b2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80068b6:	2300      	movs	r3, #0
 80068b8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80068bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80068be:	b10b      	cbz	r3, 80068c4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80068c0:	4620      	mov	r0, r4
 80068c2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80068c4:	0772      	lsls	r2, r6, #29
 80068c6:	d50b      	bpl.n	80068e0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80068c8:	056b      	lsls	r3, r5, #21
 80068ca:	d509      	bpl.n	80068e0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80068cc:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80068ce:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80068d8:	2204      	movs	r2, #4
 80068da:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80068dc:	f7ff ffa2 	bl	8006824 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80068e0:	07b0      	lsls	r0, r6, #30
 80068e2:	d514      	bpl.n	800690e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80068e4:	05a9      	lsls	r1, r5, #22
 80068e6:	d512      	bpl.n	800690e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80068f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80068f2:	2202      	movs	r2, #2
 80068f4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80068f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068f8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006900:	2300      	movs	r3, #0
 8006902:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8006906:	6a23      	ldr	r3, [r4, #32]
 8006908:	b10b      	cbz	r3, 800690e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800690a:	4620      	mov	r0, r4
 800690c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800690e:	06f2      	lsls	r2, r6, #27
 8006910:	d513      	bpl.n	800693a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006912:	04eb      	lsls	r3, r5, #19
 8006914:	d511      	bpl.n	800693a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006916:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006918:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006920:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006922:	2210      	movs	r2, #16
 8006924:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006928:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800692a:	2301      	movs	r3, #1
 800692c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006930:	2300      	movs	r3, #0
 8006932:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006936:	f7ff ff76 	bl	8006826 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	4607      	mov	r7, r0
 8006942:	460d      	mov	r5, r1
 8006944:	4614      	mov	r4, r2
 8006946:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006948:	f7ff fe02 	bl	8006550 <HAL_GetTick>
 800694c:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006952:	07d2      	lsls	r2, r2, #31
 8006954:	d50a      	bpl.n	800696c <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006956:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800695a:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800695c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800695e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006962:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006966:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800696c:	f7ff fdf0 	bl	8006550 <HAL_GetTick>
 8006970:	eba0 0008 	sub.w	r0, r0, r8
 8006974:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006978:	d9e9      	bls.n	800694e <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800697a:	2003      	movs	r0, #3
 800697c:	e7f4      	b.n	8006968 <DSI_ShortWrite.constprop.0+0x2c>

0800697e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800697e:	7c03      	ldrb	r3, [r0, #16]
{
 8006980:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006982:	2b01      	cmp	r3, #1
 8006984:	d05b      	beq.n	8006a3e <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006986:	6803      	ldr	r3, [r0, #0]
 8006988:	2000      	movs	r0, #0
 800698a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800698e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006992:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006994:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006996:	d507      	bpl.n	80069a8 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006998:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800699c:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80069a0:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80069a4:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80069a8:	0788      	lsls	r0, r1, #30
 80069aa:	d505      	bpl.n	80069b8 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80069ac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80069b0:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80069b4:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80069b8:	0748      	lsls	r0, r1, #29
 80069ba:	d505      	bpl.n	80069c8 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80069bc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80069c0:	f040 0001 	orr.w	r0, r0, #1
 80069c4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80069c8:	0708      	lsls	r0, r1, #28
 80069ca:	d505      	bpl.n	80069d8 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80069cc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80069d0:	f040 0002 	orr.w	r0, r0, #2
 80069d4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80069d8:	06c8      	lsls	r0, r1, #27
 80069da:	d505      	bpl.n	80069e8 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80069dc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80069e0:	f040 000c 	orr.w	r0, r0, #12
 80069e4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80069e8:	0688      	lsls	r0, r1, #26
 80069ea:	d505      	bpl.n	80069f8 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80069ec:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80069f0:	f040 0010 	orr.w	r0, r0, #16
 80069f4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80069f8:	0648      	lsls	r0, r1, #25
 80069fa:	d505      	bpl.n	8006a08 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80069fc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006a00:	f040 0020 	orr.w	r0, r0, #32
 8006a04:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006a08:	0608      	lsls	r0, r1, #24
 8006a0a:	d505      	bpl.n	8006a18 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006a0c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006a10:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006a14:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006a18:	05c8      	lsls	r0, r1, #23
 8006a1a:	d505      	bpl.n	8006a28 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006a1c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006a20:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006a24:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006a28:	0589      	lsls	r1, r1, #22
 8006a2a:	d505      	bpl.n	8006a38 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006a2c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006a30:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006a34:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006a38:	2000      	movs	r0, #0
 8006a3a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006a3c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a3e:	2002      	movs	r0, #2
}
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_DSI_Init>:
{
 8006a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a46:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f000 80ea 	beq.w	8006c24 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006a50:	7c43      	ldrb	r3, [r0, #17]
 8006a52:	b90b      	cbnz	r3, 8006a58 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006a54:	f7fa facc 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006a66:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006a6a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006a6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006a72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006a7a:	f7ff fd69 	bl	8006550 <HAL_GetTick>
 8006a7e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8006a86:	04d9      	lsls	r1, r3, #19
 8006a88:	d56e      	bpl.n	8006b68 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006a8a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006a8e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006a92:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8006a96:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006a9a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006a9e:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006aa2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006aa4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006aa8:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006aaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006aae:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8006ac6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006ad2:	f7ff fd43 	bl	800655c <HAL_Delay>
  tickstart = HAL_GetTick();
 8006ad6:	f7ff fd3b 	bl	8006550 <HAL_GetTick>
 8006ada:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006ae2:	05d2      	lsls	r2, r2, #23
 8006ae4:	d548      	bpl.n	8006b78 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8006ae6:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006ae8:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8006aea:	9202      	str	r2, [sp, #8]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	f002 0201 	and.w	r2, r2, #1
 8006afa:	9202      	str	r2, [sp, #8]
 8006afc:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006b04:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006b0a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006b0c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8006b0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006b12:	f042 0202 	orr.w	r2, r2, #2
 8006b16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8006b1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006b1e:	f042 0204 	orr.w	r2, r2, #4
 8006b22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006b26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b2a:	f022 0203 	bic.w	r2, r2, #3
 8006b2e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006b32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b36:	430a      	orrs	r2, r1
 8006b38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8006b3c:	f7ff fd08 	bl	8006550 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006b40:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006b42:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006b44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b48:	079b      	lsls	r3, r3, #30
 8006b4a:	d025      	beq.n	8006b98 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b52:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8006b56:	2b94      	cmp	r3, #148	@ 0x94
 8006b58:	d025      	beq.n	8006ba6 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b5a:	f7ff fcf9 	bl	8006550 <HAL_GetTick>
 8006b5e:	1b80      	subs	r0, r0, r6
 8006b60:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006b64:	d9f2      	bls.n	8006b4c <HAL_DSI_Init+0x108>
 8006b66:	e014      	b.n	8006b92 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b68:	f7ff fcf2 	bl	8006550 <HAL_GetTick>
 8006b6c:	1b80      	subs	r0, r0, r6
 8006b6e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006b72:	d985      	bls.n	8006a80 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006b74:	2003      	movs	r0, #3
 8006b76:	e053      	b.n	8006c20 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b78:	f7ff fcea 	bl	8006550 <HAL_GetTick>
 8006b7c:	1b80      	subs	r0, r0, r6
 8006b7e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006b82:	d9ab      	bls.n	8006adc <HAL_DSI_Init+0x98>
 8006b84:	e7f6      	b.n	8006b74 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b86:	f7ff fce3 	bl	8006550 <HAL_GetTick>
 8006b8a:	1b80      	subs	r0, r0, r6
 8006b8c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006b90:	d902      	bls.n	8006b98 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8006b92:	2300      	movs	r3, #0
 8006b94:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8006b96:	e7ed      	b.n	8006b74 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b9e:	f003 0314 	and.w	r3, r3, #20
 8006ba2:	2b14      	cmp	r3, #20
 8006ba4:	d1ef      	bne.n	8006b86 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006ba6:	686b      	ldr	r3, [r5, #4]
 8006ba8:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8006bac:	4a1e      	ldr	r2, [pc, #120]	@ (8006c28 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8006bae:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf38      	it	cc
 8006bb4:	2301      	movcc	r3, #1
 8006bb6:	435a      	muls	r2, r3
 8006bb8:	68ab      	ldr	r3, [r5, #8]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	434b      	muls	r3, r1
 8006bc4:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006bce:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006bd2:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006bd6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006bda:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006bdc:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006bde:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006be2:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006be6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8006bea:	9003      	str	r0, [sp, #12]
 8006bec:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8006bee:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	f002 0201 	and.w	r2, r2, #1
 8006bfc:	9203      	str	r2, [sp, #12]
 8006bfe:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006c00:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006c04:	f022 0203 	bic.w	r2, r2, #3
 8006c08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006c0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006c10:	430a      	orrs	r2, r1
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8006c1a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006c1c:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8006c1e:	7463      	strb	r3, [r4, #17]
}
 8006c20:	b004      	add	sp, #16
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006c24:	2001      	movs	r0, #1
 8006c26:	e7fb      	b.n	8006c20 <HAL_DSI_Init+0x1dc>
 8006c28:	003d0900 	.word	0x003d0900

08006c2c <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8006c2c:	4770      	bx	lr

08006c2e <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006c2e:	6803      	ldr	r3, [r0, #0]
 8006c30:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006c34:	07d1      	lsls	r1, r2, #31
{
 8006c36:	b510      	push	{r4, lr}
 8006c38:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006c3a:	d508      	bpl.n	8006c4e <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006c3c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	d504      	bpl.n	8006c4e <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8006c4a:	f7fb f91b 	bl	8001e84 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006c54:	0791      	lsls	r1, r2, #30
 8006c56:	d509      	bpl.n	8006c6c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006c58:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006c5c:	0792      	lsls	r2, r2, #30
 8006c5e:	d505      	bpl.n	8006c6c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006c60:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006c62:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006c64:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006c68:	f7fb f940 	bl	8001eec <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8006c6c:	69a3      	ldr	r3, [r4, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d04e      	beq.n	8006d10 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006c72:	6821      	ldr	r1, [r4, #0]
 8006c74:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006c78:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8006c7c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006c7e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006c82:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8006c86:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006c88:	b291      	uxth	r1, r2
 8006c8a:	b119      	cbz	r1, 8006c94 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006c8c:	6961      	ldr	r1, [r4, #20]
 8006c8e:	f041 0101 	orr.w	r1, r1, #1
 8006c92:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006c94:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8006c98:	d003      	beq.n	8006ca2 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006c9a:	6962      	ldr	r2, [r4, #20]
 8006c9c:	f042 0202 	orr.w	r2, r2, #2
 8006ca0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006ca2:	07d8      	lsls	r0, r3, #31
 8006ca4:	d503      	bpl.n	8006cae <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006ca6:	6962      	ldr	r2, [r4, #20]
 8006ca8:	f042 0204 	orr.w	r2, r2, #4
 8006cac:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006cae:	0799      	lsls	r1, r3, #30
 8006cb0:	d503      	bpl.n	8006cba <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006cb2:	6962      	ldr	r2, [r4, #20]
 8006cb4:	f042 0208 	orr.w	r2, r2, #8
 8006cb8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006cba:	f013 0f0c 	tst.w	r3, #12
 8006cbe:	d003      	beq.n	8006cc8 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006cc0:	6962      	ldr	r2, [r4, #20]
 8006cc2:	f042 0210 	orr.w	r2, r2, #16
 8006cc6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006cc8:	06da      	lsls	r2, r3, #27
 8006cca:	d503      	bpl.n	8006cd4 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006ccc:	6962      	ldr	r2, [r4, #20]
 8006cce:	f042 0220 	orr.w	r2, r2, #32
 8006cd2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006cd4:	0698      	lsls	r0, r3, #26
 8006cd6:	d503      	bpl.n	8006ce0 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006cd8:	6962      	ldr	r2, [r4, #20]
 8006cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cde:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006ce0:	0659      	lsls	r1, r3, #25
 8006ce2:	d503      	bpl.n	8006cec <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006ce4:	6962      	ldr	r2, [r4, #20]
 8006ce6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006cea:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006cec:	061a      	lsls	r2, r3, #24
 8006cee:	d503      	bpl.n	8006cf8 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006cf0:	6962      	ldr	r2, [r4, #20]
 8006cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cf6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006cf8:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8006cfc:	d003      	beq.n	8006d06 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006cfe:	6963      	ldr	r3, [r4, #20]
 8006d00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d04:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006d06:	6963      	ldr	r3, [r4, #20]
 8006d08:	b113      	cbz	r3, 8006d10 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff ff8e 	bl	8006c2c <HAL_DSI_ErrorCallback>
}
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d12:	7c02      	ldrb	r2, [r0, #16]
{
 8006d14:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006d16:	2a01      	cmp	r2, #1
 8006d18:	d00a      	beq.n	8006d30 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006d1a:	6802      	ldr	r2, [r0, #0]
 8006d1c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006d1e:	f020 0003 	bic.w	r0, r0, #3
 8006d22:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006d24:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006d26:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d28:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006d2a:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8006d2c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006d2e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006d30:	2002      	movs	r0, #2
}
 8006d32:	4770      	bx	lr

08006d34 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006d34:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d36:	7c03      	ldrb	r3, [r0, #16]
{
 8006d38:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d069      	beq.n	8006e12 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006d3e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d40:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006d4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006d56:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	f022 0203 	bic.w	r2, r2, #3
 8006d68:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	4302      	orrs	r2, r0
 8006d6e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	f022 0207 	bic.w	r2, r2, #7
 8006d76:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d78:	6958      	ldr	r0, [r3, #20]
 8006d7a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006d7e:	432a      	orrs	r2, r5
 8006d80:	694d      	ldr	r5, [r1, #20]
 8006d82:	432a      	orrs	r2, r5
 8006d84:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d86:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d88:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	f022 020f 	bic.w	r2, r2, #15
 8006d90:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	4302      	orrs	r2, r0
 8006d96:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006d98:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d9c:	f022 020e 	bic.w	r2, r2, #14
 8006da0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006da4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006da8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006dac:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006dae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006db2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006db4:	f36f 020f 	bfc	r2, #0, #16
 8006db8:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006dba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006dbc:	4302      	orrs	r2, r0
 8006dbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006dc0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006dc4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006dc8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006dcc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006dd0:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006dd4:	432a      	orrs	r2, r5
 8006dd6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006dd8:	432a      	orrs	r2, r5
 8006dda:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006ddc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006dde:	432a      	orrs	r2, r5
 8006de0:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006de2:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006de4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006de8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006df0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006df2:	430a      	orrs	r2, r1
 8006df4:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006df6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006e02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e06:	f042 0202 	orr.w	r2, r2, #2
 8006e0a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8006e0e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006e10:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006e12:	2002      	movs	r0, #2
 8006e14:	e7fc      	b.n	8006e10 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006e18 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006e18:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e1a:	7c03      	ldrb	r3, [r0, #16]
{
 8006e1c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d029      	beq.n	8006e76 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	4b15      	ldr	r3, [pc, #84]	@ (8006e7c <HAL_DSI_ConfigCommand+0x64>)
 8006e26:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006e28:	4023      	ands	r3, r4
 8006e2a:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006e2c:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006e2e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006e32:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006e34:	688d      	ldr	r5, [r1, #8]
 8006e36:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8006e38:	68cd      	ldr	r5, [r1, #12]
 8006e3a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006e3c:	690d      	ldr	r5, [r1, #16]
 8006e3e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006e40:	694d      	ldr	r5, [r1, #20]
 8006e42:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006e44:	698d      	ldr	r5, [r1, #24]
 8006e46:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8006e48:	69cd      	ldr	r5, [r1, #28]
 8006e4a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006e4c:	6a0d      	ldr	r5, [r1, #32]
 8006e4e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006e50:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006e52:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006e54:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8006e56:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006e58:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006e5a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006e5c:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006e5e:	4323      	orrs	r3, r4
 8006e60:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006e62:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006e64:	f023 0302 	bic.w	r3, r3, #2
 8006e68:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006e6a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e70:	2000      	movs	r0, #0
 8006e72:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006e74:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006e76:	2002      	movs	r0, #2
 8006e78:	e7fc      	b.n	8006e74 <HAL_DSI_ConfigCommand+0x5c>
 8006e7a:	bf00      	nop
 8006e7c:	fef080ff 	.word	0xfef080ff

08006e80 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e80:	7c02      	ldrb	r2, [r0, #16]
{
 8006e82:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006e84:	2a01      	cmp	r2, #1
 8006e86:	d00a      	beq.n	8006e9e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006e88:	6802      	ldr	r2, [r0, #0]
 8006e8a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006e8c:	f020 001f 	bic.w	r0, r0, #31
 8006e90:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006e92:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006e94:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e96:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006e98:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8006e9a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006e9c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e9e:	2002      	movs	r0, #2
}
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006ea2:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ea4:	7c03      	ldrb	r3, [r0, #16]
{
 8006ea6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d034      	beq.n	8006f16 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006eac:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	bf38      	it	cc
 8006eb4:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ebc:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006ec0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006ec4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ec8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006ecc:	4302      	orrs	r2, r0
 8006ece:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006ed2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006ed6:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006eda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006ede:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006ee2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006ee6:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006ee8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006eec:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006eee:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006ef0:	432a      	orrs	r2, r5
 8006ef2:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ef4:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006ef6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006efa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006efe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006f02:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006f06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006f0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8006f12:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006f14:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006f16:	2002      	movs	r0, #2
 8006f18:	e7fc      	b.n	8006f14 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006f1c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006f1c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f1e:	7c03      	ldrb	r3, [r0, #16]
{
 8006f20:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d05b      	beq.n	8006fde <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006f26:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006f28:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006f2a:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006f2c:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006f2e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006f32:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006f3a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006f3c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006f3e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006f40:	b292      	uxth	r2, r2
 8006f42:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006f44:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006f46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006f4a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006f4c:	4a25      	ldr	r2, [pc, #148]	@ (8006fe4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006f4e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006f50:	4010      	ands	r0, r2
 8006f52:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006f54:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006f56:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f58:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006f5a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006f5c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006f5e:	4010      	ands	r0, r2
 8006f60:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f62:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006f64:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f66:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f68:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006f6a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006f6e:	4010      	ands	r0, r2
 8006f70:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f74:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006f78:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006f7a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f7c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006f80:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006f84:	4010      	ands	r0, r2
 8006f86:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006f8a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006f8e:	4328      	orrs	r0, r5
 8006f90:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006f94:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006f98:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006f9c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006fa0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006fa4:	698d      	ldr	r5, [r1, #24]
 8006fa6:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006fa8:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006faa:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006fac:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006fb0:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006fb4:	4010      	ands	r0, r2
 8006fb6:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006fba:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006fbe:	4328      	orrs	r0, r5
 8006fc0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006fc4:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006fc8:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006fca:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006fcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006fd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8006fda:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006fdc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006fde:	2002      	movs	r0, #2
 8006fe0:	e7fc      	b.n	8006fdc <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006fe2:	bf00      	nop
 8006fe4:	ffff0000 	.word	0xffff0000

08006fe8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006fe8:	7c03      	ldrb	r3, [r0, #16]
{
 8006fea:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d01c      	beq.n	800702a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006ff0:	6802      	ldr	r2, [r0, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6851      	ldr	r1, [r2, #4]
 8006ff8:	f041 0101 	orr.w	r1, r1, #1
 8006ffc:	6051      	str	r1, [r2, #4]
 8006ffe:	6851      	ldr	r1, [r2, #4]
 8007000:	f001 0101 	and.w	r1, r1, #1
 8007004:	9100      	str	r1, [sp, #0]
 8007006:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800700e:	f041 0108 	orr.w	r1, r1, #8
 8007012:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8007016:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800701a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800701c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800701e:	f002 0208 	and.w	r2, r2, #8
 8007022:	9201      	str	r2, [sp, #4]
 8007024:	9a01      	ldr	r2, [sp, #4]
}
 8007026:	b002      	add	sp, #8
 8007028:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800702a:	2002      	movs	r0, #2
 800702c:	e7fb      	b.n	8007026 <HAL_DSI_Start+0x3e>

0800702e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800702e:	7c02      	ldrb	r2, [r0, #16]
{
 8007030:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007032:	2a01      	cmp	r2, #1
 8007034:	d009      	beq.n	800704a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007036:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007038:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800703a:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800703e:	f042 0204 	orr.w	r2, r2, #4
 8007042:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8007046:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007048:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800704a:	2002      	movs	r0, #2
}
 800704c:	4770      	bx	lr

0800704e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800704e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007050:	7c05      	ldrb	r5, [r0, #16]
{
 8007052:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007054:	2d01      	cmp	r5, #1
 8007056:	d009      	beq.n	800706c <HAL_DSI_ShortWrite+0x1e>
 8007058:	2501      	movs	r5, #1
 800705a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800705c:	9d06      	ldr	r5, [sp, #24]
 800705e:	9500      	str	r5, [sp, #0]
 8007060:	f7ff fc6c 	bl	800693c <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007064:	2300      	movs	r3, #0
 8007066:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007068:	b003      	add	sp, #12
 800706a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800706c:	2002      	movs	r0, #2
 800706e:	e7fb      	b.n	8007068 <HAL_DSI_ShortWrite+0x1a>

08007070 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007076:	7c03      	ldrb	r3, [r0, #16]
{
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800707c:	2b01      	cmp	r3, #1
{
 800707e:	4615      	mov	r5, r2
 8007080:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007084:	d052      	beq.n	800712c <HAL_DSI_LongWrite+0xbc>
 8007086:	2301      	movs	r3, #1
 8007088:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800708a:	f7ff fa61 	bl	8006550 <HAL_GetTick>
 800708e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007090:	6832      	ldr	r2, [r6, #0]
 8007092:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007094:	f013 0a01 	ands.w	sl, r3, #1
 8007098:	d019      	beq.n	80070ce <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800709a:	2c03      	cmp	r4, #3
 800709c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800709e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80070a2:	bf28      	it	cs
 80070a4:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80070a6:	4283      	cmp	r3, r0
 80070a8:	d11d      	bne.n	80070e6 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80070aa:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80070ac:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80070ae:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80070b2:	bb10      	cbnz	r0, 80070fa <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80070b4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80070b6:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80070ba:	0223      	lsls	r3, r4, #8
 80070bc:	0224      	lsls	r4, r4, #8
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80070c4:	431d      	orrs	r5, r3
 80070c6:	4325      	orrs	r5, r4
 80070c8:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80070ca:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80070cc:	e009      	b.n	80070e2 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80070ce:	f7ff fa3f 	bl	8006550 <HAL_GetTick>
 80070d2:	eba0 000b 	sub.w	r0, r0, fp
 80070d6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80070da:	d9d9      	bls.n	8007090 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80070dc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80070de:	f886 a010 	strb.w	sl, [r6, #16]
}
 80070e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80070e6:	f818 1003 	ldrb.w	r1, [r8, r3]
 80070ea:	3301      	adds	r3, #1
 80070ec:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80070f0:	fa01 f10c 	lsl.w	r1, r1, ip
 80070f4:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80070f8:	e7d5      	b.n	80070a6 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80070fa:	2804      	cmp	r0, #4
    fifoword = 0U;
 80070fc:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007100:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8007102:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007104:	bf28      	it	cs
 8007106:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800710a:	f813 8001 	ldrb.w	r8, [r3, r1]
 800710e:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007112:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007114:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8007118:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800711a:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800711e:	d1f4      	bne.n	800710a <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8007120:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8007124:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8007126:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800712a:	e7c2      	b.n	80070b2 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800712c:	2002      	movs	r0, #2
 800712e:	e7d8      	b.n	80070e2 <HAL_DSI_LongWrite+0x72>

08007130 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007134:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007136:	7c03      	ldrb	r3, [r0, #16]
{
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800713c:	2b01      	cmp	r3, #1
{
 800713e:	4617      	mov	r7, r2
 8007140:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007144:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8007148:	d06f      	beq.n	800722a <HAL_DSI_Read+0xfa>
 800714a:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800714c:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800714e:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007150:	d90d      	bls.n	800716e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007152:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007156:	2237      	movs	r2, #55	@ 0x37
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	b2f3      	uxtb	r3, r6
 800715c:	f7ff fbee 	bl	800693c <DSI_ShortWrite.constprop.0>
 8007160:	b128      	cbz	r0, 800716e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007162:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007164:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007166:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007168:	b003      	add	sp, #12
 800716a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800716e:	f1b9 0f06 	cmp.w	r9, #6
 8007172:	d10f      	bne.n	8007194 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007176:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800717e:	f043 0306 	orr.w	r3, r3, #6
 8007182:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007184:	f7ff f9e4 	bl	8006550 <HAL_GetTick>
 8007188:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800718a:	2e00      	cmp	r6, #0
 800718c:	dc27      	bgt.n	80071de <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800718e:	2000      	movs	r0, #0
 8007190:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007192:	e7e9      	b.n	8007168 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007194:	f1b9 0f04 	cmp.w	r9, #4
 8007198:	d105      	bne.n	80071a6 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800719a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800719c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800719e:	f044 0404 	orr.w	r4, r4, #4
 80071a2:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80071a4:	e7ee      	b.n	8007184 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80071a6:	f1b9 0f14 	cmp.w	r9, #20
 80071aa:	d108      	bne.n	80071be <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80071ac:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80071b0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80071b2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80071b4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80071b8:	f044 0414 	orr.w	r4, r4, #20
 80071bc:	e7f1      	b.n	80071a2 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80071be:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80071c2:	d1ce      	bne.n	8007162 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80071c4:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80071c8:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80071ca:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80071cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80071d0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80071d4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80071d8:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80071dc:	e7e1      	b.n	80071a2 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80071de:	682a      	ldr	r2, [r5, #0]
 80071e0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80071e2:	f013 0310 	ands.w	r3, r3, #16
 80071e6:	d10d      	bne.n	8007204 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80071e8:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80071ea:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80071ec:	4632      	mov	r2, r6
 80071ee:	bf28      	it	cs
 80071f0:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80071f2:	00d9      	lsls	r1, r3, #3
 80071f4:	fa20 f101 	lsr.w	r1, r0, r1
 80071f8:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80071fa:	3301      	adds	r3, #1
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d1f8      	bne.n	80071f2 <HAL_DSI_Read+0xc2>
 8007200:	4417      	add	r7, r2
 8007202:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007204:	f7ff f9a4 	bl	8006550 <HAL_GetTick>
 8007208:	1b00      	subs	r0, r0, r4
 800720a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800720e:	d903      	bls.n	8007218 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007210:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007212:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007214:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8007216:	e7a7      	b.n	8007168 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800721c:	0652      	lsls	r2, r2, #25
 800721e:	d4b4      	bmi.n	800718a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007224:	069b      	lsls	r3, r3, #26
 8007226:	d49c      	bmi.n	8007162 <HAL_DSI_Read+0x32>
 8007228:	e7af      	b.n	800718a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800722a:	2002      	movs	r0, #2
 800722c:	e79c      	b.n	8007168 <HAL_DSI_Read+0x38>

0800722e <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800722e:	7c02      	ldrb	r2, [r0, #16]
{
 8007230:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007232:	2a01      	cmp	r2, #1
 8007234:	d00f      	beq.n	8007256 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007236:	6802      	ldr	r2, [r0, #0]
 8007238:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800723c:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007240:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007244:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007248:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800724c:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800724e:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8007252:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007254:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007256:	2002      	movs	r0, #2
}
 8007258:	4770      	bx	lr
	...

0800725c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800725c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007260:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007262:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8007428 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007266:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800726a:	680a      	ldr	r2, [r1, #0]
 800726c:	fa32 f503 	lsrs.w	r5, r2, r3
 8007270:	d102      	bne.n	8007278 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007272:	b003      	add	sp, #12
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007278:	2501      	movs	r5, #1
 800727a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800727e:	ea18 0202 	ands.w	r2, r8, r2
 8007282:	f000 80bb 	beq.w	80073fc <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007286:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007288:	2703      	movs	r7, #3
 800728a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800728e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007292:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007296:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007298:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800729c:	2f01      	cmp	r7, #1
 800729e:	d834      	bhi.n	800730a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80072a0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072a2:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a6:	68cf      	ldr	r7, [r1, #12]
 80072a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80072ac:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80072b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80072b2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072b4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072b8:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80072bc:	409f      	lsls	r7, r3
 80072be:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80072c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80072c4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072c6:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072c8:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072cc:	688f      	ldr	r7, [r1, #8]
 80072ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80072d2:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80072d6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d8:	d119      	bne.n	800730e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80072da:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072de:	f003 0a07 	and.w	sl, r3, #7
 80072e2:	f04f 0b0f 	mov.w	fp, #15
 80072e6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80072ea:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80072ee:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072f2:	fa0b fb0a 	lsl.w	fp, fp, sl
 80072f6:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072fa:	690f      	ldr	r7, [r1, #16]
 80072fc:	fa07 f70a 	lsl.w	r7, r7, sl
 8007300:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8007304:	f8c8 7020 	str.w	r7, [r8, #32]
 8007308:	e001      	b.n	800730e <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800730a:	2d03      	cmp	r5, #3
 800730c:	d1da      	bne.n	80072c4 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800730e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007310:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007314:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007318:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800731c:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8007320:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007322:	d06b      	beq.n	80073fc <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007324:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8007328:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800732c:	f003 0c03 	and.w	ip, r3, #3
 8007330:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007334:	f045 0502 	orr.w	r5, r5, #2
 8007338:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800733c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007340:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8007344:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007348:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800734c:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007350:	f005 0502 	and.w	r5, r5, #2
 8007354:	9501      	str	r5, [sp, #4]
 8007356:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007358:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800735a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800735e:	4d31      	ldr	r5, [pc, #196]	@ (8007424 <HAL_GPIO_Init+0x1c8>)
 8007360:	42a8      	cmp	r0, r5
 8007362:	d04d      	beq.n	8007400 <HAL_GPIO_Init+0x1a4>
 8007364:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007368:	42a8      	cmp	r0, r5
 800736a:	d04b      	beq.n	8007404 <HAL_GPIO_Init+0x1a8>
 800736c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007370:	42a8      	cmp	r0, r5
 8007372:	d049      	beq.n	8007408 <HAL_GPIO_Init+0x1ac>
 8007374:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007378:	42a8      	cmp	r0, r5
 800737a:	d047      	beq.n	800740c <HAL_GPIO_Init+0x1b0>
 800737c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007380:	42a8      	cmp	r0, r5
 8007382:	d045      	beq.n	8007410 <HAL_GPIO_Init+0x1b4>
 8007384:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007388:	42a8      	cmp	r0, r5
 800738a:	d043      	beq.n	8007414 <HAL_GPIO_Init+0x1b8>
 800738c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007390:	42a8      	cmp	r0, r5
 8007392:	d041      	beq.n	8007418 <HAL_GPIO_Init+0x1bc>
 8007394:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007398:	42a8      	cmp	r0, r5
 800739a:	d03f      	beq.n	800741c <HAL_GPIO_Init+0x1c0>
 800739c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073a0:	42a8      	cmp	r0, r5
 80073a2:	d03d      	beq.n	8007420 <HAL_GPIO_Init+0x1c4>
 80073a4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073a8:	42a8      	cmp	r0, r5
 80073aa:	bf14      	ite	ne
 80073ac:	250a      	movne	r5, #10
 80073ae:	2509      	moveq	r5, #9
 80073b0:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073b4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073b8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073bc:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80073be:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80073c2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80073c4:	bf0c      	ite	eq
 80073c6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80073c8:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073ca:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80073ce:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80073d0:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80073d2:	bf0c      	ite	eq
 80073d4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80073d6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073d8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80073dc:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80073de:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80073e2:	bf0c      	ite	eq
 80073e4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80073e6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073e8:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80073ea:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80073ee:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80073f2:	bf54      	ite	pl
 80073f4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80073f6:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80073f8:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80073fc:	3301      	adds	r3, #1
 80073fe:	e734      	b.n	800726a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007400:	2500      	movs	r5, #0
 8007402:	e7d5      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007404:	2501      	movs	r5, #1
 8007406:	e7d3      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007408:	2502      	movs	r5, #2
 800740a:	e7d1      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 800740c:	2503      	movs	r5, #3
 800740e:	e7cf      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007410:	2504      	movs	r5, #4
 8007412:	e7cd      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007414:	2505      	movs	r5, #5
 8007416:	e7cb      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007418:	2506      	movs	r5, #6
 800741a:	e7c9      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 800741c:	2507      	movs	r5, #7
 800741e:	e7c7      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007420:	2508      	movs	r5, #8
 8007422:	e7c5      	b.n	80073b0 <HAL_GPIO_Init+0x154>
 8007424:	58020000 	.word	0x58020000
 8007428:	58024400 	.word	0x58024400

0800742c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007430:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007432:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007436:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800743a:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800743e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8007442:	fa31 f302 	lsrs.w	r3, r1, r2
 8007446:	d101      	bne.n	800744c <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800744c:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007450:	ea1c 0601 	ands.w	r6, ip, r1
 8007454:	d070      	beq.n	8007538 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007456:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800745a:	f002 0703 	and.w	r7, r2, #3
 800745e:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007462:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007464:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007468:	fa08 f907 	lsl.w	r9, r8, r7
 800746c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007470:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007474:	4b3a      	ldr	r3, [pc, #232]	@ (8007560 <HAL_GPIO_DeInit+0x134>)
 8007476:	4298      	cmp	r0, r3
 8007478:	d060      	beq.n	800753c <HAL_GPIO_DeInit+0x110>
 800747a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800747e:	4298      	cmp	r0, r3
 8007480:	d05e      	beq.n	8007540 <HAL_GPIO_DeInit+0x114>
 8007482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007486:	4298      	cmp	r0, r3
 8007488:	d05c      	beq.n	8007544 <HAL_GPIO_DeInit+0x118>
 800748a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800748e:	4298      	cmp	r0, r3
 8007490:	d05a      	beq.n	8007548 <HAL_GPIO_DeInit+0x11c>
 8007492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007496:	4298      	cmp	r0, r3
 8007498:	d058      	beq.n	800754c <HAL_GPIO_DeInit+0x120>
 800749a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800749e:	4298      	cmp	r0, r3
 80074a0:	d056      	beq.n	8007550 <HAL_GPIO_DeInit+0x124>
 80074a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074a6:	4298      	cmp	r0, r3
 80074a8:	d054      	beq.n	8007554 <HAL_GPIO_DeInit+0x128>
 80074aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ae:	4298      	cmp	r0, r3
 80074b0:	d052      	beq.n	8007558 <HAL_GPIO_DeInit+0x12c>
 80074b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074b6:	4298      	cmp	r0, r3
 80074b8:	d050      	beq.n	800755c <HAL_GPIO_DeInit+0x130>
 80074ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074be:	4298      	cmp	r0, r3
 80074c0:	bf14      	ite	ne
 80074c2:	230a      	movne	r3, #10
 80074c4:	2309      	moveq	r3, #9
 80074c6:	40bb      	lsls	r3, r7
 80074c8:	4573      	cmp	r3, lr
 80074ca:	d117      	bne.n	80074fc <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80074cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80074d0:	ea23 0306 	bic.w	r3, r3, r6
 80074d4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80074d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80074dc:	ea23 0306 	bic.w	r3, r3, r6
 80074e0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	ea23 0306 	bic.w	r3, r3, r6
 80074ea:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	ea23 0306 	bic.w	r3, r3, r6
 80074f2:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80074f4:	68ab      	ldr	r3, [r5, #8]
 80074f6:	ea23 0309 	bic.w	r3, r3, r9
 80074fa:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80074fc:	0053      	lsls	r3, r2, #1
 80074fe:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007500:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007502:	fa0b f303 	lsl.w	r3, fp, r3
 8007506:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800750a:	431d      	orrs	r5, r3
 800750c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800750e:	f002 0507 	and.w	r5, r2, #7
 8007512:	6a37      	ldr	r7, [r6, #32]
 8007514:	00ad      	lsls	r5, r5, #2
 8007516:	fa08 f505 	lsl.w	r5, r8, r5
 800751a:	ea27 0705 	bic.w	r7, r7, r5
 800751e:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007520:	68c5      	ldr	r5, [r0, #12]
 8007522:	ea25 0503 	bic.w	r5, r5, r3
 8007526:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007528:	6845      	ldr	r5, [r0, #4]
 800752a:	ea25 050c 	bic.w	r5, r5, ip
 800752e:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007530:	6885      	ldr	r5, [r0, #8]
 8007532:	ea25 0303 	bic.w	r3, r5, r3
 8007536:	6083      	str	r3, [r0, #8]
    position++;
 8007538:	3201      	adds	r2, #1
 800753a:	e782      	b.n	8007442 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800753c:	2300      	movs	r3, #0
 800753e:	e7c2      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007540:	2301      	movs	r3, #1
 8007542:	e7c0      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007544:	2302      	movs	r3, #2
 8007546:	e7be      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007548:	2303      	movs	r3, #3
 800754a:	e7bc      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 800754c:	2304      	movs	r3, #4
 800754e:	e7ba      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007550:	2305      	movs	r3, #5
 8007552:	e7b8      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007554:	2306      	movs	r3, #6
 8007556:	e7b6      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007558:	2307      	movs	r3, #7
 800755a:	e7b4      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 800755c:	2308      	movs	r3, #8
 800755e:	e7b2      	b.n	80074c6 <HAL_GPIO_DeInit+0x9a>
 8007560:	58020000 	.word	0x58020000

08007564 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007564:	6903      	ldr	r3, [r0, #16]
 8007566:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007568:	bf14      	ite	ne
 800756a:	2001      	movne	r0, #1
 800756c:	2000      	moveq	r0, #0
 800756e:	4770      	bx	lr

08007570 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007570:	b10a      	cbz	r2, 8007576 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007572:	6181      	str	r1, [r0, #24]
  }
}
 8007574:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007576:	0409      	lsls	r1, r1, #16
 8007578:	e7fb      	b.n	8007572 <HAL_GPIO_WritePin+0x2>

0800757a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800757a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800757c:	ea01 0203 	and.w	r2, r1, r3
 8007580:	ea21 0103 	bic.w	r1, r1, r3
 8007584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007588:	6181      	str	r1, [r0, #24]
}
 800758a:	4770      	bx	lr

0800758c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800758c:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <HAL_HSEM_FastTake+0x14>)
 800758e:	3020      	adds	r0, #32
 8007590:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007594:	4b03      	ldr	r3, [pc, #12]	@ (80075a4 <HAL_HSEM_FastTake+0x18>)
 8007596:	1ac0      	subs	r0, r0, r3
 8007598:	bf18      	it	ne
 800759a:	2001      	movne	r0, #1
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	58026400 	.word	0x58026400
 80075a4:	80000300 	.word	0x80000300

080075a8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80075a8:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80075ac:	4b01      	ldr	r3, [pc, #4]	@ (80075b4 <HAL_HSEM_Release+0xc>)
 80075ae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80075b2:	4770      	bx	lr
 80075b4:	58026400 	.word	0x58026400

080075b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80075b8:	6803      	ldr	r3, [r0, #0]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	0791      	lsls	r1, r2, #30
 80075be:	d501      	bpl.n	80075c4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80075c0:	2200      	movs	r2, #0
 80075c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	07d2      	lsls	r2, r2, #31
 80075c8:	d403      	bmi.n	80075d2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	619a      	str	r2, [r3, #24]
  }
}
 80075d2:	4770      	bx	lr

080075d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075d4:	b530      	push	{r4, r5, lr}
 80075d6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075dc:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075de:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80075e0:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80075e6:	4a05      	ldr	r2, [pc, #20]	@ (80075fc <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075e8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80075ea:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80075f2:	ea20 0002 	bic.w	r0, r0, r2
 80075f6:	4303      	orrs	r3, r0
 80075f8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	03ff63ff 	.word	0x03ff63ff

08007600 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007600:	6803      	ldr	r3, [r0, #0]
{
 8007602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007606:	699c      	ldr	r4, [r3, #24]
{
 8007608:	4605      	mov	r5, r0
 800760a:	460f      	mov	r7, r1
 800760c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800760e:	f014 0410 	ands.w	r4, r4, #16
 8007612:	d06f      	beq.n	80076f4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007614:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007616:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	0690      	lsls	r0, r2, #26
 8007622:	d461      	bmi.n	80076e8 <I2C_IsErrorOccurred+0xe8>
 8007624:	f1b8 0f00 	cmp.w	r8, #0
 8007628:	d035      	beq.n	8007696 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800762a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800762e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007630:	682e      	ldr	r6, [r5, #0]
 8007632:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007634:	05d9      	lsls	r1, r3, #23
 8007636:	d505      	bpl.n	8007644 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007638:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800763c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007640:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007642:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007644:	055a      	lsls	r2, r3, #21
 8007646:	d505      	bpl.n	8007654 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800764c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007650:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007652:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007654:	059b      	lsls	r3, r3, #22
 8007656:	d54f      	bpl.n	80076f8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007658:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800765c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007660:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff ffa8 	bl	80075b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007668:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800766a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800766c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007670:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007674:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800767e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007680:	4323      	orrs	r3, r4
 8007682:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007684:	2320      	movs	r3, #32
 8007686:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800768a:	2300      	movs	r3, #0
 800768c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007690:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007694:	e032      	b.n	80076fc <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007696:	1c7a      	adds	r2, r7, #1
 8007698:	d0c1      	beq.n	800761e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800769a:	f7fe ff59 	bl	8006550 <HAL_GetTick>
 800769e:	1b80      	subs	r0, r0, r6
 80076a0:	42b8      	cmp	r0, r7
 80076a2:	d801      	bhi.n	80076a8 <I2C_IsErrorOccurred+0xa8>
 80076a4:	2f00      	cmp	r7, #0
 80076a6:	d1b9      	bne.n	800761c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80076ac:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076b0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80076b2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076b4:	0400      	lsls	r0, r0, #16
 80076b6:	d50a      	bpl.n	80076ce <I2C_IsErrorOccurred+0xce>
 80076b8:	0449      	lsls	r1, r1, #17
 80076ba:	d408      	bmi.n	80076ce <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80076bc:	2a20      	cmp	r2, #32
 80076be:	d006      	beq.n	80076ce <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076c6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80076c8:	f7fe ff42 	bl	8006550 <HAL_GetTick>
 80076cc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076ce:	682b      	ldr	r3, [r5, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	069b      	lsls	r3, r3, #26
 80076d4:	d4a2      	bmi.n	800761c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076d6:	f7fe ff3b 	bl	8006550 <HAL_GetTick>
 80076da:	1b80      	subs	r0, r0, r6
 80076dc:	2819      	cmp	r0, #25
 80076de:	d9f6      	bls.n	80076ce <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80076e0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80076e2:	f04f 0801 	mov.w	r8, #1
 80076e6:	e799      	b.n	800761c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d19d      	bne.n	800762a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076ee:	2220      	movs	r2, #32
 80076f0:	61da      	str	r2, [r3, #28]
 80076f2:	e79a      	b.n	800762a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	4620      	mov	r0, r4
 80076f6:	e79b      	b.n	8007630 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1b2      	bne.n	8007662 <I2C_IsErrorOccurred+0x62>
}
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007700 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	460d      	mov	r5, r1
 8007706:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	079b      	lsls	r3, r3, #30
 800770e:	d501      	bpl.n	8007714 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007710:	2000      	movs	r0, #0
 8007712:	e01f      	b.n	8007754 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007714:	4632      	mov	r2, r6
 8007716:	4629      	mov	r1, r5
 8007718:	4620      	mov	r0, r4
 800771a:	f7ff ff71 	bl	8007600 <I2C_IsErrorOccurred>
 800771e:	b9c0      	cbnz	r0, 8007752 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007720:	1c6a      	adds	r2, r5, #1
 8007722:	d0f1      	beq.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007724:	f7fe ff14 	bl	8006550 <HAL_GetTick>
 8007728:	1b80      	subs	r0, r0, r6
 800772a:	42a8      	cmp	r0, r5
 800772c:	d801      	bhi.n	8007732 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800772e:	2d00      	cmp	r5, #0
 8007730:	d1ea      	bne.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f013 0302 	ands.w	r3, r3, #2
 800773a:	d1e5      	bne.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800773c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800773e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007742:	f042 0220 	orr.w	r2, r2, #32
 8007746:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007748:	2220      	movs	r2, #32
 800774a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800774e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007752:	2001      	movs	r0, #1
}
 8007754:	bd70      	pop	{r4, r5, r6, pc}

08007756 <I2C_WaitOnFlagUntilTimeout>:
{
 8007756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800775e:	4604      	mov	r4, r0
 8007760:	460f      	mov	r7, r1
 8007762:	4616      	mov	r6, r2
 8007764:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	ea37 0303 	bics.w	r3, r7, r3
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	42b3      	cmp	r3, r6
 8007776:	d001      	beq.n	800777c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007778:	2000      	movs	r0, #0
 800777a:	e025      	b.n	80077c8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800777c:	4642      	mov	r2, r8
 800777e:	4629      	mov	r1, r5
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff ff3d 	bl	8007600 <I2C_IsErrorOccurred>
 8007786:	b9f0      	cbnz	r0, 80077c6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007788:	1c6b      	adds	r3, r5, #1
 800778a:	d0ec      	beq.n	8007766 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778c:	f7fe fee0 	bl	8006550 <HAL_GetTick>
 8007790:	eba0 0008 	sub.w	r0, r0, r8
 8007794:	42a8      	cmp	r0, r5
 8007796:	d801      	bhi.n	800779c <I2C_WaitOnFlagUntilTimeout+0x46>
 8007798:	2d00      	cmp	r5, #0
 800779a:	d1e4      	bne.n	8007766 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	ea37 0303 	bics.w	r3, r7, r3
 80077a4:	bf0c      	ite	eq
 80077a6:	2301      	moveq	r3, #1
 80077a8:	2300      	movne	r3, #0
 80077aa:	42b3      	cmp	r3, r6
 80077ac:	d1db      	bne.n	8007766 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80077b0:	f043 0320 	orr.w	r3, r3, #32
 80077b4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077b6:	2320      	movs	r3, #32
 80077b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	2300      	movs	r3, #0
 80077be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80077c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80077c6:	2001      	movs	r0, #1
}
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077cc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	069b      	lsls	r3, r3, #26
 80077da:	d501      	bpl.n	80077e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80077dc:	2000      	movs	r0, #0
 80077de:	e01d      	b.n	800781c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077e0:	4632      	mov	r2, r6
 80077e2:	4629      	mov	r1, r5
 80077e4:	4620      	mov	r0, r4
 80077e6:	f7ff ff0b 	bl	8007600 <I2C_IsErrorOccurred>
 80077ea:	b9b0      	cbnz	r0, 800781a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ec:	f7fe feb0 	bl	8006550 <HAL_GetTick>
 80077f0:	1b80      	subs	r0, r0, r6
 80077f2:	42a8      	cmp	r0, r5
 80077f4:	d801      	bhi.n	80077fa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	d1ec      	bne.n	80077d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f013 0320 	ands.w	r3, r3, #32
 8007802:	d1e7      	bne.n	80077d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007804:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007806:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800780a:	f042 0220 	orr.w	r2, r2, #32
 800780e:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007810:	2220      	movs	r2, #32
 8007812:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007816:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800781a:	2001      	movs	r0, #1
}
 800781c:	bd70      	pop	{r4, r5, r6, pc}

0800781e <HAL_I2C_MspInit>:
}
 800781e:	4770      	bx	lr

08007820 <HAL_I2C_Init>:
{
 8007820:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007822:	4604      	mov	r4, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	d04e      	beq.n	80078c6 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007828:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800782c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007830:	b91b      	cbnz	r3, 800783a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007832:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8007836:	f7ff fff2 	bl	800781e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800783a:	2324      	movs	r3, #36	@ 0x24
 800783c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800784a:	6862      	ldr	r2, [r4, #4]
 800784c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007850:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007858:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800785a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800785e:	2901      	cmp	r1, #1
 8007860:	d106      	bne.n	8007870 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007866:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800786e:	e007      	b.n	8007880 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007870:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007874:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007876:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007878:	d1f6      	bne.n	8007868 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007880:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007882:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800788a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800788e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007896:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007898:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800789c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800789e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80078a4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078a6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f042 0201 	orr.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80078b6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078b8:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078be:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80078c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80078c6:	2001      	movs	r0, #1
 80078c8:	e7fc      	b.n	80078c4 <HAL_I2C_Init+0xa4>

080078ca <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80078ca:	4770      	bx	lr

080078cc <HAL_I2C_DeInit>:
{
 80078cc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80078ce:	4604      	mov	r4, r0
 80078d0:	b198      	cbz	r0, 80078fa <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80078d2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d4:	2324      	movs	r3, #36	@ 0x24
 80078d6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80078da:	6813      	ldr	r3, [r2, #0]
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80078e2:	f7ff fff2 	bl	80078ca <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e6:	2000      	movs	r0, #0
 80078e8:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80078ea:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80078ee:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078f2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80078f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80078fa:	2001      	movs	r0, #1
 80078fc:	e7fc      	b.n	80078f8 <HAL_I2C_DeInit+0x2c>
	...

08007900 <HAL_I2C_Mem_Write>:
{
 8007900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007906:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800790a:	4604      	mov	r4, r0
 800790c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800790e:	2b20      	cmp	r3, #32
{
 8007910:	4616      	mov	r6, r2
 8007912:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007916:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800791a:	f040 80c6 	bne.w	8007aaa <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800791e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007920:	b113      	cbz	r3, 8007928 <HAL_I2C_Mem_Write+0x28>
 8007922:	f1ba 0f00 	cmp.w	sl, #0
 8007926:	d106      	bne.n	8007936 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800792c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800792e:	2001      	movs	r0, #1
}
 8007930:	b003      	add	sp, #12
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007936:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800793a:	2b01      	cmp	r3, #1
 800793c:	f000 80b5 	beq.w	8007aaa <HAL_I2C_Mem_Write+0x1aa>
 8007940:	f04f 0b01 	mov.w	fp, #1
 8007944:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007948:	f7fe fe02 	bl	8006550 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800794c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800794e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007950:	9000      	str	r0, [sp, #0]
 8007952:	465a      	mov	r2, fp
 8007954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007958:	4620      	mov	r0, r4
 800795a:	f7ff fefc 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 800795e:	2800      	cmp	r0, #0
 8007960:	d1e5      	bne.n	800792e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007962:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007964:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007966:	fa5f f289 	uxtb.w	r2, r9
 800796a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800796c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007970:	2340      	movs	r3, #64	@ 0x40
 8007972:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007978:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800797a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800797c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800797e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007980:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800798a:	f7ff fe23 	bl	80075d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800798e:	462a      	mov	r2, r5
 8007990:	4641      	mov	r1, r8
 8007992:	4620      	mov	r0, r4
 8007994:	f7ff feb4 	bl	8007700 <I2C_WaitOnTXISFlagUntilTimeout>
 8007998:	bb18      	cbnz	r0, 80079e2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800799a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800799e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a0:	d115      	bne.n	80079ce <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079a2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079a4:	2200      	movs	r2, #0
 80079a6:	2180      	movs	r1, #128	@ 0x80
 80079a8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079aa:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079ac:	4643      	mov	r3, r8
 80079ae:	9500      	str	r5, [sp, #0]
 80079b0:	f7ff fed1 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 80079b4:	b9a8      	cbnz	r0, 80079e2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2bff      	cmp	r3, #255	@ 0xff
 80079bc:	d815      	bhi.n	80079ea <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80079be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80079c4:	b292      	uxth	r2, r2
 80079c6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	9000      	str	r0, [sp, #0]
 80079cc:	e012      	b.n	80079f4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079ce:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d0:	4641      	mov	r1, r8
 80079d2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d6:	462a      	mov	r2, r5
 80079d8:	f7ff fe92 	bl	8007700 <I2C_WaitOnTXISFlagUntilTimeout>
 80079dc:	b908      	cbnz	r0, 80079e2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	e7df      	b.n	80079a2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80079e2:	2300      	movs	r3, #0
 80079e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80079e8:	e7a1      	b.n	800792e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ea:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079f0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079f2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079f4:	4639      	mov	r1, r7
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff fdec 	bl	80075d4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fc:	462a      	mov	r2, r5
 80079fe:	4641      	mov	r1, r8
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff fe7d 	bl	8007700 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d191      	bne.n	800792e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007a12:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007a14:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007a16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a18:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007a1a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007a1c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007a1e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007a20:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007a22:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a26:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b1b3      	cbz	r3, 8007a5a <HAL_I2C_Mem_Write+0x15a>
 8007a2c:	b9aa      	cbnz	r2, 8007a5a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a2e:	4643      	mov	r3, r8
 8007a30:	2180      	movs	r1, #128	@ 0x80
 8007a32:	4620      	mov	r0, r4
 8007a34:	9500      	str	r5, [sp, #0]
 8007a36:	f7ff fe8e 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f47f af77 	bne.w	800792e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2bff      	cmp	r3, #255	@ 0xff
 8007a46:	d928      	bls.n	8007a9a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a48:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a4e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a50:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a52:	4639      	mov	r1, r7
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7ff fdbd 	bl	80075d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007a5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1cc      	bne.n	80079fc <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a62:	462a      	mov	r2, r5
 8007a64:	4641      	mov	r1, r8
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff feb0 	bl	80077cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f47f af5e 	bne.w	800792e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	2120      	movs	r1, #32
 8007a76:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007a7e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007a82:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007a90:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a94:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007a98:	e74a      	b.n	8007930 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007a9a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	9000      	str	r0, [sp, #0]
 8007aa8:	e7d3      	b.n	8007a52 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8007aaa:	2002      	movs	r0, #2
 8007aac:	e740      	b.n	8007930 <HAL_I2C_Mem_Write+0x30>
 8007aae:	bf00      	nop
 8007ab0:	80002000 	.word	0x80002000

08007ab4 <HAL_I2C_Mem_Read>:
{
 8007ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aba:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac2:	2b20      	cmp	r3, #32
{
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007aca:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ace:	f040 80c9 	bne.w	8007c64 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007ad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ad4:	b113      	cbz	r3, 8007adc <HAL_I2C_Mem_Read+0x28>
 8007ad6:	f1ba 0f00 	cmp.w	sl, #0
 8007ada:	d106      	bne.n	8007aea <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ae0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007ae2:	2001      	movs	r0, #1
}
 8007ae4:	b003      	add	sp, #12
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007aea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	f000 80b8 	beq.w	8007c64 <HAL_I2C_Mem_Read+0x1b0>
 8007af4:	f04f 0b01 	mov.w	fp, #1
 8007af8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007afc:	f7fe fd28 	bl	8006550 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b00:	2319      	movs	r3, #25
 8007b02:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007b04:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b06:	465a      	mov	r2, fp
 8007b08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7ff fe22 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1e4      	bne.n	8007ae2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b18:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8007b1a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b1c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b1e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b22:	2240      	movs	r2, #64	@ 0x40
 8007b24:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007b28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b2a:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b2c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007b2e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b30:	4a4d      	ldr	r2, [pc, #308]	@ (8007c68 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8007b32:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b36:	9200      	str	r2, [sp, #0]
 8007b38:	fa5f f289 	uxtb.w	r2, r9
 8007b3c:	f7ff fd4a 	bl	80075d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b40:	462a      	mov	r2, r5
 8007b42:	4641      	mov	r1, r8
 8007b44:	4620      	mov	r0, r4
 8007b46:	f7ff fddb 	bl	8007700 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b4a:	bb20      	cbnz	r0, 8007b96 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b4c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b50:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b52:	d116      	bne.n	8007b82 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b54:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	2200      	movs	r2, #0
 8007b58:	2140      	movs	r1, #64	@ 0x40
 8007b5a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b5c:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5e:	4643      	mov	r3, r8
 8007b60:	9500      	str	r5, [sp, #0]
 8007b62:	f7ff fdf8 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 8007b66:	b9b0      	cbnz	r0, 8007b96 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2bff      	cmp	r3, #255	@ 0xff
 8007b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c6c <HAL_I2C_Mem_Read+0x1b8>)
 8007b70:	d815      	bhi.n	8007b9e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007b72:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007b74:	b292      	uxth	r2, r2
 8007b76:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b80:	e012      	b.n	8007ba8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b82:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b84:	4641      	mov	r1, r8
 8007b86:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b88:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f7ff fdb8 	bl	8007700 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b90:	b908      	cbnz	r0, 8007b96 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	e7de      	b.n	8007b54 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007b96:	2300      	movs	r3, #0
 8007b98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007b9c:	e7a1      	b.n	8007ae2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b9e:	22ff      	movs	r2, #255	@ 0xff
 8007ba0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ba8:	4639      	mov	r1, r7
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff fd12 	bl	80075d4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	9500      	str	r5, [sp, #0]
 8007bba:	f7ff fdcc 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d18f      	bne.n	8007ae2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007bc8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007bca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007bcc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007bce:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007bd0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007bd2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007bd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007bd6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007bd8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007bda:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007be0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b1b3      	cbz	r3, 8007c14 <HAL_I2C_Mem_Read+0x160>
 8007be6:	b9aa      	cbnz	r2, 8007c14 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007be8:	4643      	mov	r3, r8
 8007bea:	2180      	movs	r1, #128	@ 0x80
 8007bec:	4620      	mov	r0, r4
 8007bee:	9500      	str	r5, [sp, #0]
 8007bf0:	f7ff fdb1 	bl	8007756 <I2C_WaitOnFlagUntilTimeout>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f47f af74 	bne.w	8007ae2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bfa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2bff      	cmp	r3, #255	@ 0xff
 8007c00:	d928      	bls.n	8007c54 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c02:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007c04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c08:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007c0a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7ff fce0 	bl	80075d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007c14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1c9      	bne.n	8007bb0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4641      	mov	r1, r8
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff fdd3 	bl	80077cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f47f af5b 	bne.w	8007ae2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	2120      	movs	r1, #32
 8007c30:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007c38:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007c3c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007c4a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c4e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007c52:	e747      	b.n	8007ae4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007c54:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	9000      	str	r0, [sp, #0]
 8007c62:	e7d3      	b.n	8007c0c <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8007c64:	2002      	movs	r0, #2
 8007c66:	e73d      	b.n	8007ae4 <HAL_I2C_Mem_Read+0x30>
 8007c68:	80002000 	.word	0x80002000
 8007c6c:	80002400 	.word	0x80002400

08007c70 <HAL_I2C_GetState>:
  return hi2c->State;
 8007c70:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8007c74:	4770      	bx	lr

08007c76 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007c76:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8007c78:	4770      	bx	lr

08007c7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c7a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c7c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007c80:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	2a20      	cmp	r2, #32
 8007c84:	b2d4      	uxtb	r4, r2
 8007c86:	d11c      	bne.n	8007cc2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c88:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007c8c:	2a01      	cmp	r2, #1
 8007c8e:	d018      	beq.n	8007cc2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c90:	2224      	movs	r2, #36	@ 0x24
 8007c92:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c96:	6802      	ldr	r2, [r0, #0]
 8007c98:	6810      	ldr	r0, [r2, #0]
 8007c9a:	f020 0001 	bic.w	r0, r0, #1
 8007c9e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ca0:	6810      	ldr	r0, [r2, #0]
 8007ca2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8007ca6:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ca8:	6810      	ldr	r0, [r2, #0]
 8007caa:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cac:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cae:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007cb0:	6811      	ldr	r1, [r2, #0]
 8007cb2:	f041 0101 	orr.w	r1, r1, #1
 8007cb6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007cb8:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007cbc:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007cc0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007cc2:	2002      	movs	r0, #2
 8007cc4:	e7fc      	b.n	8007cc0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007cc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cc6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cc8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007ccc:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cce:	2a20      	cmp	r2, #32
 8007cd0:	b2d4      	uxtb	r4, r2
 8007cd2:	d11b      	bne.n	8007d0c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cd4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007cd8:	2a01      	cmp	r2, #1
 8007cda:	d017      	beq.n	8007d0c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cdc:	2224      	movs	r2, #36	@ 0x24
 8007cde:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ce2:	6802      	ldr	r2, [r0, #0]
 8007ce4:	6810      	ldr	r0, [r2, #0]
 8007ce6:	f020 0001 	bic.w	r0, r0, #1
 8007cea:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cec:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cee:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cf2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007cf8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007cfa:	6811      	ldr	r1, [r2, #0]
 8007cfc:	f041 0101 	orr.w	r1, r1, #1
 8007d00:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d02:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007d06:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007d0a:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007d0c:	2002      	movs	r0, #2
 8007d0e:	e7fc      	b.n	8007d0a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007d10 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007d10:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8007d12:	2401      	movs	r4, #1
 8007d14:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8007d16:	2500      	movs	r5, #0
 8007d18:	194e      	adds	r6, r1, r5
 8007d1a:	443d      	add	r5, r7
 8007d1c:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8007d1e:	42be      	cmp	r6, r7
 8007d20:	d112      	bne.n	8007d48 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8007d22:	2c10      	cmp	r4, #16
 8007d24:	d108      	bne.n	8007d38 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8007d26:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007d28:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8007d2a:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8007d2c:	601d      	str	r5, [r3, #0]
  p = 0;
 8007d2e:	4623      	mov	r3, r4
  si = Huffsize[0];
 8007d30:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8007d32:	5cc8      	ldrb	r0, [r1, r3]
 8007d34:	b9d8      	cbnz	r0, 8007d6e <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8007d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8007d38:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8007d3a:	3401      	adds	r4, #1
 8007d3c:	197e      	adds	r6, r7, r5
 8007d3e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007d42:	d9e9      	bls.n	8007d18 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8007d44:	2001      	movs	r0, #1
 8007d46:	e7f6      	b.n	8007d36 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8007d48:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8007d4c:	e7e7      	b.n	8007d1e <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8007d4e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8007d52:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007d54:	5cc8      	ldrb	r0, [r1, r3]
 8007d56:	19dc      	adds	r4, r3, r7
 8007d58:	42a8      	cmp	r0, r5
 8007d5a:	d0f8      	beq.n	8007d4e <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8007d5c:	2d1f      	cmp	r5, #31
 8007d5e:	d8f1      	bhi.n	8007d44 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007d60:	fa06 f005 	lsl.w	r0, r6, r5
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d9ed      	bls.n	8007d44 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8007d68:	0064      	lsls	r4, r4, #1
    si++;
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	e7e1      	b.n	8007d32 <JPEG_Bits_To_SizeCodes+0x22>
 8007d6e:	1ae7      	subs	r7, r4, r3
 8007d70:	e7f0      	b.n	8007d54 <JPEG_Bits_To_SizeCodes+0x44>

08007d72 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d74:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8007d78:	460d      	mov	r5, r1
 8007d7a:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007d7c:	ab01      	add	r3, sp, #4
 8007d7e:	aa43      	add	r2, sp, #268	@ 0x10c
 8007d80:	a902      	add	r1, sp, #8
 8007d82:	f7ff ffc5 	bl	8007d10 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007d86:	b940      	cbnz	r0, 8007d9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8007d88:	9e01      	ldr	r6, [sp, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	f104 010f 	add.w	r1, r4, #15
 8007d92:	360f      	adds	r6, #15
 8007d94:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007d96:	42a1      	cmp	r1, r4
 8007d98:	d102      	bne.n	8007da0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007d9a:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007da0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007da4:	2e0b      	cmp	r6, #11
 8007da6:	d80a      	bhi.n	8007dbe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007da8:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007dac:	f853 cb04 	ldr.w	ip, [r3], #4
 8007db0:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007db4:	f812 7b01 	ldrb.w	r7, [r2], #1
 8007db8:	3f01      	subs	r7, #1
 8007dba:	55af      	strb	r7, [r5, r6]
      k++;
 8007dbc:	e7eb      	b.n	8007d96 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7eb      	b.n	8007d9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

08007dc2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007dc8:	681c      	ldr	r4, [r3, #0]
{
 8007dca:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007dcc:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d125      	bne.n	8007e20 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007dd4:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007dd8:	a901      	add	r1, sp, #4
 8007dda:	f7ff ffca 	bl	8007d72 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007dde:	b9e8      	cbnz	r0, 8007e1c <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007de0:	aa01      	add	r2, sp, #4
 8007de2:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007de6:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007dea:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007dec:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007dee:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007df0:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007df2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007df4:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8007df8:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007dfa:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007dfc:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007e00:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8007e04:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007e06:	7b13      	ldrb	r3, [r2, #12]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e0e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007e14:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007e18:	42b4      	cmp	r4, r6
 8007e1a:	d1e9      	bne.n	8007df0 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007e1c:	b011      	add	sp, #68	@ 0x44
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007e20:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d102      	bne.n	8007e2e <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007e28:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8007e2c:	e7d4      	b.n	8007dd8 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007e2e:	2001      	movs	r0, #1
 8007e30:	e7f4      	b.n	8007e1c <JPEG_Set_HuffDC_Mem+0x5a>

08007e32 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007e36:	6804      	ldr	r4, [r0, #0]
{
 8007e38:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8007e3c:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007e3e:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d149      	bne.n	8007eda <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007e46:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007e4a:	466b      	mov	r3, sp
 8007e4c:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007e50:	a901      	add	r1, sp, #4
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ff5c 	bl	8007d10 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d13a      	bne.n	8007ed2 <JPEG_Set_HuffAC_Mem+0xa0>
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	460d      	mov	r5, r1
 8007e60:	f106 0c0f 	add.w	ip, r6, #15
 8007e64:	4617      	mov	r7, r2
 8007e66:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007e68:	f04f 0e0a 	mov.w	lr, #10
 8007e6c:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007e6e:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8007e70:	4561      	cmp	r1, ip
 8007e72:	d139      	bne.n	8007ee8 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007e74:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007e78:	a942      	add	r1, sp, #264	@ 0x108
 8007e7a:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007e7e:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007e80:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007e82:	6063      	str	r3, [r4, #4]
 8007e84:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007e86:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007e8a:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007e8e:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007e90:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007e94:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007e96:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007e9a:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007e9c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007ea0:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ea2:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007ea6:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ea8:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8007eac:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007eae:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007eb0:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007eb4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007eb8:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007eba:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ec4:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eca:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007ece:	42b4      	cmp	r4, r6
 8007ed0:	d1e7      	bne.n	8007ea2 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007ed2:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007eda:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d10f      	bne.n	8007f02 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007ee2:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007ee6:	e7b0      	b.n	8007e4a <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007ee8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8007eec:	b15b      	cbz	r3, 8007f06 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007eee:	2bf0      	cmp	r3, #240	@ 0xf0
 8007ef0:	d015      	beq.n	8007f1e <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007ef2:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007ef4:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007efe:	2ba1      	cmp	r3, #161	@ 0xa1
 8007f00:	d902      	bls.n	8007f08 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7e5      	b.n	8007ed2 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8007f06:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007f08:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8007f0c:	f857 8b04 	ldr.w	r8, [r7], #4
 8007f10:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007f14:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007f18:	3a01      	subs	r2, #1
 8007f1a:	54f2      	strb	r2, [r6, r3]
      k++;
 8007f1c:	e7a8      	b.n	8007e70 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007f1e:	23a1      	movs	r3, #161	@ 0xa1
 8007f20:	e7f2      	b.n	8007f08 <JPEG_Set_HuffAC_Mem+0xd6>

08007f22 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007f22:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007f28:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f2a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007f2c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f2e:	f002 0203 	and.w	r2, r2, #3
 8007f32:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	bf0c      	ite	eq
 8007f38:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007f3c:	f022 0208 	bicne.w	r2, r2, #8
 8007f40:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007f50:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f64:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007f68:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007f72:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007f74:	f002 020c 	and.w	r2, r2, #12
 8007f78:	2a08      	cmp	r2, #8
 8007f7a:	d104      	bne.n	8007f86 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f7e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f84:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007f86:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007f88:	f002 020c 	and.w	r2, r2, #12
 8007f8c:	2a0c      	cmp	r2, #12
 8007f8e:	d1f9      	bne.n	8007f84 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f92:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007f96:	e7f4      	b.n	8007f82 <JPEG_Init_Process+0x60>

08007f98 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007f9a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007f9c:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007f9e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007fa0:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007fa2:	42aa      	cmp	r2, r5
 8007fa4:	d313      	bcc.n	8007fce <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007fa6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007fa8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007faa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007fac:	428b      	cmp	r3, r1
 8007fae:	d30e      	bcc.n	8007fce <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007fb0:	4f18      	ldr	r7, [pc, #96]	@ (8008014 <JPEG_DMA_StartProcess+0x7c>)
 8007fb2:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007fb4:	4f18      	ldr	r7, [pc, #96]	@ (8008018 <JPEG_DMA_StartProcess+0x80>)
 8007fb6:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007fb8:	4e18      	ldr	r6, [pc, #96]	@ (800801c <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007fba:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007fbc:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007fbe:	4e18      	ldr	r6, [pc, #96]	@ (8008020 <JPEG_DMA_StartProcess+0x88>)
 8007fc0:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007fc2:	b105      	cbz	r5, 8007fc6 <JPEG_DMA_StartProcess+0x2e>
 8007fc4:	b931      	cbnz	r1, 8007fd4 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007fc6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007fc8:	f043 0304 	orr.w	r3, r3, #4
 8007fcc:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007fce:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007fd0:	b003      	add	sp, #12
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007fd4:	fbb2 f6f5 	udiv	r6, r2, r5
 8007fd8:	fb05 2516 	mls	r5, r5, r6, r2
 8007fdc:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007fde:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007fe0:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007fe2:	fbb3 f2f1 	udiv	r2, r3, r1
 8007fe6:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007fea:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007fec:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007fee:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007ff2:	9500      	str	r5, [sp, #0]
 8007ff4:	69e2      	ldr	r2, [r4, #28]
 8007ff6:	f001 f810 	bl	800901a <HAL_MDMA_Start_IT>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d1e3      	bne.n	8007fc6 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	9500      	str	r5, [sp, #0]
 8008002:	3240      	adds	r2, #64	@ 0x40
 8008004:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008006:	69a1      	ldr	r1, [r4, #24]
 8008008:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800800a:	f001 f806 	bl	800901a <HAL_MDMA_Start_IT>
 800800e:	2800      	cmp	r0, #0
 8008010:	d0de      	beq.n	8007fd0 <JPEG_DMA_StartProcess+0x38>
 8008012:	e7d8      	b.n	8007fc6 <JPEG_DMA_StartProcess+0x2e>
 8008014:	08008557 	.word	0x08008557
 8008018:	08008453 	.word	0x08008453
 800801c:	08008a15 	.word	0x08008a15
 8008020:	08008a07 	.word	0x08008a07

08008024 <HAL_JPEG_Init>:
{
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8008026:	4605      	mov	r5, r0
 8008028:	2800      	cmp	r0, #0
 800802a:	f000 80f2 	beq.w	8008212 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800802e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008032:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008036:	b91b      	cbnz	r3, 8008040 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8008038:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800803c:	f7f9 f828 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8008040:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008042:	2302      	movs	r3, #2
 8008044:	4a86      	ldr	r2, [pc, #536]	@ (8008260 <HAL_JPEG_Init+0x23c>)
 8008046:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800804a:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800804e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008050:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008062:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008064:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008068:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800806a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800806c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008070:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008072:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008078:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800807a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800807c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008080:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008082:	4b78      	ldr	r3, [pc, #480]	@ (8008264 <HAL_JPEG_Init+0x240>)
 8008084:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008086:	4b78      	ldr	r3, [pc, #480]	@ (8008268 <HAL_JPEG_Init+0x244>)
 8008088:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800808a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800808c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008090:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8008092:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008094:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008096:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008098:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800809c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800809e:	4333      	orrs	r3, r6
 80080a0:	7c56      	ldrb	r6, [r2, #17]
 80080a2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80080a6:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80080aa:	4281      	cmp	r1, r0
 80080ac:	d1f0      	bne.n	8008090 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80080ae:	4b6f      	ldr	r3, [pc, #444]	@ (800826c <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80080b0:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80080b4:	4a6e      	ldr	r2, [pc, #440]	@ (8008270 <HAL_JPEG_Init+0x24c>)
 80080b6:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80080ba:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80080be:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80080c2:	4610      	mov	r0, r2
 80080c4:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80080c6:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80080ca:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80080ce:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80080d2:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80080d4:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80080d6:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80080da:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80080dc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80080e0:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80080e4:	ea43 030c 	orr.w	r3, r3, ip
 80080e8:	f890 c011 	ldrb.w	ip, [r0, #17]
 80080ec:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80080f0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80080f4:	42be      	cmp	r6, r7
 80080f6:	d1ec      	bne.n	80080d2 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80080f8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80080fc:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8008100:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8008104:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8008108:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800810c:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008110:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8008114:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008116:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800811a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800811c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008120:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008124:	4333      	orrs	r3, r6
 8008126:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800812a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800812e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008132:	4281      	cmp	r1, r0
 8008134:	d1ec      	bne.n	8008110 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8008136:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800813a:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800813e:	4a4d      	ldr	r2, [pc, #308]	@ (8008274 <HAL_JPEG_Init+0x250>)
 8008140:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8008144:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008146:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800814a:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800814e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008152:	4013      	ands	r3, r2
  *address = value;
 8008154:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008158:	2301      	movs	r3, #1
 800815a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800815e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8008162:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8008166:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800816a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800816e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008174:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8008178:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800817c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800817e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008182:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8008186:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800818a:	4b3b      	ldr	r3, [pc, #236]	@ (8008278 <HAL_JPEG_Init+0x254>)
 800818c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008190:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008194:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8008198:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800819c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800819e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 80081a2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 80081a6:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80081aa:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80081ac:	4a33      	ldr	r2, [pc, #204]	@ (800827c <HAL_JPEG_Init+0x258>)
 80081ae:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80081b2:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80081b6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80081ba:	4b31      	ldr	r3, [pc, #196]	@ (8008280 <HAL_JPEG_Init+0x25c>)
 80081bc:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80081c0:	4b30      	ldr	r3, [pc, #192]	@ (8008284 <HAL_JPEG_Init+0x260>)
 80081c2:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80081c6:	4b30      	ldr	r3, [pc, #192]	@ (8008288 <HAL_JPEG_Init+0x264>)
 80081c8:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80081cc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80081d0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80081d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80081d6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80081da:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80081de:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80081e0:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80081e4:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80081e6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80081ea:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80081ee:	4333      	orrs	r3, r6
 80081f0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80081f4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80081f8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80081fc:	4281      	cmp	r1, r0
 80081fe:	d1ec      	bne.n	80081da <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008200:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8008204:	491a      	ldr	r1, [pc, #104]	@ (8008270 <HAL_JPEG_Init+0x24c>)
 8008206:	4628      	mov	r0, r5
 8008208:	f7ff fe13 	bl	8007e32 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800820c:	b118      	cbz	r0, 8008216 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800820e:	2301      	movs	r3, #1
 8008210:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8008212:	2001      	movs	r0, #1
}
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008216:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800821a:	4918      	ldr	r1, [pc, #96]	@ (800827c <HAL_JPEG_Init+0x258>)
 800821c:	4628      	mov	r0, r5
 800821e:	f7ff fe08 	bl	8007e32 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008222:	2800      	cmp	r0, #0
 8008224:	d1f3      	bne.n	800820e <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008226:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800822a:	490d      	ldr	r1, [pc, #52]	@ (8008260 <HAL_JPEG_Init+0x23c>)
 800822c:	4628      	mov	r0, r5
 800822e:	f7ff fdc8 	bl	8007dc2 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008232:	2800      	cmp	r0, #0
 8008234:	d1eb      	bne.n	800820e <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008236:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800823a:	4914      	ldr	r1, [pc, #80]	@ (800828c <HAL_JPEG_Init+0x268>)
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff fdc0 	bl	8007dc2 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008242:	2800      	cmp	r0, #0
 8008244:	d1e3      	bne.n	800820e <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800824c:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800824e:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008250:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8008252:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008254:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008258:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800825a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800825c:	e7da      	b.n	8008214 <HAL_JPEG_Init+0x1f0>
 800825e:	bf00      	nop
 8008260:	08026228 	.word	0x08026228
 8008264:	08026028 	.word	0x08026028
 8008268:	08025fe8 	.word	0x08025fe8
 800826c:	0b0a0908 	.word	0x0b0a0908
 8008270:	0802615a 	.word	0x0802615a
 8008274:	ffff0000 	.word	0xffff0000
 8008278:	09080706 	.word	0x09080706
 800827c:	080260a8 	.word	0x080260a8
 8008280:	01000404 	.word	0x01000404
 8008284:	05070403 	.word	0x05070403
 8008288:	04040201 	.word	0x04040201
 800828c:	0802620c 	.word	0x0802620c

08008290 <HAL_JPEG_GetInfo>:
{
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008294:	2800      	cmp	r0, #0
 8008296:	d06f      	beq.n	8008378 <HAL_JPEG_GetInfo+0xe8>
 8008298:	2900      	cmp	r1, #0
 800829a:	d06d      	beq.n	8008378 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800829c:	6804      	ldr	r4, [r0, #0]
 800829e:	6863      	ldr	r3, [r4, #4]
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d047      	beq.n	8008338 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80082a8:	6863      	ldr	r3, [r4, #4]
 80082aa:	f013 0303 	ands.w	r3, r3, #3
 80082ae:	d005      	beq.n	80082bc <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80082b0:	6863      	ldr	r3, [r4, #4]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d15e      	bne.n	8008378 <HAL_JPEG_GetInfo+0xe8>
 80082ba:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80082bc:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80082be:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80082c0:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80082c4:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80082c6:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80082c8:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80082ca:	68e2      	ldr	r2, [r4, #12]
 80082cc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80082d0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80082d2:	d13c      	bne.n	800834e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80082d4:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80082d6:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80082d8:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80082dc:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80082de:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80082e0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80082e2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80082e6:	d129      	bne.n	800833c <HAL_JPEG_GetInfo+0xac>
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f013 0f0f 	tst.w	r3, #15
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80082f6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	3450      	adds	r4, #80	@ 0x50
 80082fc:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800837c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008300:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008302:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8008306:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800830a:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800830e:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8008312:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008314:	fa29 f206 	lsr.w	r2, r9, r6
 8008318:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800831a:	2a01      	cmp	r2, #1
 800831c:	d119      	bne.n	8008352 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800831e:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8008320:	3608      	adds	r6, #8
 8008322:	3701      	adds	r7, #1
 8008324:	2e20      	cmp	r6, #32
 8008326:	d1f5      	bne.n	8008314 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8008328:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800832a:	2d40      	cmp	r5, #64	@ 0x40
 800832c:	d1ed      	bne.n	800830a <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800832e:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008330:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008332:	610b      	str	r3, [r1, #16]
}
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	2310      	movs	r3, #16
 800833a:	e7bf      	b.n	80082bc <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800833c:	2d03      	cmp	r5, #3
 800833e:	d106      	bne.n	800834e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008340:	4313      	orrs	r3, r2
 8008342:	f013 0f0f 	tst.w	r3, #15
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	e7d3      	b.n	80082f6 <HAL_JPEG_GetInfo+0x66>
 800834e:	2300      	movs	r3, #0
 8008350:	e7d1      	b.n	80082f6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008352:	fb0e fb02 	mul.w	fp, lr, r2
 8008356:	f897 a000 	ldrb.w	sl, [r7]
 800835a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800835c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008360:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008364:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8008366:	bf8b      	itete	hi
 8008368:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800836c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008370:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008372:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008376:	e7d3      	b.n	8008320 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8008378:	2001      	movs	r0, #1
 800837a:	e7db      	b.n	8008334 <HAL_JPEG_GetInfo+0xa4>
 800837c:	08026068 	.word	0x08026068

08008380 <HAL_JPEG_Decode_DMA>:
{
 8008380:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008382:	4604      	mov	r4, r0
 8008384:	b348      	cbz	r0, 80083da <HAL_JPEG_Decode_DMA+0x5a>
 8008386:	b341      	cbz	r1, 80083da <HAL_JPEG_Decode_DMA+0x5a>
 8008388:	b33b      	cbz	r3, 80083da <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800838a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800838e:	2d01      	cmp	r5, #1
 8008390:	d028      	beq.n	80083e4 <HAL_JPEG_Decode_DMA+0x64>
 8008392:	2501      	movs	r5, #1
 8008394:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008398:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800839c:	2d01      	cmp	r5, #1
 800839e:	d11e      	bne.n	80083de <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80083a0:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 80083a2:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80083a4:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80083a8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80083aa:	f025 050f 	bic.w	r5, r5, #15
 80083ae:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80083b0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80083b2:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80083b6:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80083ba:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80083bc:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80083be:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80083c0:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80083c2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80083c4:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80083c6:	f7ff fdac 	bl	8007f22 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80083ca:	f7ff fde5 	bl	8007f98 <JPEG_DMA_StartProcess>
 80083ce:	b128      	cbz	r0, 80083dc <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80083d0:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80083d2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80083d6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80083da:	2001      	movs	r0, #1
}
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80083de:	2300      	movs	r3, #0
 80083e0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80083e4:	2002      	movs	r0, #2
 80083e6:	e7f9      	b.n	80083dc <HAL_JPEG_Decode_DMA+0x5c>

080083e8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80083e8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	2b0c      	cmp	r3, #12
 80083f0:	d10d      	bne.n	800840e <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80083f2:	07cb      	lsls	r3, r1, #31
 80083f4:	d503      	bpl.n	80083fe <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80083f6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80083f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083fc:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80083fe:	0789      	lsls	r1, r1, #30
 8008400:	d503      	bpl.n	800840a <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008402:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008404:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008408:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800840a:	2000      	movs	r0, #0
 800840c:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800840e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b08      	cmp	r3, #8
 8008416:	d1f8      	bne.n	800840a <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008418:	f011 0301 	ands.w	r3, r1, #1
 800841c:	d004      	beq.n	8008428 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800841e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008424:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008426:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008428:	078a      	lsls	r2, r1, #30
 800842a:	d505      	bpl.n	8008438 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800842c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800842e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008432:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008436:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008438:	6801      	ldr	r1, [r0, #0]
 800843a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800843c:	ea22 0303 	bic.w	r3, r2, r3
 8008440:	630b      	str	r3, [r1, #48]	@ 0x30
 8008442:	e7e2      	b.n	800840a <HAL_JPEG_Pause+0x22>

08008444 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008444:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008446:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008448:	4770      	bx	lr

0800844a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800844a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800844c:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800844e:	4770      	bx	lr

08008450 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008450:	4770      	bx	lr

08008452 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008452:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008454:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008456:	6803      	ldr	r3, [r0, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	f022 0201 	bic.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008462:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008466:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008468:	2301      	movs	r3, #1
 800846a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800846e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008470:	f043 0304 	orr.w	r3, r3, #4
 8008474:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008476:	f7fa f911 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 800847a:	bd08      	pop	{r3, pc}

0800847c <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800847c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800847e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008484:	b922      	cbnz	r2, 8008490 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008486:	2101      	movs	r1, #1
 8008488:	f7ff ffae 	bl	80083e8 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800848c:	2200      	movs	r2, #0
 800848e:	e004      	b.n	800849a <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008490:	6a03      	ldr	r3, [r0, #32]
 8008492:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008494:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008496:	d924      	bls.n	80084e2 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008498:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800849a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800849c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80084a0:	d11e      	bne.n	80084e0 <JPEG_ReadInputData+0x64>
 80084a2:	b1ea      	cbz	r2, 80084e0 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 80084a4:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80084a8:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 80084aa:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80084ae:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 80084b0:	d826      	bhi.n	8008500 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 80084b2:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80084b4:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80084b6:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80084b8:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 80084ba:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80084bc:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80084be:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80084c2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80084c6:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80084c8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80084cc:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80084d0:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80084d4:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80084d6:	6a22      	ldr	r2, [r4, #32]
 80084d8:	f102 0204 	add.w	r2, r2, #4
 80084dc:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80084de:	d1e8      	bne.n	80084b2 <JPEG_ReadInputData+0x36>
}
 80084e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1d2      	bne.n	800848c <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80084e6:	6a01      	ldr	r1, [r0, #32]
 80084e8:	f7fa f86a 	bl	80025c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80084ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80084ee:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80084f0:	bf84      	itt	hi
 80084f2:	f023 0303 	bichi.w	r3, r3, #3
 80084f6:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80084f8:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80084fa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80084fc:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80084fe:	e7cc      	b.n	800849a <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008500:	2a03      	cmp	r2, #3
 8008502:	d917      	bls.n	8008534 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 8008504:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008506:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008508:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800850a:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 800850c:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800850e:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008510:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008514:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008518:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800851a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800851e:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008522:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008526:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008528:	6a22      	ldr	r2, [r4, #32]
 800852a:	f102 0204 	add.w	r2, r2, #4
 800852e:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008530:	d8e8      	bhi.n	8008504 <JPEG_ReadInputData+0x88>
 8008532:	e7d5      	b.n	80084e0 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008534:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008536:	6a26      	ldr	r6, [r4, #32]
 8008538:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 800853a:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800853c:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 800853e:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008540:	fa06 f607 	lsl.w	r6, r6, r7
 8008544:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8008548:	6a26      	ldr	r6, [r4, #32]
 800854a:	f106 0601 	add.w	r6, r6, #1
 800854e:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008550:	d1f1      	bne.n	8008536 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008552:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008554:	e7c4      	b.n	80084e0 <JPEG_ReadInputData+0x64>

08008556 <JPEG_MDMAInCpltCallback>:
{
 8008556:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008558:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800855e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008562:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008564:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008566:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800856a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	0c1b      	lsrs	r3, r3, #16
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d11a      	bne.n	80085ac <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008576:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008578:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800857a:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800857c:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800857e:	695a      	ldr	r2, [r3, #20]
 8008580:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008582:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800858a:	6a21      	ldr	r1, [r4, #32]
 800858c:	f7fa f818 	bl	80025c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008590:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008592:	42ab      	cmp	r3, r5
 8008594:	d327      	bcc.n	80085e6 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008596:	b95d      	cbnz	r5, 80085b0 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008598:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800859a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800859c:	f043 0304 	orr.w	r3, r3, #4
 80085a0:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80085a2:	2306      	movs	r3, #6
 80085a4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80085a8:	f7fa f878 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 80085ac:	b003      	add	sp, #12
 80085ae:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80085b0:	fbb3 f2f5 	udiv	r2, r3, r5
 80085b4:	fb05 3212 	mls	r2, r5, r2, r3
 80085b8:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80085ba:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80085bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80085be:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80085c0:	04db      	lsls	r3, r3, #19
 80085c2:	d40a      	bmi.n	80085da <JPEG_MDMAInCpltCallback+0x84>
 80085c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80085c6:	b143      	cbz	r3, 80085da <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80085c8:	2101      	movs	r1, #1
 80085ca:	3240      	adds	r2, #64	@ 0x40
 80085cc:	9100      	str	r1, [sp, #0]
 80085ce:	69a1      	ldr	r1, [r4, #24]
 80085d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80085d2:	f000 fd22 	bl	800901a <HAL_MDMA_Start_IT>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d1de      	bne.n	8008598 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80085de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80085e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80085e4:	e7e2      	b.n	80085ac <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0e8      	beq.n	80085bc <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80085ea:	079a      	lsls	r2, r3, #30
 80085ec:	d0e6      	beq.n	80085bc <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	3304      	adds	r3, #4
 80085f4:	e7e1      	b.n	80085ba <JPEG_MDMAInCpltCallback+0x64>

080085f6 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80085f6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80085fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80085fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008600:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008602:	4293      	cmp	r3, r2
 8008604:	d32a      	bcc.n	800865c <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008606:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008608:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800860a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800860c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800860e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008610:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008612:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008614:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008616:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008618:	69e0      	ldr	r0, [r4, #28]
 800861a:	4428      	add	r0, r5
 800861c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008620:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008622:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008624:	69e0      	ldr	r0, [r4, #28]
 8008626:	4428      	add	r0, r5
 8008628:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800862c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008630:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008632:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008634:	69e0      	ldr	r0, [r4, #28]
 8008636:	4428      	add	r0, r5
 8008638:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800863a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800863c:	f103 0304 	add.w	r3, r3, #4
 8008640:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008642:	d1e1      	bne.n	8008608 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008644:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008646:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008648:	429a      	cmp	r2, r3
 800864a:	d106      	bne.n	800865a <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800864c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800864e:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008650:	4620      	mov	r0, r4
 8008652:	f7f9 ffd3 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800865c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800865e:	4293      	cmp	r3, r2
 8008660:	d9fb      	bls.n	800865a <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008662:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008664:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800866a:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800866c:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800866e:	d105      	bne.n	800867c <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008670:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008672:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008674:	429f      	cmp	r7, r3
 8008676:	d119      	bne.n	80086ac <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008678:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800867a:	e7e9      	b.n	8008650 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800867c:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800867e:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008682:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008684:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008686:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008688:	69e1      	ldr	r1, [r4, #28]
 800868a:	4429      	add	r1, r5
 800868c:	0a1d      	lsrs	r5, r3, #8
 800868e:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008690:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008692:	69e1      	ldr	r1, [r4, #28]
 8008694:	4429      	add	r1, r5
 8008696:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008698:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800869a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800869c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800869e:	69e1      	ldr	r1, [r4, #28]
 80086a0:	4429      	add	r1, r5
 80086a2:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80086a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80086a6:	3304      	adds	r3, #4
 80086a8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80086aa:	e7de      	b.n	800866a <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80086ac:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80086ae:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80086b0:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80086b2:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80086b4:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80086b6:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80086b8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80086ba:	d114      	bne.n	80086e6 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80086bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086be:	4620      	mov	r0, r4
 80086c0:	f7f9 ff9c 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80086c8:	1d2b      	adds	r3, r5, #4
 80086ca:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d8c4      	bhi.n	800865a <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80086d0:	00da      	lsls	r2, r3, #3
 80086d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80086d4:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80086d6:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80086d8:	fa26 f202 	lsr.w	r2, r6, r2
 80086dc:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80086de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086e0:	3201      	adds	r2, #1
 80086e2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80086e4:	e7f2      	b.n	80086cc <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80086e6:	f002 0303 	and.w	r3, r2, #3
 80086ea:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80086ee:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	fa26 f303 	lsr.w	r3, r6, r3
 80086f6:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80086fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80086fc:	3301      	adds	r3, #1
 80086fe:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008700:	e7d9      	b.n	80086b6 <JPEG_StoreOutputData+0xc0>

08008702 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008702:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	2b02      	cmp	r3, #2
{
 800870a:	b510      	push	{r4, lr}
 800870c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800870e:	d114      	bne.n	800873a <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008710:	6803      	ldr	r3, [r0, #0]
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	065b      	lsls	r3, r3, #25
 8008716:	d510      	bpl.n	800873a <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008718:	1d01      	adds	r1, r0, #4
 800871a:	f7ff fdb9 	bl	8008290 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800871e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008720:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008722:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008724:	f7f9 ff16 	bl	8002554 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800872c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008730:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008738:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800873a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800873c:	04d9      	lsls	r1, r3, #19
 800873e:	d407      	bmi.n	8008750 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008744:	0792      	lsls	r2, r2, #30
 8008746:	d544      	bpl.n	80087d2 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008748:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fe96 	bl	800847c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008750:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008752:	0499      	lsls	r1, r3, #18
 8008754:	d407      	bmi.n	8008766 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800875a:	0712      	lsls	r2, r2, #28
 800875c:	d53e      	bpl.n	80087dc <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800875e:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ff48 	bl	80085f6 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800876a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800876e:	2a20      	cmp	r2, #32
 8008770:	d13c      	bne.n	80087ec <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800877a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800877c:	f002 020c 	and.w	r2, r2, #12
 8008780:	2a08      	cmp	r2, #8
 8008782:	d103      	bne.n	800878c <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008786:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800878a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800878c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800878e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008794:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008796:	b133      	cbz	r3, 80087a6 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008798:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800879a:	4620      	mov	r0, r4
 800879c:	69e1      	ldr	r1, [r4, #28]
 800879e:	f7f9 ff2d 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80087a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80087a8:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80087aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087ac:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80087b0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087b4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80087b6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80087c0:	f04f 0201 	mov.w	r2, #1
 80087c4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087c8:	d10d      	bne.n	80087e6 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80087ca:	f7f9 ff69 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80087ce:	2001      	movs	r0, #1
}
 80087d0:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80087d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d4:	0758      	lsls	r0, r3, #29
 80087d6:	d5bb      	bpl.n	8008750 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80087d8:	2101      	movs	r1, #1
 80087da:	e7b6      	b.n	800874a <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80087dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087de:	06db      	lsls	r3, r3, #27
 80087e0:	d5c1      	bpl.n	8008766 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80087e2:	2101      	movs	r1, #1
 80087e4:	e7bc      	b.n	8008760 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80087e6:	f7ff fe33 	bl	8008450 <HAL_JPEG_EncodeCpltCallback>
 80087ea:	e7f0      	b.n	80087ce <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80087ec:	2000      	movs	r0, #0
 80087ee:	e7ef      	b.n	80087d0 <JPEG_Process+0xce>

080087f0 <JPEG_DMA_PollResidualData>:
{
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80087f6:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80087f8:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80087fa:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80087fe:	d122      	bne.n	8008846 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008802:	06d0      	lsls	r0, r2, #27
 8008804:	d51f      	bpl.n	8008846 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008808:	69e1      	ldr	r1, [r4, #28]
 800880a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800880c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800880e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008810:	69e2      	ldr	r2, [r4, #28]
 8008812:	440a      	add	r2, r1
 8008814:	0a19      	lsrs	r1, r3, #8
 8008816:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008818:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800881a:	69e2      	ldr	r2, [r4, #28]
 800881c:	440a      	add	r2, r1
 800881e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008820:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008822:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008824:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008826:	69e2      	ldr	r2, [r4, #28]
 8008828:	440a      	add	r2, r1
 800882a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800882c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800882e:	3304      	adds	r3, #4
 8008830:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008832:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008834:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008836:	429a      	cmp	r2, r3
 8008838:	d105      	bne.n	8008846 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800883a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800883c:	4620      	mov	r0, r4
 800883e:	69e1      	ldr	r1, [r4, #28]
 8008840:	f7f9 fedc 	bl	80025fc <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008844:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008846:	3e01      	subs	r6, #1
 8008848:	d1d5      	bne.n	80087f6 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800884a:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800884c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800884e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008850:	06c9      	lsls	r1, r1, #27
 8008852:	d501      	bpl.n	8008858 <JPEG_DMA_PollResidualData+0x68>
 8008854:	0492      	lsls	r2, r2, #18
 8008856:	d420      	bmi.n	800889a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008860:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008862:	b133      	cbz	r3, 8008872 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008864:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008866:	4620      	mov	r0, r4
 8008868:	69e1      	ldr	r1, [r4, #28]
 800886a:	f7f9 fec7 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008872:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008874:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008876:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008878:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800887c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008880:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008882:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800888c:	f04f 0201 	mov.w	r2, #1
 8008890:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008894:	d102      	bne.n	800889c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008896:	f7f9 ff03 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
}
 800889a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800889c:	f7ff fdd8 	bl	8008450 <HAL_JPEG_EncodeCpltCallback>
}
 80088a0:	e7fb      	b.n	800889a <JPEG_DMA_PollResidualData+0xaa>

080088a2 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80088a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088a4:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 80088a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088aa:	4604      	mov	r4, r0
 80088ac:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80088ae:	d014      	beq.n	80088da <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80088b0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088b2:	f003 030c 	and.w	r3, r3, #12
 80088b6:	2b0c      	cmp	r3, #12
 80088b8:	d146      	bne.n	8008948 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80088ba:	07cb      	lsls	r3, r1, #31
 80088bc:	d520      	bpl.n	8008900 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80088be:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088c4:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80088c6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80088c8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80088ca:	b941      	cbnz	r1, 80088de <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80088cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80088ce:	f043 0304 	orr.w	r3, r3, #4
 80088d2:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80088d4:	2306      	movs	r3, #6
 80088d6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80088da:	2001      	movs	r0, #1
 80088dc:	e01d      	b.n	800891a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80088de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088e0:	fbb3 f2f1 	udiv	r2, r3, r1
 80088e4:	fb01 3212 	mls	r2, r1, r2, r3
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 80088ec:	b143      	cbz	r3, 8008900 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	2101      	movs	r1, #1
 80088f2:	3240      	adds	r2, #64	@ 0x40
 80088f4:	9100      	str	r1, [sp, #0]
 80088f6:	69a1      	ldr	r1, [r4, #24]
 80088f8:	f000 fb8f 	bl	800901a <HAL_MDMA_Start_IT>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1e5      	bne.n	80088cc <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008900:	07a8      	lsls	r0, r5, #30
 8008902:	d509      	bpl.n	8008918 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008904:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800890a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800890c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800890e:	0419      	lsls	r1, r3, #16
 8008910:	d505      	bpl.n	800891e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff ff6c 	bl	80087f0 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008918:	2000      	movs	r0, #0
}
 800891a:	b003      	add	sp, #12
 800891c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800891e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008920:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8008922:	2900      	cmp	r1, #0
 8008924:	d0d2      	beq.n	80088cc <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008926:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008928:	fbb3 f2f1 	udiv	r2, r3, r1
 800892c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008930:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008932:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008934:	2201      	movs	r2, #1
 8008936:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008938:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800893a:	9200      	str	r2, [sp, #0]
 800893c:	69e2      	ldr	r2, [r4, #28]
 800893e:	f000 fb6c 	bl	800901a <HAL_MDMA_Start_IT>
 8008942:	2800      	cmp	r0, #0
 8008944:	d0e8      	beq.n	8008918 <HAL_JPEG_Resume+0x76>
 8008946:	e7c1      	b.n	80088cc <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008948:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	2b08      	cmp	r3, #8
 8008950:	d1e2      	bne.n	8008918 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008952:	f011 0301 	ands.w	r3, r1, #1
 8008956:	d004      	beq.n	8008962 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008958:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800895a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800895e:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008960:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008962:	07aa      	lsls	r2, r5, #30
 8008964:	d505      	bpl.n	8008972 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008966:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008968:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800896c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008970:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008972:	6821      	ldr	r1, [r4, #0]
 8008974:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008976:	4313      	orrs	r3, r2
 8008978:	630b      	str	r3, [r1, #48]	@ 0x30
 800897a:	e7cd      	b.n	8008918 <HAL_JPEG_Resume+0x76>

0800897c <JPEG_DMA_EndProcess>:
{
 800897c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800897e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008980:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008982:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008990:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008992:	429a      	cmp	r2, r3
 8008994:	d105      	bne.n	80089a2 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008996:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008998:	69c1      	ldr	r1, [r0, #28]
 800899a:	f7f9 fe2f 	bl	80025fc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80089a6:	f015 0510 	ands.w	r5, r5, #16
 80089aa:	d124      	bne.n	80089f6 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 80089ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80089ae:	b12b      	cbz	r3, 80089bc <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80089b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80089b2:	4620      	mov	r0, r4
 80089b4:	69e1      	ldr	r1, [r4, #28]
 80089b6:	f7f9 fe21 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80089ba:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80089bc:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80089be:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80089c0:	6813      	ldr	r3, [r2, #0]
 80089c2:	f023 0301 	bic.w	r3, r3, #1
 80089c6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80089c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80089ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80089cc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80089d0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80089d4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80089d6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80089e0:	f04f 0201 	mov.w	r2, #1
 80089e4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80089e8:	d102      	bne.n	80089f0 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80089ea:	f7f9 fe59 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
}
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80089f0:	f7ff fd2e 	bl	8008450 <HAL_JPEG_EncodeCpltCallback>
 80089f4:	e7fb      	b.n	80089ee <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80089f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80089f8:	049b      	lsls	r3, r3, #18
 80089fa:	d4f8      	bmi.n	80089ee <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80089fc:	4620      	mov	r0, r4
}
 80089fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008a02:	f7ff bef5 	b.w	80087f0 <JPEG_DMA_PollResidualData>

08008a06 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008a06:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008a08:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	d501      	bpl.n	8008a12 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8008a0e:	f7ff bfb5 	b.w	800897c <JPEG_DMA_EndProcess>
}
 8008a12:	4770      	bx	lr

08008a14 <JPEG_MDMAOutCpltCallback>:
{
 8008a14:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008a16:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a1c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008a20:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008a22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a24:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008a28:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008a2c:	0412      	lsls	r2, r2, #16
 8008a2e:	0c12      	lsrs	r2, r2, #16
 8008a30:	2a0c      	cmp	r2, #12
 8008a32:	d125      	bne.n	8008a80 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a36:	069a      	lsls	r2, r3, #26
 8008a38:	d424      	bmi.n	8008a84 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008a3a:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008a44:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008a4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008a4e:	f7f9 fdd5 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008a52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a54:	049b      	lsls	r3, r3, #18
 8008a56:	d415      	bmi.n	8008a84 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008a58:	6821      	ldr	r1, [r4, #0]
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	3144      	adds	r1, #68	@ 0x44
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008a62:	69e2      	ldr	r2, [r4, #28]
 8008a64:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008a66:	f000 fad8 	bl	800901a <HAL_MDMA_Start_IT>
 8008a6a:	b158      	cbz	r0, 8008a84 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a6c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008a6e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a70:	f043 0304 	orr.w	r3, r3, #4
 8008a74:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008a76:	2306      	movs	r3, #6
 8008a78:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008a7c:	f7f9 fe0e 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 8008a80:	b002      	add	sp, #8
 8008a82:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008a88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a8e:	e7f7      	b.n	8008a80 <JPEG_MDMAOutCpltCallback+0x6c>

08008a90 <HAL_JPEG_IRQHandler>:
{
 8008a90:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008a92:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008a96:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008a98:	3b03      	subs	r3, #3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d850      	bhi.n	8008b40 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008a9e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008aa0:	f003 030c 	and.w	r3, r3, #12
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d103      	bne.n	8008ab0 <HAL_JPEG_IRQHandler+0x20>
}
 8008aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008aac:	f7ff be29 	b.w	8008702 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008ab0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008ab2:	f003 030c 	and.w	r3, r3, #12
 8008ab6:	2b0c      	cmp	r3, #12
 8008ab8:	d142      	bne.n	8008b40 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008aba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d114      	bne.n	8008aee <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008ac4:	6803      	ldr	r3, [r0, #0]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac8:	0659      	lsls	r1, r3, #25
 8008aca:	d510      	bpl.n	8008aee <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008acc:	1d01      	adds	r1, r0, #4
 8008ace:	f7ff fbdf 	bl	8008290 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008ad2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008ad4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008ad6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008ad8:	f7f9 fd3c 	bl	8002554 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008aec:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af2:	0692      	lsls	r2, r2, #26
 8008af4:	d524      	bpl.n	8008b40 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008af6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008af8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008afe:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	f022 0201 	bic.w	r2, r2, #1
 8008b06:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b0a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b12:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008b16:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008b18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d101      	bne.n	8008b24 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8008b20:	f000 fac4 	bl	80090ac <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8008b24:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008b26:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d103      	bne.n	8008b36 <HAL_JPEG_IRQHandler+0xa6>
}
 8008b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8008b32:	f000 babb 	b.w	80090ac <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8008b36:	4620      	mov	r0, r4
}
 8008b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8008b3c:	f7ff bf1e 	b.w	800897c <JPEG_DMA_EndProcess>
}
 8008b40:	bd10      	pop	{r4, pc}
	...

08008b44 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b44:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b46:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b48:	3284      	adds	r2, #132	@ 0x84
 8008b4a:	1883      	adds	r3, r0, r2
{
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b4e:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b50:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b52:	684c      	ldr	r4, [r1, #4]
 8008b54:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b58:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b5c:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b5e:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b60:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b62:	f106 0c01 	add.w	ip, r6, #1
 8008b66:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008b68:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b6a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008b6e:	4465      	add	r5, ip
 8008b70:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b74:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008b76:	68c7      	ldr	r7, [r0, #12]
 8008b78:	68cd      	ldr	r5, [r1, #12]
 8008b7a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008b7e:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008b80:	689d      	ldr	r5, [r3, #8]
 8008b82:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8008b86:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b88:	688d      	ldr	r5, [r1, #8]
 8008b8a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8008b8e:	3501      	adds	r5, #1
 8008b90:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8008b94:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008b96:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b9a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008b9e:	698f      	ldr	r7, [r1, #24]
 8008ba0:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008ba4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008ba6:	691d      	ldr	r5, [r3, #16]
 8008ba8:	f025 0507 	bic.w	r5, r5, #7
 8008bac:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008bae:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008bb2:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8008bb6:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008bba:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008bbe:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008bc2:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008bc6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8008bca:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008bcc:	695d      	ldr	r5, [r3, #20]
 8008bce:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008bd2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008bd4:	694d      	ldr	r5, [r1, #20]
 8008bd6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008bd8:	69dd      	ldr	r5, [r3, #28]
 8008bda:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8008bde:	f025 0507 	bic.w	r5, r5, #7
 8008be2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008be4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008be8:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008bec:	bf88      	it	hi
 8008bee:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008bf0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008bf2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008bf4:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008bf6:	bf9c      	itt	ls
 8008bf8:	4d0c      	ldrls	r5, [pc, #48]	@ (8008c2c <LTDC_SetConfig+0xe8>)
 8008bfa:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008bfe:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008c00:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008c02:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008c06:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008c08:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008c0a:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008c0c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008c0e:	437d      	muls	r5, r7
 8008c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008c14:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008c16:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8008c18:	f36f 040a 	bfc	r4, #0, #11
 8008c1c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008c1e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008c20:	5883      	ldr	r3, [r0, r2]
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	5083      	str	r3, [r0, r2]
}
 8008c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08026244 	.word	0x08026244

08008c30 <HAL_LTDC_Init>:
{
 8008c30:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8008c32:	4604      	mov	r4, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d04e      	beq.n	8008cd6 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008c38:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8008c3c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008c40:	b91b      	cbnz	r3, 8008c4a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8008c42:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008c46:	f7f8 faa9 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	699a      	ldr	r2, [r3, #24]
 8008c54:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008c58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c5a:	6999      	ldr	r1, [r3, #24]
 8008c5c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008c60:	4302      	orrs	r2, r0
 8008c62:	68e0      	ldr	r0, [r4, #12]
 8008c64:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008c66:	6920      	ldr	r0, [r4, #16]
 8008c68:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008c6e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8008c72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008c76:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8008c78:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8008c7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008c80:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8008c82:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8008c86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008c8a:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8008c8c:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8008c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008c94:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008c98:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008c9c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008ca0:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008ca6:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008ca8:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8008cac:	432a      	orrs	r2, r5
 8008cae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008cb2:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008cb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cbc:	f042 0206 	orr.w	r2, r2, #6
 8008cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	f042 0201 	orr.w	r2, r2, #1
 8008cc8:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008cca:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008ccc:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008cd0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	e7fc      	b.n	8008cd4 <HAL_LTDC_Init+0xa4>

08008cda <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8008cda:	4770      	bx	lr

08008cdc <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8008cdc:	4770      	bx	lr

08008cde <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8008cde:	4770      	bx	lr

08008ce0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ce0:	6803      	ldr	r3, [r0, #0]
{
 8008ce2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ce4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8008ce6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008ce8:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008cea:	0772      	lsls	r2, r6, #29
 8008cec:	d514      	bpl.n	8008d18 <HAL_LTDC_IRQHandler+0x38>
 8008cee:	0769      	lsls	r1, r5, #29
 8008cf0:	d512      	bpl.n	8008d18 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf4:	f022 0204 	bic.w	r2, r2, #4
 8008cf8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008cfe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8008d0a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008d0c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008d10:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008d14:	f7ff ffe1 	bl	8008cda <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008d18:	07b2      	lsls	r2, r6, #30
 8008d1a:	d516      	bpl.n	8008d4a <HAL_LTDC_IRQHandler+0x6a>
 8008d1c:	07ab      	lsls	r3, r5, #30
 8008d1e:	d514      	bpl.n	8008d4a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008d20:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008d22:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d26:	f022 0202 	bic.w	r2, r2, #2
 8008d2a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008d30:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008d34:	4313      	orrs	r3, r2
 8008d36:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008d40:	2300      	movs	r3, #0
 8008d42:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008d46:	f7ff ffc8 	bl	8008cda <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008d4a:	07f0      	lsls	r0, r6, #31
 8008d4c:	d510      	bpl.n	8008d70 <HAL_LTDC_IRQHandler+0x90>
 8008d4e:	07e9      	lsls	r1, r5, #31
 8008d50:	d50e      	bpl.n	8008d70 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008d52:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008d54:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008d5e:	2201      	movs	r2, #1
 8008d60:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008d62:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008d64:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008d68:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008d6c:	f7ff ffb6 	bl	8008cdc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008d70:	0732      	lsls	r2, r6, #28
 8008d72:	d511      	bpl.n	8008d98 <HAL_LTDC_IRQHandler+0xb8>
 8008d74:	072b      	lsls	r3, r5, #28
 8008d76:	d50f      	bpl.n	8008d98 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008d78:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008d7a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d7e:	f022 0208 	bic.w	r2, r2, #8
 8008d82:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008d84:	2208      	movs	r2, #8
 8008d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008d94:	f7ff ffa3 	bl	8008cde <HAL_LTDC_ReloadEventCallback>
}
 8008d98:	bd70      	pop	{r4, r5, r6, pc}

08008d9a <HAL_LTDC_ConfigLayer>:
{
 8008d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008d9e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f04f 0002 	mov.w	r0, #2
 8008dae:	d01f      	beq.n	8008df0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008db0:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8008db2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008db6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008db8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008dbc:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008dc0:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008dc4:	3438      	adds	r4, #56	@ 0x38
 8008dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4662      	mov	r2, ip
 8008dd8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008dda:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008ddc:	f7ff feb2 	bl	8008b44 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008de0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008de2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008de4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008de8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008dec:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008df4 <HAL_LTDC_SetPitch>:
{
 8008df4:	4603      	mov	r3, r0
 8008df6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008df8:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 8008dfc:	2801      	cmp	r0, #1
 8008dfe:	f04f 0002 	mov.w	r0, #2
 8008e02:	d026      	beq.n	8008e52 <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e04:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008e08:	2034      	movs	r0, #52	@ 0x34
 8008e0a:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008e0e:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008e10:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008e12:	3284      	adds	r2, #132	@ 0x84
 8008e14:	2807      	cmp	r0, #7
 8008e16:	bf96      	itet	ls
 8008e18:	4c0e      	ldrls	r4, [pc, #56]	@ (8008e54 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008e1a:	2401      	movhi	r4, #1
 8008e1c:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008e1e:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008e20:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008e22:	4402      	add	r2, r0
 8008e24:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008e26:	f36f 401c 	bfc	r0, #16, #13
 8008e2a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008e2c:	480a      	ldr	r0, [pc, #40]	@ (8008e58 <HAL_LTDC_SetPitch+0x64>)
 8008e2e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8008e30:	f045 0501 	orr.w	r5, r5, #1
 8008e34:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008e36:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008e3c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008e3e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008e40:	f042 0201 	orr.w	r2, r2, #1
 8008e44:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008e46:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8008e48:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8008e4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008e4e:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	08026244 	.word	0x08026244
 8008e58:	50001000 	.word	0x50001000

08008e5c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008e5c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008e5e:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008e60:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008e64:	6965      	ldr	r5, [r4, #20]
 8008e66:	f363 0510 	bfi	r5, r3, #0, #17
 8008e6a:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008e6c:	9d03      	ldr	r5, [sp, #12]
 8008e6e:	6963      	ldr	r3, [r4, #20]
 8008e70:	f105 35ff 	add.w	r5, r5, #4294967295
 8008e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e78:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8008e7c:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008e7e:	f04f 031f 	mov.w	r3, #31
 8008e82:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008e84:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008e86:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008e88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e8a:	bf0c      	ite	eq
 8008e8c:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008e90:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008e94:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008e98:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008e9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e9c:	bf0c      	ite	eq
 8008e9e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008ea2:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008ea6:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008ea8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008eaa:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008eac:	bd30      	pop	{r4, r5, pc}

08008eae <HAL_MDMA_Init>:
{
 8008eae:	b538      	push	{r3, r4, r5, lr}
 8008eb0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008eb2:	f7fd fb4d 	bl	8006550 <HAL_GetTick>
 8008eb6:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d061      	beq.n	8008f80 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008ebc:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008ebe:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008ec0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008eca:	68d3      	ldr	r3, [r2, #12]
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	07d2      	lsls	r2, r2, #31
 8008ed8:	d448      	bmi.n	8008f6c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008eda:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008ee2:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	69e1      	ldr	r1, [r4, #28]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	6a21      	ldr	r1, [r4, #32]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008efa:	430a      	orrs	r2, r1
 8008efc:	68a1      	ldr	r1, [r4, #8]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008f02:	3901      	subs	r1, #1
 8008f04:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008f0e:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008f10:	d103      	bne.n	8008f1a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008f18:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008f1e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	da04      	bge.n	8008f2e <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008f24:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008f26:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008f28:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008f2c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008f2e:	b292      	uxth	r2, r2
 8008f30:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008f32:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	da25      	bge.n	8008f84 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008f38:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008f3a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008f3c:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008f40:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008f42:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008f44:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008f48:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008f4c:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	d019      	beq.n	8008f88 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008f54:	b2c9      	uxtb	r1, r1
 8008f56:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008f58:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8008f5a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008f5c:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8008f5e:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008f60:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008f62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008f66:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8008f6a:	e00a      	b.n	8008f82 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008f6c:	f7fd faf0 	bl	8006550 <HAL_GetTick>
 8008f70:	1b40      	subs	r0, r0, r5
 8008f72:	2805      	cmp	r0, #5
 8008f74:	d9ad      	bls.n	8008ed2 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008f76:	2340      	movs	r3, #64	@ 0x40
 8008f78:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008f80:	2001      	movs	r0, #1
}
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008f84:	6a18      	ldr	r0, [r3, #32]
 8008f86:	e7dd      	b.n	8008f44 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008f88:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f8a:	e7e5      	b.n	8008f58 <HAL_MDMA_Init+0xaa>

08008f8c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008f8c:	b1d8      	cbz	r0, 8008fc6 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008f8e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008f90:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008f92:	68d3      	ldr	r3, [r2, #12]
 8008f94:	f023 0301 	bic.w	r3, r3, #1
 8008f98:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008f9e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008fa0:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008fa2:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008fa4:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008fa6:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008fa8:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008faa:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008fac:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008fae:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008fb0:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008fb2:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008fb4:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008fb6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008fba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008fbe:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	4770      	bx	lr
    return HAL_ERROR;
 8008fc6:	2001      	movs	r0, #1
}
 8008fc8:	4770      	bx	lr

08008fca <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008fca:	4603      	mov	r3, r0
{
 8008fcc:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008fce:	b300      	cbz	r0, 8009012 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008fd0:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008fd4:	2801      	cmp	r0, #1
 8008fd6:	d01e      	beq.n	8009016 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008fd8:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008fda:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008fde:	42a5      	cmp	r5, r4
 8008fe0:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008fe2:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008fe6:	d112      	bne.n	800900e <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008fe8:	681c      	ldr	r4, [r3, #0]
 8008fea:	6925      	ldr	r5, [r4, #16]
 8008fec:	006d      	lsls	r5, r5, #1
 8008fee:	d407      	bmi.n	8009000 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008ff0:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008ff2:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008ff4:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008ff6:	b939      	cbnz	r1, 8009008 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008ff8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008ffc:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008ffe:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009006:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8009008:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800900c:	e7f6      	b.n	8008ffc <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800900e:	4620      	mov	r0, r4
 8009010:	e7f6      	b.n	8009000 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8009012:	2001      	movs	r0, #1
 8009014:	e7f7      	b.n	8009006 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8009016:	2002      	movs	r0, #2
 8009018:	e7f5      	b.n	8009006 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800901a <HAL_MDMA_Start_IT>:
{
 800901a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800901c:	4604      	mov	r4, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	d042      	beq.n	80090a8 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8009022:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8009026:	2d01      	cmp	r5, #1
 8009028:	d03c      	beq.n	80090a4 <HAL_MDMA_Start_IT+0x8a>
 800902a:	2501      	movs	r5, #1
 800902c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009030:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009034:	2d01      	cmp	r5, #1
 8009036:	f04f 0500 	mov.w	r5, #0
 800903a:	d131      	bne.n	80090a0 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800903c:	2602      	movs	r6, #2
 800903e:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009042:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009044:	6805      	ldr	r5, [r0, #0]
 8009046:	68ee      	ldr	r6, [r5, #12]
 8009048:	f026 0601 	bic.w	r6, r6, #1
 800904c:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800904e:	9e06      	ldr	r6, [sp, #24]
 8009050:	9600      	str	r6, [sp, #0]
 8009052:	f7ff ff03 	bl	8008e5c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8009056:	68eb      	ldr	r3, [r5, #12]
 8009058:	f043 0306 	orr.w	r3, r3, #6
 800905c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800905e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009060:	b11b      	cbz	r3, 800906a <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8009062:	68eb      	ldr	r3, [r5, #12]
 8009064:	f043 0310 	orr.w	r3, r3, #16
 8009068:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800906a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800906c:	b11b      	cbz	r3, 8009076 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800906e:	68eb      	ldr	r3, [r5, #12]
 8009070:	f043 0308 	orr.w	r3, r3, #8
 8009074:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8009076:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009078:	b11b      	cbz	r3, 8009082 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800907a:	68eb      	ldr	r3, [r5, #12]
 800907c:	f043 0320 	orr.w	r3, r3, #32
 8009080:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8009082:	68eb      	ldr	r3, [r5, #12]
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d103      	bne.n	800909a <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8009092:	68eb      	ldr	r3, [r5, #12]
 8009094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009098:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800909a:	2000      	movs	r0, #0
}
 800909c:	b002      	add	sp, #8
 800909e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 80090a0:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 80090a4:	2002      	movs	r0, #2
 80090a6:	e7f9      	b.n	800909c <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7f7      	b.n	800909c <HAL_MDMA_Start_IT+0x82>

080090ac <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 80090ac:	b128      	cbz	r0, 80090ba <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80090ae:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d003      	beq.n	80090be <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80090b6:	2380      	movs	r3, #128	@ 0x80
 80090b8:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
 80090bc:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 80090be:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80090c0:	2304      	movs	r3, #4
 80090c2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 80090c6:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 80090c8:	68d3      	ldr	r3, [r2, #12]
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	60d3      	str	r3, [r2, #12]
}
 80090d0:	4770      	bx	lr
	...

080090d4 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 80090d4:	2300      	movs	r3, #0
{
 80090d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 80090d8:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80090da:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 80090de:	4b58      	ldr	r3, [pc, #352]	@ (8009240 <HAL_MDMA_IRQHandler+0x16c>)
{
 80090e0:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80090e2:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80090e4:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80090e6:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80090e8:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80090ea:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 80090ee:	3a40      	subs	r2, #64	@ 0x40
 80090f0:	f3c2 1284 	ubfx	r2, r2, #6, #5
 80090f4:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80090f8:	4202      	tst	r2, r0
 80090fa:	f000 809e 	beq.w	800923a <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	07d1      	lsls	r1, r2, #31
 8009102:	d529      	bpl.n	8009158 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	0792      	lsls	r2, r2, #30
 8009108:	d526      	bpl.n	8009158 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	f022 0202 	bic.w	r2, r2, #2
 8009110:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8009112:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009114:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009116:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009118:	bf54      	ite	pl
 800911a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800911e:	f041 0102 	orrmi.w	r1, r1, #2
 8009122:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009124:	0591      	lsls	r1, r2, #22
 8009126:	d503      	bpl.n	8009130 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009128:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800912a:	f041 0104 	orr.w	r1, r1, #4
 800912e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009130:	05d0      	lsls	r0, r2, #23
 8009132:	d503      	bpl.n	800913c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009134:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009136:	f041 0108 	orr.w	r1, r1, #8
 800913a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800913c:	0551      	lsls	r1, r2, #21
 800913e:	d503      	bpl.n	8009148 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009140:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009142:	f041 0110 	orr.w	r1, r1, #16
 8009146:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009148:	0512      	lsls	r2, r2, #20
 800914a:	d503      	bpl.n	8009154 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800914c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800914e:	f042 0220 	orr.w	r2, r2, #32
 8009152:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009154:	2201      	movs	r2, #1
 8009156:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	06d0      	lsls	r0, r2, #27
 800915c:	d508      	bpl.n	8009170 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	0691      	lsls	r1, r2, #26
 8009162:	d505      	bpl.n	8009170 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009164:	2210      	movs	r2, #16
 8009166:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009168:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800916a:	b10b      	cbz	r3, 8009170 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800916c:	4620      	mov	r0, r4
 800916e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	0712      	lsls	r2, r2, #28
 8009176:	d508      	bpl.n	800918a <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	06d0      	lsls	r0, r2, #27
 800917c:	d505      	bpl.n	800918a <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800917e:	2208      	movs	r2, #8
 8009180:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8009182:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009184:	b10b      	cbz	r3, 800918a <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8009186:	4620      	mov	r0, r4
 8009188:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	0751      	lsls	r1, r2, #29
 8009190:	d508      	bpl.n	80091a4 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	0712      	lsls	r2, r2, #28
 8009196:	d505      	bpl.n	80091a4 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009198:	2204      	movs	r2, #4
 800919a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800919c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800919e:	b10b      	cbz	r3, 80091a4 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80091a0:	4620      	mov	r0, r4
 80091a2:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	0790      	lsls	r0, r2, #30
 80091aa:	d524      	bpl.n	80091f6 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	0751      	lsls	r1, r2, #29
 80091b0:	d521      	bpl.n	80091f6 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80091b8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80091ba:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80091be:	2a04      	cmp	r2, #4
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	d10c      	bne.n	80091e0 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 80091c6:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 80091c8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 80091cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 80091d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d031      	beq.n	800923a <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 80091d6:	4620      	mov	r0, r4
}
 80091d8:	b003      	add	sp, #12
 80091da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 80091de:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80091e0:	2102      	movs	r1, #2
 80091e2:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 80091e4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 80091e6:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 80091ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 80091ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80091f0:	b10b      	cbz	r3, 80091f6 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 80091f2:	4620      	mov	r0, r4
 80091f4:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80091f6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80091f8:	b1fb      	cbz	r3, 800923a <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 80091fa:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80091fe:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009202:	2304      	movs	r3, #4
 8009204:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	f022 0201 	bic.w	r2, r2, #1
 8009210:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8009212:	9a01      	ldr	r2, [sp, #4]
 8009214:	3201      	adds	r2, #1
 8009216:	42aa      	cmp	r2, r5
 8009218:	9201      	str	r2, [sp, #4]
 800921a:	d802      	bhi.n	8009222 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	07d2      	lsls	r2, r2, #31
 8009220:	d4f7      	bmi.n	8009212 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8009222:	2200      	movs	r2, #0
 8009224:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800922c:	bf4c      	ite	mi
 800922e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8009230:	2301      	movpl	r3, #1
 8009232:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8009236:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009238:	e7cb      	b.n	80091d2 <HAL_MDMA_IRQHandler+0xfe>
}
 800923a:	b003      	add	sp, #12
 800923c:	bd30      	pop	{r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	2400006c 	.word	0x2400006c

08009244 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009244:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009246:	4d1c      	ldr	r5, [pc, #112]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009248:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800924a:	68eb      	ldr	r3, [r5, #12]
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	2b06      	cmp	r3, #6
 8009252:	d006      	beq.n	8009262 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009254:	68e8      	ldr	r0, [r5, #12]
 8009256:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800925a:	1b00      	subs	r0, r0, r4
 800925c:	bf18      	it	ne
 800925e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009260:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009262:	68eb      	ldr	r3, [r5, #12]
 8009264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009268:	4303      	orrs	r3, r0
 800926a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800926c:	f7fd f970 	bl	8006550 <HAL_GetTick>
 8009270:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009272:	686b      	ldr	r3, [r5, #4]
 8009274:	049a      	lsls	r2, r3, #18
 8009276:	d508      	bpl.n	800928a <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009278:	f1a4 031d 	sub.w	r3, r4, #29
 800927c:	2b01      	cmp	r3, #1
 800927e:	d90c      	bls.n	800929a <HAL_PWREx_ConfigSupply+0x56>
 8009280:	3c2d      	subs	r4, #45	@ 0x2d
 8009282:	2c01      	cmp	r4, #1
 8009284:	d909      	bls.n	800929a <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8009286:	2000      	movs	r0, #0
 8009288:	e7ea      	b.n	8009260 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800928a:	f7fd f961 	bl	8006550 <HAL_GetTick>
 800928e:	1b80      	subs	r0, r0, r6
 8009290:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009294:	d9ed      	bls.n	8009272 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8009296:	2001      	movs	r0, #1
 8009298:	e7e2      	b.n	8009260 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800929a:	f7fd f959 	bl	8006550 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800929e:	4d06      	ldr	r5, [pc, #24]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80092a0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80092a2:	68eb      	ldr	r3, [r5, #12]
 80092a4:	03db      	lsls	r3, r3, #15
 80092a6:	d4ee      	bmi.n	8009286 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092a8:	f7fd f952 	bl	8006550 <HAL_GetTick>
 80092ac:	1b00      	subs	r0, r0, r4
 80092ae:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80092b2:	d9f6      	bls.n	80092a2 <HAL_PWREx_ConfigSupply+0x5e>
 80092b4:	e7ef      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x52>
 80092b6:	bf00      	nop
 80092b8:	58024800 	.word	0x58024800

080092bc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80092bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80092c0:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80092c2:	b134      	cbz	r4, 80092d2 <QSPI_Config+0x16>
 80092c4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 80092c8:	d003      	beq.n	80092d2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80092ca:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80092cc:	6805      	ldr	r5, [r0, #0]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80092d2:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80092d6:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80092da:	f1ba 0f00 	cmp.w	sl, #0
 80092de:	d052      	beq.n	8009386 <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80092e0:	694f      	ldr	r7, [r1, #20]
 80092e2:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80092e6:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80092e8:	04bf      	lsls	r7, r7, #18
 80092ea:	680b      	ldr	r3, [r1, #0]
 80092ec:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 80092f0:	ea4a 0a02 	orr.w	sl, sl, r2
 80092f4:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80092f8:	b34e      	cbz	r6, 800934e <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80092fa:	688c      	ldr	r4, [r1, #8]
 80092fc:	ea4a 0006 	orr.w	r0, sl, r6
 8009300:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009302:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009304:	f1bc 0f00 	cmp.w	ip, #0
 8009308:	d013      	beq.n	8009332 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800930a:	ea43 030c 	orr.w	r3, r3, ip
 800930e:	ea43 0309 	orr.w	r3, r3, r9
 8009312:	ea43 0308 	orr.w	r3, r3, r8
 8009316:	ea43 030e 	orr.w	r3, r3, lr
 800931a:	4323      	orrs	r3, r4
 800931c:	68cc      	ldr	r4, [r1, #12]
 800931e:	4323      	orrs	r3, r4
 8009320:	433b      	orrs	r3, r7
 8009322:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009324:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009328:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800932a:	d00e      	beq.n	800934a <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800932c:	684b      	ldr	r3, [r1, #4]
 800932e:	61ab      	str	r3, [r5, #24]
 8009330:	e00b      	b.n	800934a <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009332:	ea43 0309 	orr.w	r3, r3, r9
 8009336:	ea43 0308 	orr.w	r3, r3, r8
 800933a:	ea43 030e 	orr.w	r3, r3, lr
 800933e:	4323      	orrs	r3, r4
 8009340:	433b      	orrs	r3, r7
 8009342:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009344:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009346:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800934e:	f1bc 0f00 	cmp.w	ip, #0
 8009352:	d00d      	beq.n	8009370 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009354:	ea43 030c 	orr.w	r3, r3, ip
 8009358:	68c8      	ldr	r0, [r1, #12]
 800935a:	ea43 0309 	orr.w	r3, r3, r9
 800935e:	ea43 0308 	orr.w	r3, r3, r8
 8009362:	ea43 030e 	orr.w	r3, r3, lr
 8009366:	4303      	orrs	r3, r0
 8009368:	433b      	orrs	r3, r7
 800936a:	ea43 030a 	orr.w	r3, r3, sl
 800936e:	e7d9      	b.n	8009324 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009370:	ea43 0309 	orr.w	r3, r3, r9
 8009374:	ea43 0308 	orr.w	r3, r3, r8
 8009378:	ea43 000e 	orr.w	r0, r3, lr
 800937c:	ea40 0307 	orr.w	r3, r0, r7
 8009380:	ea43 030a 	orr.w	r3, r3, sl
 8009384:	e7de      	b.n	8009344 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009386:	b316      	cbz	r6, 80093ce <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009388:	688b      	ldr	r3, [r1, #8]
 800938a:	4326      	orrs	r6, r4
 800938c:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800938e:	694f      	ldr	r7, [r1, #20]
 8009390:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009392:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009394:	04bf      	lsls	r7, r7, #18
 8009396:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009398:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800939a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800939e:	f1bc 0f00 	cmp.w	ip, #0
 80093a2:	d00b      	beq.n	80093bc <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80093a4:	ea43 030c 	orr.w	r3, r3, ip
 80093a8:	68c8      	ldr	r0, [r1, #12]
 80093aa:	ea43 0308 	orr.w	r3, r3, r8
 80093ae:	ea43 030e 	orr.w	r3, r3, lr
 80093b2:	4323      	orrs	r3, r4
 80093b4:	4303      	orrs	r3, r0
 80093b6:	433b      	orrs	r3, r7
 80093b8:	4333      	orrs	r3, r6
 80093ba:	e7b3      	b.n	8009324 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80093bc:	ea43 0208 	orr.w	r2, r3, r8
 80093c0:	ea42 020e 	orr.w	r2, r2, lr
 80093c4:	4322      	orrs	r2, r4
 80093c6:	433a      	orrs	r2, r7
 80093c8:	4332      	orrs	r2, r6
 80093ca:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80093cc:	e7bb      	b.n	8009346 <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80093ce:	f1bc 0f00 	cmp.w	ip, #0
 80093d2:	d01a      	beq.n	800940a <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80093d4:	ea44 030c 	orr.w	r3, r4, ip
 80093d8:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80093da:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80093dc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80093e0:	ea43 0302 	orr.w	r3, r3, r2
 80093e4:	ea43 0304 	orr.w	r3, r3, r4
 80093e8:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 80093ea:	ea43 0304 	orr.w	r3, r3, r4
 80093ee:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 80093f0:	ea43 0304 	orr.w	r3, r3, r4
 80093f4:	68cc      	ldr	r4, [r1, #12]
 80093f6:	ea43 0304 	orr.w	r3, r3, r4
 80093fa:	694c      	ldr	r4, [r1, #20]
 80093fc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009400:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009402:	d0a2      	beq.n	800934a <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009404:	684b      	ldr	r3, [r1, #4]
 8009406:	6183      	str	r3, [r0, #24]
 8009408:	e79f      	b.n	800934a <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800940a:	2c00      	cmp	r4, #0
 800940c:	d09d      	beq.n	800934a <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800940e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009410:	6800      	ldr	r0, [r0, #0]
 8009412:	4323      	orrs	r3, r4
 8009414:	4313      	orrs	r3, r2
 8009416:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009418:	4313      	orrs	r3, r2
 800941a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800941c:	4313      	orrs	r3, r2
 800941e:	694a      	ldr	r2, [r1, #20]
 8009420:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009424:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8009426:	f8c0 c018 	str.w	ip, [r0, #24]
}
 800942a:	e78e      	b.n	800934a <QSPI_Config+0x8e>

0800942c <QSPI_WaitFlagStateUntilTimeout>:
{
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009434:	4604      	mov	r4, r0
 8009436:	460e      	mov	r6, r1
 8009438:	4615      	mov	r5, r2
 800943a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800943c:	6822      	ldr	r2, [r4, #0]
 800943e:	6893      	ldr	r3, [r2, #8]
 8009440:	4233      	tst	r3, r6
 8009442:	bf14      	ite	ne
 8009444:	2301      	movne	r3, #1
 8009446:	2300      	moveq	r3, #0
 8009448:	42ab      	cmp	r3, r5
 800944a:	d101      	bne.n	8009450 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800944c:	2000      	movs	r0, #0
 800944e:	e00f      	b.n	8009470 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009450:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009454:	d0f3      	beq.n	800943e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	f7fd f87b 	bl	8006550 <HAL_GetTick>
 800945a:	1bc0      	subs	r0, r0, r7
 800945c:	4540      	cmp	r0, r8
 800945e:	d909      	bls.n	8009474 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009460:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009462:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009464:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009468:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800946a:	f043 0301 	orr.w	r3, r3, #1
 800946e:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009474:	f1b8 0f00 	cmp.w	r8, #0
 8009478:	d1e0      	bne.n	800943c <QSPI_WaitFlagStateUntilTimeout+0x10>
 800947a:	e7f1      	b.n	8009460 <QSPI_WaitFlagStateUntilTimeout+0x34>

0800947c <HAL_QSPI_Init>:
{
 800947c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009480:	f7fd f866 	bl	8006550 <HAL_GetTick>
 8009484:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009486:	2c00      	cmp	r4, #0
 8009488:	d03f      	beq.n	800950a <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800948a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800948e:	b92b      	cbnz	r3, 800949c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009490:	4620      	mov	r0, r4
 8009492:	f7f7 fec1 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009496:	f241 3388 	movw	r3, #5000	@ 0x1388
 800949a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800949c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800949e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	680a      	ldr	r2, [r1, #0]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80094aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80094ae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80094b0:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80094b2:	2200      	movs	r2, #0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2120      	movs	r1, #32
 80094b8:	462b      	mov	r3, r5
 80094ba:	f7ff ffb7 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80094be:	bb10      	cbnz	r0, 8009506 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	69e5      	ldr	r5, [r4, #28]
 80094c4:	68e3      	ldr	r3, [r4, #12]
 80094c6:	6811      	ldr	r1, [r2, #0]
 80094c8:	432b      	orrs	r3, r5
 80094ca:	6a25      	ldr	r5, [r4, #32]
 80094cc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80094d0:	432b      	orrs	r3, r5
 80094d2:	6865      	ldr	r5, [r4, #4]
 80094d4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80094d8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80094dc:	430b      	orrs	r3, r1
 80094de:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80094e0:	6855      	ldr	r5, [r2, #4]
 80094e2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80094e6:	430b      	orrs	r3, r1
 80094e8:	6921      	ldr	r1, [r4, #16]
 80094ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80094ee:	4908      	ldr	r1, [pc, #32]	@ (8009510 <HAL_QSPI_Init+0x94>)
 80094f0:	4029      	ands	r1, r5
 80094f2:	430b      	orrs	r3, r1
 80094f4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80094fe:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009500:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009502:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009506:	b003      	add	sp, #12
 8009508:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800950a:	2001      	movs	r0, #1
 800950c:	e7fb      	b.n	8009506 <HAL_QSPI_Init+0x8a>
 800950e:	bf00      	nop
 8009510:	ffe0f8fe 	.word	0xffe0f8fe

08009514 <HAL_QSPI_Command>:
{
 8009514:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	468a      	mov	sl, r1
 800951c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800951e:	f7fd f817 	bl	8006550 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009522:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009526:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009528:	2b01      	cmp	r3, #1
 800952a:	d035      	beq.n	8009598 <HAL_QSPI_Command+0x84>
 800952c:	2301      	movs	r3, #1
 800952e:	2602      	movs	r6, #2
 8009530:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009534:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009538:	2b01      	cmp	r3, #1
 800953a:	fa5f f983 	uxtb.w	r9, r3
 800953e:	d129      	bne.n	8009594 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009540:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009542:	4603      	mov	r3, r0
 8009544:	2120      	movs	r1, #32
 8009546:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009548:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800954a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800954e:	f8cd 8000 	str.w	r8, [sp]
 8009552:	f7ff ff6b 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009556:	4605      	mov	r5, r0
 8009558:	b9a8      	cbnz	r0, 8009586 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800955a:	4602      	mov	r2, r0
 800955c:	4651      	mov	r1, sl
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff feac 	bl	80092bc <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009564:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009568:	b95b      	cbnz	r3, 8009582 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800956a:	463b      	mov	r3, r7
 800956c:	464a      	mov	r2, r9
 800956e:	4631      	mov	r1, r6
 8009570:	4620      	mov	r0, r4
 8009572:	f8cd 8000 	str.w	r8, [sp]
 8009576:	f7ff ff59 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800957a:	4605      	mov	r5, r0
 800957c:	b918      	cbnz	r0, 8009586 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009582:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009586:	2300      	movs	r3, #0
 8009588:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800958c:	4628      	mov	r0, r5
 800958e:	b002      	add	sp, #8
 8009590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009594:	4635      	mov	r5, r6
 8009596:	e7f6      	b.n	8009586 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009598:	2502      	movs	r5, #2
 800959a:	e7f7      	b.n	800958c <HAL_QSPI_Command+0x78>

0800959c <HAL_QSPI_Transmit>:
{
 800959c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	4688      	mov	r8, r1
 80095a4:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80095a6:	f7fc ffd3 	bl	8006550 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80095aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80095ae:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80095b0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d04c      	beq.n	8009650 <HAL_QSPI_Transmit+0xb4>
 80095b6:	2301      	movs	r3, #1
 80095b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80095bc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	b2d8      	uxtb	r0, r3
 80095c4:	d142      	bne.n	800964c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80095ca:	f1b8 0f00 	cmp.w	r8, #0
 80095ce:	d038      	beq.n	8009642 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80095d0:	2312      	movs	r3, #18
 80095d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80095d6:	692b      	ldr	r3, [r5, #16]
 80095d8:	3301      	adds	r3, #1
 80095da:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80095dc:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80095de:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80095e2:	3301      	adds	r3, #1
 80095e4:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80095e6:	696b      	ldr	r3, [r5, #20]
 80095e8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80095ec:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80095ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80095f0:	b99b      	cbnz	r3, 800961a <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80095f2:	4633      	mov	r3, r6
 80095f4:	2201      	movs	r2, #1
 80095f6:	2102      	movs	r1, #2
 80095f8:	4620      	mov	r0, r4
 80095fa:	9700      	str	r7, [sp, #0]
 80095fc:	f7ff ff16 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009600:	b910      	cbnz	r0, 8009608 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	2202      	movs	r2, #2
 8009606:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009608:	2301      	movs	r3, #1
 800960a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800960e:	2300      	movs	r3, #0
 8009610:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009614:	b002      	add	sp, #8
 8009616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800961a:	4633      	mov	r3, r6
 800961c:	2201      	movs	r2, #1
 800961e:	2104      	movs	r1, #4
 8009620:	4620      	mov	r0, r4
 8009622:	9700      	str	r7, [sp, #0]
 8009624:	f7ff ff02 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009628:	2800      	cmp	r0, #0
 800962a:	d1ed      	bne.n	8009608 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800962c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009634:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009636:	3301      	adds	r3, #1
 8009638:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800963a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800963c:	3b01      	subs	r3, #1
 800963e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009640:	e7d5      	b.n	80095ee <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009642:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009644:	f043 0308 	orr.w	r3, r3, #8
 8009648:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800964a:	e7e0      	b.n	800960e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800964c:	2002      	movs	r0, #2
 800964e:	e7de      	b.n	800960e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009650:	2002      	movs	r0, #2
 8009652:	e7df      	b.n	8009614 <HAL_QSPI_Transmit+0x78>

08009654 <HAL_QSPI_Receive>:
{
 8009654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	4617      	mov	r7, r2
 800965c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800965e:	f7fc ff77 	bl	8006550 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009662:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009664:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009666:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009668:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800966c:	2b01      	cmp	r3, #1
 800966e:	d04f      	beq.n	8009710 <HAL_QSPI_Receive+0xbc>
 8009670:	2301      	movs	r3, #1
 8009672:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009676:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800967a:	2b01      	cmp	r3, #1
 800967c:	b2d8      	uxtb	r0, r3
 800967e:	d145      	bne.n	800970c <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009680:	2300      	movs	r3, #0
 8009682:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009684:	f1b8 0f00 	cmp.w	r8, #0
 8009688:	d03b      	beq.n	8009702 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800968a:	2322      	movs	r3, #34	@ 0x22
 800968c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009690:	692b      	ldr	r3, [r5, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009696:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009698:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800969c:	3301      	adds	r3, #1
 800969e:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80096a0:	6969      	ldr	r1, [r5, #20]
 80096a2:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80096a6:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80096aa:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80096ac:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80096ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80096b0:	b99b      	cbnz	r3, 80096da <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80096b2:	4633      	mov	r3, r6
 80096b4:	2201      	movs	r2, #1
 80096b6:	2102      	movs	r1, #2
 80096b8:	4620      	mov	r0, r4
 80096ba:	9700      	str	r7, [sp, #0]
 80096bc:	f7ff feb6 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80096c0:	b910      	cbnz	r0, 80096c8 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	2202      	movs	r2, #2
 80096c6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80096ce:	2300      	movs	r3, #0
 80096d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80096d4:	b002      	add	sp, #8
 80096d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80096da:	4633      	mov	r3, r6
 80096dc:	2201      	movs	r2, #1
 80096de:	2106      	movs	r1, #6
 80096e0:	4620      	mov	r0, r4
 80096e2:	9700      	str	r7, [sp, #0]
 80096e4:	f7ff fea2 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d1ed      	bne.n	80096c8 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80096ec:	f895 2020 	ldrb.w	r2, [r5, #32]
 80096f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80096f2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80096f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80096f6:	3301      	adds	r3, #1
 80096f8:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 80096fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80096fc:	3b01      	subs	r3, #1
 80096fe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009700:	e7d5      	b.n	80096ae <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009702:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009704:	f043 0308 	orr.w	r3, r3, #8
 8009708:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800970a:	e7e0      	b.n	80096ce <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800970c:	2002      	movs	r0, #2
 800970e:	e7de      	b.n	80096ce <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009710:	2002      	movs	r0, #2
 8009712:	e7df      	b.n	80096d4 <HAL_QSPI_Receive+0x80>

08009714 <HAL_QSPI_AutoPolling>:
{
 8009714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009718:	4604      	mov	r4, r0
 800971a:	461f      	mov	r7, r3
 800971c:	4689      	mov	r9, r1
 800971e:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009720:	f7fc ff16 	bl	8006550 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009724:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009728:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800972a:	2b01      	cmp	r3, #1
 800972c:	d041      	beq.n	80097b2 <HAL_QSPI_AutoPolling+0x9e>
 800972e:	2301      	movs	r3, #1
 8009730:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009734:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009738:	2b01      	cmp	r3, #1
 800973a:	fa5f f883 	uxtb.w	r8, r3
 800973e:	d136      	bne.n	80097ae <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009740:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009742:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009744:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009746:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009748:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800974c:	4603      	mov	r3, r0
 800974e:	9700      	str	r7, [sp, #0]
 8009750:	4620      	mov	r0, r4
 8009752:	f7ff fe6b 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009756:	bb20      	cbnz	r0, 80097a2 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009758:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800975a:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800975c:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800975e:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009760:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009762:	686b      	ldr	r3, [r5, #4]
 8009764:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009766:	68ab      	ldr	r3, [r5, #8]
 8009768:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009770:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009772:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009778:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800977a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800977e:	68eb      	ldr	r3, [r5, #12]
 8009780:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009784:	f7ff fd9a 	bl	80092bc <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009788:	4633      	mov	r3, r6
 800978a:	4642      	mov	r2, r8
 800978c:	2108      	movs	r1, #8
 800978e:	4620      	mov	r0, r4
 8009790:	9700      	str	r7, [sp, #0]
 8009792:	f7ff fe4b 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009796:	b920      	cbnz	r0, 80097a2 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	2208      	movs	r2, #8
 800979c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800979e:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80097a2:	2300      	movs	r3, #0
 80097a4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80097a8:	b003      	add	sp, #12
 80097aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80097ae:	2002      	movs	r0, #2
 80097b0:	e7f7      	b.n	80097a2 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 80097b2:	2002      	movs	r0, #2
 80097b4:	e7f8      	b.n	80097a8 <HAL_QSPI_AutoPolling+0x94>

080097b6 <HAL_QSPI_MemoryMapped>:
{
 80097b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b8:	4604      	mov	r4, r0
 80097ba:	4616      	mov	r6, r2
 80097bc:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80097be:	f7fc fec7 	bl	8006550 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80097c2:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80097c6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80097c8:	2a01      	cmp	r2, #1
 80097ca:	d033      	beq.n	8009834 <HAL_QSPI_MemoryMapped+0x7e>
 80097cc:	2201      	movs	r2, #1
 80097ce:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80097d2:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80097d6:	2a01      	cmp	r2, #1
 80097d8:	d12a      	bne.n	8009830 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80097da:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80097dc:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80097de:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80097e0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80097e2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80097e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097e8:	9100      	str	r1, [sp, #0]
 80097ea:	2120      	movs	r1, #32
 80097ec:	f7ff fe1e 	bl	800942c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80097f0:	4605      	mov	r5, r0
 80097f2:	b9b8      	cbnz	r0, 8009824 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	6872      	ldr	r2, [r6, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80097fa:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80097fc:	f020 0008 	bic.w	r0, r0, #8
 8009800:	ea40 0002 	orr.w	r0, r0, r2
 8009804:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009806:	d107      	bne.n	8009818 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800980c:	2210      	movs	r2, #16
 800980e:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009816:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009818:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800981c:	4639      	mov	r1, r7
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff fd4c 	bl	80092bc <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009824:	2300      	movs	r3, #0
 8009826:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800982a:	4628      	mov	r0, r5
 800982c:	b003      	add	sp, #12
 800982e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009830:	2502      	movs	r5, #2
 8009832:	e7f7      	b.n	8009824 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009834:	2502      	movs	r5, #2
 8009836:	e7f8      	b.n	800982a <HAL_QSPI_MemoryMapped+0x74>

08009838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800983a:	4604      	mov	r4, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	d074      	beq.n	800992a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	07d8      	lsls	r0, r3, #31
 8009844:	d45e      	bmi.n	8009904 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	0799      	lsls	r1, r3, #30
 800984a:	f100 80ad 	bmi.w	80099a8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	06da      	lsls	r2, r3, #27
 8009852:	d527      	bpl.n	80098a4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009854:	4a9c      	ldr	r2, [pc, #624]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 8009856:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009858:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800985a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800985e:	2b08      	cmp	r3, #8
 8009860:	d007      	beq.n	8009872 <HAL_RCC_OscConfig+0x3a>
 8009862:	2b18      	cmp	r3, #24
 8009864:	f040 8103 	bne.w	8009a6e <HAL_RCC_OscConfig+0x236>
 8009868:	f001 0303 	and.w	r3, r1, #3
 800986c:	2b01      	cmp	r3, #1
 800986e:	f040 80fe 	bne.w	8009a6e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	05db      	lsls	r3, r3, #23
 8009876:	d502      	bpl.n	800987e <HAL_RCC_OscConfig+0x46>
 8009878:	69e3      	ldr	r3, [r4, #28]
 800987a:	2b80      	cmp	r3, #128	@ 0x80
 800987c:	d155      	bne.n	800992a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800987e:	f7fc fe7f 	bl	8006580 <HAL_GetREVID>
 8009882:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009886:	6a21      	ldr	r1, [r4, #32]
 8009888:	4298      	cmp	r0, r3
 800988a:	4b8f      	ldr	r3, [pc, #572]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 800988c:	f200 80e8 	bhi.w	8009a60 <HAL_RCC_OscConfig+0x228>
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	2920      	cmp	r1, #32
 8009894:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009898:	bf0c      	ite	eq
 800989a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800989e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80098a2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	0719      	lsls	r1, r3, #28
 80098a8:	f100 8123 	bmi.w	8009af2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	069a      	lsls	r2, r3, #26
 80098b0:	f100 8144 	bmi.w	8009b3c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	075d      	lsls	r5, r3, #29
 80098b8:	d51e      	bpl.n	80098f8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098ba:	4d84      	ldr	r5, [pc, #528]	@ (8009acc <HAL_RCC_OscConfig+0x294>)
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098c2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098c4:	f7fc fe44 	bl	8006550 <HAL_GetTick>
 80098c8:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	05da      	lsls	r2, r3, #23
 80098ce:	f140 815a 	bpl.w	8009b86 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	4d7c      	ldr	r5, [pc, #496]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	f040 815c 	bne.w	8009b94 <HAL_RCC_OscConfig+0x35c>
 80098dc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80098de:	f043 0301 	orr.w	r3, r3, #1
 80098e2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80098e8:	f7fc fe32 	bl	8006550 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098ec:	4e76      	ldr	r6, [pc, #472]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80098ee:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098f0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80098f2:	079b      	lsls	r3, r3, #30
 80098f4:	f140 8174 	bpl.w	8009be0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80098fa:	2900      	cmp	r1, #0
 80098fc:	f040 8177 	bne.w	8009bee <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009900:	2000      	movs	r0, #0
 8009902:	e02b      	b.n	800995c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009904:	4a70      	ldr	r2, [pc, #448]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 8009906:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009908:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800990a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800990e:	2b10      	cmp	r3, #16
 8009910:	d005      	beq.n	800991e <HAL_RCC_OscConfig+0xe6>
 8009912:	2b18      	cmp	r3, #24
 8009914:	d10b      	bne.n	800992e <HAL_RCC_OscConfig+0xf6>
 8009916:	f001 0303 	and.w	r3, r1, #3
 800991a:	2b02      	cmp	r3, #2
 800991c:	d107      	bne.n	800992e <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	039a      	lsls	r2, r3, #14
 8009922:	d590      	bpl.n	8009846 <HAL_RCC_OscConfig+0xe>
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d18d      	bne.n	8009846 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800992a:	2001      	movs	r0, #1
 800992c:	e016      	b.n	800995c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800992e:	6863      	ldr	r3, [r4, #4]
 8009930:	4d65      	ldr	r5, [pc, #404]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 8009932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009936:	d112      	bne.n	800995e <HAL_RCC_OscConfig+0x126>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800993e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009940:	f7fc fe06 	bl	8006550 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009944:	4e60      	ldr	r6, [pc, #384]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009946:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009948:	6833      	ldr	r3, [r6, #0]
 800994a:	039b      	lsls	r3, r3, #14
 800994c:	f53f af7b 	bmi.w	8009846 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009950:	f7fc fdfe 	bl	8006550 <HAL_GetTick>
 8009954:	1b40      	subs	r0, r0, r5
 8009956:	2864      	cmp	r0, #100	@ 0x64
 8009958:	d9f6      	bls.n	8009948 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800995a:	2003      	movs	r0, #3
}
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800995e:	b9a3      	cbnz	r3, 800998a <HAL_RCC_OscConfig+0x152>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800996e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009970:	f7fc fdee 	bl	8006550 <HAL_GetTick>
 8009974:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	039f      	lsls	r7, r3, #14
 800997a:	f57f af64 	bpl.w	8009846 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800997e:	f7fc fde7 	bl	8006550 <HAL_GetTick>
 8009982:	1b80      	subs	r0, r0, r6
 8009984:	2864      	cmp	r0, #100	@ 0x64
 8009986:	d9f6      	bls.n	8009976 <HAL_RCC_OscConfig+0x13e>
 8009988:	e7e7      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800998a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800998e:	682b      	ldr	r3, [r5, #0]
 8009990:	d103      	bne.n	800999a <HAL_RCC_OscConfig+0x162>
 8009992:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	e7ce      	b.n	8009938 <HAL_RCC_OscConfig+0x100>
 800999a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099a6:	e7ca      	b.n	800993e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a8:	4947      	ldr	r1, [pc, #284]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 80099aa:	68e2      	ldr	r2, [r4, #12]
 80099ac:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ae:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099b0:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80099b4:	d003      	beq.n	80099be <HAL_RCC_OscConfig+0x186>
 80099b6:	2b18      	cmp	r3, #24
 80099b8:	d12a      	bne.n	8009a10 <HAL_RCC_OscConfig+0x1d8>
 80099ba:	0780      	lsls	r0, r0, #30
 80099bc:	d128      	bne.n	8009a10 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099be:	680b      	ldr	r3, [r1, #0]
 80099c0:	075b      	lsls	r3, r3, #29
 80099c2:	d501      	bpl.n	80099c8 <HAL_RCC_OscConfig+0x190>
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	d0b0      	beq.n	800992a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099c8:	4d3f      	ldr	r5, [pc, #252]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	f023 0319 	bic.w	r3, r3, #25
 80099d0:	4313      	orrs	r3, r2
 80099d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80099d4:	f7fc fdbc 	bl	8006550 <HAL_GetTick>
 80099d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	075f      	lsls	r7, r3, #29
 80099de:	d511      	bpl.n	8009a04 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099e0:	f7fc fdce 	bl	8006580 <HAL_GetREVID>
 80099e4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80099e8:	6922      	ldr	r2, [r4, #16]
 80099ea:	4298      	cmp	r0, r3
 80099ec:	686b      	ldr	r3, [r5, #4]
 80099ee:	d822      	bhi.n	8009a36 <HAL_RCC_OscConfig+0x1fe>
 80099f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80099f4:	2a40      	cmp	r2, #64	@ 0x40
 80099f6:	bf0c      	ite	eq
 80099f8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80099fc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009a00:	606b      	str	r3, [r5, #4]
 8009a02:	e724      	b.n	800984e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a04:	f7fc fda4 	bl	8006550 <HAL_GetTick>
 8009a08:	1b80      	subs	r0, r0, r6
 8009a0a:	2802      	cmp	r0, #2
 8009a0c:	d9e5      	bls.n	80099da <HAL_RCC_OscConfig+0x1a2>
 8009a0e:	e7a4      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a10:	4d2d      	ldr	r5, [pc, #180]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a12:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a14:	b1a2      	cbz	r2, 8009a40 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a16:	f023 0319 	bic.w	r3, r3, #25
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a1e:	f7fc fd97 	bl	8006550 <HAL_GetTick>
 8009a22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	0758      	lsls	r0, r3, #29
 8009a28:	d4da      	bmi.n	80099e0 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a2a:	f7fc fd91 	bl	8006550 <HAL_GetTick>
 8009a2e:	1b80      	subs	r0, r0, r6
 8009a30:	2802      	cmp	r0, #2
 8009a32:	d9f7      	bls.n	8009a24 <HAL_RCC_OscConfig+0x1ec>
 8009a34:	e791      	b.n	800995a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a36:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009a3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a3e:	e7df      	b.n	8009a00 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a46:	f7fc fd83 	bl	8006550 <HAL_GetTick>
 8009a4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	0759      	lsls	r1, r3, #29
 8009a50:	f57f aefd 	bpl.w	800984e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a54:	f7fc fd7c 	bl	8006550 <HAL_GetTick>
 8009a58:	1b80      	subs	r0, r0, r6
 8009a5a:	2802      	cmp	r0, #2
 8009a5c:	d9f6      	bls.n	8009a4c <HAL_RCC_OscConfig+0x214>
 8009a5e:	e77c      	b.n	800995a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009a66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	e71a      	b.n	80098a4 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a6e:	69e3      	ldr	r3, [r4, #28]
 8009a70:	4d15      	ldr	r5, [pc, #84]	@ (8009ac8 <HAL_RCC_OscConfig+0x290>)
 8009a72:	b36b      	cbz	r3, 8009ad0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a7c:	f7fc fd68 	bl	8006550 <HAL_GetTick>
 8009a80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	05df      	lsls	r7, r3, #23
 8009a86:	d511      	bpl.n	8009aac <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a88:	f7fc fd7a 	bl	8006580 <HAL_GetREVID>
 8009a8c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009a90:	6a22      	ldr	r2, [r4, #32]
 8009a92:	4298      	cmp	r0, r3
 8009a94:	d810      	bhi.n	8009ab8 <HAL_RCC_OscConfig+0x280>
 8009a96:	686b      	ldr	r3, [r5, #4]
 8009a98:	2a20      	cmp	r2, #32
 8009a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009a9e:	bf0c      	ite	eq
 8009aa0:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009aa4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009aa8:	606b      	str	r3, [r5, #4]
 8009aaa:	e6fb      	b.n	80098a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009aac:	f7fc fd50 	bl	8006550 <HAL_GetTick>
 8009ab0:	1b80      	subs	r0, r0, r6
 8009ab2:	2802      	cmp	r0, #2
 8009ab4:	d9e5      	bls.n	8009a82 <HAL_RCC_OscConfig+0x24a>
 8009ab6:	e750      	b.n	800995a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ab8:	68eb      	ldr	r3, [r5, #12]
 8009aba:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8009abe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ac2:	60eb      	str	r3, [r5, #12]
 8009ac4:	e6ee      	b.n	80098a4 <HAL_RCC_OscConfig+0x6c>
 8009ac6:	bf00      	nop
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ad6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009ad8:	f7fc fd3a 	bl	8006550 <HAL_GetTick>
 8009adc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	05d8      	lsls	r0, r3, #23
 8009ae2:	f57f aedf 	bpl.w	80098a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ae6:	f7fc fd33 	bl	8006550 <HAL_GetTick>
 8009aea:	1b80      	subs	r0, r0, r6
 8009aec:	2802      	cmp	r0, #2
 8009aee:	d9f6      	bls.n	8009ade <HAL_RCC_OscConfig+0x2a6>
 8009af0:	e733      	b.n	800995a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009af2:	6963      	ldr	r3, [r4, #20]
 8009af4:	4da3      	ldr	r5, [pc, #652]	@ (8009d84 <HAL_RCC_OscConfig+0x54c>)
 8009af6:	b183      	cbz	r3, 8009b1a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009af8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009afa:	f043 0301 	orr.w	r3, r3, #1
 8009afe:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009b00:	f7fc fd26 	bl	8006550 <HAL_GetTick>
 8009b04:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b06:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009b08:	079b      	lsls	r3, r3, #30
 8009b0a:	f53f aecf 	bmi.w	80098ac <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b0e:	f7fc fd1f 	bl	8006550 <HAL_GetTick>
 8009b12:	1b80      	subs	r0, r0, r6
 8009b14:	2802      	cmp	r0, #2
 8009b16:	d9f6      	bls.n	8009b06 <HAL_RCC_OscConfig+0x2ce>
 8009b18:	e71f      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009b1a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009b1c:	f023 0301 	bic.w	r3, r3, #1
 8009b20:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009b22:	f7fc fd15 	bl	8006550 <HAL_GetTick>
 8009b26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b28:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009b2a:	079f      	lsls	r7, r3, #30
 8009b2c:	f57f aebe 	bpl.w	80098ac <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b30:	f7fc fd0e 	bl	8006550 <HAL_GetTick>
 8009b34:	1b80      	subs	r0, r0, r6
 8009b36:	2802      	cmp	r0, #2
 8009b38:	d9f6      	bls.n	8009b28 <HAL_RCC_OscConfig+0x2f0>
 8009b3a:	e70e      	b.n	800995a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b3c:	69a3      	ldr	r3, [r4, #24]
 8009b3e:	4d91      	ldr	r5, [pc, #580]	@ (8009d84 <HAL_RCC_OscConfig+0x54c>)
 8009b40:	b183      	cbz	r3, 8009b64 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b48:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009b4a:	f7fc fd01 	bl	8006550 <HAL_GetTick>
 8009b4e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	0498      	lsls	r0, r3, #18
 8009b54:	f53f aeae 	bmi.w	80098b4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b58:	f7fc fcfa 	bl	8006550 <HAL_GetTick>
 8009b5c:	1b80      	subs	r0, r0, r6
 8009b5e:	2802      	cmp	r0, #2
 8009b60:	d9f6      	bls.n	8009b50 <HAL_RCC_OscConfig+0x318>
 8009b62:	e6fa      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009b6c:	f7fc fcf0 	bl	8006550 <HAL_GetTick>
 8009b70:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	0499      	lsls	r1, r3, #18
 8009b76:	f57f ae9d 	bpl.w	80098b4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b7a:	f7fc fce9 	bl	8006550 <HAL_GetTick>
 8009b7e:	1b80      	subs	r0, r0, r6
 8009b80:	2802      	cmp	r0, #2
 8009b82:	d9f6      	bls.n	8009b72 <HAL_RCC_OscConfig+0x33a>
 8009b84:	e6e9      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b86:	f7fc fce3 	bl	8006550 <HAL_GetTick>
 8009b8a:	1b80      	subs	r0, r0, r6
 8009b8c:	2864      	cmp	r0, #100	@ 0x64
 8009b8e:	f67f ae9c 	bls.w	80098ca <HAL_RCC_OscConfig+0x92>
 8009b92:	e6e2      	b.n	800995a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b94:	b9b3      	cbnz	r3, 8009bc4 <HAL_RCC_OscConfig+0x38c>
 8009b96:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b98:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	672b      	str	r3, [r5, #112]	@ 0x70
 8009ba2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009ba4:	f023 0304 	bic.w	r3, r3, #4
 8009ba8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8009baa:	f7fc fcd1 	bl	8006550 <HAL_GetTick>
 8009bae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009bb2:	0798      	lsls	r0, r3, #30
 8009bb4:	f57f aea0 	bpl.w	80098f8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb8:	f7fc fcca 	bl	8006550 <HAL_GetTick>
 8009bbc:	1b80      	subs	r0, r0, r6
 8009bbe:	42b8      	cmp	r0, r7
 8009bc0:	d9f6      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x378>
 8009bc2:	e6ca      	b.n	800995a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bc4:	2b05      	cmp	r3, #5
 8009bc6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009bc8:	d103      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x39a>
 8009bca:	f043 0304 	orr.w	r3, r3, #4
 8009bce:	672b      	str	r3, [r5, #112]	@ 0x70
 8009bd0:	e684      	b.n	80098dc <HAL_RCC_OscConfig+0xa4>
 8009bd2:	f023 0301 	bic.w	r3, r3, #1
 8009bd6:	672b      	str	r3, [r5, #112]	@ 0x70
 8009bd8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009bda:	f023 0304 	bic.w	r3, r3, #4
 8009bde:	e680      	b.n	80098e2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009be0:	f7fc fcb6 	bl	8006550 <HAL_GetTick>
 8009be4:	1b40      	subs	r0, r0, r5
 8009be6:	42b8      	cmp	r0, r7
 8009be8:	f67f ae82 	bls.w	80098f0 <HAL_RCC_OscConfig+0xb8>
 8009bec:	e6b5      	b.n	800995a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009bee:	4d65      	ldr	r5, [pc, #404]	@ (8009d84 <HAL_RCC_OscConfig+0x54c>)
 8009bf0:	692b      	ldr	r3, [r5, #16]
 8009bf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bf6:	2b18      	cmp	r3, #24
 8009bf8:	d078      	beq.n	8009cec <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8009bfa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bfc:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8009bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c02:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c04:	d165      	bne.n	8009cd2 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 8009c06:	f7fc fca3 	bl	8006550 <HAL_GetTick>
 8009c0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	0199      	lsls	r1, r3, #6
 8009c10:	d459      	bmi.n	8009cc6 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c12:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009c14:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009c16:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c22:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009c26:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009c28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	3a01      	subs	r2, #1
 8009c30:	025b      	lsls	r3, r3, #9
 8009c32:	0412      	lsls	r2, r2, #16
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009c3e:	3a01      	subs	r2, #1
 8009c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c44:	4313      	orrs	r3, r2
 8009c46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009c48:	3a01      	subs	r2, #1
 8009c4a:	0612      	lsls	r2, r2, #24
 8009c4c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c50:	4313      	orrs	r3, r2
 8009c52:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009c54:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c5c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009c5e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009c60:	f36f 03cf 	bfc	r3, #3, #13
 8009c64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009c68:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c6c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009c6e:	f023 030c 	bic.w	r3, r3, #12
 8009c72:	4313      	orrs	r3, r2
 8009c74:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009c76:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c78:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009c7a:	f023 0302 	bic.w	r3, r3, #2
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c88:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c90:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c98:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009c9c:	f043 0301 	orr.w	r3, r3, #1
 8009ca0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ca8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009caa:	f7fc fc51 	bl	8006550 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009cae:	4d35      	ldr	r5, [pc, #212]	@ (8009d84 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8009cb0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	019a      	lsls	r2, r3, #6
 8009cb6:	f53f ae23 	bmi.w	8009900 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cba:	f7fc fc49 	bl	8006550 <HAL_GetTick>
 8009cbe:	1b00      	subs	r0, r0, r4
 8009cc0:	2802      	cmp	r0, #2
 8009cc2:	d9f6      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x47a>
 8009cc4:	e649      	b.n	800995a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cc6:	f7fc fc43 	bl	8006550 <HAL_GetTick>
 8009cca:	1b80      	subs	r0, r0, r6
 8009ccc:	2802      	cmp	r0, #2
 8009cce:	d99d      	bls.n	8009c0c <HAL_RCC_OscConfig+0x3d4>
 8009cd0:	e643      	b.n	800995a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009cd2:	f7fc fc3d 	bl	8006550 <HAL_GetTick>
 8009cd6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	019b      	lsls	r3, r3, #6
 8009cdc:	f57f ae10 	bpl.w	8009900 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ce0:	f7fc fc36 	bl	8006550 <HAL_GetTick>
 8009ce4:	1b00      	subs	r0, r0, r4
 8009ce6:	2802      	cmp	r0, #2
 8009ce8:	d9f6      	bls.n	8009cd8 <HAL_RCC_OscConfig+0x4a0>
 8009cea:	e636      	b.n	800995a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cec:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009cee:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009cf0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cf2:	f43f ae1a 	beq.w	800992a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cf6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cfa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009cfc:	4281      	cmp	r1, r0
 8009cfe:	f47f ae14 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d02:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d08:	428a      	cmp	r2, r1
 8009d0a:	f47f ae0e 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d0e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009d10:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009d14:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d16:	4291      	cmp	r1, r2
 8009d18:	f47f ae07 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d1c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d1e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009d22:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d24:	4291      	cmp	r1, r2
 8009d26:	f47f ae00 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009d2c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009d30:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d32:	4291      	cmp	r1, r2
 8009d34:	f47f adf9 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d38:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009d3a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009d3e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d40:	4293      	cmp	r3, r2
 8009d42:	f47f adf2 	bne.w	800992a <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d46:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d48:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d4a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	f43f add6 	beq.w	8009900 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d54:	4d0b      	ldr	r5, [pc, #44]	@ (8009d84 <HAL_RCC_OscConfig+0x54c>)
 8009d56:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009d58:	f023 0301 	bic.w	r3, r3, #1
 8009d5c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009d5e:	f7fc fbf7 	bl	8006550 <HAL_GetTick>
 8009d62:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d64:	f7fc fbf4 	bl	8006550 <HAL_GetTick>
 8009d68:	42b0      	cmp	r0, r6
 8009d6a:	d0fb      	beq.n	8009d64 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d6c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009d6e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009d70:	f36f 03cf 	bfc	r3, #3, #13
 8009d74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009d78:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009d82:	e5bd      	b.n	8009900 <HAL_RCC_OscConfig+0xc8>
 8009d84:	58024400 	.word	0x58024400

08009d88 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	4c23      	ldr	r4, [pc, #140]	@ (8009e18 <HAL_RCC_MCOConfig+0x90>)
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	460e      	mov	r6, r1
 8009d90:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009d92:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009d96:	b9f8      	cbnz	r0, 8009dd8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009d98:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d9c:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009da0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009da2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009da6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009daa:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db4:	2302      	movs	r3, #2
 8009db6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dba:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dbc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009dc0:	4816      	ldr	r0, [pc, #88]	@ (8009e1c <HAL_RCC_MCOConfig+0x94>)
 8009dc2:	f7fd fa4b 	bl	800725c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8009dcc:	ea43 0106 	orr.w	r1, r3, r6
 8009dd0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009dd2:	6121      	str	r1, [r4, #16]
  }
}
 8009dd4:	b008      	add	sp, #32
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009dd8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de0:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009de2:	480f      	ldr	r0, [pc, #60]	@ (8009e20 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009de4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009de8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	9302      	str	r3, [sp, #8]
 8009df2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df4:	2302      	movs	r3, #2
 8009df6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009e00:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009e02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009e04:	f7fd fa2a 	bl	800725c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009e0e:	ea43 0106 	orr.w	r1, r3, r6
 8009e12:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009e16:	e7dc      	b.n	8009dd2 <HAL_RCC_MCOConfig+0x4a>
 8009e18:	58024400 	.word	0x58024400
 8009e1c:	58020000 	.word	0x58020000
 8009e20:	58020800 	.word	0x58020800

08009e24 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e24:	4b49      	ldr	r3, [pc, #292]	@ (8009f4c <HAL_RCC_GetSysClockFreq+0x128>)
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009e2c:	2a10      	cmp	r2, #16
{
 8009e2e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e30:	f000 8088 	beq.w	8009f44 <HAL_RCC_GetSysClockFreq+0x120>
 8009e34:	2a18      	cmp	r2, #24
 8009e36:	d00c      	beq.n	8009e52 <HAL_RCC_GetSysClockFreq+0x2e>
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	f040 8085 	bne.w	8009f48 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	4843      	ldr	r0, [pc, #268]	@ (8009f50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009e42:	f012 0f20 	tst.w	r2, #32
 8009e46:	d003      	beq.n	8009e50 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009e4e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009e50:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e52:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009e54:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009e56:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009e58:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009e5c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009e62:	d0f5      	beq.n	8009e50 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e64:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009e68:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e6c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e70:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e74:	4362      	muls	r2, r4
 8009e76:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 8009e7a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e80:	ee06 2a90 	vmov	s13, r2
 8009e84:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8009e88:	d04e      	beq.n	8009f28 <HAL_RCC_GetSysClockFreq+0x104>
 8009e8a:	2902      	cmp	r1, #2
 8009e8c:	d03e      	beq.n	8009f0c <HAL_RCC_GetSysClockFreq+0xe8>
 8009e8e:	2900      	cmp	r1, #0
 8009e90:	d14a      	bne.n	8009f28 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	0692      	lsls	r2, r2, #26
 8009e96:	d527      	bpl.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8009f50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009e9c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ea2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea8:	ee07 2a90 	vmov	s15, r2
 8009eac:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009eb0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009eb4:	ee07 3a10 	vmov	s14, r3
 8009eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ebc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009ec0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009ec8:	4b20      	ldr	r3, [pc, #128]	@ (8009f4c <HAL_RCC_GetSysClockFreq+0x128>)
 8009eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ecc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ed0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009ed2:	ee07 3a10 	vmov	s14, r3
 8009ed6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009ede:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009ee2:	ee17 0a90 	vmov	r0, s15
 8009ee6:	e7b3      	b.n	8009e50 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009efe:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009f54 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f02:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009f0a:	e7dd      	b.n	8009ec8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f12:	ee07 3a90 	vmov	s15, r3
 8009f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f22:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009f58 <HAL_RCC_GetSysClockFreq+0x134>
 8009f26:	e7ec      	b.n	8009f02 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f3e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009f5c <HAL_RCC_GetSysClockFreq+0x138>
 8009f42:	e7de      	b.n	8009f02 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f44:	4806      	ldr	r0, [pc, #24]	@ (8009f60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009f46:	e783      	b.n	8009e50 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009f48:	4806      	ldr	r0, [pc, #24]	@ (8009f64 <HAL_RCC_GetSysClockFreq+0x140>)
 8009f4a:	e781      	b.n	8009e50 <HAL_RCC_GetSysClockFreq+0x2c>
 8009f4c:	58024400 	.word	0x58024400
 8009f50:	03d09000 	.word	0x03d09000
 8009f54:	4c742400 	.word	0x4c742400
 8009f58:	4bbebc20 	.word	0x4bbebc20
 8009f5c:	4a742400 	.word	0x4a742400
 8009f60:	017d7840 	.word	0x017d7840
 8009f64:	003d0900 	.word	0x003d0900

08009f68 <HAL_RCC_ClockConfig>:
{
 8009f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009f6e:	4604      	mov	r4, r0
 8009f70:	b910      	cbnz	r0, 8009f78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009f72:	2001      	movs	r0, #1
}
 8009f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f78:	4a88      	ldr	r2, [pc, #544]	@ (800a19c <HAL_RCC_ClockConfig+0x234>)
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	428b      	cmp	r3, r1
 8009f82:	f0c0 8093 	bcc.w	800a0ac <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	075f      	lsls	r7, r3, #29
 8009f8a:	f100 809b 	bmi.w	800a0c4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f8e:	071e      	lsls	r6, r3, #28
 8009f90:	d50b      	bpl.n	8009faa <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f92:	4983      	ldr	r1, [pc, #524]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 8009f94:	6960      	ldr	r0, [r4, #20]
 8009f96:	69ca      	ldr	r2, [r1, #28]
 8009f98:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009f9c:	4290      	cmp	r0, r2
 8009f9e:	d904      	bls.n	8009faa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fa0:	69ca      	ldr	r2, [r1, #28]
 8009fa2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009fa6:	4302      	orrs	r2, r0
 8009fa8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009faa:	06d8      	lsls	r0, r3, #27
 8009fac:	d50b      	bpl.n	8009fc6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fae:	497c      	ldr	r1, [pc, #496]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 8009fb0:	69a0      	ldr	r0, [r4, #24]
 8009fb2:	69ca      	ldr	r2, [r1, #28]
 8009fb4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009fb8:	4290      	cmp	r0, r2
 8009fba:	d904      	bls.n	8009fc6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fbc:	69ca      	ldr	r2, [r1, #28]
 8009fbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009fc2:	4302      	orrs	r2, r0
 8009fc4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fc6:	0699      	lsls	r1, r3, #26
 8009fc8:	d50b      	bpl.n	8009fe2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fca:	4975      	ldr	r1, [pc, #468]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 8009fcc:	69e0      	ldr	r0, [r4, #28]
 8009fce:	6a0a      	ldr	r2, [r1, #32]
 8009fd0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009fd4:	4290      	cmp	r0, r2
 8009fd6:	d904      	bls.n	8009fe2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fd8:	6a0a      	ldr	r2, [r1, #32]
 8009fda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009fde:	4302      	orrs	r2, r0
 8009fe0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fe2:	079a      	lsls	r2, r3, #30
 8009fe4:	d50b      	bpl.n	8009ffe <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009fe6:	496e      	ldr	r1, [pc, #440]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 8009fe8:	68e0      	ldr	r0, [r4, #12]
 8009fea:	698a      	ldr	r2, [r1, #24]
 8009fec:	f002 020f 	and.w	r2, r2, #15
 8009ff0:	4290      	cmp	r0, r2
 8009ff2:	d904      	bls.n	8009ffe <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ff4:	698a      	ldr	r2, [r1, #24]
 8009ff6:	f022 020f 	bic.w	r2, r2, #15
 8009ffa:	4302      	orrs	r2, r0
 8009ffc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ffe:	07df      	lsls	r7, r3, #31
 800a000:	d46e      	bmi.n	800a0e0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	079e      	lsls	r6, r3, #30
 800a006:	f100 80a1 	bmi.w	800a14c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a00a:	4964      	ldr	r1, [pc, #400]	@ (800a19c <HAL_RCC_ClockConfig+0x234>)
 800a00c:	680a      	ldr	r2, [r1, #0]
 800a00e:	f002 020f 	and.w	r2, r2, #15
 800a012:	42aa      	cmp	r2, r5
 800a014:	f200 80a8 	bhi.w	800a168 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a018:	0758      	lsls	r0, r3, #29
 800a01a:	f100 80b1 	bmi.w	800a180 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a01e:	0719      	lsls	r1, r3, #28
 800a020:	d50b      	bpl.n	800a03a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a022:	495f      	ldr	r1, [pc, #380]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a024:	6960      	ldr	r0, [r4, #20]
 800a026:	69ca      	ldr	r2, [r1, #28]
 800a028:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a02c:	4290      	cmp	r0, r2
 800a02e:	d204      	bcs.n	800a03a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a030:	69ca      	ldr	r2, [r1, #28]
 800a032:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a036:	4302      	orrs	r2, r0
 800a038:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a03a:	06da      	lsls	r2, r3, #27
 800a03c:	d50b      	bpl.n	800a056 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a03e:	4958      	ldr	r1, [pc, #352]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a040:	69a0      	ldr	r0, [r4, #24]
 800a042:	69ca      	ldr	r2, [r1, #28]
 800a044:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a048:	4290      	cmp	r0, r2
 800a04a:	d204      	bcs.n	800a056 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a04c:	69ca      	ldr	r2, [r1, #28]
 800a04e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a052:	4302      	orrs	r2, r0
 800a054:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a056:	069b      	lsls	r3, r3, #26
 800a058:	d50b      	bpl.n	800a072 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a05a:	4a51      	ldr	r2, [pc, #324]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a05c:	69e1      	ldr	r1, [r4, #28]
 800a05e:	6a13      	ldr	r3, [r2, #32]
 800a060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a064:	4299      	cmp	r1, r3
 800a066:	d204      	bcs.n	800a072 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a068:	6a13      	ldr	r3, [r2, #32]
 800a06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06e:	430b      	orrs	r3, r1
 800a070:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a072:	f7ff fed7 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800a076:	494a      	ldr	r1, [pc, #296]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a078:	4a4a      	ldr	r2, [pc, #296]	@ (800a1a4 <HAL_RCC_ClockConfig+0x23c>)
 800a07a:	698b      	ldr	r3, [r1, #24]
 800a07c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a080:	5cd3      	ldrb	r3, [r2, r3]
 800a082:	f003 031f 	and.w	r3, r3, #31
 800a086:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a088:	698b      	ldr	r3, [r1, #24]
 800a08a:	f003 030f 	and.w	r3, r3, #15
 800a08e:	5cd3      	ldrb	r3, [r2, r3]
 800a090:	4a45      	ldr	r2, [pc, #276]	@ (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	fa20 f303 	lsr.w	r3, r0, r3
 800a09a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a09c:	4b43      	ldr	r3, [pc, #268]	@ (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a09e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a0a0:	4b43      	ldr	r3, [pc, #268]	@ (800a1b0 <HAL_RCC_ClockConfig+0x248>)
}
 800a0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a0a6:	6818      	ldr	r0, [r3, #0]
 800a0a8:	f7f7 ba5e 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ac:	6813      	ldr	r3, [r2, #0]
 800a0ae:	f023 030f 	bic.w	r3, r3, #15
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	f47f af58 	bne.w	8009f72 <HAL_RCC_ClockConfig+0xa>
 800a0c2:	e760      	b.n	8009f86 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0c4:	4936      	ldr	r1, [pc, #216]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a0c6:	6920      	ldr	r0, [r4, #16]
 800a0c8:	698a      	ldr	r2, [r1, #24]
 800a0ca:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a0ce:	4290      	cmp	r0, r2
 800a0d0:	f67f af5d 	bls.w	8009f8e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0d4:	698a      	ldr	r2, [r1, #24]
 800a0d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a0da:	4302      	orrs	r2, r0
 800a0dc:	618a      	str	r2, [r1, #24]
 800a0de:	e756      	b.n	8009f8e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a0e2:	68a1      	ldr	r1, [r4, #8]
 800a0e4:	699a      	ldr	r2, [r3, #24]
 800a0e6:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0ee:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0f0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0f2:	2902      	cmp	r1, #2
 800a0f4:	d11d      	bne.n	800a132 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0f6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0fa:	f43f af3a 	beq.w	8009f72 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0fe:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a100:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a104:	4f26      	ldr	r7, [pc, #152]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a106:	f022 0207 	bic.w	r2, r2, #7
 800a10a:	430a      	orrs	r2, r1
 800a10c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a10e:	f7fc fa1f 	bl	8006550 <HAL_GetTick>
 800a112:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6862      	ldr	r2, [r4, #4]
 800a118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a11c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a120:	f43f af6f 	beq.w	800a002 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a124:	f7fc fa14 	bl	8006550 <HAL_GetTick>
 800a128:	1b80      	subs	r0, r0, r6
 800a12a:	4540      	cmp	r0, r8
 800a12c:	d9f2      	bls.n	800a114 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a12e:	2003      	movs	r0, #3
 800a130:	e720      	b.n	8009f74 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a132:	2903      	cmp	r1, #3
 800a134:	d102      	bne.n	800a13c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a136:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a13a:	e7de      	b.n	800a0fa <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a13c:	2901      	cmp	r1, #1
 800a13e:	d102      	bne.n	800a146 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a140:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a144:	e7d9      	b.n	800a0fa <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a146:	f012 0f04 	tst.w	r2, #4
 800a14a:	e7d6      	b.n	800a0fa <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a14c:	4914      	ldr	r1, [pc, #80]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a14e:	68e0      	ldr	r0, [r4, #12]
 800a150:	698a      	ldr	r2, [r1, #24]
 800a152:	f002 020f 	and.w	r2, r2, #15
 800a156:	4290      	cmp	r0, r2
 800a158:	f4bf af57 	bcs.w	800a00a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a15c:	698a      	ldr	r2, [r1, #24]
 800a15e:	f022 020f 	bic.w	r2, r2, #15
 800a162:	4302      	orrs	r2, r0
 800a164:	618a      	str	r2, [r1, #24]
 800a166:	e750      	b.n	800a00a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a168:	680a      	ldr	r2, [r1, #0]
 800a16a:	f022 020f 	bic.w	r2, r2, #15
 800a16e:	432a      	orrs	r2, r5
 800a170:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a172:	680a      	ldr	r2, [r1, #0]
 800a174:	f002 020f 	and.w	r2, r2, #15
 800a178:	42aa      	cmp	r2, r5
 800a17a:	f47f aefa 	bne.w	8009f72 <HAL_RCC_ClockConfig+0xa>
 800a17e:	e74b      	b.n	800a018 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a180:	4907      	ldr	r1, [pc, #28]	@ (800a1a0 <HAL_RCC_ClockConfig+0x238>)
 800a182:	6920      	ldr	r0, [r4, #16]
 800a184:	698a      	ldr	r2, [r1, #24]
 800a186:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a18a:	4290      	cmp	r0, r2
 800a18c:	f4bf af47 	bcs.w	800a01e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a190:	698a      	ldr	r2, [r1, #24]
 800a192:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a196:	4302      	orrs	r2, r0
 800a198:	618a      	str	r2, [r1, #24]
 800a19a:	e740      	b.n	800a01e <HAL_RCC_ClockConfig+0xb6>
 800a19c:	52002000 	.word	0x52002000
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	08025fd8 	.word	0x08025fd8
 800a1a8:	24000068 	.word	0x24000068
 800a1ac:	2400006c 	.word	0x2400006c
 800a1b0:	24000074 	.word	0x24000074

0800a1b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1b4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1b6:	f7ff fe35 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800a1ba:	4a0b      	ldr	r2, [pc, #44]	@ (800a1e8 <HAL_RCC_GetHCLKFreq+0x34>)
 800a1bc:	490b      	ldr	r1, [pc, #44]	@ (800a1ec <HAL_RCC_GetHCLKFreq+0x38>)
 800a1be:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1c0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1c6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1ca:	5ccb      	ldrb	r3, [r1, r3]
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1d4:	5c88      	ldrb	r0, [r1, r2]
 800a1d6:	4a06      	ldr	r2, [pc, #24]	@ (800a1f0 <HAL_RCC_GetHCLKFreq+0x3c>)
 800a1d8:	f000 001f 	and.w	r0, r0, #31
 800a1dc:	fa23 f000 	lsr.w	r0, r3, r0
 800a1e0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1e2:	4a04      	ldr	r2, [pc, #16]	@ (800a1f4 <HAL_RCC_GetHCLKFreq+0x40>)
 800a1e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a1e6:	bd08      	pop	{r3, pc}
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	08025fd8 	.word	0x08025fd8
 800a1f0:	24000068 	.word	0x24000068
 800a1f4:	2400006c 	.word	0x2400006c

0800a1f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1f8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a1fa:	f7ff ffdb 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 800a1fe:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a200:	4a05      	ldr	r2, [pc, #20]	@ (800a218 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a208:	5cd3      	ldrb	r3, [r2, r3]
 800a20a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a20e:	40d8      	lsrs	r0, r3
 800a210:	bd08      	pop	{r3, pc}
 800a212:	bf00      	nop
 800a214:	58024400 	.word	0x58024400
 800a218:	08025fd8 	.word	0x08025fd8

0800a21c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a21c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a21e:	f7ff ffc9 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 800a222:	4b05      	ldr	r3, [pc, #20]	@ (800a238 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a224:	4a05      	ldr	r2, [pc, #20]	@ (800a23c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a22c:	5cd3      	ldrb	r3, [r2, r3]
 800a22e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a232:	40d8      	lsrs	r0, r3
 800a234:	bd08      	pop	{r3, pc}
 800a236:	bf00      	nop
 800a238:	58024400 	.word	0x58024400
 800a23c:	08025fd8 	.word	0x08025fd8

0800a240 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a240:	233f      	movs	r3, #63	@ 0x3f
 800a242:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a244:	4b11      	ldr	r3, [pc, #68]	@ (800a28c <HAL_RCC_GetClockConfig+0x4c>)
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	f002 0207 	and.w	r2, r2, #7
 800a24c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a24e:	699a      	ldr	r2, [r3, #24]
 800a250:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a254:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a256:	699a      	ldr	r2, [r3, #24]
 800a258:	f002 020f 	and.w	r2, r2, #15
 800a25c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a264:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a26c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a26e:	69da      	ldr	r2, [r3, #28]
 800a270:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a274:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a27c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <HAL_RCC_GetClockConfig+0x50>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 030f 	and.w	r3, r3, #15
 800a286:	600b      	str	r3, [r1, #0]
}
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
 800a290:	52002000 	.word	0x52002000

0800a294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a296:	4c39      	ldr	r4, [pc, #228]	@ (800a37c <RCCEx_PLL2_Config+0xe8>)
{
 800a298:	4606      	mov	r6, r0
 800a29a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a29c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d067      	beq.n	800a376 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ae:	f7fc f94f 	bl	8006550 <HAL_GetTick>
 800a2b2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	011a      	lsls	r2, r3, #4
 800a2b8:	d449      	bmi.n	800a34e <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a2bc:	6832      	ldr	r2, [r6, #0]
 800a2be:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a2c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a2c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2c8:	68b3      	ldr	r3, [r6, #8]
 800a2ca:	68f2      	ldr	r2, [r6, #12]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	3a01      	subs	r2, #1
 800a2d0:	025b      	lsls	r3, r3, #9
 800a2d2:	0412      	lsls	r2, r2, #16
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	6872      	ldr	r2, [r6, #4]
 800a2de:	3a01      	subs	r2, #1
 800a2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	6932      	ldr	r2, [r6, #16]
 800a2e8:	3a01      	subs	r2, #1
 800a2ea:	0612      	lsls	r2, r2, #24
 800a2ec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a2f6:	6972      	ldr	r2, [r6, #20]
 800a2f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a300:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a302:	69b2      	ldr	r2, [r6, #24]
 800a304:	f023 0320 	bic.w	r3, r3, #32
 800a308:	4313      	orrs	r3, r2
 800a30a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a30c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a30e:	f023 0310 	bic.w	r3, r3, #16
 800a312:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a314:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a316:	69f2      	ldr	r2, [r6, #28]
 800a318:	f36f 03cf 	bfc	r3, #3, #13
 800a31c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a320:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a322:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a324:	f043 0310 	orr.w	r3, r3, #16
 800a328:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a32a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a32c:	b9b5      	cbnz	r5, 800a35c <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a32e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a332:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a334:	4c11      	ldr	r4, [pc, #68]	@ (800a37c <RCCEx_PLL2_Config+0xe8>)
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a33c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33e:	f7fc f907 	bl	8006550 <HAL_GetTick>
 800a342:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	d50f      	bpl.n	800a36a <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800a34a:	2000      	movs	r0, #0
 800a34c:	e005      	b.n	800a35a <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a34e:	f7fc f8ff 	bl	8006550 <HAL_GetTick>
 800a352:	1bc0      	subs	r0, r0, r7
 800a354:	2802      	cmp	r0, #2
 800a356:	d9ad      	bls.n	800a2b4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a358:	2003      	movs	r0, #3
}
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a35c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a35e:	bf0c      	ite	eq
 800a360:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a364:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a368:	e7e3      	b.n	800a332 <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a36a:	f7fc f8f1 	bl	8006550 <HAL_GetTick>
 800a36e:	1b40      	subs	r0, r0, r5
 800a370:	2802      	cmp	r0, #2
 800a372:	d9e7      	bls.n	800a344 <RCCEx_PLL2_Config+0xb0>
 800a374:	e7f0      	b.n	800a358 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800a376:	2001      	movs	r0, #1
 800a378:	e7ef      	b.n	800a35a <RCCEx_PLL2_Config+0xc6>
 800a37a:	bf00      	nop
 800a37c:	58024400 	.word	0x58024400

0800a380 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a382:	4c39      	ldr	r4, [pc, #228]	@ (800a468 <RCCEx_PLL3_Config+0xe8>)
{
 800a384:	4606      	mov	r6, r0
 800a386:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a388:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d067      	beq.n	800a462 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a398:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a39a:	f7fc f8d9 	bl	8006550 <HAL_GetTick>
 800a39e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	009a      	lsls	r2, r3, #2
 800a3a4:	d449      	bmi.n	800a43a <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a3a8:	6832      	ldr	r2, [r6, #0]
 800a3aa:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a3ae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a3b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3b4:	68b3      	ldr	r3, [r6, #8]
 800a3b6:	68f2      	ldr	r2, [r6, #12]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	3a01      	subs	r2, #1
 800a3bc:	025b      	lsls	r3, r3, #9
 800a3be:	0412      	lsls	r2, r2, #16
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	6872      	ldr	r2, [r6, #4]
 800a3ca:	3a01      	subs	r2, #1
 800a3cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	6932      	ldr	r2, [r6, #16]
 800a3d4:	3a01      	subs	r2, #1
 800a3d6:	0612      	lsls	r2, r2, #24
 800a3d8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a3e2:	6972      	ldr	r2, [r6, #20]
 800a3e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a3ee:	69b2      	ldr	r2, [r6, #24]
 800a3f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a3fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a400:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a402:	69f2      	ldr	r2, [r6, #28]
 800a404:	f36f 03cf 	bfc	r3, #3, #13
 800a408:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a40c:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a40e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a414:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a416:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a418:	b9b5      	cbnz	r5, 800a448 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a41a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a41e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a420:	4c11      	ldr	r4, [pc, #68]	@ (800a468 <RCCEx_PLL3_Config+0xe8>)
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a428:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a42a:	f7fc f891 	bl	8006550 <HAL_GetTick>
 800a42e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	d50f      	bpl.n	800a456 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800a436:	2000      	movs	r0, #0
 800a438:	e005      	b.n	800a446 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a43a:	f7fc f889 	bl	8006550 <HAL_GetTick>
 800a43e:	1bc0      	subs	r0, r0, r7
 800a440:	2802      	cmp	r0, #2
 800a442:	d9ad      	bls.n	800a3a0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a444:	2003      	movs	r0, #3
}
 800a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a448:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a44a:	bf0c      	ite	eq
 800a44c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a450:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a454:	e7e3      	b.n	800a41e <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a456:	f7fc f87b 	bl	8006550 <HAL_GetTick>
 800a45a:	1b40      	subs	r0, r0, r5
 800a45c:	2802      	cmp	r0, #2
 800a45e:	d9e7      	bls.n	800a430 <RCCEx_PLL3_Config+0xb0>
 800a460:	e7f0      	b.n	800a444 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800a462:	2001      	movs	r0, #1
 800a464:	e7ef      	b.n	800a446 <RCCEx_PLL3_Config+0xc6>
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400

0800a46c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a470:	6803      	ldr	r3, [r0, #0]
{
 800a472:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a474:	011c      	lsls	r4, r3, #4
 800a476:	d51e      	bpl.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a478:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a47a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a47e:	d02a      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a480:	d80f      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a482:	b1d3      	cbz	r3, 800a4ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a488:	d01d      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a48a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	05d8      	lsls	r0, r3, #23
 800a490:	d54f      	bpl.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a492:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a494:	2b04      	cmp	r3, #4
 800a496:	d84b      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a498:	e8df f003 	tbb	[pc, r3]
 800a49c:	27443d22 	.word	0x27443d22
 800a4a0:	27          	.byte	0x27
 800a4a1:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4a6:	d1f0      	bne.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4a8:	4a86      	ldr	r2, [pc, #536]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a4aa:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a4ac:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a4ae:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	e7e8      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ba:	4a82      	ldr	r2, [pc, #520]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a4bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a4be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a4c4:	e7f0      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	3008      	adds	r0, #8
 800a4ca:	f7ff fee3 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4ce:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1db      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a4d4:	e7e8      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d6:	2102      	movs	r1, #2
 800a4d8:	3028      	adds	r0, #40	@ 0x28
 800a4da:	f7ff ff51 	bl	800a380 <RCCEx_PLL3_Config>
 800a4de:	e7f6      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e0:	4a78      	ldr	r2, [pc, #480]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a4e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a4e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4ea:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a4ec:	bb1c      	cbnz	r4, 800a536 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a4ee:	4a75      	ldr	r2, [pc, #468]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a4f0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a4f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a4f4:	f023 0307 	bic.w	r3, r3, #7
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	0599      	lsls	r1, r3, #22
 800a500:	d528      	bpl.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a502:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a504:	2b80      	cmp	r3, #128	@ 0x80
 800a506:	d043      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a508:	d817      	bhi.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a50a:	b3a3      	cbz	r3, 800a576 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a50c:	2b40      	cmp	r3, #64	@ 0x40
 800a50e:	d038      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a510:	2601      	movs	r6, #1
 800a512:	4634      	mov	r4, r6
 800a514:	e01e      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a516:	2100      	movs	r1, #0
 800a518:	f105 0008 	add.w	r0, r5, #8
 800a51c:	f7ff feba 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a520:	4604      	mov	r4, r0
        break;
 800a522:	e7e3      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a524:	2100      	movs	r1, #0
 800a526:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a52a:	f7ff ff29 	bl	800a380 <RCCEx_PLL3_Config>
 800a52e:	e7f7      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a530:	2601      	movs	r6, #1
 800a532:	4634      	mov	r4, r6
 800a534:	e7e2      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800a536:	4626      	mov	r6, r4
 800a538:	e7e0      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a53a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a53c:	d002      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a53e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a542:	d1e5      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a544:	bb54      	cbnz	r4, 800a59c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a546:	4a5f      	ldr	r2, [pc, #380]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a548:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a54a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a54c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a550:	430b      	orrs	r3, r1
 800a552:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	055a      	lsls	r2, r3, #21
 800a558:	d531      	bpl.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a55a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a55e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a562:	d049      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a564:	d81c      	bhi.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d039      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a56a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a56e:	d03c      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a570:	2601      	movs	r6, #1
 800a572:	4634      	mov	r4, r6
 800a574:	e023      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a576:	4a53      	ldr	r2, [pc, #332]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a578:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a57a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a57e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a580:	e7e0      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a582:	2100      	movs	r1, #0
 800a584:	f105 0008 	add.w	r0, r5, #8
 800a588:	f7ff fe84 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a58c:	4604      	mov	r4, r0
        break;
 800a58e:	e7d9      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a590:	2100      	movs	r1, #0
 800a592:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a596:	f7ff fef3 	bl	800a380 <RCCEx_PLL3_Config>
 800a59a:	e7f7      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800a59c:	4626      	mov	r6, r4
 800a59e:	e7d9      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a5a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5a4:	d002      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a5a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5aa:	d1e1      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a5ac:	bb54      	cbnz	r4, 800a604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a5ae:	4a45      	ldr	r2, [pc, #276]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a5b0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a5b4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a5b6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	051b      	lsls	r3, r3, #20
 800a5c2:	d530      	bpl.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a5c4:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a5c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5cc:	d045      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a5ce:	d81b      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a5d0:	b3b3      	cbz	r3, 800a640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a5d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5d6:	d039      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a5d8:	2601      	movs	r6, #1
 800a5da:	4634      	mov	r4, r6
 800a5dc:	e023      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5de:	4a39      	ldr	r2, [pc, #228]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a5e0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a5e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a5e8:	e7e0      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f105 0008 	add.w	r0, r5, #8
 800a5f0:	f7ff fe50 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5f4:	4604      	mov	r4, r0
        break;
 800a5f6:	e7d9      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a5fe:	f7ff febf 	bl	800a380 <RCCEx_PLL3_Config>
 800a602:	e7f7      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800a604:	4626      	mov	r6, r4
 800a606:	e7da      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a608:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a60c:	d002      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a60e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a612:	d1e1      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a614:	bb3c      	cbnz	r4, 800a666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a616:	4a2b      	ldr	r2, [pc, #172]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a618:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a61c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a61e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a622:	430b      	orrs	r3, r1
 800a624:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a626:	682b      	ldr	r3, [r5, #0]
 800a628:	019f      	lsls	r7, r3, #6
 800a62a:	d528      	bpl.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a62c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d03e      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a632:	d81a      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a634:	b1db      	cbz	r3, 800a66e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a636:	2b10      	cmp	r3, #16
 800a638:	d034      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a63a:	2601      	movs	r6, #1
 800a63c:	4634      	mov	r4, r6
 800a63e:	e01e      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a640:	4a20      	ldr	r2, [pc, #128]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a642:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a648:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a64a:	e7e3      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a64c:	2100      	movs	r1, #0
 800a64e:	f105 0008 	add.w	r0, r5, #8
 800a652:	f7ff fe1f 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a656:	4604      	mov	r4, r0
        break;
 800a658:	e7dc      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a65a:	2100      	movs	r1, #0
 800a65c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a660:	f7ff fe8e 	bl	800a380 <RCCEx_PLL3_Config>
 800a664:	e7f7      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800a666:	4626      	mov	r6, r4
 800a668:	e7dd      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a66a:	2b30      	cmp	r3, #48	@ 0x30
 800a66c:	d1e5      	bne.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a66e:	bb34      	cbnz	r4, 800a6be <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a670:	4a14      	ldr	r2, [pc, #80]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a672:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a674:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a676:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a67a:	430b      	orrs	r3, r1
 800a67c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	04d8      	lsls	r0, r3, #19
 800a682:	d530      	bpl.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68a:	f000 8095 	beq.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a68e:	d81b      	bhi.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 8084 	beq.w	800a79e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a69a:	f000 8086 	beq.w	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a69e:	2601      	movs	r6, #1
 800a6a0:	4634      	mov	r4, r6
 800a6a2:	e020      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a4:	4a07      	ldr	r2, [pc, #28]	@ (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a6a6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a6a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a6ae:	e7de      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6b0:	2102      	movs	r1, #2
 800a6b2:	f105 0008 	add.w	r0, r5, #8
 800a6b6:	f7ff fded 	bl	800a294 <RCCEx_PLL2_Config>
 800a6ba:	4604      	mov	r4, r0
        break;
 800a6bc:	e7d7      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800a6be:	4626      	mov	r6, r4
 800a6c0:	e7dd      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a6c2:	bf00      	nop
 800a6c4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a6c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6cc:	d002      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a6ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6d2:	d1e4      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a6d4:	2c00      	cmp	r4, #0
 800a6d6:	d175      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6d8:	4a93      	ldr	r2, [pc, #588]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a6da:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a6dc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a6de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	0499      	lsls	r1, r3, #18
 800a6ea:	d50c      	bpl.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a6ec:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6f2:	f000 8081 	beq.w	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a6f6:	d867      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d06d      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a700:	d073      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a702:	2601      	movs	r6, #1
 800a704:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	045a      	lsls	r2, r3, #17
 800a70a:	d50e      	bpl.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a70c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a714:	f000 8091 	beq.w	800a83a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a718:	d876      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d07c      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a71e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a722:	f000 8083 	beq.w	800a82c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a726:	2601      	movs	r6, #1
 800a728:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	015b      	lsls	r3, r3, #5
 800a72e:	d515      	bpl.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a730:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a732:	b14b      	cbz	r3, 800a748 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a738:	f040 8087 	bne.w	800a84a <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a73c:	2101      	movs	r1, #1
 800a73e:	f105 0008 	add.w	r0, r5, #8
 800a742:	f7ff fda7 	bl	800a294 <RCCEx_PLL2_Config>
 800a746:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a748:	2c00      	cmp	r4, #0
 800a74a:	f040 8081 	bne.w	800a850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a74e:	4a76      	ldr	r2, [pc, #472]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a750:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a752:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a758:	430b      	orrs	r3, r1
 800a75a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	041f      	lsls	r7, r3, #16
 800a760:	d511      	bpl.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a762:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a768:	d074      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a76a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a76e:	d077      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d17c      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800a774:	2c00      	cmp	r4, #0
 800a776:	d17d      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a778:	4a6b      	ldr	r2, [pc, #428]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a77a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a77c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a77e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a782:	430b      	orrs	r3, r1
 800a784:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	01d8      	lsls	r0, r3, #7
 800a78a:	f140 8083 	bpl.w	800a894 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800a78e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a790:	2b03      	cmp	r3, #3
 800a792:	f200 80c4 	bhi.w	800a91e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a796:	e8df f003 	tbb	[pc, r3]
 800a79a:	6f74      	.short	0x6f74
 800a79c:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79e:	4a62      	ldr	r2, [pc, #392]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a7a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a7a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a7a8:	e794      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f105 0008 	add.w	r0, r5, #8
 800a7b0:	f7ff fd70 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7b4:	4604      	mov	r4, r0
        break;
 800a7b6:	e78d      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7be:	f7ff fddf 	bl	800a380 <RCCEx_PLL3_Config>
 800a7c2:	e7f7      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800a7c4:	4626      	mov	r6, r4
 800a7c6:	e78e      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a7c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7cc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a7d0:	d002      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a7d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7d6:	d194      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a7d8:	b9a4      	cbnz	r4, 800a804 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7da:	4a53      	ldr	r2, [pc, #332]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a7dc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a7de:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a7e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7e8:	e78d      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	f105 0008 	add.w	r0, r5, #8
 800a7f0:	f7ff fd50 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f4:	4604      	mov	r4, r0
        break;
 800a7f6:	e7ef      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7fe:	f7ff fdbf 	bl	800a380 <RCCEx_PLL3_Config>
 800a802:	e7f7      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800a804:	4626      	mov	r6, r4
 800a806:	e77e      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a808:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a80c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a810:	d002      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a816:	d186      	bne.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a818:	b9ac      	cbnz	r4, 800a846 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a81a:	4a43      	ldr	r2, [pc, #268]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a81c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a820:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a822:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a826:	430b      	orrs	r3, r1
 800a828:	6593      	str	r3, [r2, #88]	@ 0x58
 800a82a:	e77e      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a82c:	2101      	movs	r1, #1
 800a82e:	f105 0008 	add.w	r0, r5, #8
 800a832:	f7ff fd2f 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a836:	4604      	mov	r4, r0
        break;
 800a838:	e7ee      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a83a:	2101      	movs	r1, #1
 800a83c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a840:	f7ff fd9e 	bl	800a380 <RCCEx_PLL3_Config>
 800a844:	e7f7      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800a846:	4626      	mov	r6, r4
 800a848:	e76f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a84a:	2601      	movs	r6, #1
 800a84c:	4634      	mov	r4, r6
 800a84e:	e785      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800a850:	4626      	mov	r6, r4
 800a852:	e783      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a854:	4a34      	ldr	r2, [pc, #208]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a856:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a85c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a85e:	e789      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a860:	2101      	movs	r1, #1
 800a862:	f105 0008 	add.w	r0, r5, #8
 800a866:	f7ff fd15 	bl	800a294 <RCCEx_PLL2_Config>
 800a86a:	4604      	mov	r4, r0
        break;
 800a86c:	e782      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a86e:	2601      	movs	r6, #1
 800a870:	4634      	mov	r4, r6
 800a872:	e788      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800a874:	4626      	mov	r6, r4
 800a876:	e786      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a878:	4a2b      	ldr	r2, [pc, #172]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a87a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a87c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a882:	2c00      	cmp	r4, #0
 800a884:	d14e      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a886:	4a28      	ldr	r2, [pc, #160]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a888:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a88a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a88c:	f023 0303 	bic.w	r3, r3, #3
 800a890:	430b      	orrs	r3, r1
 800a892:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	0259      	lsls	r1, r3, #9
 800a898:	d554      	bpl.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a89a:	4f24      	ldr	r7, [pc, #144]	@ (800a92c <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8a2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a8a4:	f7fb fe54 	bl	8006550 <HAL_GetTick>
 800a8a8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	05da      	lsls	r2, r3, #23
 800a8ae:	d541      	bpl.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	d174      	bne.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a8b6:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a8ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a8bc:	4042      	eors	r2, r0
 800a8be:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a8c2:	d00b      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a8c6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a8cc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a8d0:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a8d2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a8d4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a8d8:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a8da:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a8dc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a8e0:	d048      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8e2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a8e6:	4910      	ldr	r1, [pc, #64]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a8e8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a8ec:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a8f0:	d151      	bne.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a8f2:	6908      	ldr	r0, [r1, #16]
 800a8f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800a8f6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a8fa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a8fe:	4302      	orrs	r2, r0
 800a900:	610a      	str	r2, [r1, #16]
 800a902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a906:	4a08      	ldr	r2, [pc, #32]	@ (800a928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a908:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a90a:	430b      	orrs	r3, r1
 800a90c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a90e:	e019      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a910:	2102      	movs	r1, #2
 800a912:	f105 0008 	add.w	r0, r5, #8
 800a916:	f7ff fcbd 	bl	800a294 <RCCEx_PLL2_Config>
 800a91a:	4604      	mov	r4, r0
        break;
 800a91c:	e7b1      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800a91e:	2601      	movs	r6, #1
 800a920:	4634      	mov	r4, r6
 800a922:	e7b7      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800a924:	4626      	mov	r6, r4
 800a926:	e7b5      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a928:	58024400 	.word	0x58024400
 800a92c:	58024800 	.word	0x58024800
 800a930:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a934:	f7fb fe0c 	bl	8006550 <HAL_GetTick>
 800a938:	eba0 0008 	sub.w	r0, r0, r8
 800a93c:	2864      	cmp	r0, #100	@ 0x64
 800a93e:	d9b4      	bls.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800a940:	2603      	movs	r6, #3
 800a942:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	07d8      	lsls	r0, r3, #31
 800a948:	d509      	bpl.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a94a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d03e      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800a952:	d826      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800a954:	b35b      	cbz	r3, 800a9ae <HAL_RCCEx_PeriphCLKConfig+0x542>
 800a956:	2b08      	cmp	r3, #8
 800a958:	d033      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a95a:	2601      	movs	r6, #1
 800a95c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	0799      	lsls	r1, r3, #30
 800a962:	d54b      	bpl.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a964:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a966:	2b05      	cmp	r3, #5
 800a968:	d85e      	bhi.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a96a:	e8df f003 	tbb	[pc, r3]
 800a96e:	393f      	.short	0x393f
 800a970:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800a974:	f7fb fdec 	bl	8006550 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a978:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800aa34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800a97c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a97e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a982:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a986:	079b      	lsls	r3, r3, #30
 800a988:	d4ab      	bmi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a98a:	f7fb fde1 	bl	8006550 <HAL_GetTick>
 800a98e:	1bc0      	subs	r0, r0, r7
 800a990:	4548      	cmp	r0, r9
 800a992:	d9f6      	bls.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800a994:	e7d4      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a996:	690a      	ldr	r2, [r1, #16]
 800a998:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a99c:	e7b0      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800a99e:	4626      	mov	r6, r4
 800a9a0:	e7d0      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a9a2:	f023 0208 	bic.w	r2, r3, #8
 800a9a6:	2a20      	cmp	r2, #32
 800a9a8:	d001      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x542>
 800a9aa:	2b18      	cmp	r3, #24
 800a9ac:	d1d5      	bne.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800a9ae:	b9ac      	cbnz	r4, 800a9dc <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a9b0:	4a20      	ldr	r2, [pc, #128]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9b2:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a9b6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a9b8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9c0:	e7cd      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	f105 0008 	add.w	r0, r5, #8
 800a9c8:	f7ff fc64 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9cc:	4604      	mov	r4, r0
        break;
 800a9ce:	e7ee      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9d6:	f7ff fcd3 	bl	800a380 <RCCEx_PLL3_Config>
 800a9da:	e7f7      	b.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800a9dc:	4626      	mov	r6, r4
 800a9de:	e7be      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	f105 0008 	add.w	r0, r5, #8
 800a9e6:	f7ff fc55 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9ea:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a9ec:	b9fc      	cbnz	r4, 800aa2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a9ee:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9f0:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a9f2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	075a      	lsls	r2, r3, #29
 800aa00:	d52b      	bpl.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800aa02:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	f200 816e 	bhi.w	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800aa0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aa10:	0014001a 	.word	0x0014001a
 800aa14:	001a0166 	.word	0x001a0166
 800aa18:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa22:	f7ff fcad 	bl	800a380 <RCCEx_PLL3_Config>
 800aa26:	e7e0      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aa28:	2601      	movs	r6, #1
 800aa2a:	4634      	mov	r4, r6
 800aa2c:	e7e6      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800aa2e:	4626      	mov	r6, r4
 800aa30:	e7e4      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x590>
 800aa32:	bf00      	nop
 800aa34:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa38:	2101      	movs	r1, #1
 800aa3a:	f105 0008 	add.w	r0, r5, #8
 800aa3e:	f7ff fc29 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa42:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800aa44:	2c00      	cmp	r4, #0
 800aa46:	f040 8152 	bne.w	800acee <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa4a:	4aaa      	ldr	r2, [pc, #680]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800aa4c:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800aa50:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa52:	f023 0307 	bic.w	r3, r3, #7
 800aa56:	430b      	orrs	r3, r1
 800aa58:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	069b      	lsls	r3, r3, #26
 800aa5e:	d510      	bpl.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aa60:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800aa64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa68:	f000 8160 	beq.w	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800aa6c:	f200 8144 	bhi.w	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 814a 	beq.w	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800aa76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa7a:	f000 8150 	beq.w	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800aa7e:	2601      	movs	r6, #1
 800aa80:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	065f      	lsls	r7, r3, #25
 800aa86:	d510      	bpl.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa88:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800aa8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa90:	f000 816e 	beq.w	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800aa94:	f200 8152 	bhi.w	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8158 	beq.w	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aa9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa2:	f000 815e 	beq.w	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800aaa6:	2601      	movs	r6, #1
 800aaa8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	0618      	lsls	r0, r3, #24
 800aaae:	d510      	bpl.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aab0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800aab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aab8:	f000 817c 	beq.w	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800aabc:	f200 8160 	bhi.w	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 8166 	beq.w	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800aac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aaca:	f000 816c 	beq.w	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800aace:	2601      	movs	r6, #1
 800aad0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	0719      	lsls	r1, r3, #28
 800aad6:	d514      	bpl.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aad8:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800aadc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae0:	d107      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aae2:	2102      	movs	r1, #2
 800aae4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aae8:	f7ff fc4a 	bl	800a380 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800aaec:	2800      	cmp	r0, #0
 800aaee:	bf18      	it	ne
 800aaf0:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aaf2:	4a80      	ldr	r2, [pc, #512]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800aaf4:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800aaf8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aafa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800aafe:	430b      	orrs	r3, r1
 800ab00:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	06da      	lsls	r2, r3, #27
 800ab06:	d514      	bpl.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab08:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800ab0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab10:	d107      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab12:	2102      	movs	r1, #2
 800ab14:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab18:	f7ff fc32 	bl	800a380 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	bf18      	it	ne
 800ab20:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab22:	4a74      	ldr	r2, [pc, #464]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ab24:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800ab28:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ab2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	031b      	lsls	r3, r3, #12
 800ab36:	d51b      	bpl.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800ab38:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ab3c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800ab40:	f000 8140 	beq.w	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800ab44:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800ab48:	d007      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800ab4a:	2900      	cmp	r1, #0
 800ab4c:	f040 8140 	bne.w	800add0 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab50:	f105 0008 	add.w	r0, r5, #8
 800ab54:	f7ff fb9e 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab58:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	f040 813b 	bne.w	800add6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab60:	4a64      	ldr	r2, [pc, #400]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ab62:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ab66:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ab68:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	035f      	lsls	r7, r3, #13
 800ab74:	d50f      	bpl.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800ab76:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800ab7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab7e:	f000 813b 	beq.w	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab86:	f000 812d 	beq.w	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800ab8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab8e:	f000 8124 	beq.w	800adda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ab92:	2601      	movs	r6, #1
 800ab94:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	03d8      	lsls	r0, r3, #15
 800ab9a:	d509      	bpl.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800ab9c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8133 	beq.w	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800aba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba8:	f000 813d 	beq.w	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800abac:	2601      	movs	r6, #1
 800abae:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	0099      	lsls	r1, r3, #2
 800abb4:	d507      	bpl.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abb6:	2102      	movs	r1, #2
 800abb8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800abbc:	f7ff fbe0 	bl	800a380 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800abc0:	2800      	cmp	r0, #0
 800abc2:	bf18      	it	ne
 800abc4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800abc6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800abca:	039a      	lsls	r2, r3, #14
 800abcc:	f140 8143 	bpl.w	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800abd0:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800abd4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800abd8:	f000 813f 	beq.w	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800abdc:	f200 812c 	bhi.w	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f000 812f 	beq.w	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800abe6:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800abe8:	02df      	lsls	r7, r3, #11
 800abea:	d506      	bpl.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800abec:	4841      	ldr	r0, [pc, #260]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800abee:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800abf0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800abf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abf6:	4332      	orrs	r2, r6
 800abf8:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800abfa:	00de      	lsls	r6, r3, #3
 800abfc:	d507      	bpl.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800abfe:	483d      	ldr	r0, [pc, #244]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ac00:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800ac04:	6902      	ldr	r2, [r0, #16]
 800ac06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac0a:	4332      	orrs	r2, r6
 800ac0c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac0e:	0298      	lsls	r0, r3, #10
 800ac10:	d506      	bpl.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac12:	4838      	ldr	r0, [pc, #224]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ac14:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800ac16:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ac18:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ac1c:	4332      	orrs	r2, r6
 800ac1e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac20:	005a      	lsls	r2, r3, #1
 800ac22:	d509      	bpl.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac24:	4a33      	ldr	r2, [pc, #204]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ac26:	6910      	ldr	r0, [r2, #16]
 800ac28:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800ac2c:	6110      	str	r0, [r2, #16]
 800ac2e:	6910      	ldr	r0, [r2, #16]
 800ac30:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800ac34:	4330      	orrs	r0, r6
 800ac36:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da06      	bge.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac3c:	482d      	ldr	r0, [pc, #180]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ac3e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ac40:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800ac42:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ac46:	4332      	orrs	r2, r6
 800ac48:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac4a:	021f      	lsls	r7, r3, #8
 800ac4c:	d507      	bpl.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac4e:	4a29      	ldr	r2, [pc, #164]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ac50:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800ac54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ac56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ac5a:	4303      	orrs	r3, r0
 800ac5c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac5e:	07ce      	lsls	r6, r1, #31
 800ac60:	d506      	bpl.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac62:	2100      	movs	r1, #0
 800ac64:	f105 0008 	add.w	r0, r5, #8
 800ac68:	f7ff fb14 	bl	800a294 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	b900      	cbnz	r0, 800ac72 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800ac70:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac72:	686b      	ldr	r3, [r5, #4]
 800ac74:	079c      	lsls	r4, r3, #30
 800ac76:	d506      	bpl.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac78:	2101      	movs	r1, #1
 800ac7a:	f105 0008 	add.w	r0, r5, #8
 800ac7e:	f7ff fb09 	bl	800a294 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ac82:	4606      	mov	r6, r0
 800ac84:	b900      	cbnz	r0, 800ac88 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800ac86:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ac88:	686b      	ldr	r3, [r5, #4]
 800ac8a:	0758      	lsls	r0, r3, #29
 800ac8c:	d506      	bpl.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac8e:	2102      	movs	r1, #2
 800ac90:	f105 0008 	add.w	r0, r5, #8
 800ac94:	f7ff fafe 	bl	800a294 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ac98:	4604      	mov	r4, r0
 800ac9a:	b900      	cbnz	r0, 800ac9e <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800ac9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ac9e:	686b      	ldr	r3, [r5, #4]
 800aca0:	0719      	lsls	r1, r3, #28
 800aca2:	d506      	bpl.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aca4:	2100      	movs	r1, #0
 800aca6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800acaa:	f7ff fb69 	bl	800a380 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800acae:	4606      	mov	r6, r0
 800acb0:	b900      	cbnz	r0, 800acb4 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800acb2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800acb4:	686b      	ldr	r3, [r5, #4]
 800acb6:	06da      	lsls	r2, r3, #27
 800acb8:	d506      	bpl.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acba:	2101      	movs	r1, #1
 800acbc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800acc0:	f7ff fb5e 	bl	800a380 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800acc4:	4604      	mov	r4, r0
 800acc6:	b900      	cbnz	r0, 800acca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800acc8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800acca:	686b      	ldr	r3, [r5, #4]
 800accc:	069b      	lsls	r3, r3, #26
 800acce:	f100 80ca 	bmi.w	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800acd2:	1e20      	subs	r0, r4, #0
 800acd4:	bf18      	it	ne
 800acd6:	2001      	movne	r0, #1
}
 800acd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acdc:	2101      	movs	r1, #1
 800acde:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ace2:	f7ff fb4d 	bl	800a380 <RCCEx_PLL3_Config>
 800ace6:	e6ac      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ace8:	2601      	movs	r6, #1
 800acea:	4634      	mov	r4, r6
 800acec:	e6b5      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800acee:	4626      	mov	r6, r4
 800acf0:	e6b3      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800acf2:	bf00      	nop
 800acf4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800acf8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800acfc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ad00:	d003      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800ad02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad06:	f47f aeba 	bne.w	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800ad0a:	b9ac      	cbnz	r4, 800ad38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad0c:	4a5b      	ldr	r2, [pc, #364]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ad0e:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800ad12:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ad14:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad1c:	e6b1      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f105 0008 	add.w	r0, r5, #8
 800ad24:	f7ff fab6 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad28:	4604      	mov	r4, r0
        break;
 800ad2a:	e7ee      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad32:	f7ff fb25 	bl	800a380 <RCCEx_PLL3_Config>
 800ad36:	e7f7      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800ad38:	4626      	mov	r6, r4
 800ad3a:	e6a2      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ad3c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad40:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800ad44:	d003      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ad46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad4a:	f47f aeac 	bne.w	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800ad4e:	b9ac      	cbnz	r4, 800ad7c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad50:	4a4a      	ldr	r2, [pc, #296]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ad52:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800ad56:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ad58:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad60:	e6a3      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad62:	2100      	movs	r1, #0
 800ad64:	f105 0008 	add.w	r0, r5, #8
 800ad68:	f7ff fa94 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad6c:	4604      	mov	r4, r0
        break;
 800ad6e:	e7ee      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad70:	2102      	movs	r1, #2
 800ad72:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad76:	f7ff fb03 	bl	800a380 <RCCEx_PLL3_Config>
 800ad7a:	e7f7      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800ad7c:	4626      	mov	r6, r4
 800ad7e:	e694      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ad80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad84:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800ad88:	d003      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800ad8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ad8e:	f47f ae9e 	bne.w	800aace <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800ad92:	b9ac      	cbnz	r4, 800adc0 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ad94:	4a39      	ldr	r2, [pc, #228]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ad96:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800ad9a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ad9c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6593      	str	r3, [r2, #88]	@ 0x58
 800ada4:	e695      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada6:	2100      	movs	r1, #0
 800ada8:	f105 0008 	add.w	r0, r5, #8
 800adac:	f7ff fa72 	bl	800a294 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adb0:	4604      	mov	r4, r0
        break;
 800adb2:	e7ee      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adb4:	2102      	movs	r1, #2
 800adb6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800adba:	f7ff fae1 	bl	800a380 <RCCEx_PLL3_Config>
 800adbe:	e7f7      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800adc0:	4626      	mov	r6, r4
 800adc2:	e686      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adc4:	2102      	movs	r1, #2
 800adc6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800adca:	f7ff fad9 	bl	800a380 <RCCEx_PLL3_Config>
 800adce:	e6c3      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800add0:	2601      	movs	r6, #1
 800add2:	4634      	mov	r4, r6
 800add4:	e6cc      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800add6:	4626      	mov	r6, r4
 800add8:	e6ca      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adda:	4a28      	ldr	r2, [pc, #160]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800addc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800adde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ade2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ade4:	b97c      	cbnz	r4, 800ae06 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ade6:	4a25      	ldr	r2, [pc, #148]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ade8:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800adec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800adee:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800adf2:	430b      	orrs	r3, r1
 800adf4:	6553      	str	r3, [r2, #84]	@ 0x54
 800adf6:	e6ce      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adf8:	2101      	movs	r1, #1
 800adfa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800adfe:	f7ff fabf 	bl	800a380 <RCCEx_PLL3_Config>
 800ae02:	4604      	mov	r4, r0
        break;
 800ae04:	e7ee      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800ae06:	4626      	mov	r6, r4
 800ae08:	e6c5      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae0a:	4a1c      	ldr	r2, [pc, #112]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ae0c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae12:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ae14:	b974      	cbnz	r4, 800ae34 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae16:	4a19      	ldr	r2, [pc, #100]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ae18:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800ae1a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ae1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae20:	430b      	orrs	r3, r1
 800ae22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae24:	e6c4      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae26:	2102      	movs	r1, #2
 800ae28:	f105 0008 	add.w	r0, r5, #8
 800ae2c:	f7ff fa32 	bl	800a294 <RCCEx_PLL2_Config>
 800ae30:	4604      	mov	r4, r0
        break;
 800ae32:	e7ef      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800ae34:	4626      	mov	r6, r4
 800ae36:	e6bb      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800ae38:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800ae3c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800ae40:	f47f aed1 	bne.w	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800ae44:	2c00      	cmp	r4, #0
 800ae46:	f47f aecf 	bne.w	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ae4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ae52:	4302      	orrs	r2, r0
 800ae54:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800ae56:	4634      	mov	r4, r6
 800ae58:	e6c6      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5a:	4f08      	ldr	r7, [pc, #32]	@ (800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800ae5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ae62:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800ae64:	e7ee      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae66:	2102      	movs	r1, #2
 800ae68:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ae6c:	f7ff fa88 	bl	800a380 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ae70:	2800      	cmp	r0, #0
 800ae72:	f43f af2e 	beq.w	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800ae76:	2001      	movs	r0, #1
 800ae78:	e72e      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800ae7a:	bf00      	nop
 800ae7c:	58024400 	.word	0x58024400

0800ae80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ae84:	4604      	mov	r4, r0
 800ae86:	b1f0      	cbz	r0, 800aec6 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ae88:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ae8c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ae90:	b91b      	cbnz	r3, 800ae9a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ae92:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ae96:	f7f6 fa83 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae9a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ae9c:	1d21      	adds	r1, r4, #4
 800ae9e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aea0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aea4:	f000 f9fd 	bl	800b2a2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aea8:	6862      	ldr	r2, [r4, #4]
 800aeaa:	4629      	mov	r1, r5
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	f000 fa2e 	bl	800b30e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aeb2:	4a06      	ldr	r2, [pc, #24]	@ (800aecc <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800aeb4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aebc:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aebe:	2301      	movs	r3, #1
 800aec0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800aec6:	2001      	movs	r0, #1
 800aec8:	e7fc      	b.n	800aec4 <HAL_SDRAM_Init+0x44>
 800aeca:	bf00      	nop
 800aecc:	52004000 	.word	0x52004000

0800aed0 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800aed0:	b510      	push	{r4, lr}
 800aed2:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800aed4:	f7f6 fafe 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800aed8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aedc:	f000 fa4d 	bl	800b37a <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800aee0:	2000      	movs	r0, #0
 800aee2:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800aee6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800aeea:	bd10      	pop	{r4, pc}

0800aeec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aeec:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aeee:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800aef2:	4605      	mov	r5, r0
 800aef4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800aef6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aef8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800aefa:	d010      	beq.n	800af1e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800aefc:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800af00:	2c01      	cmp	r4, #1
 800af02:	d110      	bne.n	800af26 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af04:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af06:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af08:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af0c:	f000 fa44 	bl	800b398 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af10:	6833      	ldr	r3, [r6, #0]
 800af12:	2b02      	cmp	r3, #2
 800af14:	d104      	bne.n	800af20 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800af16:	2305      	movs	r3, #5
 800af18:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af1c:	2000      	movs	r0, #0
}
 800af1e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800af20:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800af24:	e7fa      	b.n	800af1c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800af26:	2001      	movs	r0, #1
 800af28:	e7f9      	b.n	800af1e <HAL_SDRAM_SendCommand+0x32>

0800af2a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800af2a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af2c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800af30:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af32:	2b02      	cmp	r3, #2
 800af34:	b2d8      	uxtb	r0, r3
 800af36:	d00d      	beq.n	800af54 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800af38:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	b2dd      	uxtb	r5, r3
 800af40:	d109      	bne.n	800af56 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af42:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800af44:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af46:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800af4a:	f000 fa37 	bl	800b3bc <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af4e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800af50:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800af54:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800af56:	2001      	movs	r0, #1
 800af58:	e7fc      	b.n	800af54 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800af5a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af5c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800af60:	2b01      	cmp	r3, #1
 800af62:	d12f      	bne.n	800afc4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af64:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af66:	4a18      	ldr	r2, [pc, #96]	@ (800afc8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800af68:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af6c:	6803      	ldr	r3, [r0, #0]
 800af6e:	4293      	cmp	r3, r2
 800af70:	d01a      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af76:	d017      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af78:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d013      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af84:	4293      	cmp	r3, r2
 800af86:	d00f      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d00b      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af90:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800af94:	4293      	cmp	r3, r2
 800af96:	d007      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800af98:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d003      	beq.n	800afa8 <HAL_TIM_Base_Start+0x4c>
 800afa0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d107      	bne.n	800afb8 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afa8:	6899      	ldr	r1, [r3, #8]
 800afaa:	4a08      	ldr	r2, [pc, #32]	@ (800afcc <HAL_TIM_Base_Start+0x70>)
 800afac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afae:	2a06      	cmp	r2, #6
 800afb0:	d006      	beq.n	800afc0 <HAL_TIM_Base_Start+0x64>
 800afb2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800afb6:	d003      	beq.n	800afc0 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	f042 0201 	orr.w	r2, r2, #1
 800afbe:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800afc0:	2000      	movs	r0, #0
 800afc2:	4770      	bx	lr
    return HAL_ERROR;
 800afc4:	2001      	movs	r0, #1
}
 800afc6:	4770      	bx	lr
 800afc8:	40010000 	.word	0x40010000
 800afcc:	00010007 	.word	0x00010007

0800afd0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d133      	bne.n	800b040 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd8:	2302      	movs	r3, #2
 800afda:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afde:	6803      	ldr	r3, [r0, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	f042 0201 	orr.w	r2, r2, #1
 800afe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe8:	4a16      	ldr	r2, [pc, #88]	@ (800b044 <HAL_TIM_Base_Start_IT+0x74>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d01a      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800afee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff2:	d017      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800aff4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aff8:	4293      	cmp	r3, r2
 800affa:	d013      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800affc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b000:	4293      	cmp	r3, r2
 800b002:	d00f      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800b004:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b008:	4293      	cmp	r3, r2
 800b00a:	d00b      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800b00c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b010:	4293      	cmp	r3, r2
 800b012:	d007      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800b014:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b018:	4293      	cmp	r3, r2
 800b01a:	d003      	beq.n	800b024 <HAL_TIM_Base_Start_IT+0x54>
 800b01c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b020:	4293      	cmp	r3, r2
 800b022:	d107      	bne.n	800b034 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b024:	6899      	ldr	r1, [r3, #8]
 800b026:	4a08      	ldr	r2, [pc, #32]	@ (800b048 <HAL_TIM_Base_Start_IT+0x78>)
 800b028:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02a:	2a06      	cmp	r2, #6
 800b02c:	d006      	beq.n	800b03c <HAL_TIM_Base_Start_IT+0x6c>
 800b02e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b032:	d003      	beq.n	800b03c <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	f042 0201 	orr.w	r2, r2, #1
 800b03a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b03c:	2000      	movs	r0, #0
 800b03e:	4770      	bx	lr
    return HAL_ERROR;
 800b040:	2001      	movs	r0, #1
}
 800b042:	4770      	bx	lr
 800b044:	40010000 	.word	0x40010000
 800b048:	00010007 	.word	0x00010007

0800b04c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800b04c:	4770      	bx	lr

0800b04e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800b050:	4770      	bx	lr

0800b052 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800b052:	4770      	bx	lr

0800b054 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800b054:	6803      	ldr	r3, [r0, #0]
{
 800b056:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800b058:	68dd      	ldr	r5, [r3, #12]
{
 800b05a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800b05c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b05e:	07b2      	lsls	r2, r6, #30
 800b060:	d50d      	bpl.n	800b07e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b062:	07a9      	lsls	r1, r5, #30
 800b064:	d50b      	bpl.n	800b07e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b066:	f06f 0202 	mvn.w	r2, #2
 800b06a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b06c:	2201      	movs	r2, #1
 800b06e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	079a      	lsls	r2, r3, #30
 800b074:	d075      	beq.n	800b162 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b076:	f7ff ffea 	bl	800b04e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07a:	2300      	movs	r3, #0
 800b07c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b07e:	0773      	lsls	r3, r6, #29
 800b080:	d510      	bpl.n	800b0a4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b082:	0768      	lsls	r0, r5, #29
 800b084:	d50e      	bpl.n	800b0a4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b08c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b08e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b090:	2202      	movs	r2, #2
 800b092:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b09a:	d068      	beq.n	800b16e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b09c:	f7ff ffd7 	bl	800b04e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b0a4:	0731      	lsls	r1, r6, #28
 800b0a6:	d50f      	bpl.n	800b0c8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b0a8:	072a      	lsls	r2, r5, #28
 800b0aa:	d50d      	bpl.n	800b0c8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b0b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b0b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0b6:	2204      	movs	r2, #4
 800b0b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	079b      	lsls	r3, r3, #30
 800b0be:	d05c      	beq.n	800b17a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800b0c0:	f7ff ffc5 	bl	800b04e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b0c8:	06f1      	lsls	r1, r6, #27
 800b0ca:	d510      	bpl.n	800b0ee <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b0cc:	06ea      	lsls	r2, r5, #27
 800b0ce:	d50e      	bpl.n	800b0ee <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800b0d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0da:	2208      	movs	r2, #8
 800b0dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b0e4:	d04f      	beq.n	800b186 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800b0e6:	f7ff ffb2 	bl	800b04e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b0ee:	07f3      	lsls	r3, r6, #31
 800b0f0:	d508      	bpl.n	800b104 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b0f2:	07e8      	lsls	r0, r5, #31
 800b0f4:	d506      	bpl.n	800b104 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b0fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b100:	f7f5 ff16 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b104:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800b108:	d008      	beq.n	800b11c <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b10a:	0629      	lsls	r1, r5, #24
 800b10c:	d506      	bpl.n	800b11c <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800b114:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b116:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b118:	f000 f8c1 	bl	800b29e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b11c:	05f2      	lsls	r2, r6, #23
 800b11e:	d508      	bpl.n	800b132 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b120:	062b      	lsls	r3, r5, #24
 800b122:	d506      	bpl.n	800b132 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b12a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b12c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b12e:	f000 f8b7 	bl	800b2a0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b132:	0670      	lsls	r0, r6, #25
 800b134:	d508      	bpl.n	800b148 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b136:	0669      	lsls	r1, r5, #25
 800b138:	d506      	bpl.n	800b148 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800b140:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b142:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b144:	f7ff ff85 	bl	800b052 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b148:	06b2      	lsls	r2, r6, #26
 800b14a:	d522      	bpl.n	800b192 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b14c:	06ab      	lsls	r3, r5, #26
 800b14e:	d520      	bpl.n	800b192 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b156:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b158:	611a      	str	r2, [r3, #16]
}
 800b15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b15e:	f000 b89d 	b.w	800b29c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b162:	f7ff ff73 	bl	800b04c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff ff72 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
 800b16c:	e785      	b.n	800b07a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b16e:	f7ff ff6d 	bl	800b04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b172:	4620      	mov	r0, r4
 800b174:	f7ff ff6c 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
 800b178:	e792      	b.n	800b0a0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b17a:	f7ff ff67 	bl	800b04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b17e:	4620      	mov	r0, r4
 800b180:	f7ff ff66 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
 800b184:	e79e      	b.n	800b0c4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b186:	f7ff ff61 	bl	800b04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7ff ff60 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
 800b190:	e7ab      	b.n	800b0ea <HAL_TIM_IRQHandler+0x96>
}
 800b192:	bd70      	pop	{r4, r5, r6, pc}

0800b194 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b194:	4a27      	ldr	r2, [pc, #156]	@ (800b234 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800b196:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b198:	4290      	cmp	r0, r2
 800b19a:	d012      	beq.n	800b1c2 <TIM_Base_SetConfig+0x2e>
 800b19c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b1a0:	d00f      	beq.n	800b1c2 <TIM_Base_SetConfig+0x2e>
 800b1a2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b1a6:	4290      	cmp	r0, r2
 800b1a8:	d00b      	beq.n	800b1c2 <TIM_Base_SetConfig+0x2e>
 800b1aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1ae:	4290      	cmp	r0, r2
 800b1b0:	d007      	beq.n	800b1c2 <TIM_Base_SetConfig+0x2e>
 800b1b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1b6:	4290      	cmp	r0, r2
 800b1b8:	d003      	beq.n	800b1c2 <TIM_Base_SetConfig+0x2e>
 800b1ba:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b1be:	4290      	cmp	r0, r2
 800b1c0:	d108      	bne.n	800b1d4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b1c6:	684a      	ldr	r2, [r1, #4]
 800b1c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1ce:	68ca      	ldr	r2, [r1, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	e00a      	b.n	800b1ea <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1d4:	4a18      	ldr	r2, [pc, #96]	@ (800b238 <TIM_Base_SetConfig+0xa4>)
 800b1d6:	4290      	cmp	r0, r2
 800b1d8:	d0f7      	beq.n	800b1ca <TIM_Base_SetConfig+0x36>
 800b1da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1de:	4290      	cmp	r0, r2
 800b1e0:	d0f3      	beq.n	800b1ca <TIM_Base_SetConfig+0x36>
 800b1e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1e6:	4290      	cmp	r0, r2
 800b1e8:	d0ef      	beq.n	800b1ca <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1ea:	694a      	ldr	r2, [r1, #20]
 800b1ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1f0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1f2:	688a      	ldr	r2, [r1, #8]
 800b1f4:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1f6:	680a      	ldr	r2, [r1, #0]
 800b1f8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b234 <TIM_Base_SetConfig+0xa0>)
 800b1fc:	4290      	cmp	r0, r2
 800b1fe:	d00f      	beq.n	800b220 <TIM_Base_SetConfig+0x8c>
 800b200:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b204:	4290      	cmp	r0, r2
 800b206:	d00b      	beq.n	800b220 <TIM_Base_SetConfig+0x8c>
 800b208:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b20c:	4290      	cmp	r0, r2
 800b20e:	d007      	beq.n	800b220 <TIM_Base_SetConfig+0x8c>
 800b210:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b214:	4290      	cmp	r0, r2
 800b216:	d003      	beq.n	800b220 <TIM_Base_SetConfig+0x8c>
 800b218:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b21c:	4290      	cmp	r0, r2
 800b21e:	d101      	bne.n	800b224 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b220:	690a      	ldr	r2, [r1, #16]
 800b222:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b224:	6802      	ldr	r2, [r0, #0]
 800b226:	f042 0204 	orr.w	r2, r2, #4
 800b22a:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b22c:	2201      	movs	r2, #1
 800b22e:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800b230:	6003      	str	r3, [r0, #0]
}
 800b232:	4770      	bx	lr
 800b234:	40010000 	.word	0x40010000
 800b238:	40014000 	.word	0x40014000

0800b23c <HAL_TIM_Base_Init>:
{
 800b23c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b23e:	4604      	mov	r4, r0
 800b240:	b350      	cbz	r0, 800b298 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b242:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b246:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b24a:	b91b      	cbnz	r3, 800b254 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b24c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b250:	f7ff fe83 	bl	800af5a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b254:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b25a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b25e:	f7ff ff99 	bl	800b194 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b262:	2301      	movs	r3, #1
  return HAL_OK;
 800b264:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b266:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b26a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b26e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b272:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b276:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b27a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b27e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b282:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b286:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b28a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b28e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b292:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800b296:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b298:	2001      	movs	r0, #1
 800b29a:	e7fc      	b.n	800b296 <HAL_TIM_Base_Init+0x5a>

0800b29c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800b29c:	4770      	bx	lr

0800b29e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800b2a0:	4770      	bx	lr

0800b2a2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800b2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2a6:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800b2aa:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800b2ae:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800b2b2:	ea43 0308 	orr.w	r3, r3, r8
 800b2b6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800b2ba:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b2be:	6809      	ldr	r1, [r1, #0]
 800b2c0:	b981      	cbnz	r1, 800b2e4 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2c2:	ea43 030e 	orr.w	r3, r3, lr
 800b2c6:	6801      	ldr	r1, [r0, #0]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	f36f 010e 	bfc	r1, #0, #15
 800b2ce:	ea43 030c 	orr.w	r3, r3, ip
 800b2d2:	433b      	orrs	r3, r7
 800b2d4:	4333      	orrs	r3, r6
 800b2d6:	432b      	orrs	r3, r5
 800b2d8:	4323      	orrs	r3, r4
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2e4:	6801      	ldr	r1, [r0, #0]
 800b2e6:	ea43 030e 	orr.w	r3, r3, lr
 800b2ea:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b2f2:	ea42 030c 	orr.w	r3, r2, ip
 800b2f6:	6841      	ldr	r1, [r0, #4]
 800b2f8:	433b      	orrs	r3, r7
 800b2fa:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800b2fe:	4333      	orrs	r3, r6
 800b300:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800b304:	432b      	orrs	r3, r5
 800b306:	4323      	orrs	r3, r4
 800b308:	4313      	orrs	r3, r2
 800b30a:	6043      	str	r3, [r0, #4]
 800b30c:	e7e7      	b.n	800b2de <FMC_SDRAM_Init+0x3c>

0800b30e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b30e:	68cb      	ldr	r3, [r1, #12]
 800b310:	f103 3cff 	add.w	ip, r3, #4294967295
 800b314:	694b      	ldr	r3, [r1, #20]
{
 800b316:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b318:	3b01      	subs	r3, #1
 800b31a:	684c      	ldr	r4, [r1, #4]
 800b31c:	688f      	ldr	r7, [r1, #8]
 800b31e:	690e      	ldr	r6, [r1, #16]
 800b320:	051b      	lsls	r3, r3, #20
 800b322:	698d      	ldr	r5, [r1, #24]
 800b324:	3c01      	subs	r4, #1
 800b326:	3f01      	subs	r7, #1
 800b328:	3e01      	subs	r6, #1
 800b32a:	3d01      	subs	r5, #1
 800b32c:	6809      	ldr	r1, [r1, #0]
 800b32e:	0124      	lsls	r4, r4, #4
 800b330:	023f      	lsls	r7, r7, #8
 800b332:	3901      	subs	r1, #1
 800b334:	0436      	lsls	r6, r6, #16
 800b336:	062d      	lsls	r5, r5, #24
 800b338:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b33c:	b95a      	cbnz	r2, 800b356 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b33e:	430b      	orrs	r3, r1
 800b340:	6882      	ldr	r2, [r0, #8]
 800b342:	4323      	orrs	r3, r4
 800b344:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b348:	433b      	orrs	r3, r7
 800b34a:	4333      	orrs	r3, r6
 800b34c:	432b      	orrs	r3, r5
 800b34e:	4313      	orrs	r3, r2
 800b350:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b352:	2000      	movs	r0, #0
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b356:	6882      	ldr	r2, [r0, #8]
 800b358:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b35c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800b360:	4313      	orrs	r3, r2
 800b362:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b364:	ea44 0307 	orr.w	r3, r4, r7
 800b368:	68c2      	ldr	r2, [r0, #12]
 800b36a:	430b      	orrs	r3, r1
 800b36c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b370:	4333      	orrs	r3, r6
 800b372:	432b      	orrs	r3, r5
 800b374:	4313      	orrs	r3, r2
 800b376:	60c3      	str	r3, [r0, #12]
 800b378:	e7eb      	b.n	800b352 <FMC_SDRAM_Timing_Init+0x44>

0800b37a <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800b37a:	4603      	mov	r3, r0
 800b37c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800b380:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800b384:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800b388:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800b38a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b38e:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800b390:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800b392:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800b394:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800b396:	4770      	bx	lr

0800b398 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b398:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b39a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b39e:	6902      	ldr	r2, [r0, #16]
 800b3a0:	4323      	orrs	r3, r4
 800b3a2:	68cc      	ldr	r4, [r1, #12]
 800b3a4:	f36f 0215 	bfc	r2, #0, #22
 800b3a8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	688a      	ldr	r2, [r1, #8]
 800b3b0:	3a01      	subs	r2, #1
 800b3b2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b3b6:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	bd10      	pop	{r4, pc}

0800b3bc <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b3bc:	6943      	ldr	r3, [r0, #20]
 800b3be:	f36f 034d 	bfc	r3, #1, #13
 800b3c2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b3c6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	4770      	bx	lr

0800b3cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b3cc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b3ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3d2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b3d4:	f001 fede 	bl	800d194 <xTaskGetSchedulerState>
 800b3d8:	2801      	cmp	r0, #1
 800b3da:	d003      	beq.n	800b3e4 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b3dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800b3e0:	f000 bc48 	b.w	800bc74 <xPortSysTickHandler>
}
 800b3e4:	bd08      	pop	{r3, pc}
	...

0800b3e8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ec:	b92b      	cbnz	r3, 800b3fa <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3ee:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <osKernelInitialize+0x20>)
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	b928      	cbnz	r0, 800b400 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3f8:	4770      	bx	lr
    stat = osErrorISR;
 800b3fa:	f06f 0005 	mvn.w	r0, #5
 800b3fe:	4770      	bx	lr
    } else {
      stat = osError;
 800b400:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	2400c52c 	.word	0x2400c52c

0800b40c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b40c:	b510      	push	{r4, lr}
 800b40e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b412:	b95c      	cbnz	r4, 800b42c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b414:	4b08      	ldr	r3, [pc, #32]	@ (800b438 <osKernelStart+0x2c>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	2a01      	cmp	r2, #1
 800b41a:	d10a      	bne.n	800b432 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b41c:	4a07      	ldr	r2, [pc, #28]	@ (800b43c <osKernelStart+0x30>)
 800b41e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b420:	2202      	movs	r2, #2
 800b422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b424:	f001 fd56 	bl	800ced4 <vTaskStartScheduler>
      stat = osOK;
 800b428:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b42a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b42c:	f06f 0005 	mvn.w	r0, #5
 800b430:	e7fb      	b.n	800b42a <osKernelStart+0x1e>
      stat = osError;
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b436:	e7f8      	b.n	800b42a <osKernelStart+0x1e>
 800b438:	2400c52c 	.word	0x2400c52c
 800b43c:	e000ed00 	.word	0xe000ed00

0800b440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b442:	4614      	mov	r4, r2
 800b444:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b446:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b448:	460b      	mov	r3, r1
  hTask = NULL;
 800b44a:	9205      	str	r2, [sp, #20]
 800b44c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b450:	b9fa      	cbnz	r2, 800b492 <osThreadNew+0x52>
 800b452:	b1f0      	cbz	r0, 800b492 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b454:	b354      	cbz	r4, 800b4ac <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b456:	69a5      	ldr	r5, [r4, #24]
 800b458:	b125      	cbz	r5, 800b464 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b45a:	1e69      	subs	r1, r5, #1
 800b45c:	2937      	cmp	r1, #55	@ 0x37
 800b45e:	d902      	bls.n	800b466 <osThreadNew+0x26>
        return (NULL);
 800b460:	2000      	movs	r0, #0
 800b462:	e017      	b.n	800b494 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800b464:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b466:	6862      	ldr	r2, [r4, #4]
 800b468:	07d2      	lsls	r2, r2, #31
 800b46a:	d4f9      	bmi.n	800b460 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800b46c:	6966      	ldr	r6, [r4, #20]
 800b46e:	b19e      	cbz	r6, 800b498 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b470:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b472:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b474:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800b478:	b187      	cbz	r7, 800b49c <osThreadNew+0x5c>
 800b47a:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800b47e:	d908      	bls.n	800b492 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b480:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b482:	b134      	cbz	r4, 800b492 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b484:	b12e      	cbz	r6, 800b492 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b486:	9500      	str	r5, [sp, #0]
 800b488:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b48c:	f001 fb87 	bl	800cb9e <xTaskCreateStatic>
 800b490:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b492:	9805      	ldr	r0, [sp, #20]
}
 800b494:	b007      	add	sp, #28
 800b496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b498:	2280      	movs	r2, #128	@ 0x80
 800b49a:	e7ea      	b.n	800b472 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b49c:	f1bc 0f00 	cmp.w	ip, #0
 800b4a0:	d1f7      	bne.n	800b492 <osThreadNew+0x52>
 800b4a2:	6924      	ldr	r4, [r4, #16]
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	d1f4      	bne.n	800b492 <osThreadNew+0x52>
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	e001      	b.n	800b4b0 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800b4ac:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800b4ae:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b4b0:	a905      	add	r1, sp, #20
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	e9cd 5100 	strd	r5, r1, [sp]
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f001 fba8 	bl	800cc0e <xTaskCreate>
 800b4be:	2801      	cmp	r0, #1
            hTask = NULL;
 800b4c0:	bf1c      	itt	ne
 800b4c2:	2300      	movne	r3, #0
 800b4c4:	9305      	strne	r3, [sp, #20]
 800b4c6:	e7e4      	b.n	800b492 <osThreadNew+0x52>

0800b4c8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b4d0:	b117      	cbz	r7, 800b4d8 <osMutexNew+0x10>
  hMutex = NULL;
 800b4d2:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800b4d8:	b320      	cbz	r0, 800b524 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800b4da:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b4dc:	0733      	lsls	r3, r6, #28
 800b4de:	d4f8      	bmi.n	800b4d2 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b4e0:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b4e4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800b4e8:	b199      	cbz	r1, 800b512 <osMutexNew+0x4a>
 800b4ea:	2b4f      	cmp	r3, #79	@ 0x4f
 800b4ec:	d9f1      	bls.n	800b4d2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b4ee:	b1be      	cbz	r6, 800b520 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b4f0:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b4f2:	f000 fec6 	bl	800c282 <xQueueCreateMutexStatic>
 800b4f6:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0ea      	beq.n	800b4d2 <osMutexNew+0xa>
          name = attr->name;
 800b4fc:	682d      	ldr	r5, [r5, #0]
 800b4fe:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800b500:	4629      	mov	r1, r5
 800b502:	4620      	mov	r0, r4
 800b504:	f001 f986 	bl	800c814 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b508:	2f00      	cmp	r7, #0
 800b50a:	d0e3      	beq.n	800b4d4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b50c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b510:	e7e0      	b.n	800b4d4 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1dd      	bne.n	800b4d2 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800b516:	b12e      	cbz	r6, 800b524 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b518:	2004      	movs	r0, #4
 800b51a:	f000 fee6 	bl	800c2ea <xQueueCreateMutex>
 800b51e:	e7ea      	b.n	800b4f6 <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b520:	2001      	movs	r0, #1
 800b522:	e7e6      	b.n	800b4f2 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800b524:	2001      	movs	r0, #1
 800b526:	f000 fee0 	bl	800c2ea <xQueueCreateMutex>
      if (hMutex != NULL) {
 800b52a:	4604      	mov	r4, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d0d0      	beq.n	800b4d2 <osMutexNew+0xa>
        if (attr != NULL) {
 800b530:	2d00      	cmp	r5, #0
 800b532:	d0e5      	beq.n	800b500 <osMutexNew+0x38>
 800b534:	2600      	movs	r6, #0
 800b536:	e7e1      	b.n	800b4fc <osMutexNew+0x34>

0800b538 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4603      	mov	r3, r0
 800b53c:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b53e:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b542:	f003 0201 	and.w	r2, r3, #1
 800b546:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b54a:	b995      	cbnz	r5, 800b572 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d913      	bls.n	800b578 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b550:	b162      	cbz	r2, 800b56c <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b552:	f001 f8f0 	bl	800c736 <xQueueTakeMutexRecursive>
 800b556:	2801      	cmp	r0, #1
 800b558:	d101      	bne.n	800b55e <osMutexAcquire+0x26>
  stat = osOK;
 800b55a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b55c:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b55e:	2c00      	cmp	r4, #0
 800b560:	bf14      	ite	ne
 800b562:	f06f 0001 	mvnne.w	r0, #1
 800b566:	f06f 0002 	mvneq.w	r0, #2
 800b56a:	e7f7      	b.n	800b55c <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b56c:	f001 f826 	bl	800c5bc <xQueueSemaphoreTake>
 800b570:	e7f1      	b.n	800b556 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b572:	f06f 0005 	mvn.w	r0, #5
 800b576:	e7f1      	b.n	800b55c <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b578:	f06f 0003 	mvn.w	r0, #3
 800b57c:	e7ee      	b.n	800b55c <osMutexAcquire+0x24>

0800b57e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b57e:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b580:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b584:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b586:	f002 0301 	and.w	r3, r2, #1
 800b58a:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b58e:	b979      	cbnz	r1, 800b5b0 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b590:	2a01      	cmp	r2, #1
 800b592:	d910      	bls.n	800b5b6 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b594:	b13b      	cbz	r3, 800b5a6 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b596:	f000 fe89 	bl	800c2ac <xQueueGiveMutexRecursive>
 800b59a:	2801      	cmp	r0, #1
  stat = osOK;
 800b59c:	bf0c      	ite	eq
 800b59e:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b5a0:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b5a4:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f000 fdb8 	bl	800c11e <xQueueGenericSend>
 800b5ae:	e7f4      	b.n	800b59a <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b5b0:	f06f 0005 	mvn.w	r0, #5
 800b5b4:	e7f6      	b.n	800b5a4 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b5b6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b5ba:	e7f3      	b.n	800b5a4 <osMutexRelease+0x26>

0800b5bc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5be:	4604      	mov	r4, r0
 800b5c0:	460e      	mov	r6, r1
 800b5c2:	4615      	mov	r5, r2
 800b5c4:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b5c8:	b942      	cbnz	r2, 800b5dc <osSemaphoreNew+0x20>
 800b5ca:	b138      	cbz	r0, 800b5dc <osSemaphoreNew+0x20>
 800b5cc:	4288      	cmp	r0, r1
 800b5ce:	d305      	bcc.n	800b5dc <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b5d0:	b155      	cbz	r5, 800b5e8 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b5d2:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b5d6:	b12b      	cbz	r3, 800b5e4 <osSemaphoreNew+0x28>
 800b5d8:	2f4f      	cmp	r7, #79	@ 0x4f
 800b5da:	d822      	bhi.n	800b622 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b5dc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b5de:	4620      	mov	r0, r4
 800b5e0:	b003      	add	sp, #12
 800b5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	d1f9      	bne.n	800b5dc <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b5e8:	2c01      	cmp	r4, #1
 800b5ea:	d00c      	beq.n	800b606 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	f000 fd77 	bl	800c0e2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0f0      	beq.n	800b5dc <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b5fa:	b985      	cbnz	r5, 800b61e <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4620      	mov	r0, r4
 800b600:	f001 f908 	bl	800c814 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b604:	e7eb      	b.n	800b5de <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b606:	2203      	movs	r2, #3
 800b608:	2100      	movs	r1, #0
 800b60a:	2001      	movs	r0, #1
 800b60c:	f000 fd20 	bl	800c050 <xQueueGenericCreate>
 800b610:	e00e      	b.n	800b630 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b612:	461a      	mov	r2, r3
 800b614:	f000 fd43 	bl	800c09e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b618:	4604      	mov	r4, r0
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0de      	beq.n	800b5dc <osSemaphoreNew+0x20>
          name = attr->name;
 800b61e:	682d      	ldr	r5, [r5, #0]
 800b620:	e7ec      	b.n	800b5fc <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b622:	2801      	cmp	r0, #1
 800b624:	d1f5      	bne.n	800b612 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b626:	2103      	movs	r1, #3
 800b628:	9100      	str	r1, [sp, #0]
 800b62a:	4611      	mov	r1, r2
 800b62c:	f000 fcc2 	bl	800bfb4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b630:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b632:	2800      	cmp	r0, #0
 800b634:	d0d2      	beq.n	800b5dc <osSemaphoreNew+0x20>
 800b636:	2e00      	cmp	r6, #0
 800b638:	d0df      	beq.n	800b5fa <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b63a:	2300      	movs	r3, #0
 800b63c:	461a      	mov	r2, r3
 800b63e:	4619      	mov	r1, r3
 800b640:	f000 fd6d 	bl	800c11e <xQueueGenericSend>
 800b644:	2801      	cmp	r0, #1
 800b646:	d0d8      	beq.n	800b5fa <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b648:	4620      	mov	r0, r4
 800b64a:	f001 f90d 	bl	800c868 <vQueueDelete>
      if (hSemaphore != NULL) {
 800b64e:	e7c5      	b.n	800b5dc <osSemaphoreNew+0x20>

0800b650 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b650:	b513      	push	{r0, r1, r4, lr}
 800b652:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b654:	b328      	cbz	r0, 800b6a2 <osSemaphoreAcquire+0x52>
 800b656:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b65a:	b1cb      	cbz	r3, 800b690 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b65c:	bb09      	cbnz	r1, 800b6a2 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b65e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b660:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b662:	f001 f889 	bl	800c778 <xQueueReceiveFromISR>
 800b666:	2801      	cmp	r0, #1
 800b668:	d003      	beq.n	800b672 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b66a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b66e:	b002      	add	sp, #8
 800b670:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b672:	9b01      	ldr	r3, [sp, #4]
 800b674:	b90b      	cbnz	r3, 800b67a <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b676:	2000      	movs	r0, #0
 800b678:	e7f9      	b.n	800b66e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b67a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b682:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	e7f2      	b.n	800b676 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b690:	f000 ff94 	bl	800c5bc <xQueueSemaphoreTake>
 800b694:	2801      	cmp	r0, #1
 800b696:	d0ee      	beq.n	800b676 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b698:	2c00      	cmp	r4, #0
 800b69a:	d0e6      	beq.n	800b66a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b69c:	f06f 0001 	mvn.w	r0, #1
 800b6a0:	e7e5      	b.n	800b66e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b6a2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b6a6:	e7e2      	b.n	800b66e <osSemaphoreAcquire+0x1e>

0800b6a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b6a8:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b6aa:	b318      	cbz	r0, 800b6f4 <osSemaphoreRelease+0x4c>
 800b6ac:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b6b0:	b1cb      	cbz	r3, 800b6e6 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b6b2:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b6b4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b6b6:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b6b8:	f000 fe91 	bl	800c3de <xQueueGiveFromISR>
 800b6bc:	2801      	cmp	r0, #1
 800b6be:	d004      	beq.n	800b6ca <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b6c0:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b6c4:	b003      	add	sp, #12
 800b6c6:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	b14b      	cbz	r3, 800b6e2 <osSemaphoreRelease+0x3a>
 800b6ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	e7ee      	b.n	800b6c4 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f000 fd18 	bl	800c11e <xQueueGenericSend>
 800b6ee:	2801      	cmp	r0, #1
 800b6f0:	d0f7      	beq.n	800b6e2 <osSemaphoreRelease+0x3a>
 800b6f2:	e7e5      	b.n	800b6c0 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b6f4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b6f8:	e7e4      	b.n	800b6c4 <osSemaphoreRelease+0x1c>

0800b6fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b6fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	460e      	mov	r6, r1
 800b700:	4614      	mov	r4, r2
 800b702:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b706:	b11f      	cbz	r7, 800b710 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b708:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b70a:	4628      	mov	r0, r5
 800b70c:	b003      	add	sp, #12
 800b70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b710:	2800      	cmp	r0, #0
 800b712:	d0f9      	beq.n	800b708 <osMessageQueueNew+0xe>
 800b714:	2900      	cmp	r1, #0
 800b716:	d0f7      	beq.n	800b708 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b718:	b1da      	cbz	r2, 800b752 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b71a:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b71e:	b183      	cbz	r3, 800b742 <osMessageQueueNew+0x48>
 800b720:	2a4f      	cmp	r2, #79	@ 0x4f
 800b722:	d9f1      	bls.n	800b708 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b724:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b726:	2a00      	cmp	r2, #0
 800b728:	d0ee      	beq.n	800b708 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b72a:	434d      	muls	r5, r1
 800b72c:	6966      	ldr	r6, [r4, #20]
 800b72e:	42ae      	cmp	r6, r5
 800b730:	d3ea      	bcc.n	800b708 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b732:	9700      	str	r7, [sp, #0]
 800b734:	f000 fc3e 	bl	800bfb4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b738:	4605      	mov	r5, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d0e4      	beq.n	800b708 <osMessageQueueNew+0xe>
        name = attr->name;
 800b73e:	6824      	ldr	r4, [r4, #0]
 800b740:	e011      	b.n	800b766 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b742:	2a00      	cmp	r2, #0
 800b744:	d1e0      	bne.n	800b708 <osMessageQueueNew+0xe>
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1dd      	bne.n	800b708 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b74c:	6963      	ldr	r3, [r4, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1da      	bne.n	800b708 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b752:	4628      	mov	r0, r5
 800b754:	2200      	movs	r2, #0
 800b756:	4631      	mov	r1, r6
 800b758:	f000 fc7a 	bl	800c050 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b75c:	4605      	mov	r5, r0
 800b75e:	2800      	cmp	r0, #0
 800b760:	d0d2      	beq.n	800b708 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b762:	2c00      	cmp	r4, #0
 800b764:	d1eb      	bne.n	800b73e <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f001 f853 	bl	800c814 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b76e:	e7cc      	b.n	800b70a <osMessageQueueNew+0x10>

0800b770 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b770:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b772:	461c      	mov	r4, r3
 800b774:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b778:	b1de      	cbz	r6, 800b7b2 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b77a:	b338      	cbz	r0, 800b7cc <osMessageQueuePut+0x5c>
 800b77c:	b331      	cbz	r1, 800b7cc <osMessageQueuePut+0x5c>
 800b77e:	bb2b      	cbnz	r3, 800b7cc <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b780:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b782:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b784:	f000 fdce 	bl	800c324 <xQueueGenericSendFromISR>
 800b788:	2801      	cmp	r0, #1
 800b78a:	d003      	beq.n	800b794 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b78c:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b790:	b002      	add	sp, #8
 800b792:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	b90b      	cbnz	r3, 800b79c <osMessageQueuePut+0x2c>
  stat = osOK;
 800b798:	2000      	movs	r0, #0
 800b79a:	e7f9      	b.n	800b790 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b79c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	e7f2      	b.n	800b798 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b7b2:	b158      	cbz	r0, 800b7cc <osMessageQueuePut+0x5c>
 800b7b4:	b151      	cbz	r1, 800b7cc <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b7b6:	4633      	mov	r3, r6
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	f000 fcb0 	bl	800c11e <xQueueGenericSend>
 800b7be:	2801      	cmp	r0, #1
 800b7c0:	d0ea      	beq.n	800b798 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	d0e2      	beq.n	800b78c <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b7c6:	f06f 0001 	mvn.w	r0, #1
 800b7ca:	e7e1      	b.n	800b790 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b7cc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b7d0:	e7de      	b.n	800b790 <osMessageQueuePut+0x20>

0800b7d2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7d4:	461c      	mov	r4, r3
 800b7d6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b7da:	b1db      	cbz	r3, 800b814 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7dc:	b330      	cbz	r0, 800b82c <osMessageQueueGet+0x5a>
 800b7de:	b329      	cbz	r1, 800b82c <osMessageQueueGet+0x5a>
 800b7e0:	bb24      	cbnz	r4, 800b82c <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7e2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b7e4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7e6:	f000 ffc7 	bl	800c778 <xQueueReceiveFromISR>
 800b7ea:	2801      	cmp	r0, #1
 800b7ec:	d003      	beq.n	800b7f6 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b7ee:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b7f2:	b003      	add	sp, #12
 800b7f4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	b90b      	cbnz	r3, 800b7fe <osMessageQueueGet+0x2c>
  stat = osOK;
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e7f9      	b.n	800b7f2 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b7fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b806:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	e7f2      	b.n	800b7fa <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b814:	b150      	cbz	r0, 800b82c <osMessageQueueGet+0x5a>
 800b816:	b149      	cbz	r1, 800b82c <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b818:	4622      	mov	r2, r4
 800b81a:	f000 fe31 	bl	800c480 <xQueueReceive>
 800b81e:	2801      	cmp	r0, #1
 800b820:	d0eb      	beq.n	800b7fa <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b822:	2c00      	cmp	r4, #0
 800b824:	d0e3      	beq.n	800b7ee <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b826:	f06f 0001 	mvn.w	r0, #1
 800b82a:	e7e2      	b.n	800b7f2 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b82c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b830:	e7df      	b.n	800b7f2 <osMessageQueueGet+0x20>
	...

0800b834 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b834:	4b03      	ldr	r3, [pc, #12]	@ (800b844 <vApplicationGetIdleTaskMemory+0x10>)
 800b836:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b838:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <vApplicationGetIdleTaskMemory+0x14>)
 800b83a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b83c:	2380      	movs	r3, #128	@ 0x80
 800b83e:	6013      	str	r3, [r2, #0]
}
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	2400c4cc 	.word	0x2400c4cc
 800b848:	2400c2cc 	.word	0x2400c2cc

0800b84c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b84c:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <vApplicationGetTimerTaskMemory+0x10>)
 800b84e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b850:	4b03      	ldr	r3, [pc, #12]	@ (800b860 <vApplicationGetTimerTaskMemory+0x14>)
 800b852:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b858:	6013      	str	r3, [r2, #0]
}
 800b85a:	4770      	bx	lr
 800b85c:	2400c26c 	.word	0x2400c26c
 800b860:	2400be6c 	.word	0x2400be6c

0800b864 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b864:	4b10      	ldr	r3, [pc, #64]	@ (800b8a8 <prvInsertBlockIntoFreeList+0x44>)
{
 800b866:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b868:	461a      	mov	r2, r3
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4283      	cmp	r3, r0
 800b86e:	d3fb      	bcc.n	800b868 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b870:	6854      	ldr	r4, [r2, #4]
 800b872:	1911      	adds	r1, r2, r4
 800b874:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b876:	bf01      	itttt	eq
 800b878:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800b87a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b87c:	1909      	addeq	r1, r1, r4
 800b87e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b880:	6844      	ldr	r4, [r0, #4]
 800b882:	1901      	adds	r1, r0, r4
 800b884:	428b      	cmp	r3, r1
 800b886:	d10c      	bne.n	800b8a2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b888:	4908      	ldr	r1, [pc, #32]	@ (800b8ac <prvInsertBlockIntoFreeList+0x48>)
 800b88a:	6809      	ldr	r1, [r1, #0]
 800b88c:	428b      	cmp	r3, r1
 800b88e:	d003      	beq.n	800b898 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b890:	6859      	ldr	r1, [r3, #4]
 800b892:	4421      	add	r1, r4
 800b894:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b896:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b898:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b89a:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b89c:	bf18      	it	ne
 800b89e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a0:	bd10      	pop	{r4, pc}
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	e7f8      	b.n	800b898 <prvInsertBlockIntoFreeList+0x34>
 800b8a6:	bf00      	nop
 800b8a8:	2400c548 	.word	0x2400c548
 800b8ac:	2400c544 	.word	0x2400c544

0800b8b0 <pvPortMalloc>:
{
 800b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b8b6:	f001 f9d9 	bl	800cc6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b8ba:	4940      	ldr	r1, [pc, #256]	@ (800b9bc <pvPortMalloc+0x10c>)
 800b8bc:	4d40      	ldr	r5, [pc, #256]	@ (800b9c0 <pvPortMalloc+0x110>)
 800b8be:	680b      	ldr	r3, [r1, #0]
 800b8c0:	b9f3      	cbnz	r3, 800b900 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b8c2:	4a40      	ldr	r2, [pc, #256]	@ (800b9c4 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b8c4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8c6:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8c8:	4e3f      	ldr	r6, [pc, #252]	@ (800b9c8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ca:	bf1b      	ittet	ne
 800b8cc:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8ce:	4b3f      	ldrne	r3, [pc, #252]	@ (800b9cc <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8d0:	4b3f      	ldreq	r3, [pc, #252]	@ (800b9d0 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8d2:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b8d6:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8d8:	bf18      	it	ne
 800b8da:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8dc:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8de:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b8e0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8e2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b8e6:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8ea:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b8ec:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8ee:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f2:	4b38      	ldr	r3, [pc, #224]	@ (800b9d4 <pvPortMalloc+0x124>)
 800b8f4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f6:	4b38      	ldr	r3, [pc, #224]	@ (800b9d8 <pvPortMalloc+0x128>)
 800b8f8:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8fe:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b900:	682e      	ldr	r6, [r5, #0]
 800b902:	4226      	tst	r6, r4
 800b904:	d155      	bne.n	800b9b2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b906:	2c00      	cmp	r4, #0
 800b908:	d046      	beq.n	800b998 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b90a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b90e:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b910:	bf1c      	itt	ne
 800b912:	f023 0307 	bicne.w	r3, r3, #7
 800b916:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d04a      	beq.n	800b9b2 <pvPortMalloc+0x102>
 800b91c:	4f2e      	ldr	r7, [pc, #184]	@ (800b9d8 <pvPortMalloc+0x128>)
 800b91e:	683c      	ldr	r4, [r7, #0]
 800b920:	429c      	cmp	r4, r3
 800b922:	d346      	bcc.n	800b9b2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b924:	4a28      	ldr	r2, [pc, #160]	@ (800b9c8 <pvPortMalloc+0x118>)
 800b926:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b928:	6868      	ldr	r0, [r5, #4]
 800b92a:	4298      	cmp	r0, r3
 800b92c:	d204      	bcs.n	800b938 <pvPortMalloc+0x88>
 800b92e:	f8d5 c000 	ldr.w	ip, [r5]
 800b932:	f1bc 0f00 	cmp.w	ip, #0
 800b936:	d115      	bne.n	800b964 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b938:	6809      	ldr	r1, [r1, #0]
 800b93a:	42a9      	cmp	r1, r5
 800b93c:	d039      	beq.n	800b9b2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b93e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b940:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b944:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b946:	1ac2      	subs	r2, r0, r3
 800b948:	2a10      	cmp	r2, #16
 800b94a:	d912      	bls.n	800b972 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b94c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b94e:	0741      	lsls	r1, r0, #29
 800b950:	d00b      	beq.n	800b96a <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	e7fe      	b.n	800b962 <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800b964:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b966:	4665      	mov	r5, ip
 800b968:	e7de      	b.n	800b928 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b96a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b96c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b96e:	f7ff ff79 	bl	800b864 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b972:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b974:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b976:	4917      	ldr	r1, [pc, #92]	@ (800b9d4 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b978:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b97a:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b97c:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b97e:	4a17      	ldr	r2, [pc, #92]	@ (800b9dc <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b980:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b982:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b984:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b986:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b988:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b98c:	bf38      	it	cc
 800b98e:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b990:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b994:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b996:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b998:	f001 fa0c 	bl	800cdb4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b99c:	0763      	lsls	r3, r4, #29
 800b99e:	d00a      	beq.n	800b9b6 <pvPortMalloc+0x106>
 800b9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	e7fe      	b.n	800b9b0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	e7f0      	b.n	800b998 <pvPortMalloc+0xe8>
}
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9bc:	2400c544 	.word	0x2400c544
 800b9c0:	2400c530 	.word	0x2400c530
 800b9c4:	2400c550 	.word	0x2400c550
 800b9c8:	2400c548 	.word	0x2400c548
 800b9cc:	24024bf0 	.word	0x24024bf0
 800b9d0:	000186a0 	.word	0x000186a0
 800b9d4:	2400c53c 	.word	0x2400c53c
 800b9d8:	2400c540 	.word	0x2400c540
 800b9dc:	2400c538 	.word	0x2400c538

0800b9e0 <vPortFree>:
{
 800b9e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	b390      	cbz	r0, 800ba4c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9e6:	4a1a      	ldr	r2, [pc, #104]	@ (800ba50 <vPortFree+0x70>)
 800b9e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	4213      	tst	r3, r2
 800b9f0:	d108      	bne.n	800ba04 <vPortFree+0x24>
 800b9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	e7fe      	b.n	800ba02 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba04:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ba08:	b141      	cbz	r1, 800ba1c <vPortFree+0x3c>
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	e7fe      	b.n	800ba1a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba1c:	ea23 0302 	bic.w	r3, r3, r2
 800ba20:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ba24:	f001 f922 	bl	800cc6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba28:	4a0a      	ldr	r2, [pc, #40]	@ (800ba54 <vPortFree+0x74>)
 800ba2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba2e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba32:	6811      	ldr	r1, [r2, #0]
 800ba34:	440b      	add	r3, r1
 800ba36:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba38:	f7ff ff14 	bl	800b864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba3c:	4a06      	ldr	r2, [pc, #24]	@ (800ba58 <vPortFree+0x78>)
 800ba3e:	6813      	ldr	r3, [r2, #0]
 800ba40:	3301      	adds	r3, #1
}
 800ba42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800ba46:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ba48:	f001 b9b4 	b.w	800cdb4 <xTaskResumeAll>
}
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	bf00      	nop
 800ba50:	2400c530 	.word	0x2400c530
 800ba54:	2400c540 	.word	0x2400c540
 800ba58:	2400c534 	.word	0x2400c534

0800ba5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba5c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba64:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba66:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba68:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba70:	4770      	bx	lr

0800ba72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba76:	4770      	bx	lr

0800ba78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba78:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba7a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ba7c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba7e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba80:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba82:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ba84:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ba86:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ba88:	3301      	adds	r3, #1
 800ba8a:	6003      	str	r3, [r0, #0]
}
 800ba8c:	4770      	bx	lr

0800ba8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba8e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba90:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba92:	1c63      	adds	r3, r4, #1
 800ba94:	d10a      	bne.n	800baac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba96:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba9c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba9e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800baa0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800baa2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800baa4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800baa6:	3301      	adds	r3, #1
 800baa8:	6003      	str	r3, [r0, #0]
}
 800baaa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800baac:	f100 0208 	add.w	r2, r0, #8
 800bab0:	4613      	mov	r3, r2
 800bab2:	6852      	ldr	r2, [r2, #4]
 800bab4:	6815      	ldr	r5, [r2, #0]
 800bab6:	42a5      	cmp	r5, r4
 800bab8:	d9fa      	bls.n	800bab0 <vListInsert+0x22>
 800baba:	e7ed      	b.n	800ba98 <vListInsert+0xa>

0800babc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800babc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800babe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800bac2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bac4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bac6:	6859      	ldr	r1, [r3, #4]
 800bac8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800baca:	bf08      	it	eq
 800bacc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bace:	2200      	movs	r2, #0
 800bad0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	3a01      	subs	r2, #1
 800bad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bad8:	6818      	ldr	r0, [r3, #0]
}
 800bada:	4770      	bx	lr

0800badc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800badc:	4808      	ldr	r0, [pc, #32]	@ (800bb00 <prvPortStartFirstTask+0x24>)
 800bade:	6800      	ldr	r0, [r0, #0]
 800bae0:	6800      	ldr	r0, [r0, #0]
 800bae2:	f380 8808 	msr	MSP, r0
 800bae6:	f04f 0000 	mov.w	r0, #0
 800baea:	f380 8814 	msr	CONTROL, r0
 800baee:	b662      	cpsie	i
 800baf0:	b661      	cpsie	f
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	df00      	svc	0
 800bafc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bafe:	0000      	.short	0x0000
 800bb00:	e000ed08 	.word	0xe000ed08

0800bb04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb14 <vPortEnableVFP+0x10>
 800bb08:	6801      	ldr	r1, [r0, #0]
 800bb0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb0e:	6001      	str	r1, [r0, #0]
 800bb10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb12:	0000      	.short	0x0000
 800bb14:	e000ed88 	.word	0xe000ed88

0800bb18 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800bb18:	2300      	movs	r3, #0
{
 800bb1a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800bb1c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <prvTaskExitError+0x3c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3301      	adds	r3, #1
 800bb24:	d008      	beq.n	800bb38 <prvTaskExitError+0x20>
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	e7fe      	b.n	800bb36 <prvTaskExitError+0x1e>
 800bb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800bb48:	9b01      	ldr	r3, [sp, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0fc      	beq.n	800bb48 <prvTaskExitError+0x30>
}
 800bb4e:	b002      	add	sp, #8
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	24000078 	.word	0x24000078

0800bb58 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb5c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb60:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800bb64:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb66:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb68:	4b03      	ldr	r3, [pc, #12]	@ (800bb78 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb6a:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb6c:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb6e:	f06f 0302 	mvn.w	r3, #2
 800bb72:	6203      	str	r3, [r0, #32]
}
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	0800bb19 	.word	0x0800bb19
 800bb7c:	00000000 	.word	0x00000000

0800bb80 <SVC_Handler>:
	__asm volatile (
 800bb80:	4b07      	ldr	r3, [pc, #28]	@ (800bba0 <pxCurrentTCBConst2>)
 800bb82:	6819      	ldr	r1, [r3, #0]
 800bb84:	6808      	ldr	r0, [r1, #0]
 800bb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8a:	f380 8809 	msr	PSP, r0
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f04f 0000 	mov.w	r0, #0
 800bb96:	f380 8811 	msr	BASEPRI, r0
 800bb9a:	4770      	bx	lr
 800bb9c:	f3af 8000 	nop.w

0800bba0 <pxCurrentTCBConst2>:
 800bba0:	24025130 	.word	0x24025130

0800bba4 <vPortEnterCritical>:
 800bba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800bbb4:	4a0a      	ldr	r2, [pc, #40]	@ (800bbe0 <vPortEnterCritical+0x3c>)
 800bbb6:	6813      	ldr	r3, [r2, #0]
 800bbb8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800bbba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800bbbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bbbe:	d10e      	bne.n	800bbde <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbc0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bbc4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	b143      	cbz	r3, 800bbde <vPortEnterCritical+0x3a>
 800bbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	e7fe      	b.n	800bbdc <vPortEnterCritical+0x38>
}
 800bbde:	4770      	bx	lr
 800bbe0:	24000078 	.word	0x24000078

0800bbe4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bbe4:	4a08      	ldr	r2, [pc, #32]	@ (800bc08 <vPortExitCritical+0x24>)
 800bbe6:	6813      	ldr	r3, [r2, #0]
 800bbe8:	b943      	cbnz	r3, 800bbfc <vPortExitCritical+0x18>
 800bbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	e7fe      	b.n	800bbfa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc00:	b90b      	cbnz	r3, 800bc06 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc02:	f383 8811 	msr	BASEPRI, r3
}
 800bc06:	4770      	bx	lr
 800bc08:	24000078 	.word	0x24000078
 800bc0c:	00000000 	.word	0x00000000

0800bc10 <PendSV_Handler>:
	__asm volatile
 800bc10:	f3ef 8009 	mrs	r0, PSP
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	4b15      	ldr	r3, [pc, #84]	@ (800bc70 <pxCurrentTCBConst>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	f01e 0f10 	tst.w	lr, #16
 800bc20:	bf08      	it	eq
 800bc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2a:	6010      	str	r0, [r2, #0]
 800bc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc34:	f380 8811 	msr	BASEPRI, r0
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f001 f996 	bl	800cf70 <vTaskSwitchContext>
 800bc44:	f04f 0000 	mov.w	r0, #0
 800bc48:	f380 8811 	msr	BASEPRI, r0
 800bc4c:	bc09      	pop	{r0, r3}
 800bc4e:	6819      	ldr	r1, [r3, #0]
 800bc50:	6808      	ldr	r0, [r1, #0]
 800bc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc56:	f01e 0f10 	tst.w	lr, #16
 800bc5a:	bf08      	it	eq
 800bc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc60:	f380 8809 	msr	PSP, r0
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w

0800bc70 <pxCurrentTCBConst>:
 800bc70:	24025130 	.word	0x24025130

0800bc74 <xPortSysTickHandler>:
{
 800bc74:	b508      	push	{r3, lr}
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800bc86:	f000 ffff 	bl	800cc88 <xTaskIncrementTick>
 800bc8a:	b128      	cbz	r0, 800bc98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f383 8811 	msr	BASEPRI, r3
}
 800bc9e:	bd08      	pop	{r3, pc}

0800bca0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bca0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800bca4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bca6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcaa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcae:	4b04      	ldr	r3, [pc, #16]	@ (800bcc0 <vPortSetupTimerInterrupt+0x20>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcba:	2307      	movs	r3, #7
 800bcbc:	6113      	str	r3, [r2, #16]
}
 800bcbe:	4770      	bx	lr
 800bcc0:	2400006c 	.word	0x2400006c

0800bcc4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcca:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800bcce:	4a38      	ldr	r2, [pc, #224]	@ (800bdb0 <xPortStartScheduler+0xec>)
 800bcd0:	4291      	cmp	r1, r2
 800bcd2:	d108      	bne.n	800bce6 <xPortStartScheduler+0x22>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	e7fe      	b.n	800bce4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bce6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800bcea:	4b32      	ldr	r3, [pc, #200]	@ (800bdb4 <xPortStartScheduler+0xf0>)
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d108      	bne.n	800bd02 <xPortStartScheduler+0x3e>
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	e7fe      	b.n	800bd00 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd02:	4b2d      	ldr	r3, [pc, #180]	@ (800bdb8 <xPortStartScheduler+0xf4>)
 800bd04:	781a      	ldrb	r2, [r3, #0]
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd0a:	22ff      	movs	r2, #255	@ 0xff
 800bd0c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd0e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd10:	4a2a      	ldr	r2, [pc, #168]	@ (800bdbc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd20:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd22:	2307      	movs	r3, #7
 800bd24:	4a26      	ldr	r2, [pc, #152]	@ (800bdc0 <xPortStartScheduler+0xfc>)
 800bd26:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd28:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800bd2c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd2e:	0609      	lsls	r1, r1, #24
 800bd30:	d40a      	bmi.n	800bd48 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	d011      	beq.n	800bd5a <xPortStartScheduler+0x96>
 800bd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	e7fe      	b.n	800bd46 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f88d 3003 	strb.w	r3, [sp, #3]
 800bd58:	e7e6      	b.n	800bd28 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd5e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800bd62:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd64:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	4a13      	ldr	r2, [pc, #76]	@ (800bdb8 <xPortStartScheduler+0xf4>)
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd6e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800bd72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bd76:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd7a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800bd7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bd82:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800bd86:	f7ff ff8b 	bl	800bca0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc4 <xPortStartScheduler+0x100>)
 800bd8c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800bd8e:	f7ff feb9 	bl	800bb04 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd92:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800bd96:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bd9a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800bd9e:	f7ff fe9d 	bl	800badc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bda2:	f001 f8e5 	bl	800cf70 <vTaskSwitchContext>
}
 800bda6:	4628      	mov	r0, r5
	prvTaskExitError();
 800bda8:	f7ff feb6 	bl	800bb18 <prvTaskExitError>
}
 800bdac:	b003      	add	sp, #12
 800bdae:	bd30      	pop	{r4, r5, pc}
 800bdb0:	410fc271 	.word	0x410fc271
 800bdb4:	410fc270 	.word	0x410fc270
 800bdb8:	e000e400 	.word	0xe000e400
 800bdbc:	24024bf4 	.word	0x24024bf4
 800bdc0:	24024bf0 	.word	0x24024bf0
 800bdc4:	24000078 	.word	0x24000078

0800bdc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdcc:	2b0f      	cmp	r3, #15
 800bdce:	d90e      	bls.n	800bdee <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdd0:	4a11      	ldr	r2, [pc, #68]	@ (800be18 <vPortValidateInterruptPriority+0x50>)
 800bdd2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4a11      	ldr	r2, [pc, #68]	@ (800be1c <vPortValidateInterruptPriority+0x54>)
 800bdd6:	7812      	ldrb	r2, [r2, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d908      	bls.n	800bdee <vPortValidateInterruptPriority+0x26>
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	e7fe      	b.n	800bdec <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bdf2:	4a0b      	ldr	r2, [pc, #44]	@ (800be20 <vPortValidateInterruptPriority+0x58>)
 800bdf4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d908      	bls.n	800be14 <vPortValidateInterruptPriority+0x4c>
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	e7fe      	b.n	800be12 <vPortValidateInterruptPriority+0x4a>
	}
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	e000e3f0 	.word	0xe000e3f0
 800be1c:	24024bf4 	.word	0x24024bf4
 800be20:	24024bf0 	.word	0x24024bf0

0800be24 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be24:	b510      	push	{r4, lr}
 800be26:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be28:	f7ff febc 	bl	800bba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be2c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800be2e:	f7ff fed9 	bl	800bbe4 <vPortExitCritical>

	return xReturn;
}
 800be32:	fab4 f084 	clz	r0, r4
 800be36:	0940      	lsrs	r0, r0, #5
 800be38:	bd10      	pop	{r4, pc}

0800be3a <prvCopyDataToQueue>:
{
 800be3a:	b570      	push	{r4, r5, r6, lr}
 800be3c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be3e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800be40:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be42:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be44:	b942      	cbnz	r2, 800be58 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be46:	6806      	ldr	r6, [r0, #0]
 800be48:	b99e      	cbnz	r6, 800be72 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be4a:	6880      	ldr	r0, [r0, #8]
 800be4c:	f001 f9f0 	bl	800d230 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be50:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be52:	3501      	adds	r5, #1
 800be54:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800be56:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800be58:	b96e      	cbnz	r6, 800be76 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be5a:	6840      	ldr	r0, [r0, #4]
 800be5c:	f016 fdbd 	bl	80229da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be60:	6863      	ldr	r3, [r4, #4]
 800be62:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800be64:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be66:	68a2      	ldr	r2, [r4, #8]
 800be68:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be6a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be6c:	bf24      	itt	cs
 800be6e:	6823      	ldrcs	r3, [r4, #0]
 800be70:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800be72:	2000      	movs	r0, #0
 800be74:	e7ed      	b.n	800be52 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be76:	68c0      	ldr	r0, [r0, #12]
 800be78:	f016 fdaf 	bl	80229da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be7c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800be7e:	68e3      	ldr	r3, [r4, #12]
 800be80:	4251      	negs	r1, r2
 800be82:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be84:	6822      	ldr	r2, [r4, #0]
 800be86:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be88:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be8a:	bf3e      	ittt	cc
 800be8c:	68a3      	ldrcc	r3, [r4, #8]
 800be8e:	185b      	addcc	r3, r3, r1
 800be90:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800be92:	2e02      	cmp	r6, #2
 800be94:	d1ed      	bne.n	800be72 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be96:	b10d      	cbz	r5, 800be9c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800be98:	3d01      	subs	r5, #1
 800be9a:	e7ea      	b.n	800be72 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800be9c:	4628      	mov	r0, r5
 800be9e:	e7d8      	b.n	800be52 <prvCopyDataToQueue+0x18>

0800bea0 <prvCopyDataFromQueue>:
{
 800bea0:	4603      	mov	r3, r0
 800bea2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800bea6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bea8:	b162      	cbz	r2, 800bec4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beaa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800beac:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beae:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800beb0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb2:	60dc      	str	r4, [r3, #12]
}
 800beb4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800beb8:	bf24      	itt	cs
 800beba:	6819      	ldrcs	r1, [r3, #0]
 800bebc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bebe:	68d9      	ldr	r1, [r3, #12]
 800bec0:	f016 bd8b 	b.w	80229da <memcpy>
}
 800bec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <prvUnlockQueue>:
{
 800beca:	b570      	push	{r4, r5, r6, lr}
 800becc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bece:	f7ff fe69 	bl	800bba4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800bed2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bed6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800beda:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bedc:	2d00      	cmp	r5, #0
 800bede:	dd01      	ble.n	800bee4 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bee0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bee2:	b9b3      	cbnz	r3, 800bf12 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800bee4:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bee6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800beea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800beee:	f7ff fe79 	bl	800bbe4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800bef2:	f7ff fe57 	bl	800bba4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bef6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800befa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800befc:	2d00      	cmp	r5, #0
 800befe:	dd01      	ble.n	800bf04 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	b97b      	cbnz	r3, 800bf24 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800bf04:	23ff      	movs	r3, #255	@ 0xff
 800bf06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800bf0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800bf0e:	f7ff be69 	b.w	800bbe4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf12:	4630      	mov	r0, r6
 800bf14:	f001 f8a8 	bl	800d068 <xTaskRemoveFromEventList>
 800bf18:	b108      	cbz	r0, 800bf1e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800bf1a:	f001 f92f 	bl	800d17c <vTaskMissedYield>
			--cTxLock;
 800bf1e:	3d01      	subs	r5, #1
 800bf20:	b26d      	sxtb	r5, r5
 800bf22:	e7db      	b.n	800bedc <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf24:	4630      	mov	r0, r6
 800bf26:	f001 f89f 	bl	800d068 <xTaskRemoveFromEventList>
 800bf2a:	b108      	cbz	r0, 800bf30 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800bf2c:	f001 f926 	bl	800d17c <vTaskMissedYield>
				--cRxLock;
 800bf30:	3d01      	subs	r5, #1
 800bf32:	b26d      	sxtb	r5, r5
 800bf34:	e7e2      	b.n	800befc <prvUnlockQueue+0x32>

0800bf36 <xQueueGenericReset>:
{
 800bf36:	b538      	push	{r3, r4, r5, lr}
 800bf38:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	b940      	cbnz	r0, 800bf50 <xQueueGenericReset+0x1a>
 800bf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	e7fe      	b.n	800bf4e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800bf50:	f7ff fe28 	bl	800bba4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf54:	6822      	ldr	r2, [r4, #0]
 800bf56:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf5a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf5c:	434b      	muls	r3, r1
 800bf5e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf60:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf62:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf64:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf66:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800bf68:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf6a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf6c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bf6e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf72:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800bf76:	b9a5      	cbnz	r5, 800bfa2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	b173      	cbz	r3, 800bf9a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7c:	f104 0010 	add.w	r0, r4, #16
 800bf80:	f001 f872 	bl	800d068 <xTaskRemoveFromEventList>
 800bf84:	b148      	cbz	r0, 800bf9a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bf86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bf9a:	f7ff fe23 	bl	800bbe4 <vPortExitCritical>
}
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfa2:	f104 0010 	add.w	r0, r4, #16
 800bfa6:	f7ff fd59 	bl	800ba5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfaa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bfae:	f7ff fd55 	bl	800ba5c <vListInitialise>
 800bfb2:	e7f2      	b.n	800bf9a <xQueueGenericReset+0x64>

0800bfb4 <xQueueGenericCreateStatic>:
	{
 800bfb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfba:	b940      	cbnz	r0, 800bfce <xQueueGenericCreateStatic+0x1a>
 800bfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	e7fe      	b.n	800bfcc <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800bfce:	b943      	cbnz	r3, 800bfe2 <xQueueGenericCreateStatic+0x2e>
 800bfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	e7fe      	b.n	800bfe0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfe2:	b14a      	cbz	r2, 800bff8 <xQueueGenericCreateStatic+0x44>
 800bfe4:	b991      	cbnz	r1, 800c00c <xQueueGenericCreateStatic+0x58>
 800bfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	e7fe      	b.n	800bff6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bff8:	b141      	cbz	r1, 800c00c <xQueueGenericCreateStatic+0x58>
 800bffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	e7fe      	b.n	800c00a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c00c:	2350      	movs	r3, #80	@ 0x50
 800c00e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c010:	9b01      	ldr	r3, [sp, #4]
 800c012:	2b50      	cmp	r3, #80	@ 0x50
 800c014:	d008      	beq.n	800c028 <xQueueGenericCreateStatic+0x74>
 800c016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	e7fe      	b.n	800c026 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c028:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c02a:	2d00      	cmp	r5, #0
 800c02c:	bf08      	it	eq
 800c02e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c030:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c032:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c036:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c038:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff ff7a 	bl	800bf36 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c042:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800c046:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c048:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800c04c:	b003      	add	sp, #12
 800c04e:	bd30      	pop	{r4, r5, pc}

0800c050 <xQueueGenericCreate>:
	{
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	460d      	mov	r5, r1
 800c054:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c056:	4606      	mov	r6, r0
 800c058:	b940      	cbnz	r0, 800c06c <xQueueGenericCreate+0x1c>
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	e7fe      	b.n	800c06a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c06c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c06e:	3050      	adds	r0, #80	@ 0x50
 800c070:	f7ff fc1e 	bl	800b8b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c074:	4604      	mov	r4, r0
 800c076:	b170      	cbz	r0, 800c096 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c078:	2300      	movs	r3, #0
 800c07a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c07e:	b165      	cbz	r5, 800c09a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c080:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c084:	2101      	movs	r1, #1
 800c086:	4620      	mov	r0, r4
 800c088:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c08a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c08e:	f7ff ff52 	bl	800bf36 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c092:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800c096:	4620      	mov	r0, r4
 800c098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c09a:	4603      	mov	r3, r0
 800c09c:	e7f2      	b.n	800c084 <xQueueGenericCreate+0x34>

0800c09e <xQueueCreateCountingSemaphoreStatic>:
	{
 800c09e:	b513      	push	{r0, r1, r4, lr}
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c0a4:	b940      	cbnz	r0, 800c0b8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	e7fe      	b.n	800c0b6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0b8:	4288      	cmp	r0, r1
 800c0ba:	d208      	bcs.n	800c0ce <xQueueCreateCountingSemaphoreStatic+0x30>
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	e7fe      	b.n	800c0cc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	9200      	str	r2, [sp, #0]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	f7ff ff6d 	bl	800bfb4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c0da:	b100      	cbz	r0, 800c0de <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0dc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c0de:	b002      	add	sp, #8
 800c0e0:	bd10      	pop	{r4, pc}

0800c0e2 <xQueueCreateCountingSemaphore>:
	{
 800c0e2:	b510      	push	{r4, lr}
 800c0e4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c0e6:	b940      	cbnz	r0, 800c0fa <xQueueCreateCountingSemaphore+0x18>
 800c0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	e7fe      	b.n	800c0f8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0fa:	4288      	cmp	r0, r1
 800c0fc:	d208      	bcs.n	800c110 <xQueueCreateCountingSemaphore+0x2e>
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	e7fe      	b.n	800c10e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c110:	2202      	movs	r2, #2
 800c112:	2100      	movs	r1, #0
 800c114:	f7ff ff9c 	bl	800c050 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c118:	b100      	cbz	r0, 800c11c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c11a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c11c:	bd10      	pop	{r4, pc}

0800c11e <xQueueGenericSend>:
{
 800c11e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c122:	460f      	mov	r7, r1
 800c124:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800c126:	4604      	mov	r4, r0
{
 800c128:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c12a:	b940      	cbnz	r0, 800c13e <xQueueGenericSend+0x20>
 800c12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	e7fe      	b.n	800c13c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c13e:	b951      	cbnz	r1, 800c156 <xQueueGenericSend+0x38>
 800c140:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c142:	b143      	cbz	r3, 800c156 <xQueueGenericSend+0x38>
 800c144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	e7fe      	b.n	800c154 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c156:	2e02      	cmp	r6, #2
 800c158:	d10b      	bne.n	800c172 <xQueueGenericSend+0x54>
 800c15a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d008      	beq.n	800c172 <xQueueGenericSend+0x54>
 800c160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	e7fe      	b.n	800c170 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c172:	f001 f80f 	bl	800d194 <xTaskGetSchedulerState>
 800c176:	4605      	mov	r5, r0
 800c178:	b320      	cbz	r0, 800c1c4 <xQueueGenericSend+0xa6>
 800c17a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c17c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c180:	f7ff fd10 	bl	800bba4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c184:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c186:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c188:	429a      	cmp	r2, r3
 800c18a:	d227      	bcs.n	800c1dc <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c18c:	4632      	mov	r2, r6
 800c18e:	4639      	mov	r1, r7
 800c190:	4620      	mov	r0, r4
 800c192:	f7ff fe52 	bl	800be3a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c196:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c198:	b11b      	cbz	r3, 800c1a2 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c19a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c19e:	f000 ff63 	bl	800d068 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800c1a2:	b148      	cbz	r0, 800c1b8 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800c1a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c1b8:	f7ff fd14 	bl	800bbe4 <vPortExitCritical>
				return pdPASS;
 800c1bc:	2001      	movs	r0, #1
}
 800c1be:	b004      	add	sp, #16
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0d8      	beq.n	800c17c <xQueueGenericSend+0x5e>
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	e7fe      	b.n	800c1da <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1dc:	2e02      	cmp	r6, #2
 800c1de:	d0d5      	beq.n	800c18c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	b91b      	cbnz	r3, 800c1ec <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800c1e4:	f7ff fcfe 	bl	800bbe4 <vPortExitCritical>
					return errQUEUE_FULL;
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7e8      	b.n	800c1be <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800c1ec:	b915      	cbnz	r5, 800c1f4 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1ee:	a802      	add	r0, sp, #8
 800c1f0:	f000 ff7c 	bl	800d0ec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c1f4:	f7ff fcf6 	bl	800bbe4 <vPortExitCritical>
		vTaskSuspendAll();
 800c1f8:	f000 fd38 	bl	800cc6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1fc:	f7ff fcd2 	bl	800bba4 <vPortEnterCritical>
 800c200:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c204:	2bff      	cmp	r3, #255	@ 0xff
 800c206:	d101      	bne.n	800c20c <xQueueGenericSend+0xee>
 800c208:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c20c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c210:	2bff      	cmp	r3, #255	@ 0xff
 800c212:	d101      	bne.n	800c218 <xQueueGenericSend+0xfa>
 800c214:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c218:	f7ff fce4 	bl	800bbe4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c21c:	a901      	add	r1, sp, #4
 800c21e:	a802      	add	r0, sp, #8
 800c220:	f000 ff70 	bl	800d104 <xTaskCheckForTimeOut>
 800c224:	bb38      	cbnz	r0, 800c276 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c226:	f7ff fcbd 	bl	800bba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c22a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c22c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c22e:	429a      	cmp	r2, r3
 800c230:	d10e      	bne.n	800c250 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c232:	f7ff fcd7 	bl	800bbe4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c236:	9901      	ldr	r1, [sp, #4]
 800c238:	f104 0010 	add.w	r0, r4, #16
 800c23c:	f000 fedc 	bl	800cff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c240:	4620      	mov	r0, r4
 800c242:	f7ff fe42 	bl	800beca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c246:	f000 fdb5 	bl	800cdb4 <xTaskResumeAll>
 800c24a:	b148      	cbz	r0, 800c260 <xQueueGenericSend+0x142>
 800c24c:	2501      	movs	r5, #1
 800c24e:	e797      	b.n	800c180 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800c250:	f7ff fcc8 	bl	800bbe4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800c254:	4620      	mov	r0, r4
 800c256:	f7ff fe38 	bl	800beca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c25a:	f000 fdab 	bl	800cdb4 <xTaskResumeAll>
 800c25e:	e7f5      	b.n	800c24c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800c260:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c268:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	e7ea      	b.n	800c24c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff fe27 	bl	800beca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27c:	f000 fd9a 	bl	800cdb4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c280:	e7b2      	b.n	800c1e8 <xQueueGenericSend+0xca>

0800c282 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c282:	2200      	movs	r2, #0
	{
 800c284:	460b      	mov	r3, r1
 800c286:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c288:	4611      	mov	r1, r2
 800c28a:	9000      	str	r0, [sp, #0]
 800c28c:	2001      	movs	r0, #1
 800c28e:	f7ff fe91 	bl	800bfb4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800c292:	4604      	mov	r4, r0
 800c294:	b138      	cbz	r0, 800c2a6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c296:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c298:	461a      	mov	r2, r3
 800c29a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c29c:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c29e:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c2a0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2a2:	f7ff ff3c 	bl	800c11e <xQueueGenericSend>
	}
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	b002      	add	sp, #8
 800c2aa:	bd10      	pop	{r4, pc}

0800c2ac <xQueueGiveMutexRecursive>:
	{
 800c2ac:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	b940      	cbnz	r0, 800c2c4 <xQueueGiveMutexRecursive+0x18>
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	e7fe      	b.n	800c2c2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2c4:	6885      	ldr	r5, [r0, #8]
 800c2c6:	f000 ff5f 	bl	800d188 <xTaskGetCurrentTaskHandle>
 800c2ca:	4285      	cmp	r5, r0
 800c2cc:	d10b      	bne.n	800c2e6 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2ce:	68e3      	ldr	r3, [r4, #12]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2d4:	b10b      	cbz	r3, 800c2da <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800c2d6:	2001      	movs	r0, #1
	}
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7ff ff1d 	bl	800c11e <xQueueGenericSend>
 800c2e4:	e7f7      	b.n	800c2d6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800c2e6:	2000      	movs	r0, #0
		return xReturn;
 800c2e8:	e7f6      	b.n	800c2d8 <xQueueGiveMutexRecursive+0x2c>

0800c2ea <xQueueCreateMutex>:
	{
 800c2ea:	b570      	push	{r4, r5, r6, lr}
 800c2ec:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c2ee:	2050      	movs	r0, #80	@ 0x50
 800c2f0:	f7ff fade 	bl	800b8b0 <pvPortMalloc>
 800c2f4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800c2f6:	b198      	cbz	r0, 800c320 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2f8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c2fa:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2fc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2fe:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c302:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c306:	f7ff fe16 	bl	800bf36 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c30a:	462b      	mov	r3, r5
 800c30c:	462a      	mov	r2, r5
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c312:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c316:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c318:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c31a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c31c:	f7ff feff 	bl	800c11e <xQueueGenericSend>
	}
 800c320:	4620      	mov	r0, r4
 800c322:	bd70      	pop	{r4, r5, r6, pc}

0800c324 <xQueueGenericSendFromISR>:
{
 800c324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c328:	4689      	mov	r9, r1
 800c32a:	4617      	mov	r7, r2
 800c32c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800c32e:	4604      	mov	r4, r0
 800c330:	b940      	cbnz	r0, 800c344 <xQueueGenericSendFromISR+0x20>
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	e7fe      	b.n	800c342 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c344:	b951      	cbnz	r1, 800c35c <xQueueGenericSendFromISR+0x38>
 800c346:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c348:	b143      	cbz	r3, 800c35c <xQueueGenericSendFromISR+0x38>
 800c34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	e7fe      	b.n	800c35a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c35c:	2e02      	cmp	r6, #2
 800c35e:	d10b      	bne.n	800c378 <xQueueGenericSendFromISR+0x54>
 800c360:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c362:	2b01      	cmp	r3, #1
 800c364:	d008      	beq.n	800c378 <xQueueGenericSendFromISR+0x54>
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	e7fe      	b.n	800c376 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c378:	f7ff fd26 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 800c37c:	f3ef 8811 	mrs	r8, BASEPRI
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c390:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c392:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c394:	429a      	cmp	r2, r3
 800c396:	d301      	bcc.n	800c39c <xQueueGenericSendFromISR+0x78>
 800c398:	2e02      	cmp	r6, #2
 800c39a:	d11e      	bne.n	800c3da <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c39c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3a6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3aa:	f7ff fd46 	bl	800be3a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c3ae:	1c6b      	adds	r3, r5, #1
 800c3b0:	d10e      	bne.n	800c3d0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c3b4:	b13b      	cbz	r3, 800c3c6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c3ba:	f000 fe55 	bl	800d068 <xTaskRemoveFromEventList>
 800c3be:	b110      	cbz	r0, 800c3c6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800c3c0:	b10f      	cbz	r7, 800c3c6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800c3c6:	2001      	movs	r0, #1
	__asm volatile
 800c3c8:	f388 8811 	msr	BASEPRI, r8
}
 800c3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3d0:	3501      	adds	r5, #1
 800c3d2:	b26d      	sxtb	r5, r5
 800c3d4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800c3d8:	e7f5      	b.n	800c3c6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e7f4      	b.n	800c3c8 <xQueueGenericSendFromISR+0xa4>

0800c3de <xQueueGiveFromISR>:
{
 800c3de:	b570      	push	{r4, r5, r6, lr}
 800c3e0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b940      	cbnz	r0, 800c3f8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	e7fe      	b.n	800c3f6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c3fa:	b143      	cbz	r3, 800c40e <xQueueGiveFromISR+0x30>
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	e7fe      	b.n	800c40c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c40e:	6803      	ldr	r3, [r0, #0]
 800c410:	b953      	cbnz	r3, 800c428 <xQueueGiveFromISR+0x4a>
 800c412:	6883      	ldr	r3, [r0, #8]
 800c414:	b143      	cbz	r3, 800c428 <xQueueGiveFromISR+0x4a>
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	e7fe      	b.n	800c426 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c428:	f7ff fcce 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 800c42c:	f3ef 8611 	mrs	r6, BASEPRI
 800c430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c440:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c442:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c444:	4293      	cmp	r3, r2
 800c446:	d919      	bls.n	800c47c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c44c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c44e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c450:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c452:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c454:	d10d      	bne.n	800c472 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c456:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c458:	b13b      	cbz	r3, 800c46a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c45a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c45e:	f000 fe03 	bl	800d068 <xTaskRemoveFromEventList>
 800c462:	b110      	cbz	r0, 800c46a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c464:	b10d      	cbz	r5, 800c46a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c466:	2301      	movs	r3, #1
 800c468:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800c46a:	2001      	movs	r0, #1
	__asm volatile
 800c46c:	f386 8811 	msr	BASEPRI, r6
}
 800c470:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c472:	3301      	adds	r3, #1
 800c474:	b25b      	sxtb	r3, r3
 800c476:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c47a:	e7f6      	b.n	800c46a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c47c:	2000      	movs	r0, #0
 800c47e:	e7f5      	b.n	800c46c <xQueueGiveFromISR+0x8e>

0800c480 <xQueueReceive>:
{
 800c480:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c484:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800c486:	4604      	mov	r4, r0
{
 800c488:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c48a:	b940      	cbnz	r0, 800c49e <xQueueReceive+0x1e>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	e7fe      	b.n	800c49c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c49e:	b951      	cbnz	r1, 800c4b6 <xQueueReceive+0x36>
 800c4a0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c4a2:	b143      	cbz	r3, 800c4b6 <xQueueReceive+0x36>
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	e7fe      	b.n	800c4b4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4b6:	f000 fe6d 	bl	800d194 <xTaskGetSchedulerState>
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	b318      	cbz	r0, 800c506 <xQueueReceive+0x86>
 800c4be:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c4c0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c4c4:	f7ff fb6e 	bl	800bba4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4c8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4ca:	b347      	cbz	r7, 800c51e <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4cc:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f7ff fce5 	bl	800bea0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4d6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	b173      	cbz	r3, 800c4fa <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4dc:	f104 0010 	add.w	r0, r4, #16
 800c4e0:	f000 fdc2 	bl	800d068 <xTaskRemoveFromEventList>
 800c4e4:	b148      	cbz	r0, 800c4fa <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800c4e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c4fa:	f7ff fb73 	bl	800bbe4 <vPortExitCritical>
				return pdPASS;
 800c4fe:	2001      	movs	r0, #1
}
 800c500:	b004      	add	sp, #16
 800c502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0d9      	beq.n	800c4c0 <xQueueReceive+0x40>
 800c50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	e7fe      	b.n	800c51c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	b91b      	cbnz	r3, 800c52a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800c522:	f7ff fb5f 	bl	800bbe4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c526:	2000      	movs	r0, #0
 800c528:	e7ea      	b.n	800c500 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800c52a:	b915      	cbnz	r5, 800c532 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c52c:	a802      	add	r0, sp, #8
 800c52e:	f000 fddd 	bl	800d0ec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c532:	f7ff fb57 	bl	800bbe4 <vPortExitCritical>
		vTaskSuspendAll();
 800c536:	f000 fb99 	bl	800cc6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c53a:	f7ff fb33 	bl	800bba4 <vPortEnterCritical>
 800c53e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c542:	2bff      	cmp	r3, #255	@ 0xff
 800c544:	d101      	bne.n	800c54a <xQueueReceive+0xca>
 800c546:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c54a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c54e:	2bff      	cmp	r3, #255	@ 0xff
 800c550:	d101      	bne.n	800c556 <xQueueReceive+0xd6>
 800c552:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c556:	f7ff fb45 	bl	800bbe4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c55a:	a901      	add	r1, sp, #4
 800c55c:	a802      	add	r0, sp, #8
 800c55e:	f000 fdd1 	bl	800d104 <xTaskCheckForTimeOut>
 800c562:	bb00      	cbnz	r0, 800c5a6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c564:	4620      	mov	r0, r4
 800c566:	f7ff fc5d 	bl	800be24 <prvIsQueueEmpty>
 800c56a:	b1b0      	cbz	r0, 800c59a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c56c:	9901      	ldr	r1, [sp, #4]
 800c56e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c572:	f000 fd41 	bl	800cff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c576:	4620      	mov	r0, r4
 800c578:	f7ff fca7 	bl	800beca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c57c:	f000 fc1a 	bl	800cdb4 <xTaskResumeAll>
 800c580:	b948      	cbnz	r0, 800c596 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c582:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c58a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	2501      	movs	r5, #1
 800c598:	e794      	b.n	800c4c4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c59a:	4620      	mov	r0, r4
 800c59c:	f7ff fc95 	bl	800beca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a0:	f000 fc08 	bl	800cdb4 <xTaskResumeAll>
 800c5a4:	e7f7      	b.n	800c596 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f7ff fc8f 	bl	800beca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5ac:	f000 fc02 	bl	800cdb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff fc37 	bl	800be24 <prvIsQueueEmpty>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d0ed      	beq.n	800c596 <xQueueReceive+0x116>
 800c5ba:	e7b4      	b.n	800c526 <xQueueReceive+0xa6>

0800c5bc <xQueueSemaphoreTake>:
{
 800c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5be:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c5c0:	4604      	mov	r4, r0
{
 800c5c2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c5c4:	b940      	cbnz	r0, 800c5d8 <xQueueSemaphoreTake+0x1c>
 800c5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5d8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c5da:	b145      	cbz	r5, 800c5ee <xQueueSemaphoreTake+0x32>
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	e7fe      	b.n	800c5ec <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ee:	f000 fdd1 	bl	800d194 <xTaskGetSchedulerState>
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	b320      	cbz	r0, 800c640 <xQueueSemaphoreTake+0x84>
 800c5f6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c5f8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c5fa:	f7ff fad3 	bl	800bba4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c600:	b353      	cbz	r3, 800c658 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c602:	3b01      	subs	r3, #1
 800c604:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	b913      	cbnz	r3, 800c610 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c60a:	f000 fea1 	bl	800d350 <pvTaskIncrementMutexHeldCount>
 800c60e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c610:	6923      	ldr	r3, [r4, #16]
 800c612:	b173      	cbz	r3, 800c632 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c614:	f104 0010 	add.w	r0, r4, #16
 800c618:	f000 fd26 	bl	800d068 <xTaskRemoveFromEventList>
 800c61c:	b148      	cbz	r0, 800c632 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c61e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c626:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c632:	f7ff fad7 	bl	800bbe4 <vPortExitCritical>
				return pdPASS;
 800c636:	2001      	movs	r0, #1
}
 800c638:	b005      	add	sp, #20
 800c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c63c:	4635      	mov	r5, r6
 800c63e:	e7db      	b.n	800c5f8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c640:	9b01      	ldr	r3, [sp, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0fa      	beq.n	800c63c <xQueueSemaphoreTake+0x80>
 800c646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	e7fe      	b.n	800c656 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c658:	9b01      	ldr	r3, [sp, #4]
 800c65a:	b953      	cbnz	r3, 800c672 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c65c:	2d00      	cmp	r5, #0
 800c65e:	d066      	beq.n	800c72e <xQueueSemaphoreTake+0x172>
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	e7fe      	b.n	800c670 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c672:	b916      	cbnz	r6, 800c67a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c674:	a802      	add	r0, sp, #8
 800c676:	f000 fd39 	bl	800d0ec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c67a:	f7ff fab3 	bl	800bbe4 <vPortExitCritical>
		vTaskSuspendAll();
 800c67e:	f000 faf5 	bl	800cc6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c682:	f7ff fa8f 	bl	800bba4 <vPortEnterCritical>
 800c686:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c68a:	2bff      	cmp	r3, #255	@ 0xff
 800c68c:	d101      	bne.n	800c692 <xQueueSemaphoreTake+0xd6>
 800c68e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c692:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c696:	2bff      	cmp	r3, #255	@ 0xff
 800c698:	d101      	bne.n	800c69e <xQueueSemaphoreTake+0xe2>
 800c69a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c69e:	f7ff faa1 	bl	800bbe4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6a2:	a901      	add	r1, sp, #4
 800c6a4:	a802      	add	r0, sp, #8
 800c6a6:	f000 fd2d 	bl	800d104 <xTaskCheckForTimeOut>
 800c6aa:	bb50      	cbnz	r0, 800c702 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f7ff fbb9 	bl	800be24 <prvIsQueueEmpty>
 800c6b2:	b300      	cbz	r0, 800c6f6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	b93b      	cbnz	r3, 800c6c8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c6b8:	f7ff fa74 	bl	800bba4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6bc:	68a0      	ldr	r0, [r4, #8]
 800c6be:	f000 fd79 	bl	800d1b4 <xTaskPriorityInherit>
 800c6c2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c6c4:	f7ff fa8e 	bl	800bbe4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6c8:	9901      	ldr	r1, [sp, #4]
 800c6ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c6ce:	f000 fc93 	bl	800cff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7ff fbf9 	bl	800beca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6d8:	f000 fb6c 	bl	800cdb4 <xTaskResumeAll>
 800c6dc:	b948      	cbnz	r0, 800c6f2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c6de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	2601      	movs	r6, #1
 800c6f4:	e781      	b.n	800c5fa <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7ff fbe7 	bl	800beca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6fc:	f000 fb5a 	bl	800cdb4 <xTaskResumeAll>
 800c700:	e7f7      	b.n	800c6f2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c702:	4620      	mov	r0, r4
 800c704:	f7ff fbe1 	bl	800beca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c708:	f000 fb54 	bl	800cdb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c70c:	4620      	mov	r0, r4
 800c70e:	f7ff fb89 	bl	800be24 <prvIsQueueEmpty>
 800c712:	2800      	cmp	r0, #0
 800c714:	d0ed      	beq.n	800c6f2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c716:	b165      	cbz	r5, 800c732 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c718:	f7ff fa44 	bl	800bba4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c71c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c71e:	b119      	cbz	r1, 800c728 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c722:	6819      	ldr	r1, [r3, #0]
 800c724:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c728:	68a0      	ldr	r0, [r4, #8]
 800c72a:	f000 fdc3 	bl	800d2b4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c72e:	f7ff fa59 	bl	800bbe4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c732:	2000      	movs	r0, #0
 800c734:	e780      	b.n	800c638 <xQueueSemaphoreTake+0x7c>

0800c736 <xQueueTakeMutexRecursive>:
	{
 800c736:	b570      	push	{r4, r5, r6, lr}
 800c738:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c73a:	4604      	mov	r4, r0
 800c73c:	b940      	cbnz	r0, 800c750 <xQueueTakeMutexRecursive+0x1a>
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	e7fe      	b.n	800c74e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c750:	6886      	ldr	r6, [r0, #8]
 800c752:	f000 fd19 	bl	800d188 <xTaskGetCurrentTaskHandle>
 800c756:	4286      	cmp	r6, r0
 800c758:	d104      	bne.n	800c764 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c75a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c75c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c75e:	3301      	adds	r3, #1
 800c760:	60e3      	str	r3, [r4, #12]
	}
 800c762:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c764:	4629      	mov	r1, r5
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff ff28 	bl	800c5bc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d0f8      	beq.n	800c762 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c770:	68e3      	ldr	r3, [r4, #12]
 800c772:	3301      	adds	r3, #1
 800c774:	60e3      	str	r3, [r4, #12]
 800c776:	e7f4      	b.n	800c762 <xQueueTakeMutexRecursive+0x2c>

0800c778 <xQueueReceiveFromISR>:
{
 800c778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c77c:	4689      	mov	r9, r1
 800c77e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c780:	4604      	mov	r4, r0
 800c782:	b940      	cbnz	r0, 800c796 <xQueueReceiveFromISR+0x1e>
 800c784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	e7fe      	b.n	800c794 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c796:	b951      	cbnz	r1, 800c7ae <xQueueReceiveFromISR+0x36>
 800c798:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c79a:	b143      	cbz	r3, 800c7ae <xQueueReceiveFromISR+0x36>
 800c79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	e7fe      	b.n	800c7ac <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ae:	f7ff fb0b 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 800c7b2:	f3ef 8711 	mrs	r7, BASEPRI
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7c6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7c8:	b30d      	cbz	r5, 800c80e <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7ca:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7d2:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7d4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7d6:	f7ff fb63 	bl	800bea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7da:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c7dc:	1c73      	adds	r3, r6, #1
 800c7de:	d111      	bne.n	800c804 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	b153      	cbz	r3, 800c7fa <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e4:	f104 0010 	add.w	r0, r4, #16
 800c7e8:	f000 fc3e 	bl	800d068 <xTaskRemoveFromEventList>
 800c7ec:	b128      	cbz	r0, 800c7fa <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c7ee:	f1b8 0f00 	cmp.w	r8, #0
 800c7f2:	d002      	beq.n	800c7fa <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c7fa:	2001      	movs	r0, #1
	__asm volatile
 800c7fc:	f387 8811 	msr	BASEPRI, r7
}
 800c800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c804:	3601      	adds	r6, #1
 800c806:	b276      	sxtb	r6, r6
 800c808:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c80c:	e7f5      	b.n	800c7fa <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c80e:	4628      	mov	r0, r5
 800c810:	e7f4      	b.n	800c7fc <xQueueReceiveFromISR+0x84>
	...

0800c814 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c814:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c816:	4a07      	ldr	r2, [pc, #28]	@ (800c834 <vQueueAddToRegistry+0x20>)
	{
 800c818:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c81a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c81e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c822:	b91d      	cbnz	r5, 800c82c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c824:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c828:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c82a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c82c:	3301      	adds	r3, #1
 800c82e:	2b08      	cmp	r3, #8
 800c830:	d1f3      	bne.n	800c81a <vQueueAddToRegistry+0x6>
 800c832:	e7fa      	b.n	800c82a <vQueueAddToRegistry+0x16>
 800c834:	24024bf8 	.word	0x24024bf8

0800c838 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c838:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c83a:	4a09      	ldr	r2, [pc, #36]	@ (800c860 <vQueueUnregisterQueue+0x28>)
	{
 800c83c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c83e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c842:	00dc      	lsls	r4, r3, #3
 800c844:	4281      	cmp	r1, r0
 800c846:	d106      	bne.n	800c856 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c848:	4a06      	ldr	r2, [pc, #24]	@ (800c864 <vQueueUnregisterQueue+0x2c>)
 800c84a:	2100      	movs	r1, #0
 800c84c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c850:	4422      	add	r2, r4
 800c852:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c854:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c856:	3301      	adds	r3, #1
 800c858:	2b08      	cmp	r3, #8
 800c85a:	d1f0      	bne.n	800c83e <vQueueUnregisterQueue+0x6>
 800c85c:	e7fa      	b.n	800c854 <vQueueUnregisterQueue+0x1c>
 800c85e:	bf00      	nop
 800c860:	24024bfc 	.word	0x24024bfc
 800c864:	24024bf8 	.word	0x24024bf8

0800c868 <vQueueDelete>:
{
 800c868:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c86a:	b940      	cbnz	r0, 800c87e <vQueueDelete+0x16>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	e7fe      	b.n	800c87c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c87e:	f7ff ffdb 	bl	800c838 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c882:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c886:	b91b      	cbnz	r3, 800c890 <vQueueDelete+0x28>
}
 800c888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c88c:	f7ff b8a8 	b.w	800b9e0 <vPortFree>
}
 800c890:	bd10      	pop	{r4, pc}

0800c892 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	4604      	mov	r4, r0
 800c896:	460d      	mov	r5, r1
 800c898:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c89a:	f7ff f983 	bl	800bba4 <vPortEnterCritical>
 800c89e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c8a2:	2bff      	cmp	r3, #255	@ 0xff
 800c8a4:	d102      	bne.n	800c8ac <vQueueWaitForMessageRestricted+0x1a>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c8ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c8b0:	2bff      	cmp	r3, #255	@ 0xff
 800c8b2:	d102      	bne.n	800c8ba <vQueueWaitForMessageRestricted+0x28>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c8ba:	f7ff f993 	bl	800bbe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c8be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c8c0:	b92b      	cbnz	r3, 800c8ce <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c8ca:	f000 fbaf 	bl	800d02c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c8ce:	4620      	mov	r0, r4
	}
 800c8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c8d4:	f7ff baf9 	b.w	800beca <prvUnlockQueue>

0800c8d8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8dc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8de:	f7ff f961 	bl	800bba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c9a0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c8e4:	4e2f      	ldr	r6, [pc, #188]	@ (800c9a4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4f2f      	ldr	r7, [pc, #188]	@ (800c9a8 <prvAddNewTaskToReadyList+0xd0>)
 800c8ea:	3201      	adds	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c8ee:	6835      	ldr	r5, [r6, #0]
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	d14a      	bne.n	800c98a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8f4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d11f      	bne.n	800c93c <prvAddNewTaskToReadyList+0x64>
 800c8fc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8fe:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c900:	4640      	mov	r0, r8
 800c902:	f7ff f8ab 	bl	800ba5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c906:	f108 0814 	add.w	r8, r8, #20
 800c90a:	2d38      	cmp	r5, #56	@ 0x38
 800c90c:	d1f7      	bne.n	800c8fe <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c90e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c9d0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c912:	4d26      	ldr	r5, [pc, #152]	@ (800c9ac <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c914:	4640      	mov	r0, r8
 800c916:	f7ff f8a1 	bl	800ba5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c91a:	4628      	mov	r0, r5
 800c91c:	f7ff f89e 	bl	800ba5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c920:	4823      	ldr	r0, [pc, #140]	@ (800c9b0 <prvAddNewTaskToReadyList+0xd8>)
 800c922:	f7ff f89b 	bl	800ba5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c926:	4823      	ldr	r0, [pc, #140]	@ (800c9b4 <prvAddNewTaskToReadyList+0xdc>)
 800c928:	f7ff f898 	bl	800ba5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c92c:	4822      	ldr	r0, [pc, #136]	@ (800c9b8 <prvAddNewTaskToReadyList+0xe0>)
 800c92e:	f7ff f895 	bl	800ba5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c932:	4b22      	ldr	r3, [pc, #136]	@ (800c9bc <prvAddNewTaskToReadyList+0xe4>)
 800c934:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c938:	4b21      	ldr	r3, [pc, #132]	@ (800c9c0 <prvAddNewTaskToReadyList+0xe8>)
 800c93a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c93c:	4a21      	ldr	r2, [pc, #132]	@ (800c9c4 <prvAddNewTaskToReadyList+0xec>)
 800c93e:	6813      	ldr	r3, [r2, #0]
 800c940:	3301      	adds	r3, #1
 800c942:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c944:	4a20      	ldr	r2, [pc, #128]	@ (800c9c8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c946:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c948:	6811      	ldr	r1, [r2, #0]
 800c94a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c94c:	428b      	cmp	r3, r1
 800c94e:	d900      	bls.n	800c952 <prvAddNewTaskToReadyList+0x7a>
 800c950:	6013      	str	r3, [r2, #0]
 800c952:	2014      	movs	r0, #20
 800c954:	1d21      	adds	r1, r4, #4
 800c956:	fb00 7003 	mla	r0, r0, r3, r7
 800c95a:	f7ff f88d 	bl	800ba78 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c95e:	f7ff f941 	bl	800bbe4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c962:	4b1a      	ldr	r3, [pc, #104]	@ (800c9cc <prvAddNewTaskToReadyList+0xf4>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	b173      	cbz	r3, 800c986 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c968:	6833      	ldr	r3, [r6, #0]
 800c96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c96e:	429a      	cmp	r2, r3
 800c970:	d209      	bcs.n	800c986 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c972:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
}
 800c986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c98a:	4b10      	ldr	r3, [pc, #64]	@ (800c9cc <prvAddNewTaskToReadyList+0xf4>)
 800c98c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c98e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c990:	2a00      	cmp	r2, #0
 800c992:	d1d3      	bne.n	800c93c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c994:	6832      	ldr	r2, [r6, #0]
 800c996:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c998:	429a      	cmp	r2, r3
 800c99a:	d8cf      	bhi.n	800c93c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c99c:	6034      	str	r4, [r6, #0]
 800c99e:	e7cd      	b.n	800c93c <prvAddNewTaskToReadyList+0x64>
 800c9a0:	24024c5c 	.word	0x24024c5c
 800c9a4:	24025130 	.word	0x24025130
 800c9a8:	24024cd0 	.word	0x24024cd0
 800c9ac:	24024ca8 	.word	0x24024ca8
 800c9b0:	24024c8c 	.word	0x24024c8c
 800c9b4:	24024c78 	.word	0x24024c78
 800c9b8:	24024c60 	.word	0x24024c60
 800c9bc:	24024ca4 	.word	0x24024ca4
 800c9c0:	24024ca0 	.word	0x24024ca0
 800c9c4:	24024c40 	.word	0x24024c40
 800c9c8:	24024c54 	.word	0x24024c54
 800c9cc:	24024c50 	.word	0x24024c50
 800c9d0:	24024cbc 	.word	0x24024cbc

0800c9d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9d6:	4b15      	ldr	r3, [pc, #84]	@ (800ca2c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c9d8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9da:	4d15      	ldr	r5, [pc, #84]	@ (800ca30 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c9dc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c9de:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9e0:	6828      	ldr	r0, [r5, #0]
 800c9e2:	3004      	adds	r0, #4
 800c9e4:	f7ff f86a 	bl	800babc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9e8:	1c73      	adds	r3, r6, #1
 800c9ea:	d107      	bne.n	800c9fc <prvAddCurrentTaskToDelayedList+0x28>
 800c9ec:	b137      	cbz	r7, 800c9fc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ee:	6829      	ldr	r1, [r5, #0]
 800c9f0:	4810      	ldr	r0, [pc, #64]	@ (800ca34 <prvAddCurrentTaskToDelayedList+0x60>)
 800c9f2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9f8:	f7ff b83e 	b.w	800ba78 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9fc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9fe:	682b      	ldr	r3, [r5, #0]
 800ca00:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca02:	d307      	bcc.n	800ca14 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca04:	4b0c      	ldr	r3, [pc, #48]	@ (800ca38 <prvAddCurrentTaskToDelayedList+0x64>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	6829      	ldr	r1, [r5, #0]
}
 800ca0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca0e:	3104      	adds	r1, #4
 800ca10:	f7ff b83d 	b.w	800ba8e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca14:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <prvAddCurrentTaskToDelayedList+0x68>)
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	6829      	ldr	r1, [r5, #0]
 800ca1a:	3104      	adds	r1, #4
 800ca1c:	f7ff f837 	bl	800ba8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca20:	4b07      	ldr	r3, [pc, #28]	@ (800ca40 <prvAddCurrentTaskToDelayedList+0x6c>)
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	42a2      	cmp	r2, r4
 800ca26:	d900      	bls.n	800ca2a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800ca28:	601c      	str	r4, [r3, #0]
}
 800ca2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca2c:	24024c58 	.word	0x24024c58
 800ca30:	24025130 	.word	0x24025130
 800ca34:	24024c60 	.word	0x24024c60
 800ca38:	24024ca0 	.word	0x24024ca0
 800ca3c:	24024ca4 	.word	0x24024ca4
 800ca40:	24024c3c 	.word	0x24024c3c

0800ca44 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca44:	4a06      	ldr	r2, [pc, #24]	@ (800ca60 <prvResetNextTaskUnblockTime+0x1c>)
 800ca46:	6813      	ldr	r3, [r2, #0]
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <prvResetNextTaskUnblockTime+0x20>)
 800ca4c:	b919      	cbnz	r1, 800ca56 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca4e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca52:	601a      	str	r2, [r3, #0]
}
 800ca54:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca5a:	68d2      	ldr	r2, [r2, #12]
 800ca5c:	6852      	ldr	r2, [r2, #4]
 800ca5e:	e7f8      	b.n	800ca52 <prvResetNextTaskUnblockTime+0xe>
 800ca60:	24024ca4 	.word	0x24024ca4
 800ca64:	24024c3c 	.word	0x24024c3c

0800ca68 <prvDeleteTCB>:
	{
 800ca68:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca6a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800ca6e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca70:	b93b      	cbnz	r3, 800ca82 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800ca72:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ca74:	f7fe ffb4 	bl	800b9e0 <vPortFree>
				vPortFree( pxTCB );
 800ca78:	4620      	mov	r0, r4
	}
 800ca7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800ca7e:	f7fe bfaf 	b.w	800b9e0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d0f9      	beq.n	800ca7a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d008      	beq.n	800ca9c <prvDeleteTCB+0x34>
 800ca8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	e7fe      	b.n	800ca9a <prvDeleteTCB+0x32>
	}
 800ca9c:	bd10      	pop	{r4, pc}
	...

0800caa0 <prvIdleTask>:
{
 800caa0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caa2:	4c14      	ldr	r4, [pc, #80]	@ (800caf4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa4:	4f14      	ldr	r7, [pc, #80]	@ (800caf8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800caa6:	4d15      	ldr	r5, [pc, #84]	@ (800cafc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	b983      	cbnz	r3, 800cace <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caac:	4b14      	ldr	r3, [pc, #80]	@ (800cb00 <prvIdleTask+0x60>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d909      	bls.n	800cac8 <prvIdleTask+0x28>
				taskYIELD();
 800cab4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cabc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800cac8:	f7f3 fe16 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cacc:	e7eb      	b.n	800caa6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800cace:	f7ff f869 	bl	800bba4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad6:	1d30      	adds	r0, r6, #4
 800cad8:	f7fe fff0 	bl	800babc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	3b01      	subs	r3, #1
 800cae0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	3b01      	subs	r3, #1
 800cae6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800cae8:	f7ff f87c 	bl	800bbe4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800caec:	4630      	mov	r0, r6
 800caee:	f7ff ffbb 	bl	800ca68 <prvDeleteTCB>
 800caf2:	e7d9      	b.n	800caa8 <prvIdleTask+0x8>
 800caf4:	24024c74 	.word	0x24024c74
 800caf8:	24024c78 	.word	0x24024c78
 800cafc:	24024c5c 	.word	0x24024c5c
 800cb00:	24024cd0 	.word	0x24024cd0

0800cb04 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800cb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb08:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb0e:	21a5      	movs	r1, #165	@ 0xa5
 800cb10:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800cb12:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb14:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800cb16:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800cb1c:	f015 fe7c 	bl	8022818 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb22:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb24:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800cb28:	b3b5      	cbz	r5, 800cb98 <prvInitialiseNewTask.constprop.0+0x94>
 800cb2a:	1e6b      	subs	r3, r5, #1
 800cb2c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800cb30:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cb36:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800cb3a:	b109      	cbz	r1, 800cb40 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb3c:	42ab      	cmp	r3, r5
 800cb3e:	d1f8      	bne.n	800cb32 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb40:	2300      	movs	r3, #0
 800cb42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb46:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800cb48:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb4c:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb4e:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800cb50:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb54:	bf28      	it	cs
 800cb56:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800cb58:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cb5a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb5c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb60:	f7fe ff87 	bl	800ba72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb64:	f104 0018 	add.w	r0, r4, #24
 800cb68:	f7fe ff83 	bl	800ba72 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800cb6c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb70:	4642      	mov	r2, r8
 800cb72:	4639      	mov	r1, r7
 800cb74:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb76:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb78:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb7a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800cb7c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb80:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb84:	f7fe ffe8 	bl	800bb58 <pxPortInitialiseStack>
 800cb88:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cb8a:	f1b9 0f00 	cmp.w	r9, #0
 800cb8e:	d001      	beq.n	800cb94 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb90:	f8c9 4000 	str.w	r4, [r9]
}
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb98:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800cb9c:	e7d3      	b.n	800cb46 <prvInitialiseNewTask.constprop.0+0x42>

0800cb9e <xTaskCreateStatic>:
	{
 800cb9e:	b570      	push	{r4, r5, r6, lr}
 800cba0:	b086      	sub	sp, #24
 800cba2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800cba6:	b945      	cbnz	r5, 800cbba <xTaskCreateStatic+0x1c>
 800cba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	e7fe      	b.n	800cbb8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800cbba:	b944      	cbnz	r4, 800cbce <xTaskCreateStatic+0x30>
 800cbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	e7fe      	b.n	800cbcc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbce:	2660      	movs	r6, #96	@ 0x60
 800cbd0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbd2:	9e05      	ldr	r6, [sp, #20]
 800cbd4:	2e60      	cmp	r6, #96	@ 0x60
 800cbd6:	d008      	beq.n	800cbea <xTaskCreateStatic+0x4c>
 800cbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	e7fe      	b.n	800cbe8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbea:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbec:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbee:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbf0:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbf4:	ad04      	add	r5, sp, #16
 800cbf6:	9402      	str	r4, [sp, #8]
 800cbf8:	9501      	str	r5, [sp, #4]
 800cbfa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800cbfc:	9500      	str	r5, [sp, #0]
 800cbfe:	f7ff ff81 	bl	800cb04 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc02:	4620      	mov	r0, r4
 800cc04:	f7ff fe68 	bl	800c8d8 <prvAddNewTaskToReadyList>
	}
 800cc08:	9804      	ldr	r0, [sp, #16]
 800cc0a:	b006      	add	sp, #24
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}

0800cc0e <xTaskCreate>:
	{
 800cc0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc12:	4607      	mov	r7, r0
 800cc14:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc16:	0090      	lsls	r0, r2, #2
	{
 800cc18:	4688      	mov	r8, r1
 800cc1a:	4616      	mov	r6, r2
 800cc1c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc1e:	f7fe fe47 	bl	800b8b0 <pvPortMalloc>
			if( pxStack != NULL )
 800cc22:	4605      	mov	r5, r0
 800cc24:	b920      	cbnz	r0, 800cc30 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800cc2a:	b005      	add	sp, #20
 800cc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc30:	2060      	movs	r0, #96	@ 0x60
 800cc32:	f7fe fe3d 	bl	800b8b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800cc36:	4604      	mov	r4, r0
 800cc38:	b198      	cbz	r0, 800cc62 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc3a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800cc3c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc3e:	4632      	mov	r2, r6
 800cc40:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc42:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc48:	9002      	str	r0, [sp, #8]
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	464b      	mov	r3, r9
 800cc54:	f7ff ff56 	bl	800cb04 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f7ff fe3d 	bl	800c8d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e7e3      	b.n	800cc2a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800cc62:	4628      	mov	r0, r5
 800cc64:	f7fe febc 	bl	800b9e0 <vPortFree>
		if( pxNewTCB != NULL )
 800cc68:	e7dd      	b.n	800cc26 <xTaskCreate+0x18>
	...

0800cc6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800cc6c:	4a02      	ldr	r2, [pc, #8]	@ (800cc78 <vTaskSuspendAll+0xc>)
 800cc6e:	6813      	ldr	r3, [r2, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	6013      	str	r3, [r2, #0]
}
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	24024c38 	.word	0x24024c38

0800cc7c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800cc7c:	4b01      	ldr	r3, [pc, #4]	@ (800cc84 <xTaskGetTickCount+0x8>)
 800cc7e:	6818      	ldr	r0, [r3, #0]
}
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	24024c58 	.word	0x24024c58

0800cc88 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc88:	4b3f      	ldr	r3, [pc, #252]	@ (800cd88 <xTaskIncrementTick+0x100>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
{
 800cc8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d172      	bne.n	800cd7a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc94:	4b3d      	ldr	r3, [pc, #244]	@ (800cd8c <xTaskIncrementTick+0x104>)
 800cc96:	681c      	ldr	r4, [r3, #0]
 800cc98:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800cc9a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc9c:	b9bc      	cbnz	r4, 800ccce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800cc9e:	4b3c      	ldr	r3, [pc, #240]	@ (800cd90 <xTaskIncrementTick+0x108>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	6812      	ldr	r2, [r2, #0]
 800cca4:	b142      	cbz	r2, 800ccb8 <xTaskIncrementTick+0x30>
 800cca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	e7fe      	b.n	800ccb6 <xTaskIncrementTick+0x2e>
 800ccb8:	4a36      	ldr	r2, [pc, #216]	@ (800cd94 <xTaskIncrementTick+0x10c>)
 800ccba:	6819      	ldr	r1, [r3, #0]
 800ccbc:	6810      	ldr	r0, [r2, #0]
 800ccbe:	6018      	str	r0, [r3, #0]
 800ccc0:	6011      	str	r1, [r2, #0]
 800ccc2:	4a35      	ldr	r2, [pc, #212]	@ (800cd98 <xTaskIncrementTick+0x110>)
 800ccc4:	6813      	ldr	r3, [r2, #0]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	6013      	str	r3, [r2, #0]
 800ccca:	f7ff febb 	bl	800ca44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccce:	4d33      	ldr	r5, [pc, #204]	@ (800cd9c <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800ccd0:	f04f 0b00 	mov.w	fp, #0
 800ccd4:	4e32      	ldr	r6, [pc, #200]	@ (800cda0 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccd6:	682b      	ldr	r3, [r5, #0]
 800ccd8:	4f32      	ldr	r7, [pc, #200]	@ (800cda4 <xTaskIncrementTick+0x11c>)
 800ccda:	429c      	cmp	r4, r3
 800ccdc:	d212      	bcs.n	800cd04 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	2114      	movs	r1, #20
 800cce2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cce4:	434a      	muls	r2, r1
 800cce6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800cce8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800ccea:	4a2f      	ldr	r2, [pc, #188]	@ (800cda8 <xTaskIncrementTick+0x120>)
 800ccec:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800ccee:	bf28      	it	cs
 800ccf0:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800ccf4:	2a00      	cmp	r2, #0
 800ccf6:	bf18      	it	ne
 800ccf8:	f04f 0b01 	movne.w	fp, #1
}
 800ccfc:	4658      	mov	r0, fp
 800ccfe:	b003      	add	sp, #12
 800cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd04:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800cd90 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800cd08:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800cdb0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd0c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd10:	6812      	ldr	r2, [r2, #0]
 800cd12:	b91a      	cbnz	r2, 800cd1c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd14:	f04f 32ff 	mov.w	r2, #4294967295
 800cd18:	602a      	str	r2, [r5, #0]
					break;
 800cd1a:	e7e0      	b.n	800ccde <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd20:	68d2      	ldr	r2, [r2, #12]
 800cd22:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd26:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800cd2a:	428c      	cmp	r4, r1
 800cd2c:	d201      	bcs.n	800cd32 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800cd2e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd30:	e7d5      	b.n	800ccde <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd32:	f108 0304 	add.w	r3, r8, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	f7fe febf 	bl	800babc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd3e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800cd42:	b119      	cbz	r1, 800cd4c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd44:	f108 0018 	add.w	r0, r8, #24
 800cd48:	f7fe feb8 	bl	800babc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd4c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800cd50:	f8da 1000 	ldr.w	r1, [sl]
 800cd54:	4288      	cmp	r0, r1
 800cd56:	d901      	bls.n	800cd5c <xTaskIncrementTick+0xd4>
 800cd58:	f8ca 0000 	str.w	r0, [sl]
 800cd5c:	2314      	movs	r3, #20
 800cd5e:	9901      	ldr	r1, [sp, #4]
 800cd60:	fb03 6000 	mla	r0, r3, r0, r6
 800cd64:	f7fe fe88 	bl	800ba78 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd68:	6838      	ldr	r0, [r7, #0]
 800cd6a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800cd6e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800cd70:	4291      	cmp	r1, r2
 800cd72:	bf28      	it	cs
 800cd74:	f04f 0b01 	movcs.w	fp, #1
 800cd78:	e7c8      	b.n	800cd0c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800cd7a:	4a0c      	ldr	r2, [pc, #48]	@ (800cdac <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800cd7c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800cd80:	6813      	ldr	r3, [r2, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	e7b9      	b.n	800ccfc <xTaskIncrementTick+0x74>
 800cd88:	24024c38 	.word	0x24024c38
 800cd8c:	24024c58 	.word	0x24024c58
 800cd90:	24024ca4 	.word	0x24024ca4
 800cd94:	24024ca0 	.word	0x24024ca0
 800cd98:	24024c44 	.word	0x24024c44
 800cd9c:	24024c3c 	.word	0x24024c3c
 800cda0:	24024cd0 	.word	0x24024cd0
 800cda4:	24025130 	.word	0x24025130
 800cda8:	24024c48 	.word	0x24024c48
 800cdac:	24024c4c 	.word	0x24024c4c
 800cdb0:	24024c54 	.word	0x24024c54

0800cdb4 <xTaskResumeAll>:
{
 800cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800cdb8:	4c30      	ldr	r4, [pc, #192]	@ (800ce7c <xTaskResumeAll+0xc8>)
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	b943      	cbnz	r3, 800cdd0 <xTaskResumeAll+0x1c>
 800cdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	e7fe      	b.n	800cdce <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800cdd0:	f7fe fee8 	bl	800bba4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdda:	6824      	ldr	r4, [r4, #0]
 800cddc:	b12c      	cbz	r4, 800cdea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800cdde:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cde0:	f7fe ff00 	bl	800bbe4 <vPortExitCritical>
}
 800cde4:	4620      	mov	r0, r4
 800cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdea:	4b25      	ldr	r3, [pc, #148]	@ (800ce80 <xTaskResumeAll+0xcc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0f5      	beq.n	800cdde <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdf2:	4d24      	ldr	r5, [pc, #144]	@ (800ce84 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800cdf4:	4e24      	ldr	r6, [pc, #144]	@ (800ce88 <xTaskResumeAll+0xd4>)
 800cdf6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800ce98 <xTaskResumeAll+0xe4>
 800cdfa:	e01d      	b.n	800ce38 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdfc:	68eb      	ldr	r3, [r5, #12]
 800cdfe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce00:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce02:	f104 0018 	add.w	r0, r4, #24
 800ce06:	f7fe fe59 	bl	800babc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	f7fe fe56 	bl	800babc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ce12:	6832      	ldr	r2, [r6, #0]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d900      	bls.n	800ce1a <xTaskResumeAll+0x66>
 800ce18:	6033      	str	r3, [r6, #0]
 800ce1a:	2014      	movs	r0, #20
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	fb00 8003 	mla	r0, r0, r3, r8
 800ce22:	f7fe fe29 	bl	800ba78 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce26:	4b19      	ldr	r3, [pc, #100]	@ (800ce8c <xTaskResumeAll+0xd8>)
 800ce28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d302      	bcc.n	800ce38 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800ce32:	4b17      	ldr	r3, [pc, #92]	@ (800ce90 <xTaskResumeAll+0xdc>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1de      	bne.n	800cdfc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800ce3e:	b10c      	cbz	r4, 800ce44 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800ce40:	f7ff fe00 	bl	800ca44 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce44:	4d13      	ldr	r5, [pc, #76]	@ (800ce94 <xTaskResumeAll+0xe0>)
 800ce46:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ce48:	b144      	cbz	r4, 800ce5c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800ce4a:	4e11      	ldr	r6, [pc, #68]	@ (800ce90 <xTaskResumeAll+0xdc>)
 800ce4c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ce4e:	f7ff ff1b 	bl	800cc88 <xTaskIncrementTick>
 800ce52:	b100      	cbz	r0, 800ce56 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800ce54:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce56:	3c01      	subs	r4, #1
 800ce58:	d1f9      	bne.n	800ce4e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800ce5a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ce5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ce90 <xTaskResumeAll+0xdc>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d0bc      	beq.n	800cdde <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800ce64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ce78:	2401      	movs	r4, #1
 800ce7a:	e7b1      	b.n	800cde0 <xTaskResumeAll+0x2c>
 800ce7c:	24024c38 	.word	0x24024c38
 800ce80:	24024c5c 	.word	0x24024c5c
 800ce84:	24024c8c 	.word	0x24024c8c
 800ce88:	24024c54 	.word	0x24024c54
 800ce8c:	24025130 	.word	0x24025130
 800ce90:	24024c48 	.word	0x24024c48
 800ce94:	24024c4c 	.word	0x24024c4c
 800ce98:	24024cd0 	.word	0x24024cd0

0800ce9c <vTaskSetApplicationTaskTag>:
	{
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cea0:	4604      	mov	r4, r0
 800cea2:	b908      	cbnz	r0, 800cea8 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cea4:	4b04      	ldr	r3, [pc, #16]	@ (800ceb8 <vTaskSetApplicationTaskTag+0x1c>)
 800cea6:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cea8:	f7fe fe7c 	bl	800bba4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800ceac:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800ceae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800ceb2:	f7fe be97 	b.w	800bbe4 <vPortExitCritical>
 800ceb6:	bf00      	nop
 800ceb8:	24025130 	.word	0x24025130

0800cebc <xTaskCallApplicationTaskHook>:
	{
 800cebc:	4603      	mov	r3, r0
 800cebe:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cec0:	b90b      	cbnz	r3, 800cec6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cec2:	4b03      	ldr	r3, [pc, #12]	@ (800ced0 <xTaskCallApplicationTaskHook+0x14>)
 800cec4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cec8:	b103      	cbz	r3, 800cecc <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800ceca:	4718      	bx	r3
	}
 800cecc:	4618      	mov	r0, r3
 800cece:	4770      	bx	lr
 800ced0:	24025130 	.word	0x24025130

0800ced4 <vTaskStartScheduler>:
{
 800ced4:	b510      	push	{r4, lr}
 800ced6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ced8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceda:	aa07      	add	r2, sp, #28
 800cedc:	a906      	add	r1, sp, #24
 800cede:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cee0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cee4:	f7fe fca6 	bl	800b834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cee8:	9b05      	ldr	r3, [sp, #20]
 800ceea:	9a07      	ldr	r2, [sp, #28]
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	9b06      	ldr	r3, [sp, #24]
 800cef0:	4919      	ldr	r1, [pc, #100]	@ (800cf58 <vTaskStartScheduler+0x84>)
 800cef2:	481a      	ldr	r0, [pc, #104]	@ (800cf5c <vTaskStartScheduler+0x88>)
 800cef4:	e9cd 4300 	strd	r4, r3, [sp]
 800cef8:	4623      	mov	r3, r4
 800cefa:	f7ff fe50 	bl	800cb9e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cefe:	b340      	cbz	r0, 800cf52 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800cf00:	f000 fa84 	bl	800d40c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cf04:	2801      	cmp	r0, #1
 800cf06:	d119      	bne.n	800cf3c <vTaskStartScheduler+0x68>
 800cf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf18:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1c:	4b10      	ldr	r3, [pc, #64]	@ (800cf60 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800cf1e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf22:	4b10      	ldr	r3, [pc, #64]	@ (800cf64 <vTaskStartScheduler+0x90>)
 800cf24:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf26:	4b10      	ldr	r3, [pc, #64]	@ (800cf68 <vTaskStartScheduler+0x94>)
 800cf28:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cf2a:	4b10      	ldr	r3, [pc, #64]	@ (800cf6c <vTaskStartScheduler+0x98>)
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f7ff ffc5 	bl	800cebc <xTaskCallApplicationTaskHook>
}
 800cf32:	b008      	add	sp, #32
 800cf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cf38:	f7fe bec4 	b.w	800bcc4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d108      	bne.n	800cf52 <vTaskStartScheduler+0x7e>
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	e7fe      	b.n	800cf50 <vTaskStartScheduler+0x7c>
}
 800cf52:	b008      	add	sp, #32
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	bf00      	nop
 800cf58:	080251be 	.word	0x080251be
 800cf5c:	0800caa1 	.word	0x0800caa1
 800cf60:	24024c3c 	.word	0x24024c3c
 800cf64:	24024c50 	.word	0x24024c50
 800cf68:	24024c58 	.word	0x24024c58
 800cf6c:	24025130 	.word	0x24025130

0800cf70 <vTaskSwitchContext>:
{
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf72:	4b1c      	ldr	r3, [pc, #112]	@ (800cfe4 <vTaskSwitchContext+0x74>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	4b1c      	ldr	r3, [pc, #112]	@ (800cfe8 <vTaskSwitchContext+0x78>)
 800cf78:	b112      	cbz	r2, 800cf80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
}
 800cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800cf80:	4c1a      	ldr	r4, [pc, #104]	@ (800cfec <vTaskSwitchContext+0x7c>)
 800cf82:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf84:	4e1a      	ldr	r6, [pc, #104]	@ (800cff0 <vTaskSwitchContext+0x80>)
 800cf86:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800cf88:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800cf8a:	6820      	ldr	r0, [r4, #0]
 800cf8c:	f7ff ff96 	bl	800cebc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf90:	6832      	ldr	r2, [r6, #0]
 800cf92:	4918      	ldr	r1, [pc, #96]	@ (800cff4 <vTaskSwitchContext+0x84>)
 800cf94:	fb07 f302 	mul.w	r3, r7, r2
 800cf98:	58cd      	ldr	r5, [r1, r3]
 800cf9a:	18c8      	adds	r0, r1, r3
 800cf9c:	b1ad      	cbz	r5, 800cfca <vTaskSwitchContext+0x5a>
 800cf9e:	6845      	ldr	r5, [r0, #4]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	686d      	ldr	r5, [r5, #4]
 800cfa4:	440b      	add	r3, r1
 800cfa6:	429d      	cmp	r5, r3
 800cfa8:	6045      	str	r5, [r0, #4]
 800cfaa:	bf04      	itt	eq
 800cfac:	686b      	ldreq	r3, [r5, #4]
 800cfae:	6043      	streq	r3, [r0, #4]
 800cfb0:	2314      	movs	r3, #20
 800cfb2:	fb03 1102 	mla	r1, r3, r2, r1
 800cfb6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800cfb8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800cfc0:	6820      	ldr	r0, [r4, #0]
}
 800cfc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800cfc6:	f7ff bf79 	b.w	800cebc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfca:	b942      	cbnz	r2, 800cfde <vTaskSwitchContext+0x6e>
 800cfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	e7fe      	b.n	800cfdc <vTaskSwitchContext+0x6c>
 800cfde:	3a01      	subs	r2, #1
 800cfe0:	e7d8      	b.n	800cf94 <vTaskSwitchContext+0x24>
 800cfe2:	bf00      	nop
 800cfe4:	24024c38 	.word	0x24024c38
 800cfe8:	24024c48 	.word	0x24024c48
 800cfec:	24025130 	.word	0x24025130
 800cff0:	24024c54 	.word	0x24024c54
 800cff4:	24024cd0 	.word	0x24024cd0

0800cff8 <vTaskPlaceOnEventList>:
{
 800cff8:	b510      	push	{r4, lr}
 800cffa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800cffc:	b940      	cbnz	r0, 800d010 <vTaskPlaceOnEventList+0x18>
 800cffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	e7fe      	b.n	800d00e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d010:	4b05      	ldr	r3, [pc, #20]	@ (800d028 <vTaskPlaceOnEventList+0x30>)
 800d012:	6819      	ldr	r1, [r3, #0]
 800d014:	3118      	adds	r1, #24
 800d016:	f7fe fd3a 	bl	800ba8e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d01a:	4620      	mov	r0, r4
 800d01c:	2101      	movs	r1, #1
}
 800d01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d022:	f7ff bcd7 	b.w	800c9d4 <prvAddCurrentTaskToDelayedList>
 800d026:	bf00      	nop
 800d028:	24025130 	.word	0x24025130

0800d02c <vTaskPlaceOnEventListRestricted>:
	{
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	460d      	mov	r5, r1
 800d030:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800d032:	b940      	cbnz	r0, 800d046 <vTaskPlaceOnEventListRestricted+0x1a>
 800d034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	e7fe      	b.n	800d044 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d046:	4b07      	ldr	r3, [pc, #28]	@ (800d064 <vTaskPlaceOnEventListRestricted+0x38>)
 800d048:	6819      	ldr	r1, [r3, #0]
 800d04a:	3118      	adds	r1, #24
 800d04c:	f7fe fd14 	bl	800ba78 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800d050:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d052:	4621      	mov	r1, r4
 800d054:	bf0c      	ite	eq
 800d056:	4628      	moveq	r0, r5
 800d058:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800d05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d060:	f7ff bcb8 	b.w	800c9d4 <prvAddCurrentTaskToDelayedList>
 800d064:	24025130 	.word	0x24025130

0800d068 <xTaskRemoveFromEventList>:
{
 800d068:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06a:	68c3      	ldr	r3, [r0, #12]
 800d06c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d06e:	b944      	cbnz	r4, 800d082 <xTaskRemoveFromEventList+0x1a>
 800d070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	e7fe      	b.n	800d080 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d082:	f104 0518 	add.w	r5, r4, #24
 800d086:	4628      	mov	r0, r5
 800d088:	f7fe fd18 	bl	800babc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d08c:	4b11      	ldr	r3, [pc, #68]	@ (800d0d4 <xTaskRemoveFromEventList+0x6c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	b9d3      	cbnz	r3, 800d0c8 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d092:	1d25      	adds	r5, r4, #4
 800d094:	4628      	mov	r0, r5
 800d096:	f7fe fd11 	bl	800babc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d09a:	4a0f      	ldr	r2, [pc, #60]	@ (800d0d8 <xTaskRemoveFromEventList+0x70>)
 800d09c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d09e:	6811      	ldr	r1, [r2, #0]
 800d0a0:	428b      	cmp	r3, r1
 800d0a2:	d900      	bls.n	800d0a6 <xTaskRemoveFromEventList+0x3e>
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	2014      	movs	r0, #20
 800d0a8:	4a0c      	ldr	r2, [pc, #48]	@ (800d0dc <xTaskRemoveFromEventList+0x74>)
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0b0:	f7fe fce2 	bl	800ba78 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e0 <xTaskRemoveFromEventList+0x78>)
 800d0b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d906      	bls.n	800d0ce <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	4b08      	ldr	r3, [pc, #32]	@ (800d0e4 <xTaskRemoveFromEventList+0x7c>)
 800d0c4:	6018      	str	r0, [r3, #0]
}
 800d0c6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	4807      	ldr	r0, [pc, #28]	@ (800d0e8 <xTaskRemoveFromEventList+0x80>)
 800d0cc:	e7f0      	b.n	800d0b0 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800d0ce:	2000      	movs	r0, #0
	return xReturn;
 800d0d0:	e7f9      	b.n	800d0c6 <xTaskRemoveFromEventList+0x5e>
 800d0d2:	bf00      	nop
 800d0d4:	24024c38 	.word	0x24024c38
 800d0d8:	24024c54 	.word	0x24024c54
 800d0dc:	24024cd0 	.word	0x24024cd0
 800d0e0:	24025130 	.word	0x24025130
 800d0e4:	24024c48 	.word	0x24024c48
 800d0e8:	24024c8c 	.word	0x24024c8c

0800d0ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0ec:	4b03      	ldr	r3, [pc, #12]	@ (800d0fc <vTaskInternalSetTimeOutState+0x10>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0f2:	4b03      	ldr	r3, [pc, #12]	@ (800d100 <vTaskInternalSetTimeOutState+0x14>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6043      	str	r3, [r0, #4]
}
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	24024c44 	.word	0x24024c44
 800d100:	24024c58 	.word	0x24024c58

0800d104 <xTaskCheckForTimeOut>:
{
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800d108:	4605      	mov	r5, r0
 800d10a:	b940      	cbnz	r0, 800d11e <xTaskCheckForTimeOut+0x1a>
 800d10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	e7fe      	b.n	800d11c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800d11e:	b941      	cbnz	r1, 800d132 <xTaskCheckForTimeOut+0x2e>
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	e7fe      	b.n	800d130 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800d132:	f7fe fd37 	bl	800bba4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d136:	4b0f      	ldr	r3, [pc, #60]	@ (800d174 <xTaskCheckForTimeOut+0x70>)
 800d138:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	d010      	beq.n	800d162 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d140:	480d      	ldr	r0, [pc, #52]	@ (800d178 <xTaskCheckForTimeOut+0x74>)
 800d142:	682e      	ldr	r6, [r5, #0]
 800d144:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d146:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d148:	4286      	cmp	r6, r0
 800d14a:	d001      	beq.n	800d150 <xTaskCheckForTimeOut+0x4c>
 800d14c:	428a      	cmp	r2, r1
 800d14e:	d90f      	bls.n	800d170 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d150:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d152:	4283      	cmp	r3, r0
 800d154:	d90a      	bls.n	800d16c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800d156:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d158:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800d15a:	4413      	add	r3, r2
 800d15c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d15e:	f7ff ffc5 	bl	800d0ec <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800d162:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d164:	f7fe fd3e 	bl	800bbe4 <vPortExitCritical>
}
 800d168:	4620      	mov	r0, r4
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d170:	2401      	movs	r4, #1
 800d172:	e7f7      	b.n	800d164 <xTaskCheckForTimeOut+0x60>
 800d174:	24024c58 	.word	0x24024c58
 800d178:	24024c44 	.word	0x24024c44

0800d17c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d17c:	4b01      	ldr	r3, [pc, #4]	@ (800d184 <vTaskMissedYield+0x8>)
 800d17e:	2201      	movs	r2, #1
 800d180:	601a      	str	r2, [r3, #0]
}
 800d182:	4770      	bx	lr
 800d184:	24024c48 	.word	0x24024c48

0800d188 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d188:	4b01      	ldr	r3, [pc, #4]	@ (800d190 <xTaskGetCurrentTaskHandle+0x8>)
 800d18a:	6818      	ldr	r0, [r3, #0]
	}
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	24025130 	.word	0x24025130

0800d194 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d194:	4b05      	ldr	r3, [pc, #20]	@ (800d1ac <xTaskGetSchedulerState+0x18>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	b133      	cbz	r3, 800d1a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d19a:	4b05      	ldr	r3, [pc, #20]	@ (800d1b0 <xTaskGetSchedulerState+0x1c>)
 800d19c:	6818      	ldr	r0, [r3, #0]
 800d19e:	fab0 f080 	clz	r0, r0
 800d1a2:	0940      	lsrs	r0, r0, #5
 800d1a4:	0040      	lsls	r0, r0, #1
 800d1a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1a8:	2001      	movs	r0, #1
	}
 800d1aa:	4770      	bx	lr
 800d1ac:	24024c50 	.word	0x24024c50
 800d1b0:	24024c38 	.word	0x24024c38

0800d1b4 <xTaskPriorityInherit>:
	{
 800d1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	b338      	cbz	r0, 800d20a <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1ba:	4d1a      	ldr	r5, [pc, #104]	@ (800d224 <xTaskPriorityInherit+0x70>)
 800d1bc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d1be:	682a      	ldr	r2, [r5, #0]
 800d1c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d226      	bcs.n	800d214 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1c6:	6982      	ldr	r2, [r0, #24]
 800d1c8:	2a00      	cmp	r2, #0
 800d1ca:	db04      	blt.n	800d1d6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1cc:	682a      	ldr	r2, [r5, #0]
 800d1ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d1d0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d1d4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d1d6:	2214      	movs	r2, #20
 800d1d8:	4e13      	ldr	r6, [pc, #76]	@ (800d228 <xTaskPriorityInherit+0x74>)
 800d1da:	fb02 6303 	mla	r3, r2, r3, r6
 800d1de:	6962      	ldr	r2, [r4, #20]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d113      	bne.n	800d20c <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1e4:	1d27      	adds	r7, r4, #4
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f7fe fc68 	bl	800babc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1ec:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1ee:	4a0f      	ldr	r2, [pc, #60]	@ (800d22c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1f2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1f6:	428b      	cmp	r3, r1
 800d1f8:	d900      	bls.n	800d1fc <xTaskPriorityInherit+0x48>
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	2014      	movs	r0, #20
 800d1fe:	4639      	mov	r1, r7
 800d200:	fb00 6003 	mla	r0, r0, r3, r6
 800d204:	f7fe fc38 	bl	800ba78 <vListInsertEnd>
				xReturn = pdTRUE;
 800d208:	2001      	movs	r0, #1
	}
 800d20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d210:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d212:	e7f9      	b.n	800d208 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800d218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21a:	4298      	cmp	r0, r3
 800d21c:	bf2c      	ite	cs
 800d21e:	2000      	movcs	r0, #0
 800d220:	2001      	movcc	r0, #1
 800d222:	e7f2      	b.n	800d20a <xTaskPriorityInherit+0x56>
 800d224:	24025130 	.word	0x24025130
 800d228:	24024cd0 	.word	0x24024cd0
 800d22c:	24024c54 	.word	0x24024c54

0800d230 <xTaskPriorityDisinherit>:
	{
 800d230:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800d232:	b908      	cbnz	r0, 800d238 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800d234:	2000      	movs	r0, #0
	}
 800d236:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800d238:	4b1b      	ldr	r3, [pc, #108]	@ (800d2a8 <xTaskPriorityDisinherit+0x78>)
 800d23a:	681c      	ldr	r4, [r3, #0]
 800d23c:	4284      	cmp	r4, r0
 800d23e:	d008      	beq.n	800d252 <xTaskPriorityDisinherit+0x22>
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	e7fe      	b.n	800d250 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d252:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d254:	b943      	cbnz	r3, 800d268 <xTaskPriorityDisinherit+0x38>
 800d256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	e7fe      	b.n	800d266 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d268:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800d26a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d26c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800d26e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d270:	4291      	cmp	r1, r2
 800d272:	d0df      	beq.n	800d234 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1dd      	bne.n	800d234 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d278:	1d25      	adds	r5, r4, #4
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7fe fc1e 	bl	800babc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d280:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d282:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d286:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d288:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d28a:	4a08      	ldr	r2, [pc, #32]	@ (800d2ac <xTaskPriorityDisinherit+0x7c>)
 800d28c:	6811      	ldr	r1, [r2, #0]
 800d28e:	428b      	cmp	r3, r1
 800d290:	d900      	bls.n	800d294 <xTaskPriorityDisinherit+0x64>
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	4a06      	ldr	r2, [pc, #24]	@ (800d2b0 <xTaskPriorityDisinherit+0x80>)
 800d296:	2014      	movs	r0, #20
 800d298:	4629      	mov	r1, r5
 800d29a:	fb00 2003 	mla	r0, r0, r3, r2
 800d29e:	f7fe fbeb 	bl	800ba78 <vListInsertEnd>
					xReturn = pdTRUE;
 800d2a2:	2001      	movs	r0, #1
		return xReturn;
 800d2a4:	e7c7      	b.n	800d236 <xTaskPriorityDisinherit+0x6>
 800d2a6:	bf00      	nop
 800d2a8:	24025130 	.word	0x24025130
 800d2ac:	24024c54 	.word	0x24024c54
 800d2b0:	24024cd0 	.word	0x24024cd0

0800d2b4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800d2b4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d042      	beq.n	800d342 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2bc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d2be:	b942      	cbnz	r2, 800d2d2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	e7fe      	b.n	800d2d0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2d2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d2d4:	4299      	cmp	r1, r3
 800d2d6:	bf38      	it	cc
 800d2d8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d2da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d2dc:	428b      	cmp	r3, r1
 800d2de:	d030      	beq.n	800d342 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d2e0:	2a01      	cmp	r2, #1
 800d2e2:	d12e      	bne.n	800d342 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800d2e4:	4a17      	ldr	r2, [pc, #92]	@ (800d344 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800d2e6:	6812      	ldr	r2, [r2, #0]
 800d2e8:	4282      	cmp	r2, r0
 800d2ea:	d108      	bne.n	800d2fe <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800d2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	e7fe      	b.n	800d2fc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2fe:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d300:	4d11      	ldr	r5, [pc, #68]	@ (800d348 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d302:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d304:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800d308:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d30a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d30e:	bfa8      	it	ge
 800d310:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d314:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d316:	bfa8      	it	ge
 800d318:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d111      	bne.n	800d342 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d31e:	1d06      	adds	r6, r0, #4
 800d320:	4630      	mov	r0, r6
 800d322:	f7fe fbcb 	bl	800babc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d326:	4a09      	ldr	r2, [pc, #36]	@ (800d34c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d328:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d32a:	6811      	ldr	r1, [r2, #0]
 800d32c:	428b      	cmp	r3, r1
 800d32e:	d900      	bls.n	800d332 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	2014      	movs	r0, #20
 800d334:	4631      	mov	r1, r6
 800d336:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d33a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800d33e:	f7fe bb9b 	b.w	800ba78 <vListInsertEnd>
	}
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	24025130 	.word	0x24025130
 800d348:	24024cd0 	.word	0x24024cd0
 800d34c:	24024c54 	.word	0x24024c54

0800d350 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d350:	4b04      	ldr	r3, [pc, #16]	@ (800d364 <pvTaskIncrementMutexHeldCount+0x14>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	b11a      	cbz	r2, 800d35e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d356:	6819      	ldr	r1, [r3, #0]
 800d358:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800d35a:	3201      	adds	r2, #1
 800d35c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800d35e:	6818      	ldr	r0, [r3, #0]
	}
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	24025130 	.word	0x24025130

0800d368 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800d368:	4291      	cmp	r1, r2
{
 800d36a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d36c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d36e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d370:	d80a      	bhi.n	800d388 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d372:	1ad2      	subs	r2, r2, r3
 800d374:	6983      	ldr	r3, [r0, #24]
 800d376:	429a      	cmp	r2, r3
 800d378:	d20d      	bcs.n	800d396 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d37a:	1d01      	adds	r1, r0, #4
 800d37c:	4b07      	ldr	r3, [pc, #28]	@ (800d39c <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d37e:	6818      	ldr	r0, [r3, #0]
 800d380:	f7fe fb85 	bl	800ba8e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d384:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800d386:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d388:	429a      	cmp	r2, r3
 800d38a:	d201      	bcs.n	800d390 <prvInsertTimerInActiveList+0x28>
 800d38c:	4299      	cmp	r1, r3
 800d38e:	d202      	bcs.n	800d396 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d390:	1d01      	adds	r1, r0, #4
 800d392:	4b03      	ldr	r3, [pc, #12]	@ (800d3a0 <prvInsertTimerInActiveList+0x38>)
 800d394:	e7f3      	b.n	800d37e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d396:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d398:	e7f5      	b.n	800d386 <prvInsertTimerInActiveList+0x1e>
 800d39a:	bf00      	nop
 800d39c:	24025230 	.word	0x24025230
 800d3a0:	24025234 	.word	0x24025234

0800d3a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d3a6:	4c11      	ldr	r4, [pc, #68]	@ (800d3ec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d3a8:	f7fe fbfc 	bl	800bba4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d3ac:	6825      	ldr	r5, [r4, #0]
 800d3ae:	b9bd      	cbnz	r5, 800d3e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d3b0:	4f0f      	ldr	r7, [pc, #60]	@ (800d3f0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d3b2:	4e10      	ldr	r6, [pc, #64]	@ (800d3f4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f7fe fb51 	bl	800ba5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f7fe fb4e 	bl	800ba5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3c2:	4a0e      	ldr	r2, [pc, #56]	@ (800d3fc <prvCheckForValidListAndQueue+0x58>)
 800d3c4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d3c6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3c8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d400 <prvCheckForValidListAndQueue+0x5c>)
 800d3cc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d404 <prvCheckForValidListAndQueue+0x60>)
 800d3d0:	9500      	str	r5, [sp, #0]
 800d3d2:	f7fe fdef 	bl	800bfb4 <xQueueGenericCreateStatic>
 800d3d6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3d8:	b110      	cbz	r0, 800d3e0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3da:	490b      	ldr	r1, [pc, #44]	@ (800d408 <prvCheckForValidListAndQueue+0x64>)
 800d3dc:	f7ff fa1a 	bl	800c814 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d3e0:	b003      	add	sp, #12
 800d3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d3e6:	f7fe bbfd 	b.w	800bbe4 <vPortExitCritical>
 800d3ea:	bf00      	nop
 800d3ec:	2402522c 	.word	0x2402522c
 800d3f0:	2402524c 	.word	0x2402524c
 800d3f4:	24025238 	.word	0x24025238
 800d3f8:	24025234 	.word	0x24025234
 800d3fc:	24025184 	.word	0x24025184
 800d400:	24025230 	.word	0x24025230
 800d404:	24025134 	.word	0x24025134
 800d408:	080251c3 	.word	0x080251c3

0800d40c <xTimerCreateTimerTask>:
{
 800d40c:	b510      	push	{r4, lr}
 800d40e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d410:	f7ff ffc8 	bl	800d3a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d414:	4b12      	ldr	r3, [pc, #72]	@ (800d460 <xTimerCreateTimerTask+0x54>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	b1b3      	cbz	r3, 800d448 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d41a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d41c:	aa07      	add	r2, sp, #28
 800d41e:	a906      	add	r1, sp, #24
 800d420:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d422:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d426:	f7fe fa11 	bl	800b84c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d42a:	9b05      	ldr	r3, [sp, #20]
 800d42c:	9a07      	ldr	r2, [sp, #28]
 800d42e:	9302      	str	r3, [sp, #8]
 800d430:	9b06      	ldr	r3, [sp, #24]
 800d432:	490c      	ldr	r1, [pc, #48]	@ (800d464 <xTimerCreateTimerTask+0x58>)
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	2302      	movs	r3, #2
 800d438:	480b      	ldr	r0, [pc, #44]	@ (800d468 <xTimerCreateTimerTask+0x5c>)
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	4623      	mov	r3, r4
 800d43e:	f7ff fbae 	bl	800cb9e <xTaskCreateStatic>
 800d442:	4b0a      	ldr	r3, [pc, #40]	@ (800d46c <xTimerCreateTimerTask+0x60>)
 800d444:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d446:	b940      	cbnz	r0, 800d45a <xTimerCreateTimerTask+0x4e>
 800d448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d458:	e7fe      	b.n	800d458 <xTimerCreateTimerTask+0x4c>
}
 800d45a:	2001      	movs	r0, #1
 800d45c:	b008      	add	sp, #32
 800d45e:	bd10      	pop	{r4, pc}
 800d460:	2402522c 	.word	0x2402522c
 800d464:	080251c8 	.word	0x080251c8
 800d468:	0800d569 	.word	0x0800d569
 800d46c:	24025228 	.word	0x24025228

0800d470 <xTimerGenericCommand>:
{
 800d470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d472:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d474:	4604      	mov	r4, r0
{
 800d476:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d478:	b940      	cbnz	r0, 800d48c <xTimerGenericCommand+0x1c>
 800d47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	e7fe      	b.n	800d48a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800d48c:	4d0c      	ldr	r5, [pc, #48]	@ (800d4c0 <xTimerGenericCommand+0x50>)
 800d48e:	6828      	ldr	r0, [r5, #0]
 800d490:	b178      	cbz	r0, 800d4b2 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d492:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d494:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d496:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d49a:	dc0c      	bgt.n	800d4b6 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d49c:	f7ff fe7a 	bl	800d194 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4a0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d4a2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d4a4:	4669      	mov	r1, sp
 800d4a6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4a8:	bf0c      	ite	eq
 800d4aa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d4ac:	461a      	movne	r2, r3
 800d4ae:	f7fe fe36 	bl	800c11e <xQueueGenericSend>
}
 800d4b2:	b004      	add	sp, #16
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4669      	mov	r1, sp
 800d4ba:	f7fe ff33 	bl	800c324 <xQueueGenericSendFromISR>
 800d4be:	e7f8      	b.n	800d4b2 <xTimerGenericCommand+0x42>
 800d4c0:	2402522c 	.word	0x2402522c

0800d4c4 <prvSampleTimeNow>:
{
 800d4c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d4c8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d564 <prvSampleTimeNow+0xa0>
{
 800d4cc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d4ce:	f7ff fbd5 	bl	800cc7c <xTaskGetTickCount>
 800d4d2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d8:	4283      	cmp	r3, r0
 800d4da:	d909      	bls.n	800d4f0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4dc:	4f1f      	ldr	r7, [pc, #124]	@ (800d55c <prvSampleTimeNow+0x98>)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	b96a      	cbnz	r2, 800d500 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d4e4:	4a1e      	ldr	r2, [pc, #120]	@ (800d560 <prvSampleTimeNow+0x9c>)
 800d4e6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d4ec:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d4ee:	e000      	b.n	800d4f2 <prvSampleTimeNow+0x2e>
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800d4f4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d4f6:	f8c8 5000 	str.w	r5, [r8]
}
 800d4fa:	b002      	add	sp, #8
 800d4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d500:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d502:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d504:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d508:	f104 0a04 	add.w	sl, r4, #4
 800d50c:	4650      	mov	r0, sl
 800d50e:	f7fe fad5 	bl	800babc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d512:	6a23      	ldr	r3, [r4, #32]
 800d514:	4620      	mov	r0, r4
 800d516:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d518:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d51c:	075b      	lsls	r3, r3, #29
 800d51e:	d5de      	bpl.n	800d4de <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d520:	69a3      	ldr	r3, [r4, #24]
 800d522:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800d524:	4599      	cmp	r9, r3
 800d526:	d206      	bcs.n	800d536 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d528:	4651      	mov	r1, sl
 800d52a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d52c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d52e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d530:	f7fe faad 	bl	800ba8e <vListInsert>
 800d534:	e7d3      	b.n	800d4de <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d536:	2300      	movs	r3, #0
 800d538:	464a      	mov	r2, r9
 800d53a:	4620      	mov	r0, r4
 800d53c:	4619      	mov	r1, r3
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	f7ff ff96 	bl	800d470 <xTimerGenericCommand>
				configASSERT( xResult );
 800d544:	2800      	cmp	r0, #0
 800d546:	d1ca      	bne.n	800d4de <prvSampleTimeNow+0x1a>
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	e7fe      	b.n	800d558 <prvSampleTimeNow+0x94>
 800d55a:	bf00      	nop
 800d55c:	24025234 	.word	0x24025234
 800d560:	24025230 	.word	0x24025230
 800d564:	24025224 	.word	0x24025224

0800d568 <prvTimerTask>:
{
 800d568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d56c:	4d6e      	ldr	r5, [pc, #440]	@ (800d728 <prvTimerTask+0x1c0>)
{
 800d56e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d570:	4e6e      	ldr	r6, [pc, #440]	@ (800d72c <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	f8d3 8000 	ldr.w	r8, [r3]
 800d578:	f1b8 0f00 	cmp.w	r8, #0
 800d57c:	d035      	beq.n	800d5ea <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d57e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d580:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d582:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d586:	f7ff fb71 	bl	800cc6c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d58a:	a804      	add	r0, sp, #16
 800d58c:	f7ff ff9a 	bl	800d4c4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d590:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d592:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d594:	2b00      	cmp	r3, #0
 800d596:	d169      	bne.n	800d66c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d598:	2c00      	cmp	r4, #0
 800d59a:	d14c      	bne.n	800d636 <prvTimerTask+0xce>
 800d59c:	4540      	cmp	r0, r8
 800d59e:	d350      	bcc.n	800d642 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d5a0:	f7ff fc08 	bl	800cdb4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5aa:	1d38      	adds	r0, r7, #4
 800d5ac:	f7fe fa86 	bl	800babc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5b4:	0758      	lsls	r0, r3, #29
 800d5b6:	d51a      	bpl.n	800d5ee <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5b8:	69b9      	ldr	r1, [r7, #24]
 800d5ba:	4643      	mov	r3, r8
 800d5bc:	464a      	mov	r2, r9
 800d5be:	4638      	mov	r0, r7
 800d5c0:	4441      	add	r1, r8
 800d5c2:	f7ff fed1 	bl	800d368 <prvInsertTimerInActiveList>
 800d5c6:	b1b0      	cbz	r0, 800d5f6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	4642      	mov	r2, r8
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	9400      	str	r4, [sp, #0]
 800d5d2:	f7ff ff4d 	bl	800d470 <xTimerGenericCommand>
			configASSERT( xResult );
 800d5d6:	b970      	cbnz	r0, 800d5f6 <prvTimerTask+0x8e>
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	e7fe      	b.n	800d5e8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5ea:	2401      	movs	r4, #1
 800d5ec:	e7cb      	b.n	800d586 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5ee:	f023 0301 	bic.w	r3, r3, #1
 800d5f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	a904      	add	r1, sp, #16
 800d600:	6830      	ldr	r0, [r6, #0]
 800d602:	f7fe ff3d 	bl	800c480 <xQueueReceive>
 800d606:	2800      	cmp	r0, #0
 800d608:	d0b3      	beq.n	800d572 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d60a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d60c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d60e:	2b00      	cmp	r3, #0
 800d610:	db2f      	blt.n	800d672 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d612:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d614:	6963      	ldr	r3, [r4, #20]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d132      	bne.n	800d680 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d61a:	a803      	add	r0, sp, #12
 800d61c:	f7ff ff52 	bl	800d4c4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d620:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d622:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d624:	2b09      	cmp	r3, #9
 800d626:	d8e9      	bhi.n	800d5fc <prvTimerTask+0x94>
 800d628:	e8df f003 	tbb	[pc, r3]
 800d62c:	572e2e2e 	.word	0x572e2e2e
 800d630:	2e2e765e 	.word	0x2e2e765e
 800d634:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d636:	4b3e      	ldr	r3, [pc, #248]	@ (800d730 <prvTimerTask+0x1c8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681c      	ldr	r4, [r3, #0]
 800d63c:	fab4 f484 	clz	r4, r4
 800d640:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d642:	4622      	mov	r2, r4
 800d644:	eba8 0109 	sub.w	r1, r8, r9
 800d648:	6830      	ldr	r0, [r6, #0]
 800d64a:	f7ff f922 	bl	800c892 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d64e:	f7ff fbb1 	bl	800cdb4 <xTaskResumeAll>
 800d652:	2800      	cmp	r0, #0
 800d654:	d1d2      	bne.n	800d5fc <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d656:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d65a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d65e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	e7c7      	b.n	800d5fc <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d66c:	f7ff fba2 	bl	800cdb4 <xTaskResumeAll>
}
 800d670:	e7c4      	b.n	800d5fc <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d672:	9b05      	ldr	r3, [sp, #20]
 800d674:	9907      	ldr	r1, [sp, #28]
 800d676:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d678:	9b04      	ldr	r3, [sp, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dbbe      	blt.n	800d5fc <prvTimerTask+0x94>
 800d67e:	e7c8      	b.n	800d612 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d680:	1d20      	adds	r0, r4, #4
 800d682:	f7fe fa1b 	bl	800babc <uxListRemove>
 800d686:	e7c8      	b.n	800d61a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d688:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d68c:	4620      	mov	r0, r4
 800d68e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d698:	9b05      	ldr	r3, [sp, #20]
 800d69a:	4419      	add	r1, r3
 800d69c:	f7ff fe64 	bl	800d368 <prvInsertTimerInActiveList>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d0ab      	beq.n	800d5fc <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6a4:	6a23      	ldr	r3, [r4, #32]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d6ae:	0759      	lsls	r1, r3, #29
 800d6b0:	d5a4      	bpl.n	800d5fc <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6b2:	69a2      	ldr	r2, [r4, #24]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9905      	ldr	r1, [sp, #20]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	440a      	add	r2, r1
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f7ff fed6 	bl	800d470 <xTimerGenericCommand>
							configASSERT( xResult );
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d199      	bne.n	800d5fc <prvTimerTask+0x94>
 800d6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	e7fe      	b.n	800d6d8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d6e6:	e789      	b.n	800d5fc <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6e8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d6ec:	f043 0301 	orr.w	r3, r3, #1
 800d6f0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6f4:	9905      	ldr	r1, [sp, #20]
 800d6f6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6f8:	b941      	cbnz	r1, 800d70c <prvTimerTask+0x1a4>
 800d6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	e7fe      	b.n	800d70a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d70c:	4603      	mov	r3, r0
 800d70e:	4401      	add	r1, r0
 800d710:	4620      	mov	r0, r4
 800d712:	f7ff fe29 	bl	800d368 <prvInsertTimerInActiveList>
					break;
 800d716:	e771      	b.n	800d5fc <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d718:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d71c:	079a      	lsls	r2, r3, #30
 800d71e:	d4de      	bmi.n	800d6de <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d720:	4620      	mov	r0, r4
 800d722:	f7fe f95d 	bl	800b9e0 <vPortFree>
 800d726:	e769      	b.n	800d5fc <prvTimerTask+0x94>
 800d728:	24025234 	.word	0x24025234
 800d72c:	2402522c 	.word	0x2402522c
 800d730:	24025230 	.word	0x24025230

0800d734 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d734:	8880      	ldrh	r0, [r0, #4]
 800d736:	4770      	bx	lr

0800d738 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	6803      	ldr	r3, [r0, #0]
 800d73c:	460c      	mov	r4, r1
 800d73e:	2100      	movs	r1, #0
 800d740:	4605      	mov	r5, r0
 800d742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d744:	4798      	blx	r3
 800d746:	4606      	mov	r6, r0
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	4628      	mov	r0, r5
 800d74c:	1ba4      	subs	r4, r4, r6
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	b2a4      	uxth	r4, r4
 800d752:	4798      	blx	r3
 800d754:	fbb4 f0f0 	udiv	r0, r4, r0
 800d758:	bd70      	pop	{r4, r5, r6, pc}

0800d75a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d75a:	2300      	movs	r3, #0
 800d75c:	8083      	strh	r3, [r0, #4]
 800d75e:	4770      	bx	lr

0800d760 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d760:	b510      	push	{r4, lr}
 800d762:	6803      	ldr	r3, [r0, #0]
 800d764:	4604      	mov	r4, r0
 800d766:	8881      	ldrh	r1, [r0, #4]
 800d768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76a:	4798      	blx	r3
 800d76c:	88a3      	ldrh	r3, [r4, #4]
 800d76e:	3301      	adds	r3, #1
 800d770:	80a3      	strh	r3, [r4, #4]
 800d772:	bd10      	pop	{r4, pc}

0800d774 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d774:	6803      	ldr	r3, [r0, #0]
 800d776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d778:	4718      	bx	r3

0800d77a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d77a:	4770      	bx	lr

0800d77c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d77c:	4a02      	ldr	r2, [pc, #8]	@ (800d788 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d77e:	6002      	str	r2, [r0, #0]
 800d780:	2200      	movs	r2, #0
 800d782:	8082      	strh	r2, [r0, #4]
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	08026254 	.word	0x08026254

0800d78c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d78c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d78e:	2000      	movs	r0, #0
 800d790:	b12b      	cbz	r3, 800d79e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d792:	b920      	cbnz	r0, 800d79e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d794:	1a5a      	subs	r2, r3, r1
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	4250      	negs	r0, r2
 800d79a:	4150      	adcs	r0, r2
 800d79c:	e7f8      	b.n	800d790 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d79e:	4770      	bx	lr

0800d7a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	6148      	str	r0, [r1, #20]
 800d7a4:	618b      	str	r3, [r1, #24]
 800d7a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d7a8:	b913      	cbnz	r3, 800d7b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d7aa:	6281      	str	r1, [r0, #40]	@ 0x28
 800d7ac:	4770      	bx	lr
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	699a      	ldr	r2, [r3, #24]
 800d7b2:	2a00      	cmp	r2, #0
 800d7b4:	d1fb      	bne.n	800d7ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d7b6:	6199      	str	r1, [r3, #24]
 800d7b8:	4770      	bx	lr

0800d7ba <_ZN8touchgfx9Container9removeAllEv>:
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d7be:	b123      	cbz	r3, 800d7ca <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d7c0:	6999      	ldr	r1, [r3, #24]
 800d7c2:	6281      	str	r1, [r0, #40]	@ 0x28
 800d7c4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d7c8:	e7f8      	b.n	800d7bc <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d7ca:	4770      	bx	lr

0800d7cc <_ZN8touchgfx9Container6unlinkEv>:
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	6283      	str	r3, [r0, #40]	@ 0x28
 800d7d0:	4770      	bx	lr

0800d7d2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	8002      	strh	r2, [r0, #0]
 800d7d6:	8042      	strh	r2, [r0, #2]
 800d7d8:	8082      	strh	r2, [r0, #4]
 800d7da:	80c2      	strh	r2, [r0, #6]
 800d7dc:	4770      	bx	lr

0800d7de <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d7de:	b570      	push	{r4, r5, r6, lr}
 800d7e0:	460d      	mov	r5, r1
 800d7e2:	4616      	mov	r6, r2
 800d7e4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d7e6:	b13c      	cbz	r4, 800d7f8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7f2:	4798      	blx	r3
 800d7f4:	69a4      	ldr	r4, [r4, #24]
 800d7f6:	e7f6      	b.n	800d7e6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}

0800d7fa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d7fa:	b538      	push	{r3, r4, r5, lr}
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d800:	b134      	cbz	r4, 800d810 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	4621      	mov	r1, r4
 800d806:	4628      	mov	r0, r5
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	4798      	blx	r3
 800d80c:	69a4      	ldr	r4, [r4, #24]
 800d80e:	e7f7      	b.n	800d800 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d810:	bd38      	pop	{r3, r4, r5, pc}

0800d812 <_ZN8touchgfx9ContainerD1Ev>:
 800d812:	4770      	bx	lr

0800d814 <_ZN8touchgfx9ContainerD0Ev>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	212c      	movs	r1, #44	@ 0x2c
 800d81a:	f014 f9ea 	bl	8021bf2 <_ZdlPvj>
 800d81e:	4620      	mov	r0, r4
 800d820:	bd10      	pop	{r4, pc}

0800d822 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d822:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d824:	b19b      	cbz	r3, 800d84e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d826:	428b      	cmp	r3, r1
 800d828:	d109      	bne.n	800d83e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d82a:	699a      	ldr	r2, [r3, #24]
 800d82c:	2100      	movs	r1, #0
 800d82e:	6159      	str	r1, [r3, #20]
 800d830:	6282      	str	r2, [r0, #40]	@ 0x28
 800d832:	b902      	cbnz	r2, 800d836 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d834:	4770      	bx	lr
 800d836:	6199      	str	r1, [r3, #24]
 800d838:	4770      	bx	lr
 800d83a:	4613      	mov	r3, r2
 800d83c:	b13a      	cbz	r2, 800d84e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d83e:	699a      	ldr	r2, [r3, #24]
 800d840:	428a      	cmp	r2, r1
 800d842:	d1fa      	bne.n	800d83a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d844:	698a      	ldr	r2, [r1, #24]
 800d846:	619a      	str	r2, [r3, #24]
 800d848:	2300      	movs	r3, #0
 800d84a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d84e:	4770      	bx	lr

0800d850 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d850:	b410      	push	{r4}
 800d852:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d854:	4604      	mov	r4, r0
 800d856:	b92b      	cbnz	r3, 800d864 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d858:	6803      	ldr	r3, [r0, #0]
 800d85a:	4611      	mov	r1, r2
 800d85c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d862:	4718      	bx	r3
 800d864:	b941      	cbnz	r1, 800d878 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d866:	6193      	str	r3, [r2, #24]
 800d868:	6282      	str	r2, [r0, #40]	@ 0x28
 800d86a:	6154      	str	r4, [r2, #20]
 800d86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	4603      	mov	r3, r0
 800d874:	2800      	cmp	r0, #0
 800d876:	d0f9      	beq.n	800d86c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d878:	4299      	cmp	r1, r3
 800d87a:	6998      	ldr	r0, [r3, #24]
 800d87c:	d1f9      	bne.n	800d872 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d87e:	6190      	str	r0, [r2, #24]
 800d880:	618a      	str	r2, [r1, #24]
 800d882:	e7f2      	b.n	800d86a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d884 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	461f      	mov	r7, r3
 800d88a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d88e:	460d      	mov	r5, r1
 800d890:	4616      	mov	r6, r2
 800d892:	b103      	cbz	r3, 800d896 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d894:	6038      	str	r0, [r7, #0]
 800d896:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d898:	b314      	cbz	r4, 800d8e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d89a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d89e:	b1eb      	cbz	r3, 800d8dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d8a4:	428d      	cmp	r5, r1
 800d8a6:	db19      	blt.n	800d8dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8a8:	b289      	uxth	r1, r1
 800d8aa:	8923      	ldrh	r3, [r4, #8]
 800d8ac:	440b      	add	r3, r1
 800d8ae:	b21b      	sxth	r3, r3
 800d8b0:	429d      	cmp	r5, r3
 800d8b2:	da13      	bge.n	800d8dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d8b8:	4296      	cmp	r6, r2
 800d8ba:	db0f      	blt.n	800d8dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8bc:	b292      	uxth	r2, r2
 800d8be:	8963      	ldrh	r3, [r4, #10]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	b21b      	sxth	r3, r3
 800d8c4:	429e      	cmp	r6, r3
 800d8c6:	da09      	bge.n	800d8dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8c8:	6823      	ldr	r3, [r4, #0]
 800d8ca:	1ab2      	subs	r2, r6, r2
 800d8cc:	1a69      	subs	r1, r5, r1
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d8d4:	b212      	sxth	r2, r2
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	b209      	sxth	r1, r1
 800d8da:	47c0      	blx	r8
 800d8dc:	69a4      	ldr	r4, [r4, #24]
 800d8de:	e7db      	b.n	800d898 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	4c6d      	ldr	r4, [pc, #436]	@ (800daa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d8ea:	b0a1      	sub	sp, #132	@ 0x84
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	6824      	ldr	r4, [r4, #0]
 800d8f0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d8f2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d8f6:	2400      	movs	r4, #0
 800d8f8:	9303      	str	r3, [sp, #12]
 800d8fa:	802c      	strh	r4, [r5, #0]
 800d8fc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d8fe:	802c      	strh	r4, [r5, #0]
 800d900:	601c      	str	r4, [r3, #0]
 800d902:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d906:	f7ff ffbd 	bl	800d884 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d90a:	f1b9 0f03 	cmp.w	r9, #3
 800d90e:	f340 80c1 	ble.w	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d912:	4631      	mov	r1, r6
 800d914:	a80c      	add	r0, sp, #48	@ 0x30
 800d916:	f006 ff89 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d91a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d91e:	9306      	str	r3, [sp, #24]
 800d920:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d924:	9307      	str	r3, [sp, #28]
 800d926:	9b03      	ldr	r3, [sp, #12]
 800d928:	f8d3 a000 	ldr.w	sl, [r3]
 800d92c:	f1ba 0f00 	cmp.w	sl, #0
 800d930:	f000 80b3 	beq.w	800da9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d934:	4651      	mov	r1, sl
 800d936:	a810      	add	r0, sp, #64	@ 0x40
 800d938:	f006 ff78 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d93c:	2002      	movs	r0, #2
 800d93e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	9a06      	ldr	r2, [sp, #24]
 800d946:	fb91 f1f0 	sdiv	r1, r1, r0
 800d94a:	189d      	adds	r5, r3, r2
 800d94c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d950:	9a07      	ldr	r2, [sp, #28]
 800d952:	4419      	add	r1, r3
 800d954:	9b02      	ldr	r3, [sp, #8]
 800d956:	4413      	add	r3, r2
 800d958:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d95c:	1a6d      	subs	r5, r5, r1
 800d95e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d962:	fb92 f2f0 	sdiv	r2, r2, r0
 800d966:	440a      	add	r2, r1
 800d968:	1a9b      	subs	r3, r3, r2
 800d96a:	435b      	muls	r3, r3
 800d96c:	fb05 3505 	mla	r5, r5, r5, r3
 800d970:	4f4c      	ldr	r7, [pc, #304]	@ (800daa4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d972:	ac10      	add	r4, sp, #64	@ 0x40
 800d974:	f1b9 0f0c 	cmp.w	r9, #12
 800d978:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d97c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d97e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d980:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d984:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d98c:	f04f 0303 	mov.w	r3, #3
 800d990:	bfd8      	it	le
 800d992:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d996:	f04f 0400 	mov.w	r4, #0
 800d99a:	f8cd 9000 	str.w	r9, [sp]
 800d99e:	bfcc      	ite	gt
 800d9a0:	4698      	movgt	r8, r3
 800d9a2:	fb92 f8f3 	sdivle	r8, r2, r3
 800d9a6:	1c63      	adds	r3, r4, #1
 800d9a8:	aa10      	add	r2, sp, #64	@ 0x40
 800d9aa:	f004 0401 	and.w	r4, r4, #1
 800d9ae:	f04f 0b00 	mov.w	fp, #0
 800d9b2:	9308      	str	r3, [sp, #32]
 800d9b4:	9b00      	ldr	r3, [sp, #0]
 800d9b6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d9ba:	fb93 f3f8 	sdiv	r3, r3, r8
 800d9be:	3404      	adds	r4, #4
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	9304      	str	r3, [sp, #16]
 800d9c4:	9a04      	ldr	r2, [sp, #16]
 800d9c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d9ca:	fb13 f302 	smulbb	r3, r3, r2
 800d9ce:	9a01      	ldr	r2, [sp, #4]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	1899      	adds	r1, r3, r2
 800d9d4:	9305      	str	r3, [sp, #20]
 800d9d6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d9da:	b209      	sxth	r1, r1
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	db4d      	blt.n	800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d9e0:	8932      	ldrh	r2, [r6, #8]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	b21b      	sxth	r3, r3
 800d9e6:	4299      	cmp	r1, r3
 800d9e8:	da48      	bge.n	800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d9ea:	9b04      	ldr	r3, [sp, #16]
 800d9ec:	6827      	ldr	r7, [r4, #0]
 800d9ee:	fb17 f703 	smulbb	r7, r7, r3
 800d9f2:	9b02      	ldr	r3, [sp, #8]
 800d9f4:	b2bf      	uxth	r7, r7
 800d9f6:	18fa      	adds	r2, r7, r3
 800d9f8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d9fc:	b212      	sxth	r2, r2
 800d9fe:	429a      	cmp	r2, r3
 800da00:	db3c      	blt.n	800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da02:	8970      	ldrh	r0, [r6, #10]
 800da04:	4403      	add	r3, r0
 800da06:	b21b      	sxth	r3, r3
 800da08:	429a      	cmp	r2, r3
 800da0a:	da37      	bge.n	800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da0c:	2300      	movs	r3, #0
 800da0e:	4630      	mov	r0, r6
 800da10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da12:	ab0b      	add	r3, sp, #44	@ 0x2c
 800da14:	f7ff ff36 	bl	800d884 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800da18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da1a:	b37a      	cbz	r2, 800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da1c:	4552      	cmp	r2, sl
 800da1e:	d02d      	beq.n	800da7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da20:	4611      	mov	r1, r2
 800da22:	a80e      	add	r0, sp, #56	@ 0x38
 800da24:	9209      	str	r2, [sp, #36]	@ 0x24
 800da26:	f006 ff01 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800da2a:	f04f 0e02 	mov.w	lr, #2
 800da2e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800da32:	9a06      	ldr	r2, [sp, #24]
 800da34:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800da38:	9b01      	ldr	r3, [sp, #4]
 800da3a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800da3e:	4413      	add	r3, r2
 800da40:	9a07      	ldr	r2, [sp, #28]
 800da42:	fb91 f1fe 	sdiv	r1, r1, lr
 800da46:	fb9c fcfe 	sdiv	ip, ip, lr
 800da4a:	4401      	add	r1, r0
 800da4c:	1a58      	subs	r0, r3, r1
 800da4e:	9b02      	ldr	r3, [sp, #8]
 800da50:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800da54:	4413      	add	r3, r2
 800da56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da58:	448c      	add	ip, r1
 800da5a:	eba3 030c 	sub.w	r3, r3, ip
 800da5e:	435b      	muls	r3, r3
 800da60:	fb00 3300 	mla	r3, r0, r0, r3
 800da64:	42ab      	cmp	r3, r5
 800da66:	d208      	bcs.n	800da7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800da68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da6a:	461d      	mov	r5, r3
 800da6c:	9803      	ldr	r0, [sp, #12]
 800da6e:	6001      	str	r1, [r0, #0]
 800da70:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800da72:	9805      	ldr	r0, [sp, #20]
 800da74:	8008      	strh	r0, [r1, #0]
 800da76:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800da78:	800f      	strh	r7, [r1, #0]
 800da7a:	4692      	mov	sl, r2
 800da7c:	f10b 0b01 	add.w	fp, fp, #1
 800da80:	3408      	adds	r4, #8
 800da82:	f1bb 0f04 	cmp.w	fp, #4
 800da86:	d19d      	bne.n	800d9c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800da88:	9b00      	ldr	r3, [sp, #0]
 800da8a:	9c08      	ldr	r4, [sp, #32]
 800da8c:	444b      	add	r3, r9
 800da8e:	4544      	cmp	r4, r8
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	d188      	bne.n	800d9a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800da94:	b021      	add	sp, #132	@ 0x84
 800da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9a:	f04f 35ff 	mov.w	r5, #4294967295
 800da9e:	e767      	b.n	800d970 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800daa0:	2402526c 	.word	0x2402526c
 800daa4:	08023358 	.word	0x08023358

0800daa8 <_ZN8touchgfx4RectaNERKS0_>:
 800daa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daac:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dab0:	888c      	ldrh	r4, [r1, #4]
 800dab2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dab6:	443c      	add	r4, r7
 800dab8:	b2a4      	uxth	r4, r4
 800daba:	fa0f f884 	sxth.w	r8, r4
 800dabe:	45c1      	cmp	r9, r8
 800dac0:	da2f      	bge.n	800db22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dac2:	8882      	ldrh	r2, [r0, #4]
 800dac4:	444a      	add	r2, r9
 800dac6:	b292      	uxth	r2, r2
 800dac8:	fa0f fe82 	sxth.w	lr, r2
 800dacc:	4577      	cmp	r7, lr
 800dace:	da28      	bge.n	800db22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dad0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dad4:	88cb      	ldrh	r3, [r1, #6]
 800dad6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800dada:	442b      	add	r3, r5
 800dadc:	b21b      	sxth	r3, r3
 800dade:	429e      	cmp	r6, r3
 800dae0:	da1f      	bge.n	800db22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dae2:	88c3      	ldrh	r3, [r0, #6]
 800dae4:	4433      	add	r3, r6
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	fa0f fc83 	sxth.w	ip, r3
 800daec:	4565      	cmp	r5, ip
 800daee:	da18      	bge.n	800db22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800daf0:	454f      	cmp	r7, r9
 800daf2:	bfb8      	it	lt
 800daf4:	464f      	movlt	r7, r9
 800daf6:	42b5      	cmp	r5, r6
 800daf8:	bfb8      	it	lt
 800dafa:	4635      	movlt	r5, r6
 800dafc:	45f0      	cmp	r8, lr
 800dafe:	bfd8      	it	le
 800db00:	4622      	movle	r2, r4
 800db02:	1bd2      	subs	r2, r2, r7
 800db04:	8082      	strh	r2, [r0, #4]
 800db06:	884a      	ldrh	r2, [r1, #2]
 800db08:	88c9      	ldrh	r1, [r1, #6]
 800db0a:	8007      	strh	r7, [r0, #0]
 800db0c:	440a      	add	r2, r1
 800db0e:	8045      	strh	r5, [r0, #2]
 800db10:	b292      	uxth	r2, r2
 800db12:	b211      	sxth	r1, r2
 800db14:	458c      	cmp	ip, r1
 800db16:	bfa8      	it	ge
 800db18:	4613      	movge	r3, r2
 800db1a:	1b5b      	subs	r3, r3, r5
 800db1c:	80c3      	strh	r3, [r0, #6]
 800db1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db22:	2300      	movs	r3, #0
 800db24:	8003      	strh	r3, [r0, #0]
 800db26:	8043      	strh	r3, [r0, #2]
 800db28:	8083      	strh	r3, [r0, #4]
 800db2a:	80c3      	strh	r3, [r0, #6]
 800db2c:	e7f7      	b.n	800db1e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800db2e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800db2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	dd06      	ble.n	800db44 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800db36:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800db3a:	2800      	cmp	r0, #0
 800db3c:	bfcc      	ite	gt
 800db3e:	2000      	movgt	r0, #0
 800db40:	2001      	movle	r0, #1
 800db42:	4770      	bx	lr
 800db44:	2001      	movs	r0, #1
 800db46:	4770      	bx	lr

0800db48 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800db52:	8003      	strh	r3, [r0, #0]
 800db54:	8043      	strh	r3, [r0, #2]
 800db56:	8083      	strh	r3, [r0, #4]
 800db58:	80c3      	strh	r3, [r0, #6]
 800db5a:	2d00      	cmp	r5, #0
 800db5c:	d040      	beq.n	800dbe0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800db5e:	1d28      	adds	r0, r5, #4
 800db60:	f7ff ffe5 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 800db64:	b988      	cbnz	r0, 800db8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800db66:	4620      	mov	r0, r4
 800db68:	f7ff ffe1 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 800db6c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800db70:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800db74:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800db78:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800db7c:	b138      	cbz	r0, 800db8e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800db7e:	8022      	strh	r2, [r4, #0]
 800db80:	8063      	strh	r3, [r4, #2]
 800db82:	f8a4 e004 	strh.w	lr, [r4, #4]
 800db86:	f8a4 c006 	strh.w	ip, [r4, #6]
 800db8a:	69ad      	ldr	r5, [r5, #24]
 800db8c:	e7e5      	b.n	800db5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800db8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800db92:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800db96:	4290      	cmp	r0, r2
 800db98:	4607      	mov	r7, r0
 800db9a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800db9e:	460e      	mov	r6, r1
 800dba0:	bfa8      	it	ge
 800dba2:	4617      	movge	r7, r2
 800dba4:	4299      	cmp	r1, r3
 800dba6:	4472      	add	r2, lr
 800dba8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dbac:	bfa8      	it	ge
 800dbae:	461e      	movge	r6, r3
 800dbb0:	4440      	add	r0, r8
 800dbb2:	4471      	add	r1, lr
 800dbb4:	4463      	add	r3, ip
 800dbb6:	b200      	sxth	r0, r0
 800dbb8:	8027      	strh	r7, [r4, #0]
 800dbba:	b212      	sxth	r2, r2
 800dbbc:	8066      	strh	r6, [r4, #2]
 800dbbe:	b209      	sxth	r1, r1
 800dbc0:	b21b      	sxth	r3, r3
 800dbc2:	4290      	cmp	r0, r2
 800dbc4:	bfac      	ite	ge
 800dbc6:	ebc7 0200 	rsbge	r2, r7, r0
 800dbca:	ebc7 0202 	rsblt	r2, r7, r2
 800dbce:	4299      	cmp	r1, r3
 800dbd0:	bfac      	ite	ge
 800dbd2:	ebc6 0301 	rsbge	r3, r6, r1
 800dbd6:	ebc6 0303 	rsblt	r3, r6, r3
 800dbda:	80a2      	strh	r2, [r4, #4]
 800dbdc:	80e3      	strh	r3, [r4, #6]
 800dbde:	e7d4      	b.n	800db8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbe6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dbe6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dbea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800dbee:	b383      	cbz	r3, 800dc52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dbf0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dbf2:	b374      	cbz	r4, 800dc52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dbf4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800dbf8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dbfc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800dc00:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800dc04:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800dc08:	b303      	cbz	r3, 800dc4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dc0a:	4668      	mov	r0, sp
 800dc0c:	1d21      	adds	r1, r4, #4
 800dc0e:	f8ad 5000 	strh.w	r5, [sp]
 800dc12:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dc16:	f8ad 7004 	strh.w	r7, [sp, #4]
 800dc1a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800dc1e:	f7ff ff43 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 800dc22:	4668      	mov	r0, sp
 800dc24:	f7ff ff83 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc28:	b980      	cbnz	r0, 800dc4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dc2a:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc2e:	4669      	mov	r1, sp
 800dc30:	88a2      	ldrh	r2, [r4, #4]
 800dc32:	4620      	mov	r0, r4
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	88e2      	ldrh	r2, [r4, #6]
 800dc38:	f8ad 3000 	strh.w	r3, [sp]
 800dc3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dc40:	1a9b      	subs	r3, r3, r2
 800dc42:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	4798      	blx	r3
 800dc4c:	69a4      	ldr	r4, [r4, #24]
 800dc4e:	2c00      	cmp	r4, #0
 800dc50:	d1d8      	bne.n	800dc04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800dc52:	b002      	add	sp, #8
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800dc58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc5a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800dc5e:	460d      	mov	r5, r1
 800dc60:	4616      	mov	r6, r2
 800dc62:	b323      	cbz	r3, 800dcae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dc64:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dc66:	b314      	cbz	r4, 800dcae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dc68:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800dc6c:	b1eb      	cbz	r3, 800dcaa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dc6e:	6828      	ldr	r0, [r5, #0]
 800dc70:	466b      	mov	r3, sp
 800dc72:	6869      	ldr	r1, [r5, #4]
 800dc74:	c303      	stmia	r3!, {r0, r1}
 800dc76:	4668      	mov	r0, sp
 800dc78:	1d21      	adds	r1, r4, #4
 800dc7a:	f7ff ff15 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 800dc7e:	4668      	mov	r0, sp
 800dc80:	f7ff ff55 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc84:	b988      	cbnz	r0, 800dcaa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dc86:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc8a:	4669      	mov	r1, sp
 800dc8c:	88a2      	ldrh	r2, [r4, #4]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	1a9b      	subs	r3, r3, r2
 800dc92:	88e2      	ldrh	r2, [r4, #6]
 800dc94:	f8ad 3000 	strh.w	r3, [sp]
 800dc98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dc9c:	1a9b      	subs	r3, r3, r2
 800dc9e:	4632      	mov	r2, r6
 800dca0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dca8:	4798      	blx	r3
 800dcaa:	69a4      	ldr	r4, [r4, #24]
 800dcac:	e7db      	b.n	800dc66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800dcae:	b002      	add	sp, #8
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}

0800dcb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800dcb2:	6803      	ldr	r3, [r0, #0]
 800dcb4:	b513      	push	{r0, r1, r4, lr}
 800dcb6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e9cd 3300 	strd	r3, r3, [sp]
 800dcc0:	466b      	mov	r3, sp
 800dcc2:	47a0      	blx	r4
 800dcc4:	b002      	add	sp, #8
 800dcc6:	bd10      	pop	{r4, pc}

0800dcc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800dcc8:	2301      	movs	r3, #1
 800dcca:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800dcce:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800dcd2:	4770      	bx	lr

0800dcd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800dcda:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800dcde:	4770      	bx	lr

0800dce0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800dce0:	6843      	ldr	r3, [r0, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	725a      	strb	r2, [r3, #9]
 800dce6:	6840      	ldr	r0, [r0, #4]
 800dce8:	6803      	ldr	r3, [r0, #0]
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	4718      	bx	r3

0800dcee <_ZN8touchgfx3HAL8flushDMAEv>:
 800dcee:	6840      	ldr	r0, [r0, #4]
 800dcf0:	6803      	ldr	r3, [r0, #0]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	4718      	bx	r3

0800dcf6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800dcf6:	b530      	push	{r4, r5, lr}
 800dcf8:	b08b      	sub	sp, #44	@ 0x2c
 800dcfa:	6804      	ldr	r4, [r0, #0]
 800dcfc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800dd00:	9509      	str	r5, [sp, #36]	@ 0x24
 800dd02:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800dd06:	9508      	str	r5, [sp, #32]
 800dd08:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800dd0c:	9507      	str	r5, [sp, #28]
 800dd0e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800dd12:	9506      	str	r5, [sp, #24]
 800dd14:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800dd18:	9505      	str	r5, [sp, #20]
 800dd1a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800dd1e:	9504      	str	r5, [sp, #16]
 800dd20:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800dd24:	9503      	str	r5, [sp, #12]
 800dd26:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800dd2a:	9502      	str	r5, [sp, #8]
 800dd2c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800dd30:	e9cd 3500 	strd	r3, r5, [sp]
 800dd34:	4613      	mov	r3, r2
 800dd36:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800dd38:	2200      	movs	r2, #0
 800dd3a:	47a0      	blx	r4
 800dd3c:	b00b      	add	sp, #44	@ 0x2c
 800dd3e:	bd30      	pop	{r4, r5, pc}

0800dd40 <_ZN8touchgfx3HAL10beginFrameEv>:
 800dd40:	4b04      	ldr	r3, [pc, #16]	@ (800dd54 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	b123      	cbz	r3, 800dd50 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800dd46:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800dd4a:	f080 0001 	eor.w	r0, r0, #1
 800dd4e:	4770      	bx	lr
 800dd50:	2001      	movs	r0, #1
 800dd52:	4770      	bx	lr
 800dd54:	2402526a 	.word	0x2402526a

0800dd58 <_ZN8touchgfx3HAL8endFrameEv>:
 800dd58:	b510      	push	{r4, lr}
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	6840      	ldr	r0, [r0, #4]
 800dd5e:	6803      	ldr	r3, [r0, #0]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	4798      	blx	r3
 800dd64:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800dd68:	b113      	cbz	r3, 800dd70 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800dd70:	bd10      	pop	{r4, pc}

0800dd72 <_ZN8touchgfx3HAL10initializeEv>:
 800dd72:	b510      	push	{r4, lr}
 800dd74:	4604      	mov	r4, r0
 800dd76:	f7f4 fe0d 	bl	8002994 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dd7a:	f7f3 fe53 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800dd7e:	6860      	ldr	r0, [r4, #4]
 800dd80:	6803      	ldr	r3, [r0, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	4798      	blx	r3
 800dd86:	68e0      	ldr	r0, [r4, #12]
 800dd88:	6803      	ldr	r3, [r0, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	4798      	blx	r3
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	4620      	mov	r0, r4
 800dd92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd98:	4718      	bx	r3
	...

0800dd9c <_ZN8touchgfx3HAL4tickEv>:
 800dd9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd9e:	6803      	ldr	r3, [r0, #0]
 800dda0:	4604      	mov	r4, r0
 800dda2:	4d62      	ldr	r5, [pc, #392]	@ (800df2c <_ZN8touchgfx3HAL4tickEv+0x190>)
 800dda4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dda8:	4798      	blx	r3
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f000 809e 	beq.w	800deec <_ZN8touchgfx3HAL4tickEv+0x150>
 800ddb0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d002      	beq.n	800ddbe <_ZN8touchgfx3HAL4tickEv+0x22>
 800ddb8:	2001      	movs	r0, #1
 800ddba:	f7f3 fd99 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ddbe:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800ddc2:	2600      	movs	r6, #0
 800ddc4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800ddc8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800ddcc:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800ddd0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800ddd4:	b133      	cbz	r3, 800dde4 <_ZN8touchgfx3HAL4tickEv+0x48>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ddde:	4798      	blx	r3
 800dde0:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800dde4:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800dde8:	2601      	movs	r6, #1
 800ddea:	6862      	ldr	r2, [r4, #4]
 800ddec:	f083 0301 	eor.w	r3, r3, #1
 800ddf0:	702e      	strb	r6, [r5, #0]
 800ddf2:	7253      	strb	r3, [r2, #9]
 800ddf4:	f005 fac6 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 800ddf8:	6803      	ldr	r3, [r0, #0]
 800ddfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddfc:	4798      	blx	r3
 800ddfe:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800de02:	b90b      	cbnz	r3, 800de08 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800de04:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800de08:	f005 fabc 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 800de0c:	6803      	ldr	r3, [r0, #0]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	4798      	blx	r3
 800de12:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800de14:	6803      	ldr	r3, [r0, #0]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	4798      	blx	r3
 800de1a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800de1e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800de22:	3b01      	subs	r3, #1
 800de24:	b2db      	uxtb	r3, r3
 800de26:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800de2a:	b10a      	cbz	r2, 800de30 <_ZN8touchgfx3HAL4tickEv+0x94>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1eb      	bne.n	800de08 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800de30:	4a3f      	ldr	r2, [pc, #252]	@ (800df30 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800de32:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800de36:	7813      	ldrb	r3, [r2, #0]
 800de38:	3301      	adds	r3, #1
 800de3a:	b25b      	sxtb	r3, r3
 800de3c:	4299      	cmp	r1, r3
 800de3e:	7013      	strb	r3, [r2, #0]
 800de40:	dc10      	bgt.n	800de64 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800de42:	2300      	movs	r3, #0
 800de44:	68e0      	ldr	r0, [r4, #12]
 800de46:	a902      	add	r1, sp, #8
 800de48:	7013      	strb	r3, [r2, #0]
 800de4a:	aa03      	add	r2, sp, #12
 800de4c:	6803      	ldr	r3, [r0, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	4798      	blx	r3
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	2800      	cmp	r0, #0
 800de56:	d059      	beq.n	800df0c <_ZN8touchgfx3HAL4tickEv+0x170>
 800de58:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800de5c:	4620      	mov	r0, r4
 800de5e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800de62:	4798      	blx	r3
 800de64:	2300      	movs	r3, #0
 800de66:	6960      	ldr	r0, [r4, #20]
 800de68:	f88d 3007 	strb.w	r3, [sp, #7]
 800de6c:	b158      	cbz	r0, 800de86 <_ZN8touchgfx3HAL4tickEv+0xea>
 800de6e:	6803      	ldr	r3, [r0, #0]
 800de70:	f10d 0107 	add.w	r1, sp, #7
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	4798      	blx	r3
 800de78:	b128      	cbz	r0, 800de86 <_ZN8touchgfx3HAL4tickEv+0xea>
 800de7a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800de7c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800de80:	6803      	ldr	r3, [r0, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4798      	blx	r3
 800de86:	f104 001c 	add.w	r0, r4, #28
 800de8a:	f013 f8b5 	bl	8020ff8 <_ZN8touchgfx8Gestures4tickEv>
 800de8e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800de92:	b30b      	cbz	r3, 800ded8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800de94:	6920      	ldr	r0, [r4, #16]
 800de96:	6803      	ldr	r3, [r0, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	4798      	blx	r3
 800de9c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800de9e:	4606      	mov	r6, r0
 800dea0:	b903      	cbnz	r3, 800dea4 <_ZN8touchgfx3HAL4tickEv+0x108>
 800dea2:	6760      	str	r0, [r4, #116]	@ 0x74
 800dea4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dea6:	4a23      	ldr	r2, [pc, #140]	@ (800df34 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800dea8:	1af3      	subs	r3, r6, r3
 800deaa:	4293      	cmp	r3, r2
 800deac:	d914      	bls.n	800ded8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800deae:	6920      	ldr	r0, [r4, #16]
 800deb0:	6803      	ldr	r3, [r0, #0]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	4798      	blx	r3
 800deb6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800deb8:	2264      	movs	r2, #100	@ 0x64
 800deba:	1af3      	subs	r3, r6, r3
 800debc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dec0:	fbb0 f0f3 	udiv	r0, r0, r3
 800dec4:	2800      	cmp	r0, #0
 800dec6:	dc26      	bgt.n	800df16 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800dec8:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800decc:	6920      	ldr	r0, [r4, #16]
 800dece:	2100      	movs	r1, #0
 800ded0:	6803      	ldr	r3, [r0, #0]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	4798      	blx	r3
 800ded6:	6766      	str	r6, [r4, #116]	@ 0x74
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	4620      	mov	r0, r4
 800dedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dee0:	4798      	blx	r3
 800dee2:	f005 fa4f 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 800dee6:	6803      	ldr	r3, [r0, #0]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deea:	4798      	blx	r3
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	4620      	mov	r0, r4
 800def0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800def4:	4798      	blx	r3
 800def6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800defa:	2b02      	cmp	r3, #2
 800defc:	d002      	beq.n	800df04 <_ZN8touchgfx3HAL4tickEv+0x168>
 800defe:	2001      	movs	r0, #1
 800df00:	f7f3 fd26 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800df04:	2300      	movs	r3, #0
 800df06:	702b      	strb	r3, [r5, #0]
 800df08:	b004      	add	sp, #16
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800df10:	4620      	mov	r0, r4
 800df12:	4798      	blx	r3
 800df14:	e7a6      	b.n	800de64 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800df16:	2863      	cmp	r0, #99	@ 0x63
 800df18:	bfcb      	itete	gt
 800df1a:	2300      	movgt	r3, #0
 800df1c:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800df20:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800df24:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800df28:	e7d0      	b.n	800decc <_ZN8touchgfx3HAL4tickEv+0x130>
 800df2a:	bf00      	nop
 800df2c:	24025270 	.word	0x24025270
 800df30:	24025271 	.word	0x24025271
 800df34:	05f5e100 	.word	0x05f5e100

0800df38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800df38:	b510      	push	{r4, lr}
 800df3a:	4604      	mov	r4, r0
 800df3c:	f7f4 fd5a 	bl	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800df40:	2200      	movs	r2, #0
 800df42:	6863      	ldr	r3, [r4, #4]
 800df44:	729a      	strb	r2, [r3, #10]
 800df46:	bd10      	pop	{r4, pc}

0800df48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800df48:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800df4a:	301c      	adds	r0, #28
 800df4c:	f013 b852 	b.w	8020ff4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800df50 <_ZN8touchgfx3HAL5touchEll>:
 800df50:	b530      	push	{r4, r5, lr}
 800df52:	b087      	sub	sp, #28
 800df54:	4604      	mov	r4, r0
 800df56:	a804      	add	r0, sp, #16
 800df58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800df5c:	f004 ffde 	bl	8012f1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800df60:	9b04      	ldr	r3, [sp, #16]
 800df62:	a906      	add	r1, sp, #24
 800df64:	a803      	add	r0, sp, #12
 800df66:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df6a:	9b05      	ldr	r3, [sp, #20]
 800df6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800df70:	f005 f826 	bl	8012fc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800df74:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800df78:	f104 001c 	add.w	r0, r4, #28
 800df7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800df80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800df84:	b189      	cbz	r1, 800dfaa <_ZN8touchgfx3HAL5touchEll+0x5a>
 800df86:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	4613      	mov	r3, r2
 800df8e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800df92:	462a      	mov	r2, r5
 800df94:	f013 f83e 	bl	8021014 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800df98:	b128      	cbz	r0, 800dfa6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800df9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800df9e:	6623      	str	r3, [r4, #96]	@ 0x60
 800dfa0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dfa4:	6663      	str	r3, [r4, #100]	@ 0x64
 800dfa6:	b007      	add	sp, #28
 800dfa8:	bd30      	pop	{r4, r5, pc}
 800dfaa:	f013 f873 	bl	8021094 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dfb4:	e7f1      	b.n	800df9a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800dfb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800dfb6:	b510      	push	{r4, lr}
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d046      	beq.n	800e04a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dfbc:	ea81 0002 	eor.w	r0, r1, r2
 800dfc0:	07c4      	lsls	r4, r0, #31
 800dfc2:	d508      	bpl.n	800dfd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800dfc4:	440b      	add	r3, r1
 800dfc6:	3a01      	subs	r2, #1
 800dfc8:	428b      	cmp	r3, r1
 800dfca:	d93e      	bls.n	800e04a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dfcc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dfd0:	f801 0b01 	strb.w	r0, [r1], #1
 800dfd4:	e7f8      	b.n	800dfc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800dfd6:	07d0      	lsls	r0, r2, #31
 800dfd8:	bf42      	ittt	mi
 800dfda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800dfde:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800dfe2:	f801 0b01 	strbmi.w	r0, [r1], #1
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d911      	bls.n	800e00e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dfea:	ea81 0402 	eor.w	r4, r1, r2
 800dfee:	4610      	mov	r0, r2
 800dff0:	07a4      	lsls	r4, r4, #30
 800dff2:	d022      	beq.n	800e03a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800dff4:	f023 0401 	bic.w	r4, r3, #1
 800dff8:	440c      	add	r4, r1
 800dffa:	428c      	cmp	r4, r1
 800dffc:	4602      	mov	r2, r0
 800dffe:	d904      	bls.n	800e00a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e000:	8812      	ldrh	r2, [r2, #0]
 800e002:	3002      	adds	r0, #2
 800e004:	f821 2b02 	strh.w	r2, [r1], #2
 800e008:	e7f7      	b.n	800dffa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	f023 0003 	bic.w	r0, r3, #3
 800e012:	4408      	add	r0, r1
 800e014:	4288      	cmp	r0, r1
 800e016:	4614      	mov	r4, r2
 800e018:	d904      	bls.n	800e024 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e01a:	6824      	ldr	r4, [r4, #0]
 800e01c:	3204      	adds	r2, #4
 800e01e:	f841 4b04 	str.w	r4, [r1], #4
 800e022:	e7f7      	b.n	800e014 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e024:	f003 0303 	and.w	r3, r3, #3
 800e028:	3a01      	subs	r2, #1
 800e02a:	440b      	add	r3, r1
 800e02c:	428b      	cmp	r3, r1
 800e02e:	d90c      	bls.n	800e04a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e030:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e034:	f801 0b01 	strb.w	r0, [r1], #1
 800e038:	e7f8      	b.n	800e02c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e03a:	0790      	lsls	r0, r2, #30
 800e03c:	d0e7      	beq.n	800e00e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e03e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e042:	3b02      	subs	r3, #2
 800e044:	f821 0b02 	strh.w	r0, [r1], #2
 800e048:	e7e1      	b.n	800e00e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e04a:	2001      	movs	r0, #1
 800e04c:	bd10      	pop	{r4, pc}

0800e04e <_ZN8touchgfx3HAL7noTouchEv>:
 800e04e:	b510      	push	{r4, lr}
 800e050:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800e054:	4604      	mov	r4, r0
 800e056:	b153      	cbz	r3, 800e06e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e058:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800e05c:	2101      	movs	r1, #1
 800e05e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800e062:	301c      	adds	r0, #28
 800e064:	f013 f816 	bl	8021094 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e068:	2300      	movs	r3, #0
 800e06a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e06e:	bd10      	pop	{r4, pc}

0800e070 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e074:	b085      	sub	sp, #20
 800e076:	4604      	mov	r4, r0
 800e078:	2000      	movs	r0, #0
 800e07a:	4699      	mov	r9, r3
 800e07c:	ad04      	add	r5, sp, #16
 800e07e:	460f      	mov	r7, r1
 800e080:	4690      	mov	r8, r2
 800e082:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e086:	69a0      	ldr	r0, [r4, #24]
 800e088:	6806      	ldr	r6, [r0, #0]
 800e08a:	9501      	str	r5, [sp, #4]
 800e08c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800e090:	9500      	str	r5, [sp, #0]
 800e092:	6835      	ldr	r5, [r6, #0]
 800e094:	47a8      	blx	r5
 800e096:	4d10      	ldr	r5, [pc, #64]	@ (800e0d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e098:	4606      	mov	r6, r0
 800e09a:	f8a5 9000 	strh.w	r9, [r5]
 800e09e:	f7f5 fdb9 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e0a2:	6803      	ldr	r3, [r0, #0]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a6:	4798      	blx	r3
 800e0a8:	b128      	cbz	r0, 800e0b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e0aa:	2801      	cmp	r0, #1
 800e0ac:	d00b      	beq.n	800e0c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	b005      	add	sp, #20
 800e0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0b6:	882b      	ldrh	r3, [r5, #0]
 800e0b8:	fb08 7203 	mla	r2, r8, r3, r7
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e0c2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e0c4:	e7f3      	b.n	800e0ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e0c6:	882a      	ldrh	r2, [r5, #0]
 800e0c8:	9b03      	ldr	r3, [sp, #12]
 800e0ca:	fb08 7202 	mla	r2, r8, r2, r7
 800e0ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e0d2:	1a9a      	subs	r2, r3, r2
 800e0d4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800e0d6:	e7ea      	b.n	800e0ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e0d8:	24025266 	.word	0x24025266

0800e0dc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	4b15      	ldr	r3, [pc, #84]	@ (800e134 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800e0e0:	460f      	mov	r7, r1
 800e0e2:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800e0ec:	fb93 f4f4 	sdiv	r4, r3, r4
 800e0f0:	f7f5 fd90 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e0f4:	6803      	ldr	r3, [r0, #0]
 800e0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f8:	4798      	blx	r3
 800e0fa:	2801      	cmp	r0, #1
 800e0fc:	d00b      	beq.n	800e116 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800e0fe:	d303      	bcc.n	800e108 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800e100:	2802      	cmp	r0, #2
 800e102:	d010      	beq.n	800e126 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800e104:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e108:	4b0b      	ldr	r3, [pc, #44]	@ (800e138 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800e10a:	437c      	muls	r4, r7
 800e10c:	8819      	ldrh	r1, [r3, #0]
 800e10e:	434c      	muls	r4, r1
 800e110:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800e114:	e7f6      	b.n	800e104 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800e116:	4b08      	ldr	r3, [pc, #32]	@ (800e138 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800e118:	437c      	muls	r4, r7
 800e11a:	8819      	ldrh	r1, [r3, #0]
 800e11c:	434c      	muls	r4, r1
 800e11e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e122:	1b2d      	subs	r5, r5, r4
 800e124:	e7ee      	b.n	800e104 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800e126:	4b04      	ldr	r3, [pc, #16]	@ (800e138 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800e128:	437c      	muls	r4, r7
 800e12a:	8819      	ldrh	r1, [r3, #0]
 800e12c:	434c      	muls	r4, r1
 800e12e:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800e132:	e7e7      	b.n	800e104 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800e134:	24025268 	.word	0x24025268
 800e138:	24025266 	.word	0x24025266

0800e13c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e13e:	b08b      	sub	sp, #44	@ 0x2c
 800e140:	4617      	mov	r7, r2
 800e142:	4604      	mov	r4, r0
 800e144:	460e      	mov	r6, r1
 800e146:	461d      	mov	r5, r3
 800e148:	f7f5 fd64 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e14c:	6803      	ldr	r3, [r0, #0]
 800e14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e150:	4798      	blx	r3
 800e152:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e156:	9007      	str	r0, [sp, #28]
 800e158:	4631      	mov	r1, r6
 800e15a:	6822      	ldr	r2, [r4, #0]
 800e15c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e160:	4b0c      	ldr	r3, [pc, #48]	@ (800e194 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e162:	4620      	mov	r0, r4
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	9306      	str	r3, [sp, #24]
 800e168:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e16c:	9305      	str	r3, [sp, #20]
 800e16e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e17e:	9302      	str	r3, [sp, #8]
 800e180:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e184:	e9cd 5300 	strd	r5, r3, [sp]
 800e188:	463b      	mov	r3, r7
 800e18a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800e18c:	2200      	movs	r2, #0
 800e18e:	47a8      	blx	r5
 800e190:	b00b      	add	sp, #44	@ 0x2c
 800e192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e194:	24025266 	.word	0x24025266

0800e198 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e19c:	4698      	mov	r8, r3
 800e19e:	6803      	ldr	r3, [r0, #0]
 800e1a0:	b08b      	sub	sp, #44	@ 0x2c
 800e1a2:	4617      	mov	r7, r2
 800e1a4:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800e1a6:	460e      	mov	r6, r1
 800e1a8:	4b13      	ldr	r3, [pc, #76]	@ (800e1f8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	f8b3 9000 	ldrh.w	r9, [r3]
 800e1b0:	f7f5 fd30 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e1b4:	6803      	ldr	r3, [r0, #0]
 800e1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b8:	4798      	blx	r3
 800e1ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e1be:	2200      	movs	r2, #0
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	9305      	str	r3, [sp, #20]
 800e1d2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e1dc:	9303      	str	r3, [sp, #12]
 800e1de:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e1e2:	9302      	str	r3, [sp, #8]
 800e1e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e1e8:	e9cd 8300 	strd	r8, r3, [sp]
 800e1ec:	463b      	mov	r3, r7
 800e1ee:	47a8      	blx	r5
 800e1f0:	b00b      	add	sp, #44	@ 0x2c
 800e1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	bf00      	nop
 800e1f8:	24025266 	.word	0x24025266

0800e1fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e200:	4698      	mov	r8, r3
 800e202:	6803      	ldr	r3, [r0, #0]
 800e204:	b087      	sub	sp, #28
 800e206:	460e      	mov	r6, r1
 800e208:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800e20a:	4617      	mov	r7, r2
 800e20c:	4b0f      	ldr	r3, [pc, #60]	@ (800e24c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e20e:	4604      	mov	r4, r0
 800e210:	f8b3 9000 	ldrh.w	r9, [r3]
 800e214:	f7f5 fcfe 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e218:	6803      	ldr	r3, [r0, #0]
 800e21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21c:	4798      	blx	r3
 800e21e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800e222:	463a      	mov	r2, r7
 800e224:	4631      	mov	r1, r6
 800e226:	f8cd 900c 	str.w	r9, [sp, #12]
 800e22a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e22e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800e232:	4620      	mov	r0, r4
 800e234:	9302      	str	r3, [sp, #8]
 800e236:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e23a:	9301      	str	r3, [sp, #4]
 800e23c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	4643      	mov	r3, r8
 800e244:	47a8      	blx	r5
 800e246:	b007      	add	sp, #28
 800e248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e24c:	24025266 	.word	0x24025266

0800e250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	4604      	mov	r4, r0
 800e256:	b08f      	sub	sp, #60	@ 0x3c
 800e258:	4610      	mov	r0, r2
 800e25a:	460d      	mov	r5, r1
 800e25c:	4691      	mov	r9, r2
 800e25e:	461e      	mov	r6, r3
 800e260:	f008 fd7c 	bl	8016d5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e264:	2800      	cmp	r0, #0
 800e266:	f000 809d 	beq.w	800e3a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	4620      	mov	r0, r4
 800e26e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e272:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e278:	4798      	blx	r3
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	4620      	mov	r0, r4
 800e27e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e40c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e284:	4798      	blx	r3
 800e286:	f8bb 3000 	ldrh.w	r3, [fp]
 800e28a:	4f5c      	ldr	r7, [pc, #368]	@ (800e3fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	f8ba 3000 	ldrh.w	r3, [sl]
 800e292:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e296:	4640      	mov	r0, r8
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	883b      	ldrh	r3, [r7, #0]
 800e29c:	9303      	str	r3, [sp, #12]
 800e29e:	4b58      	ldr	r3, [pc, #352]	@ (800e400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e2a0:	881a      	ldrh	r2, [r3, #0]
 800e2a2:	9305      	str	r3, [sp, #20]
 800e2a4:	9204      	str	r2, [sp, #16]
 800e2a6:	f008 fea9 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e2aa:	8038      	strh	r0, [r7, #0]
 800e2ac:	4640      	mov	r0, r8
 800e2ae:	f008 fed9 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e2b2:	9b05      	ldr	r3, [sp, #20]
 800e2b4:	b280      	uxth	r0, r0
 800e2b6:	8018      	strh	r0, [r3, #0]
 800e2b8:	4b52      	ldr	r3, [pc, #328]	@ (800e404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d174      	bne.n	800e3aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e2c0:	883b      	ldrh	r3, [r7, #0]
 800e2c2:	f8aa 0000 	strh.w	r0, [sl]
 800e2c6:	f8ab 3000 	strh.w	r3, [fp]
 800e2ca:	4648      	mov	r0, r9
 800e2cc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800e2d0:	f008 fd44 	bl	8016d5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e2da:	4611      	mov	r1, r2
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e2e2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e2e6:	f7f5 fe64 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800e2f0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e2f4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	dd5c      	ble.n	800e3b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e2fc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd58      	ble.n	800e3b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e304:	462a      	mov	r2, r5
 800e306:	ab0a      	add	r3, sp, #40	@ 0x28
 800e308:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e30c:	6851      	ldr	r1, [r2, #4]
 800e30e:	c303      	stmia	r3!, {r0, r1}
 800e310:	4631      	mov	r1, r6
 800e312:	a80a      	add	r0, sp, #40	@ 0x28
 800e314:	f7ff fbc8 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 800e318:	4b38      	ldr	r3, [pc, #224]	@ (800e3fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e31a:	2100      	movs	r1, #0
 800e31c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e320:	4b37      	ldr	r3, [pc, #220]	@ (800e400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e322:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e326:	aa0a      	add	r2, sp, #40	@ 0x28
 800e328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e32c:	910c      	str	r1, [sp, #48]	@ 0x30
 800e32e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e332:	ab08      	add	r3, sp, #32
 800e334:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e338:	e883 0003 	stmia.w	r3, {r0, r1}
 800e33c:	4618      	mov	r0, r3
 800e33e:	a90c      	add	r1, sp, #48	@ 0x30
 800e340:	f7ff fbb2 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 800e344:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e346:	2b00      	cmp	r3, #0
 800e348:	d13c      	bne.n	800e3c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e34a:	2000      	movs	r0, #0
 800e34c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e350:	2600      	movs	r6, #0
 800e352:	696b      	ldr	r3, [r5, #20]
 800e354:	a908      	add	r1, sp, #32
 800e356:	682a      	ldr	r2, [r5, #0]
 800e358:	4628      	mov	r0, r5
 800e35a:	9305      	str	r3, [sp, #20]
 800e35c:	616e      	str	r6, [r5, #20]
 800e35e:	6892      	ldr	r2, [r2, #8]
 800e360:	4790      	blx	r2
 800e362:	9b05      	ldr	r3, [sp, #20]
 800e364:	4652      	mov	r2, sl
 800e366:	4649      	mov	r1, r9
 800e368:	616b      	str	r3, [r5, #20]
 800e36a:	4628      	mov	r0, r5
 800e36c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e370:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e374:	f7f5 fe1d 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	4b23      	ldr	r3, [pc, #140]	@ (800e408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e37c:	4620      	mov	r0, r4
 800e37e:	801a      	strh	r2, [r3, #0]
 800e380:	9a02      	ldr	r2, [sp, #8]
 800e382:	4b22      	ldr	r3, [pc, #136]	@ (800e40c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e384:	801a      	strh	r2, [r3, #0]
 800e386:	9a03      	ldr	r2, [sp, #12]
 800e388:	4b1c      	ldr	r3, [pc, #112]	@ (800e3fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e38a:	801a      	strh	r2, [r3, #0]
 800e38c:	4b1c      	ldr	r3, [pc, #112]	@ (800e400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e38e:	9a04      	ldr	r2, [sp, #16]
 800e390:	801a      	strh	r2, [r3, #0]
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e39a:	4798      	blx	r3
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	4620      	mov	r0, r4
 800e3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3a2:	4798      	blx	r3
 800e3a4:	b00f      	add	sp, #60	@ 0x3c
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	883b      	ldrh	r3, [r7, #0]
 800e3ac:	f8ab 0000 	strh.w	r0, [fp]
 800e3b0:	f8aa 3000 	strh.w	r3, [sl]
 800e3b4:	e789      	b.n	800e2ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e3b6:	462a      	mov	r2, r5
 800e3b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e3ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e3be:	6851      	ldr	r1, [r2, #4]
 800e3c0:	c303      	stmia	r3!, {r0, r1}
 800e3c2:	e7a9      	b.n	800e318 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e3c4:	a807      	add	r0, sp, #28
 800e3c6:	f008 ff8f 	bl	80172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e3ce:	6803      	ldr	r3, [r0, #0]
 800e3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3d2:	4798      	blx	r3
 800e3d4:	4286      	cmp	r6, r0
 800e3d6:	d1b8      	bne.n	800e34a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e3d8:	f7f5 fc1c 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e3dc:	6803      	ldr	r3, [r0, #0]
 800e3de:	4606      	mov	r6, r0
 800e3e0:	a807      	add	r0, sp, #28
 800e3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3e4:	9305      	str	r3, [sp, #20]
 800e3e6:	f008 ff7f 	bl	80172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e3ea:	9b05      	ldr	r3, [sp, #20]
 800e3ec:	4601      	mov	r1, r0
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4798      	blx	r3
 800e3f2:	f080 0001 	eor.w	r0, r0, #1
 800e3f6:	b2c0      	uxtb	r0, r0
 800e3f8:	e7a8      	b.n	800e34c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e3fa:	bf00      	nop
 800e3fc:	24025260 	.word	0x24025260
 800e400:	24025262 	.word	0x24025262
 800e404:	24025264 	.word	0x24025264
 800e408:	24025266 	.word	0x24025266
 800e40c:	24025268 	.word	0x24025268

0800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e410:	4b07      	ldr	r3, [pc, #28]	@ (800e430 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e412:	b510      	push	{r4, lr}
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	4604      	mov	r4, r0
 800e418:	b13b      	cbz	r3, 800e42a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e41a:	6803      	ldr	r3, [r0, #0]
 800e41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41e:	4798      	blx	r3
 800e420:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e422:	4283      	cmp	r3, r0
 800e424:	d101      	bne.n	800e42a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e426:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e428:	bd10      	pop	{r4, pc}
 800e42a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e42c:	e7fc      	b.n	800e428 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e42e:	bf00      	nop
 800e430:	2402526a 	.word	0x2402526a

0800e434 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	461d      	mov	r5, r3
 800e43a:	b08a      	sub	sp, #40	@ 0x28
 800e43c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e440:	4690      	mov	r8, r2
 800e442:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e446:	2400      	movs	r4, #0
 800e448:	4607      	mov	r7, r0
 800e44a:	fb06 8505 	mla	r5, r6, r5, r8
 800e44e:	9404      	str	r4, [sp, #16]
 800e450:	f88d 4020 	strb.w	r4, [sp, #32]
 800e454:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e458:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e45c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e460:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e464:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e468:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e46c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e470:	f7ff ffce 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e474:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e47e:	a901      	add	r1, sp, #4
 800e480:	9505      	str	r5, [sp, #20]
 800e482:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e486:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e48a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e48e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	4798      	blx	r3
 800e498:	b00a      	add	sp, #40	@ 0x28
 800e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e49e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4a2:	b08b      	sub	sp, #44	@ 0x2c
 800e4a4:	2400      	movs	r4, #0
 800e4a6:	4691      	mov	r9, r2
 800e4a8:	461d      	mov	r5, r3
 800e4aa:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e4ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e4b2:	4688      	mov	r8, r1
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	9404      	str	r4, [sp, #16]
 800e4b8:	fb06 9505 	mla	r5, r6, r5, r9
 800e4bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4c0:	f7ff ffa6 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e4c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e4c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4d2:	a901      	add	r1, sp, #4
 800e4d4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e4d8:	9505      	str	r5, [sp, #20]
 800e4da:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4de:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e4e2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e4e6:	f8cd 8010 	str.w	r8, [sp, #16]
 800e4ea:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e4ee:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e4f2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e4f6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e4fa:	6803      	ldr	r3, [r0, #0]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4798      	blx	r3
 800e500:	b00b      	add	sp, #44	@ 0x2c
 800e502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e508 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	b08a      	sub	sp, #40	@ 0x28
 800e50e:	4698      	mov	r8, r3
 800e510:	2300      	movs	r3, #0
 800e512:	4606      	mov	r6, r0
 800e514:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e518:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e51c:	2d0b      	cmp	r5, #11
 800e51e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e522:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e526:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	d137      	bne.n	800e59e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e52e:	2380      	movs	r3, #128	@ 0x80
 800e530:	f88d 0020 	strb.w	r0, [sp, #32]
 800e534:	4630      	mov	r0, r6
 800e536:	9203      	str	r2, [sp, #12]
 800e538:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e53c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e540:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e544:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e548:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e54c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e550:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e554:	f7ff ff5c 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e558:	2c0b      	cmp	r4, #11
 800e55a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e55e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e562:	bf94      	ite	ls
 800e564:	4b19      	ldrls	r3, [pc, #100]	@ (800e5cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e566:	2100      	movhi	r1, #0
 800e568:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e56c:	bf98      	it	ls
 800e56e:	5d19      	ldrbls	r1, [r3, r4]
 800e570:	fb02 8307 	mla	r3, r2, r7, r8
 800e574:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e578:	10c9      	asrs	r1, r1, #3
 800e57a:	fb01 0003 	mla	r0, r1, r3, r0
 800e57e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e582:	a901      	add	r1, sp, #4
 800e584:	9005      	str	r0, [sp, #20]
 800e586:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e58a:	2300      	movs	r3, #0
 800e58c:	6870      	ldr	r0, [r6, #4]
 800e58e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e592:	6803      	ldr	r3, [r0, #0]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	4798      	blx	r3
 800e598:	b00a      	add	sp, #40	@ 0x28
 800e59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59e:	2d02      	cmp	r5, #2
 800e5a0:	d109      	bne.n	800e5b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e5a2:	28ff      	cmp	r0, #255	@ 0xff
 800e5a4:	d105      	bne.n	800e5b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e5a6:	f1bc 0f00 	cmp.w	ip, #0
 800e5aa:	bf14      	ite	ne
 800e5ac:	2340      	movne	r3, #64	@ 0x40
 800e5ae:	2320      	moveq	r3, #32
 800e5b0:	e7be      	b.n	800e530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e5b2:	2340      	movs	r3, #64	@ 0x40
 800e5b4:	e7bc      	b.n	800e530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e5b6:	28ff      	cmp	r0, #255	@ 0xff
 800e5b8:	d105      	bne.n	800e5c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e5ba:	f1bc 0f00 	cmp.w	ip, #0
 800e5be:	bf14      	ite	ne
 800e5c0:	2304      	movne	r3, #4
 800e5c2:	2301      	moveq	r3, #1
 800e5c4:	e7b4      	b.n	800e530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e5c6:	2304      	movs	r3, #4
 800e5c8:	e7b2      	b.n	800e530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e5ca:	bf00      	nop
 800e5cc:	08026310 	.word	0x08026310

0800e5d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	b08b      	sub	sp, #44	@ 0x2c
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	2400      	movs	r4, #0
 800e5da:	4688      	mov	r8, r1
 800e5dc:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e5e0:	4693      	mov	fp, r2
 800e5e2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e5ec:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e5f0:	9404      	str	r4, [sp, #16]
 800e5f2:	bf14      	ite	ne
 800e5f4:	2308      	movne	r3, #8
 800e5f6:	2302      	moveq	r3, #2
 800e5f8:	fb05 b50a 	mla	r5, r5, sl, fp
 800e5fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e600:	f7ff ff06 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e604:	2e0b      	cmp	r6, #11
 800e606:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e60a:	a901      	add	r1, sp, #4
 800e60c:	bf98      	it	ls
 800e60e:	4b13      	ldrls	r3, [pc, #76]	@ (800e65c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e610:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e614:	bf98      	it	ls
 800e616:	5d9c      	ldrbls	r4, [r3, r6]
 800e618:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e61c:	10e4      	asrs	r4, r4, #3
 800e61e:	f8cd 8010 	str.w	r8, [sp, #16]
 800e622:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e626:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e62a:	fb04 0405 	mla	r4, r4, r5, r0
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e634:	2300      	movs	r3, #0
 800e636:	9405      	str	r4, [sp, #20]
 800e638:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e63c:	f88d 9020 	strb.w	r9, [sp, #32]
 800e640:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e644:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e648:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e64c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e650:	6803      	ldr	r3, [r0, #0]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	4798      	blx	r3
 800e656:	b00b      	add	sp, #44	@ 0x2c
 800e658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65c:	08026310 	.word	0x08026310

0800e660 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	461e      	mov	r6, r3
 800e666:	4b0a      	ldr	r3, [pc, #40]	@ (800e690 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e668:	460f      	mov	r7, r1
 800e66a:	4690      	mov	r8, r2
 800e66c:	881d      	ldrh	r5, [r3, #0]
 800e66e:	f7f5 fad1 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e672:	6803      	ldr	r3, [r0, #0]
 800e674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e676:	4798      	blx	r3
 800e678:	280b      	cmp	r0, #11
 800e67a:	bf96      	itet	ls
 800e67c:	4b05      	ldrls	r3, [pc, #20]	@ (800e694 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e67e:	2400      	movhi	r4, #0
 800e680:	5c1c      	ldrbls	r4, [r3, r0]
 800e682:	fb08 7005 	mla	r0, r8, r5, r7
 800e686:	10e4      	asrs	r4, r4, #3
 800e688:	fb04 6000 	mla	r0, r4, r0, r6
 800e68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e690:	24025266 	.word	0x24025266
 800e694:	08026310 	.word	0x08026310

0800e698 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e69a:	b08b      	sub	sp, #44	@ 0x2c
 800e69c:	461f      	mov	r7, r3
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4616      	mov	r6, r2
 800e6a2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e6a6:	2500      	movs	r5, #0
 800e6a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e6ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e6b0:	9504      	str	r5, [sp, #16]
 800e6b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e6b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e6ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e6be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e6c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e6c6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e6ca:	f88d 3020 	strb.w	r3, [sp, #32]
 800e6ce:	f7ff fe9f 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e6d2:	463a      	mov	r2, r7
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7ff ffc1 	bl	800e660 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e6de:	4b0e      	ldr	r3, [pc, #56]	@ (800e718 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e6e0:	9005      	str	r0, [sp, #20]
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e6e8:	f7f5 fa94 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e6ec:	6803      	ldr	r3, [r0, #0]
 800e6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f0:	4798      	blx	r3
 800e6f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6f4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e6f8:	a901      	add	r1, sp, #4
 800e6fa:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e6fe:	9304      	str	r3, [sp, #16]
 800e700:	6860      	ldr	r0, [r4, #4]
 800e702:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e706:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e70a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e70e:	6803      	ldr	r3, [r0, #0]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	4798      	blx	r3
 800e714:	b00b      	add	sp, #44	@ 0x2c
 800e716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e718:	24025266 	.word	0x24025266

0800e71c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e71e:	b08d      	sub	sp, #52	@ 0x34
 800e720:	2501      	movs	r5, #1
 800e722:	4604      	mov	r4, r0
 800e724:	466b      	mov	r3, sp
 800e726:	9503      	str	r5, [sp, #12]
 800e728:	e883 0006 	stmia.w	r3, {r1, r2}
 800e72c:	2300      	movs	r3, #0
 800e72e:	f8bd 6000 	ldrh.w	r6, [sp]
 800e732:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e736:	9306      	str	r3, [sp, #24]
 800e738:	6803      	ldr	r3, [r0, #0]
 800e73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e73c:	4798      	blx	r3
 800e73e:	463a      	mov	r2, r7
 800e740:	4631      	mov	r1, r6
 800e742:	4603      	mov	r3, r0
 800e744:	4620      	mov	r0, r4
 800e746:	f7ff ff8b 	bl	800e660 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e74a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e74c:	9004      	str	r0, [sp, #16]
 800e74e:	9307      	str	r3, [sp, #28]
 800e750:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e754:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e758:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e75c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e760:	4b0e      	ldr	r3, [pc, #56]	@ (800e79c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e762:	881b      	ldrh	r3, [r3, #0]
 800e764:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e768:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e76c:	f7f5 fa52 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e770:	6803      	ldr	r3, [r0, #0]
 800e772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e774:	4798      	blx	r3
 800e776:	23ff      	movs	r3, #255	@ 0xff
 800e778:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e77c:	a903      	add	r1, sp, #12
 800e77e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e782:	6860      	ldr	r0, [r4, #4]
 800e784:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e788:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e78c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e790:	6803      	ldr	r3, [r0, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	4798      	blx	r3
 800e796:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e798:	b00d      	add	sp, #52	@ 0x34
 800e79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e79c:	24025266 	.word	0x24025266

0800e7a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a4:	b08c      	sub	sp, #48	@ 0x30
 800e7a6:	461e      	mov	r6, r3
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	466d      	mov	r5, sp
 800e7ae:	9306      	str	r3, [sp, #24]
 800e7b0:	6803      	ldr	r3, [r0, #0]
 800e7b2:	e885 0006 	stmia.w	r5, {r1, r2}
 800e7b6:	2501      	movs	r5, #1
 800e7b8:	f8bd 7000 	ldrh.w	r7, [sp]
 800e7bc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e7c0:	9503      	str	r5, [sp, #12]
 800e7c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7c4:	4798      	blx	r3
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff ff47 	bl	800e660 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e7d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e7d6:	9004      	str	r0, [sp, #16]
 800e7d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e7dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e7e0:	9607      	str	r6, [sp, #28]
 800e7e2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e7e6:	4b10      	ldr	r3, [pc, #64]	@ (800e828 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e7ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7f0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e7f4:	f7f5 fa0e 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 800e7f8:	6803      	ldr	r3, [r0, #0]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7fc:	4798      	blx	r3
 800e7fe:	23ff      	movs	r3, #255	@ 0xff
 800e800:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e804:	a903      	add	r1, sp, #12
 800e806:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e80a:	6860      	ldr	r0, [r4, #4]
 800e80c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e810:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e814:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e818:	6803      	ldr	r3, [r0, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	4798      	blx	r3
 800e81e:	4630      	mov	r0, r6
 800e820:	b00c      	add	sp, #48	@ 0x30
 800e822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e826:	bf00      	nop
 800e828:	24025266 	.word	0x24025266

0800e82c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82e:	b085      	sub	sp, #20
 800e830:	4605      	mov	r5, r0
 800e832:	ac02      	add	r4, sp, #8
 800e834:	e884 0006 	stmia.w	r4, {r1, r2}
 800e838:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e83c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e840:	f7ff fde6 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e844:	4631      	mov	r1, r6
 800e846:	4603      	mov	r3, r0
 800e848:	463a      	mov	r2, r7
 800e84a:	4628      	mov	r0, r5
 800e84c:	f7ff ff08 	bl	800e660 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e850:	4a05      	ldr	r2, [pc, #20]	@ (800e868 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	8812      	ldrh	r2, [r2, #0]
 800e856:	9200      	str	r2, [sp, #0]
 800e858:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800e85a:	4603      	mov	r3, r0
 800e85c:	4628      	mov	r0, r5
 800e85e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e862:	47b0      	blx	r6
 800e864:	b005      	add	sp, #20
 800e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e868:	24025266 	.word	0x24025266

0800e86c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e872:	4604      	mov	r4, r0
 800e874:	b19b      	cbz	r3, 800e89e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e876:	2002      	movs	r0, #2
 800e878:	f7f3 f89a 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e87c:	2300      	movs	r3, #0
 800e87e:	4620      	mov	r0, r4
 800e880:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e884:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800e88e:	f7ff fdbf 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e892:	4601      	mov	r1, r0
 800e894:	4620      	mov	r0, r4
 800e896:	462b      	mov	r3, r5
 800e898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e89c:	4718      	bx	r3
 800e89e:	bd70      	pop	{r4, r5, r6, pc}

0800e8a0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	2003      	movs	r0, #3
 800e8a8:	b149      	cbz	r1, 800e8be <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e8aa:	f7f3 f821 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e8ae:	6928      	ldr	r0, [r5, #16]
 800e8b0:	b168      	cbz	r0, 800e8ce <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e8b2:	6803      	ldr	r3, [r0, #0]
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8bc:	4718      	bx	r3
 800e8be:	f7f3 f847 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e8c2:	6928      	ldr	r0, [r5, #16]
 800e8c4:	b118      	cbz	r0, 800e8ce <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e8c6:	6803      	ldr	r3, [r0, #0]
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	e7f4      	b.n	800e8b8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}

0800e8d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	428b      	cmp	r3, r1
 800e8dc:	d006      	beq.n	800e8ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	b929      	cbnz	r1, 800e8ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e8e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e8e6:	4798      	blx	r3
 800e8e8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e8f2:	e7f8      	b.n	800e8e6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e8f4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e928 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	b953      	cbnz	r3, 800e914 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e8fe:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e902:	b93b      	cbnz	r3, 800e914 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e904:	6840      	ldr	r0, [r0, #4]
 800e906:	f000 f919 	bl	800eb3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e90a:	b118      	cbz	r0, 800e914 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e90c:	6862      	ldr	r2, [r4, #4]
 800e90e:	7a53      	ldrb	r3, [r2, #9]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0fc      	beq.n	800e90e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800e914:	f7f4 f866 	bl	80029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e918:	4620      	mov	r0, r4
 800e91a:	2100      	movs	r1, #0
 800e91c:	f7ff ffd8 	bl	800e8d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e920:	4620      	mov	r0, r4
 800e922:	f7ff fd75 	bl	800e410 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e926:	bd10      	pop	{r4, pc}
 800e928:	2402526a 	.word	0x2402526a

0800e92c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4604      	mov	r4, r0
 800e930:	6803      	ldr	r3, [r0, #0]
 800e932:	b919      	cbnz	r1, 800e93c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e93a:	4718      	bx	r3
 800e93c:	2200      	movs	r2, #0
 800e93e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800e942:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800e946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e948:	4798      	blx	r3
 800e94a:	6863      	ldr	r3, [r4, #4]
 800e94c:	2101      	movs	r1, #1
 800e94e:	4605      	mov	r5, r0
 800e950:	4620      	mov	r0, r4
 800e952:	7299      	strb	r1, [r3, #10]
 800e954:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800e958:	f7ff ffba 	bl	800e8d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e95c:	4628      	mov	r0, r5
 800e95e:	bd70      	pop	{r4, r5, r6, pc}

0800e960 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e960:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e964:	1a13      	subs	r3, r2, r0
 800e966:	4258      	negs	r0, r3
 800e968:	4158      	adcs	r0, r3
 800e96a:	4770      	bx	lr

0800e96c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e96c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	2b00      	cmp	r3, #0
 800e974:	bfdc      	itt	le
 800e976:	6882      	ldrle	r2, [r0, #8]
 800e978:	189b      	addle	r3, r3, r2
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	bfcc      	ite	gt
 800e97e:	2000      	movgt	r0, #0
 800e980:	2001      	movle	r0, #1
 800e982:	4770      	bx	lr

0800e984 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e984:	6902      	ldr	r2, [r0, #16]
 800e986:	6843      	ldr	r3, [r0, #4]
 800e988:	2024      	movs	r0, #36	@ 0x24
 800e98a:	fb00 3002 	mla	r0, r0, r2, r3
 800e98e:	4770      	bx	lr

0800e990 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e990:	6803      	ldr	r3, [r0, #0]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	4718      	bx	r3

0800e996 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e996:	2301      	movs	r3, #1
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	7203      	strb	r3, [r0, #8]
 800e99c:	4604      	mov	r4, r0
 800e99e:	6840      	ldr	r0, [r0, #4]
 800e9a0:	6803      	ldr	r3, [r0, #0]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	4798      	blx	r3
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	2b40      	cmp	r3, #64	@ 0x40
 800e9ac:	d00c      	beq.n	800e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e9ae:	d810      	bhi.n	800e9d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e9b0:	2b04      	cmp	r3, #4
 800e9b2:	d01d      	beq.n	800e9f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e9b4:	d804      	bhi.n	800e9c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d006      	beq.n	800e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d02c      	beq.n	800ea18 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	2b08      	cmp	r3, #8
 800e9c2:	d01d      	beq.n	800ea00 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e9c4:	2b20      	cmp	r3, #32
 800e9c6:	d1fa      	bne.n	800e9be <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9ce:	4798      	blx	r3
 800e9d0:	e013      	b.n	800e9fa <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e9d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9d6:	d0f7      	beq.n	800e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e9d8:	d804      	bhi.n	800e9e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e9da:	2b80      	cmp	r3, #128	@ 0x80
 800e9dc:	d0f4      	beq.n	800e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e9de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9e2:	e7f0      	b.n	800e9c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e9e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9e8:	d0ee      	beq.n	800e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e9ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9ee:	e7e5      	b.n	800e9bc <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	7f01      	ldrb	r1, [r0, #28]
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9f8:	4798      	blx	r3
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9fe:	e006      	b.n	800ea0e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	7f01      	ldrb	r1, [r0, #28]
 800ea04:	4620      	mov	r0, r4
 800ea06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea08:	4798      	blx	r3
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea0e:	4629      	mov	r1, r5
 800ea10:	4620      	mov	r0, r4
 800ea12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea16:	4718      	bx	r3
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea1e:	4798      	blx	r3
 800ea20:	e7f3      	b.n	800ea0a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800ea22 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ea22:	4770      	bx	lr

0800ea24 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ea24:	4770      	bx	lr

0800ea26 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800ea26:	4770      	bx	lr

0800ea28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ea28:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	1ad2      	subs	r2, r2, r3
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	bfdc      	itt	le
 800ea34:	6884      	ldrle	r4, [r0, #8]
 800ea36:	1912      	addle	r2, r2, r4
 800ea38:	2a01      	cmp	r2, #1
 800ea3a:	dd16      	ble.n	800ea6a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800ea3c:	6842      	ldr	r2, [r0, #4]
 800ea3e:	2424      	movs	r4, #36	@ 0x24
 800ea40:	fb04 2303 	mla	r3, r4, r3, r2
 800ea44:	f101 0220 	add.w	r2, r1, #32
 800ea48:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea4c:	4291      	cmp	r1, r2
 800ea4e:	f843 4b04 	str.w	r4, [r3], #4
 800ea52:	d1f9      	bne.n	800ea48 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ea54:	780a      	ldrb	r2, [r1, #0]
 800ea56:	701a      	strb	r2, [r3, #0]
 800ea58:	68c3      	ldr	r3, [r0, #12]
 800ea5a:	6882      	ldr	r2, [r0, #8]
 800ea5c:	f3bf 8f5b 	dmb	ish
 800ea60:	3301      	adds	r3, #1
 800ea62:	429a      	cmp	r2, r3
 800ea64:	bfd8      	it	le
 800ea66:	1a9b      	suble	r3, r3, r2
 800ea68:	60c3      	str	r3, [r0, #12]
 800ea6a:	bd10      	pop	{r4, pc}

0800ea6c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ea6c:	6903      	ldr	r3, [r0, #16]
 800ea6e:	6882      	ldr	r2, [r0, #8]
 800ea70:	f3bf 8f5b 	dmb	ish
 800ea74:	3301      	adds	r3, #1
 800ea76:	429a      	cmp	r2, r3
 800ea78:	bfd8      	it	le
 800ea7a:	1a9b      	suble	r3, r3, r2
 800ea7c:	6103      	str	r3, [r0, #16]
 800ea7e:	4770      	bx	lr

0800ea80 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	4604      	mov	r4, r0
 800ea84:	460e      	mov	r6, r1
 800ea86:	6860      	ldr	r0, [r4, #4]
 800ea88:	6803      	ldr	r3, [r0, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	4798      	blx	r3
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d1f9      	bne.n	800ea86 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ea92:	4d0d      	ldr	r5, [pc, #52]	@ (800eac8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ea94:	6828      	ldr	r0, [r5, #0]
 800ea96:	6803      	ldr	r3, [r0, #0]
 800ea98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea9c:	4798      	blx	r3
 800ea9e:	f7f3 ffaf 	bl	8002a00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800eaa2:	6828      	ldr	r0, [r5, #0]
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	f7ff ff13 	bl	800e8d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800eaaa:	6860      	ldr	r0, [r4, #4]
 800eaac:	4631      	mov	r1, r6
 800eaae:	6803      	ldr	r3, [r0, #0]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	4798      	blx	r3
 800eab4:	6823      	ldr	r3, [r4, #0]
 800eab6:	4620      	mov	r0, r4
 800eab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaba:	4798      	blx	r3
 800eabc:	6828      	ldr	r0, [r5, #0]
 800eabe:	6803      	ldr	r3, [r0, #0]
 800eac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eac6:	4718      	bx	r3
 800eac8:	2402526c 	.word	0x2402526c

0800eacc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800eacc:	b508      	push	{r3, lr}
 800eace:	f7f3 ff89 	bl	80029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ead2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ead6:	f7f3 bf8d 	b.w	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800eada <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800eada:	b510      	push	{r4, lr}
 800eadc:	4604      	mov	r4, r0
 800eade:	2114      	movs	r1, #20
 800eae0:	f013 f887 	bl	8021bf2 <_ZdlPvj>
 800eae4:	4620      	mov	r0, r4
 800eae6:	bd10      	pop	{r4, pc}

0800eae8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	4604      	mov	r4, r0
 800eaec:	6840      	ldr	r0, [r0, #4]
 800eaee:	6803      	ldr	r3, [r0, #0]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4798      	blx	r3
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	b930      	cbnz	r0, 800eb06 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800eaf8:	7a23      	ldrb	r3, [r4, #8]
 800eafa:	b123      	cbz	r3, 800eb06 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800eafc:	6860      	ldr	r0, [r4, #4]
 800eafe:	6803      	ldr	r3, [r0, #0]
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	4798      	blx	r3
 800eb04:	7225      	strb	r5, [r4, #8]
 800eb06:	6860      	ldr	r0, [r4, #4]
 800eb08:	6803      	ldr	r3, [r0, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4798      	blx	r3
 800eb0e:	b928      	cbnz	r0, 800eb1c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	4620      	mov	r0, r4
 800eb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb1a:	4718      	bx	r3
 800eb1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb20:	f7f3 bf76 	b.w	8002a10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800eb24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	6082      	str	r2, [r0, #8]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4c03      	ldr	r4, [pc, #12]	@ (800eb38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800eb2c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800eb30:	e9c0 4100 	strd	r4, r1, [r0]
 800eb34:	bd10      	pop	{r4, pc}
 800eb36:	bf00      	nop
 800eb38:	08026324 	.word	0x08026324

0800eb3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800eb3c:	6840      	ldr	r0, [r0, #4]
 800eb3e:	6803      	ldr	r3, [r0, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4718      	bx	r3

0800eb44 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800eb44:	2300      	movs	r3, #0
 800eb46:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800eb48:	8503      	strh	r3, [r0, #40]	@ 0x28
 800eb4a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800eb4c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800eb4e:	6980      	ldr	r0, [r0, #24]
 800eb50:	b110      	cbz	r0, 800eb58 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800eb52:	6803      	ldr	r3, [r0, #0]
 800eb54:	691b      	ldr	r3, [r3, #16]
 800eb56:	4718      	bx	r3
 800eb58:	4770      	bx	lr

0800eb5a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800eb5a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800eb5e:	4770      	bx	lr

0800eb60 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	0e0b      	lsrs	r3, r1, #24
 800eb64:	4604      	mov	r4, r0
 800eb66:	460d      	mov	r5, r1
 800eb68:	7783      	strb	r3, [r0, #30]
 800eb6a:	6803      	ldr	r3, [r0, #0]
 800eb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb6e:	4798      	blx	r3
 800eb70:	6803      	ldr	r3, [r0, #0]
 800eb72:	4629      	mov	r1, r5
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	4798      	blx	r3
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb7e:	4798      	blx	r3
 800eb80:	61a0      	str	r0, [r4, #24]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}

0800eb84 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800eb84:	7741      	strb	r1, [r0, #29]
 800eb86:	4770      	bx	lr

0800eb88 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800eb88:	b530      	push	{r4, r5, lr}
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800eb90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb98:	682b      	ldr	r3, [r5, #0]
 800eb9a:	6023      	str	r3, [r4, #0]
 800eb9c:	bd30      	pop	{r4, r5, pc}

0800eb9e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800eb9e:	b538      	push	{r3, r4, r5, lr}
 800eba0:	4604      	mov	r4, r0
 800eba2:	1d03      	adds	r3, r0, #4
 800eba4:	6808      	ldr	r0, [r1, #0]
 800eba6:	2500      	movs	r5, #0
 800eba8:	6849      	ldr	r1, [r1, #4]
 800ebaa:	c303      	stmia	r3!, {r0, r1}
 800ebac:	6813      	ldr	r3, [r2, #0]
 800ebae:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ebb2:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800ebb6:	6853      	ldr	r3, [r2, #4]
 800ebb8:	61a5      	str	r5, [r4, #24]
 800ebba:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800ebbe:	f006 f927 	bl	8014e10 <_ZN8touchgfx9Matrix3x35resetEv>
 800ebc2:	23ff      	movs	r3, #255	@ 0xff
 800ebc4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800ebc8:	7763      	strb	r3, [r4, #29]
 800ebca:	77a3      	strb	r3, [r4, #30]
 800ebcc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ebd0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ebdc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800ebdc:	ee70 7a41 	vsub.f32	s15, s0, s2
 800ebe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebe4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebe8:	4605      	mov	r5, r0
 800ebea:	ed2d 8b0a 	vpush	{d8-d12}
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	eef0 9a40 	vmov.f32	s19, s0
 800ebf8:	6802      	ldr	r2, [r0, #0]
 800ebfa:	eeb0 aa60 	vmov.f32	s20, s1
 800ebfe:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800ec02:	eeb0 9a41 	vmov.f32	s18, s2
 800ec06:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800ec08:	eef0 8a61 	vmov.f32	s17, s3
 800ec0c:	eeb0 ca42 	vmov.f32	s24, s4
 800ec10:	eef0 ca62 	vmov.f32	s25, s5
 800ec14:	d112      	bne.n	800ec3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ec16:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800ec1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec22:	d10b      	bne.n	800ec3c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ec24:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800ec28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ec2a:	3901      	subs	r1, #1
 800ec2c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ec30:	b007      	add	sp, #28
 800ec32:	ecbd 8b0a 	vpop	{d8-d12}
 800ec36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec3a:	4710      	bx	r2
 800ec3c:	23ff      	movs	r3, #255	@ 0xff
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800ec44:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 800ef0c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 800ec48:	77ab      	strb	r3, [r5, #30]
 800ec4a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ec4c:	4798      	blx	r3
 800ec4e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800ec52:	eeb0 0a69 	vmov.f32	s0, s19
 800ec56:	4604      	mov	r4, r0
 800ec58:	80c3      	strh	r3, [r0, #6]
 800ec5a:	eef0 0a4a 	vmov.f32	s1, s20
 800ec5e:	4640      	mov	r0, r8
 800ec60:	f006 f985 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ec64:	eeb0 ba40 	vmov.f32	s22, s0
 800ec68:	ed8d 0a00 	vstr	s0, [sp]
 800ec6c:	eeb0 0a49 	vmov.f32	s0, s18
 800ec70:	eef0 ba60 	vmov.f32	s23, s1
 800ec74:	edcd 0a01 	vstr	s1, [sp, #4]
 800ec78:	4640      	mov	r0, r8
 800ec7a:	eef0 0a68 	vmov.f32	s1, s17
 800ec7e:	f006 f976 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ec82:	eeb4 ba40 	vcmp.f32	s22, s0
 800ec86:	eeb0 8a40 	vmov.f32	s16, s0
 800ec8a:	ed8d 0a02 	vstr	s0, [sp, #8]
 800ec8e:	eef0 aa60 	vmov.f32	s21, s1
 800ec92:	edcd 0a03 	vstr	s1, [sp, #12]
 800ec96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9a:	eef4 ba60 	vcmp.f32	s23, s1
 800ec9e:	bf0c      	ite	eq
 800eca0:	2301      	moveq	r3, #1
 800eca2:	2300      	movne	r3, #0
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	eeb4 ba40 	vcmp.f32	s22, s0
 800ecac:	7463      	strb	r3, [r4, #17]
 800ecae:	bf0c      	ite	eq
 800ecb0:	2301      	moveq	r3, #1
 800ecb2:	2300      	movne	r3, #0
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	74a3      	strb	r3, [r4, #18]
 800ecba:	d031      	beq.n	800ed20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800ecbc:	eef4 ba60 	vcmp.f32	s23, s1
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	d02c      	beq.n	800ed20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800ecc6:	ee39 9a69 	vsub.f32	s18, s18, s19
 800ecca:	4640      	mov	r0, r8
 800eccc:	ee78 8aca 	vsub.f32	s17, s17, s20
 800ecd0:	eef0 0a4a 	vmov.f32	s1, s20
 800ecd4:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 800ecd8:	eec8 7aac 	vdiv.f32	s15, s17, s25
 800ecdc:	eeb0 0a69 	vmov.f32	s0, s19
 800ece0:	eeec 0a87 	vfma.f32	s1, s25, s14
 800ece4:	eea7 0acc 	vfms.f32	s0, s15, s24
 800ece8:	f006 f941 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ecec:	f899 3000 	ldrb.w	r3, [r9]
 800ecf0:	edcd 0a05 	vstr	s1, [sp, #20]
 800ecf4:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	bf08      	it	eq
 800ecfc:	eef1 7a60 	vnegeq.f32	s15, s1
 800ed00:	ed8d 0a04 	vstr	s0, [sp, #16]
 800ed04:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800ed08:	bf04      	itt	eq
 800ed0a:	eef0 0a40 	vmoveq.f32	s1, s0
 800ed0e:	eeb0 0a67 	vmoveq.f32	s0, s15
 800ed12:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ed16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1a:	d135      	bne.n	800ed88 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	74a3      	strb	r3, [r4, #18]
 800ed20:	f899 2000 	ldrb.w	r2, [r9]
 800ed24:	7c63      	ldrb	r3, [r4, #17]
 800ed26:	2a01      	cmp	r2, #1
 800ed28:	f040 80a3 	bne.w	800ee72 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d073      	beq.n	800ee18 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 800ed30:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800ed34:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800ef04 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ed38:	eef4 baea 	vcmpe.f32	s23, s21
 800ed3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	edc4 7a08 	vstr	s15, [r4, #32]
 800ed48:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800ed4c:	ee17 3a90 	vmov	r3, s15
 800ed50:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800ed54:	b21a      	sxth	r2, r3
 800ed56:	ee17 3a90 	vmov	r3, s15
 800ed5a:	bf48      	it	mi
 800ed5c:	8162      	strhmi	r2, [r4, #10]
 800ed5e:	b21b      	sxth	r3, r3
 800ed60:	bf56      	itet	pl
 800ed62:	8122      	strhpl	r2, [r4, #8]
 800ed64:	8123      	strhmi	r3, [r4, #8]
 800ed66:	8163      	strhpl	r3, [r4, #10]
 800ed68:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800ed6c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ed70:	1a9b      	subs	r3, r3, r2
 800ed72:	ee07 3a90 	vmov	s15, r3
 800ed76:	2300      	movs	r3, #0
 800ed78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed7c:	7463      	strb	r3, [r4, #17]
 800ed7e:	2301      	movs	r3, #1
 800ed80:	edc4 7a07 	vstr	s15, [r4, #28]
 800ed84:	74a3      	strb	r3, [r4, #18]
 800ed86:	e03f      	b.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ed88:	ee80 7a80 	vdiv.f32	s14, s1, s0
 800ed8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ed90:	ed84 7a05 	vstr	s14, [r4, #20]
 800ed94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed98:	d102      	bne.n	800eda0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	7463      	strb	r3, [r4, #17]
 800ed9e:	e7bf      	b.n	800ed20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	ee38 8a4b 	vsub.f32	s16, s16, s22
 800eda6:	ee7a aaeb 	vsub.f32	s21, s21, s23
 800edaa:	bf0b      	itete	eq
 800edac:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 800edb0:	eef0 7a6b 	vmovne.f32	s15, s23
 800edb4:	ee07 2a90 	vmoveq	s15, r2
 800edb8:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 800edbc:	bf02      	ittt	eq
 800edbe:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 800edc2:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 800edc6:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 800edca:	2b01      	cmp	r3, #1
 800edcc:	edc4 7a06 	vstr	s15, [r4, #24]
 800edd0:	bf02      	ittt	eq
 800edd2:	eef1 7a48 	vnegeq.f32	s15, s16
 800edd6:	eeb0 8a6a 	vmoveq.f32	s16, s21
 800edda:	eef0 aa67 	vmoveq.f32	s21, s15
 800edde:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800ede2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ef08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 800ede6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800edea:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800edee:	ed84 8a07 	vstr	s16, [r4, #28]
 800edf2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfa:	edc4 7a08 	vstr	s15, [r4, #32]
 800edfe:	d503      	bpl.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ee00:	eeb1 8a48 	vneg.f32	s16, s16
 800ee04:	ed84 8a07 	vstr	s16, [r4, #28]
 800ee08:	60e7      	str	r7, [r4, #12]
 800ee0a:	7426      	strb	r6, [r4, #16]
 800ee0c:	61ac      	str	r4, [r5, #24]
 800ee0e:	b007      	add	sp, #28
 800ee10:	ecbd 8b0a 	vpop	{d8-d12}
 800ee14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee18:	7ca3      	ldrb	r3, [r4, #18]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d0f4      	beq.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ee1e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ee22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ef04 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ee26:	ee00 3a10 	vmov	s0, r3
 800ee2a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ee2e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ee32:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800ee36:	ee38 7a40 	vsub.f32	s14, s16, s0
 800ee3a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800ee3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee46:	edc4 7a08 	vstr	s15, [r4, #32]
 800ee4a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ee4e:	ee17 3a90 	vmov	r3, s15
 800ee52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ee56:	b21a      	sxth	r2, r3
 800ee58:	ee17 3a90 	vmov	r3, s15
 800ee5c:	bfc8      	it	gt
 800ee5e:	8162      	strhgt	r2, [r4, #10]
 800ee60:	b21b      	sxth	r3, r3
 800ee62:	bfd6      	itet	le
 800ee64:	8122      	strhle	r2, [r4, #8]
 800ee66:	8123      	strhgt	r3, [r4, #8]
 800ee68:	8163      	strhle	r3, [r4, #10]
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	7463      	strb	r3, [r4, #17]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e788      	b.n	800ed84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 800ee72:	b1e3      	cbz	r3, 800eeae <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 800ee74:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800ee78:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800ef04 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ee7c:	eef4 baea 	vcmpe.f32	s23, s21
 800ee80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee88:	edc4 7a08 	vstr	s15, [r4, #32]
 800ee8c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800ee90:	ee17 3a90 	vmov	r3, s15
 800ee94:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800ee98:	b21a      	sxth	r2, r3
 800ee9a:	ee17 3a90 	vmov	r3, s15
 800ee9e:	bf48      	it	mi
 800eea0:	8162      	strhmi	r2, [r4, #10]
 800eea2:	b21b      	sxth	r3, r3
 800eea4:	bf56      	itet	pl
 800eea6:	8122      	strhpl	r2, [r4, #8]
 800eea8:	8123      	strhmi	r3, [r4, #8]
 800eeaa:	8163      	strhpl	r3, [r4, #10]
 800eeac:	e7ac      	b.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800eeae:	7ca3      	ldrb	r3, [r4, #18]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0a9      	beq.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800eeb4:	ee38 7a4b 	vsub.f32	s14, s16, s22
 800eeb8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ef04 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800eebc:	eeb4 bac8 	vcmpe.f32	s22, s16
 800eec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec8:	edc4 7a08 	vstr	s15, [r4, #32]
 800eecc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800eed0:	ee17 3a90 	vmov	r3, s15
 800eed4:	eefd 7acb 	vcvt.s32.f32	s15, s22
 800eed8:	b21a      	sxth	r2, r3
 800eeda:	ee17 3a90 	vmov	r3, s15
 800eede:	bf48      	it	mi
 800eee0:	8162      	strhmi	r2, [r4, #10]
 800eee2:	b21b      	sxth	r3, r3
 800eee4:	bf56      	itet	pl
 800eee6:	8122      	strhpl	r2, [r4, #8]
 800eee8:	8123      	strhmi	r3, [r4, #8]
 800eeea:	8163      	strhpl	r3, [r4, #10]
 800eeec:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800eef0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800eef4:	1a9b      	subs	r3, r3, r2
 800eef6:	ee07 3a90 	vmov	s15, r3
 800eefa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eefe:	edc4 7a07 	vstr	s15, [r4, #28]
 800ef02:	e781      	b.n	800ee08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ef04:	447ffffe 	.word	0x447ffffe
 800ef08:	44800000 	.word	0x44800000
 800ef0c:	24025264 	.word	0x24025264

0800ef10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	ed2d 8b02 	vpush	{d8}
 800ef16:	eef0 8a62 	vmov.f32	s17, s5
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	eeb0 8a42 	vmov.f32	s16, s4
 800ef22:	f012 fbf7 	bl	8021714 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800ef26:	eef0 7a68 	vmov.f32	s15, s17
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef34:	ee17 2a90 	vmov	r2, s15
 800ef38:	eef0 7a48 	vmov.f32	s15, s16
 800ef3c:	ecbd 8b02 	vpop	{d8}
 800ef40:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef48:	ee17 1a90 	vmov	r1, s15
 800ef4c:	4718      	bx	r3

0800ef4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800ef4e:	b510      	push	{r4, lr}
 800ef50:	ed2d 8b02 	vpush	{d8}
 800ef54:	eef0 8a63 	vmov.f32	s17, s7
 800ef58:	2100      	movs	r1, #0
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	eeb0 8a43 	vmov.f32	s16, s6
 800ef60:	f012 fc9a 	bl	8021898 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800ef64:	eef0 7a68 	vmov.f32	s15, s17
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef72:	ee17 2a90 	vmov	r2, s15
 800ef76:	eef0 7a48 	vmov.f32	s15, s16
 800ef7a:	ecbd 8b02 	vpop	{d8}
 800ef7e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef86:	ee17 1a90 	vmov	r1, s15
 800ef8a:	4718      	bx	r3

0800ef8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800ef8c:	b513      	push	{r0, r1, r4, lr}
 800ef8e:	4604      	mov	r4, r0
 800ef90:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ef92:	f005 ffec 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ef96:	eef0 7a60 	vmov.f32	s15, s1
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efa0:	ee17 2a90 	vmov	r2, s15
 800efa4:	eef0 7a40 	vmov.f32	s15, s0
 800efa8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efac:	ee17 1a90 	vmov	r1, s15
 800efb0:	b002      	add	sp, #8
 800efb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb6:	f012 bb07 	b.w	80215c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800efba:	b513      	push	{r0, r1, r4, lr}
 800efbc:	4604      	mov	r4, r0
 800efbe:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800efc0:	f005 ffd5 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800efc4:	eef0 7a60 	vmov.f32	s15, s1
 800efc8:	4620      	mov	r0, r4
 800efca:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efce:	ee17 2a90 	vmov	r2, s15
 800efd2:	eef0 7a40 	vmov.f32	s15, s0
 800efd6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efda:	ee17 1a90 	vmov	r1, s15
 800efde:	b002      	add	sp, #8
 800efe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe4:	f012 bb3d 	b.w	8021662 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800efe8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efea:	2400      	movs	r4, #0
 800efec:	9f07      	ldr	r7, [sp, #28]
 800efee:	f04f 0e01 	mov.w	lr, #1
 800eff2:	4626      	mov	r6, r4
 800eff4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800eff8:	4463      	add	r3, ip
 800effa:	4563      	cmp	r3, ip
 800effc:	d02d      	beq.n	800f05a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800effe:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800f002:	2d06      	cmp	r5, #6
 800f004:	d8f9      	bhi.n	800effa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f006:	fa0e f505 	lsl.w	r5, lr, r5
 800f00a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800f00e:	d10d      	bne.n	800f02c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800f010:	f015 0f10 	tst.w	r5, #16
 800f014:	d117      	bne.n	800f046 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800f016:	072d      	lsls	r5, r5, #28
 800f018:	d5ef      	bpl.n	800effa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f01a:	3801      	subs	r0, #1
 800f01c:	b91e      	cbnz	r6, 800f026 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800f01e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800f022:	682d      	ldr	r5, [r5, #0]
 800f024:	600d      	str	r5, [r1, #0]
 800f026:	b96c      	cbnz	r4, 800f044 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f028:	2601      	movs	r6, #1
 800f02a:	e7e6      	b.n	800effa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f02c:	b926      	cbnz	r6, 800f038 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800f02e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f032:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f036:	600b      	str	r3, [r1, #0]
 800f038:	b924      	cbnz	r4, 800f044 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f03a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f03e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f042:	6013      	str	r3, [r2, #0]
 800f044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f046:	3801      	subs	r0, #1
 800f048:	b91c      	cbnz	r4, 800f052 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800f04a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800f04e:	6824      	ldr	r4, [r4, #0]
 800f050:	6014      	str	r4, [r2, #0]
 800f052:	2e00      	cmp	r6, #0
 800f054:	d1f6      	bne.n	800f044 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f056:	2401      	movs	r4, #1
 800f058:	e7cf      	b.n	800effa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f05a:	b90e      	cbnz	r6, 800f060 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800f05c:	2300      	movs	r3, #0
 800f05e:	600b      	str	r3, [r1, #0]
 800f060:	2c00      	cmp	r4, #0
 800f062:	d1ef      	bne.n	800f044 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f064:	2300      	movs	r3, #0
 800f066:	e7ec      	b.n	800f042 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800f068 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	ed2d 8b0a 	vpush	{d8-d12}
 800f06e:	eef0 ba40 	vmov.f32	s23, s0
 800f072:	4604      	mov	r4, r0
 800f074:	eeb0 ca60 	vmov.f32	s24, s1
 800f078:	460d      	mov	r5, r1
 800f07a:	eef0 aa41 	vmov.f32	s21, s2
 800f07e:	eeb0 ba61 	vmov.f32	s22, s3
 800f082:	eeb0 9a42 	vmov.f32	s18, s4
 800f086:	eef0 9a62 	vmov.f32	s19, s5
 800f08a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800f08e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800f092:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800f096:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800f09a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800f09e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800f0a2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800f0a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f0aa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800f0ae:	f012 fdcb 	bl	8021c48 <sqrtf>
 800f0b2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ba:	d12e      	bne.n	800f11a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800f0bc:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800f0c0:	ee39 7acb 	vsub.f32	s14, s19, s22
 800f0c4:	eeb0 8a6a 	vmov.f32	s16, s21
 800f0c8:	eef0 8a4b 	vmov.f32	s17, s22
 800f0cc:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800f0d0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800f0d4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800f0d8:	eee7 8aca 	vfms.f32	s17, s15, s20
 800f0dc:	2d02      	cmp	r5, #2
 800f0de:	dc2f      	bgt.n	800f140 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	eef0 1a4b 	vmov.f32	s3, s22
 800f0e6:	eeb0 1a6a 	vmov.f32	s2, s21
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	eef0 2a68 	vmov.f32	s5, s17
 800f0f2:	eeb0 2a48 	vmov.f32	s4, s16
 800f0f6:	eef0 0a4c 	vmov.f32	s1, s24
 800f0fa:	eeb0 0a6b 	vmov.f32	s0, s23
 800f0fe:	f7ff ffb3 	bl	800f068 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f102:	eef0 0a68 	vmov.f32	s1, s17
 800f106:	eeb0 0a48 	vmov.f32	s0, s16
 800f10a:	4620      	mov	r0, r4
 800f10c:	f7ff ff55 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f110:	eeb0 ba68 	vmov.f32	s22, s17
 800f114:	eef0 aa48 	vmov.f32	s21, s16
 800f118:	e7b9      	b.n	800f08e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800f11a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800f11e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f122:	ee78 8acc 	vsub.f32	s17, s17, s24
 800f126:	ee28 7a27 	vmul.f32	s14, s16, s15
 800f12a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f12e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800f132:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800f136:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800f13a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800f13e:	e7cd      	b.n	800f0dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800f140:	eef0 0a68 	vmov.f32	s1, s17
 800f144:	4620      	mov	r0, r4
 800f146:	eeb0 0a48 	vmov.f32	s0, s16
 800f14a:	f7ff ff36 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f14e:	ecbd 8b0a 	vpop	{d8-d12}
 800f152:	bd38      	pop	{r3, r4, r5, pc}

0800f154 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800f154:	b510      	push	{r4, lr}
 800f156:	ed2d 8b0a 	vpush	{d8-d12}
 800f15a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800f15e:	4604      	mov	r4, r0
 800f160:	eeb0 ca40 	vmov.f32	s24, s0
 800f164:	2b02      	cmp	r3, #2
 800f166:	eeb0 9a60 	vmov.f32	s18, s1
 800f16a:	eef0 9a41 	vmov.f32	s19, s2
 800f16e:	eef0 8a61 	vmov.f32	s17, s3
 800f172:	eeb0 ba42 	vmov.f32	s22, s4
 800f176:	eef0 ba62 	vmov.f32	s23, s5
 800f17a:	eeb0 aa43 	vmov.f32	s20, s6
 800f17e:	eef0 aa63 	vmov.f32	s21, s7
 800f182:	eeb0 8a44 	vmov.f32	s16, s8
 800f186:	eef0 ca64 	vmov.f32	s25, s9
 800f18a:	d12c      	bne.n	800f1e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800f18c:	eef0 0a62 	vmov.f32	s1, s5
 800f190:	eeb0 0a42 	vmov.f32	s0, s4
 800f194:	f7ff ff11 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f198:	ee79 9acb 	vsub.f32	s19, s19, s22
 800f19c:	ee7a caec 	vsub.f32	s25, s21, s25
 800f1a0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800f1a4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f1a8:	ee69 9aac 	vmul.f32	s19, s19, s25
 800f1ac:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f1b0:	eef4 9ac8 	vcmpe.f32	s19, s16
 800f1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b8:	db0f      	blt.n	800f1da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	eef0 2a6a 	vmov.f32	s5, s21
 800f1c0:	eeb0 2a4a 	vmov.f32	s4, s20
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	eef0 1a6b 	vmov.f32	s3, s23
 800f1ca:	eeb0 1a4b 	vmov.f32	s2, s22
 800f1ce:	eef0 0a49 	vmov.f32	s1, s18
 800f1d2:	eeb0 0a4c 	vmov.f32	s0, s24
 800f1d6:	f7ff ff47 	bl	800f068 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f1da:	eef0 0a6a 	vmov.f32	s1, s21
 800f1de:	4620      	mov	r0, r4
 800f1e0:	eeb0 0a4a 	vmov.f32	s0, s20
 800f1e4:	e035      	b.n	800f252 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d138      	bne.n	800f25c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f1ea:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800f1ee:	ee33 6a48 	vsub.f32	s12, s6, s16
 800f1f2:	ee71 7a42 	vsub.f32	s15, s2, s4
 800f1f6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800f1fa:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800f1fe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f202:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	d027      	beq.n	800f25c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f20c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800f210:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800f214:	eea4 8a83 	vfma.f32	s16, s9, s6
 800f218:	eee1 8a22 	vfma.f32	s17, s2, s5
 800f21c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800f220:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800f224:	eee6 7a28 	vfma.f32	s15, s12, s17
 800f228:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800f22c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800f230:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800f234:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800f238:	ee3c ca40 	vsub.f32	s24, s24, s0
 800f23c:	ee39 9a60 	vsub.f32	s18, s18, s1
 800f240:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f244:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800f248:	eef4 7ac9 	vcmpe.f32	s15, s18
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	db04      	blt.n	800f25c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f252:	f7ff feb2 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f256:	ecbd 8b0a 	vpop	{d8-d12}
 800f25a:	bd10      	pop	{r4, pc}
 800f25c:	eef0 0a6b 	vmov.f32	s1, s23
 800f260:	4620      	mov	r0, r4
 800f262:	eeb0 0a4b 	vmov.f32	s0, s22
 800f266:	f7ff fea8 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f26a:	e7b6      	b.n	800f1da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800f26c:	b510      	push	{r4, lr}
 800f26e:	ed2d 8b0c 	vpush	{d8-d13}
 800f272:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800f276:	4604      	mov	r4, r0
 800f278:	eeb0 9a40 	vmov.f32	s18, s0
 800f27c:	eef0 9a60 	vmov.f32	s19, s1
 800f280:	eef0 aa41 	vmov.f32	s21, s2
 800f284:	eeb0 ba61 	vmov.f32	s22, s3
 800f288:	b933      	cbnz	r3, 800f298 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800f28a:	f7ff fe96 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f28e:	eef0 0a4b 	vmov.f32	s1, s22
 800f292:	eeb0 0a6a 	vmov.f32	s0, s21
 800f296:	e015      	b.n	800f2c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800f298:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	ee71 8a40 	vsub.f32	s17, s2, s0
 800f2a2:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800f2a6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f2aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f2ae:	d10f      	bne.n	800f2d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800f2b0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f2b4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f2b8:	f7ff fe7f 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2bc:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800f2c0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7ff fe78 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2ca:	ecbd 8b0c 	vpop	{d8-d13}
 800f2ce:	bd10      	pop	{r4, pc}
 800f2d0:	f7ff fe73 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2d4:	eef0 0a69 	vmov.f32	s1, s19
 800f2d8:	eeb0 0a49 	vmov.f32	s0, s18
 800f2dc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800f40c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800f2e0:	eeb1 aa68 	vneg.f32	s20, s17
 800f2e4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800f2e8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f2f2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f414 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800f2f6:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f418 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800f2fa:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f41c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800f2fe:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f302:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f306:	f7ff fe58 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f30a:	eef0 0a69 	vmov.f32	s1, s19
 800f30e:	eeb0 0a49 	vmov.f32	s0, s18
 800f312:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f420 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800f316:	4620      	mov	r0, r4
 800f318:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f31c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f320:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f324:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f328:	f7ff fe47 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f32c:	eef0 0a69 	vmov.f32	s1, s19
 800f330:	eeb0 0a49 	vmov.f32	s0, s18
 800f334:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f424 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800f338:	4620      	mov	r0, r4
 800f33a:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f33e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f342:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f346:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f34a:	f7ff fe36 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f34e:	eef0 0a69 	vmov.f32	s1, s19
 800f352:	eeb0 0a49 	vmov.f32	s0, s18
 800f356:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f428 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800f35a:	4620      	mov	r0, r4
 800f35c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f360:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f364:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f368:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f36c:	f7ff fe25 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f370:	ee79 0a88 	vadd.f32	s1, s19, s16
 800f374:	ee39 0a28 	vadd.f32	s0, s18, s17
 800f378:	4620      	mov	r0, r4
 800f37a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f37e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f382:	f7ff fe1a 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f386:	eef0 0a69 	vmov.f32	s1, s19
 800f38a:	eeb0 0a49 	vmov.f32	s0, s18
 800f38e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f42c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800f392:	4620      	mov	r0, r4
 800f394:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f398:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f39c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f3a0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f3a4:	f7ff fe09 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3a8:	eef0 0a69 	vmov.f32	s1, s19
 800f3ac:	eeb0 0a49 	vmov.f32	s0, s18
 800f3b0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f430 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3ba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3be:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f3c2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f3c6:	f7ff fdf8 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3ca:	eef0 0a69 	vmov.f32	s1, s19
 800f3ce:	eeb0 0a49 	vmov.f32	s0, s18
 800f3d2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f434 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3dc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3e0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f3e4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f3e8:	f7ff fde7 	bl	800efba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3ec:	eef0 0a69 	vmov.f32	s1, s19
 800f3f0:	eeb0 0a49 	vmov.f32	s0, s18
 800f3f4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f438 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3fe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f402:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f406:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f40a:	e73e      	b.n	800f28a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800f40c:	3d23d70a 	.word	0x3d23d70a
 800f410:	3e8f5c29 	.word	0x3e8f5c29
 800f414:	3f19999a 	.word	0x3f19999a
 800f418:	3f4ccccd 	.word	0x3f4ccccd
 800f41c:	3f75c28f 	.word	0x3f75c28f
 800f420:	3e4ccccd 	.word	0x3e4ccccd
 800f424:	3ecccccd 	.word	0x3ecccccd
 800f428:	3f3851ec 	.word	0x3f3851ec
 800f42c:	3fa3d70a 	.word	0x3fa3d70a
 800f430:	3fcccccd 	.word	0x3fcccccd
 800f434:	3fe66666 	.word	0x3fe66666
 800f438:	3ffae148 	.word	0x3ffae148

0800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	ed2d 8b06 	vpush	{d8-d10}
 800f442:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f446:	eef0 aa40 	vmov.f32	s21, s0
 800f44a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f44e:	4604      	mov	r4, r0
 800f450:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f454:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f458:	eeb0 aa60 	vmov.f32	s20, s1
 800f45c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f460:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f464:	f012 fbf0 	bl	8021c48 <sqrtf>
 800f468:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f470:	dd36      	ble.n	800f4e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f472:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f476:	2600      	movs	r6, #0
 800f478:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f47c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f480:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f484:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f488:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f48c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f490:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f494:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f498:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f49c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f4a0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f4a4:	b1fd      	cbz	r5, 800f4e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f4a6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f4aa:	eef0 0a49 	vmov.f32	s1, s18
 800f4ae:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f4b2:	eeb0 0a69 	vmov.f32	s0, s19
 800f4b6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f4c0:	f7ff fd64 	bl	800ef8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f4c4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f4c8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f4cc:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f4d0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f4d4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f4d8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f4dc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f4e0:	ecbd 8b06 	vpop	{d8-d10}
 800f4e4:	bd70      	pop	{r4, r5, r6, pc}
 800f4e6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f4ea:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f4ee:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f4f2:	b16b      	cbz	r3, 800f510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f4f4:	eef0 1a49 	vmov.f32	s3, s18
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	eeb0 1a69 	vmov.f32	s2, s19
 800f4fe:	eef0 0a62 	vmov.f32	s1, s5
 800f502:	eeb0 0a42 	vmov.f32	s0, s4
 800f506:	f7ff feb1 	bl	800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f50a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f50e:	e7db      	b.n	800f4c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f510:	eef0 4a48 	vmov.f32	s9, s16
 800f514:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f518:	eeb0 4a68 	vmov.f32	s8, s17
 800f51c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f520:	eef0 3a49 	vmov.f32	s7, s18
 800f524:	4620      	mov	r0, r4
 800f526:	eeb0 3a69 	vmov.f32	s6, s19
 800f52a:	f7ff fe13 	bl	800f154 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f52e:	e7cb      	b.n	800f4c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f530 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f530:	ee07 2a90 	vmov	s15, r2
 800f534:	ee07 1a10 	vmov	s14, r1
 800f538:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f53c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f540:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f544:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f548:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f54c:	f7ff bf76 	b.w	800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f550:	3d000000 	.word	0x3d000000

0800f554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	ed2d 8b02 	vpush	{d8}
 800f55a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f55e:	4604      	mov	r4, r0
 800f560:	b31d      	cbz	r5, 800f5aa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f562:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f566:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f56a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f56e:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f572:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f576:	eef0 0a68 	vmov.f32	s1, s17
 800f57a:	f7ff fd07 	bl	800ef8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f57e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f582:	eef0 1a48 	vmov.f32	s3, s16
 800f586:	4620      	mov	r0, r4
 800f588:	eeb0 0a41 	vmov.f32	s0, s2
 800f58c:	eef0 0a68 	vmov.f32	s1, s17
 800f590:	f7ff fe6c 	bl	800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f594:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f598:	eef0 1a68 	vmov.f32	s3, s17
 800f59c:	4620      	mov	r0, r4
 800f59e:	eef0 0a48 	vmov.f32	s1, s16
 800f5a2:	eeb0 0a41 	vmov.f32	s0, s2
 800f5a6:	f7ff fe61 	bl	800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	ecbd 8b02 	vpop	{d8}
 800f5b0:	bd38      	pop	{r3, r4, r5, pc}

0800f5b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f5b2:	b510      	push	{r4, lr}
 800f5b4:	ed2d 8b02 	vpush	{d8}
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f5be:	eef0 8a60 	vmov.f32	s17, s1
 800f5c2:	f7ff ffc7 	bl	800f554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f5c6:	b9d0      	cbnz	r0, 800f5fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f5ce:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f5d2:	eef0 0a68 	vmov.f32	s1, s17
 800f5d6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f5da:	eeb0 0a48 	vmov.f32	s0, s16
 800f5de:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f5e2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f5e6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f5ea:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f5ee:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f5f2:	f7ff fdaf 	bl	800f154 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	ecbd 8b02 	vpop	{d8}
 800f5fc:	bd10      	pop	{r4, pc}
 800f5fe:	2000      	movs	r0, #0
 800f600:	e7fa      	b.n	800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f602 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f602:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f606:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f60a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f60e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f612:	f7ff be2b 	b.w	800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f618 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	b089      	sub	sp, #36	@ 0x24
 800f61e:	461c      	mov	r4, r3
 800f620:	4682      	mov	sl, r0
 800f622:	4615      	mov	r5, r2
 800f624:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f628:	f10d 0820 	add.w	r8, sp, #32
 800f62c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	2300      	movs	r3, #0
 800f632:	9105      	str	r1, [sp, #20]
 800f634:	9306      	str	r3, [sp, #24]
 800f636:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f63a:	9b04      	ldr	r3, [sp, #16]
 800f63c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f640:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f644:	9b05      	ldr	r3, [sp, #20]
 800f646:	429d      	cmp	r5, r3
 800f648:	d96d      	bls.n	800f726 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f64a:	3d01      	subs	r5, #1
 800f64c:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f650:	2b06      	cmp	r3, #6
 800f652:	d8f7      	bhi.n	800f644 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f654:	a201      	add	r2, pc, #4	@ (adr r2, 800f65c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65a:	bf00      	nop
 800f65c:	0800f67b 	.word	0x0800f67b
 800f660:	0800f645 	.word	0x0800f645
 800f664:	0800f679 	.word	0x0800f679
 800f668:	0800f69d 	.word	0x0800f69d
 800f66c:	0800f69d 	.word	0x0800f69d
 800f670:	0800f6a1 	.word	0x0800f6a1
 800f674:	0800f6e1 	.word	0x0800f6e1
 800f678:	3c02      	subs	r4, #2
 800f67a:	4650      	mov	r0, sl
 800f67c:	9400      	str	r4, [sp, #0]
 800f67e:	462b      	mov	r3, r5
 800f680:	4642      	mov	r2, r8
 800f682:	a906      	add	r1, sp, #24
 800f684:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f688:	f7ff fcae 	bl	800efe8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f68c:	eddd 0a07 	vldr	s1, [sp, #28]
 800f690:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f694:	4630      	mov	r0, r6
 800f696:	f7ff fed1 	bl	800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f69a:	e7d3      	b.n	800f644 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f69c:	3c01      	subs	r4, #1
 800f69e:	e7ec      	b.n	800f67a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f6a0:	f1a4 0b04 	sub.w	fp, r4, #4
 800f6a4:	3c02      	subs	r4, #2
 800f6a6:	4650      	mov	r0, sl
 800f6a8:	462b      	mov	r3, r5
 800f6aa:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f6ae:	f8cd b000 	str.w	fp, [sp]
 800f6b2:	4642      	mov	r2, r8
 800f6b4:	a906      	add	r1, sp, #24
 800f6b6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f6ba:	f7ff fc95 	bl	800efe8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f6be:	eddd 2a07 	vldr	s5, [sp, #28]
 800f6c2:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f6cc:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f6d0:	edd4 0a01 	vldr	s1, [r4, #4]
 800f6d4:	ed94 0a00 	vldr	s0, [r4]
 800f6d8:	f7ff fc1a 	bl	800ef10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f6dc:	465c      	mov	r4, fp
 800f6de:	e7b1      	b.n	800f644 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f6e0:	f1a4 0b06 	sub.w	fp, r4, #6
 800f6e4:	3c02      	subs	r4, #2
 800f6e6:	4650      	mov	r0, sl
 800f6e8:	462b      	mov	r3, r5
 800f6ea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f6ee:	f8cd b000 	str.w	fp, [sp]
 800f6f2:	4642      	mov	r2, r8
 800f6f4:	a906      	add	r1, sp, #24
 800f6f6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f6fa:	f7ff fc75 	bl	800efe8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f6fe:	eddd 3a07 	vldr	s7, [sp, #28]
 800f702:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f706:	4630      	mov	r0, r6
 800f708:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f70c:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f710:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f714:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f718:	edd4 0a01 	vldr	s1, [r4, #4]
 800f71c:	ed94 0a00 	vldr	s0, [r4]
 800f720:	f7ff fc15 	bl	800ef4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f724:	e7da      	b.n	800f6dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f726:	9b04      	ldr	r3, [sp, #16]
 800f728:	b113      	cbz	r3, 800f730 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f72a:	4630      	mov	r0, r6
 800f72c:	f7ff ff69 	bl	800f602 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f730:	b009      	add	sp, #36	@ 0x24
 800f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f736:	bf00      	nop

0800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f738:	eef0 7a60 	vmov.f32	s15, s1
 800f73c:	6803      	ldr	r3, [r0, #0]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f744:	ee17 2a90 	vmov	r2, s15
 800f748:	eef0 7a40 	vmov.f32	s15, s0
 800f74c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f750:	ee17 1a90 	vmov	r1, s15
 800f754:	4718      	bx	r3
	...

0800f758 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f758:	4b04      	ldr	r3, [pc, #16]	@ (800f76c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f75a:	b510      	push	{r4, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	f840 3b14 	str.w	r3, [r0], #20
 800f762:	f001 fa87 	bl	8010c74 <_ZN8touchgfx7OutlineD1Ev>
 800f766:	4620      	mov	r0, r4
 800f768:	bd10      	pop	{r4, pc}
 800f76a:	bf00      	nop
 800f76c:	08026958 	.word	0x08026958

0800f770 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	ed2d 8b04 	vpush	{d8-d9}
 800f778:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f77c:	b0b5      	sub	sp, #212	@ 0xd4
 800f77e:	4605      	mov	r5, r0
 800f780:	468b      	mov	fp, r1
 800f782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f786:	9206      	str	r2, [sp, #24]
 800f788:	461e      	mov	r6, r3
 800f78a:	2400      	movs	r4, #0
 800f78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f790:	f240 814f 	bls.w	800fa32 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f794:	23ff      	movs	r3, #255	@ 0xff
 800f796:	1d02      	adds	r2, r0, #4
 800f798:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800fa38 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f79c:	f04f 0800 	mov.w	r8, #0
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	af08      	add	r7, sp, #32
 800f7a4:	6981      	ldr	r1, [r0, #24]
 800f7a6:	a808      	add	r0, sp, #32
 800f7a8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f7aa:	eef0 9a49 	vmov.f32	s19, s18
 800f7ae:	f011 fdbf 	bl	8021330 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f7b2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f7b6:	4ba1      	ldr	r3, [pc, #644]	@ (800fa3c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f7b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f7bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	9308      	str	r3, [sp, #32]
 800f7c4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f7c8:	edd5 6a08 	vldr	s13, [r5, #32]
 800f7cc:	eeb0 8a49 	vmov.f32	s16, s18
 800f7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d4:	9325      	str	r3, [sp, #148]	@ 0x94
 800f7d6:	f04f 0300 	mov.w	r3, #0
 800f7da:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f7de:	7f6a      	ldrb	r2, [r5, #29]
 800f7e0:	eef0 8a49 	vmov.f32	s17, s18
 800f7e4:	bf48      	it	mi
 800f7e6:	eef1 7a67 	vnegmi.f32	s15, s15
 800f7ea:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f7ee:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f7f2:	46c1      	mov	r9, r8
 800f7f4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f7f8:	f04f 0a01 	mov.w	sl, #1
 800f7fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f800:	7fab      	ldrb	r3, [r5, #30]
 800f802:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f804:	435a      	muls	r2, r3
 800f806:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f80a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f80e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f812:	1c53      	adds	r3, r2, #1
 800f814:	942b      	str	r4, [sp, #172]	@ 0xac
 800f816:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f818:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f81c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f820:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f822:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f824:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f82c:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f82e:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f830:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f832:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f834:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f836:	4644      	mov	r4, r8
 800f838:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f83c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f840:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f844:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f848:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f84c:	9b06      	ldr	r3, [sp, #24]
 800f84e:	454b      	cmp	r3, r9
 800f850:	f000 80cc 	beq.w	800f9ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f854:	f109 0301 	add.w	r3, r9, #1
 800f858:	9305      	str	r3, [sp, #20]
 800f85a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f85e:	2b06      	cmp	r3, #6
 800f860:	d839      	bhi.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f862:	e8df f003 	tbb	[pc, r3]
 800f866:	3b04      	.short	0x3b04
 800f868:	817c6f60 	.word	0x817c6f60
 800f86c:	a0          	.byte	0xa0
 800f86d:	00          	.byte	0x00
 800f86e:	45c1      	cmp	r9, r8
 800f870:	d92b      	bls.n	800f8ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f872:	eef0 0a49 	vmov.f32	s1, s18
 800f876:	4638      	mov	r0, r7
 800f878:	eeb0 0a69 	vmov.f32	s0, s19
 800f87c:	f7ff fdde 	bl	800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f880:	4638      	mov	r0, r7
 800f882:	f7ff fe67 	bl	800f554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f886:	4681      	mov	r9, r0
 800f888:	b9f8      	cbnz	r0, 800f8ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f88a:	eef0 0a49 	vmov.f32	s1, s18
 800f88e:	4638      	mov	r0, r7
 800f890:	eeb0 0a69 	vmov.f32	s0, s19
 800f894:	f7ff fe8d 	bl	800f5b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f898:	4628      	mov	r0, r5
 800f89a:	4623      	mov	r3, r4
 800f89c:	9a05      	ldr	r2, [sp, #20]
 800f89e:	4641      	mov	r1, r8
 800f8a0:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f8a4:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f8a8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f8ac:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f8b0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f8b4:	e9cd b600 	strd	fp, r6, [sp]
 800f8b8:	f7ff feae 	bl	800f618 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f8bc:	eef0 0a49 	vmov.f32	s1, s18
 800f8c0:	eeb0 0a69 	vmov.f32	s0, s19
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f7ff fe74 	bl	800f5b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f8ca:	eeb0 8a49 	vmov.f32	s16, s18
 800f8ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f8d2:	eef0 8a69 	vmov.f32	s17, s19
 800f8d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f8da:	e7b7      	b.n	800f84c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f8dc:	45c1      	cmp	r9, r8
 800f8de:	d90d      	bls.n	800f8fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	f7ff fe37 	bl	800f554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f8e6:	b948      	cbnz	r0, 800f8fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f8e8:	4623      	mov	r3, r4
 800f8ea:	464a      	mov	r2, r9
 800f8ec:	4641      	mov	r1, r8
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f8f4:	e9cd b600 	strd	fp, r6, [sp]
 800f8f8:	f7ff fe8e 	bl	800f618 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f8fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f900:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f904:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f908:	3402      	adds	r4, #2
 800f90a:	edd3 8a00 	vldr	s17, [r3]
 800f90e:	46c8      	mov	r8, r9
 800f910:	ed93 8a01 	vldr	s16, [r3, #4]
 800f914:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f918:	eef0 9a68 	vmov.f32	s19, s17
 800f91c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f920:	eeb0 9a48 	vmov.f32	s18, s16
 800f924:	e7d7      	b.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f926:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f92a:	4638      	mov	r0, r7
 800f92c:	3402      	adds	r4, #2
 800f92e:	edd3 8a00 	vldr	s17, [r3]
 800f932:	ed93 8a01 	vldr	s16, [r3, #4]
 800f936:	eeb0 0a68 	vmov.f32	s0, s17
 800f93a:	eef0 0a48 	vmov.f32	s1, s16
 800f93e:	f7ff fd7d 	bl	800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f942:	e7c8      	b.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f944:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f948:	edd3 8a00 	vldr	s17, [r3]
 800f94c:	eef0 0a48 	vmov.f32	s1, s16
 800f950:	4638      	mov	r0, r7
 800f952:	eeb0 0a68 	vmov.f32	s0, s17
 800f956:	3401      	adds	r4, #1
 800f958:	f7ff fd70 	bl	800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f95c:	e7bb      	b.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f95e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f962:	ed93 8a00 	vldr	s16, [r3]
 800f966:	e7f1      	b.n	800f94c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f968:	00a3      	lsls	r3, r4, #2
 800f96a:	eef0 0a48 	vmov.f32	s1, s16
 800f96e:	eeb0 0a68 	vmov.f32	s0, s17
 800f972:	4638      	mov	r0, r7
 800f974:	f103 0208 	add.w	r2, r3, #8
 800f978:	f103 090c 	add.w	r9, r3, #12
 800f97c:	4433      	add	r3, r6
 800f97e:	3404      	adds	r4, #4
 800f980:	4432      	add	r2, r6
 800f982:	44b1      	add	r9, r6
 800f984:	edd3 1a01 	vldr	s3, [r3, #4]
 800f988:	ed92 2a00 	vldr	s4, [r2]
 800f98c:	edd9 2a00 	vldr	s5, [r9]
 800f990:	ed93 1a00 	vldr	s2, [r3]
 800f994:	9207      	str	r2, [sp, #28]
 800f996:	f7ff fabb 	bl	800ef10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f99a:	9a07      	ldr	r2, [sp, #28]
 800f99c:	ed99 8a00 	vldr	s16, [r9]
 800f9a0:	edd2 8a00 	vldr	s17, [r2]
 800f9a4:	e797      	b.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f9a6:	00a3      	lsls	r3, r4, #2
 800f9a8:	eef0 0a48 	vmov.f32	s1, s16
 800f9ac:	eeb0 0a68 	vmov.f32	s0, s17
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f103 0210 	add.w	r2, r3, #16
 800f9b6:	f103 0914 	add.w	r9, r3, #20
 800f9ba:	4433      	add	r3, r6
 800f9bc:	3406      	adds	r4, #6
 800f9be:	4432      	add	r2, r6
 800f9c0:	44b1      	add	r9, r6
 800f9c2:	edd3 2a03 	vldr	s5, [r3, #12]
 800f9c6:	ed92 3a00 	vldr	s6, [r2]
 800f9ca:	edd9 3a00 	vldr	s7, [r9]
 800f9ce:	ed93 2a02 	vldr	s4, [r3, #8]
 800f9d2:	edd3 1a01 	vldr	s3, [r3, #4]
 800f9d6:	ed93 1a00 	vldr	s2, [r3]
 800f9da:	9207      	str	r2, [sp, #28]
 800f9dc:	f7ff fab7 	bl	800ef4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f9e0:	9a07      	ldr	r2, [sp, #28]
 800f9e2:	ed99 8a00 	vldr	s16, [r9]
 800f9e6:	edd2 8a00 	vldr	s17, [r2]
 800f9ea:	e774      	b.n	800f8d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f9ec:	9b06      	ldr	r3, [sp, #24]
 800f9ee:	af08      	add	r7, sp, #32
 800f9f0:	4543      	cmp	r3, r8
 800f9f2:	d90f      	bls.n	800fa14 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f9f4:	4638      	mov	r0, r7
 800f9f6:	f7ff fdad 	bl	800f554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f9fa:	b958      	cbnz	r0, 800fa14 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	9703      	str	r7, [sp, #12]
 800fa00:	f8cd b000 	str.w	fp, [sp]
 800fa04:	4641      	mov	r1, r8
 800fa06:	9a06      	ldr	r2, [sp, #24]
 800fa08:	4628      	mov	r0, r5
 800fa0a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fa0e:	4623      	mov	r3, r4
 800fa10:	f7ff fe02 	bl	800f618 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fa14:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f011 fd1d 	bl	8021458 <_ZN8touchgfx6Canvas6renderEh>
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4638      	mov	r0, r7
 800fa22:	f7ff fe99 	bl	800f758 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fa26:	4620      	mov	r0, r4
 800fa28:	b035      	add	sp, #212	@ 0xd4
 800fa2a:	ecbd 8b04 	vpop	{d8-d9}
 800fa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa32:	2401      	movs	r4, #1
 800fa34:	e7f7      	b.n	800fa26 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800fa36:	bf00      	nop
 800fa38:	00000000 	.word	0x00000000
 800fa3c:	08026348 	.word	0x08026348

0800fa40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	4604      	mov	r4, r0
 800fa44:	f7ff fe88 	bl	800f758 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fa48:	21b0      	movs	r1, #176	@ 0xb0
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f012 f8d1 	bl	8021bf2 <_ZdlPvj>
 800fa50:	4620      	mov	r0, r4
 800fa52:	bd10      	pop	{r4, pc}

0800fa54 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	4698      	mov	r8, r3
 800fa5a:	23ff      	movs	r3, #255	@ 0xff
 800fa5c:	4607      	mov	r7, r0
 800fa5e:	4689      	mov	r9, r1
 800fa60:	4692      	mov	sl, r2
 800fa62:	1d02      	adds	r2, r0, #4
 800fa64:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800fa68:	2400      	movs	r4, #0
 800fa6a:	44ca      	add	sl, r9
 800fa6c:	ed2d 8b06 	vpush	{d8-d10}
 800fa70:	b0aa      	sub	sp, #168	@ 0xa8
 800fa72:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800fc78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	eef0 8a48 	vmov.f32	s17, s16
 800fa7c:	6981      	ldr	r1, [r0, #24]
 800fa7e:	a80d      	add	r0, sp, #52	@ 0x34
 800fa80:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fa82:	f011 fc55 	bl	8021330 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800fa86:	7f3b      	ldrb	r3, [r7, #28]
 800fa88:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800fc78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	1e5a      	subs	r2, r3, #1
 800fa90:	eeb0 0a60 	vmov.f32	s0, s1
 800fa94:	4253      	negs	r3, r2
 800fa96:	4153      	adcs	r3, r2
 800fa98:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800fa9c:	f005 fa67 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800faa0:	eeb0 9a40 	vmov.f32	s18, s0
 800faa4:	eef0 9a60 	vmov.f32	s19, s1
 800faa8:	45ca      	cmp	sl, r9
 800faaa:	f000 80cd 	beq.w	800fc48 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800faae:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fab2:	2b06      	cmp	r3, #6
 800fab4:	d8f8      	bhi.n	800faa8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fab6:	e8df f003 	tbb	[pc, r3]
 800faba:	0804      	.short	0x0804
 800fabc:	58533f2a 	.word	0x58533f2a
 800fac0:	8a          	.byte	0x8a
 800fac1:	00          	.byte	0x00
 800fac2:	a80d      	add	r0, sp, #52	@ 0x34
 800fac4:	f011 fca6 	bl	8021414 <_ZN8touchgfx6Canvas5closeEv>
 800fac8:	e7ee      	b.n	800faa8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800faca:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800face:	4628      	mov	r0, r5
 800fad0:	ed93 8a01 	vldr	s16, [r3, #4]
 800fad4:	edd3 8a00 	vldr	s17, [r3]
 800fad8:	eef0 0a48 	vmov.f32	s1, s16
 800fadc:	eeb0 0a68 	vmov.f32	s0, s17
 800fae0:	f005 fa45 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fae4:	a80d      	add	r0, sp, #52	@ 0x34
 800fae6:	eef0 7a60 	vmov.f32	s15, s1
 800faea:	eeb0 9a40 	vmov.f32	s18, s0
 800faee:	eef0 9a60 	vmov.f32	s19, s1
 800faf2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800faf6:	ee17 2a90 	vmov	r2, s15
 800fafa:	eef0 7a40 	vmov.f32	s15, s0
 800fafe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fb02:	ee17 1a90 	vmov	r1, s15
 800fb06:	f011 fd5f 	bl	80215c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800fb0a:	3402      	adds	r4, #2
 800fb0c:	e7cc      	b.n	800faa8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb0e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb12:	4628      	mov	r0, r5
 800fb14:	edd3 8a00 	vldr	s17, [r3]
 800fb18:	ed93 8a01 	vldr	s16, [r3, #4]
 800fb1c:	eeb0 0a68 	vmov.f32	s0, s17
 800fb20:	eef0 0a48 	vmov.f32	s1, s16
 800fb24:	f005 fa23 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb28:	a80d      	add	r0, sp, #52	@ 0x34
 800fb2a:	eeb0 9a40 	vmov.f32	s18, s0
 800fb2e:	eef0 9a60 	vmov.f32	s19, s1
 800fb32:	f7ff fe01 	bl	800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fb36:	e7e8      	b.n	800fb0a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800fb38:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb3c:	edd3 8a00 	vldr	s17, [r3]
 800fb40:	eef0 0a48 	vmov.f32	s1, s16
 800fb44:	4628      	mov	r0, r5
 800fb46:	eeb0 0a68 	vmov.f32	s0, s17
 800fb4a:	3401      	adds	r4, #1
 800fb4c:	f005 fa0f 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb50:	a80d      	add	r0, sp, #52	@ 0x34
 800fb52:	eef0 9a60 	vmov.f32	s19, s1
 800fb56:	eeb0 9a40 	vmov.f32	s18, s0
 800fb5a:	f7ff fded 	bl	800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fb5e:	e7a3      	b.n	800faa8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb60:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb64:	ed93 8a00 	vldr	s16, [r3]
 800fb68:	e7ea      	b.n	800fb40 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800fb6a:	1ca3      	adds	r3, r4, #2
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	3404      	adds	r4, #4
 800fb70:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800fb74:	ed53 0a01 	vldr	s1, [r3, #-4]
 800fb78:	ed13 0a02 	vldr	s0, [r3, #-8]
 800fb7c:	edd3 8a00 	vldr	s17, [r3]
 800fb80:	ed93 8a01 	vldr	s16, [r3, #4]
 800fb84:	f005 f9f3 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb88:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fb8c:	eeb0 0a68 	vmov.f32	s0, s17
 800fb90:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fb94:	eef0 0a48 	vmov.f32	s1, s16
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f005 f9e8 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb9e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800fba2:	eef0 2a60 	vmov.f32	s5, s1
 800fba6:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800fbaa:	eeb0 2a40 	vmov.f32	s4, s0
 800fbae:	a80d      	add	r0, sp, #52	@ 0x34
 800fbb0:	eeb0 aa40 	vmov.f32	s20, s0
 800fbb4:	eef0 aa60 	vmov.f32	s21, s1
 800fbb8:	eeb0 0a49 	vmov.f32	s0, s18
 800fbbc:	eef0 0a69 	vmov.f32	s1, s19
 800fbc0:	f7ff f9a6 	bl	800ef10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fbc4:	eef0 9a6a 	vmov.f32	s19, s21
 800fbc8:	eeb0 9a4a 	vmov.f32	s18, s20
 800fbcc:	e76c      	b.n	800faa8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fbce:	1d26      	adds	r6, r4, #4
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	3406      	adds	r4, #6
 800fbd4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fbd8:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fbdc:	ed16 0a04 	vldr	s0, [r6, #-16]
 800fbe0:	edd6 8a00 	vldr	s17, [r6]
 800fbe4:	ed96 8a01 	vldr	s16, [r6, #4]
 800fbe8:	f005 f9c1 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbec:	ed8d 0a07 	vstr	s0, [sp, #28]
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	ed16 0a02 	vldr	s0, [r6, #-8]
 800fbf6:	edcd 0a08 	vstr	s1, [sp, #32]
 800fbfa:	ed56 0a01 	vldr	s1, [r6, #-4]
 800fbfe:	f005 f9b6 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc02:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fc06:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fc0a:	eeb0 0a68 	vmov.f32	s0, s17
 800fc0e:	eef0 0a48 	vmov.f32	s1, s16
 800fc12:	4628      	mov	r0, r5
 800fc14:	f005 f9ab 	bl	8014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc18:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800fc1c:	eeb0 3a40 	vmov.f32	s6, s0
 800fc20:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800fc24:	eef0 3a60 	vmov.f32	s7, s1
 800fc28:	eddd 1a08 	vldr	s3, [sp, #32]
 800fc2c:	eeb0 aa40 	vmov.f32	s20, s0
 800fc30:	ed9d 1a07 	vldr	s2, [sp, #28]
 800fc34:	eef0 aa60 	vmov.f32	s21, s1
 800fc38:	a80d      	add	r0, sp, #52	@ 0x34
 800fc3a:	eef0 0a69 	vmov.f32	s1, s19
 800fc3e:	eeb0 0a49 	vmov.f32	s0, s18
 800fc42:	f7ff f984 	bl	800ef4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800fc46:	e7bd      	b.n	800fbc4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800fc48:	7f7b      	ldrb	r3, [r7, #29]
 800fc4a:	a80d      	add	r0, sp, #52	@ 0x34
 800fc4c:	7fb9      	ldrb	r1, [r7, #30]
 800fc4e:	4359      	muls	r1, r3
 800fc50:	1c4b      	adds	r3, r1, #1
 800fc52:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800fc56:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fc5a:	f011 fbfd 	bl	8021458 <_ZN8touchgfx6Canvas6renderEh>
 800fc5e:	4b07      	ldr	r3, [pc, #28]	@ (800fc7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800fc60:	4604      	mov	r4, r0
 800fc62:	a812      	add	r0, sp, #72	@ 0x48
 800fc64:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc66:	f001 f805 	bl	8010c74 <_ZN8touchgfx7OutlineD1Ev>
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	b02a      	add	sp, #168	@ 0xa8
 800fc6e:	ecbd 8b06 	vpop	{d8-d10}
 800fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc76:	bf00      	nop
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	08026958 	.word	0x08026958

0800fc80 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800fc80:	b410      	push	{r4}
 800fc82:	7f04      	ldrb	r4, [r0, #28]
 800fc84:	b11c      	cbz	r4, 800fc8e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800fc86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc8a:	f7ff bee3 	b.w	800fa54 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800fc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc92:	f7ff bd6d 	b.w	800f770 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

0800fc98 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	4691      	mov	r9, r2
 800fc9e:	4602      	mov	r2, r0
 800fca0:	b085      	sub	sp, #20
 800fca2:	4605      	mov	r5, r0
 800fca4:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800fca8:	4688      	mov	r8, r1
 800fcaa:	469a      	mov	sl, r3
 800fcac:	ab02      	add	r3, sp, #8
 800fcae:	6851      	ldr	r1, [r2, #4]
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fcb6:	c303      	stmia	r3!, {r0, r1}
 800fcb8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	dd08      	ble.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800fcc0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800fcc4:	2c00      	cmp	r4, #0
 800fcc6:	dd04      	ble.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800fcc8:	4a2e      	ldr	r2, [pc, #184]	@ (800fd84 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 800fcca:	7812      	ldrb	r2, [r2, #0]
 800fccc:	b122      	cbz	r2, 800fcd8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 800fcce:	2a01      	cmp	r2, #1
 800fcd0:	d02d      	beq.n	800fd2e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 800fcd2:	b005      	add	sp, #20
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fcdc:	441c      	add	r4, r3
 800fcde:	b2a4      	uxth	r4, r4
 800fce0:	b226      	sxth	r6, r4
 800fce2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800fce6:	42b3      	cmp	r3, r6
 800fce8:	daf3      	bge.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800fcea:	4653      	mov	r3, sl
 800fcec:	464a      	mov	r2, r9
 800fcee:	4641      	mov	r1, r8
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	e9cd b700 	strd	fp, r7, [sp]
 800fcf6:	f7ff ffc3 	bl	800fc80 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800fcfa:	b940      	cbnz	r0, 800fd0e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 800fcfc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d004      	beq.n	800fd0e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 800fd04:	3301      	adds	r3, #1
 800fd06:	105b      	asrs	r3, r3, #1
 800fd08:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd0c:	e7ed      	b.n	800fcea <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 800fd0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800fd12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fd16:	4413      	add	r3, r2
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	441a      	add	r2, r3
 800fd1c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800fd20:	b212      	sxth	r2, r2
 800fd22:	4296      	cmp	r6, r2
 800fd24:	dadd      	bge.n	800fce2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 800fd26:	1ae3      	subs	r3, r4, r3
 800fd28:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd2c:	e7d9      	b.n	800fce2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 800fd2e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800fd32:	441c      	add	r4, r3
 800fd34:	b2a4      	uxth	r4, r4
 800fd36:	b226      	sxth	r6, r4
 800fd38:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800fd3c:	42b3      	cmp	r3, r6
 800fd3e:	dac8      	bge.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800fd40:	4653      	mov	r3, sl
 800fd42:	464a      	mov	r2, r9
 800fd44:	4641      	mov	r1, r8
 800fd46:	4628      	mov	r0, r5
 800fd48:	e9cd b700 	strd	fp, r7, [sp]
 800fd4c:	f7ff ff98 	bl	800fc80 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800fd50:	b940      	cbnz	r0, 800fd64 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 800fd52:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d004      	beq.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	105b      	asrs	r3, r3, #1
 800fd5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fd62:	e7ed      	b.n	800fd40 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 800fd64:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800fd68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	441a      	add	r2, r3
 800fd72:	f8ad 3008 	strh.w	r3, [sp, #8]
 800fd76:	b212      	sxth	r2, r2
 800fd78:	4296      	cmp	r6, r2
 800fd7a:	dadd      	bge.n	800fd38 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 800fd7c:	1ae3      	subs	r3, r4, r3
 800fd7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fd82:	e7d9      	b.n	800fd38 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 800fd84:	24025264 	.word	0x24025264

0800fd88 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fd88:	0c0b      	lsrs	r3, r1, #16
 800fd8a:	60c1      	str	r1, [r0, #12]
 800fd8c:	7481      	strb	r1, [r0, #18]
 800fd8e:	7403      	strb	r3, [r0, #16]
 800fd90:	0a0b      	lsrs	r3, r1, #8
 800fd92:	7443      	strb	r3, [r0, #17]
 800fd94:	4770      	bx	lr

0800fd96 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fd96:	f1a0 0008 	sub.w	r0, r0, #8
 800fd9a:	e7f5      	b.n	800fd88 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0800fd9c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800fd9c:	b508      	push	{r3, lr}
 800fd9e:	4b05      	ldr	r3, [pc, #20]	@ (800fdb4 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800fda0:	6818      	ldr	r0, [r3, #0]
 800fda2:	6803      	ldr	r3, [r0, #0]
 800fda4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fda8:	4798      	blx	r3
 800fdaa:	1e43      	subs	r3, r0, #1
 800fdac:	4258      	negs	r0, r3
 800fdae:	4158      	adcs	r0, r3
 800fdb0:	bd08      	pop	{r3, pc}
 800fdb2:	bf00      	nop
 800fdb4:	2402526c 	.word	0x2402526c

0800fdb8 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800fdb8:	4770      	bx	lr

0800fdba <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800fdba:	3808      	subs	r0, #8
 800fdbc:	4770      	bx	lr

0800fdbe <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800fdbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fdc2:	b410      	push	{r4}
 800fdc4:	188c      	adds	r4, r1, r2
 800fdc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fdca:	68c2      	ldr	r2, [r0, #12]
 800fdcc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdd6:	f7f3 b879 	b.w	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800fdda <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800fdda:	f7f3 b853 	b.w	8002e84 <_ZN8touchgfx5paint8tearDownEv>

0800fdde <_ZN8touchgfx13PainterRGB888D0Ev>:
 800fdde:	b510      	push	{r4, lr}
 800fde0:	4604      	mov	r4, r0
 800fde2:	2114      	movs	r1, #20
 800fde4:	f011 ff05 	bl	8021bf2 <_ZdlPvj>
 800fde8:	4620      	mov	r0, r4
 800fdea:	bd10      	pop	{r4, pc}

0800fdec <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800fdec:	f1a0 0008 	sub.w	r0, r0, #8
 800fdf0:	e7f5      	b.n	800fdde <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800fdf4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800fdf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdfc:	4411      	add	r1, r2
 800fdfe:	7c42      	ldrb	r2, [r0, #17]
 800fe00:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800fe04:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800fe08:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800fe0c:	2a00      	cmp	r2, #0
 800fe0e:	f000 8084 	beq.w	800ff1a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800fe12:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800fe16:	ed90 7a08 	vldr	s14, [r0, #32]
 800fe1a:	42a2      	cmp	r2, r4
 800fe1c:	68c3      	ldr	r3, [r0, #12]
 800fe1e:	db20      	blt.n	800fe62 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800fe20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe24:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2c:	bfc8      	it	gt
 800fe2e:	2200      	movgt	r2, #0
 800fe30:	589a      	ldr	r2, [r3, r2]
 800fe32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800fe36:	7c03      	ldrb	r3, [r0, #16]
 800fe38:	fa5f fc82 	uxtb.w	ip, r2
 800fe3c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800fe40:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800fe44:	440e      	add	r6, r1
 800fe46:	b36b      	cbz	r3, 800fea4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fe48:	2dff      	cmp	r5, #255	@ 0xff
 800fe4a:	d12b      	bne.n	800fea4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fe4c:	42b1      	cmp	r1, r6
 800fe4e:	f080 8204 	bcs.w	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fe52:	f881 c000 	strb.w	ip, [r1]
 800fe56:	3103      	adds	r1, #3
 800fe58:	f801 7c02 	strb.w	r7, [r1, #-2]
 800fe5c:	f801 4c01 	strb.w	r4, [r1, #-1]
 800fe60:	e7f4      	b.n	800fe4c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800fe62:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 800fe66:	42a7      	cmp	r7, r4
 800fe68:	dc08      	bgt.n	800fe7c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800fe6a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe6e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fe72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe76:	bfd8      	it	le
 800fe78:	2200      	movle	r2, #0
 800fe7a:	e7d9      	b.n	800fe30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fe7c:	1aa2      	subs	r2, r4, r2
 800fe7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe82:	ee07 2a90 	vmov	s15, r2
 800fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe96:	ee17 2a90 	vmov	r2, s15
 800fe9a:	bfd8      	it	le
 800fe9c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800fea0:	0092      	lsls	r2, r2, #2
 800fea2:	e7c5      	b.n	800fe30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fea4:	0e12      	lsrs	r2, r2, #24
 800fea6:	4355      	muls	r5, r2
 800fea8:	1c6a      	adds	r2, r5, #1
 800feaa:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800feae:	122d      	asrs	r5, r5, #8
 800feb0:	43e8      	mvns	r0, r5
 800feb2:	b2ad      	uxth	r5, r5
 800feb4:	fb1c fc05 	smulbb	ip, ip, r5
 800feb8:	b2c0      	uxtb	r0, r0
 800feba:	fb17 f705 	smulbb	r7, r7, r5
 800febe:	fb14 f505 	smulbb	r5, r4, r5
 800fec2:	fa1f fc8c 	uxth.w	ip, ip
 800fec6:	b2bf      	uxth	r7, r7
 800fec8:	b2ad      	uxth	r5, r5
 800feca:	428e      	cmp	r6, r1
 800fecc:	f101 0303 	add.w	r3, r1, #3
 800fed0:	f240 81c3 	bls.w	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fed4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800fed8:	fb02 c200 	mla	r2, r2, r0, ip
 800fedc:	b292      	uxth	r2, r2
 800fede:	1c51      	adds	r1, r2, #1
 800fee0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fee4:	1212      	asrs	r2, r2, #8
 800fee6:	f803 2c03 	strb.w	r2, [r3, #-3]
 800feea:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800feee:	fb02 7200 	mla	r2, r2, r0, r7
 800fef2:	b292      	uxth	r2, r2
 800fef4:	1c51      	adds	r1, r2, #1
 800fef6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fefa:	1212      	asrs	r2, r2, #8
 800fefc:	f803 2c02 	strb.w	r2, [r3, #-2]
 800ff00:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800ff04:	fb02 5200 	mla	r2, r2, r0, r5
 800ff08:	b292      	uxth	r2, r2
 800ff0a:	1c51      	adds	r1, r2, #1
 800ff0c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ff10:	4619      	mov	r1, r3
 800ff12:	1212      	asrs	r2, r2, #8
 800ff14:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ff18:	e7d7      	b.n	800feca <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800ff1a:	7c82      	ldrb	r2, [r0, #18]
 800ff1c:	2a00      	cmp	r2, #0
 800ff1e:	d047      	beq.n	800ffb0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800ff20:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800ff24:	ee07 2a10 	vmov	s14, r2
 800ff28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff2c:	ee07 3a90 	vmov	s15, r3
 800ff30:	461a      	mov	r2, r3
 800ff32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ff36:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ff3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3e:	f200 808e 	bhi.w	801005e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800ff42:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ff46:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800ff4a:	68c7      	ldr	r7, [r0, #12]
 800ff4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ff54:	ee06 6a90 	vmov	s13, r6
 800ff58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ff5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ff60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff64:	bf4a      	itet	mi
 800ff66:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800ff6a:	4634      	movpl	r4, r6
 800ff6c:	ee17 4a90 	vmovmi	r4, s15
 800ff70:	edd0 7a08 	vldr	s15, [r0, #32]
 800ff74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff78:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800ff7c:	448e      	add	lr, r1
 800ff7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff82:	bfc8      	it	gt
 800ff84:	2200      	movgt	r2, #0
 800ff86:	58bf      	ldr	r7, [r7, r2]
 800ff88:	7c02      	ldrb	r2, [r0, #16]
 800ff8a:	fa5f f987 	uxtb.w	r9, r7
 800ff8e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800ff92:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800ff96:	b31a      	cbz	r2, 800ffe0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800ff98:	2dff      	cmp	r5, #255	@ 0xff
 800ff9a:	d121      	bne.n	800ffe0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800ff9c:	4571      	cmp	r1, lr
 800ff9e:	d25d      	bcs.n	801005c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800ffa0:	f881 9000 	strb.w	r9, [r1]
 800ffa4:	3103      	adds	r1, #3
 800ffa6:	f801 8c02 	strb.w	r8, [r1, #-2]
 800ffaa:	f801 cc01 	strb.w	ip, [r1, #-1]
 800ffae:	e7f5      	b.n	800ff9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800ffb0:	ee07 4a90 	vmov	s15, r4
 800ffb4:	ed90 7a06 	vldr	s14, [r0, #24]
 800ffb8:	edd0 6a05 	vldr	s13, [r0, #20]
 800ffbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ffc8:	edd0 7a08 	vldr	s15, [r0, #32]
 800ffcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ffd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd4:	bf44      	itt	mi
 800ffd6:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800ffda:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800ffde:	e7a5      	b.n	800ff2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800ffe0:	0e3f      	lsrs	r7, r7, #24
 800ffe2:	436f      	muls	r7, r5
 800ffe4:	1c7a      	adds	r2, r7, #1
 800ffe6:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800ffea:	1212      	asrs	r2, r2, #8
 800ffec:	ea6f 0a02 	mvn.w	sl, r2
 800fff0:	b292      	uxth	r2, r2
 800fff2:	fb19 f902 	smulbb	r9, r9, r2
 800fff6:	fa5f fa8a 	uxtb.w	sl, sl
 800fffa:	fb18 f802 	smulbb	r8, r8, r2
 800fffe:	fb1c fc02 	smulbb	ip, ip, r2
 8010002:	fa1f f989 	uxth.w	r9, r9
 8010006:	fa1f f888 	uxth.w	r8, r8
 801000a:	fa1f fc8c 	uxth.w	ip, ip
 801000e:	458e      	cmp	lr, r1
 8010010:	f101 0203 	add.w	r2, r1, #3
 8010014:	d922      	bls.n	801005c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010016:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801001a:	fb01 910a 	mla	r1, r1, sl, r9
 801001e:	b289      	uxth	r1, r1
 8010020:	1c4f      	adds	r7, r1, #1
 8010022:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010026:	1209      	asrs	r1, r1, #8
 8010028:	f802 1c03 	strb.w	r1, [r2, #-3]
 801002c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010030:	fb01 810a 	mla	r1, r1, sl, r8
 8010034:	b289      	uxth	r1, r1
 8010036:	1c4f      	adds	r7, r1, #1
 8010038:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801003c:	1209      	asrs	r1, r1, #8
 801003e:	f802 1c02 	strb.w	r1, [r2, #-2]
 8010042:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010046:	fb01 c10a 	mla	r1, r1, sl, ip
 801004a:	b289      	uxth	r1, r1
 801004c:	1c4f      	adds	r7, r1, #1
 801004e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010052:	1209      	asrs	r1, r1, #8
 8010054:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010058:	4611      	mov	r1, r2
 801005a:	e7d8      	b.n	801000e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801005c:	191a      	adds	r2, r3, r4
 801005e:	4433      	add	r3, r6
 8010060:	b21b      	sxth	r3, r3
 8010062:	4293      	cmp	r3, r2
 8010064:	f340 80f9 	ble.w	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010068:	edd0 7a07 	vldr	s15, [r0, #28]
 801006c:	ee06 2a90 	vmov	s13, r2
 8010070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010074:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010078:	eef4 7ae6 	vcmpe.f32	s15, s13
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	f340 80b0 	ble.w	80101e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8010084:	ee06 3a10 	vmov	s12, r3
 8010088:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801008c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8010260 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8010090:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010094:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010098:	ed90 6a08 	vldr	s12, [r0, #32]
 801009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80100a4:	bfd6      	itet	le
 80100a6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80100aa:	469c      	movgt	ip, r3
 80100ac:	ee17 ca90 	vmovle	ip, s15
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8010264 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 80100b8:	ebac 0202 	sub.w	r2, ip, r2
 80100bc:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80100c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80100c8:	188c      	adds	r4, r1, r2
 80100ca:	7c02      	ldrb	r2, [r0, #16]
 80100cc:	b1d2      	cbz	r2, 8010104 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80100ce:	2dff      	cmp	r5, #255	@ 0xff
 80100d0:	d118      	bne.n	8010104 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80100d2:	42a1      	cmp	r1, r4
 80100d4:	d261      	bcs.n	801019a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80100d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80100da:	68c6      	ldr	r6, [r0, #12]
 80100dc:	3103      	adds	r1, #3
 80100de:	ee17 7a10 	vmov	r7, s14
 80100e2:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 80100e6:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 80100ea:	f801 6c03 	strb.w	r6, [r1, #-3]
 80100ee:	7856      	ldrb	r6, [r2, #1]
 80100f0:	f801 6c02 	strb.w	r6, [r1, #-2]
 80100f4:	7892      	ldrb	r2, [r2, #2]
 80100f6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80100fa:	ed90 7a08 	vldr	s14, [r0, #32]
 80100fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010102:	e7e6      	b.n	80100d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8010104:	68c2      	ldr	r2, [r0, #12]
 8010106:	428c      	cmp	r4, r1
 8010108:	f101 0e03 	add.w	lr, r1, #3
 801010c:	d945      	bls.n	801019a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801010e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010112:	ee17 9a10 	vmov	r9, s14
 8010116:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801011a:	f898 7003 	ldrb.w	r7, [r8, #3]
 801011e:	fb07 f605 	mul.w	r6, r7, r5
 8010122:	1c77      	adds	r7, r6, #1
 8010124:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8010128:	123f      	asrs	r7, r7, #8
 801012a:	b2b9      	uxth	r1, r7
 801012c:	43ff      	mvns	r7, r7
 801012e:	b2fe      	uxtb	r6, r7
 8010130:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8010134:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8010138:	fb19 f906 	smulbb	r9, r9, r6
 801013c:	fb07 9701 	mla	r7, r7, r1, r9
 8010140:	b2bf      	uxth	r7, r7
 8010142:	f107 0901 	add.w	r9, r7, #1
 8010146:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801014a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801014e:	fb19 f906 	smulbb	r9, r9, r6
 8010152:	123f      	asrs	r7, r7, #8
 8010154:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8010158:	f898 7001 	ldrb.w	r7, [r8, #1]
 801015c:	fb07 9701 	mla	r7, r7, r1, r9
 8010160:	b2bf      	uxth	r7, r7
 8010162:	f107 0901 	add.w	r9, r7, #1
 8010166:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801016a:	123f      	asrs	r7, r7, #8
 801016c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8010170:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8010174:	f898 8002 	ldrb.w	r8, [r8, #2]
 8010178:	fb17 f606 	smulbb	r6, r7, r6
 801017c:	fb08 6601 	mla	r6, r8, r1, r6
 8010180:	b2b6      	uxth	r6, r6
 8010182:	1c71      	adds	r1, r6, #1
 8010184:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8010188:	4671      	mov	r1, lr
 801018a:	1236      	asrs	r6, r6, #8
 801018c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8010190:	ed90 7a08 	vldr	s14, [r0, #32]
 8010194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010198:	e7b5      	b.n	8010106 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801019a:	4563      	cmp	r3, ip
 801019c:	dd5d      	ble.n	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801019e:	edd0 7a08 	vldr	s15, [r0, #32]
 80101a2:	eba3 030c 	sub.w	r3, r3, ip
 80101a6:	68c4      	ldr	r4, [r0, #12]
 80101a8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80101ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101b4:	7c00      	ldrb	r0, [r0, #16]
 80101b6:	440b      	add	r3, r1
 80101b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101bc:	bfd8      	it	le
 80101be:	2200      	movle	r2, #0
 80101c0:	58a2      	ldr	r2, [r4, r2]
 80101c2:	b2d4      	uxtb	r4, r2
 80101c4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80101c8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80101cc:	b160      	cbz	r0, 80101e8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80101ce:	2dff      	cmp	r5, #255	@ 0xff
 80101d0:	d10a      	bne.n	80101e8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80101d2:	4299      	cmp	r1, r3
 80101d4:	d241      	bcs.n	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80101d6:	700c      	strb	r4, [r1, #0]
 80101d8:	3103      	adds	r1, #3
 80101da:	f801 cc02 	strb.w	ip, [r1, #-2]
 80101de:	f801 7c01 	strb.w	r7, [r1, #-1]
 80101e2:	e7f6      	b.n	80101d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 80101e4:	4694      	mov	ip, r2
 80101e6:	e7da      	b.n	801019e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 80101e8:	0e12      	lsrs	r2, r2, #24
 80101ea:	436a      	muls	r2, r5
 80101ec:	1c55      	adds	r5, r2, #1
 80101ee:	eb05 2522 	add.w	r5, r5, r2, asr #8
 80101f2:	122d      	asrs	r5, r5, #8
 80101f4:	43ee      	mvns	r6, r5
 80101f6:	b2ad      	uxth	r5, r5
 80101f8:	fb14 f405 	smulbb	r4, r4, r5
 80101fc:	b2f6      	uxtb	r6, r6
 80101fe:	fb1c f005 	smulbb	r0, ip, r5
 8010202:	fb17 f505 	smulbb	r5, r7, r5
 8010206:	b2a4      	uxth	r4, r4
 8010208:	b280      	uxth	r0, r0
 801020a:	b2ad      	uxth	r5, r5
 801020c:	428b      	cmp	r3, r1
 801020e:	f101 0203 	add.w	r2, r1, #3
 8010212:	d922      	bls.n	801025a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010214:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010218:	fb01 4106 	mla	r1, r1, r6, r4
 801021c:	b289      	uxth	r1, r1
 801021e:	1c4f      	adds	r7, r1, #1
 8010220:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010224:	1209      	asrs	r1, r1, #8
 8010226:	f802 1c03 	strb.w	r1, [r2, #-3]
 801022a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801022e:	fb01 0106 	mla	r1, r1, r6, r0
 8010232:	b289      	uxth	r1, r1
 8010234:	1c4f      	adds	r7, r1, #1
 8010236:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801023a:	1209      	asrs	r1, r1, #8
 801023c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8010240:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010244:	fb01 5106 	mla	r1, r1, r6, r5
 8010248:	b289      	uxth	r1, r1
 801024a:	1c4f      	adds	r7, r1, #1
 801024c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010250:	1209      	asrs	r1, r1, #8
 8010252:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010256:	4611      	mov	r1, r2
 8010258:	e7d8      	b.n	801020c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025e:	bf00      	nop
 8010260:	447ffffe 	.word	0x447ffffe
 8010264:	00000000 	.word	0x00000000

08010268 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8010268:	4770      	bx	lr

0801026a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801026a:	4770      	bx	lr

0801026c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801026c:	b510      	push	{r4, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	2124      	movs	r1, #36	@ 0x24
 8010272:	f011 fcbe 	bl	8021bf2 <_ZdlPvj>
 8010276:	4620      	mov	r0, r4
 8010278:	bd10      	pop	{r4, pc}
	...

0801027c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801027c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801027e:	6803      	ldr	r3, [r0, #0]
 8010280:	460d      	mov	r5, r1
 8010282:	4604      	mov	r4, r0
 8010284:	4601      	mov	r1, r0
 8010286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010288:	a802      	add	r0, sp, #8
 801028a:	4798      	blx	r3
 801028c:	6828      	ldr	r0, [r5, #0]
 801028e:	6869      	ldr	r1, [r5, #4]
 8010290:	466b      	mov	r3, sp
 8010292:	c303      	stmia	r3!, {r0, r1}
 8010294:	4668      	mov	r0, sp
 8010296:	4619      	mov	r1, r3
 8010298:	f7fd fc06 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801029c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801029e:	b188      	cbz	r0, 80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102a0:	6803      	ldr	r3, [r0, #0]
 80102a2:	1d21      	adds	r1, r4, #4
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	4798      	blx	r3
 80102a8:	b160      	cbz	r0, 80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	dd08      	ble.n	80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102b2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80102b6:	2d00      	cmp	r5, #0
 80102b8:	dd04      	ble.n	80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102ba:	4a2b      	ldr	r2, [pc, #172]	@ (8010368 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80102bc:	7812      	ldrb	r2, [r2, #0]
 80102be:	b11a      	cbz	r2, 80102c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80102c0:	2a01      	cmp	r2, #1
 80102c2:	d029      	beq.n	8010318 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80102c4:	b004      	add	sp, #16
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80102cc:	441d      	add	r5, r3
 80102ce:	b2ad      	uxth	r5, r5
 80102d0:	b22e      	sxth	r6, r5
 80102d2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80102d6:	42b3      	cmp	r3, r6
 80102d8:	daf4      	bge.n	80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	4669      	mov	r1, sp
 80102de:	4620      	mov	r0, r4
 80102e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102e2:	4798      	blx	r3
 80102e4:	b940      	cbnz	r0, 80102f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80102e6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d004      	beq.n	80102f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80102ee:	3301      	adds	r3, #1
 80102f0:	105b      	asrs	r3, r3, #1
 80102f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80102f6:	e7f0      	b.n	80102da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80102f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80102fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010300:	4413      	add	r3, r2
 8010302:	b29b      	uxth	r3, r3
 8010304:	441a      	add	r2, r3
 8010306:	f8ad 3002 	strh.w	r3, [sp, #2]
 801030a:	b212      	sxth	r2, r2
 801030c:	4296      	cmp	r6, r2
 801030e:	dae0      	bge.n	80102d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010310:	1aeb      	subs	r3, r5, r3
 8010312:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010316:	e7dc      	b.n	80102d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010318:	f8bd 5000 	ldrh.w	r5, [sp]
 801031c:	441d      	add	r5, r3
 801031e:	b2ad      	uxth	r5, r5
 8010320:	b22e      	sxth	r6, r5
 8010322:	f9bd 3000 	ldrsh.w	r3, [sp]
 8010326:	42b3      	cmp	r3, r6
 8010328:	dacc      	bge.n	80102c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	4669      	mov	r1, sp
 801032e:	4620      	mov	r0, r4
 8010330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010332:	4798      	blx	r3
 8010334:	b940      	cbnz	r0, 8010348 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8010336:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801033a:	2b01      	cmp	r3, #1
 801033c:	d004      	beq.n	8010348 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801033e:	3301      	adds	r3, #1
 8010340:	105b      	asrs	r3, r3, #1
 8010342:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010346:	e7f0      	b.n	801032a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8010348:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801034c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010350:	4413      	add	r3, r2
 8010352:	b29b      	uxth	r3, r3
 8010354:	441a      	add	r2, r3
 8010356:	f8ad 3000 	strh.w	r3, [sp]
 801035a:	b212      	sxth	r2, r2
 801035c:	4296      	cmp	r6, r2
 801035e:	dae0      	bge.n	8010322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010360:	1aeb      	subs	r3, r5, r3
 8010362:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010366:	e7dc      	b.n	8010322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010368:	24025264 	.word	0x24025264

0801036c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801036c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801036e:	6803      	ldr	r3, [r0, #0]
 8010370:	4604      	mov	r4, r0
 8010372:	4601      	mov	r1, r0
 8010374:	4668      	mov	r0, sp
 8010376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010378:	4798      	blx	r3
 801037a:	2100      	movs	r1, #0
 801037c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010380:	4668      	mov	r0, sp
 8010382:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010386:	9102      	str	r1, [sp, #8]
 8010388:	a902      	add	r1, sp, #8
 801038a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801038e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010392:	f7fd fb89 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	4669      	mov	r1, sp
 801039a:	4620      	mov	r0, r4
 801039c:	691b      	ldr	r3, [r3, #16]
 801039e:	4798      	blx	r3
 80103a0:	b004      	add	sp, #16
 80103a2:	bd10      	pop	{r4, pc}

080103a4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80103a4:	2101      	movs	r1, #1
 80103a6:	2200      	movs	r2, #0
 80103a8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80103ac:	490a      	ldr	r1, [pc, #40]	@ (80103d8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80103ae:	8082      	strh	r2, [r0, #4]
 80103b0:	6001      	str	r1, [r0, #0]
 80103b2:	21ff      	movs	r1, #255	@ 0xff
 80103b4:	80c2      	strh	r2, [r0, #6]
 80103b6:	8102      	strh	r2, [r0, #8]
 80103b8:	8142      	strh	r2, [r0, #10]
 80103ba:	8182      	strh	r2, [r0, #12]
 80103bc:	81c2      	strh	r2, [r0, #14]
 80103be:	8202      	strh	r2, [r0, #16]
 80103c0:	8242      	strh	r2, [r0, #18]
 80103c2:	61c2      	str	r2, [r0, #28]
 80103c4:	8402      	strh	r2, [r0, #32]
 80103c6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80103c8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80103cc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80103d0:	6282      	str	r2, [r0, #40]	@ 0x28
 80103d2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80103d6:	4770      	bx	lr
 80103d8:	08026400 	.word	0x08026400

080103dc <_ZNK8touchgfx5Image17invalidateContentEv>:
 80103dc:	b508      	push	{r3, lr}
 80103de:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80103e2:	b10b      	cbz	r3, 80103e8 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 80103e4:	f7f2 ffeb 	bl	80033be <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80103e8:	bd08      	pop	{r3, pc}

080103ea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 80103ea:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80103ee:	4770      	bx	lr

080103f0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 80103f0:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80103f4:	4770      	bx	lr

080103f6 <_ZN8touchgfx13ScalableImageD1Ev>:
 80103f6:	4770      	bx	lr

080103f8 <_ZN8touchgfx13ScalableImageD0Ev>:
 80103f8:	b510      	push	{r4, lr}
 80103fa:	4604      	mov	r4, r0
 80103fc:	212c      	movs	r1, #44	@ 0x2c
 80103fe:	f011 fbf8 	bl	8021bf2 <_ZdlPvj>
 8010402:	4620      	mov	r0, r4
 8010404:	bd10      	pop	{r4, pc}

08010406 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8010406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010408:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801040c:	b085      	sub	sp, #20
 801040e:	4604      	mov	r4, r0
 8010410:	460d      	mov	r5, r1
 8010412:	2bff      	cmp	r3, #255	@ 0xff
 8010414:	d128      	bne.n	8010468 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8010416:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 801041a:	4668      	mov	r0, sp
 801041c:	4631      	mov	r1, r6
 801041e:	f006 fe55 	bl	80170cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010422:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8010426:	4630      	mov	r0, r6
 8010428:	f006 fde8 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801042c:	4287      	cmp	r7, r0
 801042e:	d11b      	bne.n	8010468 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8010430:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8010434:	4630      	mov	r0, r6
 8010436:	f006 fe15 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801043a:	4287      	cmp	r7, r0
 801043c:	d114      	bne.n	8010468 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 801043e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8010442:	2100      	movs	r1, #0
 8010444:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8010448:	f8ad 300e 	strh.w	r3, [sp, #14]
 801044c:	466b      	mov	r3, sp
 801044e:	9102      	str	r1, [sp, #8]
 8010450:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010454:	cb03      	ldmia	r3!, {r0, r1}
 8010456:	6020      	str	r0, [r4, #0]
 8010458:	4620      	mov	r0, r4
 801045a:	6061      	str	r1, [r4, #4]
 801045c:	4619      	mov	r1, r3
 801045e:	f7fd fb23 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8010462:	4620      	mov	r0, r4
 8010464:	b005      	add	sp, #20
 8010466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010468:	2300      	movs	r3, #0
 801046a:	8023      	strh	r3, [r4, #0]
 801046c:	8063      	strh	r3, [r4, #2]
 801046e:	80a3      	strh	r3, [r4, #4]
 8010470:	80e3      	strh	r3, [r4, #6]
 8010472:	e7f6      	b.n	8010462 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

08010474 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	2300      	movs	r3, #0
 8010478:	2501      	movs	r5, #1
 801047a:	4604      	mov	r4, r0
 801047c:	8083      	strh	r3, [r0, #4]
 801047e:	80c3      	strh	r3, [r0, #6]
 8010480:	8103      	strh	r3, [r0, #8]
 8010482:	8143      	strh	r3, [r0, #10]
 8010484:	8183      	strh	r3, [r0, #12]
 8010486:	81c3      	strh	r3, [r0, #14]
 8010488:	8203      	strh	r3, [r0, #16]
 801048a:	8243      	strh	r3, [r0, #18]
 801048c:	61c3      	str	r3, [r0, #28]
 801048e:	8403      	strh	r3, [r0, #32]
 8010490:	8443      	strh	r3, [r0, #34]	@ 0x22
 8010492:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8010496:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801049a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801049e:	4b07      	ldr	r3, [pc, #28]	@ (80104bc <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 80104a0:	6003      	str	r3, [r0, #0]
 80104a2:	880b      	ldrh	r3, [r1, #0]
 80104a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80104a6:	23ff      	movs	r3, #255	@ 0xff
 80104a8:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80104ac:	f000 fb6f 	bl	8010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80104b0:	4b03      	ldr	r3, [pc, #12]	@ (80104c0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 80104b2:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 80104b6:	4620      	mov	r0, r4
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	08026554 	.word	0x08026554
 80104c0:	08026478 	.word	0x08026478

080104c4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 80104c4:	4603      	mov	r3, r0
 80104c6:	3026      	adds	r0, #38	@ 0x26
 80104c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80104cc:	b90b      	cbnz	r3, 80104d2 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 80104ce:	f004 bdfb 	b.w	80150c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80104d2:	f004 be09 	b.w	80150e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080104d8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	4604      	mov	r4, r0
 80104de:	b0b3      	sub	sp, #204	@ 0xcc
 80104e0:	469b      	mov	fp, r3
 80104e2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80104e6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80104ea:	2500      	movs	r5, #0
 80104ec:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80104f0:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80104f4:	ab11      	add	r3, sp, #68	@ 0x44
 80104f6:	9206      	str	r2, [sp, #24]
 80104f8:	4618      	mov	r0, r3
 80104fa:	9511      	str	r5, [sp, #68]	@ 0x44
 80104fc:	9307      	str	r3, [sp, #28]
 80104fe:	ad13      	add	r5, sp, #76	@ 0x4c
 8010500:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 8010504:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 8010508:	f7fd face 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801050c:	9b07      	ldr	r3, [sp, #28]
 801050e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010512:	e885 0003 	stmia.w	r5, {r0, r1}
 8010516:	6821      	ldr	r1, [r4, #0]
 8010518:	4620      	mov	r0, r4
 801051a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801051c:	4629      	mov	r1, r5
 801051e:	47b0      	blx	r6
 8010520:	4621      	mov	r1, r4
 8010522:	a815      	add	r0, sp, #84	@ 0x54
 8010524:	1d26      	adds	r6, r4, #4
 8010526:	f004 f981 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801052a:	a815      	add	r0, sp, #84	@ 0x54
 801052c:	f002 fd76 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010530:	9b07      	ldr	r3, [sp, #28]
 8010532:	4631      	mov	r1, r6
 8010534:	4618      	mov	r0, r3
 8010536:	f002 fdb5 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801053a:	4628      	mov	r0, r5
 801053c:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8010540:	f002 fd6c 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010544:	4628      	mov	r0, r5
 8010546:	f006 fe4b 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801054a:	9007      	str	r0, [sp, #28]
 801054c:	2800      	cmp	r0, #0
 801054e:	f000 80ce 	beq.w	80106ee <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8010552:	f8db 200c 	ldr.w	r2, [fp, #12]
 8010556:	a809      	add	r0, sp, #36	@ 0x24
 8010558:	f8db 1000 	ldr.w	r1, [fp]
 801055c:	920c      	str	r2, [sp, #48]	@ 0x30
 801055e:	f8da 2000 	ldr.w	r2, [sl]
 8010562:	9109      	str	r1, [sp, #36]	@ 0x24
 8010564:	920d      	str	r2, [sp, #52]	@ 0x34
 8010566:	f8da 2004 	ldr.w	r2, [sl, #4]
 801056a:	f8db 1004 	ldr.w	r1, [fp, #4]
 801056e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010570:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010574:	910a      	str	r1, [sp, #40]	@ 0x28
 8010576:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010578:	f8db 1008 	ldr.w	r1, [fp, #8]
 801057c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010580:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010582:	a90d      	add	r1, sp, #52	@ 0x34
 8010584:	9210      	str	r2, [sp, #64]	@ 0x40
 8010586:	4632      	mov	r2, r6
 8010588:	f002 fd70 	bl	801306c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801058c:	4632      	mov	r2, r6
 801058e:	a90e      	add	r1, sp, #56	@ 0x38
 8010590:	a80a      	add	r0, sp, #40	@ 0x28
 8010592:	f002 fd6b 	bl	801306c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010596:	4632      	mov	r2, r6
 8010598:	a90f      	add	r1, sp, #60	@ 0x3c
 801059a:	a80b      	add	r0, sp, #44	@ 0x2c
 801059c:	f002 fd66 	bl	801306c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105a0:	4632      	mov	r2, r6
 80105a2:	a910      	add	r1, sp, #64	@ 0x40
 80105a4:	a80c      	add	r0, sp, #48	@ 0x30
 80105a6:	f002 fd61 	bl	801306c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105aa:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80105ae:	ed97 3a00 	vldr	s6, [r7]
 80105b2:	eef0 6a67 	vmov.f32	s13, s15
 80105b6:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80105ba:	edd7 4a01 	vldr	s9, [r7, #4]
 80105be:	eeb0 7a67 	vmov.f32	s14, s15
 80105c2:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80105c6:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80105ca:	ed99 2a00 	vldr	s4, [r9]
 80105ce:	eeb0 6a67 	vmov.f32	s12, s15
 80105d2:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80105d6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80105da:	edd8 2a00 	vldr	s5, [r8]
 80105de:	edd9 3a01 	vldr	s7, [r9, #4]
 80105e2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80105e6:	ed98 4a01 	vldr	s8, [r8, #4]
 80105ea:	ed99 5a02 	vldr	s10, [r9, #8]
 80105ee:	edd8 5a02 	vldr	s11, [r8, #8]
 80105f2:	ee16 6a10 	vmov	r6, s12
 80105f6:	eeb0 6a67 	vmov.f32	s12, s15
 80105fa:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80105fe:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010602:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010606:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801060a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801060e:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 8010612:	ee16 0a10 	vmov	r0, s12
 8010616:	eeb0 6a67 	vmov.f32	s12, s15
 801061a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801061e:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8010622:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010626:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 801062a:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 801062e:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8010632:	ee16 1a10 	vmov	r1, s12
 8010636:	eeb0 6a67 	vmov.f32	s12, s15
 801063a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801063e:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8010642:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010646:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 801064a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801064e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010652:	68ff      	ldr	r7, [r7, #12]
 8010654:	ee16 2a10 	vmov	r2, s12
 8010658:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 801065c:	9624      	str	r6, [sp, #144]	@ 0x90
 801065e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010662:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8010666:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 801066a:	4628      	mov	r0, r5
 801066c:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8010670:	9b06      	ldr	r3, [sp, #24]
 8010672:	922d      	str	r2, [sp, #180]	@ 0xb4
 8010674:	4a1f      	ldr	r2, [pc, #124]	@ (80106f4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 8010676:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010678:	8812      	ldrh	r2, [r2, #0]
 801067a:	9b07      	ldr	r3, [sp, #28]
 801067c:	9218      	str	r2, [sp, #96]	@ 0x60
 801067e:	9319      	str	r3, [sp, #100]	@ 0x64
 8010680:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8010684:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8010688:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 801068c:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8010690:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8010694:	9731      	str	r7, [sp, #196]	@ 0xc4
 8010696:	f006 fdd3 	bl	8017240 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801069a:	901a      	str	r0, [sp, #104]	@ 0x68
 801069c:	4628      	mov	r0, r5
 801069e:	f006 fcad 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80106a2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80106a4:	4628      	mov	r0, r5
 80106a6:	f006 fcdd 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106aa:	901c      	str	r0, [sp, #112]	@ 0x70
 80106ac:	4628      	mov	r0, r5
 80106ae:	f006 fca5 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80106b2:	4b11      	ldr	r3, [pc, #68]	@ (80106f8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 80106b4:	901d      	str	r0, [sp, #116]	@ 0x74
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80106bc:	b10a      	cbz	r2, 80106c2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 80106be:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80106c0:	b905      	cbnz	r5, 80106c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 80106c2:	689d      	ldr	r5, [r3, #8]
 80106c4:	682b      	ldr	r3, [r5, #0]
 80106c6:	4620      	mov	r0, r4
 80106c8:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80106ca:	f7ff fefb 	bl	80104c4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80106ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106d2:	aa1e      	add	r2, sp, #120	@ 0x78
 80106d4:	a917      	add	r1, sp, #92	@ 0x5c
 80106d6:	9304      	str	r3, [sp, #16]
 80106d8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80106dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80106e0:	ab13      	add	r3, sp, #76	@ 0x4c
 80106e2:	4628      	mov	r0, r5
 80106e4:	9301      	str	r3, [sp, #4]
 80106e6:	ab15      	add	r3, sp, #84	@ 0x54
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	ab19      	add	r3, sp, #100	@ 0x64
 80106ec:	47b0      	blx	r6
 80106ee:	b033      	add	sp, #204	@ 0xcc
 80106f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f4:	24025266 	.word	0x24025266
 80106f8:	2402526c 	.word	0x2402526c

080106fc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	ed2d 8b04 	vpush	{d8-d9}
 8010702:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8010706:	b098      	sub	sp, #96	@ 0x60
 8010708:	4604      	mov	r4, r0
 801070a:	460e      	mov	r6, r1
 801070c:	2b00      	cmp	r3, #0
 801070e:	d065      	beq.n	80107dc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8010710:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010714:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8010718:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 80107f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801071c:	ee09 3a10 	vmov	s18, r3
 8010720:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010724:	4628      	mov	r0, r5
 8010726:	ee08 3a90 	vmov	s17, r3
 801072a:	4b34      	ldr	r3, [pc, #208]	@ (80107fc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801072c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8010730:	930c      	str	r3, [sp, #48]	@ 0x30
 8010732:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010736:	930d      	str	r3, [sp, #52]	@ 0x34
 8010738:	930e      	str	r3, [sp, #56]	@ 0x38
 801073a:	ee39 9a08 	vadd.f32	s18, s18, s16
 801073e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010740:	f006 fc5c 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010744:	ee07 0a90 	vmov	s15, r0
 8010748:	4628      	mov	r0, r5
 801074a:	ee78 8a88 	vadd.f32	s17, s17, s16
 801074e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8010752:	f006 fc87 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010756:	4b2a      	ldr	r3, [pc, #168]	@ (8010800 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8010758:	ee07 0a90 	vmov	s15, r0
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010762:	eef0 7a48 	vmov.f32	s15, s16
 8010766:	2b01      	cmp	r3, #1
 8010768:	d13c      	bne.n	80107e4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801076a:	eef0 6a69 	vmov.f32	s13, s19
 801076e:	ee19 3a90 	vmov	r3, s19
 8010772:	eeb0 6a47 	vmov.f32	s12, s14
 8010776:	eef0 5a47 	vmov.f32	s11, s14
 801077a:	eef0 9a48 	vmov.f32	s19, s16
 801077e:	eeb0 7a48 	vmov.f32	s14, s16
 8010782:	9314      	str	r3, [sp, #80]	@ 0x50
 8010784:	ab14      	add	r3, sp, #80	@ 0x50
 8010786:	2200      	movs	r2, #0
 8010788:	4631      	mov	r1, r6
 801078a:	9303      	str	r3, [sp, #12]
 801078c:	ab10      	add	r3, sp, #64	@ 0x40
 801078e:	4620      	mov	r0, r4
 8010790:	edcd 7a04 	vstr	s15, [sp, #16]
 8010794:	9302      	str	r3, [sp, #8]
 8010796:	ab0c      	add	r3, sp, #48	@ 0x30
 8010798:	ed8d 9a05 	vstr	s18, [sp, #20]
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	ab08      	add	r3, sp, #32
 80107a0:	ed8d 9a06 	vstr	s18, [sp, #24]
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	ab04      	add	r3, sp, #16
 80107a8:	edcd 7a07 	vstr	s15, [sp, #28]
 80107ac:	edcd 7a08 	vstr	s15, [sp, #32]
 80107b0:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 80107b4:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80107b8:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 80107bc:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 80107c0:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 80107c4:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 80107c8:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 80107cc:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80107d0:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 80107d4:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 80107d8:	f7ff fe7e 	bl	80104d8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80107dc:	b018      	add	sp, #96	@ 0x60
 80107de:	ecbd 8b04 	vpop	{d8-d9}
 80107e2:	bd70      	pop	{r4, r5, r6, pc}
 80107e4:	eef0 6a47 	vmov.f32	s13, s14
 80107e8:	ee18 3a10 	vmov	r3, s16
 80107ec:	eef0 5a69 	vmov.f32	s11, s19
 80107f0:	eeb0 6a48 	vmov.f32	s12, s16
 80107f4:	e7c5      	b.n	8010782 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 80107f6:	bf00      	nop
 80107f8:	00000000 	.word	0x00000000
 80107fc:	42c80000 	.word	0x42c80000
 8010800:	24025264 	.word	0x24025264

08010804 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8010804:	4b07      	ldr	r3, [pc, #28]	@ (8010824 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8010806:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	4293      	cmp	r3, r2
 801080c:	bf81      	itttt	hi
 801080e:	4b06      	ldrhi	r3, [pc, #24]	@ (8010828 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8010810:	681b      	ldrhi	r3, [r3, #0]
 8010812:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8010816:	7858      	ldrbhi	r0, [r3, #1]
 8010818:	bf8c      	ite	hi
 801081a:	f000 0003 	andhi.w	r0, r0, #3
 801081e:	2000      	movls	r0, #0
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	240252c8 	.word	0x240252c8
 8010828:	240252c4 	.word	0x240252c4

0801082c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801082c:	4b11      	ldr	r3, [pc, #68]	@ (8010874 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801082e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010832:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8010834:	4604      	mov	r4, r0
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	428b      	cmp	r3, r1
 801083a:	d918      	bls.n	801086e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801083c:	6803      	ldr	r3, [r0, #0]
 801083e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8010840:	4b0d      	ldr	r3, [pc, #52]	@ (8010878 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8010842:	6818      	ldr	r0, [r3, #0]
 8010844:	f7f3 ff42 	bl	80046cc <_ZNK8touchgfx5Texts7getTextEt>
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	4606      	mov	r6, r0
 801084c:	4620      	mov	r0, r4
 801084e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010850:	4798      	blx	r3
 8010852:	6823      	ldr	r3, [r4, #0]
 8010854:	4607      	mov	r7, r0
 8010856:	4620      	mov	r0, r4
 8010858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801085c:	4798      	blx	r3
 801085e:	463a      	mov	r2, r7
 8010860:	4603      	mov	r3, r0
 8010862:	4631      	mov	r1, r6
 8010864:	4620      	mov	r0, r4
 8010866:	46ac      	mov	ip, r5
 8010868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801086c:	4760      	bx	ip
 801086e:	2000      	movs	r0, #0
 8010870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010874:	240252c8 	.word	0x240252c8
 8010878:	240252d0 	.word	0x240252d0

0801087c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801087c:	4b18      	ldr	r3, [pc, #96]	@ (80108e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801087e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010882:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8010884:	4604      	mov	r4, r0
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	428b      	cmp	r3, r1
 801088a:	d926      	bls.n	80108da <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801088c:	4b15      	ldr	r3, [pc, #84]	@ (80108e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8010894:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8010898:	4b13      	ldr	r3, [pc, #76]	@ (80108e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801089a:	7855      	ldrb	r5, [r2, #1]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80108a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80108a6:	6833      	ldr	r3, [r6, #0]
 80108a8:	69df      	ldr	r7, [r3, #28]
 80108aa:	4b10      	ldr	r3, [pc, #64]	@ (80108ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80108ac:	6818      	ldr	r0, [r3, #0]
 80108ae:	f7f3 ff0d 	bl	80046cc <_ZNK8touchgfx5Texts7getTextEt>
 80108b2:	6823      	ldr	r3, [r4, #0]
 80108b4:	4680      	mov	r8, r0
 80108b6:	4620      	mov	r0, r4
 80108b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108ba:	4798      	blx	r3
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	4681      	mov	r9, r0
 80108c0:	4620      	mov	r0, r4
 80108c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108c6:	4798      	blx	r3
 80108c8:	464b      	mov	r3, r9
 80108ca:	9000      	str	r0, [sp, #0]
 80108cc:	4642      	mov	r2, r8
 80108ce:	4629      	mov	r1, r5
 80108d0:	4630      	mov	r0, r6
 80108d2:	47b8      	blx	r7
 80108d4:	b003      	add	sp, #12
 80108d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108da:	2000      	movs	r0, #0
 80108dc:	e7fa      	b.n	80108d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80108de:	bf00      	nop
 80108e0:	240252c8 	.word	0x240252c8
 80108e4:	240252c4 	.word	0x240252c4
 80108e8:	240252cc 	.word	0x240252cc
 80108ec:	240252d0 	.word	0x240252d0

080108f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80108f0:	b40e      	push	{r1, r2, r3}
 80108f2:	4b30      	ldr	r3, [pc, #192]	@ (80109b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80108f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108f8:	881a      	ldrh	r2, [r3, #0]
 80108fa:	b09d      	sub	sp, #116	@ 0x74
 80108fc:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80108fe:	4604      	mov	r4, r0
 8010900:	429a      	cmp	r2, r3
 8010902:	d954      	bls.n	80109ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8010904:	aa26      	add	r2, sp, #152	@ 0x98
 8010906:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80109b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801090a:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80109bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801090e:	9202      	str	r2, [sp, #8]
 8010910:	f8d9 2000 	ldr.w	r2, [r9]
 8010914:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010918:	f8d8 3000 	ldr.w	r3, [r8]
 801091c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010920:	682b      	ldr	r3, [r5, #0]
 8010922:	4628      	mov	r0, r5
 8010924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010926:	4798      	blx	r3
 8010928:	4606      	mov	r6, r0
 801092a:	b207      	sxth	r7, r0
 801092c:	a803      	add	r0, sp, #12
 801092e:	f004 ff07 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 8010932:	682b      	ldr	r3, [r5, #0]
 8010934:	4628      	mov	r0, r5
 8010936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010938:	4798      	blx	r3
 801093a:	682b      	ldr	r3, [r5, #0]
 801093c:	4682      	mov	sl, r0
 801093e:	4628      	mov	r0, r5
 8010940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010942:	4798      	blx	r3
 8010944:	4653      	mov	r3, sl
 8010946:	9000      	str	r0, [sp, #0]
 8010948:	a803      	add	r0, sp, #12
 801094a:	9a02      	ldr	r2, [sp, #8]
 801094c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801094e:	f004 ff4a 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010952:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8010954:	f8d9 3000 	ldr.w	r3, [r9]
 8010958:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 801095c:	8925      	ldrh	r5, [r4, #8]
 801095e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8010962:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8010966:	eba5 050c 	sub.w	r5, r5, ip
 801096a:	784a      	ldrb	r2, [r1, #1]
 801096c:	f8d8 3000 	ldr.w	r3, [r8]
 8010970:	b22d      	sxth	r5, r5
 8010972:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8010976:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801097a:	9500      	str	r5, [sp, #0]
 801097c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010980:	a803      	add	r0, sp, #12
 8010982:	f002 f851 	bl	8012a28 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010986:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801098a:	b203      	sxth	r3, r0
 801098c:	18b9      	adds	r1, r7, r2
 801098e:	2900      	cmp	r1, #0
 8010990:	dd0b      	ble.n	80109aa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8010992:	3b01      	subs	r3, #1
 8010994:	fb13 f302 	smulbb	r3, r3, r2
 8010998:	fb16 3300 	smlabb	r3, r6, r0, r3
 801099c:	b21f      	sxth	r7, r3
 801099e:	4638      	mov	r0, r7
 80109a0:	b01d      	add	sp, #116	@ 0x74
 80109a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109a6:	b003      	add	sp, #12
 80109a8:	4770      	bx	lr
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	dcf7      	bgt.n	801099e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80109ae:	2700      	movs	r7, #0
 80109b0:	e7f5      	b.n	801099e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80109b2:	bf00      	nop
 80109b4:	240252c8 	.word	0x240252c8
 80109b8:	240252c4 	.word	0x240252c4
 80109bc:	240252cc 	.word	0x240252cc

080109c0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4b0e      	ldr	r3, [pc, #56]	@ (80109fc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80109c4:	4604      	mov	r4, r0
 80109c6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80109c8:	881b      	ldrh	r3, [r3, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d214      	bcs.n	80109f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80109ce:	6803      	ldr	r3, [r0, #0]
 80109d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109d2:	4798      	blx	r3
 80109d4:	6823      	ldr	r3, [r4, #0]
 80109d6:	4605      	mov	r5, r0
 80109d8:	4620      	mov	r0, r4
 80109da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109dc:	4798      	blx	r3
 80109de:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80109e2:	b22d      	sxth	r5, r5
 80109e4:	4601      	mov	r1, r0
 80109e6:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80109ea:	bf06      	itte	eq
 80109ec:	4602      	moveq	r2, r0
 80109ee:	4629      	moveq	r1, r5
 80109f0:	462a      	movne	r2, r5
 80109f2:	4620      	mov	r0, r4
 80109f4:	f7f3 faea 	bl	8003fcc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80109f8:	bd38      	pop	{r3, r4, r5, pc}
 80109fa:	bf00      	nop
 80109fc:	240252c8 	.word	0x240252c8

08010a00 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8010a00:	b530      	push	{r4, r5, lr}
 8010a02:	888b      	ldrh	r3, [r1, #4]
 8010a04:	b085      	sub	sp, #20
 8010a06:	4604      	mov	r4, r0
 8010a08:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010a0a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010a0e:	b923      	cbnz	r3, 8010a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8010a10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010a14:	b90b      	cbnz	r3, 8010a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8010a16:	f7ff ffd3 	bl	80109c0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8010a1a:	6823      	ldr	r3, [r4, #0]
 8010a1c:	466d      	mov	r5, sp
 8010a1e:	4621      	mov	r1, r4
 8010a20:	343c      	adds	r4, #60	@ 0x3c
 8010a22:	4628      	mov	r0, r5
 8010a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a28:	4798      	blx	r3
 8010a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a32:	b005      	add	sp, #20
 8010a34:	bd30      	pop	{r4, r5, pc}

08010a36 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010a36:	2300      	movs	r3, #0
 8010a38:	8083      	strh	r3, [r0, #4]
 8010a3a:	80c3      	strh	r3, [r0, #6]
 8010a3c:	8003      	strh	r3, [r0, #0]
 8010a3e:	8043      	strh	r3, [r0, #2]
 8010a40:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8010a44:	2bff      	cmp	r3, #255	@ 0xff
 8010a46:	bf01      	itttt	eq
 8010a48:	890b      	ldrheq	r3, [r1, #8]
 8010a4a:	8083      	strheq	r3, [r0, #4]
 8010a4c:	894b      	ldrheq	r3, [r1, #10]
 8010a4e:	80c3      	strheq	r3, [r0, #6]
 8010a50:	4770      	bx	lr
	...

08010a54 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8010a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a56:	4604      	mov	r4, r0
 8010a58:	466b      	mov	r3, sp
 8010a5a:	6808      	ldr	r0, [r1, #0]
 8010a5c:	6849      	ldr	r1, [r1, #4]
 8010a5e:	c303      	stmia	r3!, {r0, r1}
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	4669      	mov	r1, sp
 8010a64:	4620      	mov	r0, r4
 8010a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a68:	4798      	blx	r3
 8010a6a:	4b08      	ldr	r3, [pc, #32]	@ (8010a8c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010a72:	b10a      	cbz	r2, 8010a78 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8010a74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010a76:	b900      	cbnz	r0, 8010a7a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010a78:	6898      	ldr	r0, [r3, #8]
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	4669      	mov	r1, sp
 8010a7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010a80:	6a1d      	ldr	r5, [r3, #32]
 8010a82:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8010a86:	47a8      	blx	r5
 8010a88:	b003      	add	sp, #12
 8010a8a:	bd30      	pop	{r4, r5, pc}
 8010a8c:	2402526c 	.word	0x2402526c

08010a90 <_ZN8touchgfx3BoxD1Ev>:
 8010a90:	4770      	bx	lr

08010a92 <_ZN8touchgfx3BoxD0Ev>:
 8010a92:	b510      	push	{r4, lr}
 8010a94:	4604      	mov	r4, r0
 8010a96:	212c      	movs	r1, #44	@ 0x2c
 8010a98:	f011 f8ab 	bl	8021bf2 <_ZdlPvj>
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	bd10      	pop	{r4, pc}

08010aa0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8010aa0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8010aa4:	b12a      	cbz	r2, 8010ab2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010aa6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8010aaa:	b112      	cbz	r2, 8010ab2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010aac:	6803      	ldr	r3, [r0, #0]
 8010aae:	695b      	ldr	r3, [r3, #20]
 8010ab0:	4718      	bx	r3
 8010ab2:	4770      	bx	lr

08010ab4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8010ab4:	4b30      	ldr	r3, [pc, #192]	@ (8010b78 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8010ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aba:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8010abc:	b08d      	sub	sp, #52	@ 0x34
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	460f      	mov	r7, r1
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d954      	bls.n	8010b72 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8010ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8010b7c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8010aca:	6819      	ldr	r1, [r3, #0]
 8010acc:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8010ad0:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8010ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8010b80 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010adc:	2900      	cmp	r1, #0
 8010ade:	d048      	beq.n	8010b72 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8010ae0:	785a      	ldrb	r2, [r3, #1]
 8010ae2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8010ae6:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8010aea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8010aee:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010af2:	4b24      	ldr	r3, [pc, #144]	@ (8010b84 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8010af4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8010afe:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8010b02:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8010b06:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010b08:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8010b0c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8010b10:	9107      	str	r1, [sp, #28]
 8010b12:	f88d 8020 	strb.w	r8, [sp, #32]
 8010b16:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8010b1a:	9609      	str	r6, [sp, #36]	@ 0x24
 8010b1c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8010b20:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010b24:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8010b28:	b10b      	cbz	r3, 8010b2e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8010b2a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8010b2c:	b905      	cbnz	r5, 8010b30 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8010b2e:	6895      	ldr	r5, [r2, #8]
 8010b30:	ae05      	add	r6, sp, #20
 8010b32:	4621      	mov	r1, r4
 8010b34:	4630      	mov	r0, r6
 8010b36:	f003 fe79 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010b3a:	4b13      	ldr	r3, [pc, #76]	@ (8010b88 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8010b3c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8010b3e:	6818      	ldr	r0, [r3, #0]
 8010b40:	f7f3 fdc4 	bl	80046cc <_ZNK8touchgfx5Texts7getTextEt>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	4680      	mov	r8, r0
 8010b48:	4620      	mov	r0, r4
 8010b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b4c:	4798      	blx	r3
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	4681      	mov	r9, r0
 8010b52:	4620      	mov	r0, r4
 8010b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b58:	4798      	blx	r3
 8010b5a:	ab07      	add	r3, sp, #28
 8010b5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	463b      	mov	r3, r7
 8010b64:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8010b68:	4628      	mov	r0, r5
 8010b6a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010b6e:	f7f3 fd5f 	bl	8004630 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010b72:	b00d      	add	sp, #52	@ 0x34
 8010b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b78:	240252c8 	.word	0x240252c8
 8010b7c:	240252c4 	.word	0x240252c4
 8010b80:	240252cc 	.word	0x240252cc
 8010b84:	2402526c 	.word	0x2402526c
 8010b88:	240252d0 	.word	0x240252d0

08010b8c <_ZN8touchgfx5ImageD1Ev>:
 8010b8c:	4770      	bx	lr

08010b8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8010b8e:	b570      	push	{r4, r5, r6, lr}
 8010b90:	880b      	ldrh	r3, [r1, #0]
 8010b92:	460d      	mov	r5, r1
 8010b94:	4604      	mov	r4, r0
 8010b96:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8010b98:	4608      	mov	r0, r1
 8010b9a:	f006 fa2f 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	f006 fa5f 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	4605      	mov	r5, r0
 8010baa:	4631      	mov	r1, r6
 8010bac:	4620      	mov	r0, r4
 8010bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bb0:	4798      	blx	r3
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bbe:	4718      	bx	r3

08010bc0 <_ZN8touchgfx5ImageD0Ev>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	212c      	movs	r1, #44	@ 0x2c
 8010bc6:	f011 f814 	bl	8021bf2 <_ZdlPvj>
 8010bca:	4620      	mov	r0, r4
 8010bcc:	bd10      	pop	{r4, pc}

08010bce <_ZNK8touchgfx5Image12getSolidRectEv>:
 8010bce:	b510      	push	{r4, lr}
 8010bd0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	2bff      	cmp	r3, #255	@ 0xff
 8010bd8:	d006      	beq.n	8010be8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	8003      	strh	r3, [r0, #0]
 8010bde:	8043      	strh	r3, [r0, #2]
 8010be0:	8083      	strh	r3, [r0, #4]
 8010be2:	80c3      	strh	r3, [r0, #6]
 8010be4:	4620      	mov	r0, r4
 8010be6:	bd10      	pop	{r4, pc}
 8010be8:	3126      	adds	r1, #38	@ 0x26
 8010bea:	f006 fa6f 	bl	80170cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010bee:	e7f9      	b.n	8010be4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010bf0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	b088      	sub	sp, #32
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	460f      	mov	r7, r1
 8010bfc:	f854 3b26 	ldr.w	r3, [r4], #38
 8010c00:	a904      	add	r1, sp, #16
 8010c02:	4606      	mov	r6, r0
 8010c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c0a:	4798      	blx	r3
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f006 f9f5 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010c12:	4680      	mov	r8, r0
 8010c14:	4620      	mov	r0, r4
 8010c16:	f006 fa25 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010c1a:	9506      	str	r5, [sp, #24]
 8010c1c:	ad06      	add	r5, sp, #24
 8010c1e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010c22:	4639      	mov	r1, r7
 8010c24:	f8ad 801c 	strh.w	r8, [sp, #28]
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f7fc ff3d 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8010c2e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	dd19      	ble.n	8010c6a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010c36:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	dd15      	ble.n	8010c6a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010c70 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010c46:	b10a      	cbz	r2, 8010c4c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8010c48:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010c4a:	b900      	cbnz	r0, 8010c4e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010c4c:	6898      	ldr	r0, [r3, #8]
 8010c4e:	2701      	movs	r7, #1
 8010c50:	6801      	ldr	r1, [r0, #0]
 8010c52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010c56:	9702      	str	r7, [sp, #8]
 8010c58:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8010c5c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010c60:	e9cd 5600 	strd	r5, r6, [sp]
 8010c64:	688d      	ldr	r5, [r1, #8]
 8010c66:	4621      	mov	r1, r4
 8010c68:	47a8      	blx	r5
 8010c6a:	b008      	add	sp, #32
 8010c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c70:	2402526c 	.word	0x2402526c

08010c74 <_ZN8touchgfx7OutlineD1Ev>:
 8010c74:	4770      	bx	lr

08010c76 <_ZN8touchgfx7OutlineD0Ev>:
 8010c76:	b510      	push	{r4, lr}
 8010c78:	4604      	mov	r4, r0
 8010c7a:	2130      	movs	r1, #48	@ 0x30
 8010c7c:	f010 ffb9 	bl	8021bf2 <_ZdlPvj>
 8010c80:	4620      	mov	r0, r4
 8010c82:	bd10      	pop	{r4, pc}

08010c84 <_ZN8touchgfx7Outline5resetEv>:
 8010c84:	b510      	push	{r4, lr}
 8010c86:	4604      	mov	r4, r0
 8010c88:	f000 fe72 	bl	8011970 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8010c8c:	60e0      	str	r0, [r4, #12]
 8010c8e:	f000 fe75 	bl	801197c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8010c92:	68e3      	ldr	r3, [r4, #12]
 8010c94:	08c0      	lsrs	r0, r0, #3
 8010c96:	2200      	movs	r2, #0
 8010c98:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8010c9c:	6123      	str	r3, [r4, #16]
 8010c9e:	3801      	subs	r0, #1
 8010ca0:	60a2      	str	r2, [r4, #8]
 8010ca2:	6060      	str	r0, [r4, #4]
 8010ca4:	8019      	strh	r1, [r3, #0]
 8010ca6:	8059      	strh	r1, [r3, #2]
 8010ca8:	809a      	strh	r2, [r3, #4]
 8010caa:	80da      	strh	r2, [r3, #6]
 8010cac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010cae:	f023 0301 	bic.w	r3, r3, #1
 8010cb2:	f043 0302 	orr.w	r3, r3, #2
 8010cb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8010cb8:	bd10      	pop	{r4, pc}
	...

08010cbc <_ZN8touchgfx7OutlineC1Ev>:
 8010cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8010cbe:	b510      	push	{r4, lr}
 8010cc0:	6003      	str	r3, [r0, #0]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	6243      	str	r3, [r0, #36]	@ 0x24
 8010cc8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010ccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cd0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010cd4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8010cd8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010cdc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8010ce0:	f7ff ffd0 	bl	8010c84 <_ZN8touchgfx7Outline5resetEv>
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	bd10      	pop	{r4, pc}
 8010ce8:	080265c0 	.word	0x080265c0

08010cec <_ZN8touchgfx7Outline10renderLineEiiii>:
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	b093      	sub	sp, #76	@ 0x4c
 8010cf2:	1156      	asrs	r6, r2, #5
 8010cf4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8010cf6:	9305      	str	r3, [sp, #20]
 8010cf8:	1153      	asrs	r3, r2, #5
 8010cfa:	f004 051f 	and.w	r5, r4, #31
 8010cfe:	9303      	str	r3, [sp, #12]
 8010d00:	1163      	asrs	r3, r4, #5
 8010d02:	9504      	str	r5, [sp, #16]
 8010d04:	1165      	asrs	r5, r4, #5
 8010d06:	9306      	str	r3, [sp, #24]
 8010d08:	f002 031f 	and.w	r3, r2, #31
 8010d0c:	42ae      	cmp	r6, r5
 8010d0e:	f040 80f4 	bne.w	8010efa <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8010d12:	9c04      	ldr	r4, [sp, #16]
 8010d14:	9a05      	ldr	r2, [sp, #20]
 8010d16:	42a3      	cmp	r3, r4
 8010d18:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8010d1c:	6902      	ldr	r2, [r0, #16]
 8010d1e:	d125      	bne.n	8010d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010d20:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010d24:	459e      	cmp	lr, r3
 8010d26:	d103      	bne.n	8010d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8010d28:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010d2c:	429e      	cmp	r6, r3
 8010d2e:	d035      	beq.n	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010d30:	88d1      	ldrh	r1, [r2, #6]
 8010d32:	8893      	ldrh	r3, [r2, #4]
 8010d34:	430b      	orrs	r3, r1
 8010d36:	d010      	beq.n	8010d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010d38:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	db0c      	blt.n	8010d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010d40:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010d42:	428b      	cmp	r3, r1
 8010d44:	da09      	bge.n	8010d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010d46:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010d4a:	428b      	cmp	r3, r1
 8010d4c:	f103 0301 	add.w	r3, r3, #1
 8010d50:	bf38      	it	cc
 8010d52:	3208      	addcc	r2, #8
 8010d54:	6083      	str	r3, [r0, #8]
 8010d56:	bf38      	it	cc
 8010d58:	6102      	strcc	r2, [r0, #16]
 8010d5a:	6903      	ldr	r3, [r0, #16]
 8010d5c:	9a03      	ldr	r2, [sp, #12]
 8010d5e:	f8a3 e000 	strh.w	lr, [r3]
 8010d62:	805a      	strh	r2, [r3, #2]
 8010d64:	2200      	movs	r2, #0
 8010d66:	809a      	strh	r2, [r3, #4]
 8010d68:	80da      	strh	r2, [r3, #6]
 8010d6a:	e017      	b.n	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010d6c:	9c05      	ldr	r4, [sp, #20]
 8010d6e:	114e      	asrs	r6, r1, #5
 8010d70:	f001 0c1f 	and.w	ip, r1, #31
 8010d74:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010d78:	f004 041f 	and.w	r4, r4, #31
 8010d7c:	4576      	cmp	r6, lr
 8010d7e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8010d82:	9402      	str	r4, [sp, #8]
 8010d84:	9c04      	ldr	r4, [sp, #16]
 8010d86:	eba4 0403 	sub.w	r4, r4, r3
 8010d8a:	d10a      	bne.n	8010da2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8010d8c:	9b02      	ldr	r3, [sp, #8]
 8010d8e:	44a0      	add	r8, r4
 8010d90:	449c      	add	ip, r3
 8010d92:	f8a2 8004 	strh.w	r8, [r2, #4]
 8010d96:	fb04 a40c 	mla	r4, r4, ip, sl
 8010d9a:	80d4      	strh	r4, [r2, #6]
 8010d9c:	b013      	add	sp, #76	@ 0x4c
 8010d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da2:	9d05      	ldr	r5, [sp, #20]
 8010da4:	1a69      	subs	r1, r5, r1
 8010da6:	bf51      	iteee	pl
 8010da8:	f1cc 0520 	rsbpl	r5, ip, #32
 8010dac:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010db0:	4249      	negmi	r1, r1
 8010db2:	2500      	movmi	r5, #0
 8010db4:	bf5d      	ittte	pl
 8010db6:	436c      	mulpl	r4, r5
 8010db8:	2520      	movpl	r5, #32
 8010dba:	f04f 0901 	movpl.w	r9, #1
 8010dbe:	f04f 39ff 	movmi.w	r9, #4294967295
 8010dc2:	9501      	str	r5, [sp, #4]
 8010dc4:	9f01      	ldr	r7, [sp, #4]
 8010dc6:	444e      	add	r6, r9
 8010dc8:	fb94 f5f1 	sdiv	r5, r4, r1
 8010dcc:	fb01 4415 	mls	r4, r1, r5, r4
 8010dd0:	44bc      	add	ip, r7
 8010dd2:	2c00      	cmp	r4, #0
 8010dd4:	bfbc      	itt	lt
 8010dd6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8010dda:	1864      	addlt	r4, r4, r1
 8010ddc:	44a8      	add	r8, r5
 8010dde:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010de2:	f8a2 8004 	strh.w	r8, [r2, #4]
 8010de6:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010dea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010dee:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010df2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8010df6:	ea58 0202 	orrs.w	r2, r8, r2
 8010dfa:	d011      	beq.n	8010e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010dfc:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010e00:	f1b8 0f00 	cmp.w	r8, #0
 8010e04:	db0c      	blt.n	8010e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010e06:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010e08:	4590      	cmp	r8, r2
 8010e0a:	da09      	bge.n	8010e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010e0c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010e10:	4590      	cmp	r8, r2
 8010e12:	bf3c      	itt	cc
 8010e14:	f10c 0208 	addcc.w	r2, ip, #8
 8010e18:	6102      	strcc	r2, [r0, #16]
 8010e1a:	f108 0201 	add.w	r2, r8, #1
 8010e1e:	6082      	str	r2, [r0, #8]
 8010e20:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e24:	2700      	movs	r7, #0
 8010e26:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010e2a:	45b6      	cmp	lr, r6
 8010e2c:	f8ac 6000 	strh.w	r6, [ip]
 8010e30:	442b      	add	r3, r5
 8010e32:	f8ac 2002 	strh.w	r2, [ip, #2]
 8010e36:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010e3a:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010e3e:	d04b      	beq.n	8010ed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010e40:	9f04      	ldr	r7, [sp, #16]
 8010e42:	1a64      	subs	r4, r4, r1
 8010e44:	f04f 0a00 	mov.w	sl, #0
 8010e48:	1aff      	subs	r7, r7, r3
 8010e4a:	443d      	add	r5, r7
 8010e4c:	016d      	lsls	r5, r5, #5
 8010e4e:	fb95 f8f1 	sdiv	r8, r5, r1
 8010e52:	fb01 5518 	mls	r5, r1, r8, r5
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	bfbc      	itt	lt
 8010e5a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010e5e:	186d      	addlt	r5, r5, r1
 8010e60:	f108 0701 	add.w	r7, r8, #1
 8010e64:	9703      	str	r7, [sp, #12]
 8010e66:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e6a:	1964      	adds	r4, r4, r5
 8010e6c:	444e      	add	r6, r9
 8010e6e:	bf54      	ite	pl
 8010e70:	9f03      	ldrpl	r7, [sp, #12]
 8010e72:	4647      	movmi	r7, r8
 8010e74:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010e78:	bf58      	it	pl
 8010e7a:	1a64      	subpl	r4, r4, r1
 8010e7c:	443b      	add	r3, r7
 8010e7e:	44bb      	add	fp, r7
 8010e80:	f8ac b004 	strh.w	fp, [ip, #4]
 8010e84:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010e88:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010e8c:	f8ac b006 	strh.w	fp, [ip, #6]
 8010e90:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e94:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010e98:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010e9c:	ea5b 0707 	orrs.w	r7, fp, r7
 8010ea0:	d011      	beq.n	8010ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010ea2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010ea6:	f1bb 0f00 	cmp.w	fp, #0
 8010eaa:	db0c      	blt.n	8010ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010eac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010eae:	45bb      	cmp	fp, r7
 8010eb0:	da09      	bge.n	8010ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010eb2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010eb6:	45bb      	cmp	fp, r7
 8010eb8:	bf3c      	itt	cc
 8010eba:	f10c 0708 	addcc.w	r7, ip, #8
 8010ebe:	6107      	strcc	r7, [r0, #16]
 8010ec0:	f10b 0701 	add.w	r7, fp, #1
 8010ec4:	6087      	str	r7, [r0, #8]
 8010ec6:	6907      	ldr	r7, [r0, #16]
 8010ec8:	45b6      	cmp	lr, r6
 8010eca:	803e      	strh	r6, [r7, #0]
 8010ecc:	807a      	strh	r2, [r7, #2]
 8010ece:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010ed2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010ed6:	d1c6      	bne.n	8010e66 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8010ed8:	9a04      	ldr	r2, [sp, #16]
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	6902      	ldr	r2, [r0, #16]
 8010ede:	8891      	ldrh	r1, [r2, #4]
 8010ee0:	88d6      	ldrh	r6, [r2, #6]
 8010ee2:	4419      	add	r1, r3
 8010ee4:	8091      	strh	r1, [r2, #4]
 8010ee6:	9902      	ldr	r1, [sp, #8]
 8010ee8:	f101 0c20 	add.w	ip, r1, #32
 8010eec:	9901      	ldr	r1, [sp, #4]
 8010eee:	ebac 0c01 	sub.w	ip, ip, r1
 8010ef2:	fb03 630c 	mla	r3, r3, ip, r6
 8010ef6:	80d3      	strh	r3, [r2, #6]
 8010ef8:	e750      	b.n	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010efa:	9d05      	ldr	r5, [sp, #20]
 8010efc:	1aa2      	subs	r2, r4, r2
 8010efe:	eba5 0501 	sub.w	r5, r5, r1
 8010f02:	9202      	str	r2, [sp, #8]
 8010f04:	9508      	str	r5, [sp, #32]
 8010f06:	f140 8128 	bpl.w	801115a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8010f0a:	9a03      	ldr	r2, [sp, #12]
 8010f0c:	2a00      	cmp	r2, #0
 8010f0e:	f6ff af45 	blt.w	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010f12:	9a02      	ldr	r2, [sp, #8]
 8010f14:	f04f 34ff 	mov.w	r4, #4294967295
 8010f18:	4252      	negs	r2, r2
 8010f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f1c:	2400      	movs	r4, #0
 8010f1e:	9202      	str	r2, [sp, #8]
 8010f20:	9a06      	ldr	r2, [sp, #24]
 8010f22:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8010f26:	9206      	str	r2, [sp, #24]
 8010f28:	462a      	mov	r2, r5
 8010f2a:	435a      	muls	r2, r3
 8010f2c:	9401      	str	r4, [sp, #4]
 8010f2e:	9c02      	ldr	r4, [sp, #8]
 8010f30:	9d02      	ldr	r5, [sp, #8]
 8010f32:	fb92 f4f4 	sdiv	r4, r2, r4
 8010f36:	fb05 2214 	mls	r2, r5, r4, r2
 8010f3a:	2a00      	cmp	r2, #0
 8010f3c:	9207      	str	r2, [sp, #28]
 8010f3e:	bfbc      	itt	lt
 8010f40:	1952      	addlt	r2, r2, r5
 8010f42:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010f46:	6905      	ldr	r5, [r0, #16]
 8010f48:	bfb8      	it	lt
 8010f4a:	9207      	strlt	r2, [sp, #28]
 8010f4c:	eb04 0901 	add.w	r9, r4, r1
 8010f50:	9a01      	ldr	r2, [sp, #4]
 8010f52:	ea4f 1669 	mov.w	r6, r9, asr #5
 8010f56:	429a      	cmp	r2, r3
 8010f58:	f040 8111 	bne.w	801117e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8010f5c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010f60:	429e      	cmp	r6, r3
 8010f62:	d104      	bne.n	8010f6e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8010f64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010f68:	9a03      	ldr	r2, [sp, #12]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d01b      	beq.n	8010fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010f6e:	88ea      	ldrh	r2, [r5, #6]
 8010f70:	88ab      	ldrh	r3, [r5, #4]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	d010      	beq.n	8010f98 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010f76:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010f7a:	2a00      	cmp	r2, #0
 8010f7c:	db0c      	blt.n	8010f98 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010f7e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010f80:	429a      	cmp	r2, r3
 8010f82:	da09      	bge.n	8010f98 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010f84:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	f102 0201 	add.w	r2, r2, #1
 8010f8e:	bf38      	it	cc
 8010f90:	3508      	addcc	r5, #8
 8010f92:	6082      	str	r2, [r0, #8]
 8010f94:	bf38      	it	cc
 8010f96:	6105      	strcc	r5, [r0, #16]
 8010f98:	6903      	ldr	r3, [r0, #16]
 8010f9a:	9a03      	ldr	r2, [sp, #12]
 8010f9c:	801e      	strh	r6, [r3, #0]
 8010f9e:	805a      	strh	r2, [r3, #2]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	809a      	strh	r2, [r3, #4]
 8010fa4:	80da      	strh	r2, [r3, #6]
 8010fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fa8:	9a03      	ldr	r2, [sp, #12]
 8010faa:	6901      	ldr	r1, [r0, #16]
 8010fac:	441a      	add	r2, r3
 8010fae:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010fb2:	42b3      	cmp	r3, r6
 8010fb4:	d103      	bne.n	8010fbe <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8010fb6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d01a      	beq.n	8010ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8010fbe:	88cc      	ldrh	r4, [r1, #6]
 8010fc0:	888b      	ldrh	r3, [r1, #4]
 8010fc2:	4323      	orrs	r3, r4
 8010fc4:	d010      	beq.n	8010fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010fc6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010fca:	2c00      	cmp	r4, #0
 8010fcc:	db0c      	blt.n	8010fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010fce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010fd0:	429c      	cmp	r4, r3
 8010fd2:	da09      	bge.n	8010fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010fd4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010fd8:	429c      	cmp	r4, r3
 8010fda:	f104 0401 	add.w	r4, r4, #1
 8010fde:	bf38      	it	cc
 8010fe0:	3108      	addcc	r1, #8
 8010fe2:	6084      	str	r4, [r0, #8]
 8010fe4:	bf38      	it	cc
 8010fe6:	6101      	strcc	r1, [r0, #16]
 8010fe8:	6903      	ldr	r3, [r0, #16]
 8010fea:	2100      	movs	r1, #0
 8010fec:	801e      	strh	r6, [r3, #0]
 8010fee:	805a      	strh	r2, [r3, #2]
 8010ff0:	8099      	strh	r1, [r3, #4]
 8010ff2:	80d9      	strh	r1, [r3, #6]
 8010ff4:	9b06      	ldr	r3, [sp, #24]
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	f000 8082 	beq.w	8011100 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8010ffc:	9b08      	ldr	r3, [sp, #32]
 8010ffe:	9902      	ldr	r1, [sp, #8]
 8011000:	015b      	lsls	r3, r3, #5
 8011002:	9c02      	ldr	r4, [sp, #8]
 8011004:	fb93 f1f1 	sdiv	r1, r3, r1
 8011008:	fb04 3311 	mls	r3, r4, r1, r3
 801100c:	9103      	str	r1, [sp, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	9308      	str	r3, [sp, #32]
 8011012:	da04      	bge.n	801101e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011014:	1e4b      	subs	r3, r1, #1
 8011016:	9303      	str	r3, [sp, #12]
 8011018:	9b08      	ldr	r3, [sp, #32]
 801101a:	4423      	add	r3, r4
 801101c:	9308      	str	r3, [sp, #32]
 801101e:	9b07      	ldr	r3, [sp, #28]
 8011020:	464f      	mov	r7, r9
 8011022:	9902      	ldr	r1, [sp, #8]
 8011024:	2600      	movs	r6, #0
 8011026:	1a5b      	subs	r3, r3, r1
 8011028:	9307      	str	r3, [sp, #28]
 801102a:	9b01      	ldr	r3, [sp, #4]
 801102c:	f1c3 0320 	rsb	r3, r3, #32
 8011030:	930e      	str	r3, [sp, #56]	@ 0x38
 8011032:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011034:	9b01      	ldr	r3, [sp, #4]
 8011036:	1a5b      	subs	r3, r3, r1
 8011038:	930a      	str	r3, [sp, #40]	@ 0x28
 801103a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801103e:	185b      	adds	r3, r3, r1
 8011040:	bf58      	it	pl
 8011042:	9902      	ldrpl	r1, [sp, #8]
 8011044:	9307      	str	r3, [sp, #28]
 8011046:	bf57      	itett	pl
 8011048:	1a5b      	subpl	r3, r3, r1
 801104a:	9903      	ldrmi	r1, [sp, #12]
 801104c:	9307      	strpl	r3, [sp, #28]
 801104e:	9b03      	ldrpl	r3, [sp, #12]
 8011050:	bf58      	it	pl
 8011052:	1c59      	addpl	r1, r3, #1
 8011054:	2a00      	cmp	r2, #0
 8011056:	4489      	add	r9, r1
 8011058:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801105c:	db2e      	blt.n	80110bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801105e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011060:	4293      	cmp	r3, r2
 8011062:	dd2b      	ble.n	80110bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011064:	9c01      	ldr	r4, [sp, #4]
 8011066:	6905      	ldr	r5, [r0, #16]
 8011068:	46a0      	mov	r8, r4
 801106a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801106c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011070:	45a0      	cmp	r8, r4
 8011072:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8011076:	f040 814c 	bne.w	8011312 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801107a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801107e:	4551      	cmp	r1, sl
 8011080:	d103      	bne.n	801108a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8011082:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011086:	4291      	cmp	r1, r2
 8011088:	d018      	beq.n	80110bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801108a:	ea5c 010e 	orrs.w	r1, ip, lr
 801108e:	d00f      	beq.n	80110b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011090:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011094:	2900      	cmp	r1, #0
 8011096:	db0b      	blt.n	80110b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011098:	428b      	cmp	r3, r1
 801109a:	dd09      	ble.n	80110b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801109c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80110a0:	4299      	cmp	r1, r3
 80110a2:	f101 0101 	add.w	r1, r1, #1
 80110a6:	bf38      	it	cc
 80110a8:	3508      	addcc	r5, #8
 80110aa:	6081      	str	r1, [r0, #8]
 80110ac:	bf38      	it	cc
 80110ae:	6105      	strcc	r5, [r0, #16]
 80110b0:	6903      	ldr	r3, [r0, #16]
 80110b2:	f8a3 a000 	strh.w	sl, [r3]
 80110b6:	805a      	strh	r2, [r3, #2]
 80110b8:	809e      	strh	r6, [r3, #4]
 80110ba:	80de      	strh	r6, [r3, #6]
 80110bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110be:	6901      	ldr	r1, [r0, #16]
 80110c0:	441a      	add	r2, r3
 80110c2:	88cc      	ldrh	r4, [r1, #6]
 80110c4:	888b      	ldrh	r3, [r1, #4]
 80110c6:	4323      	orrs	r3, r4
 80110c8:	d010      	beq.n	80110ec <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80110ca:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80110ce:	2c00      	cmp	r4, #0
 80110d0:	db0c      	blt.n	80110ec <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80110d2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80110d4:	429c      	cmp	r4, r3
 80110d6:	da09      	bge.n	80110ec <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80110d8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80110dc:	429c      	cmp	r4, r3
 80110de:	f104 0401 	add.w	r4, r4, #1
 80110e2:	bf38      	it	cc
 80110e4:	3108      	addcc	r1, #8
 80110e6:	6084      	str	r4, [r0, #8]
 80110e8:	bf38      	it	cc
 80110ea:	6101      	strcc	r1, [r0, #16]
 80110ec:	6903      	ldr	r3, [r0, #16]
 80110ee:	464f      	mov	r7, r9
 80110f0:	f8a3 a000 	strh.w	sl, [r3]
 80110f4:	805a      	strh	r2, [r3, #2]
 80110f6:	809e      	strh	r6, [r3, #4]
 80110f8:	80de      	strh	r6, [r3, #6]
 80110fa:	9b06      	ldr	r3, [sp, #24]
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d19c      	bne.n	801103a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	6907      	ldr	r7, [r0, #16]
 8011104:	f1c3 0620 	rsb	r6, r3, #32
 8011108:	9b05      	ldr	r3, [sp, #20]
 801110a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801110e:	9b04      	ldr	r3, [sp, #16]
 8011110:	429e      	cmp	r6, r3
 8011112:	f040 81c7 	bne.w	80114a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011116:	f9b7 3000 	ldrsh.w	r3, [r7]
 801111a:	459e      	cmp	lr, r3
 801111c:	d104      	bne.n	8011128 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801111e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011122:	429a      	cmp	r2, r3
 8011124:	f43f ae3a 	beq.w	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011128:	88f9      	ldrh	r1, [r7, #6]
 801112a:	88bb      	ldrh	r3, [r7, #4]
 801112c:	430b      	orrs	r3, r1
 801112e:	d010      	beq.n	8011152 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011134:	2b00      	cmp	r3, #0
 8011136:	db0c      	blt.n	8011152 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011138:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801113a:	428b      	cmp	r3, r1
 801113c:	da09      	bge.n	8011152 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801113e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011142:	428b      	cmp	r3, r1
 8011144:	f103 0301 	add.w	r3, r3, #1
 8011148:	bf38      	it	cc
 801114a:	3708      	addcc	r7, #8
 801114c:	6083      	str	r3, [r0, #8]
 801114e:	bf38      	it	cc
 8011150:	6107      	strcc	r7, [r0, #16]
 8011152:	6903      	ldr	r3, [r0, #16]
 8011154:	f8a3 e000 	strh.w	lr, [r3]
 8011158:	e603      	b.n	8010d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801115a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801115c:	9c03      	ldr	r4, [sp, #12]
 801115e:	42a2      	cmp	r2, r4
 8011160:	f6ff ae1c 	blt.w	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011164:	9c06      	ldr	r4, [sp, #24]
 8011166:	42a2      	cmp	r2, r4
 8011168:	9c08      	ldr	r4, [sp, #32]
 801116a:	bfbc      	itt	lt
 801116c:	3201      	addlt	r2, #1
 801116e:	9206      	strlt	r2, [sp, #24]
 8011170:	f1c3 0220 	rsb	r2, r3, #32
 8011174:	4362      	muls	r2, r4
 8011176:	2401      	movs	r4, #1
 8011178:	940b      	str	r4, [sp, #44]	@ 0x2c
 801117a:	2420      	movs	r4, #32
 801117c:	e6d6      	b.n	8010f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801117e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8011182:	f009 021f 	and.w	r2, r9, #31
 8011186:	f001 011f 	and.w	r1, r1, #31
 801118a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801118e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011190:	45b0      	cmp	r8, r6
 8011192:	9a01      	ldr	r2, [sp, #4]
 8011194:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8011198:	eba2 0203 	sub.w	r2, r2, r3
 801119c:	d108      	bne.n	80111b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801119e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111a0:	4496      	add	lr, r2
 80111a2:	4419      	add	r1, r3
 80111a4:	f8a5 e004 	strh.w	lr, [r5, #4]
 80111a8:	fb02 a101 	mla	r1, r2, r1, sl
 80111ac:	80e9      	strh	r1, [r5, #6]
 80111ae:	e6fa      	b.n	8010fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80111b0:	2c00      	cmp	r4, #0
 80111b2:	f2c0 80a7 	blt.w	8011304 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80111b6:	2701      	movs	r7, #1
 80111b8:	f1c1 0c20 	rsb	ip, r1, #32
 80111bc:	970a      	str	r7, [sp, #40]	@ 0x28
 80111be:	2720      	movs	r7, #32
 80111c0:	fb02 f20c 	mul.w	r2, r2, ip
 80111c4:	9709      	str	r7, [sp, #36]	@ 0x24
 80111c6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80111c8:	fb92 fcf4 	sdiv	ip, r2, r4
 80111cc:	fb04 221c 	mls	r2, r4, ip, r2
 80111d0:	4439      	add	r1, r7
 80111d2:	2a00      	cmp	r2, #0
 80111d4:	bfbc      	itt	lt
 80111d6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80111da:	1912      	addlt	r2, r2, r4
 80111dc:	fb0c a101 	mla	r1, ip, r1, sl
 80111e0:	44e6      	add	lr, ip
 80111e2:	80e9      	strh	r1, [r5, #6]
 80111e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111e6:	f8a5 e004 	strh.w	lr, [r5, #4]
 80111ea:	eb08 0501 	add.w	r5, r8, r1
 80111ee:	6901      	ldr	r1, [r0, #16]
 80111f0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80111f4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80111f8:	ea58 070e 	orrs.w	r7, r8, lr
 80111fc:	d010      	beq.n	8011220 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80111fe:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011202:	f1be 0f00 	cmp.w	lr, #0
 8011206:	db0b      	blt.n	8011220 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011208:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801120a:	45be      	cmp	lr, r7
 801120c:	da08      	bge.n	8011220 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801120e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011212:	45be      	cmp	lr, r7
 8011214:	bf3c      	itt	cc
 8011216:	3108      	addcc	r1, #8
 8011218:	6101      	strcc	r1, [r0, #16]
 801121a:	f10e 0101 	add.w	r1, lr, #1
 801121e:	6081      	str	r1, [r0, #8]
 8011220:	6901      	ldr	r1, [r0, #16]
 8011222:	f04f 0e00 	mov.w	lr, #0
 8011226:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801122a:	42ae      	cmp	r6, r5
 801122c:	800d      	strh	r5, [r1, #0]
 801122e:	4463      	add	r3, ip
 8011230:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011234:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011238:	f8a1 e006 	strh.w	lr, [r1, #6]
 801123c:	d053      	beq.n	80112e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801123e:	9901      	ldr	r1, [sp, #4]
 8011240:	1b12      	subs	r2, r2, r4
 8011242:	1ac9      	subs	r1, r1, r3
 8011244:	4461      	add	r1, ip
 8011246:	0149      	lsls	r1, r1, #5
 8011248:	fb91 fef4 	sdiv	lr, r1, r4
 801124c:	fb04 111e 	mls	r1, r4, lr, r1
 8011250:	2900      	cmp	r1, #0
 8011252:	bfbc      	itt	lt
 8011254:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8011258:	1909      	addlt	r1, r1, r4
 801125a:	f10e 0701 	add.w	r7, lr, #1
 801125e:	970d      	str	r7, [sp, #52]	@ 0x34
 8011260:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8011264:	1852      	adds	r2, r2, r1
 8011266:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011268:	bf54      	ite	pl
 801126a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801126e:	46f4      	movmi	ip, lr
 8011270:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8011274:	bf58      	it	pl
 8011276:	1b12      	subpl	r2, r2, r4
 8011278:	4463      	add	r3, ip
 801127a:	443d      	add	r5, r7
 801127c:	44e3      	add	fp, ip
 801127e:	f8aa b004 	strh.w	fp, [sl, #4]
 8011282:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8011286:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801128a:	f8aa b006 	strh.w	fp, [sl, #6]
 801128e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011292:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011296:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801129a:	ea5b 070a 	orrs.w	r7, fp, sl
 801129e:	d014      	beq.n	80112ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80112a0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80112a4:	f1ba 0f00 	cmp.w	sl, #0
 80112a8:	db0f      	blt.n	80112ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80112aa:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80112ac:	45ba      	cmp	sl, r7
 80112ae:	da0c      	bge.n	80112ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80112b0:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80112b4:	45ba      	cmp	sl, r7
 80112b6:	f10a 0a01 	add.w	sl, sl, #1
 80112ba:	bf38      	it	cc
 80112bc:	f10c 0c08 	addcc.w	ip, ip, #8
 80112c0:	f8c0 a008 	str.w	sl, [r0, #8]
 80112c4:	bf38      	it	cc
 80112c6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80112ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80112ce:	f04f 0700 	mov.w	r7, #0
 80112d2:	42ae      	cmp	r6, r5
 80112d4:	f8ac 5000 	strh.w	r5, [ip]
 80112d8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80112dc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80112e0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80112e4:	d1bc      	bne.n	8011260 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80112e6:	6904      	ldr	r4, [r0, #16]
 80112e8:	9a01      	ldr	r2, [sp, #4]
 80112ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	88a2      	ldrh	r2, [r4, #4]
 80112f0:	3120      	adds	r1, #32
 80112f2:	441a      	add	r2, r3
 80112f4:	80a2      	strh	r2, [r4, #4]
 80112f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112f8:	1a89      	subs	r1, r1, r2
 80112fa:	88e2      	ldrh	r2, [r4, #6]
 80112fc:	fb03 2301 	mla	r3, r3, r1, r2
 8011300:	80e3      	strh	r3, [r4, #6]
 8011302:	e650      	b.n	8010fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011304:	f04f 37ff 	mov.w	r7, #4294967295
 8011308:	434a      	muls	r2, r1
 801130a:	4264      	negs	r4, r4
 801130c:	970a      	str	r7, [sp, #40]	@ 0x28
 801130e:	2700      	movs	r7, #0
 8011310:	e758      	b.n	80111c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8011312:	ea4f 1867 	mov.w	r8, r7, asr #5
 8011316:	f009 031f 	and.w	r3, r9, #31
 801131a:	f007 071f 	and.w	r7, r7, #31
 801131e:	fa1f fc8c 	uxth.w	ip, ip
 8011322:	45d0      	cmp	r8, sl
 8011324:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011326:	fa1f fe8e 	uxth.w	lr, lr
 801132a:	d10a      	bne.n	8011342 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801132c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801132e:	449c      	add	ip, r3
 8011330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011332:	441f      	add	r7, r3
 8011334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011336:	f8a5 c004 	strh.w	ip, [r5, #4]
 801133a:	fb03 e707 	mla	r7, r3, r7, lr
 801133e:	80ef      	strh	r7, [r5, #6]
 8011340:	e6bc      	b.n	80110bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011342:	2900      	cmp	r1, #0
 8011344:	f2c0 80a6 	blt.w	8011494 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8011348:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801134a:	f1c7 0320 	rsb	r3, r7, #32
 801134e:	4363      	muls	r3, r4
 8011350:	2401      	movs	r4, #1
 8011352:	940d      	str	r4, [sp, #52]	@ 0x34
 8011354:	2420      	movs	r4, #32
 8011356:	940c      	str	r4, [sp, #48]	@ 0x30
 8011358:	fb93 f4f1 	sdiv	r4, r3, r1
 801135c:	fb01 3b14 	mls	fp, r1, r4, r3
 8011360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011362:	f1bb 0f00 	cmp.w	fp, #0
 8011366:	441f      	add	r7, r3
 8011368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801136a:	bfbc      	itt	lt
 801136c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011370:	448b      	addlt	fp, r1
 8011372:	fb04 e707 	mla	r7, r4, r7, lr
 8011376:	44a4      	add	ip, r4
 8011378:	80ef      	strh	r7, [r5, #6]
 801137a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801137e:	eb08 0503 	add.w	r5, r8, r3
 8011382:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011386:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801138a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801138e:	ea5e 0307 	orrs.w	r3, lr, r7
 8011392:	d011      	beq.n	80113b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8011394:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8011398:	f1be 0f00 	cmp.w	lr, #0
 801139c:	db0c      	blt.n	80113b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801139e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80113a0:	45be      	cmp	lr, r7
 80113a2:	da09      	bge.n	80113b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80113a4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80113a8:	45be      	cmp	lr, r7
 80113aa:	bf3c      	itt	cc
 80113ac:	f10c 0708 	addcc.w	r7, ip, #8
 80113b0:	6107      	strcc	r7, [r0, #16]
 80113b2:	f10e 0701 	add.w	r7, lr, #1
 80113b6:	6087      	str	r7, [r0, #8]
 80113b8:	6907      	ldr	r7, [r0, #16]
 80113ba:	b213      	sxth	r3, r2
 80113bc:	4555      	cmp	r5, sl
 80113be:	9310      	str	r3, [sp, #64]	@ 0x40
 80113c0:	807b      	strh	r3, [r7, #2]
 80113c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113c4:	803d      	strh	r5, [r7, #0]
 80113c6:	80be      	strh	r6, [r7, #4]
 80113c8:	eb04 0c03 	add.w	ip, r4, r3
 80113cc:	80fe      	strh	r6, [r7, #6]
 80113ce:	d050      	beq.n	8011472 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80113d0:	9b01      	ldr	r3, [sp, #4]
 80113d2:	eba3 070c 	sub.w	r7, r3, ip
 80113d6:	ebab 0301 	sub.w	r3, fp, r1
 80113da:	443c      	add	r4, r7
 80113dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80113de:	0164      	lsls	r4, r4, #5
 80113e0:	fb94 f8f1 	sdiv	r8, r4, r1
 80113e4:	fb01 4418 	mls	r4, r1, r8, r4
 80113e8:	2c00      	cmp	r4, #0
 80113ea:	bfbc      	itt	lt
 80113ec:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80113f0:	1864      	addlt	r4, r4, r1
 80113f2:	f108 0701 	add.w	r7, r8, #1
 80113f6:	9711      	str	r7, [sp, #68]	@ 0x44
 80113f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113fa:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80113fe:	191b      	adds	r3, r3, r4
 8011400:	f8be b004 	ldrh.w	fp, [lr, #4]
 8011404:	bf54      	ite	pl
 8011406:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8011408:	4647      	movmi	r7, r8
 801140a:	9309      	str	r3, [sp, #36]	@ 0x24
 801140c:	bf58      	it	pl
 801140e:	1a5b      	subpl	r3, r3, r1
 8011410:	44bb      	add	fp, r7
 8011412:	44bc      	add	ip, r7
 8011414:	bf58      	it	pl
 8011416:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8011418:	f8ae b004 	strh.w	fp, [lr, #4]
 801141c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011420:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011424:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011426:	f8ae b006 	strh.w	fp, [lr, #6]
 801142a:	443d      	add	r5, r7
 801142c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011430:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011434:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8011438:	ea5b 0307 	orrs.w	r3, fp, r7
 801143c:	d011      	beq.n	8011462 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801143e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8011442:	f1bb 0f00 	cmp.w	fp, #0
 8011446:	db0c      	blt.n	8011462 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011448:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801144a:	45bb      	cmp	fp, r7
 801144c:	da09      	bge.n	8011462 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801144e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011452:	45bb      	cmp	fp, r7
 8011454:	bf3c      	itt	cc
 8011456:	f10e 0708 	addcc.w	r7, lr, #8
 801145a:	6107      	strcc	r7, [r0, #16]
 801145c:	f10b 0701 	add.w	r7, fp, #1
 8011460:	6087      	str	r7, [r0, #8]
 8011462:	6907      	ldr	r7, [r0, #16]
 8011464:	4555      	cmp	r5, sl
 8011466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011468:	803d      	strh	r5, [r7, #0]
 801146a:	807b      	strh	r3, [r7, #2]
 801146c:	80be      	strh	r6, [r7, #4]
 801146e:	80fe      	strh	r6, [r7, #6]
 8011470:	d1c2      	bne.n	80113f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8011472:	9b01      	ldr	r3, [sp, #4]
 8011474:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8011476:	eba3 0c0c 	sub.w	ip, r3, ip
 801147a:	6903      	ldr	r3, [r0, #16]
 801147c:	3720      	adds	r7, #32
 801147e:	8899      	ldrh	r1, [r3, #4]
 8011480:	4461      	add	r1, ip
 8011482:	8099      	strh	r1, [r3, #4]
 8011484:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011486:	1a7f      	subs	r7, r7, r1
 8011488:	88d9      	ldrh	r1, [r3, #6]
 801148a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801148e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8011492:	e613      	b.n	80110bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011494:	f04f 34ff 	mov.w	r4, #4294967295
 8011498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801149a:	4249      	negs	r1, r1
 801149c:	940d      	str	r4, [sp, #52]	@ 0x34
 801149e:	2400      	movs	r4, #0
 80114a0:	437b      	muls	r3, r7
 80114a2:	e758      	b.n	8011356 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80114a4:	9905      	ldr	r1, [sp, #20]
 80114a6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80114aa:	f009 0c1f 	and.w	ip, r9, #31
 80114ae:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80114b2:	f001 011f 	and.w	r1, r1, #31
 80114b6:	45f3      	cmp	fp, lr
 80114b8:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80114bc:	9102      	str	r1, [sp, #8]
 80114be:	9904      	ldr	r1, [sp, #16]
 80114c0:	eba1 0406 	sub.w	r4, r1, r6
 80114c4:	d108      	bne.n	80114d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80114c6:	9b02      	ldr	r3, [sp, #8]
 80114c8:	44a0      	add	r8, r4
 80114ca:	449c      	add	ip, r3
 80114cc:	f8a7 8004 	strh.w	r8, [r7, #4]
 80114d0:	fb04 a40c 	mla	r4, r4, ip, sl
 80114d4:	80fc      	strh	r4, [r7, #6]
 80114d6:	e461      	b.n	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80114d8:	9905      	ldr	r1, [sp, #20]
 80114da:	ebb1 0109 	subs.w	r1, r1, r9
 80114de:	bf51      	iteee	pl
 80114e0:	f1cc 0520 	rsbpl	r5, ip, #32
 80114e4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80114e8:	4249      	negmi	r1, r1
 80114ea:	2500      	movmi	r5, #0
 80114ec:	bf5d      	ittte	pl
 80114ee:	436c      	mulpl	r4, r5
 80114f0:	2520      	movpl	r5, #32
 80114f2:	f04f 0901 	movpl.w	r9, #1
 80114f6:	f04f 39ff 	movmi.w	r9, #4294967295
 80114fa:	9501      	str	r5, [sp, #4]
 80114fc:	9b01      	ldr	r3, [sp, #4]
 80114fe:	fb94 f5f1 	sdiv	r5, r4, r1
 8011502:	fb01 4415 	mls	r4, r1, r5, r4
 8011506:	449c      	add	ip, r3
 8011508:	eb0b 0309 	add.w	r3, fp, r9
 801150c:	2c00      	cmp	r4, #0
 801150e:	bfbc      	itt	lt
 8011510:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011514:	1864      	addlt	r4, r4, r1
 8011516:	44a8      	add	r8, r5
 8011518:	fb05 ac0c 	mla	ip, r5, ip, sl
 801151c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011520:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011524:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011528:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801152c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011530:	ea58 0707 	orrs.w	r7, r8, r7
 8011534:	d011      	beq.n	801155a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011536:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801153a:	f1b8 0f00 	cmp.w	r8, #0
 801153e:	db0c      	blt.n	801155a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011540:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011542:	45b8      	cmp	r8, r7
 8011544:	da09      	bge.n	801155a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011546:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801154a:	45b8      	cmp	r8, r7
 801154c:	bf3c      	itt	cc
 801154e:	f10c 0708 	addcc.w	r7, ip, #8
 8011552:	6107      	strcc	r7, [r0, #16]
 8011554:	f108 0701 	add.w	r7, r8, #1
 8011558:	6087      	str	r7, [r0, #8]
 801155a:	6907      	ldr	r7, [r0, #16]
 801155c:	f04f 0c00 	mov.w	ip, #0
 8011560:	b212      	sxth	r2, r2
 8011562:	459e      	cmp	lr, r3
 8011564:	803b      	strh	r3, [r7, #0]
 8011566:	442e      	add	r6, r5
 8011568:	807a      	strh	r2, [r7, #2]
 801156a:	f8a7 c004 	strh.w	ip, [r7, #4]
 801156e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011572:	d04b      	beq.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8011574:	9f04      	ldr	r7, [sp, #16]
 8011576:	1a64      	subs	r4, r4, r1
 8011578:	f04f 0a00 	mov.w	sl, #0
 801157c:	1bbf      	subs	r7, r7, r6
 801157e:	443d      	add	r5, r7
 8011580:	016d      	lsls	r5, r5, #5
 8011582:	fb95 f8f1 	sdiv	r8, r5, r1
 8011586:	fb01 5518 	mls	r5, r1, r8, r5
 801158a:	4565      	cmp	r5, ip
 801158c:	bfbc      	itt	lt
 801158e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011592:	186d      	addlt	r5, r5, r1
 8011594:	f108 0701 	add.w	r7, r8, #1
 8011598:	9703      	str	r7, [sp, #12]
 801159a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801159e:	1964      	adds	r4, r4, r5
 80115a0:	444b      	add	r3, r9
 80115a2:	bf54      	ite	pl
 80115a4:	9f03      	ldrpl	r7, [sp, #12]
 80115a6:	4647      	movmi	r7, r8
 80115a8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80115ac:	bf58      	it	pl
 80115ae:	1a64      	subpl	r4, r4, r1
 80115b0:	443e      	add	r6, r7
 80115b2:	44bb      	add	fp, r7
 80115b4:	f8ac b004 	strh.w	fp, [ip, #4]
 80115b8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80115bc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80115c0:	f8ac b006 	strh.w	fp, [ip, #6]
 80115c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80115c8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80115cc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80115d0:	ea5b 0707 	orrs.w	r7, fp, r7
 80115d4:	d011      	beq.n	80115fa <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80115d6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80115da:	f1bb 0f00 	cmp.w	fp, #0
 80115de:	db0c      	blt.n	80115fa <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80115e0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80115e2:	45bb      	cmp	fp, r7
 80115e4:	da09      	bge.n	80115fa <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80115e6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80115ea:	45bb      	cmp	fp, r7
 80115ec:	bf3c      	itt	cc
 80115ee:	f10c 0708 	addcc.w	r7, ip, #8
 80115f2:	6107      	strcc	r7, [r0, #16]
 80115f4:	f10b 0701 	add.w	r7, fp, #1
 80115f8:	6087      	str	r7, [r0, #8]
 80115fa:	6907      	ldr	r7, [r0, #16]
 80115fc:	459e      	cmp	lr, r3
 80115fe:	803b      	strh	r3, [r7, #0]
 8011600:	807a      	strh	r2, [r7, #2]
 8011602:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011606:	f8a7 a006 	strh.w	sl, [r7, #6]
 801160a:	d1c6      	bne.n	801159a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801160c:	9b04      	ldr	r3, [sp, #16]
 801160e:	1b9e      	subs	r6, r3, r6
 8011610:	6903      	ldr	r3, [r0, #16]
 8011612:	889a      	ldrh	r2, [r3, #4]
 8011614:	4432      	add	r2, r6
 8011616:	809a      	strh	r2, [r3, #4]
 8011618:	9a02      	ldr	r2, [sp, #8]
 801161a:	f102 0c20 	add.w	ip, r2, #32
 801161e:	9a01      	ldr	r2, [sp, #4]
 8011620:	ebac 0c02 	sub.w	ip, ip, r2
 8011624:	88da      	ldrh	r2, [r3, #6]
 8011626:	fb06 260c 	mla	r6, r6, ip, r2
 801162a:	80de      	strh	r6, [r3, #6]
 801162c:	f7ff bbb6 	b.w	8010d9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08011630 <_ZN8touchgfx7Outline6lineToEii>:
 8011630:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011632:	079b      	lsls	r3, r3, #30
 8011634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011636:	460e      	mov	r6, r1
 8011638:	4615      	mov	r5, r2
 801163a:	d511      	bpl.n	8011660 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801163c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8011640:	ea86 0701 	eor.w	r7, r6, r1
 8011644:	ea85 0302 	eor.w	r3, r5, r2
 8011648:	433b      	orrs	r3, r7
 801164a:	d009      	beq.n	8011660 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801164c:	4633      	mov	r3, r6
 801164e:	9500      	str	r5, [sp, #0]
 8011650:	f7ff fb4c 	bl	8010cec <_ZN8touchgfx7Outline10renderLineEiiii>
 8011654:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011656:	f043 0301 	orr.w	r3, r3, #1
 801165a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801165e:	6243      	str	r3, [r0, #36]	@ 0x24
 8011660:	b003      	add	sp, #12
 8011662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011664 <_ZN8touchgfx7Outline6moveToEii>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011668:	4615      	mov	r5, r2
 801166a:	4604      	mov	r4, r0
 801166c:	460e      	mov	r6, r1
 801166e:	079a      	lsls	r2, r3, #30
 8011670:	d401      	bmi.n	8011676 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8011672:	f7ff fb07 	bl	8010c84 <_ZN8touchgfx7Outline5resetEv>
 8011676:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011678:	07db      	lsls	r3, r3, #31
 801167a:	d504      	bpl.n	8011686 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801167c:	4620      	mov	r0, r4
 801167e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8011682:	f7ff ffd5 	bl	8011630 <_ZN8touchgfx7Outline6lineToEii>
 8011686:	6923      	ldr	r3, [r4, #16]
 8011688:	1170      	asrs	r0, r6, #5
 801168a:	1169      	asrs	r1, r5, #5
 801168c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011690:	4290      	cmp	r0, r2
 8011692:	d103      	bne.n	801169c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8011694:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011698:	4291      	cmp	r1, r2
 801169a:	d01a      	beq.n	80116d2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801169c:	88df      	ldrh	r7, [r3, #6]
 801169e:	889a      	ldrh	r2, [r3, #4]
 80116a0:	433a      	orrs	r2, r7
 80116a2:	d010      	beq.n	80116c6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80116a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80116a8:	2a00      	cmp	r2, #0
 80116aa:	db0c      	blt.n	80116c6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80116ac:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80116ae:	42ba      	cmp	r2, r7
 80116b0:	da09      	bge.n	80116c6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80116b2:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80116b6:	42ba      	cmp	r2, r7
 80116b8:	f102 0201 	add.w	r2, r2, #1
 80116bc:	bf38      	it	cc
 80116be:	3308      	addcc	r3, #8
 80116c0:	60a2      	str	r2, [r4, #8]
 80116c2:	bf38      	it	cc
 80116c4:	6123      	strcc	r3, [r4, #16]
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	2200      	movs	r2, #0
 80116ca:	8018      	strh	r0, [r3, #0]
 80116cc:	8059      	strh	r1, [r3, #2]
 80116ce:	809a      	strh	r2, [r3, #4]
 80116d0:	80da      	strh	r2, [r3, #6]
 80116d2:	6166      	str	r6, [r4, #20]
 80116d4:	6225      	str	r5, [r4, #32]
 80116d6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80116da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80116dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e0:	b0d0      	sub	sp, #320	@ 0x140
 80116e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80116e6:	466c      	mov	r4, sp
 80116e8:	4627      	mov	r7, r4
 80116ea:	1a0d      	subs	r5, r1, r0
 80116ec:	f100 0308 	add.w	r3, r0, #8
 80116f0:	2d48      	cmp	r5, #72	@ 0x48
 80116f2:	f340 80d5 	ble.w	80118a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80116f6:	112d      	asrs	r5, r5, #4
 80116f8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80116fc:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011700:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8011704:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8011708:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801170c:	6816      	ldr	r6, [r2, #0]
 801170e:	6006      	str	r6, [r0, #0]
 8011710:	6856      	ldr	r6, [r2, #4]
 8011712:	6046      	str	r6, [r0, #4]
 8011714:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011718:	f8a2 8002 	strh.w	r8, [r2, #2]
 801171c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011720:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011724:	f1a1 0208 	sub.w	r2, r1, #8
 8011728:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801172c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8011730:	4565      	cmp	r5, ip
 8011732:	db06      	blt.n	8011742 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8011734:	d119      	bne.n	801176a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011736:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801173a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801173e:	42ae      	cmp	r6, r5
 8011740:	dd13      	ble.n	801176a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011742:	460e      	mov	r6, r1
 8011744:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8011748:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801174c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011750:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8011754:	601d      	str	r5, [r3, #0]
 8011756:	6875      	ldr	r5, [r6, #4]
 8011758:	605d      	str	r5, [r3, #4]
 801175a:	f821 9c08 	strh.w	r9, [r1, #-8]
 801175e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011762:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011766:	f821 ec02 	strh.w	lr, [r1, #-2]
 801176a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801176e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8011772:	42ae      	cmp	r6, r5
 8011774:	db06      	blt.n	8011784 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8011776:	d116      	bne.n	80117a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011778:	f9b0 c000 	ldrsh.w	ip, [r0]
 801177c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8011780:	45ac      	cmp	ip, r5
 8011782:	da10      	bge.n	80117a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011784:	681d      	ldr	r5, [r3, #0]
 8011786:	f9b0 8000 	ldrsh.w	r8, [r0]
 801178a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801178e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011792:	6005      	str	r5, [r0, #0]
 8011794:	685d      	ldr	r5, [r3, #4]
 8011796:	f8a0 8008 	strh.w	r8, [r0, #8]
 801179a:	6045      	str	r5, [r0, #4]
 801179c:	8146      	strh	r6, [r0, #10]
 801179e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80117a2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80117a6:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80117aa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80117ae:	4565      	cmp	r5, ip
 80117b0:	db06      	blt.n	80117c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80117b2:	d119      	bne.n	80117e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80117b4:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80117b8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80117bc:	42ae      	cmp	r6, r5
 80117be:	da13      	bge.n	80117e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80117c0:	460e      	mov	r6, r1
 80117c2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80117c6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80117ca:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80117ce:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80117d2:	6005      	str	r5, [r0, #0]
 80117d4:	6875      	ldr	r5, [r6, #4]
 80117d6:	6045      	str	r5, [r0, #4]
 80117d8:	f821 9c08 	strh.w	r9, [r1, #-8]
 80117dc:	f821 cc06 	strh.w	ip, [r1, #-6]
 80117e0:	f821 8c04 	strh.w	r8, [r1, #-4]
 80117e4:	f821 ec02 	strh.w	lr, [r1, #-2]
 80117e8:	3308      	adds	r3, #8
 80117ea:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80117ee:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80117f2:	45e6      	cmp	lr, ip
 80117f4:	dbf8      	blt.n	80117e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80117f6:	d105      	bne.n	8011804 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80117f8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80117fc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011800:	42ae      	cmp	r6, r5
 8011802:	dbf1      	blt.n	80117e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011804:	4615      	mov	r5, r2
 8011806:	3a08      	subs	r2, #8
 8011808:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801180c:	45b4      	cmp	ip, r6
 801180e:	dbf9      	blt.n	8011804 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011810:	d105      	bne.n	801181e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8011812:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011816:	f9b2 6000 	ldrsh.w	r6, [r2]
 801181a:	45b0      	cmp	r8, r6
 801181c:	dbf2      	blt.n	8011804 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801181e:	4293      	cmp	r3, r2
 8011820:	f1a5 0608 	sub.w	r6, r5, #8
 8011824:	d816      	bhi.n	8011854 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8011826:	f8d6 c000 	ldr.w	ip, [r6]
 801182a:	f9b3 a000 	ldrsh.w	sl, [r3]
 801182e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8011832:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8011836:	f8c3 c000 	str.w	ip, [r3]
 801183a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801183e:	f8c3 c004 	str.w	ip, [r3, #4]
 8011842:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011846:	f825 ec06 	strh.w	lr, [r5, #-6]
 801184a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801184e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011852:	e7c9      	b.n	80117e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011854:	f8d6 e000 	ldr.w	lr, [r6]
 8011858:	f9b0 a000 	ldrsh.w	sl, [r0]
 801185c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8011860:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8011864:	f8c0 e000 	str.w	lr, [r0]
 8011868:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801186c:	1a16      	subs	r6, r2, r0
 801186e:	f8c0 e004 	str.w	lr, [r0, #4]
 8011872:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011876:	f825 cc06 	strh.w	ip, [r5, #-6]
 801187a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801187e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011882:	1acd      	subs	r5, r1, r3
 8011884:	10ed      	asrs	r5, r5, #3
 8011886:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801188a:	bfb5      	itete	lt
 801188c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8011890:	e9c4 3100 	strdge	r3, r1, [r4]
 8011894:	460a      	movlt	r2, r1
 8011896:	4603      	movge	r3, r0
 8011898:	3408      	adds	r4, #8
 801189a:	4618      	mov	r0, r3
 801189c:	4611      	mov	r1, r2
 801189e:	e724      	b.n	80116ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80118a0:	4299      	cmp	r1, r3
 80118a2:	d927      	bls.n	80118f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80118a4:	f1a3 0210 	sub.w	r2, r3, #16
 80118a8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80118ac:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80118b0:	45ac      	cmp	ip, r5
 80118b2:	db06      	blt.n	80118c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80118b4:	d11c      	bne.n	80118f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80118b6:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80118ba:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80118be:	42ae      	cmp	r6, r5
 80118c0:	da16      	bge.n	80118f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80118c2:	4615      	mov	r5, r2
 80118c4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80118c8:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80118cc:	3a08      	subs	r2, #8
 80118ce:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80118d2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80118d6:	6196      	str	r6, [r2, #24]
 80118d8:	42a8      	cmp	r0, r5
 80118da:	686e      	ldr	r6, [r5, #4]
 80118dc:	f8a2 9010 	strh.w	r9, [r2, #16]
 80118e0:	61d6      	str	r6, [r2, #28]
 80118e2:	f8a2 c012 	strh.w	ip, [r2, #18]
 80118e6:	f8a2 8014 	strh.w	r8, [r2, #20]
 80118ea:	f8a2 e016 	strh.w	lr, [r2, #22]
 80118ee:	d1db      	bne.n	80118a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80118f0:	3308      	adds	r3, #8
 80118f2:	e7d5      	b.n	80118a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80118f4:	42bc      	cmp	r4, r7
 80118f6:	d903      	bls.n	8011900 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80118f8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80118fc:	3c08      	subs	r4, #8
 80118fe:	e6f4      	b.n	80116ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011900:	b050      	add	sp, #320	@ 0x140
 8011902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011906 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8011906:	b510      	push	{r4, lr}
 8011908:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801190a:	4604      	mov	r4, r0
 801190c:	07da      	lsls	r2, r3, #31
 801190e:	d507      	bpl.n	8011920 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8011910:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8011914:	f7ff fe8c 	bl	8011630 <_ZN8touchgfx7Outline6lineToEii>
 8011918:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801191a:	f023 0301 	bic.w	r3, r3, #1
 801191e:	6243      	str	r3, [r0, #36]	@ 0x24
 8011920:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011922:	079b      	lsls	r3, r3, #30
 8011924:	d521      	bpl.n	801196a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8011926:	6923      	ldr	r3, [r4, #16]
 8011928:	88d9      	ldrh	r1, [r3, #6]
 801192a:	889a      	ldrh	r2, [r3, #4]
 801192c:	430a      	orrs	r2, r1
 801192e:	d010      	beq.n	8011952 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011930:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011934:	2a00      	cmp	r2, #0
 8011936:	db0c      	blt.n	8011952 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011938:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801193a:	428a      	cmp	r2, r1
 801193c:	da09      	bge.n	8011952 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801193e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011942:	4291      	cmp	r1, r2
 8011944:	f102 0201 	add.w	r2, r2, #1
 8011948:	bf88      	it	hi
 801194a:	3308      	addhi	r3, #8
 801194c:	60a2      	str	r2, [r4, #8]
 801194e:	bf88      	it	hi
 8011950:	6123      	strhi	r3, [r4, #16]
 8011952:	68a1      	ldr	r1, [r4, #8]
 8011954:	b129      	cbz	r1, 8011962 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011956:	6863      	ldr	r3, [r4, #4]
 8011958:	4299      	cmp	r1, r3
 801195a:	d802      	bhi.n	8011962 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801195c:	68e0      	ldr	r0, [r4, #12]
 801195e:	f7ff febd 	bl	80116dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8011962:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011964:	f023 0302 	bic.w	r3, r3, #2
 8011968:	6263      	str	r3, [r4, #36]	@ 0x24
 801196a:	68e0      	ldr	r0, [r4, #12]
 801196c:	bd10      	pop	{r4, pc}
	...

08011970 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011970:	4b01      	ldr	r3, [pc, #4]	@ (8011978 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8011972:	6818      	ldr	r0, [r3, #0]
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	24025274 	.word	0x24025274

0801197c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801197c:	4b01      	ldr	r3, [pc, #4]	@ (8011984 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	24025278 	.word	0x24025278

08011988 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011988:	b510      	push	{r4, lr}
 801198a:	6803      	ldr	r3, [r0, #0]
 801198c:	460c      	mov	r4, r1
 801198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011990:	4798      	blx	r3
 8011992:	1b03      	subs	r3, r0, r4
 8011994:	4258      	negs	r0, r3
 8011996:	4158      	adcs	r0, r3
 8011998:	bd10      	pop	{r4, pc}
	...

0801199c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801199c:	4b01      	ldr	r3, [pc, #4]	@ (80119a4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801199e:	6019      	str	r1, [r3, #0]
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	2402527c 	.word	0x2402527c

080119a8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	4696      	mov	lr, r2
 80119ae:	b097      	sub	sp, #92	@ 0x5c
 80119b0:	4605      	mov	r5, r0
 80119b2:	4614      	mov	r4, r2
 80119b4:	460e      	mov	r6, r1
 80119b6:	461f      	mov	r7, r3
 80119b8:	f10d 0c1c 	add.w	ip, sp, #28
 80119bc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80119c0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80119c4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80119c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119d0:	f8de 3000 	ldr.w	r3, [lr]
 80119d4:	f104 0e14 	add.w	lr, r4, #20
 80119d8:	f8cc 3000 	str.w	r3, [ip]
 80119dc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80119e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119e8:	f8de 3000 	ldr.w	r3, [lr]
 80119ec:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80119f0:	f8cc 3000 	str.w	r3, [ip]
 80119f4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80119f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a00:	f8de 3000 	ldr.w	r3, [lr]
 8011a04:	4631      	mov	r1, r6
 8011a06:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f8cc 3000 	str.w	r3, [ip]
 8011a0e:	682b      	ldr	r3, [r5, #0]
 8011a10:	9201      	str	r2, [sp, #4]
 8011a12:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a14:	f8cd 8008 	str.w	r8, [sp, #8]
 8011a18:	9200      	str	r2, [sp, #0]
 8011a1a:	aa07      	add	r2, sp, #28
 8011a1c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011a20:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011a24:	463b      	mov	r3, r7
 8011a26:	47d8      	blx	fp
 8011a28:	46a6      	mov	lr, r4
 8011a2a:	f10d 0c1c 	add.w	ip, sp, #28
 8011a2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a36:	f8de 3000 	ldr.w	r3, [lr]
 8011a3a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011a3e:	343c      	adds	r4, #60	@ 0x3c
 8011a40:	f8cc 3000 	str.w	r3, [ip]
 8011a44:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011a48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a50:	f8de 3000 	ldr.w	r3, [lr]
 8011a54:	f8cc 3000 	str.w	r3, [ip]
 8011a58:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	4631      	mov	r1, r6
 8011a66:	4628      	mov	r0, r5
 8011a68:	f8cc 3000 	str.w	r3, [ip]
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011a72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011a74:	f8cd 8008 	str.w	r8, [sp, #8]
 8011a78:	9201      	str	r2, [sp, #4]
 8011a7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a7c:	9200      	str	r2, [sp, #0]
 8011a7e:	aa07      	add	r2, sp, #28
 8011a80:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8011a82:	463b      	mov	r3, r7
 8011a84:	47a0      	blx	r4
 8011a86:	b017      	add	sp, #92	@ 0x5c
 8011a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a90:	b08d      	sub	sp, #52	@ 0x34
 8011a92:	4688      	mov	r8, r1
 8011a94:	f8d3 c000 	ldr.w	ip, [r3]
 8011a98:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011a9a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8011a9e:	680f      	ldr	r7, [r1, #0]
 8011aa0:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011aa4:	eba7 070c 	sub.w	r7, r7, ip
 8011aa8:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8011aac:	edd3 6a07 	vldr	s13, [r3, #28]
 8011ab0:	42bc      	cmp	r4, r7
 8011ab2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011ab4:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8011ab8:	bfa8      	it	ge
 8011aba:	463c      	movge	r4, r7
 8011abc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011ac0:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011ac4:	ee07 4a90 	vmov	s15, r4
 8011ac8:	eb09 0e0c 	add.w	lr, r9, ip
 8011acc:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8011ad0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011ad4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8011ad8:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8011adc:	4571      	cmp	r1, lr
 8011ade:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011ae2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011ae6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011aea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011aee:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011af2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011afa:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011afe:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011b02:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011b06:	f340 808c 	ble.w	8011c22 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011b0a:	eba1 060e 	sub.w	r6, r1, lr
 8011b0e:	fb96 f5f4 	sdiv	r5, r6, r4
 8011b12:	ee07 5a10 	vmov	s14, r5
 8011b16:	2d00      	cmp	r5, #0
 8011b18:	fb04 6615 	mls	r6, r4, r5, r6
 8011b1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b20:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011b24:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011b28:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011b2c:	dd12      	ble.n	8011b54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011b2e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011b32:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011b36:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011b3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b42:	bf14      	ite	ne
 8011b44:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011b48:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011b4c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011b50:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011b54:	fb05 f204 	mul.w	r2, r5, r4
 8011b58:	1abf      	subs	r7, r7, r2
 8011b5a:	4494      	add	ip, r2
 8011b5c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011b60:	4411      	add	r1, r2
 8011b62:	eb09 020c 	add.w	r2, r9, ip
 8011b66:	b209      	sxth	r1, r1
 8011b68:	443a      	add	r2, r7
 8011b6a:	428a      	cmp	r2, r1
 8011b6c:	bfc4      	itt	gt
 8011b6e:	eba1 0209 	subgt.w	r2, r1, r9
 8011b72:	eba2 070c 	subgt.w	r7, r2, ip
 8011b76:	2f00      	cmp	r7, #0
 8011b78:	dd50      	ble.n	8011c1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011b7a:	fb97 f1f4 	sdiv	r1, r7, r4
 8011b7e:	fb04 7211 	mls	r2, r4, r1, r7
 8011b82:	b90a      	cbnz	r2, 8011b88 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011b84:	3901      	subs	r1, #1
 8011b86:	4622      	mov	r2, r4
 8011b88:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011b8c:	6840      	ldr	r0, [r0, #4]
 8011b8e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8011b92:	44b6      	add	lr, r6
 8011b94:	f8d0 a000 	ldr.w	sl, [r0]
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	bfcc      	ite	gt
 8011b9c:	46a1      	movgt	r9, r4
 8011b9e:	4691      	movle	r9, r2
 8011ba0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011ba2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011ba4:	fb04 e505 	mla	r5, r4, r5, lr
 8011ba8:	eef0 6a42 	vmov.f32	s13, s4
 8011bac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011bb0:	9008      	str	r0, [sp, #32]
 8011bb2:	eeb0 7a61 	vmov.f32	s14, s3
 8011bb6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011bb8:	695b      	ldr	r3, [r3, #20]
 8011bba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011bbe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011bc2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011bc6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011bc8:	445b      	add	r3, fp
 8011bca:	9307      	str	r3, [sp, #28]
 8011bcc:	ee16 3a90 	vmov	r3, s13
 8011bd0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011bd4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011bd8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011bdc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011be0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011be4:	ee17 7a90 	vmov	r7, s15
 8011be8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011bec:	fb97 f7f4 	sdiv	r7, r7, r4
 8011bf0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011bf4:	ee17 ca90 	vmov	ip, s15
 8011bf8:	fb9c fcf4 	sdiv	ip, ip, r4
 8011bfc:	fb0c 3306 	mla	r3, ip, r6, r3
 8011c00:	9302      	str	r3, [sp, #8]
 8011c02:	ee17 3a10 	vmov	r3, s14
 8011c06:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011c0a:	fb07 3706 	mla	r7, r7, r6, r3
 8011c0e:	eba9 0306 	sub.w	r3, r9, r6
 8011c12:	e9cd 4700 	strd	r4, r7, [sp]
 8011c16:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011c1a:	47a0      	blx	r4
 8011c1c:	b00d      	add	sp, #52	@ 0x34
 8011c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c22:	2500      	movs	r5, #0
 8011c24:	462e      	mov	r6, r5
 8011c26:	e799      	b.n	8011b5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	b0db      	sub	sp, #364	@ 0x16c
 8011c2e:	461d      	mov	r5, r3
 8011c30:	4614      	mov	r4, r2
 8011c32:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8011c36:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011c38:	4629      	mov	r1, r5
 8011c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c3c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011c40:	9009      	str	r0, [sp, #36]	@ 0x24
 8011c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c44:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8011c48:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8011c4c:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c4e:	6803      	ldr	r3, [r0, #0]
 8011c50:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8011c52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011c56:	47b8      	blx	r7
 8011c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c5a:	6058      	str	r0, [r3, #4]
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	f000 83a1 	beq.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011c62:	682b      	ldr	r3, [r5, #0]
 8011c64:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8011c68:	ed94 7a02 	vldr	s14, [r4, #8]
 8011c6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8011c6e:	686b      	ldr	r3, [r5, #4]
 8011c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c74:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c76:	4bc1      	ldr	r3, [pc, #772]	@ (8011f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011c78:	7819      	ldrb	r1, [r3, #0]
 8011c7a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011c7e:	2900      	cmp	r1, #0
 8011c80:	bf16      	itet	ne
 8011c82:	4619      	movne	r1, r3
 8011c84:	4611      	moveq	r1, r2
 8011c86:	4613      	movne	r3, r2
 8011c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c8c:	9116      	str	r1, [sp, #88]	@ 0x58
 8011c8e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8011c92:	f240 8387 	bls.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011c96:	ed94 7a07 	vldr	s14, [r4, #28]
 8011c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca2:	f240 837f 	bls.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ca6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8011caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb2:	f240 8377 	bls.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011cb6:	6822      	ldr	r2, [r4, #0]
 8011cb8:	4bb1      	ldr	r3, [pc, #708]	@ (8011f80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	f2c0 8372 	blt.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011cc0:	49b0      	ldr	r1, [pc, #704]	@ (8011f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011cc2:	6963      	ldr	r3, [r4, #20]
 8011cc4:	428a      	cmp	r2, r1
 8011cc6:	f300 836d 	bgt.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011cca:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011cce:	48ae      	ldr	r0, [pc, #696]	@ (8011f88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011cd0:	33ff      	adds	r3, #255	@ 0xff
 8011cd2:	4283      	cmp	r3, r0
 8011cd4:	f200 8366 	bhi.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011cd8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011cda:	4dac      	ldr	r5, [pc, #688]	@ (8011f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011cdc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011ce0:	33ff      	adds	r3, #255	@ 0xff
 8011ce2:	42ab      	cmp	r3, r5
 8011ce4:	f200 835e 	bhi.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ce8:	6862      	ldr	r2, [r4, #4]
 8011cea:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8011cee:	33ff      	adds	r3, #255	@ 0xff
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	f200 8357 	bhi.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011cf6:	69a1      	ldr	r1, [r4, #24]
 8011cf8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8011cfc:	33ff      	adds	r3, #255	@ 0xff
 8011cfe:	4283      	cmp	r3, r0
 8011d00:	f200 8350 	bhi.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011d04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011d06:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8011d0a:	30ff      	adds	r0, #255	@ 0xff
 8011d0c:	42a8      	cmp	r0, r5
 8011d0e:	f200 8349 	bhi.w	80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011d12:	428a      	cmp	r2, r1
 8011d14:	f280 8110 	bge.w	8011f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	f300 8119 	bgt.w	8011f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011d1e:	4299      	cmp	r1, r3
 8011d20:	f280 811d 	bge.w	8011f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011d24:	2502      	movs	r5, #2
 8011d26:	2701      	movs	r7, #1
 8011d28:	46a9      	mov	r9, r5
 8011d2a:	46b8      	mov	r8, r7
 8011d2c:	f04f 0a00 	mov.w	sl, #0
 8011d30:	4621      	mov	r1, r4
 8011d32:	a849      	add	r0, sp, #292	@ 0x124
 8011d34:	f004 fa64 	bl	8016200 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011d38:	4622      	mov	r2, r4
 8011d3a:	4653      	mov	r3, sl
 8011d3c:	a949      	add	r1, sp, #292	@ 0x124
 8011d3e:	f8cd 9000 	str.w	r9, [sp]
 8011d42:	a819      	add	r0, sp, #100	@ 0x64
 8011d44:	f004 fb8c 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011d48:	4622      	mov	r2, r4
 8011d4a:	4653      	mov	r3, sl
 8011d4c:	a949      	add	r1, sp, #292	@ 0x124
 8011d4e:	f8cd 8000 	str.w	r8, [sp]
 8011d52:	a829      	add	r0, sp, #164	@ 0xa4
 8011d54:	f004 fb84 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011d58:	4643      	mov	r3, r8
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	a949      	add	r1, sp, #292	@ 0x124
 8011d5e:	f8cd 9000 	str.w	r9, [sp]
 8011d62:	a839      	add	r0, sp, #228	@ 0xe4
 8011d64:	f004 fb7c 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011d68:	42af      	cmp	r7, r5
 8011d6a:	af12      	add	r7, sp, #72	@ 0x48
 8011d6c:	bfb7      	itett	lt
 8011d6e:	2300      	movlt	r3, #0
 8011d70:	2301      	movge	r3, #1
 8011d72:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8011d74:	ac19      	addlt	r4, sp, #100	@ 0x64
 8011d76:	bfb1      	iteee	lt
 8011d78:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8011d7a:	ad19      	addge	r5, sp, #100	@ 0x64
 8011d7c:	930e      	strge	r3, [sp, #56]	@ 0x38
 8011d7e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8011d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d86:	e887 0003 	stmia.w	r7, {r0, r1}
 8011d8a:	b928      	cbnz	r0, 8011d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011d8c:	4b80      	ldr	r3, [pc, #512]	@ (8011f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011d8e:	6818      	ldr	r0, [r3, #0]
 8011d90:	6803      	ldr	r3, [r0, #0]
 8011d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d94:	4798      	blx	r3
 8011d96:	6038      	str	r0, [r7, #0]
 8011d98:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011d9a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011d9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011da2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8011da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011da6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011da8:	6963      	ldr	r3, [r4, #20]
 8011daa:	440b      	add	r3, r1
 8011dac:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011db0:	4408      	add	r0, r1
 8011db2:	b200      	sxth	r0, r0
 8011db4:	4283      	cmp	r3, r0
 8011db6:	900d      	str	r0, [sp, #52]	@ 0x34
 8011db8:	f280 80dd 	bge.w	8011f76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011dbc:	428b      	cmp	r3, r1
 8011dbe:	da08      	bge.n	8011dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	dd06      	ble.n	8011dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011dc4:	1acb      	subs	r3, r1, r3
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	f2c0 80e4 	blt.w	8011f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f300 80e2 	bgt.w	8011f96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011dd2:	6967      	ldr	r7, [r4, #20]
 8011dd4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8011dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dda:	443b      	add	r3, r7
 8011ddc:	461f      	mov	r7, r3
 8011dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011de0:	1bdf      	subs	r7, r3, r7
 8011de2:	4297      	cmp	r7, r2
 8011de4:	bfa8      	it	ge
 8011de6:	4617      	movge	r7, r2
 8011de8:	2f00      	cmp	r7, #0
 8011dea:	f340 8166 	ble.w	80120ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8011dee:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011df0:	6829      	ldr	r1, [r5, #0]
 8011df2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011df6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011dfa:	4411      	add	r1, r2
 8011dfc:	6820      	ldr	r0, [r4, #0]
 8011dfe:	4299      	cmp	r1, r3
 8011e00:	dd1a      	ble.n	8011e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011e02:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011e06:	4402      	add	r2, r0
 8011e08:	440b      	add	r3, r1
 8011e0a:	b21b      	sxth	r3, r3
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	dc13      	bgt.n	8011e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011e10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011e12:	a912      	add	r1, sp, #72	@ 0x48
 8011e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	9206      	str	r2, [sp, #24]
 8011e1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e1e:	9500      	str	r5, [sp, #0]
 8011e20:	9205      	str	r2, [sp, #20]
 8011e22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e24:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011e28:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011e2a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011e2e:	aa49      	add	r2, sp, #292	@ 0x124
 8011e30:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011e34:	4623      	mov	r3, r4
 8011e36:	47c8      	blx	r9
 8011e38:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011e3c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011e40:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e48:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8011e4c:	68a1      	ldr	r1, [r4, #8]
 8011e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e52:	ed94 6a08 	vldr	s12, [r4, #32]
 8011e56:	edd4 6a07 	vldr	s13, [r4, #28]
 8011e5a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011e5e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011e62:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011e66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e6a:	edc4 6a07 	vstr	s13, [r4, #28]
 8011e6e:	441a      	add	r2, r3
 8011e70:	6963      	ldr	r3, [r4, #20]
 8011e72:	3301      	adds	r3, #1
 8011e74:	6022      	str	r2, [r4, #0]
 8011e76:	6163      	str	r3, [r4, #20]
 8011e78:	69a3      	ldr	r3, [r4, #24]
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	61a3      	str	r3, [r4, #24]
 8011e7e:	6923      	ldr	r3, [r4, #16]
 8011e80:	440b      	add	r3, r1
 8011e82:	68e1      	ldr	r1, [r4, #12]
 8011e84:	428b      	cmp	r3, r1
 8011e86:	6123      	str	r3, [r4, #16]
 8011e88:	db15      	blt.n	8011eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8011e8a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011e8e:	3201      	adds	r2, #1
 8011e90:	1a5b      	subs	r3, r3, r1
 8011e92:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011e96:	6022      	str	r2, [r4, #0]
 8011e98:	6123      	str	r3, [r4, #16]
 8011e9a:	edc4 6a07 	vstr	s13, [r4, #28]
 8011e9e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011ea2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011ea6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011eaa:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011eb2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011eb6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8011eba:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011ebe:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ec6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8011eca:	68a9      	ldr	r1, [r5, #8]
 8011ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ed0:	ed95 6a08 	vldr	s12, [r5, #32]
 8011ed4:	edd5 6a07 	vldr	s13, [r5, #28]
 8011ed8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011edc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011ee0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011ee4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ee8:	edc5 6a07 	vstr	s13, [r5, #28]
 8011eec:	441a      	add	r2, r3
 8011eee:	696b      	ldr	r3, [r5, #20]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	602a      	str	r2, [r5, #0]
 8011ef4:	616b      	str	r3, [r5, #20]
 8011ef6:	69ab      	ldr	r3, [r5, #24]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	61ab      	str	r3, [r5, #24]
 8011efc:	692b      	ldr	r3, [r5, #16]
 8011efe:	440b      	add	r3, r1
 8011f00:	68e9      	ldr	r1, [r5, #12]
 8011f02:	428b      	cmp	r3, r1
 8011f04:	612b      	str	r3, [r5, #16]
 8011f06:	db15      	blt.n	8011f34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011f08:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011f0c:	3201      	adds	r2, #1
 8011f0e:	1a5b      	subs	r3, r3, r1
 8011f10:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011f14:	602a      	str	r2, [r5, #0]
 8011f16:	612b      	str	r3, [r5, #16]
 8011f18:	edc5 6a07 	vstr	s13, [r5, #28]
 8011f1c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011f20:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011f24:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011f28:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f30:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011f34:	3f01      	subs	r7, #1
 8011f36:	e757      	b.n	8011de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011f38:	4299      	cmp	r1, r3
 8011f3a:	dc13      	bgt.n	8011f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	da14      	bge.n	8011f6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011f40:	2502      	movs	r5, #2
 8011f42:	2703      	movs	r7, #3
 8011f44:	f04f 0800 	mov.w	r8, #0
 8011f48:	46a9      	mov	r9, r5
 8011f4a:	f04f 0a01 	mov.w	sl, #1
 8011f4e:	e6ef      	b.n	8011d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011f50:	2501      	movs	r5, #1
 8011f52:	2700      	movs	r7, #0
 8011f54:	46a9      	mov	r9, r5
 8011f56:	46b8      	mov	r8, r7
 8011f58:	f04f 0a02 	mov.w	sl, #2
 8011f5c:	e6e8      	b.n	8011d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011f5e:	2501      	movs	r5, #1
 8011f60:	2702      	movs	r7, #2
 8011f62:	e6e1      	b.n	8011d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011f64:	2500      	movs	r5, #0
 8011f66:	2701      	movs	r7, #1
 8011f68:	e7f4      	b.n	8011f54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011f6a:	2702      	movs	r7, #2
 8011f6c:	2503      	movs	r5, #3
 8011f6e:	f04f 0900 	mov.w	r9, #0
 8011f72:	46b8      	mov	r8, r7
 8011f74:	e7e9      	b.n	8011f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011f76:	4613      	mov	r3, r2
 8011f78:	e728      	b.n	8011dcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011f7a:	bf00      	nop
 8011f7c:	24025264 	.word	0x24025264
 8011f80:	fffd8f01 	.word	0xfffd8f01
 8011f84:	00027100 	.word	0x00027100
 8011f88:	0004e1ff 	.word	0x0004e1ff
 8011f8c:	0004e1fe 	.word	0x0004e1fe
 8011f90:	2402526c 	.word	0x2402526c
 8011f94:	4613      	mov	r3, r2
 8011f96:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011f98:	469e      	mov	lr, r3
 8011f9a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011f9c:	469c      	mov	ip, r3
 8011f9e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011fa0:	f04f 0900 	mov.w	r9, #0
 8011fa4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8011fa8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8011fac:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011fb0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011fb4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8011fb8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011fbc:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8011fc0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8011fc4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8011fc8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8011fcc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8011fd0:	f1bc 0f00 	cmp.w	ip, #0
 8011fd4:	d147      	bne.n	8012066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011fd6:	eb03 0c07 	add.w	ip, r3, r7
 8011fda:	1ad7      	subs	r7, r2, r3
 8011fdc:	f1b9 0f00 	cmp.w	r9, #0
 8011fe0:	d009      	beq.n	8011ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011fe2:	9029      	str	r0, [sp, #164]	@ 0xa4
 8011fe4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8011fe8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8011fec:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8011ff0:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011ff2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8011ff6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011ff8:	f04f 0800 	mov.w	r8, #0
 8011ffc:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012000:	9111      	str	r1, [sp, #68]	@ 0x44
 8012002:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012006:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801200a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801200e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012012:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012016:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801201a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801201e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012022:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012026:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801202a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801202e:	f1be 0f00 	cmp.w	lr, #0
 8012032:	d031      	beq.n	8012098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012034:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012036:	4450      	add	r0, sl
 8012038:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801203c:	4431      	add	r1, r6
 801203e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012042:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012046:	4549      	cmp	r1, r9
 8012048:	db08      	blt.n	801205c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801204a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801204e:	3001      	adds	r0, #1
 8012050:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012054:	eba1 0109 	sub.w	r1, r1, r9
 8012058:	ee37 7a06 	vadd.f32	s14, s14, s12
 801205c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012060:	f04f 0801 	mov.w	r8, #1
 8012064:	e7e3      	b.n	801202e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012066:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012068:	4450      	add	r0, sl
 801206a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801206e:	4431      	add	r1, r6
 8012070:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012074:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012078:	4541      	cmp	r1, r8
 801207a:	db08      	blt.n	801208e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801207c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012080:	3001      	adds	r0, #1
 8012082:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012086:	eba1 0108 	sub.w	r1, r1, r8
 801208a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801208e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012092:	f04f 0901 	mov.w	r9, #1
 8012096:	e79b      	b.n	8011fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012098:	449c      	add	ip, r3
 801209a:	1aff      	subs	r7, r7, r3
 801209c:	f1b8 0f00 	cmp.w	r8, #0
 80120a0:	d009      	beq.n	80120b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80120a2:	9019      	str	r0, [sp, #100]	@ 0x64
 80120a4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80120a8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80120ac:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80120b0:	911d      	str	r1, [sp, #116]	@ 0x74
 80120b2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80120b6:	1ad2      	subs	r2, r2, r3
 80120b8:	e68b      	b.n	8011dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80120ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120bc:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f000 80d1 	beq.w	8012266 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80120c4:	ad19      	add	r5, sp, #100	@ 0x64
 80120c6:	ac39      	add	r4, sp, #228	@ 0xe4
 80120c8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80120ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80120ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80120d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80120d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80120d6:	6963      	ldr	r3, [r4, #20]
 80120d8:	440b      	add	r3, r1
 80120da:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80120de:	4408      	add	r0, r1
 80120e0:	b200      	sxth	r0, r0
 80120e2:	4283      	cmp	r3, r0
 80120e4:	900d      	str	r0, [sp, #52]	@ 0x34
 80120e6:	f280 80c1 	bge.w	801226c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80120ea:	428b      	cmp	r3, r1
 80120ec:	da08      	bge.n	8012100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	dd06      	ble.n	8012100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80120f2:	1acb      	subs	r3, r1, r3
 80120f4:	429a      	cmp	r2, r3
 80120f6:	f2c0 80bb 	blt.w	8012270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f300 80b9 	bgt.w	8012272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012100:	6967      	ldr	r7, [r4, #20]
 8012102:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012106:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012108:	443b      	add	r3, r7
 801210a:	461f      	mov	r7, r3
 801210c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801210e:	1bdf      	subs	r7, r3, r7
 8012110:	4297      	cmp	r7, r2
 8012112:	bfa8      	it	ge
 8012114:	4617      	movge	r7, r2
 8012116:	2f00      	cmp	r7, #0
 8012118:	f340 813c 	ble.w	8012394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801211c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801211e:	6829      	ldr	r1, [r5, #0]
 8012120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012124:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012128:	4411      	add	r1, r2
 801212a:	6820      	ldr	r0, [r4, #0]
 801212c:	4299      	cmp	r1, r3
 801212e:	dd1a      	ble.n	8012166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012130:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012134:	4402      	add	r2, r0
 8012136:	440b      	add	r3, r1
 8012138:	b21b      	sxth	r3, r3
 801213a:	429a      	cmp	r2, r3
 801213c:	dc13      	bgt.n	8012166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801213e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012140:	a912      	add	r1, sp, #72	@ 0x48
 8012142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012144:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	9206      	str	r2, [sp, #24]
 801214a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801214c:	9500      	str	r5, [sp, #0]
 801214e:	9205      	str	r2, [sp, #20]
 8012150:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012152:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012156:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012158:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801215c:	aa49      	add	r2, sp, #292	@ 0x124
 801215e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012162:	4623      	mov	r3, r4
 8012164:	47c8      	blx	r9
 8012166:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801216a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801216e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012176:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801217a:	68a1      	ldr	r1, [r4, #8]
 801217c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012180:	ed94 6a08 	vldr	s12, [r4, #32]
 8012184:	edd4 6a07 	vldr	s13, [r4, #28]
 8012188:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801218c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012190:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012194:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012198:	edc4 6a07 	vstr	s13, [r4, #28]
 801219c:	441a      	add	r2, r3
 801219e:	6963      	ldr	r3, [r4, #20]
 80121a0:	3301      	adds	r3, #1
 80121a2:	6022      	str	r2, [r4, #0]
 80121a4:	6163      	str	r3, [r4, #20]
 80121a6:	69a3      	ldr	r3, [r4, #24]
 80121a8:	3b01      	subs	r3, #1
 80121aa:	61a3      	str	r3, [r4, #24]
 80121ac:	6923      	ldr	r3, [r4, #16]
 80121ae:	440b      	add	r3, r1
 80121b0:	68e1      	ldr	r1, [r4, #12]
 80121b2:	428b      	cmp	r3, r1
 80121b4:	6123      	str	r3, [r4, #16]
 80121b6:	db15      	blt.n	80121e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80121b8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80121bc:	3201      	adds	r2, #1
 80121be:	1a5b      	subs	r3, r3, r1
 80121c0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80121c4:	6022      	str	r2, [r4, #0]
 80121c6:	6123      	str	r3, [r4, #16]
 80121c8:	edc4 6a07 	vstr	s13, [r4, #28]
 80121cc:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80121d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80121d4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80121d8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80121dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121e0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80121e4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80121e8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80121ec:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80121f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121f4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80121f8:	68a9      	ldr	r1, [r5, #8]
 80121fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121fe:	ed95 6a08 	vldr	s12, [r5, #32]
 8012202:	edd5 6a07 	vldr	s13, [r5, #28]
 8012206:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801220a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801220e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012212:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012216:	edc5 6a07 	vstr	s13, [r5, #28]
 801221a:	441a      	add	r2, r3
 801221c:	696b      	ldr	r3, [r5, #20]
 801221e:	3301      	adds	r3, #1
 8012220:	602a      	str	r2, [r5, #0]
 8012222:	616b      	str	r3, [r5, #20]
 8012224:	69ab      	ldr	r3, [r5, #24]
 8012226:	3b01      	subs	r3, #1
 8012228:	61ab      	str	r3, [r5, #24]
 801222a:	692b      	ldr	r3, [r5, #16]
 801222c:	440b      	add	r3, r1
 801222e:	68e9      	ldr	r1, [r5, #12]
 8012230:	428b      	cmp	r3, r1
 8012232:	612b      	str	r3, [r5, #16]
 8012234:	db15      	blt.n	8012262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012236:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801223a:	3201      	adds	r2, #1
 801223c:	1a5b      	subs	r3, r3, r1
 801223e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012242:	602a      	str	r2, [r5, #0]
 8012244:	612b      	str	r3, [r5, #16]
 8012246:	edc5 6a07 	vstr	s13, [r5, #28]
 801224a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801224e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012252:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012256:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801225e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012262:	3f01      	subs	r7, #1
 8012264:	e757      	b.n	8012116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012266:	ad39      	add	r5, sp, #228	@ 0xe4
 8012268:	ac19      	add	r4, sp, #100	@ 0x64
 801226a:	e72d      	b.n	80120c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801226c:	4613      	mov	r3, r2
 801226e:	e744      	b.n	80120fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012270:	4613      	mov	r3, r2
 8012272:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8012274:	469e      	mov	lr, r3
 8012276:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801227a:	461f      	mov	r7, r3
 801227c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8012280:	f04f 0900 	mov.w	r9, #0
 8012284:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8012288:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801228c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8012290:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8012294:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8012298:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801229a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801229e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80122a2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80122a6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80122aa:	960e      	str	r6, [sp, #56]	@ 0x38
 80122ac:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80122b0:	2f00      	cmp	r7, #0
 80122b2:	d146      	bne.n	8012342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80122b4:	449c      	add	ip, r3
 80122b6:	1ad7      	subs	r7, r2, r3
 80122b8:	f1b9 0f00 	cmp.w	r9, #0
 80122bc:	d009      	beq.n	80122d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80122be:	9039      	str	r0, [sp, #228]	@ 0xe4
 80122c0:	913d      	str	r1, [sp, #244]	@ 0xf4
 80122c2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80122c6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80122ca:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80122ce:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80122d2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80122d4:	f04f 0800 	mov.w	r8, #0
 80122d8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80122dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80122de:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80122e2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80122e6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80122ea:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80122ee:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80122f2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80122f6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80122fa:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80122fe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012302:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012306:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801230a:	f1be 0f00 	cmp.w	lr, #0
 801230e:	d030      	beq.n	8012372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012310:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012312:	4450      	add	r0, sl
 8012314:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012318:	4431      	add	r1, r6
 801231a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801231e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012322:	4549      	cmp	r1, r9
 8012324:	db08      	blt.n	8012338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012326:	ee77 7a85 	vadd.f32	s15, s15, s10
 801232a:	3001      	adds	r0, #1
 801232c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012330:	eba1 0109 	sub.w	r1, r1, r9
 8012334:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012338:	f10e 3eff 	add.w	lr, lr, #4294967295
 801233c:	f04f 0801 	mov.w	r8, #1
 8012340:	e7e3      	b.n	801230a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012342:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012344:	4450      	add	r0, sl
 8012346:	ee37 7a24 	vadd.f32	s14, s14, s9
 801234a:	4431      	add	r1, r6
 801234c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012350:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012354:	4541      	cmp	r1, r8
 8012356:	db08      	blt.n	801236a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012358:	ee76 6a85 	vadd.f32	s13, s13, s10
 801235c:	3001      	adds	r0, #1
 801235e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012362:	eba1 0108 	sub.w	r1, r1, r8
 8012366:	ee77 7a86 	vadd.f32	s15, s15, s12
 801236a:	3f01      	subs	r7, #1
 801236c:	f04f 0901 	mov.w	r9, #1
 8012370:	e79e      	b.n	80122b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012372:	449c      	add	ip, r3
 8012374:	1aff      	subs	r7, r7, r3
 8012376:	f1b8 0f00 	cmp.w	r8, #0
 801237a:	d009      	beq.n	8012390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801237c:	9019      	str	r0, [sp, #100]	@ 0x64
 801237e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8012382:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012386:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801238a:	911d      	str	r1, [sp, #116]	@ 0x74
 801238c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012390:	1ad2      	subs	r2, r2, r3
 8012392:	e6b5      	b.n	8012100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	b923      	cbnz	r3, 80123a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801239a:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801239c:	6818      	ldr	r0, [r3, #0]
 801239e:	6803      	ldr	r3, [r0, #0]
 80123a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123a2:	4798      	blx	r3
 80123a4:	b05b      	add	sp, #364	@ 0x16c
 80123a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123aa:	bf00      	nop
 80123ac:	2402526c 	.word	0x2402526c

080123b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80123b0:	b570      	push	{r4, r5, r6, lr}
 80123b2:	4604      	mov	r4, r0
 80123b4:	2500      	movs	r5, #0
 80123b6:	9805      	ldr	r0, [sp, #20]
 80123b8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80123bc:	6061      	str	r1, [r4, #4]
 80123be:	8263      	strh	r3, [r4, #18]
 80123c0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80123c4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80123c8:	8025      	strh	r5, [r4, #0]
 80123ca:	7221      	strb	r1, [r4, #8]
 80123cc:	7266      	strb	r6, [r4, #9]
 80123ce:	60e0      	str	r0, [r4, #12]
 80123d0:	8222      	strh	r2, [r4, #16]
 80123d2:	82a3      	strh	r3, [r4, #20]
 80123d4:	82e5      	strh	r5, [r4, #22]
 80123d6:	8325      	strh	r5, [r4, #24]
 80123d8:	8365      	strh	r5, [r4, #26]
 80123da:	83a5      	strh	r5, [r4, #28]
 80123dc:	83e5      	strh	r5, [r4, #30]
 80123de:	8425      	strh	r5, [r4, #32]
 80123e0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80123e4:	b32e      	cbz	r6, 8012432 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80123e6:	6803      	ldr	r3, [r0, #0]
 80123e8:	695b      	ldr	r3, [r3, #20]
 80123ea:	4798      	blx	r3
 80123ec:	4606      	mov	r6, r0
 80123ee:	b300      	cbz	r0, 8012432 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80123f0:	68e0      	ldr	r0, [r4, #12]
 80123f2:	4631      	mov	r1, r6
 80123f4:	6803      	ldr	r3, [r0, #0]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	4798      	blx	r3
 80123fa:	4605      	mov	r5, r0
 80123fc:	b1c8      	cbz	r0, 8012432 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80123fe:	7b43      	ldrb	r3, [r0, #13]
 8012400:	7a82      	ldrb	r2, [r0, #10]
 8012402:	005b      	lsls	r3, r3, #1
 8012404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012408:	4313      	orrs	r3, r2
 801240a:	8423      	strh	r3, [r4, #32]
 801240c:	7a63      	ldrb	r3, [r4, #9]
 801240e:	2b06      	cmp	r3, #6
 8012410:	d10f      	bne.n	8012432 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012412:	68e0      	ldr	r0, [r4, #12]
 8012414:	462a      	mov	r2, r5
 8012416:	4631      	mov	r1, r6
 8012418:	6803      	ldr	r3, [r0, #0]
 801241a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801241c:	4798      	blx	r3
 801241e:	7b6b      	ldrb	r3, [r5, #13]
 8012420:	005b      	lsls	r3, r3, #1
 8012422:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012426:	7aab      	ldrb	r3, [r5, #10]
 8012428:	4313      	orrs	r3, r2
 801242a:	4418      	add	r0, r3
 801242c:	8c23      	ldrh	r3, [r4, #32]
 801242e:	4418      	add	r0, r3
 8012430:	8420      	strh	r0, [r4, #32]
 8012432:	4620      	mov	r0, r4
 8012434:	bd70      	pop	{r4, r5, r6, pc}

08012436 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8012436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	2400      	movs	r4, #0
 801243c:	b085      	sub	sp, #20
 801243e:	4681      	mov	r9, r0
 8012440:	4688      	mov	r8, r1
 8012442:	4692      	mov	sl, r2
 8012444:	469b      	mov	fp, r3
 8012446:	4627      	mov	r7, r4
 8012448:	4625      	mov	r5, r4
 801244a:	4626      	mov	r6, r4
 801244c:	4554      	cmp	r4, sl
 801244e:	da2a      	bge.n	80124a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012450:	2300      	movs	r3, #0
 8012452:	9303      	str	r3, [sp, #12]
 8012454:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012458:	429d      	cmp	r5, r3
 801245a:	d004      	beq.n	8012466 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801245c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012460:	429d      	cmp	r5, r3
 8012462:	bf18      	it	ne
 8012464:	462f      	movne	r7, r5
 8012466:	ab03      	add	r3, sp, #12
 8012468:	4642      	mov	r2, r8
 801246a:	4659      	mov	r1, fp
 801246c:	4648      	mov	r0, r9
 801246e:	f003 fcdd 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012472:	4605      	mov	r5, r0
 8012474:	b1b8      	cbz	r0, 80124a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012476:	280a      	cmp	r0, #10
 8012478:	d015      	beq.n	80124a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801247a:	9a03      	ldr	r2, [sp, #12]
 801247c:	b18a      	cbz	r2, 80124a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801247e:	7b50      	ldrb	r0, [r2, #13]
 8012480:	4639      	mov	r1, r7
 8012482:	7a93      	ldrb	r3, [r2, #10]
 8012484:	0040      	lsls	r0, r0, #1
 8012486:	8895      	ldrh	r5, [r2, #4]
 8012488:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801248c:	4303      	orrs	r3, r0
 801248e:	4640      	mov	r0, r8
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	f8d8 3000 	ldr.w	r3, [r8]
 8012496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012498:	4798      	blx	r3
 801249a:	9b01      	ldr	r3, [sp, #4]
 801249c:	4418      	add	r0, r3
 801249e:	4406      	add	r6, r0
 80124a0:	b2b6      	uxth	r6, r6
 80124a2:	3401      	adds	r4, #1
 80124a4:	e7d2      	b.n	801244c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80124a6:	4630      	mov	r0, r6
 80124a8:	b005      	add	sp, #20
 80124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80124ae:	2a02      	cmp	r2, #2
 80124b0:	b530      	push	{r4, r5, lr}
 80124b2:	d011      	beq.n	80124d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80124b4:	2a03      	cmp	r2, #3
 80124b6:	d01c      	beq.n	80124f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80124b8:	2a01      	cmp	r2, #1
 80124ba:	d10c      	bne.n	80124d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80124bc:	888b      	ldrh	r3, [r1, #4]
 80124be:	8801      	ldrh	r1, [r0, #0]
 80124c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80124c4:	1a5b      	subs	r3, r3, r1
 80124c6:	8844      	ldrh	r4, [r0, #2]
 80124c8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80124cc:	1a9b      	subs	r3, r3, r2
 80124ce:	8004      	strh	r4, [r0, #0]
 80124d0:	8081      	strh	r1, [r0, #4]
 80124d2:	8043      	strh	r3, [r0, #2]
 80124d4:	80c2      	strh	r2, [r0, #6]
 80124d6:	bd30      	pop	{r4, r5, pc}
 80124d8:	88cb      	ldrh	r3, [r1, #6]
 80124da:	8842      	ldrh	r2, [r0, #2]
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	88c2      	ldrh	r2, [r0, #6]
 80124e0:	1a9b      	subs	r3, r3, r2
 80124e2:	888a      	ldrh	r2, [r1, #4]
 80124e4:	8801      	ldrh	r1, [r0, #0]
 80124e6:	8043      	strh	r3, [r0, #2]
 80124e8:	1a52      	subs	r2, r2, r1
 80124ea:	8881      	ldrh	r1, [r0, #4]
 80124ec:	1a52      	subs	r2, r2, r1
 80124ee:	8002      	strh	r2, [r0, #0]
 80124f0:	e7f1      	b.n	80124d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80124f2:	88cb      	ldrh	r3, [r1, #6]
 80124f4:	8841      	ldrh	r1, [r0, #2]
 80124f6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80124fa:	1a5b      	subs	r3, r3, r1
 80124fc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012500:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012504:	1a9b      	subs	r3, r3, r2
 8012506:	8045      	strh	r5, [r0, #2]
 8012508:	8082      	strh	r2, [r0, #4]
 801250a:	8003      	strh	r3, [r0, #0]
 801250c:	80c4      	strh	r4, [r0, #6]
 801250e:	e7e2      	b.n	80124d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08012510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	b09f      	sub	sp, #124	@ 0x7c
 8012516:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012518:	9312      	str	r3, [sp, #72]	@ 0x48
 801251a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801251c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801251e:	8812      	ldrh	r2, [r2, #0]
 8012520:	889b      	ldrh	r3, [r3, #4]
 8012522:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012524:	4413      	add	r3, r2
 8012526:	900e      	str	r0, [sp, #56]	@ 0x38
 8012528:	6828      	ldr	r0, [r5, #0]
 801252a:	b21b      	sxth	r3, r3
 801252c:	9117      	str	r1, [sp, #92]	@ 0x5c
 801252e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8012532:	9311      	str	r3, [sp, #68]	@ 0x44
 8012534:	6803      	ldr	r3, [r0, #0]
 8012536:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801253c:	4798      	blx	r3
 801253e:	682b      	ldr	r3, [r5, #0]
 8012540:	9013      	str	r0, [sp, #76]	@ 0x4c
 8012542:	7b1a      	ldrb	r2, [r3, #12]
 8012544:	7adb      	ldrb	r3, [r3, #11]
 8012546:	9215      	str	r2, [sp, #84]	@ 0x54
 8012548:	9316      	str	r3, [sp, #88]	@ 0x58
 801254a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801254e:	2c00      	cmp	r4, #0
 8012550:	d067      	beq.n	8012622 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8012552:	7c2b      	ldrb	r3, [r5, #16]
 8012554:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012556:	2b06      	cmp	r3, #6
 8012558:	bf14      	ite	ne
 801255a:	2301      	movne	r3, #1
 801255c:	2302      	moveq	r3, #2
 801255e:	4413      	add	r3, r2
 8012560:	f04f 0900 	mov.w	r9, #0
 8012564:	9310      	str	r3, [sp, #64]	@ 0x40
 8012566:	464c      	mov	r4, r9
 8012568:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801256c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8012570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012572:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012574:	4293      	cmp	r3, r2
 8012576:	f280 808b 	bge.w	8012690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801257a:	2300      	movs	r3, #0
 801257c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8012580:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8012584:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012588:	429c      	cmp	r4, r3
 801258a:	d006      	beq.n	801259a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801258c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801258e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8012592:	4294      	cmp	r4, r2
 8012594:	bf18      	it	ne
 8012596:	4623      	movne	r3, r4
 8012598:	930c      	str	r3, [sp, #48]	@ 0x30
 801259a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801259c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801259e:	682a      	ldr	r2, [r5, #0]
 80125a0:	428b      	cmp	r3, r1
 80125a2:	db40      	blt.n	8012626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80125a4:	6813      	ldr	r3, [r2, #0]
 80125a6:	4610      	mov	r0, r2
 80125a8:	695b      	ldr	r3, [r3, #20]
 80125aa:	4798      	blx	r3
 80125ac:	4604      	mov	r4, r0
 80125ae:	6828      	ldr	r0, [r5, #0]
 80125b0:	aa1d      	add	r2, sp, #116	@ 0x74
 80125b2:	4621      	mov	r1, r4
 80125b4:	6803      	ldr	r3, [r0, #0]
 80125b6:	689f      	ldr	r7, [r3, #8]
 80125b8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80125bc:	47b8      	blx	r7
 80125be:	901c      	str	r0, [sp, #112]	@ 0x70
 80125c0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80125c4:	429c      	cmp	r4, r3
 80125c6:	f000 80eb 	beq.w	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80125ca:	f242 030b 	movw	r3, #8203	@ 0x200b
 80125ce:	429c      	cmp	r4, r3
 80125d0:	f000 80e6 	beq.w	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80125d4:	2c00      	cmp	r4, #0
 80125d6:	f000 810d 	beq.w	80127f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80125da:	2c0a      	cmp	r4, #10
 80125dc:	d05e      	beq.n	801269c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80125de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80125e0:	b36a      	cbz	r2, 801263e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80125e2:	8894      	ldrh	r4, [r2, #4]
 80125e4:	f1bb 0f00 	cmp.w	fp, #0
 80125e8:	d03a      	beq.n	8012660 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80125ea:	f892 900d 	ldrb.w	r9, [r2, #13]
 80125ee:	f1bb 0f01 	cmp.w	fp, #1
 80125f2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80125f6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80125fa:	f892 900a 	ldrb.w	r9, [r2, #10]
 80125fe:	ea49 0903 	orr.w	r9, r9, r3
 8012602:	d133      	bne.n	801266c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8012604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012606:	eba6 0609 	sub.w	r6, r6, r9
 801260a:	2b00      	cmp	r3, #0
 801260c:	d14d      	bne.n	80126aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801260e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012610:	eb09 0306 	add.w	r3, r9, r6
 8012614:	4413      	add	r3, r2
 8012616:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012618:	f9b2 2000 	ldrsh.w	r2, [r2]
 801261c:	4293      	cmp	r3, r2
 801261e:	da4e      	bge.n	80126be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012620:	e036      	b.n	8012690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8012622:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8012624:	e79c      	b.n	8012560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8012626:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801262a:	4659      	mov	r1, fp
 801262c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801262e:	9301      	str	r3, [sp, #4]
 8012630:	ab1d      	add	r3, sp, #116	@ 0x74
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	ab1c      	add	r3, sp, #112	@ 0x70
 8012636:	f003 fc42 	bl	8015ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801263a:	4604      	mov	r4, r0
 801263c:	e7c0      	b.n	80125c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801263e:	6828      	ldr	r0, [r5, #0]
 8012640:	6803      	ldr	r3, [r0, #0]
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	4798      	blx	r3
 8012646:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801264a:	4298      	cmp	r0, r3
 801264c:	f000 80a8 	beq.w	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012650:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012654:	4298      	cmp	r0, r3
 8012656:	f000 80a3 	beq.w	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801265a:	f1bb 0f00 	cmp.w	fp, #0
 801265e:	d100      	bne.n	8012662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8012660:	444e      	add	r6, r9
 8012662:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012664:	2a00      	cmp	r2, #0
 8012666:	d1c0      	bne.n	80125ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8012668:	4691      	mov	r9, r2
 801266a:	e099      	b.n	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801266c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801266e:	2b00      	cmp	r3, #0
 8012670:	f000 80c2 	beq.w	80127f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8012674:	f1bb 0f00 	cmp.w	fp, #0
 8012678:	d117      	bne.n	80126aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801267a:	6828      	ldr	r0, [r5, #0]
 801267c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801267e:	6803      	ldr	r3, [r0, #0]
 8012680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012682:	4798      	blx	r3
 8012684:	4406      	add	r6, r0
 8012686:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012688:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801268a:	1af3      	subs	r3, r6, r3
 801268c:	4293      	cmp	r3, r2
 801268e:	dd16      	ble.n	80126be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012690:	2c00      	cmp	r4, #0
 8012692:	f000 80af 	beq.w	80127f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8012696:	2c0a      	cmp	r4, #10
 8012698:	f040 809d 	bne.w	80127d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801269c:	240a      	movs	r4, #10
 801269e:	fab4 f084 	clz	r0, r4
 80126a2:	0940      	lsrs	r0, r0, #5
 80126a4:	b01f      	add	sp, #124	@ 0x7c
 80126a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126aa:	6828      	ldr	r0, [r5, #0]
 80126ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126ae:	6803      	ldr	r3, [r0, #0]
 80126b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126b2:	4798      	blx	r3
 80126b4:	f1bb 0f01 	cmp.w	fp, #1
 80126b8:	eba6 0600 	sub.w	r6, r6, r0
 80126bc:	d0a7      	beq.n	801260e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80126be:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80126c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80126c2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80126c6:	f9b3 8000 	ldrsh.w	r8, [r3]
 80126ca:	7b43      	ldrb	r3, [r0, #13]
 80126cc:	4431      	add	r1, r6
 80126ce:	015b      	lsls	r3, r3, #5
 80126d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80126d4:	7983      	ldrb	r3, [r0, #6]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	440b      	add	r3, r1
 80126da:	4543      	cmp	r3, r8
 80126dc:	db60      	blt.n	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80126de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80126e0:	4299      	cmp	r1, r3
 80126e2:	da5d      	bge.n	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80126e4:	6828      	ldr	r0, [r5, #0]
 80126e6:	45b0      	cmp	r8, r6
 80126e8:	6803      	ldr	r3, [r0, #0]
 80126ea:	bfcc      	ite	gt
 80126ec:	eba8 0806 	subgt.w	r8, r8, r6
 80126f0:	f04f 0800 	movle.w	r8, #0
 80126f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126f6:	bfc8      	it	gt
 80126f8:	fa1f f888 	uxthgt.w	r8, r8
 80126fc:	4798      	blx	r3
 80126fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012700:	7b53      	ldrb	r3, [r2, #13]
 8012702:	00d9      	lsls	r1, r3, #3
 8012704:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8012708:	7a11      	ldrb	r1, [r2, #8]
 801270a:	4339      	orrs	r1, r7
 801270c:	065f      	lsls	r7, r3, #25
 801270e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012710:	bf48      	it	mi
 8012712:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8012716:	4407      	add	r7, r0
 8012718:	bf48      	it	mi
 801271a:	b209      	sxthmi	r1, r1
 801271c:	1a7f      	subs	r7, r7, r1
 801271e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8012720:	b2bf      	uxth	r7, r7
 8012722:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012726:	fa0f fa87 	sxth.w	sl, r7
 801272a:	4551      	cmp	r1, sl
 801272c:	dd3c      	ble.n	80127a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	79d0      	ldrb	r0, [r2, #7]
 8012732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012736:	4303      	orrs	r3, r0
 8012738:	449a      	add	sl, r3
 801273a:	4551      	cmp	r1, sl
 801273c:	dc30      	bgt.n	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801273e:	1bcf      	subs	r7, r1, r7
 8012740:	468a      	mov	sl, r1
 8012742:	b23f      	sxth	r7, r7
 8012744:	9219      	str	r2, [sp, #100]	@ 0x64
 8012746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801274a:	6828      	ldr	r0, [r5, #0]
 801274c:	2a00      	cmp	r2, #0
 801274e:	d12d      	bne.n	80127ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8012750:	9318      	str	r3, [sp, #96]	@ 0x60
 8012752:	b2bf      	uxth	r7, r7
 8012754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012756:	6819      	ldr	r1, [r3, #0]
 8012758:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801275a:	6801      	ldr	r1, [r0, #0]
 801275c:	9314      	str	r3, [sp, #80]	@ 0x50
 801275e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012760:	4788      	blx	r1
 8012762:	79a9      	ldrb	r1, [r5, #6]
 8012764:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012766:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012768:	7ba9      	ldrb	r1, [r5, #14]
 801276a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801276c:	910a      	str	r1, [sp, #40]	@ 0x28
 801276e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8012772:	9109      	str	r1, [sp, #36]	@ 0x24
 8012774:	68a9      	ldr	r1, [r5, #8]
 8012776:	9306      	str	r3, [sp, #24]
 8012778:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801277a:	9205      	str	r2, [sp, #20]
 801277c:	9304      	str	r3, [sp, #16]
 801277e:	f8cd a004 	str.w	sl, [sp, #4]
 8012782:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8012786:	44b0      	add	r8, r6
 8012788:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801278a:	fa0f f388 	sxth.w	r3, r8
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012792:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8012796:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	47b8      	blx	r7
 80127a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80127a2:	3301      	adds	r3, #1
 80127a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80127a6:	e6e3      	b.n	8012570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 80127a8:	2700      	movs	r7, #0
 80127aa:	e7cb      	b.n	8012744 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 80127ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127ae:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80127b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80127b4:	f8dc 1000 	ldr.w	r1, [ip]
 80127b8:	e9cd 6204 	strd	r6, r2, [sp, #16]
 80127bc:	79aa      	ldrb	r2, [r5, #6]
 80127be:	9203      	str	r2, [sp, #12]
 80127c0:	7baa      	ldrb	r2, [r5, #14]
 80127c2:	9202      	str	r2, [sp, #8]
 80127c4:	68aa      	ldr	r2, [r5, #8]
 80127c6:	e9cd 0200 	strd	r0, r2, [sp]
 80127ca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80127cc:	4660      	mov	r0, ip
 80127ce:	688f      	ldr	r7, [r1, #8]
 80127d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80127d2:	47b8      	blx	r7
 80127d4:	e7e4      	b.n	80127a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80127d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80127d8:	3501      	adds	r5, #1
 80127da:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80127dc:	429d      	cmp	r5, r3
 80127de:	f6bf af5e 	bge.w	801269e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80127e2:	4659      	mov	r1, fp
 80127e4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80127e6:	f7f1 fedf 	bl	80045a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80127ea:	4604      	mov	r4, r0
 80127ec:	b110      	cbz	r0, 80127f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80127ee:	280a      	cmp	r0, #10
 80127f0:	d1f2      	bne.n	80127d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 80127f2:	e753      	b.n	801269c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80127f4:	2400      	movs	r4, #0
 80127f6:	e752      	b.n	801269e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80127f8:	f1bb 0f00 	cmp.w	fp, #0
 80127fc:	f43f af43 	beq.w	8012686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8012800:	e75d      	b.n	80126be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08012802 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012802:	b530      	push	{r4, r5, lr}
 8012804:	8ac4      	ldrh	r4, [r0, #22]
 8012806:	8b45      	ldrh	r5, [r0, #26]
 8012808:	8343      	strh	r3, [r0, #26]
 801280a:	442c      	add	r4, r5
 801280c:	1ae4      	subs	r4, r4, r3
 801280e:	8b83      	ldrh	r3, [r0, #28]
 8012810:	82c4      	strh	r4, [r0, #22]
 8012812:	8b04      	ldrh	r4, [r0, #24]
 8012814:	4422      	add	r2, r4
 8012816:	440c      	add	r4, r1
 8012818:	1a59      	subs	r1, r3, r1
 801281a:	83c2      	strh	r2, [r0, #30]
 801281c:	8304      	strh	r4, [r0, #24]
 801281e:	8381      	strh	r1, [r0, #28]
 8012820:	bd30      	pop	{r4, r5, pc}

08012822 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8012822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012826:	4604      	mov	r4, r0
 8012828:	8a47      	ldrh	r7, [r0, #18]
 801282a:	68c0      	ldr	r0, [r0, #12]
 801282c:	b085      	sub	sp, #20
 801282e:	6803      	ldr	r3, [r0, #0]
 8012830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012832:	4798      	blx	r3
 8012834:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8012838:	7a63      	ldrb	r3, [r4, #9]
 801283a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801283e:	3b01      	subs	r3, #1
 8012840:	42b7      	cmp	r7, r6
 8012842:	bfac      	ite	ge
 8012844:	f04f 0900 	movge.w	r9, #0
 8012848:	f04f 0901 	movlt.w	r9, #1
 801284c:	2b05      	cmp	r3, #5
 801284e:	d804      	bhi.n	801285a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8012850:	e8df f003 	tbb	[pc, r3]
 8012854:	470f0854 	.word	0x470f0854
 8012858:	4c4c      	.short	0x4c4c
 801285a:	2500      	movs	r5, #0
 801285c:	46a9      	mov	r9, r5
 801285e:	462e      	mov	r6, r5
 8012860:	462f      	mov	r7, r5
 8012862:	e00e      	b.n	8012882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012864:	42b7      	cmp	r7, r6
 8012866:	f04f 0500 	mov.w	r5, #0
 801286a:	bfb4      	ite	lt
 801286c:	2600      	movlt	r6, #0
 801286e:	2601      	movge	r6, #1
 8012870:	e7f6      	b.n	8012860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012872:	42b7      	cmp	r7, r6
 8012874:	464d      	mov	r5, r9
 8012876:	f04f 0900 	mov.w	r9, #0
 801287a:	bfb4      	ite	lt
 801287c:	2600      	movlt	r6, #0
 801287e:	2601      	movge	r6, #1
 8012880:	464f      	mov	r7, r9
 8012882:	f04f 0800 	mov.w	r8, #0
 8012886:	f8a4 8016 	strh.w	r8, [r4, #22]
 801288a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801288e:	f8cd 8004 	str.w	r8, [sp, #4]
 8012892:	2300      	movs	r3, #0
 8012894:	9303      	str	r3, [sp, #12]
 8012896:	8823      	ldrh	r3, [r4, #0]
 8012898:	2b20      	cmp	r3, #32
 801289a:	d033      	beq.n	8012904 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801289c:	f242 010b 	movw	r1, #8203	@ 0x200b
 80128a0:	1a5a      	subs	r2, r3, r1
 80128a2:	f1d2 0a00 	rsbs	sl, r2, #0
 80128a6:	eb4a 0a02 	adc.w	sl, sl, r2
 80128aa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d008      	beq.n	80128c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80128b2:	428b      	cmp	r3, r1
 80128b4:	9a01      	ldr	r2, [sp, #4]
 80128b6:	bf0e      	itee	eq
 80128b8:	f04f 0a01 	moveq.w	sl, #1
 80128bc:	461a      	movne	r2, r3
 80128be:	f04f 0a00 	movne.w	sl, #0
 80128c2:	9201      	str	r2, [sp, #4]
 80128c4:	ab03      	add	r3, sp, #12
 80128c6:	68e2      	ldr	r2, [r4, #12]
 80128c8:	7a21      	ldrb	r1, [r4, #8]
 80128ca:	6860      	ldr	r0, [r4, #4]
 80128cc:	f003 faae 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80128d0:	8020      	strh	r0, [r4, #0]
 80128d2:	b9d8      	cbnz	r0, 801290c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80128d4:	8ba2      	ldrh	r2, [r4, #28]
 80128d6:	2300      	movs	r3, #0
 80128d8:	4611      	mov	r1, r2
 80128da:	4620      	mov	r0, r4
 80128dc:	f7ff ff91 	bl	8012802 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80128e0:	e06e      	b.n	80129c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80128e2:	2500      	movs	r5, #0
 80128e4:	2701      	movs	r7, #1
 80128e6:	46a9      	mov	r9, r5
 80128e8:	462e      	mov	r6, r5
 80128ea:	e7ca      	b.n	8012882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80128ec:	42b7      	cmp	r7, r6
 80128ee:	f04f 0500 	mov.w	r5, #0
 80128f2:	bfb4      	ite	lt
 80128f4:	2700      	movlt	r7, #0
 80128f6:	2701      	movge	r7, #1
 80128f8:	462e      	mov	r6, r5
 80128fa:	e7c2      	b.n	8012882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80128fc:	2500      	movs	r5, #0
 80128fe:	2601      	movs	r6, #1
 8012900:	46a9      	mov	r9, r5
 8012902:	e7ad      	b.n	8012860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	f04f 0a01 	mov.w	sl, #1
 801290a:	e7db      	b.n	80128c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801290c:	8b63      	ldrh	r3, [r4, #26]
 801290e:	280a      	cmp	r0, #10
 8012910:	f103 0301 	add.w	r3, r3, #1
 8012914:	8363      	strh	r3, [r4, #26]
 8012916:	d0dd      	beq.n	80128d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8012918:	9a03      	ldr	r2, [sp, #12]
 801291a:	bb62      	cbnz	r2, 8012976 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801291c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012920:	4298      	cmp	r0, r3
 8012922:	d003      	beq.n	801292c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012924:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012928:	4298      	cmp	r0, r3
 801292a:	d1b2      	bne.n	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801292c:	8823      	ldrh	r3, [r4, #0]
 801292e:	8ba1      	ldrh	r1, [r4, #28]
 8012930:	2b20      	cmp	r3, #32
 8012932:	d003      	beq.n	801293c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8012934:	f242 000b 	movw	r0, #8203	@ 0x200b
 8012938:	4283      	cmp	r3, r0
 801293a:	d131      	bne.n	80129a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801293c:	f1ba 0f00 	cmp.w	sl, #0
 8012940:	bf0a      	itet	eq
 8012942:	4688      	moveq	r8, r1
 8012944:	4650      	movne	r0, sl
 8012946:	2001      	moveq	r0, #1
 8012948:	440a      	add	r2, r1
 801294a:	8b23      	ldrh	r3, [r4, #24]
 801294c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012950:	b292      	uxth	r2, r2
 8012952:	83a2      	strh	r2, [r4, #28]
 8012954:	4413      	add	r3, r2
 8012956:	f1b9 0f00 	cmp.w	r9, #0
 801295a:	d102      	bne.n	8012962 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801295c:	2d00      	cmp	r5, #0
 801295e:	d042      	beq.n	80129e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8012960:	b300      	cbz	r0, 80129a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8012962:	8c21      	ldrh	r1, [r4, #32]
 8012964:	4419      	add	r1, r3
 8012966:	458c      	cmp	ip, r1
 8012968:	da37      	bge.n	80129da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801296a:	8ae1      	ldrh	r1, [r4, #22]
 801296c:	2900      	cmp	r1, #0
 801296e:	d034      	beq.n	80129da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012970:	4563      	cmp	r3, ip
 8012972:	dd8e      	ble.n	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012974:	e01d      	b.n	80129b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8012976:	8893      	ldrh	r3, [r2, #4]
 8012978:	9901      	ldr	r1, [sp, #4]
 801297a:	8023      	strh	r3, [r4, #0]
 801297c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8012980:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012984:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8012988:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801298c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012990:	68e0      	ldr	r0, [r4, #12]
 8012992:	6803      	ldr	r3, [r0, #0]
 8012994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012996:	4798      	blx	r3
 8012998:	eb0b 0200 	add.w	r2, fp, r0
 801299c:	b292      	uxth	r2, r2
 801299e:	e7c5      	b.n	801292c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80129a0:	2000      	movs	r0, #0
 80129a2:	e7d1      	b.n	8012948 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80129a4:	4563      	cmp	r3, ip
 80129a6:	f77f af74 	ble.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80129aa:	8ae3      	ldrh	r3, [r4, #22]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f43f af70 	beq.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80129b2:	2301      	movs	r3, #1
 80129b4:	8c22      	ldrh	r2, [r4, #32]
 80129b6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80129ba:	8be3      	ldrh	r3, [r4, #30]
 80129bc:	4413      	add	r3, r2
 80129be:	83e3      	strh	r3, [r4, #30]
 80129c0:	68e0      	ldr	r0, [r4, #12]
 80129c2:	6803      	ldr	r3, [r0, #0]
 80129c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129c6:	4798      	blx	r3
 80129c8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80129cc:	4418      	add	r0, r3
 80129ce:	8a63      	ldrh	r3, [r4, #18]
 80129d0:	1a18      	subs	r0, r3, r0
 80129d2:	8260      	strh	r0, [r4, #18]
 80129d4:	b005      	add	sp, #20
 80129d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129da:	2300      	movs	r3, #0
 80129dc:	4611      	mov	r1, r2
 80129de:	4620      	mov	r0, r4
 80129e0:	f7ff ff0f 	bl	8012802 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80129e4:	e755      	b.n	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80129e6:	4563      	cmp	r3, ip
 80129e8:	dd14      	ble.n	8012a14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80129ea:	b117      	cbz	r7, 80129f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80129ec:	2301      	movs	r3, #1
 80129ee:	460a      	mov	r2, r1
 80129f0:	e772      	b.n	80128d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80129f2:	2e00      	cmp	r6, #0
 80129f4:	f43f af4d 	beq.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	f47f af4a 	bne.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80129fe:	f1ba 0f00 	cmp.w	sl, #0
 8012a02:	d002      	beq.n	8012a0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8012a04:	2301      	movs	r3, #1
 8012a06:	4642      	mov	r2, r8
 8012a08:	e767      	b.n	80128da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8012a0a:	8ae3      	ldrh	r3, [r4, #22]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f43f af40 	beq.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012a12:	e7d5      	b.n	80129c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f47f af3c 	bne.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012a1a:	f1ba 0f00 	cmp.w	sl, #0
 8012a1e:	f43f af38 	beq.w	8012892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012a22:	2301      	movs	r3, #1
 8012a24:	4642      	mov	r2, r8
 8012a26:	e7da      	b.n	80129de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08012a28 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8012a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	b08f      	sub	sp, #60	@ 0x3c
 8012a2e:	4617      	mov	r7, r2
 8012a30:	461c      	mov	r4, r3
 8012a32:	460e      	mov	r6, r1
 8012a34:	b1d1      	cbz	r1, 8012a6c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4620      	mov	r0, r4
 8012a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a3c:	4798      	blx	r3
 8012a3e:	4240      	negs	r0, r0
 8012a40:	9603      	str	r6, [sp, #12]
 8012a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a46:	b200      	sxth	r0, r0
 8012a48:	9700      	str	r7, [sp, #0]
 8012a4a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8012a4e:	4629      	mov	r1, r5
 8012a50:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8012a54:	2401      	movs	r4, #1
 8012a56:	a805      	add	r0, sp, #20
 8012a58:	f7ff fcaa 	bl	80123b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012a5c:	a805      	add	r0, sp, #20
 8012a5e:	f7ff fee0 	bl	8012822 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012a62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012a66:	b163      	cbz	r3, 8012a82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8012a68:	3401      	adds	r4, #1
 8012a6a:	e7f7      	b.n	8012a5c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8012a6c:	2401      	movs	r4, #1
 8012a6e:	f003 faa9 	bl	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012a72:	280a      	cmp	r0, #10
 8012a74:	4628      	mov	r0, r5
 8012a76:	bf08      	it	eq
 8012a78:	3401      	addeq	r4, #1
 8012a7a:	f003 faa3 	bl	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d1f7      	bne.n	8012a72 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8012a82:	b2a0      	uxth	r0, r4
 8012a84:	b00f      	add	sp, #60	@ 0x3c
 8012a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8c:	b0e3      	sub	sp, #396	@ 0x18c
 8012a8e:	461c      	mov	r4, r3
 8012a90:	4683      	mov	fp, r0
 8012a92:	4688      	mov	r8, r1
 8012a94:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 8112 	beq.w	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012a9c:	6823      	ldr	r3, [r4, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f000 810e 	beq.w	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012aa4:	7ba3      	ldrb	r3, [r4, #14]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f000 810a 	beq.w	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012aac:	ad0a      	add	r5, sp, #40	@ 0x28
 8012aae:	6810      	ldr	r0, [r2, #0]
 8012ab0:	6851      	ldr	r1, [r2, #4]
 8012ab2:	462b      	mov	r3, r5
 8012ab4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8012ab8:	c303      	stmia	r3!, {r0, r1}
 8012aba:	2100      	movs	r1, #0
 8012abc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8012ac0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	910c      	str	r1, [sp, #48]	@ 0x30
 8012ac8:	a90c      	add	r1, sp, #48	@ 0x30
 8012aca:	79a2      	ldrb	r2, [r4, #6]
 8012acc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012ad0:	f7ff fced 	bl	80124ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012ad4:	a90c      	add	r1, sp, #48	@ 0x30
 8012ad6:	79a2      	ldrb	r2, [r4, #6]
 8012ad8:	4608      	mov	r0, r1
 8012ada:	f7ff fce8 	bl	80124ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012ade:	a817      	add	r0, sp, #92	@ 0x5c
 8012ae0:	f002 fe2e 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 8012ae4:	6820      	ldr	r0, [r4, #0]
 8012ae6:	6803      	ldr	r3, [r0, #0]
 8012ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012aea:	4798      	blx	r3
 8012aec:	4606      	mov	r6, r0
 8012aee:	6820      	ldr	r0, [r4, #0]
 8012af0:	6803      	ldr	r3, [r0, #0]
 8012af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012af4:	4798      	blx	r3
 8012af6:	4633      	mov	r3, r6
 8012af8:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8012afa:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8012afc:	9000      	str	r0, [sp, #0]
 8012afe:	a817      	add	r0, sp, #92	@ 0x5c
 8012b00:	f002 fe71 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012b04:	6820      	ldr	r0, [r4, #0]
 8012b06:	f894 a004 	ldrb.w	sl, [r4, #4]
 8012b0a:	6803      	ldr	r3, [r0, #0]
 8012b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b0e:	4798      	blx	r3
 8012b10:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	4607      	mov	r7, r0
 8012b18:	4406      	add	r6, r0
 8012b1a:	a830      	add	r0, sp, #192	@ 0xc0
 8012b1c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8012b20:	f002 fe0e 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 8012b24:	7c23      	ldrb	r3, [r4, #16]
 8012b26:	b17b      	cbz	r3, 8012b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8012b28:	6820      	ldr	r0, [r4, #0]
 8012b2a:	6803      	ldr	r3, [r0, #0]
 8012b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b2e:	4798      	blx	r3
 8012b30:	9009      	str	r0, [sp, #36]	@ 0x24
 8012b32:	6820      	ldr	r0, [r4, #0]
 8012b34:	6802      	ldr	r2, [r0, #0]
 8012b36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012b38:	4790      	blx	r2
 8012b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b3c:	9000      	str	r0, [sp, #0]
 8012b3e:	a830      	add	r0, sp, #192	@ 0xc0
 8012b40:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8012b42:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8012b44:	f002 fe4f 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012b48:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8012b4c:	a80e      	add	r0, sp, #56	@ 0x38
 8012b4e:	7be2      	ldrb	r2, [r4, #15]
 8012b50:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8012b54:	1a8a      	subs	r2, r1, r2
 8012b56:	7c21      	ldrb	r1, [r4, #16]
 8012b58:	9103      	str	r1, [sp, #12]
 8012b5a:	b292      	uxth	r2, r2
 8012b5c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8012b60:	9102      	str	r1, [sp, #8]
 8012b62:	6821      	ldr	r1, [r4, #0]
 8012b64:	9101      	str	r1, [sp, #4]
 8012b66:	7961      	ldrb	r1, [r4, #5]
 8012b68:	9100      	str	r1, [sp, #0]
 8012b6a:	a930      	add	r1, sp, #192	@ 0xc0
 8012b6c:	f7ff fc20 	bl	80123b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012b70:	2e00      	cmp	r6, #0
 8012b72:	dc5b      	bgt.n	8012c2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8012b74:	af17      	add	r7, sp, #92	@ 0x5c
 8012b76:	f04f 0900 	mov.w	r9, #0
 8012b7a:	7c23      	ldrb	r3, [r4, #16]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f000 80b1 	beq.w	8012ce4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012b82:	a80e      	add	r0, sp, #56	@ 0x38
 8012b84:	f7ff fe4d 	bl	8012822 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012b88:	f1ba 0f00 	cmp.w	sl, #0
 8012b8c:	f000 80a5 	beq.w	8012cda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8012b90:	7c23      	ldrb	r3, [r4, #16]
 8012b92:	2264      	movs	r2, #100	@ 0x64
 8012b94:	4639      	mov	r1, r7
 8012b96:	a849      	add	r0, sp, #292	@ 0x124
 8012b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b9a:	f00f ff1e 	bl	80229da <memcpy>
 8012b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	f000 80a7 	beq.w	8012cf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8012ba6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8012baa:	7922      	ldrb	r2, [r4, #4]
 8012bac:	2a01      	cmp	r2, #1
 8012bae:	f040 808a 	bne.w	8012cc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8012bb2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8012bb6:	1ac0      	subs	r0, r0, r3
 8012bb8:	2302      	movs	r3, #2
 8012bba:	fb90 f0f3 	sdiv	r0, r0, r3
 8012bbe:	b200      	sxth	r0, r0
 8012bc0:	7c23      	ldrb	r3, [r4, #16]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f000 808b 	beq.w	8012cde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012bc8:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8012bcc:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8012bd0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012bd4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012bd8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8012bdc:	2100      	movs	r1, #0
 8012bde:	4410      	add	r0, r2
 8012be0:	4642      	mov	r2, r8
 8012be2:	b200      	sxth	r0, r0
 8012be4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012be8:	9000      	str	r0, [sp, #0]
 8012bea:	4658      	mov	r0, fp
 8012bec:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012bf0:	f7ff fc8e 	bl	8012510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d163      	bne.n	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012bf8:	b2b2      	uxth	r2, r6
 8012bfa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012bfe:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012c02:	4413      	add	r3, r2
 8012c04:	1a8a      	subs	r2, r1, r2
 8012c06:	b21b      	sxth	r3, r3
 8012c08:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8012c0c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8012c10:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012c14:	2a00      	cmp	r2, #0
 8012c16:	d153      	bne.n	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012c18:	6822      	ldr	r2, [r4, #0]
 8012c1a:	8869      	ldrh	r1, [r5, #2]
 8012c1c:	7a12      	ldrb	r2, [r2, #8]
 8012c1e:	1a9b      	subs	r3, r3, r2
 8012c20:	88ea      	ldrh	r2, [r5, #6]
 8012c22:	440a      	add	r2, r1
 8012c24:	b212      	sxth	r2, r2
 8012c26:	4293      	cmp	r3, r2
 8012c28:	dda7      	ble.n	8012b7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8012c2a:	e049      	b.n	8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012c2c:	7c23      	ldrb	r3, [r4, #16]
 8012c2e:	444f      	add	r7, r9
 8012c30:	b1c3      	cbz	r3, 8012c64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8012c32:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8012c36:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012c3a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012c3e:	443b      	add	r3, r7
 8012c40:	4293      	cmp	r3, r2
 8012c42:	da97      	bge.n	8012b74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012c44:	a80e      	add	r0, sp, #56	@ 0x38
 8012c46:	f7ff fdec 	bl	8012822 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012c4a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	454b      	cmp	r3, r9
 8012c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c56:	d021      	beq.n	8012c9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8012c58:	7961      	ldrb	r1, [r4, #5]
 8012c5a:	a817      	add	r0, sp, #92	@ 0x5c
 8012c5c:	f7f1 fca4 	bl	80045a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c62:	e7f4      	b.n	8012c4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8012c64:	fa1f f986 	uxth.w	r9, r6
 8012c68:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012c6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012c70:	443b      	add	r3, r7
 8012c72:	4293      	cmp	r3, r2
 8012c74:	f6bf af7e 	bge.w	8012b74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012c78:	a817      	add	r0, sp, #92	@ 0x5c
 8012c7a:	f003 f9a3 	bl	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012c7e:	b1f8      	cbz	r0, 8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012c80:	280a      	cmp	r0, #10
 8012c82:	d1f1      	bne.n	8012c68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012c84:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012c88:	444b      	add	r3, r9
 8012c8a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012c8e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8012c92:	eba3 0309 	sub.w	r3, r3, r9
 8012c96:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012c9a:	e7e5      	b.n	8012c68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012c9c:	b2b3      	uxth	r3, r6
 8012c9e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8012ca2:	441a      	add	r2, r3
 8012ca4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8012ca8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8012cac:	1ad3      	subs	r3, r2, r3
 8012cae:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012cb2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012cb6:	b11b      	cbz	r3, 8012cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012cb8:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d0ba      	beq.n	8012c36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8012cc0:	b063      	add	sp, #396	@ 0x18c
 8012cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc6:	2a02      	cmp	r2, #2
 8012cc8:	d105      	bne.n	8012cd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8012cca:	7be2      	ldrb	r2, [r4, #15]
 8012ccc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012cd0:	1a80      	subs	r0, r0, r2
 8012cd2:	1ac0      	subs	r0, r0, r3
 8012cd4:	e773      	b.n	8012bbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	e772      	b.n	8012bc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012cda:	7be0      	ldrb	r0, [r4, #15]
 8012cdc:	e770      	b.n	8012bc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012cde:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012ce2:	e773      	b.n	8012bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012ce4:	f1ba 0f00 	cmp.w	sl, #0
 8012ce8:	d0f7      	beq.n	8012cda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8012cea:	2264      	movs	r2, #100	@ 0x64
 8012cec:	4639      	mov	r1, r7
 8012cee:	a849      	add	r0, sp, #292	@ 0x124
 8012cf0:	f00f fe73 	bl	80229da <memcpy>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012cfa:	6821      	ldr	r1, [r4, #0]
 8012cfc:	a849      	add	r0, sp, #292	@ 0x124
 8012cfe:	f7ff fb9a 	bl	8012436 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012d02:	b203      	sxth	r3, r0
 8012d04:	e751      	b.n	8012baa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08012d06 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012d06:	2b03      	cmp	r3, #3
 8012d08:	d818      	bhi.n	8012d3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8012d0a:	e8df f003 	tbb	[pc, r3]
 8012d0e:	0602      	.short	0x0602
 8012d10:	130d      	.short	0x130d
 8012d12:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012d16:	1850      	adds	r0, r2, r1
 8012d18:	4770      	bx	lr
 8012d1a:	8803      	ldrh	r3, [r0, #0]
 8012d1c:	8880      	ldrh	r0, [r0, #4]
 8012d1e:	4418      	add	r0, r3
 8012d20:	b200      	sxth	r0, r0
 8012d22:	1a80      	subs	r0, r0, r2
 8012d24:	3801      	subs	r0, #1
 8012d26:	4770      	bx	lr
 8012d28:	8803      	ldrh	r3, [r0, #0]
 8012d2a:	8880      	ldrh	r0, [r0, #4]
 8012d2c:	4418      	add	r0, r3
 8012d2e:	b200      	sxth	r0, r0
 8012d30:	1a40      	subs	r0, r0, r1
 8012d32:	e7f7      	b.n	8012d24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012d34:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012d38:	4410      	add	r0, r2
 8012d3a:	4770      	bx	lr
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	4770      	bx	lr

08012d40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	d817      	bhi.n	8012d74 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8012d44:	e8df f003 	tbb	[pc, r3]
 8012d48:	10090602 	.word	0x10090602
 8012d4c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012d50:	1850      	adds	r0, r2, r1
 8012d52:	4770      	bx	lr
 8012d54:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012d58:	e7fa      	b.n	8012d50 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012d5a:	8843      	ldrh	r3, [r0, #2]
 8012d5c:	88c0      	ldrh	r0, [r0, #6]
 8012d5e:	4418      	add	r0, r3
 8012d60:	b200      	sxth	r0, r0
 8012d62:	1a80      	subs	r0, r0, r2
 8012d64:	3801      	subs	r0, #1
 8012d66:	4770      	bx	lr
 8012d68:	8843      	ldrh	r3, [r0, #2]
 8012d6a:	88c0      	ldrh	r0, [r0, #6]
 8012d6c:	4418      	add	r0, r3
 8012d6e:	b200      	sxth	r0, r0
 8012d70:	1a40      	subs	r0, r0, r1
 8012d72:	e7f7      	b.n	8012d64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012d74:	2000      	movs	r0, #0
 8012d76:	4770      	bx	lr

08012d78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012d78:	4b01      	ldr	r3, [pc, #4]	@ (8012d80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	601a      	str	r2, [r3, #0]
 8012d7e:	4770      	bx	lr
 8012d80:	2402527c 	.word	0x2402527c

08012d84 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012d84:	4603      	mov	r3, r0
 8012d86:	b1c8      	cbz	r0, 8012dbc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012d88:	0c02      	lsrs	r2, r0, #16
 8012d8a:	0412      	lsls	r2, r2, #16
 8012d8c:	b9a2      	cbnz	r2, 8012db8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8012d8e:	0403      	lsls	r3, r0, #16
 8012d90:	2010      	movs	r0, #16
 8012d92:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8012d96:	bf04      	itt	eq
 8012d98:	021b      	lsleq	r3, r3, #8
 8012d9a:	3008      	addeq	r0, #8
 8012d9c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8012da0:	bf04      	itt	eq
 8012da2:	011b      	lsleq	r3, r3, #4
 8012da4:	3004      	addeq	r0, #4
 8012da6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8012daa:	bf04      	itt	eq
 8012dac:	009b      	lsleq	r3, r3, #2
 8012dae:	3002      	addeq	r0, #2
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	db04      	blt.n	8012dbe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012db4:	3001      	adds	r0, #1
 8012db6:	4770      	bx	lr
 8012db8:	2000      	movs	r0, #0
 8012dba:	e7ea      	b.n	8012d92 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012dbc:	2020      	movs	r0, #32
 8012dbe:	4770      	bx	lr

08012dc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	b087      	sub	sp, #28
 8012dc6:	460d      	mov	r5, r1
 8012dc8:	4616      	mov	r6, r2
 8012dca:	4698      	mov	r8, r3
 8012dcc:	4601      	mov	r1, r0
 8012dce:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8012dd2:	b120      	cbz	r0, 8012dde <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012dd4:	b11a      	cbz	r2, 8012dde <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012dd6:	2d1f      	cmp	r5, #31
 8012dd8:	d801      	bhi.n	8012dde <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012dda:	2b1f      	cmp	r3, #31
 8012ddc:	d904      	bls.n	8012de8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8012dde:	2000      	movs	r0, #0
 8012de0:	6038      	str	r0, [r7, #0]
 8012de2:	b007      	add	sp, #28
 8012de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de8:	b97d      	cbnz	r5, 8012e0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8012dea:	b143      	cbz	r3, 8012dfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8012dec:	4602      	mov	r2, r0
 8012dee:	462b      	mov	r3, r5
 8012df0:	4641      	mov	r1, r8
 8012df2:	4630      	mov	r0, r6
 8012df4:	e9cd 4700 	strd	r4, r7, [sp]
 8012df8:	f7ff ffe2 	bl	8012dc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012dfc:	e7f1      	b.n	8012de2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012e02:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012e06:	603b      	str	r3, [r7, #0]
 8012e08:	e7eb      	b.n	8012de2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012e0a:	fa32 fa05 	lsrs.w	sl, r2, r5
 8012e0e:	d106      	bne.n	8012e1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8012e10:	4346      	muls	r6, r0
 8012e12:	fbb6 f0f4 	udiv	r0, r6, r4
 8012e16:	fb04 6610 	mls	r6, r4, r0, r6
 8012e1a:	603e      	str	r6, [r7, #0]
 8012e1c:	e7e1      	b.n	8012de2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012e1e:	2201      	movs	r2, #1
 8012e20:	fa00 fb05 	lsl.w	fp, r0, r5
 8012e24:	40aa      	lsls	r2, r5
 8012e26:	fbbb f9f4 	udiv	r9, fp, r4
 8012e2a:	3a01      	subs	r2, #1
 8012e2c:	fb0a f309 	mul.w	r3, sl, r9
 8012e30:	fb04 b919 	mls	r9, r4, r9, fp
 8012e34:	4016      	ands	r6, r2
 8012e36:	9303      	str	r3, [sp, #12]
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ff ffa3 	bl	8012d84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012e3e:	462b      	mov	r3, r5
 8012e40:	460a      	mov	r2, r1
 8012e42:	4601      	mov	r1, r0
 8012e44:	4630      	mov	r0, r6
 8012e46:	e9cd 4700 	strd	r4, r7, [sp]
 8012e4a:	f7ff ffb9 	bl	8012dc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	4648      	mov	r0, r9
 8012e52:	eb05 0108 	add.w	r1, r5, r8
 8012e56:	f7ff ff95 	bl	8012d84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012e5a:	ab05      	add	r3, sp, #20
 8012e5c:	464a      	mov	r2, r9
 8012e5e:	e9cd 4300 	strd	r4, r3, [sp]
 8012e62:	4603      	mov	r3, r0
 8012e64:	4650      	mov	r0, sl
 8012e66:	f7ff ffab 	bl	8012dc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012e6a:	6839      	ldr	r1, [r7, #0]
 8012e6c:	9a05      	ldr	r2, [sp, #20]
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	4411      	add	r1, r2
 8012e72:	fbb1 f2f4 	udiv	r2, r1, r4
 8012e76:	18d3      	adds	r3, r2, r3
 8012e78:	fb04 1412 	mls	r4, r4, r2, r1
 8012e7c:	441e      	add	r6, r3
 8012e7e:	603c      	str	r4, [r7, #0]
 8012e80:	4430      	add	r0, r6
 8012e82:	e7ae      	b.n	8012de2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012e84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e88:	b085      	sub	sp, #20
 8012e8a:	f1b0 0900 	subs.w	r9, r0, #0
 8012e8e:	461d      	mov	r5, r3
 8012e90:	4617      	mov	r7, r2
 8012e92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012e94:	bfbb      	ittet	lt
 8012e96:	f1c9 0900 	rsblt	r9, r9, #0
 8012e9a:	f04f 36ff 	movlt.w	r6, #4294967295
 8012e9e:	2601      	movge	r6, #1
 8012ea0:	6823      	ldrlt	r3, [r4, #0]
 8012ea2:	bfbc      	itt	lt
 8012ea4:	425b      	neglt	r3, r3
 8012ea6:	6023      	strlt	r3, [r4, #0]
 8012ea8:	2a00      	cmp	r2, #0
 8012eaa:	da04      	bge.n	8012eb6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012eac:	6823      	ldr	r3, [r4, #0]
 8012eae:	4257      	negs	r7, r2
 8012eb0:	4276      	negs	r6, r6
 8012eb2:	425b      	negs	r3, r3
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	2d00      	cmp	r5, #0
 8012eb8:	4638      	mov	r0, r7
 8012eba:	bfba      	itte	lt
 8012ebc:	426d      	neglt	r5, r5
 8012ebe:	f04f 38ff 	movlt.w	r8, #4294967295
 8012ec2:	f04f 0801 	movge.w	r8, #1
 8012ec6:	f7ff ff5d 	bl	8012d84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012eca:	ab03      	add	r3, sp, #12
 8012ecc:	463a      	mov	r2, r7
 8012ece:	e9cd 5300 	strd	r5, r3, [sp]
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	4648      	mov	r0, r9
 8012ed6:	f7ff ff73 	bl	8012dc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012eda:	6823      	ldr	r3, [r4, #0]
 8012edc:	9a03      	ldr	r2, [sp, #12]
 8012ede:	4546      	cmp	r6, r8
 8012ee0:	441a      	add	r2, r3
 8012ee2:	fb92 f3f5 	sdiv	r3, r2, r5
 8012ee6:	4418      	add	r0, r3
 8012ee8:	fb05 2313 	mls	r3, r5, r3, r2
 8012eec:	bf18      	it	ne
 8012eee:	4240      	negne	r0, r0
 8012ef0:	1c72      	adds	r2, r6, #1
 8012ef2:	6023      	str	r3, [r4, #0]
 8012ef4:	d105      	bne.n	8012f02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f1c3 0200 	rsb	r2, r3, #0
 8012efc:	db0b      	blt.n	8012f16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012efe:	6022      	str	r2, [r4, #0]
 8012f00:	e006      	b.n	8012f10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012f02:	2e01      	cmp	r6, #1
 8012f04:	d104      	bne.n	8012f10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	da02      	bge.n	8012f10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012f0a:	442b      	add	r3, r5
 8012f0c:	3801      	subs	r0, #1
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	b005      	add	sp, #20
 8012f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f16:	3801      	subs	r0, #1
 8012f18:	1b52      	subs	r2, r2, r5
 8012f1a:	e7f0      	b.n	8012efe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08012f1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012f1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012f20:	4c1c      	ldr	r4, [pc, #112]	@ (8012f94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8012f22:	4605      	mov	r5, r0
 8012f24:	6807      	ldr	r7, [r0, #0]
 8012f26:	69a3      	ldr	r3, [r4, #24]
 8012f28:	b92b      	cbnz	r3, 8012f36 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012f2a:	6840      	ldr	r0, [r0, #4]
 8012f2c:	e9c5 7000 	strd	r7, r0, [r5]
 8012f30:	b004      	add	sp, #16
 8012f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f36:	f04f 0802 	mov.w	r8, #2
 8012f3a:	68a2      	ldr	r2, [r4, #8]
 8012f3c:	ae04      	add	r6, sp, #16
 8012f3e:	6820      	ldr	r0, [r4, #0]
 8012f40:	fb93 f1f8 	sdiv	r1, r3, r8
 8012f44:	440a      	add	r2, r1
 8012f46:	69e1      	ldr	r1, [r4, #28]
 8012f48:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012f4c:	463a      	mov	r2, r7
 8012f4e:	9600      	str	r6, [sp, #0]
 8012f50:	f7ff ff98 	bl	8012e84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012f54:	69a3      	ldr	r3, [r4, #24]
 8012f56:	4607      	mov	r7, r0
 8012f58:	686a      	ldr	r2, [r5, #4]
 8012f5a:	6a21      	ldr	r1, [r4, #32]
 8012f5c:	9600      	str	r6, [sp, #0]
 8012f5e:	6860      	ldr	r0, [r4, #4]
 8012f60:	f7ff ff90 	bl	8012e84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012f64:	69a3      	ldr	r3, [r4, #24]
 8012f66:	6962      	ldr	r2, [r4, #20]
 8012f68:	4407      	add	r7, r0
 8012f6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012f6c:	9600      	str	r6, [sp, #0]
 8012f6e:	68e0      	ldr	r0, [r4, #12]
 8012f70:	fb93 f8f8 	sdiv	r8, r3, r8
 8012f74:	4442      	add	r2, r8
 8012f76:	9203      	str	r2, [sp, #12]
 8012f78:	682a      	ldr	r2, [r5, #0]
 8012f7a:	f7ff ff83 	bl	8012e84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012f7e:	4680      	mov	r8, r0
 8012f80:	9600      	str	r6, [sp, #0]
 8012f82:	69a3      	ldr	r3, [r4, #24]
 8012f84:	686a      	ldr	r2, [r5, #4]
 8012f86:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012f88:	6920      	ldr	r0, [r4, #16]
 8012f8a:	f7ff ff7b 	bl	8012e84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012f8e:	4440      	add	r0, r8
 8012f90:	e7cc      	b.n	8012f2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012f92:	bf00      	nop
 8012f94:	24025280 	.word	0x24025280

08012f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012f98:	4b07      	ldr	r3, [pc, #28]	@ (8012fb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d109      	bne.n	8012fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012fa0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012fa4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012fa8:	8003      	strh	r3, [r0, #0]
 8012faa:	4b04      	ldr	r3, [pc, #16]	@ (8012fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	1a9b      	subs	r3, r3, r2
 8012fb2:	800b      	strh	r3, [r1, #0]
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	24025264 	.word	0x24025264
 8012fbc:	24025260 	.word	0x24025260

08012fc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012fc0:	4b07      	ldr	r3, [pc, #28]	@ (8012fe0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012fc2:	b510      	push	{r4, lr}
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d108      	bne.n	8012fdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012fca:	4b06      	ldr	r3, [pc, #24]	@ (8012fe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012fcc:	880c      	ldrh	r4, [r1, #0]
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	1b1b      	subs	r3, r3, r4
 8012fd8:	8003      	strh	r3, [r0, #0]
 8012fda:	800a      	strh	r2, [r1, #0]
 8012fdc:	bd10      	pop	{r4, pc}
 8012fde:	bf00      	nop
 8012fe0:	24025264 	.word	0x24025264
 8012fe4:	24025260 	.word	0x24025260

08012fe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8013014 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012fea:	b510      	push	{r4, lr}
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d10e      	bne.n	8013010 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012ff2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012ff6:	8843      	ldrh	r3, [r0, #2]
 8012ff8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012ffc:	18ca      	adds	r2, r1, r3
 8012ffe:	4b06      	ldr	r3, [pc, #24]	@ (8013018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013000:	8044      	strh	r4, [r0, #2]
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	1a9b      	subs	r3, r3, r2
 8013006:	8003      	strh	r3, [r0, #0]
 8013008:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801300c:	8081      	strh	r1, [r0, #4]
 801300e:	80c3      	strh	r3, [r0, #6]
 8013010:	bd10      	pop	{r4, pc}
 8013012:	bf00      	nop
 8013014:	24025264 	.word	0x24025264
 8013018:	24025260 	.word	0x24025260

0801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801301c:	4b08      	ldr	r3, [pc, #32]	@ (8013040 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d10c      	bne.n	801303e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013024:	8803      	ldrh	r3, [r0, #0]
 8013026:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801302a:	8842      	ldrh	r2, [r0, #2]
 801302c:	8002      	strh	r2, [r0, #0]
 801302e:	185a      	adds	r2, r3, r1
 8013030:	4b04      	ldr	r3, [pc, #16]	@ (8013044 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	1a9b      	subs	r3, r3, r2
 8013036:	8043      	strh	r3, [r0, #2]
 8013038:	88c3      	ldrh	r3, [r0, #6]
 801303a:	80c1      	strh	r1, [r0, #6]
 801303c:	8083      	strh	r3, [r0, #4]
 801303e:	4770      	bx	lr
 8013040:	24025264 	.word	0x24025264
 8013044:	24025260 	.word	0x24025260

08013048 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013048:	4b07      	ldr	r3, [pc, #28]	@ (8013068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801304a:	b510      	push	{r4, lr}
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d108      	bne.n	8013064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013052:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013056:	f9b0 4000 	ldrsh.w	r4, [r0]
 801305a:	8003      	strh	r3, [r0, #0]
 801305c:	8893      	ldrh	r3, [r2, #4]
 801305e:	3b01      	subs	r3, #1
 8013060:	1b1b      	subs	r3, r3, r4
 8013062:	800b      	strh	r3, [r1, #0]
 8013064:	bd10      	pop	{r4, pc}
 8013066:	bf00      	nop
 8013068:	24025264 	.word	0x24025264

0801306c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801306c:	4b0b      	ldr	r3, [pc, #44]	@ (801309c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b01      	cmp	r3, #1
 8013072:	d111      	bne.n	8013098 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8013074:	680b      	ldr	r3, [r1, #0]
 8013076:	ed90 7a00 	vldr	s14, [r0]
 801307a:	6003      	str	r3, [r0, #0]
 801307c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013080:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80130a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8013084:	ee07 3a90 	vmov	s15, r3
 8013088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801308c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013094:	edc1 7a00 	vstr	s15, [r1]
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	24025264 	.word	0x24025264
 80130a0:	38d1b717 	.word	0x38d1b717

080130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80130a4:	4b0a      	ldr	r3, [pc, #40]	@ (80130d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80130a6:	460a      	mov	r2, r1
 80130a8:	b510      	push	{r4, lr}
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10d      	bne.n	80130cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80130b0:	8881      	ldrh	r1, [r0, #4]
 80130b2:	8803      	ldrh	r3, [r0, #0]
 80130b4:	440b      	add	r3, r1
 80130b6:	4601      	mov	r1, r0
 80130b8:	3b01      	subs	r3, #1
 80130ba:	f821 3b02 	strh.w	r3, [r1], #2
 80130be:	f7ff ffc3 	bl	8013048 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80130c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80130c6:	88c2      	ldrh	r2, [r0, #6]
 80130c8:	80c3      	strh	r3, [r0, #6]
 80130ca:	8082      	strh	r2, [r0, #4]
 80130cc:	bd10      	pop	{r4, pc}
 80130ce:	bf00      	nop
 80130d0:	24025264 	.word	0x24025264

080130d4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80130d4:	4b06      	ldr	r3, [pc, #24]	@ (80130f0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80130d6:	2100      	movs	r1, #0
 80130d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80130dc:	4b05      	ldr	r3, [pc, #20]	@ (80130f4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80130de:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80130e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130e6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80130ea:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80130ee:	4770      	bx	lr
 80130f0:	24025260 	.word	0x24025260
 80130f4:	24025262 	.word	0x24025262

080130f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80130f8:	4b03      	ldr	r3, [pc, #12]	@ (8013108 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80130fa:	6818      	ldr	r0, [r3, #0]
 80130fc:	b110      	cbz	r0, 8013104 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80130fe:	6803      	ldr	r3, [r0, #0]
 8013100:	699b      	ldr	r3, [r3, #24]
 8013102:	4718      	bx	r3
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop
 8013108:	240252b0 	.word	0x240252b0

0801310c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801310c:	4770      	bx	lr
	...

08013110 <_ZN8touchgfx11Application4drawEv>:
 8013110:	4b09      	ldr	r3, [pc, #36]	@ (8013138 <_ZN8touchgfx11Application4drawEv+0x28>)
 8013112:	b507      	push	{r0, r1, r2, lr}
 8013114:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013118:	2100      	movs	r1, #0
 801311a:	4b08      	ldr	r3, [pc, #32]	@ (801313c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801311c:	9100      	str	r1, [sp, #0]
 801311e:	4669      	mov	r1, sp
 8013120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013124:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013128:	f8ad 3006 	strh.w	r3, [sp, #6]
 801312c:	6803      	ldr	r3, [r0, #0]
 801312e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013130:	4798      	blx	r3
 8013132:	b003      	add	sp, #12
 8013134:	f85d fb04 	ldr.w	pc, [sp], #4
 8013138:	24025260 	.word	0x24025260
 801313c:	24025262 	.word	0x24025262

08013140 <_ZN8touchgfx11Application10invalidateEv>:
 8013140:	4b09      	ldr	r3, [pc, #36]	@ (8013168 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013142:	b082      	sub	sp, #8
 8013144:	2100      	movs	r1, #0
 8013146:	f9b3 2000 	ldrsh.w	r2, [r3]
 801314a:	4b08      	ldr	r3, [pc, #32]	@ (801316c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801314c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013150:	aa02      	add	r2, sp, #8
 8013152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013156:	9100      	str	r1, [sp, #0]
 8013158:	f8ad 3006 	strh.w	r3, [sp, #6]
 801315c:	6803      	ldr	r3, [r0, #0]
 801315e:	e912 0006 	ldmdb	r2, {r1, r2}
 8013162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013164:	b002      	add	sp, #8
 8013166:	4718      	bx	r3
 8013168:	24025260 	.word	0x24025260
 801316c:	24025262 	.word	0x24025262

08013170 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013170:	4b03      	ldr	r3, [pc, #12]	@ (8013180 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013172:	6818      	ldr	r0, [r3, #0]
 8013174:	b110      	cbz	r0, 801317c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013176:	6803      	ldr	r3, [r0, #0]
 8013178:	69db      	ldr	r3, [r3, #28]
 801317a:	4718      	bx	r3
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	240252b0 	.word	0x240252b0

08013184 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013184:	4b03      	ldr	r3, [pc, #12]	@ (8013194 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013186:	6818      	ldr	r0, [r3, #0]
 8013188:	b110      	cbz	r0, 8013190 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801318a:	6803      	ldr	r3, [r0, #0]
 801318c:	6a1b      	ldr	r3, [r3, #32]
 801318e:	4718      	bx	r3
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	240252b0 	.word	0x240252b0

08013198 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013198:	2300      	movs	r3, #0
 801319a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801319e:	4770      	bx	lr

080131a0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80131a0:	4b03      	ldr	r3, [pc, #12]	@ (80131b0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80131a2:	6818      	ldr	r0, [r3, #0]
 80131a4:	b110      	cbz	r0, 80131ac <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80131a6:	6803      	ldr	r3, [r0, #0]
 80131a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131aa:	4718      	bx	r3
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	240252b0 	.word	0x240252b0

080131b4 <_ZN8touchgfx11ApplicationD1Ev>:
 80131b4:	4770      	bx	lr

080131b6 <_ZN8touchgfx11ApplicationD0Ev>:
 80131b6:	b510      	push	{r4, lr}
 80131b8:	4604      	mov	r4, r0
 80131ba:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80131be:	f00e fd18 	bl	8021bf2 <_ZdlPvj>
 80131c2:	4620      	mov	r0, r4
 80131c4:	bd10      	pop	{r4, pc}

080131c6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80131c6:	b510      	push	{r4, lr}
 80131c8:	f9b1 4000 	ldrsh.w	r4, [r1]
 80131cc:	888a      	ldrh	r2, [r1, #4]
 80131ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 80131d2:	4422      	add	r2, r4
 80131d4:	b212      	sxth	r2, r2
 80131d6:	4293      	cmp	r3, r2
 80131d8:	da15      	bge.n	8013206 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80131da:	8882      	ldrh	r2, [r0, #4]
 80131dc:	4413      	add	r3, r2
 80131de:	b21b      	sxth	r3, r3
 80131e0:	429c      	cmp	r4, r3
 80131e2:	da10      	bge.n	8013206 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80131e4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80131e8:	88c9      	ldrh	r1, [r1, #6]
 80131ea:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80131ee:	4419      	add	r1, r3
 80131f0:	b209      	sxth	r1, r1
 80131f2:	428a      	cmp	r2, r1
 80131f4:	da07      	bge.n	8013206 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80131f6:	88c0      	ldrh	r0, [r0, #6]
 80131f8:	4410      	add	r0, r2
 80131fa:	b200      	sxth	r0, r0
 80131fc:	4283      	cmp	r3, r0
 80131fe:	bfac      	ite	ge
 8013200:	2000      	movge	r0, #0
 8013202:	2001      	movlt	r0, #1
 8013204:	bd10      	pop	{r4, pc}
 8013206:	2000      	movs	r0, #0
 8013208:	e7fc      	b.n	8013204 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801320a <_ZN8touchgfx4Rect10restrictToEss>:
 801320a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	b510      	push	{r4, lr}
 8013212:	da04      	bge.n	801321e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013214:	8884      	ldrh	r4, [r0, #4]
 8013216:	4423      	add	r3, r4
 8013218:	8083      	strh	r3, [r0, #4]
 801321a:	2300      	movs	r3, #0
 801321c:	8003      	strh	r3, [r0, #0]
 801321e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013222:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013226:	1b09      	subs	r1, r1, r4
 8013228:	428b      	cmp	r3, r1
 801322a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801322e:	bfc8      	it	gt
 8013230:	8081      	strhgt	r1, [r0, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	da04      	bge.n	8013240 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013236:	88c1      	ldrh	r1, [r0, #6]
 8013238:	440b      	add	r3, r1
 801323a:	80c3      	strh	r3, [r0, #6]
 801323c:	2300      	movs	r3, #0
 801323e:	8043      	strh	r3, [r0, #2]
 8013240:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013244:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013248:	1a52      	subs	r2, r2, r1
 801324a:	4293      	cmp	r3, r2
 801324c:	bfc8      	it	gt
 801324e:	80c2      	strhgt	r2, [r0, #6]
 8013250:	bd10      	pop	{r4, pc}
	...

08013254 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013254:	4b10      	ldr	r3, [pc, #64]	@ (8013298 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8013256:	b510      	push	{r4, lr}
 8013258:	460c      	mov	r4, r1
 801325a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801325e:	4b0f      	ldr	r3, [pc, #60]	@ (801329c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013260:	4620      	mov	r0, r4
 8013262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013266:	f7ff ffd0 	bl	801320a <_ZN8touchgfx4Rect10restrictToEss>
 801326a:	4b0d      	ldr	r3, [pc, #52]	@ (80132a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801326c:	6818      	ldr	r0, [r3, #0]
 801326e:	b190      	cbz	r0, 8013296 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013270:	6803      	ldr	r3, [r0, #0]
 8013272:	4621      	mov	r1, r4
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	4798      	blx	r3
 8013278:	4b0a      	ldr	r3, [pc, #40]	@ (80132a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801327a:	6818      	ldr	r0, [r3, #0]
 801327c:	b118      	cbz	r0, 8013286 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801327e:	6803      	ldr	r3, [r0, #0]
 8013280:	4621      	mov	r1, r4
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	4798      	blx	r3
 8013286:	4b08      	ldr	r3, [pc, #32]	@ (80132a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013288:	4621      	mov	r1, r4
 801328a:	6818      	ldr	r0, [r3, #0]
 801328c:	6803      	ldr	r3, [r0, #0]
 801328e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013292:	69db      	ldr	r3, [r3, #28]
 8013294:	4718      	bx	r3
 8013296:	bd10      	pop	{r4, pc}
 8013298:	24025262 	.word	0x24025262
 801329c:	24025260 	.word	0x24025260
 80132a0:	240252b0 	.word	0x240252b0
 80132a4:	240252ac 	.word	0x240252ac
 80132a8:	2402526c 	.word	0x2402526c

080132ac <_ZNK8touchgfx4Rect8includesERKS0_>:
 80132ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ae:	4606      	mov	r6, r0
 80132b0:	4608      	mov	r0, r1
 80132b2:	460f      	mov	r7, r1
 80132b4:	f7fa fc3b 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 80132b8:	b9e8      	cbnz	r0, 80132f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80132ba:	f9b7 5000 	ldrsh.w	r5, [r7]
 80132be:	f9b6 4000 	ldrsh.w	r4, [r6]
 80132c2:	42a5      	cmp	r5, r4
 80132c4:	db17      	blt.n	80132f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80132c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80132ca:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	db11      	blt.n	80132f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80132d2:	88b9      	ldrh	r1, [r7, #4]
 80132d4:	440d      	add	r5, r1
 80132d6:	88b1      	ldrh	r1, [r6, #4]
 80132d8:	440c      	add	r4, r1
 80132da:	b22d      	sxth	r5, r5
 80132dc:	b224      	sxth	r4, r4
 80132de:	42a5      	cmp	r5, r4
 80132e0:	dc09      	bgt.n	80132f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80132e2:	88f8      	ldrh	r0, [r7, #6]
 80132e4:	4410      	add	r0, r2
 80132e6:	88f2      	ldrh	r2, [r6, #6]
 80132e8:	4413      	add	r3, r2
 80132ea:	b200      	sxth	r0, r0
 80132ec:	b21b      	sxth	r3, r3
 80132ee:	4298      	cmp	r0, r3
 80132f0:	bfcc      	ite	gt
 80132f2:	2000      	movgt	r0, #0
 80132f4:	2001      	movle	r0, #1
 80132f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80132f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fa:	4604      	mov	r4, r0
 80132fc:	4608      	mov	r0, r1
 80132fe:	460d      	mov	r5, r1
 8013300:	f7fa fc15 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013304:	b978      	cbnz	r0, 8013326 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013306:	4620      	mov	r0, r4
 8013308:	f7fa fc11 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801330c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013310:	b150      	cbz	r0, 8013328 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013312:	8026      	strh	r6, [r4, #0]
 8013314:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013318:	8063      	strh	r3, [r4, #2]
 801331a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801331e:	80a3      	strh	r3, [r4, #4]
 8013320:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013324:	80e3      	strh	r3, [r4, #6]
 8013326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013328:	f9b4 1000 	ldrsh.w	r1, [r4]
 801332c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013330:	42b1      	cmp	r1, r6
 8013332:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013336:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801333a:	460f      	mov	r7, r1
 801333c:	88ed      	ldrh	r5, [r5, #6]
 801333e:	bfa8      	it	ge
 8013340:	4637      	movge	r7, r6
 8013342:	4293      	cmp	r3, r2
 8013344:	4618      	mov	r0, r3
 8013346:	4466      	add	r6, ip
 8013348:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801334c:	bfa8      	it	ge
 801334e:	4610      	movge	r0, r2
 8013350:	442a      	add	r2, r5
 8013352:	88e5      	ldrh	r5, [r4, #6]
 8013354:	4461      	add	r1, ip
 8013356:	b236      	sxth	r6, r6
 8013358:	8027      	strh	r7, [r4, #0]
 801335a:	442b      	add	r3, r5
 801335c:	b209      	sxth	r1, r1
 801335e:	b212      	sxth	r2, r2
 8013360:	8060      	strh	r0, [r4, #2]
 8013362:	b21b      	sxth	r3, r3
 8013364:	428e      	cmp	r6, r1
 8013366:	bfac      	ite	ge
 8013368:	ebc7 0106 	rsbge	r1, r7, r6
 801336c:	ebc7 0101 	rsblt	r1, r7, r1
 8013370:	429a      	cmp	r2, r3
 8013372:	bfac      	ite	ge
 8013374:	ebc0 0202 	rsbge	r2, r0, r2
 8013378:	ebc0 0203 	rsblt	r2, r0, r3
 801337c:	80a1      	strh	r1, [r4, #4]
 801337e:	80e2      	strh	r2, [r4, #6]
 8013380:	e7d1      	b.n	8013326 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013384 <_ZN8touchgfx11Application11getInstanceEv>:
 8013384:	4b01      	ldr	r3, [pc, #4]	@ (801338c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	240252c0 	.word	0x240252c0

08013390 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013390:	2300      	movs	r3, #0
 8013392:	b510      	push	{r4, lr}
 8013394:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8013398:	4604      	mov	r4, r0
 801339a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801339e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80133a2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80133a6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d90e      	bls.n	80133cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80133ae:	18e2      	adds	r2, r4, r3
 80133b0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80133b4:	b122      	cbz	r2, 80133c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80133b6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80133ba:	6803      	ldr	r3, [r0, #0]
 80133bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133be:	4798      	blx	r3
 80133c0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80133c4:	3301      	adds	r3, #1
 80133c6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80133ca:	e7ea      	b.n	80133a2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80133cc:	bd10      	pop	{r4, pc}

080133ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80133ce:	2300      	movs	r3, #0
 80133d0:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80133d4:	30a4      	adds	r0, #164	@ 0xa4
 80133d6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80133da:	f802 3b01 	strb.w	r3, [r2], #1
 80133de:	4282      	cmp	r2, r0
 80133e0:	d1fb      	bne.n	80133da <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80133e2:	4770      	bx	lr

080133e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4c0b      	ldr	r4, [pc, #44]	@ (8013414 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80133e8:	4605      	mov	r5, r0
 80133ea:	460e      	mov	r6, r1
 80133ec:	6820      	ldr	r0, [r4, #0]
 80133ee:	b110      	cbz	r0, 80133f6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80133f0:	6803      	ldr	r3, [r0, #0]
 80133f2:	695b      	ldr	r3, [r3, #20]
 80133f4:	4798      	blx	r3
 80133f6:	1d28      	adds	r0, r5, #4
 80133f8:	f7ff ffe9 	bl	80133ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80133fc:	6026      	str	r6, [r4, #0]
 80133fe:	6833      	ldr	r3, [r6, #0]
 8013400:	4630      	mov	r0, r6
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	4798      	blx	r3
 8013406:	682b      	ldr	r3, [r5, #0]
 8013408:	4628      	mov	r0, r5
 801340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801340c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013410:	4718      	bx	r3
 8013412:	bf00      	nop
 8013414:	240252b0 	.word	0x240252b0

08013418 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8013418:	2300      	movs	r3, #0
 801341a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801341e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8013422:	461a      	mov	r2, r3
 8013424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013426:	461c      	mov	r4, r3
 8013428:	461d      	mov	r5, r3
 801342a:	459c      	cmp	ip, r3
 801342c:	dd1a      	ble.n	8013464 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801342e:	18c6      	adds	r6, r0, r3
 8013430:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8013434:	b16e      	cbz	r6, 8013452 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8013436:	429a      	cmp	r2, r3
 8013438:	d008      	beq.n	801344c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801343a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801343e:	fa1f fe82 	uxth.w	lr, r2
 8013442:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8013446:	1887      	adds	r7, r0, r2
 8013448:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801344c:	3201      	adds	r2, #1
 801344e:	3301      	adds	r3, #1
 8013450:	e7eb      	b.n	801342a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8013452:	4299      	cmp	r1, r3
 8013454:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8013458:	bfa8      	it	ge
 801345a:	3501      	addge	r5, #1
 801345c:	429e      	cmp	r6, r3
 801345e:	bfc8      	it	gt
 8013460:	3401      	addgt	r4, #1
 8013462:	e7f4      	b.n	801344e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8013464:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8013468:	1b49      	subs	r1, r1, r5
 801346a:	1b1b      	subs	r3, r3, r4
 801346c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8013470:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8013474:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8013478:	4293      	cmp	r3, r2
 801347a:	dd03      	ble.n	8013484 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801347c:	3b01      	subs	r3, #1
 801347e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8013482:	e7f7      	b.n	8013474 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013488 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013488:	b570      	push	{r4, r5, r6, lr}
 801348a:	4d16      	ldr	r5, [pc, #88]	@ (80134e4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801348c:	4604      	mov	r4, r0
 801348e:	6828      	ldr	r0, [r5, #0]
 8013490:	b140      	cbz	r0, 80134a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013492:	7a03      	ldrb	r3, [r0, #8]
 8013494:	b933      	cbnz	r3, 80134a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013496:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801349a:	6803      	ldr	r3, [r0, #0]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134a2:	4718      	bx	r3
 80134a4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80134a8:	4e0f      	ldr	r6, [pc, #60]	@ (80134e8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80134aa:	b973      	cbnz	r3, 80134ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80134ac:	b168      	cbz	r0, 80134ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80134ae:	7a03      	ldrb	r3, [r0, #8]
 80134b0:	b15b      	cbz	r3, 80134ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80134b2:	6830      	ldr	r0, [r6, #0]
 80134b4:	b110      	cbz	r0, 80134bc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80134b6:	6803      	ldr	r3, [r0, #0]
 80134b8:	691b      	ldr	r3, [r3, #16]
 80134ba:	4798      	blx	r3
 80134bc:	6828      	ldr	r0, [r5, #0]
 80134be:	6803      	ldr	r3, [r0, #0]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	4798      	blx	r3
 80134c4:	2301      	movs	r3, #1
 80134c6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80134ca:	3404      	adds	r4, #4
 80134cc:	4620      	mov	r0, r4
 80134ce:	f7ff ff5f 	bl	8013390 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80134d2:	4620      	mov	r0, r4
 80134d4:	f7ff ffa0 	bl	8013418 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80134d8:	6830      	ldr	r0, [r6, #0]
 80134da:	b110      	cbz	r0, 80134e2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80134dc:	6803      	ldr	r3, [r0, #0]
 80134de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134e0:	e7dd      	b.n	801349e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80134e2:	bd70      	pop	{r4, r5, r6, pc}
 80134e4:	240252b4 	.word	0x240252b4
 80134e8:	240252b0 	.word	0x240252b0

080134ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80134ec:	4603      	mov	r3, r0
 80134ee:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80134f2:	2200      	movs	r2, #0
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	3308      	adds	r3, #8
 80134f8:	f823 2c06 	strh.w	r2, [r3, #-6]
 80134fc:	f823 2c04 	strh.w	r2, [r3, #-4]
 8013500:	f823 2c02 	strh.w	r2, [r3, #-2]
 8013504:	428b      	cmp	r3, r1
 8013506:	d1f5      	bne.n	80134f4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8013508:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801350c:	4770      	bx	lr
	...

08013510 <_ZN8touchgfx11ApplicationC1Ev>:
 8013510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013512:	4b1d      	ldr	r3, [pc, #116]	@ (8013588 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013514:	4606      	mov	r6, r0
 8013516:	4604      	mov	r4, r0
 8013518:	2500      	movs	r5, #0
 801351a:	f846 3b04 	str.w	r3, [r6], #4
 801351e:	22a8      	movs	r2, #168	@ 0xa8
 8013520:	2100      	movs	r1, #0
 8013522:	4630      	mov	r0, r6
 8013524:	f00f f978 	bl	8022818 <memset>
 8013528:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801352c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013530:	4f16      	ldr	r7, [pc, #88]	@ (801358c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013532:	f7ff ffdb 	bl	80134ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013536:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801353a:	f7ff ffd7 	bl	80134ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801353e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8013542:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8013546:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801354a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801354e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8013552:	490f      	ldr	r1, [pc, #60]	@ (8013590 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013554:	480f      	ldr	r0, [pc, #60]	@ (8013594 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8013556:	f00d fcdb 	bl	8020f10 <CRC_Lock>
 801355a:	4b0f      	ldr	r3, [pc, #60]	@ (8013598 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801355c:	b158      	cbz	r0, 8013576 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801355e:	801d      	strh	r5, [r3, #0]
 8013560:	2300      	movs	r3, #0
 8013562:	4a0e      	ldr	r2, [pc, #56]	@ (801359c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8013564:	4630      	mov	r0, r6
 8013566:	6013      	str	r3, [r2, #0]
 8013568:	4a0d      	ldr	r2, [pc, #52]	@ (80135a0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801356a:	603b      	str	r3, [r7, #0]
 801356c:	6013      	str	r3, [r2, #0]
 801356e:	f7ff ff2e 	bl	80133ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013572:	4620      	mov	r0, r4
 8013574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801357a:	2002      	movs	r0, #2
 801357c:	801a      	strh	r2, [r3, #0]
 801357e:	6038      	str	r0, [r7, #0]
 8013580:	f001 ff64 	bl	801544c <_ZN8touchgfx6Screen4drawEv>
 8013584:	e7ec      	b.n	8013560 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8013586:	bf00      	nop
 8013588:	080265d0 	.word	0x080265d0
 801358c:	240252b0 	.word	0x240252b0
 8013590:	b5e8b5cd 	.word	0xb5e8b5cd
 8013594:	f407a5c2 	.word	0xf407a5c2
 8013598:	2400007c 	.word	0x2400007c
 801359c:	240252c0 	.word	0x240252c0
 80135a0:	240252b4 	.word	0x240252b4

080135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80135a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80135a8:	3b01      	subs	r3, #1
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	428b      	cmp	r3, r1
 80135ae:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80135b2:	b510      	push	{r4, lr}
 80135b4:	d908      	bls.n	80135c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80135b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80135ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80135be:	681a      	ldr	r2, [r3, #0]
 80135c0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80135c4:	685a      	ldr	r2, [r3, #4]
 80135c6:	6062      	str	r2, [r4, #4]
 80135c8:	bd10      	pop	{r4, pc}
	...

080135cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80135cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d0:	b08f      	sub	sp, #60	@ 0x3c
 80135d2:	4b92      	ldr	r3, [pc, #584]	@ (801381c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80135d4:	4683      	mov	fp, r0
 80135d6:	ac0a      	add	r4, sp, #40	@ 0x28
 80135d8:	e884 0006 	stmia.w	r4, {r1, r2}
 80135dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80135e0:	4620      	mov	r0, r4
 80135e2:	4b8f      	ldr	r3, [pc, #572]	@ (8013820 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 80135e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80135e8:	f7ff fe0f 	bl	801320a <_ZN8touchgfx4Rect10restrictToEss>
 80135ec:	4620      	mov	r0, r4
 80135ee:	f7fa fa9e 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d170      	bne.n	80136d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80135f6:	4b8b      	ldr	r3, [pc, #556]	@ (8013824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135fe:	2b02      	cmp	r3, #2
 8013600:	d06a      	beq.n	80136d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8013602:	9403      	str	r4, [sp, #12]
 8013604:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013608:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801360c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	35a4      	adds	r5, #164	@ 0xa4
 8013614:	b15c      	cbz	r4, 801362e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8013616:	4629      	mov	r1, r5
 8013618:	9803      	ldr	r0, [sp, #12]
 801361a:	f7ff fe47 	bl	80132ac <_ZNK8touchgfx4Rect8includesERKS0_>
 801361e:	3c01      	subs	r4, #1
 8013620:	b118      	cbz	r0, 801362a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8013622:	b2a1      	uxth	r1, r4
 8013624:	9801      	ldr	r0, [sp, #4]
 8013626:	f7ff ffbd 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801362a:	3d08      	subs	r5, #8
 801362c:	e7f2      	b.n	8013614 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801362e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8013632:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013636:	f8cd a010 	str.w	sl, [sp, #16]
 801363a:	9302      	str	r3, [sp, #8]
 801363c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013640:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8013644:	9306      	str	r3, [sp, #24]
 8013646:	445c      	add	r4, fp
 8013648:	2500      	movs	r5, #0
 801364a:	4626      	mov	r6, r4
 801364c:	f8cd a014 	str.w	sl, [sp, #20]
 8013650:	462f      	mov	r7, r5
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d073      	beq.n	8013740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8013658:	9903      	ldr	r1, [sp, #12]
 801365a:	4630      	mov	r0, r6
 801365c:	f7ff fdb3 	bl	80131c6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013660:	b350      	cbz	r0, 80136b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8013662:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8013666:	f9b6 c000 	ldrsh.w	ip, [r6]
 801366a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801366e:	45e6      	cmp	lr, ip
 8013670:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8013674:	db33      	blt.n	80136de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8013676:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801367a:	88b3      	ldrh	r3, [r6, #4]
 801367c:	4472      	add	r2, lr
 801367e:	4463      	add	r3, ip
 8013680:	b212      	sxth	r2, r2
 8013682:	b21b      	sxth	r3, r3
 8013684:	429a      	cmp	r2, r3
 8013686:	dc2a      	bgt.n	80136de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8013688:	fa1f f289 	uxth.w	r2, r9
 801368c:	88f3      	ldrh	r3, [r6, #6]
 801368e:	45c8      	cmp	r8, r9
 8013690:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013694:	4413      	add	r3, r2
 8013696:	fa1f fc88 	uxth.w	ip, r8
 801369a:	b29b      	uxth	r3, r3
 801369c:	fa0f fe83 	sxth.w	lr, r3
 80136a0:	db0f      	blt.n	80136c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 80136a2:	eba3 030c 	sub.w	r3, r3, ip
 80136a6:	1ac9      	subs	r1, r1, r3
 80136a8:	b209      	sxth	r1, r1
 80136aa:	2900      	cmp	r1, #0
 80136ac:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80136b0:	dd12      	ble.n	80136d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80136b2:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80136b6:	4605      	mov	r5, r0
 80136b8:	9b05      	ldr	r3, [sp, #20]
 80136ba:	3e08      	subs	r6, #8
 80136bc:	3b01      	subs	r3, #1
 80136be:	9305      	str	r3, [sp, #20]
 80136c0:	e7c7      	b.n	8013652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 80136c2:	4461      	add	r1, ip
 80136c4:	b209      	sxth	r1, r1
 80136c6:	4571      	cmp	r1, lr
 80136c8:	dc38      	bgt.n	801373c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80136ca:	eba2 020c 	sub.w	r2, r2, ip
 80136ce:	b212      	sxth	r2, r2
 80136d0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	dcee      	bgt.n	80136b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80136d8:	b00f      	add	sp, #60	@ 0x3c
 80136da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136de:	45c8      	cmp	r8, r9
 80136e0:	db2c      	blt.n	801373c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80136e2:	88f3      	ldrh	r3, [r6, #6]
 80136e4:	4499      	add	r9, r3
 80136e6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80136ea:	4498      	add	r8, r3
 80136ec:	fa0f f989 	sxth.w	r9, r9
 80136f0:	fa0f f888 	sxth.w	r8, r8
 80136f4:	45c1      	cmp	r9, r8
 80136f6:	db21      	blt.n	801373c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80136f8:	fa1f f28c 	uxth.w	r2, ip
 80136fc:	88b3      	ldrh	r3, [r6, #4]
 80136fe:	45e6      	cmp	lr, ip
 8013700:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8013704:	4413      	add	r3, r2
 8013706:	fa1f f88e 	uxth.w	r8, lr
 801370a:	b29b      	uxth	r3, r3
 801370c:	fa0f f983 	sxth.w	r9, r3
 8013710:	db0a      	blt.n	8013728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8013712:	eba3 0308 	sub.w	r3, r3, r8
 8013716:	1ac9      	subs	r1, r1, r3
 8013718:	b209      	sxth	r1, r1
 801371a:	2900      	cmp	r1, #0
 801371c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8013720:	ddda      	ble.n	80136d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8013722:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8013726:	e7c6      	b.n	80136b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8013728:	4441      	add	r1, r8
 801372a:	b209      	sxth	r1, r1
 801372c:	4549      	cmp	r1, r9
 801372e:	dc05      	bgt.n	801373c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8013730:	eba2 0208 	sub.w	r2, r2, r8
 8013734:	b212      	sxth	r2, r2
 8013736:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801373a:	e7cb      	b.n	80136d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 801373c:	4607      	mov	r7, r0
 801373e:	e7bb      	b.n	80136b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8013740:	2d00      	cmp	r5, #0
 8013742:	d181      	bne.n	8013648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8013744:	2f00      	cmp	r7, #0
 8013746:	f000 81df 	beq.w	8013b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801374a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801374e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8013752:	b2b3      	uxth	r3, r6
 8013754:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8013758:	9305      	str	r3, [sp, #20]
 801375a:	9a05      	ldr	r2, [sp, #20]
 801375c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013760:	4413      	add	r3, r2
 8013762:	b2ba      	uxth	r2, r7
 8013764:	4492      	add	sl, r2
 8013766:	b29b      	uxth	r3, r3
 8013768:	fa1f fa8a 	uxth.w	sl, sl
 801376c:	fa0f f883 	sxth.w	r8, r3
 8013770:	fa0f f98a 	sxth.w	r9, sl
 8013774:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8013778:	9b04      	ldr	r3, [sp, #16]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d054      	beq.n	8013828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 801377e:	9903      	ldr	r1, [sp, #12]
 8013780:	4620      	mov	r0, r4
 8013782:	f7ff fd20 	bl	80131c6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013786:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801378a:	b1c0      	cbz	r0, 80137be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801378c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8013790:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013794:	4576      	cmp	r6, lr
 8013796:	dc22      	bgt.n	80137de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8013798:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801379c:	44f4      	add	ip, lr
 801379e:	fa0f fc8c 	sxth.w	ip, ip
 80137a2:	45e0      	cmp	r8, ip
 80137a4:	db1b      	blt.n	80137de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80137a6:	428f      	cmp	r7, r1
 80137a8:	fa1f fc81 	uxth.w	ip, r1
 80137ac:	88e1      	ldrh	r1, [r4, #6]
 80137ae:	dc0d      	bgt.n	80137cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 80137b0:	ebaa 0c0c 	sub.w	ip, sl, ip
 80137b4:	f8a4 9002 	strh.w	r9, [r4, #2]
 80137b8:	eba1 010c 	sub.w	r1, r1, ip
 80137bc:	80e1      	strh	r1, [r4, #6]
 80137be:	4628      	mov	r0, r5
 80137c0:	9904      	ldr	r1, [sp, #16]
 80137c2:	3c08      	subs	r4, #8
 80137c4:	4605      	mov	r5, r0
 80137c6:	3901      	subs	r1, #1
 80137c8:	9104      	str	r1, [sp, #16]
 80137ca:	e7d3      	b.n	8013774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 80137cc:	4461      	add	r1, ip
 80137ce:	b209      	sxth	r1, r1
 80137d0:	4549      	cmp	r1, r9
 80137d2:	dcf5      	bgt.n	80137c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80137d4:	eba2 0c0c 	sub.w	ip, r2, ip
 80137d8:	f8a4 c006 	strh.w	ip, [r4, #6]
 80137dc:	e7ef      	b.n	80137be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80137de:	428f      	cmp	r7, r1
 80137e0:	dcee      	bgt.n	80137c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80137e2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80137e6:	4461      	add	r1, ip
 80137e8:	b209      	sxth	r1, r1
 80137ea:	4589      	cmp	r9, r1
 80137ec:	dbe8      	blt.n	80137c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80137ee:	4576      	cmp	r6, lr
 80137f0:	fa1f fc8e 	uxth.w	ip, lr
 80137f4:	88a1      	ldrh	r1, [r4, #4]
 80137f6:	dc07      	bgt.n	8013808 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 80137f8:	eba3 0c0c 	sub.w	ip, r3, ip
 80137fc:	f8a4 8000 	strh.w	r8, [r4]
 8013800:	eba1 010c 	sub.w	r1, r1, ip
 8013804:	80a1      	strh	r1, [r4, #4]
 8013806:	e7da      	b.n	80137be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8013808:	4461      	add	r1, ip
 801380a:	b209      	sxth	r1, r1
 801380c:	4588      	cmp	r8, r1
 801380e:	dbd7      	blt.n	80137c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8013810:	9905      	ldr	r1, [sp, #20]
 8013812:	eba1 0c0c 	sub.w	ip, r1, ip
 8013816:	f8a4 c004 	strh.w	ip, [r4, #4]
 801381a:	e7d0      	b.n	80137be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801381c:	24025262 	.word	0x24025262
 8013820:	24025260 	.word	0x24025260
 8013824:	2402526c 	.word	0x2402526c
 8013828:	2d00      	cmp	r5, #0
 801382a:	f000 816d 	beq.w	8013b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801382e:	9b06      	ldr	r3, [sp, #24]
 8013830:	445b      	add	r3, fp
 8013832:	461c      	mov	r4, r3
 8013834:	9b02      	ldr	r3, [sp, #8]
 8013836:	3301      	adds	r3, #1
 8013838:	f000 8166 	beq.w	8013b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801383c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8013840:	9803      	ldr	r0, [sp, #12]
 8013842:	4629      	mov	r1, r5
 8013844:	f7ff fd32 	bl	80132ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8013848:	b120      	cbz	r0, 8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 801384a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801384e:	9801      	ldr	r0, [sp, #4]
 8013850:	f7ff fea8 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013854:	9903      	ldr	r1, [sp, #12]
 8013856:	4628      	mov	r0, r5
 8013858:	f7ff fcb5 	bl	80131c6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801385c:	2800      	cmp	r0, #0
 801385e:	f000 809c 	beq.w	801399a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8013862:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8013866:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801386a:	fa1f f189 	uxth.w	r1, r9
 801386e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8013872:	9309      	str	r3, [sp, #36]	@ 0x24
 8013874:	eb01 0c03 	add.w	ip, r1, r3
 8013878:	b283      	uxth	r3, r0
 801387a:	4548      	cmp	r0, r9
 801387c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8013880:	fa1f fa8c 	uxth.w	sl, ip
 8013884:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8013888:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801388c:	eb03 050c 	add.w	r5, r3, ip
 8013890:	b2ad      	uxth	r5, r5
 8013892:	9505      	str	r5, [sp, #20]
 8013894:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013898:	9504      	str	r5, [sp, #16]
 801389a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801389e:	f340 8099 	ble.w	80139d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 80138a2:	1a5b      	subs	r3, r3, r1
 80138a4:	4596      	cmp	lr, r2
 80138a6:	fa0f f08a 	sxth.w	r0, sl
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	b21e      	sxth	r6, r3
 80138ae:	dd2e      	ble.n	801390e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 80138b0:	9f02      	ldr	r7, [sp, #8]
 80138b2:	fa1f fe8e 	uxth.w	lr, lr
 80138b6:	b292      	uxth	r2, r2
 80138b8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80138bc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80138c0:	9f04      	ldr	r7, [sp, #16]
 80138c2:	ebae 0102 	sub.w	r1, lr, r2
 80138c6:	44a6      	add	lr, r4
 80138c8:	1a3f      	subs	r7, r7, r0
 80138ca:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80138ce:	b289      	uxth	r1, r1
 80138d0:	4402      	add	r2, r0
 80138d2:	fa0f fe8e 	sxth.w	lr, lr
 80138d6:	b20d      	sxth	r5, r1
 80138d8:	b212      	sxth	r2, r2
 80138da:	436f      	muls	r7, r5
 80138dc:	ebae 0202 	sub.w	r2, lr, r2
 80138e0:	4372      	muls	r2, r6
 80138e2:	4297      	cmp	r7, r2
 80138e4:	db09      	blt.n	80138fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 80138e6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80138ea:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80138ee:	449c      	add	ip, r3
 80138f0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80138f4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80138f8:	e684      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80138fa:	4421      	add	r1, r4
 80138fc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8013900:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8013904:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013908:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801390c:	e67a      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801390e:	9f04      	ldr	r7, [sp, #16]
 8013910:	42b8      	cmp	r0, r7
 8013912:	da27      	bge.n	8013964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8013914:	9902      	ldr	r1, [sp, #8]
 8013916:	1a3f      	subs	r7, r7, r0
 8013918:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801391c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013920:	eb05 010e 	add.w	r1, r5, lr
 8013924:	fa1f f881 	uxth.w	r8, r1
 8013928:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801392c:	4411      	add	r1, r2
 801392e:	fa0f f988 	sxth.w	r9, r8
 8013932:	eba2 020e 	sub.w	r2, r2, lr
 8013936:	eba1 0108 	sub.w	r1, r1, r8
 801393a:	4372      	muls	r2, r6
 801393c:	b289      	uxth	r1, r1
 801393e:	fa0f f881 	sxth.w	r8, r1
 8013942:	fb08 f707 	mul.w	r7, r8, r7
 8013946:	42ba      	cmp	r2, r7
 8013948:	dc06      	bgt.n	8013958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 801394a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801394e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8013952:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8013956:	e7ca      	b.n	80138ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8013958:	4429      	add	r1, r5
 801395a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801395e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013962:	e64f      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8013964:	9805      	ldr	r0, [sp, #20]
 8013966:	2d06      	cmp	r5, #6
 8013968:	ebaa 0000 	sub.w	r0, sl, r0
 801396c:	b280      	uxth	r0, r0
 801396e:	fa0f fe80 	sxth.w	lr, r0
 8013972:	d817      	bhi.n	80139a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8013974:	9b04      	ldr	r3, [sp, #16]
 8013976:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801397a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801397e:	1c6b      	adds	r3, r5, #1
 8013980:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8013984:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013988:	9b01      	ldr	r3, [sp, #4]
 801398a:	9801      	ldr	r0, [sp, #4]
 801398c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013990:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013994:	805a      	strh	r2, [r3, #2]
 8013996:	809e      	strh	r6, [r3, #4]
 8013998:	80d9      	strh	r1, [r3, #6]
 801399a:	9b02      	ldr	r3, [sp, #8]
 801399c:	3c08      	subs	r4, #8
 801399e:	3b01      	subs	r3, #1
 80139a0:	9302      	str	r3, [sp, #8]
 80139a2:	e747      	b.n	8013834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 80139a4:	9a02      	ldr	r2, [sp, #8]
 80139a6:	45b6      	cmp	lr, r6
 80139a8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80139ac:	db0d      	blt.n	80139ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 80139ae:	449c      	add	ip, r3
 80139b0:	445a      	add	r2, fp
 80139b2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80139b6:	fa1f fc8c 	uxth.w	ip, ip
 80139ba:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80139be:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80139c2:	448c      	add	ip, r1
 80139c4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80139c8:	e61c      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80139ca:	445a      	add	r2, fp
 80139cc:	4484      	add	ip, r0
 80139ce:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80139d2:	e78f      	b.n	80138f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80139d4:	fa1f f18e 	uxth.w	r1, lr
 80139d8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80139dc:	b293      	uxth	r3, r2
 80139de:	4596      	cmp	lr, r2
 80139e0:	eb01 0806 	add.w	r8, r1, r6
 80139e4:	9306      	str	r3, [sp, #24]
 80139e6:	fa1f f888 	uxth.w	r8, r8
 80139ea:	9f06      	ldr	r7, [sp, #24]
 80139ec:	fa0f f388 	sxth.w	r3, r8
 80139f0:	9307      	str	r3, [sp, #28]
 80139f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80139f6:	443b      	add	r3, r7
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	9308      	str	r3, [sp, #32]
 80139fc:	da24      	bge.n	8013a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80139fe:	9905      	ldr	r1, [sp, #20]
 8013a00:	eba3 0308 	sub.w	r3, r3, r8
 8013a04:	eba2 020e 	sub.w	r2, r2, lr
 8013a08:	eba9 0000 	sub.w	r0, r9, r0
 8013a0c:	ebaa 0401 	sub.w	r4, sl, r1
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	b2a4      	uxth	r4, r4
 8013a14:	b219      	sxth	r1, r3
 8013a16:	b225      	sxth	r5, r4
 8013a18:	4348      	muls	r0, r1
 8013a1a:	436a      	muls	r2, r5
 8013a1c:	4282      	cmp	r2, r0
 8013a1e:	9a02      	ldr	r2, [sp, #8]
 8013a20:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013a24:	445a      	add	r2, fp
 8013a26:	dc06      	bgt.n	8013a36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8013a28:	9b07      	ldr	r3, [sp, #28]
 8013a2a:	44a4      	add	ip, r4
 8013a2c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8013a30:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8013a34:	e75e      	b.n	80138f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8013a36:	9904      	ldr	r1, [sp, #16]
 8013a38:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8013a3c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8013a40:	4433      	add	r3, r6
 8013a42:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013a46:	e5dd      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8013a48:	9f06      	ldr	r7, [sp, #24]
 8013a4a:	9b04      	ldr	r3, [sp, #16]
 8013a4c:	1bc9      	subs	r1, r1, r7
 8013a4e:	fa0f f78a 	sxth.w	r7, sl
 8013a52:	b289      	uxth	r1, r1
 8013a54:	429f      	cmp	r7, r3
 8013a56:	fa0f fe81 	sxth.w	lr, r1
 8013a5a:	dd23      	ble.n	8013aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8013a5c:	9a05      	ldr	r2, [sp, #20]
 8013a5e:	eba9 0000 	sub.w	r0, r9, r0
 8013a62:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013a66:	ebaa 0202 	sub.w	r2, sl, r2
 8013a6a:	9d07      	ldr	r5, [sp, #28]
 8013a6c:	fb0e f000 	mul.w	r0, lr, r0
 8013a70:	b292      	uxth	r2, r2
 8013a72:	eba5 0a03 	sub.w	sl, r5, r3
 8013a76:	9b02      	ldr	r3, [sp, #8]
 8013a78:	b214      	sxth	r4, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8013a80:	445b      	add	r3, fp
 8013a82:	4550      	cmp	r0, sl
 8013a84:	db03      	blt.n	8013a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8013a86:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8013a8a:	4494      	add	ip, r2
 8013a8c:	e732      	b.n	80138f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8013a8e:	9a04      	ldr	r2, [sp, #16]
 8013a90:	4431      	add	r1, r6
 8013a92:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8013a96:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013a9a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8013a9e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013aa2:	e75c      	b.n	801395e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8013aa4:	9b08      	ldr	r3, [sp, #32]
 8013aa6:	2d06      	cmp	r5, #6
 8013aa8:	eba3 0308 	sub.w	r3, r3, r8
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	b218      	sxth	r0, r3
 8013ab0:	d813      	bhi.n	8013ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8013ab2:	9b07      	ldr	r3, [sp, #28]
 8013ab4:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8013ab8:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013abc:	1c6b      	adds	r3, r5, #1
 8013abe:	9901      	ldr	r1, [sp, #4]
 8013ac0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013ac4:	9b01      	ldr	r3, [sp, #4]
 8013ac6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013aca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013ace:	805a      	strh	r2, [r3, #2]
 8013ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ad2:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013ad6:	809a      	strh	r2, [r3, #4]
 8013ad8:	e75f      	b.n	801399a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8013ada:	9c02      	ldr	r4, [sp, #8]
 8013adc:	4570      	cmp	r0, lr
 8013ade:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013ae2:	db0d      	blt.n	8013b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8013ae4:	4431      	add	r1, r6
 8013ae6:	9b06      	ldr	r3, [sp, #24]
 8013ae8:	445c      	add	r4, fp
 8013aea:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013aee:	b289      	uxth	r1, r1
 8013af0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8013af4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013af8:	4419      	add	r1, r3
 8013afa:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013afe:	e581      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8013b00:	445c      	add	r4, fp
 8013b02:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8013b06:	e79b      	b.n	8013a40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8013b08:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013b0c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013b10:	1e65      	subs	r5, r4, #1
 8013b12:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8013b16:	b2ad      	uxth	r5, r5
 8013b18:	42b5      	cmp	r5, r6
 8013b1a:	d044      	beq.n	8013ba6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8013b1c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013b20:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8013b24:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013b28:	4282      	cmp	r2, r0
 8013b2a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013b2e:	d11f      	bne.n	8013b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8013b30:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8013b34:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013b38:	459c      	cmp	ip, r3
 8013b3a:	d119      	bne.n	8013b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8013b3c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013b40:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013b44:	19d8      	adds	r0, r3, r7
 8013b46:	b200      	sxth	r0, r0
 8013b48:	4288      	cmp	r0, r1
 8013b4a:	d109      	bne.n	8013b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013b4c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8013b50:	4413      	add	r3, r2
 8013b52:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8013b56:	4629      	mov	r1, r5
 8013b58:	9801      	ldr	r0, [sp, #4]
 8013b5a:	f7ff fd23 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013b5e:	e003      	b.n	8013b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8013b60:	4411      	add	r1, r2
 8013b62:	b209      	sxth	r1, r1
 8013b64:	42b9      	cmp	r1, r7
 8013b66:	d0f3      	beq.n	8013b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8013b68:	3d01      	subs	r5, #1
 8013b6a:	3c08      	subs	r4, #8
 8013b6c:	b2ad      	uxth	r5, r5
 8013b6e:	e7d3      	b.n	8013b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8013b70:	42b9      	cmp	r1, r7
 8013b72:	d1f9      	bne.n	8013b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8013b74:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8013b78:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013b7c:	4299      	cmp	r1, r3
 8013b7e:	d1f3      	bne.n	8013b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8013b80:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8013b84:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013b88:	181f      	adds	r7, r3, r0
 8013b8a:	b23f      	sxth	r7, r7
 8013b8c:	42ba      	cmp	r2, r7
 8013b8e:	d105      	bne.n	8013b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8013b90:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8013b94:	440b      	add	r3, r1
 8013b96:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013b9a:	e7dc      	b.n	8013b56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8013b9c:	440a      	add	r2, r1
 8013b9e:	b212      	sxth	r2, r2
 8013ba0:	4290      	cmp	r0, r2
 8013ba2:	d1e1      	bne.n	8013b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8013ba4:	e7f6      	b.n	8013b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8013ba6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8013baa:	2e07      	cmp	r6, #7
 8013bac:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013bb0:	d812      	bhi.n	8013bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8013bb2:	1c75      	adds	r5, r6, #1
 8013bb4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8013bb8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8013bbc:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8013bc0:	9d01      	ldr	r5, [sp, #4]
 8013bc2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8013bc6:	442c      	add	r4, r5
 8013bc8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8013bcc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013bd0:	8061      	strh	r1, [r4, #2]
 8013bd2:	80a2      	strh	r2, [r4, #4]
 8013bd4:	80e3      	strh	r3, [r4, #6]
 8013bd6:	e57f      	b.n	80136d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8013bd8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013bdc:	3e01      	subs	r6, #1
 8013bde:	445c      	add	r4, fp
 8013be0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8013be4:	f04f 37ff 	mov.w	r7, #4294967295
 8013be8:	2500      	movs	r5, #0
 8013bea:	9305      	str	r3, [sp, #20]
 8013bec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013bf0:	1e72      	subs	r2, r6, #1
 8013bf2:	9302      	str	r3, [sp, #8]
 8013bf4:	4691      	mov	r9, r2
 8013bf6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013bfa:	9304      	str	r3, [sp, #16]
 8013bfc:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8013c00:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013c04:	6818      	ldr	r0, [r3, #0]
 8013c06:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013c0a:	9207      	str	r2, [sp, #28]
 8013c0c:	bf16      	itet	ne
 8013c0e:	9905      	ldrne	r1, [sp, #20]
 8013c10:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013c14:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013c18:	9306      	str	r3, [sp, #24]
 8013c1a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013c1e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013c22:	fb18 f801 	smulbb	r8, r8, r1
 8013c26:	6859      	ldr	r1, [r3, #4]
 8013c28:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013c2c:	4671      	mov	r1, lr
 8013c2e:	a80c      	add	r0, sp, #48	@ 0x30
 8013c30:	f7ff fb62 	bl	80132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013c34:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013c38:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013c3c:	f04f 0c08 	mov.w	ip, #8
 8013c40:	9b04      	ldr	r3, [sp, #16]
 8013c42:	9a02      	ldr	r2, [sp, #8]
 8013c44:	fb10 f001 	smulbb	r0, r0, r1
 8013c48:	fb02 8803 	mla	r8, r2, r3, r8
 8013c4c:	eba0 0108 	sub.w	r1, r0, r8
 8013c50:	fb90 f0fc 	sdiv	r0, r0, ip
 8013c54:	4288      	cmp	r0, r1
 8013c56:	dc20      	bgt.n	8013c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8013c58:	4551      	cmp	r1, sl
 8013c5a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013c5e:	da03      	bge.n	8013c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8013c60:	b1d9      	cbz	r1, 8013c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8013c62:	468a      	mov	sl, r1
 8013c64:	464f      	mov	r7, r9
 8013c66:	4635      	mov	r5, r6
 8013c68:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c6c:	f119 0f02 	cmn.w	r9, #2
 8013c70:	d1c6      	bne.n	8013c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8013c72:	4616      	mov	r6, r2
 8013c74:	3201      	adds	r2, #1
 8013c76:	f1a4 0408 	sub.w	r4, r4, #8
 8013c7a:	d1b7      	bne.n	8013bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8013c7c:	9b01      	ldr	r3, [sp, #4]
 8013c7e:	b2ac      	uxth	r4, r5
 8013c80:	00ed      	lsls	r5, r5, #3
 8013c82:	1958      	adds	r0, r3, r5
 8013c84:	1c7b      	adds	r3, r7, #1
 8013c86:	d10b      	bne.n	8013ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8013c88:	4601      	mov	r1, r0
 8013c8a:	9803      	ldr	r0, [sp, #12]
 8013c8c:	f7ff fb34 	bl	80132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013c90:	4621      	mov	r1, r4
 8013c92:	9801      	ldr	r0, [sp, #4]
 8013c94:	f7ff fc86 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013c98:	e4b4      	b.n	8013604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8013c9a:	464f      	mov	r7, r9
 8013c9c:	4635      	mov	r5, r6
 8013c9e:	e7ed      	b.n	8013c7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8013ca0:	9b01      	ldr	r3, [sp, #4]
 8013ca2:	00ff      	lsls	r7, r7, #3
 8013ca4:	445d      	add	r5, fp
 8013ca6:	19d9      	adds	r1, r3, r7
 8013ca8:	445f      	add	r7, fp
 8013caa:	f7ff fb25 	bl	80132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013cae:	9b03      	ldr	r3, [sp, #12]
 8013cb0:	cb03      	ldmia	r3!, {r0, r1}
 8013cb2:	9b03      	ldr	r3, [sp, #12]
 8013cb4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8013cb8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8013cbc:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013cc0:	6869      	ldr	r1, [r5, #4]
 8013cc2:	c303      	stmia	r3!, {r0, r1}
 8013cc4:	e7e4      	b.n	8013c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8013cc6:	bf00      	nop

08013cc8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8013cd0:	b0a1      	sub	sp, #132	@ 0x84
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	f7f9 ff2a 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013cda:	4605      	mov	r5, r0
 8013cdc:	b948      	cbnz	r0, 8013cf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ce4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013ce8:	4798      	blx	r3
 8013cea:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8013cee:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8013cf2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d149      	bne.n	8013d8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8013cfa:	4bb2      	ldr	r3, [pc, #712]	@ (8013fc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8013d02:	1ebb      	subs	r3, r7, #2
 8013d04:	425f      	negs	r7, r3
 8013d06:	415f      	adcs	r7, r3
 8013d08:	4baf      	ldr	r3, [pc, #700]	@ (8013fc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d040      	beq.n	8013d92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8013d10:	4dae      	ldr	r5, [pc, #696]	@ (8013fcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8013d12:	4628      	mov	r0, r5
 8013d14:	f7f9 ff0b 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d18:	4606      	mov	r6, r0
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d139      	bne.n	8013d92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f7ff f962 	bl	8012fe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	6829      	ldr	r1, [r5, #0]
 8013d28:	4620      	mov	r0, r4
 8013d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d2c:	686a      	ldr	r2, [r5, #4]
 8013d2e:	4798      	blx	r3
 8013d30:	802e      	strh	r6, [r5, #0]
 8013d32:	806e      	strh	r6, [r5, #2]
 8013d34:	80ae      	strh	r6, [r5, #4]
 8013d36:	80ee      	strh	r6, [r5, #6]
 8013d38:	af0f      	add	r7, sp, #60	@ 0x3c
 8013d3a:	4ea5      	ldr	r6, [pc, #660]	@ (8013fd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8013d3c:	4638      	mov	r0, r7
 8013d3e:	f7ff fbd5 	bl	80134ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013d42:	8835      	ldrh	r5, [r6, #0]
 8013d44:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8013d48:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013d4c:	462b      	mov	r3, r5
 8013d4e:	4563      	cmp	r3, ip
 8013d50:	d224      	bcs.n	8013d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8013d52:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8013d56:	2907      	cmp	r1, #7
 8013d58:	d816      	bhi.n	8013d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013d5a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013d5e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8013d62:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8013d66:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8013d6a:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8013d6e:	1c4a      	adds	r2, r1, #1
 8013d70:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8013d74:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8013d78:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8013d7c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8013d80:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013d84:	f8a2 e006 	strh.w	lr, [r2, #6]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	e7df      	b.n	8013d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8013d8e:	2701      	movs	r7, #1
 8013d90:	e7ba      	b.n	8013d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8013d92:	2f00      	cmp	r7, #0
 8013d94:	d1d0      	bne.n	8013d38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8013d96:	b021      	add	sp, #132	@ 0x84
 8013d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d9c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8013da0:	42ab      	cmp	r3, r5
 8013da2:	d90c      	bls.n	8013dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8013da4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8013da8:	6822      	ldr	r2, [r4, #0]
 8013daa:	3501      	adds	r5, #1
 8013dac:	4620      	mov	r0, r4
 8013dae:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8013db0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8013db4:	b2ad      	uxth	r5, r5
 8013db6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8013dba:	47b8      	blx	r7
 8013dbc:	e7ee      	b.n	8013d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8013dbe:	4d81      	ldr	r5, [pc, #516]	@ (8013fc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8013dc0:	6828      	ldr	r0, [r5, #0]
 8013dc2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	f040 813d 	bne.w	8014046 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8013dcc:	4a81      	ldr	r2, [pc, #516]	@ (8013fd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8013dce:	8833      	ldrh	r3, [r6, #0]
 8013dd0:	7812      	ldrb	r2, [r2, #0]
 8013dd2:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8013dd6:	2a01      	cmp	r2, #1
 8013dd8:	d014      	beq.n	8013e04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8013dda:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8013dde:	f04f 0900 	mov.w	r9, #0
 8013de2:	32ae      	adds	r2, #174	@ 0xae
 8013de4:	4283      	cmp	r3, r0
 8013de6:	f102 0208 	add.w	r2, r2, #8
 8013dea:	f280 8083 	bge.w	8013ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8013dee:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8013df2:	3301      	adds	r3, #1
 8013df4:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8013df8:	4439      	add	r1, r7
 8013dfa:	b209      	sxth	r1, r1
 8013dfc:	4589      	cmp	r9, r1
 8013dfe:	bfb8      	it	lt
 8013e00:	4689      	movlt	r9, r1
 8013e02:	e7ef      	b.n	8013de4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8013e04:	4f74      	ldr	r7, [pc, #464]	@ (8013fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8013e06:	883a      	ldrh	r2, [r7, #0]
 8013e08:	4693      	mov	fp, r2
 8013e0a:	4283      	cmp	r3, r0
 8013e0c:	da08      	bge.n	8013e20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8013e0e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8013e12:	3301      	adds	r3, #1
 8013e14:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8013e18:	458b      	cmp	fp, r1
 8013e1a:	bfa8      	it	ge
 8013e1c:	468b      	movge	fp, r1
 8013e1e:	e7f4      	b.n	8013e0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8013e20:	2a0f      	cmp	r2, #15
 8013e22:	f04f 0300 	mov.w	r3, #0
 8013e26:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8013fdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8013e2a:	bf8c      	ite	hi
 8013e2c:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8013e30:	f04f 0801 	movls.w	r8, #1
 8013e34:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8013e38:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013e3c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8013e40:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013e44:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8013e48:	6828      	ldr	r0, [r5, #0]
 8013e4a:	455b      	cmp	r3, fp
 8013e4c:	f340 80c8 	ble.w	8013fe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013e50:	6803      	ldr	r3, [r0, #0]
 8013e52:	f8b7 a000 	ldrh.w	sl, [r7]
 8013e56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013e5a:	4798      	blx	r3
 8013e5c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8013e60:	ebaa 0000 	sub.w	r0, sl, r0
 8013e64:	682b      	ldr	r3, [r5, #0]
 8013e66:	ebac 0e08 	sub.w	lr, ip, r8
 8013e6a:	b280      	uxth	r0, r0
 8013e6c:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8013e70:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8013e74:	4570      	cmp	r0, lr
 8013e76:	dd05      	ble.n	8013e84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8013e78:	4558      	cmp	r0, fp
 8013e7a:	dd03      	ble.n	8013e84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8013e7c:	b901      	cbnz	r1, 8013e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8013e7e:	b392      	cbz	r2, 8013ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8013e80:	4658      	mov	r0, fp
 8013e82:	e006      	b.n	8013e92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8013e84:	2900      	cmp	r1, #0
 8013e86:	d1fb      	bne.n	8013e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8013e88:	2a00      	cmp	r2, #0
 8013e8a:	d1f9      	bne.n	8013e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8013e8c:	4558      	cmp	r0, fp
 8013e8e:	bfb8      	it	lt
 8013e90:	4658      	movlt	r0, fp
 8013e92:	f9b9 3000 	ldrsh.w	r3, [r9]
 8013e96:	2200      	movs	r2, #0
 8013e98:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8013e9c:	ebac 0000 	sub.w	r0, ip, r0
 8013ea0:	f8b6 a000 	ldrh.w	sl, [r6]
 8013ea4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8013ea8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8013eac:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013eb0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013eb4:	4553      	cmp	r3, sl
 8013eb6:	ddc5      	ble.n	8013e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8013eb8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8013ebc:	ab0d      	add	r3, sp, #52	@ 0x34
 8013ebe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013ec2:	6851      	ldr	r1, [r2, #4]
 8013ec4:	c303      	stmia	r3!, {r0, r1}
 8013ec6:	a80d      	add	r0, sp, #52	@ 0x34
 8013ec8:	a90b      	add	r1, sp, #44	@ 0x2c
 8013eca:	f7f9 fded 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8013ece:	a80d      	add	r0, sp, #52	@ 0x34
 8013ed0:	f7f9 fe2d 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ed4:	b920      	cbnz	r0, 8013ee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8013ed6:	6823      	ldr	r3, [r4, #0]
 8013ed8:	a90d      	add	r1, sp, #52	@ 0x34
 8013eda:	4620      	mov	r0, r4
 8013edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013ede:	4798      	blx	r3
 8013ee0:	f10a 0a01 	add.w	sl, sl, #1
 8013ee4:	e7e4      	b.n	8013eb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	2101      	movs	r1, #1
 8013eea:	4618      	mov	r0, r3
 8013eec:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8013ef0:	4790      	blx	r2
 8013ef2:	e7a7      	b.n	8013e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8013ef4:	4b39      	ldr	r3, [pc, #228]	@ (8013fdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8013ef6:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8013fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8013efa:	881f      	ldrh	r7, [r3, #0]
 8013efc:	2300      	movs	r3, #0
 8013efe:	2f0f      	cmp	r7, #15
 8013f00:	bf8c      	ite	hi
 8013f02:	08ff      	lsrhi	r7, r7, #3
 8013f04:	2701      	movls	r7, #1
 8013f06:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8013f0a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013f0e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8013f12:	6828      	ldr	r0, [r5, #0]
 8013f14:	4413      	add	r3, r2
 8013f16:	b21b      	sxth	r3, r3
 8013f18:	454b      	cmp	r3, r9
 8013f1a:	da61      	bge.n	8013fe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013f1c:	6803      	ldr	r3, [r0, #0]
 8013f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013f22:	4798      	blx	r3
 8013f24:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8013f28:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013f2c:	682a      	ldr	r2, [r5, #0]
 8013f2e:	4473      	add	r3, lr
 8013f30:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8013f34:	b21b      	sxth	r3, r3
 8013f36:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8013f3a:	eb03 0e07 	add.w	lr, r3, r7
 8013f3e:	4570      	cmp	r0, lr
 8013f40:	da0d      	bge.n	8013f5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8013f42:	4548      	cmp	r0, r9
 8013f44:	da0b      	bge.n	8013f5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8013f46:	f1bc 0f00 	cmp.w	ip, #0
 8013f4a:	d138      	bne.n	8013fbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8013f4c:	2900      	cmp	r1, #0
 8013f4e:	d136      	bne.n	8013fbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8013f50:	6813      	ldr	r3, [r2, #0]
 8013f52:	2101      	movs	r1, #1
 8013f54:	4610      	mov	r0, r2
 8013f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013f5a:	4798      	blx	r3
 8013f5c:	e7d5      	b.n	8013f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8013f5e:	f1bc 0f00 	cmp.w	ip, #0
 8013f62:	d12c      	bne.n	8013fbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8013f64:	bb59      	cbnz	r1, 8013fbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8013f66:	4548      	cmp	r0, r9
 8013f68:	bfa8      	it	ge
 8013f6a:	4648      	movge	r0, r9
 8013f6c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8013f70:	2100      	movs	r1, #0
 8013f72:	1ac0      	subs	r0, r0, r3
 8013f74:	f8b6 a000 	ldrh.w	sl, [r6]
 8013f78:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8013f7c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013f80:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8013f84:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013f88:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013f8c:	4553      	cmp	r3, sl
 8013f8e:	ddbc      	ble.n	8013f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8013f90:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8013f94:	ab0d      	add	r3, sp, #52	@ 0x34
 8013f96:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013f9a:	6851      	ldr	r1, [r2, #4]
 8013f9c:	c303      	stmia	r3!, {r0, r1}
 8013f9e:	a80d      	add	r0, sp, #52	@ 0x34
 8013fa0:	a90b      	add	r1, sp, #44	@ 0x2c
 8013fa2:	f7f9 fd81 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8013fa6:	a80d      	add	r0, sp, #52	@ 0x34
 8013fa8:	f7f9 fdc1 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fac:	b920      	cbnz	r0, 8013fb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8013fae:	6823      	ldr	r3, [r4, #0]
 8013fb0:	a90d      	add	r1, sp, #52	@ 0x34
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013fb6:	4798      	blx	r3
 8013fb8:	f10a 0a01 	add.w	sl, sl, #1
 8013fbc:	e7e4      	b.n	8013f88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8013fbe:	4648      	mov	r0, r9
 8013fc0:	e7d4      	b.n	8013f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8013fc2:	bf00      	nop
 8013fc4:	2402526c 	.word	0x2402526c
 8013fc8:	240252ac 	.word	0x240252ac
 8013fcc:	240252b8 	.word	0x240252b8
 8013fd0:	2400007c 	.word	0x2400007c
 8013fd4:	24025264 	.word	0x24025264
 8013fd8:	24025260 	.word	0x24025260
 8013fdc:	24025262 	.word	0x24025262
 8013fe0:	6828      	ldr	r0, [r5, #0]
 8013fe2:	6803      	ldr	r3, [r0, #0]
 8013fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fe6:	4798      	blx	r3
 8013fe8:	4ba4      	ldr	r3, [pc, #656]	@ (801427c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f43f aed2 	beq.w	8013d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8013ff8:	a80f      	add	r0, sp, #60	@ 0x3c
 8013ffa:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8013ffe:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8014002:	4b9f      	ldr	r3, [pc, #636]	@ (8014280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	42b3      	cmp	r3, r6
 8014008:	f4bf aec5 	bcs.w	8013d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801400c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8014010:	2907      	cmp	r1, #7
 8014012:	d815      	bhi.n	8014040 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8014014:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014018:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801401c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014020:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014024:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014028:	1c4a      	adds	r2, r1, #1
 801402a:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801402e:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8014032:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8014036:	f8a2 e002 	strh.w	lr, [r2, #2]
 801403a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801403e:	80d7      	strh	r7, [r2, #6]
 8014040:	3301      	adds	r3, #1
 8014042:	b29b      	uxth	r3, r3
 8014044:	e7df      	b.n	8014006 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8014046:	2b02      	cmp	r3, #2
 8014048:	f040 80ce 	bne.w	80141e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801404c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014050:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8014054:	9308      	str	r3, [sp, #32]
 8014056:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801405a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801405e:	9307      	str	r3, [sp, #28]
 8014060:	b2bf      	uxth	r7, r7
 8014062:	6803      	ldr	r3, [r0, #0]
 8014064:	fa0f f887 	sxth.w	r8, r7
 8014068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801406c:	4798      	blx	r3
 801406e:	4b85      	ldr	r3, [pc, #532]	@ (8014284 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8014070:	4682      	mov	sl, r0
 8014072:	2000      	movs	r0, #0
 8014074:	881b      	ldrh	r3, [r3, #0]
 8014076:	9302      	str	r3, [sp, #8]
 8014078:	4b83      	ldr	r3, [pc, #524]	@ (8014288 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801407a:	881e      	ldrh	r6, [r3, #0]
 801407c:	4b83      	ldr	r3, [pc, #524]	@ (801428c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	2b01      	cmp	r3, #1
 8014082:	bf1e      	ittt	ne
 8014084:	9b02      	ldrne	r3, [sp, #8]
 8014086:	9602      	strne	r6, [sp, #8]
 8014088:	461e      	movne	r6, r3
 801408a:	f7ed fc31 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801408e:	fb96 fbfb 	sdiv	fp, r6, fp
 8014092:	fb0b f808 	mul.w	r8, fp, r8
 8014096:	45c2      	cmp	sl, r8
 8014098:	da0c      	bge.n	80140b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801409a:	6828      	ldr	r0, [r5, #0]
 801409c:	210a      	movs	r1, #10
 801409e:	6803      	ldr	r3, [r0, #0]
 80140a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80140a4:	4798      	blx	r3
 80140a6:	6828      	ldr	r0, [r5, #0]
 80140a8:	6803      	ldr	r3, [r0, #0]
 80140aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80140ae:	4798      	blx	r3
 80140b0:	4682      	mov	sl, r0
 80140b2:	e7f0      	b.n	8014096 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 80140b4:	2000      	movs	r0, #0
 80140b6:	f04f 0800 	mov.w	r8, #0
 80140ba:	f7ed fc49 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80140be:	fa1f f38b 	uxth.w	r3, fp
 80140c2:	4645      	mov	r5, r8
 80140c4:	fb17 f703 	smulbb	r7, r7, r3
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	b2bb      	uxth	r3, r7
 80140cc:	4f70      	ldr	r7, [pc, #448]	@ (8014290 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 80140ce:	9305      	str	r3, [sp, #20]
 80140d0:	0973      	lsrs	r3, r6, #5
 80140d2:	9306      	str	r3, [sp, #24]
 80140d4:	42b5      	cmp	r5, r6
 80140d6:	d087      	beq.n	8013fe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80140d8:	6838      	ldr	r0, [r7, #0]
 80140da:	6803      	ldr	r3, [r0, #0]
 80140dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80140e0:	4798      	blx	r3
 80140e2:	4582      	cmp	sl, r0
 80140e4:	4681      	mov	r9, r0
 80140e6:	d907      	bls.n	80140f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 80140e8:	f1b8 0f00 	cmp.w	r8, #0
 80140ec:	d007      	beq.n	80140fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 80140ee:	6838      	ldr	r0, [r7, #0]
 80140f0:	6803      	ldr	r3, [r0, #0]
 80140f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80140f6:	e776      	b.n	8013fe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80140f8:	f1b8 0f00 	cmp.w	r8, #0
 80140fc:	d003      	beq.n	8014106 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 80140fe:	454d      	cmp	r5, r9
 8014100:	d3f5      	bcc.n	80140ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8014102:	f04f 0801 	mov.w	r8, #1
 8014106:	9a04      	ldr	r2, [sp, #16]
 8014108:	fb95 f3fb 	sdiv	r3, r5, fp
 801410c:	9303      	str	r3, [sp, #12]
 801410e:	3301      	adds	r3, #1
 8014110:	fb13 f302 	smulbb	r3, r3, r2
 8014114:	b299      	uxth	r1, r3
 8014116:	f1b8 0f00 	cmp.w	r8, #0
 801411a:	d04d      	beq.n	80141b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 801411c:	eb09 030b 	add.w	r3, r9, fp
 8014120:	42b3      	cmp	r3, r6
 8014122:	bfa8      	it	ge
 8014124:	4633      	movge	r3, r6
 8014126:	b29b      	uxth	r3, r3
 8014128:	9807      	ldr	r0, [sp, #28]
 801412a:	428b      	cmp	r3, r1
 801412c:	bf94      	ite	ls
 801412e:	ebc5 0203 	rsbls	r2, r5, r3
 8014132:	ebc5 0201 	rsbhi	r2, r5, r1
 8014136:	4282      	cmp	r2, r0
 8014138:	bfa8      	it	ge
 801413a:	4602      	movge	r2, r0
 801413c:	9808      	ldr	r0, [sp, #32]
 801413e:	fa1f fa82 	uxth.w	sl, r2
 8014142:	4582      	cmp	sl, r0
 8014144:	d205      	bcs.n	8014152 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8014146:	fa15 f082 	uxtah	r0, r5, r2
 801414a:	4286      	cmp	r6, r0
 801414c:	d001      	beq.n	8014152 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801414e:	4299      	cmp	r1, r3
 8014150:	d23f      	bcs.n	80141d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8014152:	2001      	movs	r0, #1
 8014154:	9209      	str	r2, [sp, #36]	@ 0x24
 8014156:	f7ed fbcb 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801415a:	6838      	ldr	r0, [r7, #0]
 801415c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014160:	6803      	ldr	r3, [r0, #0]
 8014162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014166:	4798      	blx	r3
 8014168:	4b48      	ldr	r3, [pc, #288]	@ (801428c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801416a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801416c:	2000      	movs	r0, #0
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014174:	b212      	sxth	r2, r2
 8014176:	2b01      	cmp	r3, #1
 8014178:	d122      	bne.n	80141c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 801417a:	1b73      	subs	r3, r6, r5
 801417c:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8014180:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8014184:	eba3 030a 	sub.w	r3, r3, sl
 8014188:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801418c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014190:	6823      	ldr	r3, [r4, #0]
 8014192:	a90d      	add	r1, sp, #52	@ 0x34
 8014194:	4620      	mov	r0, r4
 8014196:	4455      	add	r5, sl
 8014198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801419a:	4798      	blx	r3
 801419c:	6838      	ldr	r0, [r7, #0]
 801419e:	9b03      	ldr	r3, [sp, #12]
 80141a0:	b2ad      	uxth	r5, r5
 80141a2:	4259      	negs	r1, r3
 80141a4:	6803      	ldr	r3, [r0, #0]
 80141a6:	b209      	sxth	r1, r1
 80141a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80141ac:	4798      	blx	r3
 80141ae:	2001      	movs	r0, #1
 80141b0:	f7ed fbce 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80141b4:	46ca      	mov	sl, r9
 80141b6:	e78d      	b.n	80140d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 80141b8:	9b05      	ldr	r3, [sp, #20]
 80141ba:	eba9 0303 	sub.w	r3, r9, r3
 80141be:	e7b2      	b.n	8014126 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80141c0:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80141c4:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 80141c8:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80141cc:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80141d0:	e7de      	b.n	8014190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 80141d2:	6838      	ldr	r0, [r7, #0]
 80141d4:	6803      	ldr	r3, [r0, #0]
 80141d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141d8:	4798      	blx	r3
 80141da:	6838      	ldr	r0, [r7, #0]
 80141dc:	9906      	ldr	r1, [sp, #24]
 80141de:	6803      	ldr	r3, [r0, #0]
 80141e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80141e4:	4798      	blx	r3
 80141e6:	e7e5      	b.n	80141b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 80141e8:	2b03      	cmp	r3, #3
 80141ea:	f040 8133 	bne.w	8014454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 80141ee:	4b27      	ldr	r3, [pc, #156]	@ (801428c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80141f0:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80141f4:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	f000 8095 	beq.w	801432a <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8014200:	8832      	ldrh	r2, [r6, #0]
 8014202:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8014206:	3201      	adds	r2, #1
 8014208:	b292      	uxth	r2, r2
 801420a:	2900      	cmp	r1, #0
 801420c:	f43f aeec 	beq.w	8013fe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014210:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8014214:	4694      	mov	ip, r2
 8014216:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801421a:	f04f 0800 	mov.w	r8, #0
 801421e:	441d      	add	r5, r3
 8014220:	b22d      	sxth	r5, r5
 8014222:	fa1f f38c 	uxth.w	r3, ip
 8014226:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801422a:	4299      	cmp	r1, r3
 801422c:	f240 80bc 	bls.w	80143a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8014230:	4427      	add	r7, r4
 8014232:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8014236:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801423a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801423e:	4283      	cmp	r3, r0
 8014240:	f340 809e 	ble.w	8014380 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 8014244:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8014248:	46e0      	mov	r8, ip
 801424a:	4405      	add	r5, r0
 801424c:	b22d      	sxth	r5, r5
 801424e:	429d      	cmp	r5, r3
 8014250:	bfa8      	it	ge
 8014252:	461d      	movge	r5, r3
 8014254:	f10c 0c01 	add.w	ip, ip, #1
 8014258:	e7e3      	b.n	8014222 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 801425a:	d10a      	bne.n	8014272 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 801425c:	4562      	cmp	r2, ip
 801425e:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8014262:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8014266:	bfb8      	it	lt
 8014268:	4662      	movlt	r2, ip
 801426a:	4288      	cmp	r0, r1
 801426c:	bfb8      	it	lt
 801426e:	4698      	movlt	r8, r3
 8014270:	e084      	b.n	801437c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8014272:	428a      	cmp	r2, r1
 8014274:	bfb8      	it	lt
 8014276:	460a      	movlt	r2, r1
 8014278:	e080      	b.n	801437c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 801427a:	bf00      	nop
 801427c:	2402526a 	.word	0x2402526a
 8014280:	2400007c 	.word	0x2400007c
 8014284:	24025262 	.word	0x24025262
 8014288:	24025260 	.word	0x24025260
 801428c:	24025264 	.word	0x24025264
 8014290:	2402526c 	.word	0x2402526c
 8014294:	19e1      	adds	r1, r4, r7
 8014296:	ab0d      	add	r3, sp, #52	@ 0x34
 8014298:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801429c:	6849      	ldr	r1, [r1, #4]
 801429e:	c303      	stmia	r3!, {r0, r1}
 80142a0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 80142a4:	a80d      	add	r0, sp, #52	@ 0x34
 80142a6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80142aa:	454b      	cmp	r3, r9
 80142ac:	440b      	add	r3, r1
 80142ae:	bfb8      	it	lt
 80142b0:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 80142b4:	1a9b      	subs	r3, r3, r2
 80142b6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80142ba:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80142be:	f7fe fead 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80142c2:	a80d      	add	r0, sp, #52	@ 0x34
 80142c4:	f7f9 fc33 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142c8:	bb78      	cbnz	r0, 801432a <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80142ca:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 80142ce:	4427      	add	r7, r4
 80142d0:	6828      	ldr	r0, [r5, #0]
 80142d2:	45cc      	cmp	ip, r9
 80142d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80142d8:	f8d0 e000 	ldr.w	lr, [r0]
 80142dc:	bfd8      	it	le
 80142de:	fa1f fc8c 	uxthle.w	ip, ip
 80142e2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80142e6:	bfc8      	it	gt
 80142e8:	fa1f fc89 	uxthgt.w	ip, r9
 80142ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80142f0:	f8cd c000 	str.w	ip, [sp]
 80142f4:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 80142f8:	47d8      	blx	fp
 80142fa:	4683      	mov	fp, r0
 80142fc:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8014300:	a80d      	add	r0, sp, #52	@ 0x34
 8014302:	f7fe fe71 	bl	8012fe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	4620      	mov	r0, r4
 801430a:	a90d      	add	r1, sp, #52	@ 0x34
 801430c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801430e:	4798      	blx	r3
 8014310:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8014314:	eba0 000b 	sub.w	r0, r0, fp
 8014318:	b200      	sxth	r0, r0
 801431a:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801431e:	b920      	cbnz	r0, 801432a <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8014320:	fa1f f188 	uxth.w	r1, r8
 8014324:	4650      	mov	r0, sl
 8014326:	f7ff f93d 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801432a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801432e:	f1bb 0f00 	cmp.w	fp, #0
 8014332:	f43f ae59 	beq.w	8013fe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014336:	8833      	ldrh	r3, [r6, #0]
 8014338:	f04f 0800 	mov.w	r8, #0
 801433c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8014340:	3301      	adds	r3, #1
 8014342:	b29b      	uxth	r3, r3
 8014344:	b299      	uxth	r1, r3
 8014346:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801434a:	458b      	cmp	fp, r1
 801434c:	d9a2      	bls.n	8014294 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 801434e:	4427      	add	r7, r4
 8014350:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8014354:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8014358:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 801435c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8014360:	4408      	add	r0, r1
 8014362:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8014366:	4461      	add	r1, ip
 8014368:	b200      	sxth	r0, r0
 801436a:	b209      	sxth	r1, r1
 801436c:	4288      	cmp	r0, r1
 801436e:	f6bf af74 	bge.w	801425a <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 8014372:	4584      	cmp	ip, r0
 8014374:	4662      	mov	r2, ip
 8014376:	4698      	mov	r8, r3
 8014378:	bfb8      	it	lt
 801437a:	4602      	movlt	r2, r0
 801437c:	3301      	adds	r3, #1
 801437e:	e7e1      	b.n	8014344 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 8014380:	d10e      	bne.n	80143a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 8014382:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8014386:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801438a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801438e:	4473      	add	r3, lr
 8014390:	b21b      	sxth	r3, r3
 8014392:	429d      	cmp	r5, r3
 8014394:	bfa8      	it	ge
 8014396:	461d      	movge	r5, r3
 8014398:	4287      	cmp	r7, r0
 801439a:	bfb8      	it	lt
 801439c:	46e0      	movlt	r8, ip
 801439e:	e759      	b.n	8014254 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80143a0:	4285      	cmp	r5, r0
 80143a2:	bfa8      	it	ge
 80143a4:	4605      	movge	r5, r0
 80143a6:	e755      	b.n	8014254 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80143a8:	eb0a 0007 	add.w	r0, sl, r7
 80143ac:	4427      	add	r7, r4
 80143ae:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80143b2:	45cb      	cmp	fp, r9
 80143b4:	bfbc      	itt	lt
 80143b6:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 80143ba:	445d      	addlt	r5, fp
 80143bc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80143c0:	bfb8      	it	lt
 80143c2:	b22d      	sxthlt	r5, r5
 80143c4:	f7f9 fbb3 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 80143c8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80143cc:	2800      	cmp	r0, #0
 80143ce:	f47f af1c 	bne.w	801420a <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80143d2:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80143d6:	fa1f fb8b 	uxth.w	fp, fp
 80143da:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80143de:	1aad      	subs	r5, r5, r2
 80143e0:	4829      	ldr	r0, [pc, #164]	@ (8014488 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 80143e2:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80143e6:	454d      	cmp	r5, r9
 80143e8:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80143ec:	6800      	ldr	r0, [r0, #0]
 80143ee:	bfa8      	it	ge
 80143f0:	464d      	movge	r5, r9
 80143f2:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 80143f6:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80143fa:	b289      	uxth	r1, r1
 80143fc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014400:	b2ad      	uxth	r5, r5
 8014402:	f8d0 c000 	ldr.w	ip, [r0]
 8014406:	b292      	uxth	r2, r2
 8014408:	455d      	cmp	r5, fp
 801440a:	bf94      	ite	ls
 801440c:	9500      	strls	r5, [sp, #0]
 801440e:	f8cd b000 	strhi.w	fp, [sp]
 8014412:	b29b      	uxth	r3, r3
 8014414:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8014418:	47a8      	blx	r5
 801441a:	6823      	ldr	r3, [r4, #0]
 801441c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8014420:	a90d      	add	r1, sp, #52	@ 0x34
 8014422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014424:	4620      	mov	r0, r4
 8014426:	4798      	blx	r3
 8014428:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 801442c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8014430:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8014434:	1a5b      	subs	r3, r3, r1
 8014436:	440a      	add	r2, r1
 8014438:	b21b      	sxth	r3, r3
 801443a:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801443e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8014442:	2b00      	cmp	r3, #0
 8014444:	f47f aedc 	bne.w	8014200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8014448:	fa1f f188 	uxth.w	r1, r8
 801444c:	4650      	mov	r0, sl
 801444e:	f7ff f8a9 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014452:	e6d5      	b.n	8014200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8014454:	8835      	ldrh	r5, [r6, #0]
 8014456:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801445a:	42ab      	cmp	r3, r5
 801445c:	f67f adc4 	bls.w	8013fe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014460:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8014464:	ab0d      	add	r3, sp, #52	@ 0x34
 8014466:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801446a:	6851      	ldr	r1, [r2, #4]
 801446c:	c303      	stmia	r3!, {r0, r1}
 801446e:	a80d      	add	r0, sp, #52	@ 0x34
 8014470:	f7f9 fb5d 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014474:	b920      	cbnz	r0, 8014480 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	a90d      	add	r1, sp, #52	@ 0x34
 801447a:	4620      	mov	r0, r4
 801447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801447e:	4798      	blx	r3
 8014480:	3501      	adds	r5, #1
 8014482:	b2ad      	uxth	r5, r5
 8014484:	e7e7      	b.n	8014456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 8014486:	bf00      	nop
 8014488:	2402526c 	.word	0x2402526c

0801448c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801448c:	4b03      	ldr	r3, [pc, #12]	@ (801449c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801448e:	2200      	movs	r2, #0
 8014490:	801a      	strh	r2, [r3, #0]
 8014492:	805a      	strh	r2, [r3, #2]
 8014494:	809a      	strh	r2, [r3, #4]
 8014496:	80da      	strh	r2, [r3, #6]
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	240252b8 	.word	0x240252b8

080144a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80144a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a4:	b09d      	sub	sp, #116	@ 0x74
 80144a6:	4606      	mov	r6, r0
 80144a8:	4614      	mov	r4, r2
 80144aa:	468a      	mov	sl, r1
 80144ac:	a803      	add	r0, sp, #12
 80144ae:	461d      	mov	r5, r3
 80144b0:	f001 f946 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 80144b4:	6833      	ldr	r3, [r6, #0]
 80144b6:	4630      	mov	r0, r6
 80144b8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80144bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144be:	4798      	blx	r3
 80144c0:	6833      	ldr	r3, [r6, #0]
 80144c2:	4607      	mov	r7, r0
 80144c4:	4630      	mov	r0, r6
 80144c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144c8:	4798      	blx	r3
 80144ca:	462a      	mov	r2, r5
 80144cc:	2500      	movs	r5, #0
 80144ce:	4621      	mov	r1, r4
 80144d0:	9000      	str	r0, [sp, #0]
 80144d2:	463b      	mov	r3, r7
 80144d4:	462c      	mov	r4, r5
 80144d6:	46a9      	mov	r9, r5
 80144d8:	46a8      	mov	r8, r5
 80144da:	a803      	add	r0, sp, #12
 80144dc:	f001 f983 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80144e0:	2300      	movs	r3, #0
 80144e2:	9302      	str	r3, [sp, #8]
 80144e4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80144e8:	429c      	cmp	r4, r3
 80144ea:	d002      	beq.n	80144f2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80144ec:	455c      	cmp	r4, fp
 80144ee:	bf18      	it	ne
 80144f0:	4625      	movne	r5, r4
 80144f2:	ab02      	add	r3, sp, #8
 80144f4:	4632      	mov	r2, r6
 80144f6:	4651      	mov	r1, sl
 80144f8:	a803      	add	r0, sp, #12
 80144fa:	f001 fc97 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144fe:	4604      	mov	r4, r0
 8014500:	b108      	cbz	r0, 8014506 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014502:	280a      	cmp	r0, #10
 8014504:	d10a      	bne.n	801451c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8014506:	45c1      	cmp	r9, r8
 8014508:	bf38      	it	cc
 801450a:	46c1      	movcc	r9, r8
 801450c:	f04f 0800 	mov.w	r8, #0
 8014510:	2c00      	cmp	r4, #0
 8014512:	d1e5      	bne.n	80144e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014514:	4648      	mov	r0, r9
 8014516:	b01d      	add	sp, #116	@ 0x74
 8014518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451c:	9a02      	ldr	r2, [sp, #8]
 801451e:	2a00      	cmp	r2, #0
 8014520:	d0de      	beq.n	80144e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014522:	7b57      	ldrb	r7, [r2, #13]
 8014524:	4629      	mov	r1, r5
 8014526:	6833      	ldr	r3, [r6, #0]
 8014528:	007f      	lsls	r7, r7, #1
 801452a:	8894      	ldrh	r4, [r2, #4]
 801452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801452e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8014532:	7a97      	ldrb	r7, [r2, #10]
 8014534:	4307      	orrs	r7, r0
 8014536:	4630      	mov	r0, r6
 8014538:	4798      	blx	r3
 801453a:	4438      	add	r0, r7
 801453c:	4480      	add	r8, r0
 801453e:	fa1f f888 	uxth.w	r8, r8
 8014542:	e7e5      	b.n	8014510 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014544 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014544:	b508      	push	{r3, lr}
 8014546:	6803      	ldr	r3, [r0, #0]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	4798      	blx	r3
 801454c:	b128      	cbz	r0, 801455a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801454e:	7b43      	ldrb	r3, [r0, #13]
 8014550:	7a80      	ldrb	r0, [r0, #10]
 8014552:	005b      	lsls	r3, r3, #1
 8014554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014558:	4318      	orrs	r0, r3
 801455a:	bd08      	pop	{r3, pc}

0801455c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801455c:	b40e      	push	{r1, r2, r3}
 801455e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014560:	b09e      	sub	sp, #120	@ 0x78
 8014562:	4605      	mov	r5, r0
 8014564:	ab23      	add	r3, sp, #140	@ 0x8c
 8014566:	a805      	add	r0, sp, #20
 8014568:	f853 4b04 	ldr.w	r4, [r3], #4
 801456c:	9303      	str	r3, [sp, #12]
 801456e:	f001 f8e7 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 8014572:	682b      	ldr	r3, [r5, #0]
 8014574:	4628      	mov	r0, r5
 8014576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014578:	4798      	blx	r3
 801457a:	682b      	ldr	r3, [r5, #0]
 801457c:	4606      	mov	r6, r0
 801457e:	4628      	mov	r0, r5
 8014580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014582:	4798      	blx	r3
 8014584:	4633      	mov	r3, r6
 8014586:	4621      	mov	r1, r4
 8014588:	ae1e      	add	r6, sp, #120	@ 0x78
 801458a:	2400      	movs	r4, #0
 801458c:	9000      	str	r0, [sp, #0]
 801458e:	9a03      	ldr	r2, [sp, #12]
 8014590:	a805      	add	r0, sp, #20
 8014592:	f001 f928 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014596:	f846 4d68 	str.w	r4, [r6, #-104]!
 801459a:	462a      	mov	r2, r5
 801459c:	4633      	mov	r3, r6
 801459e:	4621      	mov	r1, r4
 80145a0:	a805      	add	r0, sp, #20
 80145a2:	f001 fc43 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80145a6:	b300      	cbz	r0, 80145ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80145a8:	280a      	cmp	r0, #10
 80145aa:	d01a      	beq.n	80145e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80145ac:	9f04      	ldr	r7, [sp, #16]
 80145ae:	b1c7      	cbz	r7, 80145e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80145b0:	7b78      	ldrb	r0, [r7, #13]
 80145b2:	7a3b      	ldrb	r3, [r7, #8]
 80145b4:	00c1      	lsls	r1, r0, #3
 80145b6:	88ea      	ldrh	r2, [r5, #6]
 80145b8:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80145bc:	4319      	orrs	r1, r3
 80145be:	0643      	lsls	r3, r0, #25
 80145c0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80145c4:	bf48      	it	mi
 80145c6:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80145ca:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80145ce:	bf48      	it	mi
 80145d0:	b219      	sxthmi	r1, r3
 80145d2:	79fb      	ldrb	r3, [r7, #7]
 80145d4:	4303      	orrs	r3, r0
 80145d6:	4413      	add	r3, r2
 80145d8:	1a5b      	subs	r3, r3, r1
 80145da:	b21b      	sxth	r3, r3
 80145dc:	429c      	cmp	r4, r3
 80145de:	bfb8      	it	lt
 80145e0:	461c      	movlt	r4, r3
 80145e2:	4633      	mov	r3, r6
 80145e4:	462a      	mov	r2, r5
 80145e6:	2100      	movs	r1, #0
 80145e8:	e7da      	b.n	80145a0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80145ea:	b2a0      	uxth	r0, r4
 80145ec:	b01e      	add	sp, #120	@ 0x78
 80145ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145f2:	b003      	add	sp, #12
 80145f4:	4770      	bx	lr

080145f6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80145f6:	7a43      	ldrb	r3, [r0, #9]
 80145f8:	8880      	ldrh	r0, [r0, #4]
 80145fa:	4418      	add	r0, r3
 80145fc:	b280      	uxth	r0, r0
 80145fe:	4770      	bx	lr

08014600 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014600:	6803      	ldr	r3, [r0, #0]
 8014602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014604:	4718      	bx	r3

08014606 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014606:	b40e      	push	{r1, r2, r3}
 8014608:	b570      	push	{r4, r5, r6, lr}
 801460a:	b09d      	sub	sp, #116	@ 0x74
 801460c:	4604      	mov	r4, r0
 801460e:	ab21      	add	r3, sp, #132	@ 0x84
 8014610:	a803      	add	r0, sp, #12
 8014612:	f853 5b04 	ldr.w	r5, [r3], #4
 8014616:	9302      	str	r3, [sp, #8]
 8014618:	f001 f892 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	4620      	mov	r0, r4
 8014620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014622:	4798      	blx	r3
 8014624:	6823      	ldr	r3, [r4, #0]
 8014626:	4606      	mov	r6, r0
 8014628:	4620      	mov	r0, r4
 801462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801462c:	2401      	movs	r4, #1
 801462e:	4798      	blx	r3
 8014630:	4633      	mov	r3, r6
 8014632:	9000      	str	r0, [sp, #0]
 8014634:	4629      	mov	r1, r5
 8014636:	9a02      	ldr	r2, [sp, #8]
 8014638:	a803      	add	r0, sp, #12
 801463a:	f001 f8d4 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801463e:	a803      	add	r0, sp, #12
 8014640:	f001 fcc0 	bl	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014644:	b2a3      	uxth	r3, r4
 8014646:	b138      	cbz	r0, 8014658 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8014648:	280a      	cmp	r0, #10
 801464a:	a803      	add	r0, sp, #12
 801464c:	bf04      	itt	eq
 801464e:	3301      	addeq	r3, #1
 8014650:	b21c      	sxtheq	r4, r3
 8014652:	f001 fcb7 	bl	8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014656:	e7f5      	b.n	8014644 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014658:	4618      	mov	r0, r3
 801465a:	b01d      	add	sp, #116	@ 0x74
 801465c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014660:	b003      	add	sp, #12
 8014662:	4770      	bx	lr

08014664 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8014664:	b40e      	push	{r1, r2, r3}
 8014666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014668:	b09e      	sub	sp, #120	@ 0x78
 801466a:	4604      	mov	r4, r0
 801466c:	ab23      	add	r3, sp, #140	@ 0x8c
 801466e:	a805      	add	r0, sp, #20
 8014670:	f853 5b04 	ldr.w	r5, [r3], #4
 8014674:	9303      	str	r3, [sp, #12]
 8014676:	f001 f863 	bl	8015740 <_ZN8touchgfx12TextProviderC1Ev>
 801467a:	6823      	ldr	r3, [r4, #0]
 801467c:	4620      	mov	r0, r4
 801467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014680:	4798      	blx	r3
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	4606      	mov	r6, r0
 8014686:	4620      	mov	r0, r4
 8014688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801468a:	4798      	blx	r3
 801468c:	4633      	mov	r3, r6
 801468e:	4629      	mov	r1, r5
 8014690:	9000      	str	r0, [sp, #0]
 8014692:	9a03      	ldr	r2, [sp, #12]
 8014694:	a805      	add	r0, sp, #20
 8014696:	f001 f8a6 	bl	80157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801469a:	ad1e      	add	r5, sp, #120	@ 0x78
 801469c:	2100      	movs	r1, #0
 801469e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80146a2:	4622      	mov	r2, r4
 80146a4:	a805      	add	r0, sp, #20
 80146a6:	f845 1d68 	str.w	r1, [r5, #-104]!
 80146aa:	462b      	mov	r3, r5
 80146ac:	f001 fbbe 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80146b0:	b1d8      	cbz	r0, 80146ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80146b2:	280a      	cmp	r0, #10
 80146b4:	d012      	beq.n	80146dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80146b6:	9804      	ldr	r0, [sp, #16]
 80146b8:	b180      	cbz	r0, 80146dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80146ba:	7b47      	ldrb	r7, [r0, #13]
 80146bc:	88e2      	ldrh	r2, [r4, #6]
 80146be:	00fb      	lsls	r3, r7, #3
 80146c0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80146c4:	7a03      	ldrb	r3, [r0, #8]
 80146c6:	430b      	orrs	r3, r1
 80146c8:	0679      	lsls	r1, r7, #25
 80146ca:	bf44      	itt	mi
 80146cc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80146d0:	b21b      	sxthmi	r3, r3
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	b21b      	sxth	r3, r3
 80146d6:	429e      	cmp	r6, r3
 80146d8:	bfa8      	it	ge
 80146da:	461e      	movge	r6, r3
 80146dc:	462b      	mov	r3, r5
 80146de:	4622      	mov	r2, r4
 80146e0:	2100      	movs	r1, #0
 80146e2:	a805      	add	r0, sp, #20
 80146e4:	f001 fba2 	bl	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80146e8:	e7e2      	b.n	80146b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80146ea:	4630      	mov	r0, r6
 80146ec:	b01e      	add	sp, #120	@ 0x78
 80146ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80146f2:	b003      	add	sp, #12
 80146f4:	4770      	bx	lr

080146f6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80146f6:	b513      	push	{r0, r1, r4, lr}
 80146f8:	6803      	ldr	r3, [r0, #0]
 80146fa:	2400      	movs	r4, #0
 80146fc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014700:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014704:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014708:	4669      	mov	r1, sp
 801470a:	691b      	ldr	r3, [r3, #16]
 801470c:	9400      	str	r4, [sp, #0]
 801470e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014712:	4798      	blx	r3
 8014714:	b002      	add	sp, #8
 8014716:	bd10      	pop	{r4, pc}

08014718 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	680b      	ldr	r3, [r1, #0]
 801471c:	460c      	mov	r4, r1
 801471e:	4605      	mov	r5, r0
 8014720:	68db      	ldr	r3, [r3, #12]
 8014722:	4798      	blx	r3
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	4620      	mov	r0, r4
 8014728:	4629      	mov	r1, r5
 801472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801472c:	4798      	blx	r3
 801472e:	4628      	mov	r0, r5
 8014730:	bd38      	pop	{r3, r4, r5, pc}

08014732 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014732:	b410      	push	{r4}
 8014734:	880a      	ldrh	r2, [r1, #0]
 8014736:	8884      	ldrh	r4, [r0, #4]
 8014738:	4422      	add	r2, r4
 801473a:	800a      	strh	r2, [r1, #0]
 801473c:	884a      	ldrh	r2, [r1, #2]
 801473e:	88c4      	ldrh	r4, [r0, #6]
 8014740:	4422      	add	r2, r4
 8014742:	804a      	strh	r2, [r1, #2]
 8014744:	6940      	ldr	r0, [r0, #20]
 8014746:	b120      	cbz	r0, 8014752 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014748:	6803      	ldr	r3, [r0, #0]
 801474a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014750:	4718      	bx	r3
 8014752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014756:	4770      	bx	lr

08014758 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014758:	b570      	push	{r4, r5, r6, lr}
 801475a:	8882      	ldrh	r2, [r0, #4]
 801475c:	460c      	mov	r4, r1
 801475e:	880b      	ldrh	r3, [r1, #0]
 8014760:	4605      	mov	r5, r0
 8014762:	4413      	add	r3, r2
 8014764:	800b      	strh	r3, [r1, #0]
 8014766:	884b      	ldrh	r3, [r1, #2]
 8014768:	88c2      	ldrh	r2, [r0, #6]
 801476a:	4413      	add	r3, r2
 801476c:	804b      	strh	r3, [r1, #2]
 801476e:	1d01      	adds	r1, r0, #4
 8014770:	4620      	mov	r0, r4
 8014772:	f7f9 f999 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8014776:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	dd0b      	ble.n	8014796 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801477e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014782:	2b00      	cmp	r3, #0
 8014784:	dd07      	ble.n	8014796 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014786:	6968      	ldr	r0, [r5, #20]
 8014788:	b128      	cbz	r0, 8014796 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801478a:	6803      	ldr	r3, [r0, #0]
 801478c:	4621      	mov	r1, r4
 801478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014794:	4718      	bx	r3
 8014796:	bd70      	pop	{r4, r5, r6, pc}

08014798 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8014798:	b570      	push	{r4, r5, r6, lr}
 801479a:	8882      	ldrh	r2, [r0, #4]
 801479c:	460c      	mov	r4, r1
 801479e:	880b      	ldrh	r3, [r1, #0]
 80147a0:	4605      	mov	r5, r0
 80147a2:	4413      	add	r3, r2
 80147a4:	800b      	strh	r3, [r1, #0]
 80147a6:	884b      	ldrh	r3, [r1, #2]
 80147a8:	88c2      	ldrh	r2, [r0, #6]
 80147aa:	4413      	add	r3, r2
 80147ac:	804b      	strh	r3, [r1, #2]
 80147ae:	1d01      	adds	r1, r0, #4
 80147b0:	4620      	mov	r0, r4
 80147b2:	f7f9 f979 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 80147b6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	dd19      	ble.n	80147f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80147be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	dd15      	ble.n	80147f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80147c6:	6968      	ldr	r0, [r5, #20]
 80147c8:	b128      	cbz	r0, 80147d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80147ca:	6803      	ldr	r3, [r0, #0]
 80147cc:	4621      	mov	r1, r4
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147d4:	4718      	bx	r3
 80147d6:	4b07      	ldr	r3, [pc, #28]	@ (80147f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	3304      	adds	r3, #4
 80147dc:	429d      	cmp	r5, r3
 80147de:	d108      	bne.n	80147f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80147e0:	f7fe fdd0 	bl	8013384 <_ZN8touchgfx11Application11getInstanceEv>
 80147e4:	6803      	ldr	r3, [r0, #0]
 80147e6:	6821      	ldr	r1, [r4, #0]
 80147e8:	6862      	ldr	r2, [r4, #4]
 80147ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147f0:	4718      	bx	r3
 80147f2:	bd70      	pop	{r4, r5, r6, pc}
 80147f4:	240252b0 	.word	0x240252b0

080147f8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	4604      	mov	r4, r0
 80147fc:	4616      	mov	r6, r2
 80147fe:	460d      	mov	r5, r1
 8014800:	b901      	cbnz	r1, 8014804 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8014802:	b192      	cbz	r2, 801482a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	4620      	mov	r0, r4
 8014808:	699b      	ldr	r3, [r3, #24]
 801480a:	4798      	blx	r3
 801480c:	88e2      	ldrh	r2, [r4, #6]
 801480e:	88a1      	ldrh	r1, [r4, #4]
 8014810:	4620      	mov	r0, r4
 8014812:	4432      	add	r2, r6
 8014814:	4429      	add	r1, r5
 8014816:	b212      	sxth	r2, r2
 8014818:	b209      	sxth	r1, r1
 801481a:	f7ef fbca 	bl	8003fb2 <_ZN8touchgfx8Drawable5setXYEss>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	4620      	mov	r0, r4
 8014822:	699b      	ldr	r3, [r3, #24]
 8014824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014828:	4718      	bx	r3
 801482a:	bd70      	pop	{r4, r5, r6, pc}

0801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801482c:	b510      	push	{r4, lr}
 801482e:	2300      	movs	r3, #0
 8014830:	4604      	mov	r4, r0
 8014832:	4608      	mov	r0, r1
 8014834:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014838:	8023      	strh	r3, [r4, #0]
 801483a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801483e:	8063      	strh	r3, [r4, #2]
 8014840:	6803      	ldr	r3, [r0, #0]
 8014842:	80a1      	strh	r1, [r4, #4]
 8014844:	4621      	mov	r1, r4
 8014846:	80e2      	strh	r2, [r4, #6]
 8014848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801484a:	4798      	blx	r3
 801484c:	4620      	mov	r0, r4
 801484e:	bd10      	pop	{r4, pc}

08014850 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8014850:	4770      	bx	lr

08014852 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8014852:	b510      	push	{r4, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	211c      	movs	r1, #28
 8014858:	f00d f9cb 	bl	8021bf2 <_ZdlPvj>
 801485c:	4620      	mov	r0, r4
 801485e:	bd10      	pop	{r4, pc}

08014860 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8014860:	4a04      	ldr	r2, [pc, #16]	@ (8014874 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8014862:	6002      	str	r2, [r0, #0]
 8014864:	2200      	movs	r2, #0
 8014866:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801486a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801486e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014872:	4770      	bx	lr
 8014874:	08026624 	.word	0x08026624

08014878 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8014878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	4604      	mov	r4, r0
 801487e:	b087      	sub	sp, #28
 8014880:	8b45      	ldrh	r5, [r0, #26]
 8014882:	f8b2 c000 	ldrh.w	ip, [r2]
 8014886:	9105      	str	r1, [sp, #20]
 8014888:	1c68      	adds	r0, r5, #1
 801488a:	68e1      	ldr	r1, [r4, #12]
 801488c:	9203      	str	r2, [sp, #12]
 801488e:	b280      	uxth	r0, r0
 8014890:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014894:	f01c 0501 	ands.w	r5, ip, #1
 8014898:	f9b3 2000 	ldrsh.w	r2, [r3]
 801489c:	9502      	str	r5, [sp, #8]
 801489e:	d07d      	beq.n	801499c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 80148a0:	ee07 2a90 	vmov	s15, r2
 80148a4:	8360      	strh	r0, [r4, #26]
 80148a6:	f04f 0e00 	mov.w	lr, #0
 80148aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80148ae:	ee06 ea10 	vmov	s12, lr
 80148b2:	edc1 6a00 	vstr	s13, [r1]
 80148b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80148ba:	8b61      	ldrh	r1, [r4, #26]
 80148bc:	ee07 2a10 	vmov	s14, r2
 80148c0:	68e2      	ldr	r2, [r4, #12]
 80148c2:	1c48      	adds	r0, r1, #1
 80148c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80148c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80148cc:	8360      	strh	r0, [r4, #26]
 80148ce:	ed82 7a00 	vstr	s14, [r2]
 80148d2:	8b21      	ldrh	r1, [r4, #24]
 80148d4:	2501      	movs	r5, #1
 80148d6:	68a2      	ldr	r2, [r4, #8]
 80148d8:	3304      	adds	r3, #4
 80148da:	1c48      	adds	r0, r1, #1
 80148dc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	46aa      	mov	sl, r5
 80148e4:	8320      	strh	r0, [r4, #24]
 80148e6:	462e      	mov	r6, r5
 80148e8:	5455      	strb	r5, [r2, r1]
 80148ea:	2200      	movs	r2, #0
 80148ec:	ee07 2a90 	vmov	s15, r2
 80148f0:	4613      	mov	r3, r2
 80148f2:	4611      	mov	r1, r2
 80148f4:	9201      	str	r2, [sp, #4]
 80148f6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80148fa:	9805      	ldr	r0, [sp, #20]
 80148fc:	f108 0701 	add.w	r7, r8, #1
 8014900:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8014904:	42a8      	cmp	r0, r5
 8014906:	b2bf      	uxth	r7, r7
 8014908:	eb0b 0908 	add.w	r9, fp, r8
 801490c:	f340 80db 	ble.w	8014ac6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8014910:	fa4c f906 	asr.w	r9, ip, r6
 8014914:	f009 0901 	and.w	r9, r9, #1
 8014918:	fa5f f389 	uxtb.w	r3, r9
 801491c:	9304      	str	r3, [sp, #16]
 801491e:	9b00      	ldr	r3, [sp, #0]
 8014920:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014924:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014928:	f1b9 0f00 	cmp.w	r9, #0
 801492c:	d07d      	beq.n	8014a2a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 801492e:	ee05 1a10 	vmov	s10, r1
 8014932:	8327      	strh	r7, [r4, #24]
 8014934:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8014938:	ee05 3a10 	vmov	s10, r3
 801493c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014940:	f1ba 0f00 	cmp.w	sl, #0
 8014944:	d050      	beq.n	80149e8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8014946:	f04f 0002 	mov.w	r0, #2
 801494a:	f80b 0008 	strb.w	r0, [fp, r8]
 801494e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014952:	68e7      	ldr	r7, [r4, #12]
 8014954:	f108 0901 	add.w	r9, r8, #1
 8014958:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801495c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014960:	edc7 4a00 	vstr	s9, [r7]
 8014964:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014968:	68e7      	ldr	r7, [r4, #12]
 801496a:	f108 0901 	add.w	r9, r8, #1
 801496e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014972:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014976:	ed87 5a00 	vstr	s10, [r7]
 801497a:	3601      	adds	r6, #1
 801497c:	2e10      	cmp	r6, #16
 801497e:	d106      	bne.n	801498e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8014980:	9e01      	ldr	r6, [sp, #4]
 8014982:	9803      	ldr	r0, [sp, #12]
 8014984:	3601      	adds	r6, #1
 8014986:	9601      	str	r6, [sp, #4]
 8014988:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 801498c:	2600      	movs	r6, #0
 801498e:	9800      	ldr	r0, [sp, #0]
 8014990:	3501      	adds	r5, #1
 8014992:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014996:	3004      	adds	r0, #4
 8014998:	9000      	str	r0, [sp, #0]
 801499a:	e7ac      	b.n	80148f6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 801499c:	ee06 2a10 	vmov	s12, r2
 80149a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80149a4:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80149a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80149ac:	ee16 5a10 	vmov	r5, s12
 80149b0:	442a      	add	r2, r5
 80149b2:	ee06 2a90 	vmov	s13, r2
 80149b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80149ba:	8360      	strh	r0, [r4, #26]
 80149bc:	4472      	add	r2, lr
 80149be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80149c2:	ee07 2a10 	vmov	s14, r2
 80149c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80149ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149ce:	edc1 6a00 	vstr	s13, [r1]
 80149d2:	8b61      	ldrh	r1, [r4, #26]
 80149d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80149d8:	68e2      	ldr	r2, [r4, #12]
 80149da:	1c48      	adds	r0, r1, #1
 80149dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80149e0:	8360      	strh	r0, [r4, #26]
 80149e2:	ed82 7a00 	vstr	s14, [r2]
 80149e6:	e774      	b.n	80148d2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 80149e8:	f04f 0005 	mov.w	r0, #5
 80149ec:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 80149f0:	f80b 0008 	strb.w	r0, [fp, r8]
 80149f4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80149f8:	68e7      	ldr	r7, [r4, #12]
 80149fa:	f108 0901 	add.w	r9, r8, #1
 80149fe:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014a02:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014a06:	ed87 4a00 	vstr	s8, [r7]
 8014a0a:	ee04 2a10 	vmov	s8, r2
 8014a0e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014a12:	68e7      	ldr	r7, [r4, #12]
 8014a14:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014a18:	f108 0901 	add.w	r9, r8, #1
 8014a1c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014a20:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014a24:	ed87 4a00 	vstr	s8, [r7]
 8014a28:	e791      	b.n	801494e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8014a2a:	f1ba 0f00 	cmp.w	sl, #0
 8014a2e:	d146      	bne.n	8014abe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8014a30:	f04f 0005 	mov.w	r0, #5
 8014a34:	8327      	strh	r7, [r4, #24]
 8014a36:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014a3a:	f80b 0008 	strb.w	r0, [fp, r8]
 8014a3e:	ee17 0a90 	vmov	r0, s15
 8014a42:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014a46:	68e7      	ldr	r7, [r4, #12]
 8014a48:	4408      	add	r0, r1
 8014a4a:	f108 0901 	add.w	r9, r8, #1
 8014a4e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014a52:	ee07 0a90 	vmov	s15, r0
 8014a56:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014a5a:	ed87 5a00 	vstr	s10, [r7]
 8014a5e:	ee05 2a10 	vmov	s10, r2
 8014a62:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a6a:	68e7      	ldr	r7, [r4, #12]
 8014a6c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014a70:	f108 0901 	add.w	r9, r8, #1
 8014a74:	441a      	add	r2, r3
 8014a76:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014a7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014a7e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014a82:	ed87 5a00 	vstr	s10, [r7]
 8014a86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014a8a:	68e7      	ldr	r7, [r4, #12]
 8014a8c:	f108 0901 	add.w	r9, r8, #1
 8014a90:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014a94:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014a98:	edc7 7a00 	vstr	s15, [r7]
 8014a9c:	ee07 2a90 	vmov	s15, r2
 8014aa0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014aa8:	68e7      	ldr	r7, [r4, #12]
 8014aaa:	f108 0901 	add.w	r9, r8, #1
 8014aae:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014ab2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014ab6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014aba:	edc7 7a00 	vstr	s15, [r7]
 8014abe:	461a      	mov	r2, r3
 8014ac0:	ee07 1a90 	vmov	s15, r1
 8014ac4:	e759      	b.n	801497a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8014ac6:	f1ba 0f00 	cmp.w	sl, #0
 8014aca:	d045      	beq.n	8014b58 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8014acc:	ee05 1a90 	vmov	s11, r1
 8014ad0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014ad4:	eef4 5a66 	vcmp.f32	s11, s13
 8014ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014adc:	d108      	bne.n	8014af0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8014ade:	ee05 3a90 	vmov	s11, r3
 8014ae2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014ae6:	eef4 5a47 	vcmp.f32	s11, s14
 8014aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aee:	d033      	beq.n	8014b58 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8014af0:	9b02      	ldr	r3, [sp, #8]
 8014af2:	8327      	strh	r7, [r4, #24]
 8014af4:	b1b3      	cbz	r3, 8014b24 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 8014af6:	2302      	movs	r3, #2
 8014af8:	f889 3000 	strb.w	r3, [r9]
 8014afc:	8b62      	ldrh	r2, [r4, #26]
 8014afe:	68e3      	ldr	r3, [r4, #12]
 8014b00:	1c51      	adds	r1, r2, #1
 8014b02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b06:	8361      	strh	r1, [r4, #26]
 8014b08:	edc3 6a00 	vstr	s13, [r3]
 8014b0c:	8b62      	ldrh	r2, [r4, #26]
 8014b0e:	68e3      	ldr	r3, [r4, #12]
 8014b10:	1c51      	adds	r1, r2, #1
 8014b12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b16:	8361      	strh	r1, [r4, #26]
 8014b18:	ed83 7a00 	vstr	s14, [r3]
 8014b1c:	9800      	ldr	r0, [sp, #0]
 8014b1e:	b007      	add	sp, #28
 8014b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b24:	2305      	movs	r3, #5
 8014b26:	f889 3000 	strb.w	r3, [r9]
 8014b2a:	8b62      	ldrh	r2, [r4, #26]
 8014b2c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014b30:	68e3      	ldr	r3, [r4, #12]
 8014b32:	ee07 ea90 	vmov	s15, lr
 8014b36:	1c51      	adds	r1, r2, #1
 8014b38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b40:	8361      	strh	r1, [r4, #26]
 8014b42:	ed83 6a00 	vstr	s12, [r3]
 8014b46:	8b62      	ldrh	r2, [r4, #26]
 8014b48:	68e3      	ldr	r3, [r4, #12]
 8014b4a:	1c51      	adds	r1, r2, #1
 8014b4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b50:	8361      	strh	r1, [r4, #26]
 8014b52:	edc3 7a00 	vstr	s15, [r3]
 8014b56:	e7d1      	b.n	8014afc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8014b58:	ee05 2a90 	vmov	s11, r2
 8014b5c:	2305      	movs	r3, #5
 8014b5e:	9902      	ldr	r1, [sp, #8]
 8014b60:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014b64:	8327      	strh	r7, [r4, #24]
 8014b66:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014b6a:	f889 3000 	strb.w	r3, [r9]
 8014b6e:	b181      	cbz	r1, 8014b92 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8014b70:	8b62      	ldrh	r2, [r4, #26]
 8014b72:	68e3      	ldr	r3, [r4, #12]
 8014b74:	1c51      	adds	r1, r2, #1
 8014b76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b7a:	8361      	strh	r1, [r4, #26]
 8014b7c:	ed83 5a00 	vstr	s10, [r3]
 8014b80:	8b62      	ldrh	r2, [r4, #26]
 8014b82:	68e3      	ldr	r3, [r4, #12]
 8014b84:	1c51      	adds	r1, r2, #1
 8014b86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b8a:	8361      	strh	r1, [r4, #26]
 8014b8c:	edc3 5a00 	vstr	s11, [r3]
 8014b90:	e7b4      	b.n	8014afc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8014b92:	8b65      	ldrh	r5, [r4, #26]
 8014b94:	ee17 0a90 	vmov	r0, s15
 8014b98:	68e1      	ldr	r1, [r4, #12]
 8014b9a:	4472      	add	r2, lr
 8014b9c:	1c6e      	adds	r6, r5, #1
 8014b9e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014ba2:	8366      	strh	r6, [r4, #26]
 8014ba4:	ed81 5a00 	vstr	s10, [r1]
 8014ba8:	8b65      	ldrh	r5, [r4, #26]
 8014baa:	68e1      	ldr	r1, [r4, #12]
 8014bac:	1c6e      	adds	r6, r5, #1
 8014bae:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014bb2:	8366      	strh	r6, [r4, #26]
 8014bb4:	edc1 5a00 	vstr	s11, [r1]
 8014bb8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8014bbc:	8b65      	ldrh	r5, [r4, #26]
 8014bbe:	68e1      	ldr	r1, [r4, #12]
 8014bc0:	1c6e      	adds	r6, r5, #1
 8014bc2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014bc6:	ee16 5a10 	vmov	r5, s12
 8014bca:	8366      	strh	r6, [r4, #26]
 8014bcc:	4428      	add	r0, r5
 8014bce:	ee07 0a90 	vmov	s15, r0
 8014bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014bda:	edc1 7a00 	vstr	s15, [r1]
 8014bde:	ee07 2a90 	vmov	s15, r2
 8014be2:	8b61      	ldrh	r1, [r4, #26]
 8014be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014be8:	68e5      	ldr	r5, [r4, #12]
 8014bea:	1c4e      	adds	r6, r1, #1
 8014bec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8014bf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014bf4:	8366      	strh	r6, [r4, #26]
 8014bf6:	edc1 7a00 	vstr	s15, [r1]
 8014bfa:	8b22      	ldrh	r2, [r4, #24]
 8014bfc:	68a1      	ldr	r1, [r4, #8]
 8014bfe:	1c55      	adds	r5, r2, #1
 8014c00:	8325      	strh	r5, [r4, #24]
 8014c02:	548b      	strb	r3, [r1, r2]
 8014c04:	e791      	b.n	8014b2a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

08014c08 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8014c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c0c:	4604      	mov	r4, r0
 8014c0e:	b08e      	sub	sp, #56	@ 0x38
 8014c10:	4699      	mov	r9, r3
 8014c12:	4688      	mov	r8, r1
 8014c14:	4615      	mov	r5, r2
 8014c16:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8014c18:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8014c1c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014c1e:	f7ee fda7 	bl	8003770 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8014c22:	6060      	str	r0, [r4, #4]
 8014c24:	f1b9 0f00 	cmp.w	r9, #0
 8014c28:	f000 80e8 	beq.w	8014dfc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	f000 80e5 	beq.w	8014dfc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014c32:	a805      	add	r0, sp, #20
 8014c34:	f000 f8f9 	bl	8014e2a <_ZN8touchgfx9Matrix3x3C1Ev>
 8014c38:	6833      	ldr	r3, [r6, #0]
 8014c3a:	4630      	mov	r0, r6
 8014c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c3e:	4798      	blx	r3
 8014c40:	a805      	add	r0, sp, #20
 8014c42:	eef0 0a40 	vmov.f32	s1, s0
 8014c46:	f000 f8f4 	bl	8014e32 <_ZN8touchgfx9Matrix3x35scaleEff>
 8014c4a:	6860      	ldr	r0, [r4, #4]
 8014c4c:	f1ba 0f03 	cmp.w	sl, #3
 8014c50:	d83b      	bhi.n	8014cca <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8014c52:	e8df f00a 	tbb	[pc, sl]
 8014c56:	1002      	.short	0x1002
 8014c58:	9f71      	.short	0x9f71
 8014c5a:	6803      	ldr	r3, [r0, #0]
 8014c5c:	462a      	mov	r2, r5
 8014c5e:	4641      	mov	r1, r8
 8014c60:	689b      	ldr	r3, [r3, #8]
 8014c62:	4798      	blx	r3
 8014c64:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014c68:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014c6c:	ee07 7a90 	vmov	s15, r7
 8014c70:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8014c74:	e026      	b.n	8014cc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8014c76:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014c7a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014c7e:	8869      	ldrh	r1, [r5, #2]
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014c86:	aa03      	add	r2, sp, #12
 8014c88:	1a5b      	subs	r3, r3, r1
 8014c8a:	4641      	mov	r1, r8
 8014c8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014c90:	882b      	ldrh	r3, [r5, #0]
 8014c92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014c96:	88ab      	ldrh	r3, [r5, #4]
 8014c98:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014c9c:	6803      	ldr	r3, [r0, #0]
 8014c9e:	689b      	ldr	r3, [r3, #8]
 8014ca0:	4798      	blx	r3
 8014ca2:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8014e04 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8014ca6:	a805      	add	r0, sp, #20
 8014ca8:	f000 f8e8 	bl	8014e7c <_ZN8touchgfx9Matrix3x36rotateEf>
 8014cac:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014cb0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014cb2:	ee07 7a90 	vmov	s15, r7
 8014cb6:	1a9b      	subs	r3, r3, r2
 8014cb8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014cbc:	ee00 3a10 	vmov	s0, r3
 8014cc0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014cc4:	a805      	add	r0, sp, #20
 8014cc6:	f000 f927 	bl	8014f18 <_ZN8touchgfx9Matrix3x39translateEff>
 8014cca:	6860      	ldr	r0, [r4, #4]
 8014ccc:	a905      	add	r1, sp, #20
 8014cce:	2500      	movs	r5, #0
 8014cd0:	f109 0602 	add.w	r6, r9, #2
 8014cd4:	6803      	ldr	r3, [r0, #0]
 8014cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cd8:	4798      	blx	r3
 8014cda:	6860      	ldr	r0, [r4, #4]
 8014cdc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014cde:	6803      	ldr	r3, [r0, #0]
 8014ce0:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8014ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ce6:	4798      	blx	r3
 8014ce8:	6860      	ldr	r0, [r4, #4]
 8014cea:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8014cee:	6803      	ldr	r3, [r0, #0]
 8014cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cf2:	4798      	blx	r3
 8014cf4:	6860      	ldr	r0, [r4, #4]
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	6803      	ldr	r3, [r0, #0]
 8014cfa:	68db      	ldr	r3, [r3, #12]
 8014cfc:	4798      	blx	r3
 8014cfe:	f8b9 7000 	ldrh.w	r7, [r9]
 8014d02:	f104 0310 	add.w	r3, r4, #16
 8014d06:	61a5      	str	r5, [r4, #24]
 8014d08:	f104 0208 	add.w	r2, r4, #8
 8014d0c:	f104 0114 	add.w	r1, r4, #20
 8014d10:	f104 000c 	add.w	r0, r4, #12
 8014d14:	f7ef fd00 	bl	8004718 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8014d18:	42af      	cmp	r7, r5
 8014d1a:	dd60      	ble.n	8014dde <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8014d1c:	8831      	ldrh	r1, [r6, #0]
 8014d1e:	1cb2      	adds	r2, r6, #2
 8014d20:	4620      	mov	r0, r4
 8014d22:	3501      	adds	r5, #1
 8014d24:	f101 030f 	add.w	r3, r1, #15
 8014d28:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8014d2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014d30:	f7ff fda2 	bl	8014878 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8014d34:	4606      	mov	r6, r0
 8014d36:	e7ef      	b.n	8014d18 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8014d38:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014d3c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014d40:	8829      	ldrh	r1, [r5, #0]
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014d48:	aa03      	add	r2, sp, #12
 8014d4a:	1a5b      	subs	r3, r3, r1
 8014d4c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014d50:	886d      	ldrh	r5, [r5, #2]
 8014d52:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014d56:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014d5a:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014d5e:	1a5b      	subs	r3, r3, r1
 8014d60:	4641      	mov	r1, r8
 8014d62:	1b5b      	subs	r3, r3, r5
 8014d64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014d68:	6803      	ldr	r3, [r0, #0]
 8014d6a:	689b      	ldr	r3, [r3, #8]
 8014d6c:	4798      	blx	r3
 8014d6e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8014e08 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8014d72:	a805      	add	r0, sp, #20
 8014d74:	f000 f882 	bl	8014e7c <_ZN8touchgfx9Matrix3x36rotateEf>
 8014d78:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014d7c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014d7e:	1a9b      	subs	r3, r3, r2
 8014d80:	ee00 3a90 	vmov	s1, r3
 8014d84:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014d88:	1bdb      	subs	r3, r3, r7
 8014d8a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014d8e:	ee00 3a10 	vmov	s0, r3
 8014d92:	e795      	b.n	8014cc0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8014d94:	886b      	ldrh	r3, [r5, #2]
 8014d96:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014d9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014d9e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014da2:	8829      	ldrh	r1, [r5, #0]
 8014da4:	1a9b      	subs	r3, r3, r2
 8014da6:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014daa:	aa03      	add	r2, sp, #12
 8014dac:	1a5b      	subs	r3, r3, r1
 8014dae:	4641      	mov	r1, r8
 8014db0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014db4:	88eb      	ldrh	r3, [r5, #6]
 8014db6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014dba:	6803      	ldr	r3, [r0, #0]
 8014dbc:	689b      	ldr	r3, [r3, #8]
 8014dbe:	4798      	blx	r3
 8014dc0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8014e0c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8014dc4:	a805      	add	r0, sp, #20
 8014dc6:	f000 f859 	bl	8014e7c <_ZN8touchgfx9Matrix3x36rotateEf>
 8014dca:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014dce:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014dd2:	1bdb      	subs	r3, r3, r7
 8014dd4:	ee00 3a90 	vmov	s1, r3
 8014dd8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014ddc:	e748      	b.n	8014c70 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8014dde:	6860      	ldr	r0, [r4, #4]
 8014de0:	2100      	movs	r1, #0
 8014de2:	8b22      	ldrh	r2, [r4, #24]
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	9101      	str	r1, [sp, #4]
 8014de8:	8b61      	ldrh	r1, [r4, #26]
 8014dea:	9100      	str	r1, [sp, #0]
 8014dec:	6a1d      	ldr	r5, [r3, #32]
 8014dee:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8014df2:	47a8      	blx	r5
 8014df4:	6860      	ldr	r0, [r4, #4]
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	69db      	ldr	r3, [r3, #28]
 8014dfa:	4798      	blx	r3
 8014dfc:	b00e      	add	sp, #56	@ 0x38
 8014dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e02:	bf00      	nop
 8014e04:	42b40000 	.word	0x42b40000
 8014e08:	43340000 	.word	0x43340000
 8014e0c:	43870000 	.word	0x43870000

08014e10 <_ZN8touchgfx9Matrix3x35resetEv>:
 8014e10:	2300      	movs	r3, #0
 8014e12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8014e16:	6043      	str	r3, [r0, #4]
 8014e18:	6002      	str	r2, [r0, #0]
 8014e1a:	6083      	str	r3, [r0, #8]
 8014e1c:	60c3      	str	r3, [r0, #12]
 8014e1e:	6102      	str	r2, [r0, #16]
 8014e20:	6143      	str	r3, [r0, #20]
 8014e22:	6183      	str	r3, [r0, #24]
 8014e24:	61c3      	str	r3, [r0, #28]
 8014e26:	6202      	str	r2, [r0, #32]
 8014e28:	4770      	bx	lr

08014e2a <_ZN8touchgfx9Matrix3x3C1Ev>:
 8014e2a:	b508      	push	{r3, lr}
 8014e2c:	f7ff fff0 	bl	8014e10 <_ZN8touchgfx9Matrix3x35resetEv>
 8014e30:	bd08      	pop	{r3, pc}

08014e32 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8014e32:	edd0 7a00 	vldr	s15, [r0]
 8014e36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014e3a:	edc0 7a00 	vstr	s15, [r0]
 8014e3e:	edd0 7a01 	vldr	s15, [r0, #4]
 8014e42:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014e46:	edc0 7a01 	vstr	s15, [r0, #4]
 8014e4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8014e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014e52:	edd0 7a03 	vldr	s15, [r0, #12]
 8014e56:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014e5a:	ed80 0a02 	vstr	s0, [r0, #8]
 8014e5e:	edc0 7a03 	vstr	s15, [r0, #12]
 8014e62:	edd0 7a04 	vldr	s15, [r0, #16]
 8014e66:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014e6a:	edc0 7a04 	vstr	s15, [r0, #16]
 8014e6e:	edd0 7a05 	vldr	s15, [r0, #20]
 8014e72:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014e76:	edc0 0a05 	vstr	s1, [r0, #20]
 8014e7a:	4770      	bx	lr

08014e7c <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014e7c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8014f10 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8014e80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e84:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8014f14 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014e88:	b510      	push	{r4, lr}
 8014e8a:	ed2d 8b02 	vpush	{d8}
 8014e8e:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8014e92:	4604      	mov	r4, r0
 8014e94:	eeb0 0a68 	vmov.f32	s0, s17
 8014e98:	f00c ffe2 	bl	8021e60 <cosf>
 8014e9c:	eeb0 8a40 	vmov.f32	s16, s0
 8014ea0:	eeb0 0a68 	vmov.f32	s0, s17
 8014ea4:	f00c ff18 	bl	8021cd8 <sinf>
 8014ea8:	edd4 6a03 	vldr	s13, [r4, #12]
 8014eac:	edd4 4a00 	vldr	s9, [r4]
 8014eb0:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8014eb4:	ed94 7a04 	vldr	s14, [r4, #16]
 8014eb8:	ed94 5a01 	vldr	s10, [r4, #4]
 8014ebc:	ee66 6a88 	vmul.f32	s13, s13, s16
 8014ec0:	edd4 5a02 	vldr	s11, [r4, #8]
 8014ec4:	eee8 7a24 	vfma.f32	s15, s16, s9
 8014ec8:	eee0 6a24 	vfma.f32	s13, s0, s9
 8014ecc:	edc4 7a00 	vstr	s15, [r4]
 8014ed0:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8014ed4:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014ed8:	edc4 6a03 	vstr	s13, [r4, #12]
 8014edc:	eee8 7a05 	vfma.f32	s15, s16, s10
 8014ee0:	eea0 7a05 	vfma.f32	s14, s0, s10
 8014ee4:	edc4 7a01 	vstr	s15, [r4, #4]
 8014ee8:	edd4 7a05 	vldr	s15, [r4, #20]
 8014eec:	ed84 7a04 	vstr	s14, [r4, #16]
 8014ef0:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8014ef4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014ef8:	eea8 6a25 	vfma.f32	s12, s16, s11
 8014efc:	eee0 7a25 	vfma.f32	s15, s0, s11
 8014f00:	ecbd 8b02 	vpop	{d8}
 8014f04:	ed84 6a02 	vstr	s12, [r4, #8]
 8014f08:	edc4 7a05 	vstr	s15, [r4, #20]
 8014f0c:	bd10      	pop	{r4, pc}
 8014f0e:	bf00      	nop
 8014f10:	40490fdb 	.word	0x40490fdb
 8014f14:	43340000 	.word	0x43340000

08014f18 <_ZN8touchgfx9Matrix3x39translateEff>:
 8014f18:	ed90 6a06 	vldr	s12, [r0, #24]
 8014f1c:	edd0 7a00 	vldr	s15, [r0]
 8014f20:	edd0 6a07 	vldr	s13, [r0, #28]
 8014f24:	eee6 7a00 	vfma.f32	s15, s12, s0
 8014f28:	ed90 7a08 	vldr	s14, [r0, #32]
 8014f2c:	edc0 7a00 	vstr	s15, [r0]
 8014f30:	edd0 7a01 	vldr	s15, [r0, #4]
 8014f34:	eee6 7a80 	vfma.f32	s15, s13, s0
 8014f38:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f3c:	edd0 7a02 	vldr	s15, [r0, #8]
 8014f40:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014f44:	edc0 7a02 	vstr	s15, [r0, #8]
 8014f48:	edd0 7a03 	vldr	s15, [r0, #12]
 8014f4c:	eee6 7a20 	vfma.f32	s15, s12, s1
 8014f50:	edc0 7a03 	vstr	s15, [r0, #12]
 8014f54:	edd0 7a04 	vldr	s15, [r0, #16]
 8014f58:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8014f5c:	edc0 7a04 	vstr	s15, [r0, #16]
 8014f60:	edd0 7a05 	vldr	s15, [r0, #20]
 8014f64:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014f68:	edc0 7a05 	vstr	s15, [r0, #20]
 8014f6c:	4770      	bx	lr

08014f6e <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8014f6e:	edd0 6a01 	vldr	s13, [r0, #4]
 8014f72:	b084      	sub	sp, #16
 8014f74:	edd0 7a04 	vldr	s15, [r0, #16]
 8014f78:	ed90 7a03 	vldr	s14, [r0, #12]
 8014f7c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8014f80:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8014f84:	edd0 6a00 	vldr	s13, [r0]
 8014f88:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014f8c:	ed90 7a05 	vldr	s14, [r0, #20]
 8014f90:	eee6 0a80 	vfma.f32	s1, s13, s0
 8014f94:	ed90 0a02 	vldr	s0, [r0, #8]
 8014f98:	ee30 0a80 	vadd.f32	s0, s1, s0
 8014f9c:	ee77 0a87 	vadd.f32	s1, s15, s14
 8014fa0:	b004      	add	sp, #16
 8014fa2:	4770      	bx	lr

08014fa4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014fa4:	b530      	push	{r4, r5, lr}
 8014fa6:	8083      	strh	r3, [r0, #4]
 8014fa8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014fac:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014fb0:	80c3      	strh	r3, [r0, #6]
 8014fb2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014fb6:	6141      	str	r1, [r0, #20]
 8014fb8:	7203      	strb	r3, [r0, #8]
 8014fba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014fbe:	8302      	strh	r2, [r0, #24]
 8014fc0:	7243      	strb	r3, [r0, #9]
 8014fc2:	7a83      	ldrb	r3, [r0, #10]
 8014fc4:	f365 0306 	bfi	r3, r5, #0, #7
 8014fc8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014fcc:	f365 13c7 	bfi	r3, r5, #7, #1
 8014fd0:	7283      	strb	r3, [r0, #10]
 8014fd2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014fd6:	72c3      	strb	r3, [r0, #11]
 8014fd8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014fdc:	7303      	strb	r3, [r0, #12]
 8014fde:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8014fe2:	81c3      	strh	r3, [r0, #14]
 8014fe4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014fe8:	8203      	strh	r3, [r0, #16]
 8014fea:	4b01      	ldr	r3, [pc, #4]	@ (8014ff0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8014fec:	6003      	str	r3, [r0, #0]
 8014fee:	bd30      	pop	{r4, r5, pc}
 8014ff0:	08026638 	.word	0x08026638

08014ff4 <_ZNK8touchgfx9ConstFont4findEt>:
 8014ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ff6:	6944      	ldr	r4, [r0, #20]
 8014ff8:	b3bc      	cbz	r4, 801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014ffa:	88a3      	ldrh	r3, [r4, #4]
 8014ffc:	8b02      	ldrh	r2, [r0, #24]
 8014ffe:	1acb      	subs	r3, r1, r3
 8015000:	f102 32ff 	add.w	r2, r2, #4294967295
 8015004:	d431      	bmi.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015006:	4293      	cmp	r3, r2
 8015008:	dd0c      	ble.n	8015024 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801500a:	230e      	movs	r3, #14
 801500c:	fb03 4302 	mla	r3, r3, r2, r4
 8015010:	889b      	ldrh	r3, [r3, #4]
 8015012:	1a5b      	subs	r3, r3, r1
 8015014:	1ad3      	subs	r3, r2, r3
 8015016:	429a      	cmp	r2, r3
 8015018:	db27      	blt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801501a:	2b00      	cmp	r3, #0
 801501c:	bfbc      	itt	lt
 801501e:	2302      	movlt	r3, #2
 8015020:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015024:	2500      	movs	r5, #0
 8015026:	260e      	movs	r6, #14
 8015028:	4295      	cmp	r5, r2
 801502a:	dc1e      	bgt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801502c:	fb06 4003 	mla	r0, r6, r3, r4
 8015030:	8887      	ldrh	r7, [r0, #4]
 8015032:	42b9      	cmp	r1, r7
 8015034:	d01a      	beq.n	801506c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015036:	d20d      	bcs.n	8015054 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015038:	1e5a      	subs	r2, r3, #1
 801503a:	4295      	cmp	r5, r2
 801503c:	dc15      	bgt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801503e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015042:	1a5b      	subs	r3, r3, r1
 8015044:	1ad3      	subs	r3, r2, r3
 8015046:	429a      	cmp	r2, r3
 8015048:	db0f      	blt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801504a:	429d      	cmp	r5, r3
 801504c:	ddec      	ble.n	8015028 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801504e:	1953      	adds	r3, r2, r5
 8015050:	105b      	asrs	r3, r3, #1
 8015052:	e7e9      	b.n	8015028 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015054:	1c5d      	adds	r5, r3, #1
 8015056:	42aa      	cmp	r2, r5
 8015058:	db07      	blt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801505a:	8a43      	ldrh	r3, [r0, #18]
 801505c:	1acb      	subs	r3, r1, r3
 801505e:	442b      	add	r3, r5
 8015060:	429d      	cmp	r5, r3
 8015062:	dc02      	bgt.n	801506a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015064:	429a      	cmp	r2, r3
 8015066:	dadf      	bge.n	8015028 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015068:	e7f1      	b.n	801504e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801506a:	2000      	movs	r0, #0
 801506c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801506e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801506e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015070:	4604      	mov	r4, r0
 8015072:	4617      	mov	r7, r2
 8015074:	461e      	mov	r6, r3
 8015076:	b911      	cbnz	r1, 801507e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015078:	2500      	movs	r5, #0
 801507a:	4628      	mov	r0, r5
 801507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801507e:	290a      	cmp	r1, #10
 8015080:	d0fa      	beq.n	8015078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015082:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015086:	4291      	cmp	r1, r2
 8015088:	d0f6      	beq.n	8015078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801508a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801508e:	4291      	cmp	r1, r2
 8015090:	d0f2      	beq.n	8015078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015092:	f7ff ffaf 	bl	8014ff4 <_ZNK8touchgfx9ConstFont4findEt>
 8015096:	4605      	mov	r5, r0
 8015098:	b950      	cbnz	r0, 80150b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	4620      	mov	r0, r4
 801509e:	691b      	ldr	r3, [r3, #16]
 80150a0:	4798      	blx	r3
 80150a2:	4601      	mov	r1, r0
 80150a4:	4620      	mov	r0, r4
 80150a6:	f7ff ffa5 	bl	8014ff4 <_ZNK8touchgfx9ConstFont4findEt>
 80150aa:	4605      	mov	r5, r0
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d0e3      	beq.n	8015078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80150b0:	6823      	ldr	r3, [r4, #0]
 80150b2:	4629      	mov	r1, r5
 80150b4:	4620      	mov	r0, r4
 80150b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80150b8:	4798      	blx	r3
 80150ba:	6038      	str	r0, [r7, #0]
 80150bc:	6823      	ldr	r3, [r4, #0]
 80150be:	4620      	mov	r0, r4
 80150c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150c2:	4798      	blx	r3
 80150c4:	7030      	strb	r0, [r6, #0]
 80150c6:	e7d8      	b.n	801507a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080150c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80150c8:	b538      	push	{r3, r4, r5, lr}
 80150ca:	4605      	mov	r5, r0
 80150cc:	f002 f90c 	bl	80172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80150d0:	4604      	mov	r4, r0
 80150d2:	4628      	mov	r0, r5
 80150d4:	f002 f84c 	bl	8017170 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80150d8:	2800      	cmp	r0, #0
 80150da:	bf14      	ite	ne
 80150dc:	2002      	movne	r0, #2
 80150de:	2000      	moveq	r0, #0
 80150e0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80150e4:	b280      	uxth	r0, r0
 80150e6:	bd38      	pop	{r3, r4, r5, pc}

080150e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4605      	mov	r5, r0
 80150ec:	f002 f8fc 	bl	80172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80150f0:	4604      	mov	r4, r0
 80150f2:	4628      	mov	r0, r5
 80150f4:	f002 f83c 	bl	8017170 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	bf14      	ite	ne
 80150fc:	2002      	movne	r0, #2
 80150fe:	2000      	moveq	r0, #0
 8015100:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8015104:	f040 0001 	orr.w	r0, r0, #1
 8015108:	b280      	uxth	r0, r0
 801510a:	bd38      	pop	{r3, r4, r5, pc}

0801510c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801510c:	2000      	movs	r0, #0
 801510e:	4770      	bx	lr

08015110 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015110:	2001      	movs	r0, #1
 8015112:	4770      	bx	lr

08015114 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015114:	2002      	movs	r0, #2
 8015116:	4770      	bx	lr

08015118 <_ZN8touchgfx6ScreenD1Ev>:
 8015118:	4770      	bx	lr

0801511a <_ZN8touchgfx12GestureEventD1Ev>:
 801511a:	4770      	bx	lr

0801511c <_ZN8touchgfx9DragEventD1Ev>:
 801511c:	4770      	bx	lr

0801511e <_ZN8touchgfx10ClickEventD1Ev>:
 801511e:	4770      	bx	lr

08015120 <_ZN8touchgfx10ClickEventD0Ev>:
 8015120:	b510      	push	{r4, lr}
 8015122:	4604      	mov	r4, r0
 8015124:	210c      	movs	r1, #12
 8015126:	f00c fd64 	bl	8021bf2 <_ZdlPvj>
 801512a:	4620      	mov	r0, r4
 801512c:	bd10      	pop	{r4, pc}

0801512e <_ZN8touchgfx9DragEventD0Ev>:
 801512e:	b510      	push	{r4, lr}
 8015130:	4604      	mov	r4, r0
 8015132:	2110      	movs	r1, #16
 8015134:	f00c fd5d 	bl	8021bf2 <_ZdlPvj>
 8015138:	4620      	mov	r0, r4
 801513a:	bd10      	pop	{r4, pc}

0801513c <_ZN8touchgfx12GestureEventD0Ev>:
 801513c:	b510      	push	{r4, lr}
 801513e:	4604      	mov	r4, r0
 8015140:	210c      	movs	r1, #12
 8015142:	f00c fd56 	bl	8021bf2 <_ZdlPvj>
 8015146:	4620      	mov	r0, r4
 8015148:	bd10      	pop	{r4, pc}

0801514a <_ZN8touchgfx6ScreenD0Ev>:
 801514a:	b510      	push	{r4, lr}
 801514c:	4604      	mov	r4, r0
 801514e:	213c      	movs	r1, #60	@ 0x3c
 8015150:	f00c fd4f 	bl	8021bf2 <_ZdlPvj>
 8015154:	4620      	mov	r0, r4
 8015156:	bd10      	pop	{r4, pc}

08015158 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015158:	b530      	push	{r4, r5, lr}
 801515a:	460d      	mov	r5, r1
 801515c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801515e:	b087      	sub	sp, #28
 8015160:	4604      	mov	r4, r0
 8015162:	b301      	cbz	r1, 80151a6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015164:	a801      	add	r0, sp, #4
 8015166:	f7ff fb61 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801516a:	892a      	ldrh	r2, [r5, #8]
 801516c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015170:	7928      	ldrb	r0, [r5, #4]
 8015172:	1ad2      	subs	r2, r2, r3
 8015174:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015176:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801517a:	441a      	add	r2, r3
 801517c:	896b      	ldrh	r3, [r5, #10]
 801517e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015182:	f88d 0010 	strb.w	r0, [sp, #16]
 8015186:	1b5b      	subs	r3, r3, r5
 8015188:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801518a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801518c:	442b      	add	r3, r5
 801518e:	4d07      	ldr	r5, [pc, #28]	@ (80151ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015190:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015194:	a903      	add	r1, sp, #12
 8015196:	9503      	str	r5, [sp, #12]
 8015198:	f8ad 2014 	strh.w	r2, [sp, #20]
 801519c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80151a0:	6803      	ldr	r3, [r0, #0]
 80151a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151a4:	4798      	blx	r3
 80151a6:	b007      	add	sp, #28
 80151a8:	bd30      	pop	{r4, r5, pc}
 80151aa:	bf00      	nop
 80151ac:	080266c8 	.word	0x080266c8

080151b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80151b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80151b6:	b08a      	sub	sp, #40	@ 0x28
 80151b8:	4604      	mov	r4, r0
 80151ba:	460d      	mov	r5, r1
 80151bc:	b113      	cbz	r3, 80151c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80151be:	790b      	ldrb	r3, [r1, #4]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d044      	beq.n	801524e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80151c4:	f104 0804 	add.w	r8, r4, #4
 80151c8:	a803      	add	r0, sp, #12
 80151ca:	4641      	mov	r1, r8
 80151cc:	f7ff fb2e 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80151d0:	792b      	ldrb	r3, [r5, #4]
 80151d2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80151d6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80151da:	b983      	cbnz	r3, 80151fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80151dc:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80151e0:	892a      	ldrh	r2, [r5, #8]
 80151e2:	88e9      	ldrh	r1, [r5, #6]
 80151e4:	4640      	mov	r0, r8
 80151e6:	1b92      	subs	r2, r2, r6
 80151e8:	9301      	str	r3, [sp, #4]
 80151ea:	1bc9      	subs	r1, r1, r7
 80151ec:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80151f0:	b212      	sxth	r2, r2
 80151f2:	9300      	str	r3, [sp, #0]
 80151f4:	b209      	sxth	r1, r1
 80151f6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80151fa:	f7f8 fb73 	bl	800d8e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80151fe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015200:	b329      	cbz	r1, 801524e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015202:	a805      	add	r0, sp, #20
 8015204:	f7ff fb12 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015208:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801520c:	792b      	ldrb	r3, [r5, #4]
 801520e:	a907      	add	r1, sp, #28
 8015210:	1abf      	subs	r7, r7, r2
 8015212:	88ea      	ldrh	r2, [r5, #6]
 8015214:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015216:	4417      	add	r7, r2
 8015218:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801521a:	f88d 3020 	strb.w	r3, [sp, #32]
 801521e:	4417      	add	r7, r2
 8015220:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015224:	1ab6      	subs	r6, r6, r2
 8015226:	892a      	ldrh	r2, [r5, #8]
 8015228:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801522c:	4416      	add	r6, r2
 801522e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015230:	4416      	add	r6, r2
 8015232:	4a08      	ldr	r2, [pc, #32]	@ (8015254 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015234:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8015238:	2600      	movs	r6, #0
 801523a:	9207      	str	r2, [sp, #28]
 801523c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8015240:	6803      	ldr	r3, [r0, #0]
 8015242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015244:	4798      	blx	r3
 8015246:	792b      	ldrb	r3, [r5, #4]
 8015248:	b10b      	cbz	r3, 801524e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801524a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801524e:	b00a      	add	sp, #40	@ 0x28
 8015250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015254:	080266a0 	.word	0x080266a0

08015258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801525c:	460c      	mov	r4, r1
 801525e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015260:	b088      	sub	sp, #32
 8015262:	4605      	mov	r5, r0
 8015264:	2900      	cmp	r1, #0
 8015266:	d06d      	beq.n	8015344 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015268:	4668      	mov	r0, sp
 801526a:	f7ff fadf 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801526e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8015270:	88e3      	ldrh	r3, [r4, #6]
 8015272:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015276:	440b      	add	r3, r1
 8015278:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801527c:	b21b      	sxth	r3, r3
 801527e:	4543      	cmp	r3, r8
 8015280:	db31      	blt.n	80152e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015282:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015286:	44c4      	add	ip, r8
 8015288:	fa0f fc8c 	sxth.w	ip, ip
 801528c:	4563      	cmp	r3, ip
 801528e:	da2a      	bge.n	80152e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015290:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8015292:	8926      	ldrh	r6, [r4, #8]
 8015294:	4416      	add	r6, r2
 8015296:	b236      	sxth	r6, r6
 8015298:	42be      	cmp	r6, r7
 801529a:	db24      	blt.n	80152e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801529c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80152a0:	4438      	add	r0, r7
 80152a2:	b200      	sxth	r0, r0
 80152a4:	4286      	cmp	r6, r0
 80152a6:	da1e      	bge.n	80152e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80152a8:	8963      	ldrh	r3, [r4, #10]
 80152aa:	4419      	add	r1, r3
 80152ac:	b209      	sxth	r1, r1
 80152ae:	4541      	cmp	r1, r8
 80152b0:	db08      	blt.n	80152c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80152b2:	4561      	cmp	r1, ip
 80152b4:	da06      	bge.n	80152c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80152b6:	89a3      	ldrh	r3, [r4, #12]
 80152b8:	441a      	add	r2, r3
 80152ba:	b212      	sxth	r2, r2
 80152bc:	42ba      	cmp	r2, r7
 80152be:	db01      	blt.n	80152c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80152c0:	4282      	cmp	r2, r0
 80152c2:	db10      	blt.n	80152e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80152c4:	4b21      	ldr	r3, [pc, #132]	@ (801534c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80152c6:	a904      	add	r1, sp, #16
 80152c8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80152ca:	9304      	str	r3, [sp, #16]
 80152cc:	2302      	movs	r3, #2
 80152ce:	f88d 3014 	strb.w	r3, [sp, #20]
 80152d2:	2300      	movs	r3, #0
 80152d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80152dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80152e0:	6803      	ldr	r3, [r0, #0]
 80152e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152e4:	4798      	blx	r3
 80152e6:	1d29      	adds	r1, r5, #4
 80152e8:	a802      	add	r0, sp, #8
 80152ea:	f7ff fa9f 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80152f2:	88e0      	ldrh	r0, [r4, #6]
 80152f4:	eba3 0808 	sub.w	r8, r3, r8
 80152f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80152fc:	7921      	ldrb	r1, [r4, #4]
 80152fe:	fa1f f888 	uxth.w	r8, r8
 8015302:	1bdf      	subs	r7, r3, r7
 8015304:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8015308:	b2bb      	uxth	r3, r7
 801530a:	4440      	add	r0, r8
 801530c:	8922      	ldrh	r2, [r4, #8]
 801530e:	8967      	ldrh	r7, [r4, #10]
 8015310:	4460      	add	r0, ip
 8015312:	89a4      	ldrh	r4, [r4, #12]
 8015314:	441a      	add	r2, r3
 8015316:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8015318:	44b8      	add	r8, r7
 801531a:	4423      	add	r3, r4
 801531c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015320:	4432      	add	r2, r6
 8015322:	44e0      	add	r8, ip
 8015324:	4433      	add	r3, r6
 8015326:	4c0a      	ldr	r4, [pc, #40]	@ (8015350 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015328:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801532a:	f88d 1014 	strb.w	r1, [sp, #20]
 801532e:	a904      	add	r1, sp, #16
 8015330:	9404      	str	r4, [sp, #16]
 8015332:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015336:	f8ad 801a 	strh.w	r8, [sp, #26]
 801533a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801533e:	6803      	ldr	r3, [r0, #0]
 8015340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015342:	4798      	blx	r3
 8015344:	b008      	add	sp, #32
 8015346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801534a:	bf00      	nop
 801534c:	080266a0 	.word	0x080266a0
 8015350:	080266b4 	.word	0x080266b4

08015354 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015356:	4604      	mov	r4, r0
 8015358:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801535c:	3201      	adds	r2, #1
 801535e:	d112      	bne.n	8015386 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015360:	2500      	movs	r5, #0
 8015362:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015366:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801536a:	6803      	ldr	r3, [r0, #0]
 801536c:	9500      	str	r5, [sp, #0]
 801536e:	466d      	mov	r5, sp
 8015370:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015374:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015378:	4629      	mov	r1, r5
 801537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801537c:	4798      	blx	r3
 801537e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015382:	e884 0003 	stmia.w	r4, {r0, r1}
 8015386:	4620      	mov	r0, r4
 8015388:	b003      	add	sp, #12
 801538a:	bd30      	pop	{r4, r5, pc}

0801538c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801538c:	b513      	push	{r0, r1, r4, lr}
 801538e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8015392:	4604      	mov	r4, r0
 8015394:	3301      	adds	r3, #1
 8015396:	d109      	bne.n	80153ac <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015398:	4601      	mov	r1, r0
 801539a:	4668      	mov	r0, sp
 801539c:	f7ff fa46 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80153a4:	8423      	strh	r3, [r4, #32]
 80153a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80153aa:	8463      	strh	r3, [r4, #34]	@ 0x22
 80153ac:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80153b0:	b002      	add	sp, #8
 80153b2:	bd10      	pop	{r4, pc}

080153b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80153b4:	b513      	push	{r0, r1, r4, lr}
 80153b6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80153ba:	4604      	mov	r4, r0
 80153bc:	3301      	adds	r3, #1
 80153be:	d109      	bne.n	80153d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80153c0:	4601      	mov	r1, r0
 80153c2:	4668      	mov	r0, sp
 80153c4:	f7ff fa32 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80153cc:	8423      	strh	r3, [r4, #32]
 80153ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80153d2:	8463      	strh	r3, [r4, #34]	@ 0x22
 80153d4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80153d8:	b002      	add	sp, #8
 80153da:	bd10      	pop	{r4, pc}

080153dc <_ZN8touchgfx6ScreenC1Ev>:
 80153dc:	b570      	push	{r4, r5, r6, lr}
 80153de:	4b17      	ldr	r3, [pc, #92]	@ (801543c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80153e0:	4605      	mov	r5, r0
 80153e2:	4a17      	ldr	r2, [pc, #92]	@ (8015440 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80153e4:	2101      	movs	r1, #1
 80153e6:	f845 3b04 	str.w	r3, [r5], #4
 80153ea:	2300      	movs	r3, #0
 80153ec:	6042      	str	r2, [r0, #4]
 80153ee:	4604      	mov	r4, r0
 80153f0:	8103      	strh	r3, [r0, #8]
 80153f2:	8143      	strh	r3, [r0, #10]
 80153f4:	8183      	strh	r3, [r0, #12]
 80153f6:	81c3      	strh	r3, [r0, #14]
 80153f8:	8203      	strh	r3, [r0, #16]
 80153fa:	8243      	strh	r3, [r0, #18]
 80153fc:	8283      	strh	r3, [r0, #20]
 80153fe:	82c3      	strh	r3, [r0, #22]
 8015400:	6203      	str	r3, [r0, #32]
 8015402:	8483      	strh	r3, [r0, #36]	@ 0x24
 8015404:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015406:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801540a:	6343      	str	r3, [r0, #52]	@ 0x34
 801540c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8015410:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015414:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8015418:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801541c:	4b09      	ldr	r3, [pc, #36]	@ (8015444 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801541e:	4628      	mov	r0, r5
 8015420:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015424:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8015426:	4a08      	ldr	r2, [pc, #32]	@ (8015448 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8015428:	f9b2 1000 	ldrsh.w	r1, [r2]
 801542c:	4798      	blx	r3
 801542e:	6863      	ldr	r3, [r4, #4]
 8015430:	4628      	mov	r0, r5
 8015432:	4631      	mov	r1, r6
 8015434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015436:	4798      	blx	r3
 8015438:	4620      	mov	r0, r4
 801543a:	bd70      	pop	{r4, r5, r6, pc}
 801543c:	080266dc 	.word	0x080266dc
 8015440:	08026288 	.word	0x08026288
 8015444:	24025262 	.word	0x24025262
 8015448:	24025260 	.word	0x24025260

0801544c <_ZN8touchgfx6Screen4drawEv>:
 801544c:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801544e:	b507      	push	{r0, r1, r2, lr}
 8015450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015454:	2100      	movs	r1, #0
 8015456:	4b08      	ldr	r3, [pc, #32]	@ (8015478 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015458:	9100      	str	r1, [sp, #0]
 801545a:	4669      	mov	r1, sp
 801545c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015460:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015464:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015468:	6803      	ldr	r3, [r0, #0]
 801546a:	689b      	ldr	r3, [r3, #8]
 801546c:	4798      	blx	r3
 801546e:	b003      	add	sp, #12
 8015470:	f85d fb04 	ldr.w	pc, [sp], #4
 8015474:	24025260 	.word	0x24025260
 8015478:	24025262 	.word	0x24025262

0801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015480:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015484:	b089      	sub	sp, #36	@ 0x24
 8015486:	4680      	mov	r8, r0
 8015488:	460c      	mov	r4, r1
 801548a:	2b00      	cmp	r3, #0
 801548c:	4615      	mov	r5, r2
 801548e:	dd0e      	ble.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015490:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015494:	2b00      	cmp	r3, #0
 8015496:	dd0a      	ble.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015498:	4628      	mov	r0, r5
 801549a:	f7ff ff5b 	bl	8015354 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801549e:	4621      	mov	r1, r4
 80154a0:	f7fd fe91 	bl	80131c6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80154a4:	69eb      	ldr	r3, [r5, #28]
 80154a6:	b928      	cbnz	r0, 80154b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80154a8:	461d      	mov	r5, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d1f4      	bne.n	8015498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80154ae:	b009      	add	sp, #36	@ 0x24
 80154b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b4:	ae04      	add	r6, sp, #16
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	f000 80b5 	beq.w	8015626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80154bc:	682b      	ldr	r3, [r5, #0]
 80154be:	4629      	mov	r1, r5
 80154c0:	a802      	add	r0, sp, #8
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	4798      	blx	r3
 80154c6:	4628      	mov	r0, r5
 80154c8:	f7ff ff60 	bl	801538c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80154cc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80154d0:	4407      	add	r7, r0
 80154d2:	4628      	mov	r0, r5
 80154d4:	f7ff ff6e 	bl	80153b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80154d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80154dc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80154e0:	b23f      	sxth	r7, r7
 80154e2:	4418      	add	r0, r3
 80154e4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80154e8:	4621      	mov	r1, r4
 80154ea:	f8ad 2014 	strh.w	r2, [sp, #20]
 80154ee:	f8ad 0012 	strh.w	r0, [sp, #18]
 80154f2:	4630      	mov	r0, r6
 80154f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80154f8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80154fc:	f7f8 fad4 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 8015500:	4628      	mov	r0, r5
 8015502:	f7ff ff27 	bl	8015354 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015506:	ab06      	add	r3, sp, #24
 8015508:	4602      	mov	r2, r0
 801550a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801550e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015512:	4611      	mov	r1, r2
 8015514:	4618      	mov	r0, r3
 8015516:	f7f8 fac7 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801551a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801551e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015522:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8015526:	4299      	cmp	r1, r3
 8015528:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801552c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015530:	d10b      	bne.n	801554a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015532:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015536:	4552      	cmp	r2, sl
 8015538:	d107      	bne.n	801554a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801553a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801553e:	455a      	cmp	r2, fp
 8015540:	d103      	bne.n	801554a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015542:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015546:	454a      	cmp	r2, r9
 8015548:	d06d      	beq.n	8015626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801554a:	f1bb 0f00 	cmp.w	fp, #0
 801554e:	dd65      	ble.n	801561c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015550:	f1b9 0f00 	cmp.w	r9, #0
 8015554:	dd62      	ble.n	801561c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015556:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801555a:	fa1f f08a 	uxth.w	r0, sl
 801555e:	4552      	cmp	r2, sl
 8015560:	9000      	str	r0, [sp, #0]
 8015562:	da12      	bge.n	801558a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015564:	9301      	str	r3, [sp, #4]
 8015566:	9b00      	ldr	r3, [sp, #0]
 8015568:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801556c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015570:	1a9a      	subs	r2, r3, r2
 8015572:	f8ad 1010 	strh.w	r1, [sp, #16]
 8015576:	4631      	mov	r1, r6
 8015578:	f8ad 0014 	strh.w	r0, [sp, #20]
 801557c:	4640      	mov	r0, r8
 801557e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8015582:	69ea      	ldr	r2, [r5, #28]
 8015584:	f7ff ff7a 	bl	801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015588:	9b01      	ldr	r3, [sp, #4]
 801558a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801558e:	b29f      	uxth	r7, r3
 8015590:	429a      	cmp	r2, r3
 8015592:	da0d      	bge.n	80155b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8015594:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015598:	1aba      	subs	r2, r7, r2
 801559a:	f8ad a012 	strh.w	sl, [sp, #18]
 801559e:	4631      	mov	r1, r6
 80155a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80155a4:	4640      	mov	r0, r8
 80155a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80155aa:	69ea      	ldr	r2, [r5, #28]
 80155ac:	f7ff ff66 	bl	801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80155b0:	8822      	ldrh	r2, [r4, #0]
 80155b2:	445f      	add	r7, fp
 80155b4:	88a3      	ldrh	r3, [r4, #4]
 80155b6:	b2bf      	uxth	r7, r7
 80155b8:	4413      	add	r3, r2
 80155ba:	b23a      	sxth	r2, r7
 80155bc:	b29b      	uxth	r3, r3
 80155be:	b219      	sxth	r1, r3
 80155c0:	4291      	cmp	r1, r2
 80155c2:	dd0d      	ble.n	80155e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80155c4:	1bdb      	subs	r3, r3, r7
 80155c6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80155ca:	f8ad a012 	strh.w	sl, [sp, #18]
 80155ce:	4631      	mov	r1, r6
 80155d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155d4:	4640      	mov	r0, r8
 80155d6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80155da:	69ea      	ldr	r2, [r5, #28]
 80155dc:	f7ff ff4e 	bl	801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80155e0:	88e2      	ldrh	r2, [r4, #6]
 80155e2:	8863      	ldrh	r3, [r4, #2]
 80155e4:	4413      	add	r3, r2
 80155e6:	9a00      	ldr	r2, [sp, #0]
 80155e8:	444a      	add	r2, r9
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	fa1f f982 	uxth.w	r9, r2
 80155f0:	b219      	sxth	r1, r3
 80155f2:	fa0f f289 	sxth.w	r2, r9
 80155f6:	428a      	cmp	r2, r1
 80155f8:	da15      	bge.n	8015626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80155fa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80155fe:	eba3 0309 	sub.w	r3, r3, r9
 8015602:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015606:	f8ad 1014 	strh.w	r1, [sp, #20]
 801560a:	4631      	mov	r1, r6
 801560c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015610:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015614:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015618:	69ea      	ldr	r2, [r5, #28]
 801561a:	e001      	b.n	8015620 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801561c:	69ea      	ldr	r2, [r5, #28]
 801561e:	4621      	mov	r1, r4
 8015620:	4640      	mov	r0, r8
 8015622:	f7ff ff2b 	bl	801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015626:	4628      	mov	r0, r5
 8015628:	f7ff fe94 	bl	8015354 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801562c:	6861      	ldr	r1, [r4, #4]
 801562e:	4602      	mov	r2, r0
 8015630:	4633      	mov	r3, r6
 8015632:	6820      	ldr	r0, [r4, #0]
 8015634:	c303      	stmia	r3!, {r0, r1}
 8015636:	4611      	mov	r1, r2
 8015638:	4630      	mov	r0, r6
 801563a:	f7f8 fa35 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801563e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015642:	2b00      	cmp	r3, #0
 8015644:	f77f af33 	ble.w	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015648:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801564c:	2b00      	cmp	r3, #0
 801564e:	f77f af2e 	ble.w	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015652:	4628      	mov	r0, r5
 8015654:	f7ff fe9a 	bl	801538c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015658:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801565c:	1a18      	subs	r0, r3, r0
 801565e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015662:	4628      	mov	r0, r5
 8015664:	f7ff fea6 	bl	80153b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015668:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801566c:	4631      	mov	r1, r6
 801566e:	1a18      	subs	r0, r3, r0
 8015670:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015674:	4628      	mov	r0, r5
 8015676:	682b      	ldr	r3, [r5, #0]
 8015678:	689b      	ldr	r3, [r3, #8]
 801567a:	4798      	blx	r3
 801567c:	e717      	b.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801567e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801567e:	b570      	push	{r4, r5, r6, lr}
 8015680:	1d06      	adds	r6, r0, #4
 8015682:	b086      	sub	sp, #24
 8015684:	460c      	mov	r4, r1
 8015686:	2300      	movs	r3, #0
 8015688:	4631      	mov	r1, r6
 801568a:	4605      	mov	r5, r0
 801568c:	a802      	add	r0, sp, #8
 801568e:	9301      	str	r3, [sp, #4]
 8015690:	f7ff f8cc 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015694:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015698:	8822      	ldrh	r2, [r4, #0]
 801569a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801569e:	1ad2      	subs	r2, r2, r3
 80156a0:	8863      	ldrh	r3, [r4, #2]
 80156a2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80156a6:	1a5b      	subs	r3, r3, r1
 80156a8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80156ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 80156b0:	aa01      	add	r2, sp, #4
 80156b2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80156b6:	4630      	mov	r0, r6
 80156b8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80156bc:	a904      	add	r1, sp, #16
 80156be:	f8ad 3012 	strh.w	r3, [sp, #18]
 80156c2:	f7f8 fac9 	bl	800dc58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80156c6:	9a01      	ldr	r2, [sp, #4]
 80156c8:	b11a      	cbz	r2, 80156d2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80156ca:	4621      	mov	r1, r4
 80156cc:	4628      	mov	r0, r5
 80156ce:	f7ff fed5 	bl	801547c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80156d2:	b006      	add	sp, #24
 80156d4:	bd70      	pop	{r4, r5, r6, pc}

080156d6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80156d6:	4602      	mov	r2, r0
 80156d8:	b530      	push	{r4, r5, lr}
 80156da:	4604      	mov	r4, r0
 80156dc:	b085      	sub	sp, #20
 80156de:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80156e2:	460d      	mov	r5, r1
 80156e4:	466b      	mov	r3, sp
 80156e6:	6851      	ldr	r1, [r2, #4]
 80156e8:	c303      	stmia	r3!, {r0, r1}
 80156ea:	4629      	mov	r1, r5
 80156ec:	4668      	mov	r0, sp
 80156ee:	f7f8 f9db 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 80156f2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80156f6:	b12b      	cbz	r3, 8015704 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80156f8:	4669      	mov	r1, sp
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7ff ffbf 	bl	801567e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8015700:	b005      	add	sp, #20
 8015702:	bd30      	pop	{r4, r5, pc}
 8015704:	3404      	adds	r4, #4
 8015706:	a802      	add	r0, sp, #8
 8015708:	4621      	mov	r1, r4
 801570a:	f7ff f88f 	bl	801482c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801570e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015712:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8015716:	4669      	mov	r1, sp
 8015718:	4620      	mov	r0, r4
 801571a:	1a9b      	subs	r3, r3, r2
 801571c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015720:	f8ad 3000 	strh.w	r3, [sp]
 8015724:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015728:	1a9b      	subs	r3, r3, r2
 801572a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801572e:	f7f8 fa5a 	bl	800dbe6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015732:	e7e5      	b.n	8015700 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015734 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015734:	460b      	mov	r3, r1
 8015736:	680a      	ldr	r2, [r1, #0]
 8015738:	1d01      	adds	r1, r0, #4
 801573a:	6992      	ldr	r2, [r2, #24]
 801573c:	4618      	mov	r0, r3
 801573e:	4710      	bx	r2

08015740 <_ZN8touchgfx12TextProviderC1Ev>:
 8015740:	b538      	push	{r3, r4, r5, lr}
 8015742:	2500      	movs	r5, #0
 8015744:	2302      	movs	r3, #2
 8015746:	4604      	mov	r4, r0
 8015748:	220e      	movs	r2, #14
 801574a:	7403      	strb	r3, [r0, #16]
 801574c:	4629      	mov	r1, r5
 801574e:	6145      	str	r5, [r0, #20]
 8015750:	7605      	strb	r5, [r0, #24]
 8015752:	83c5      	strh	r5, [r0, #30]
 8015754:	8405      	strh	r5, [r0, #32]
 8015756:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8015758:	8705      	strh	r5, [r0, #56]	@ 0x38
 801575a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801575c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8015760:	e9c0 5500 	strd	r5, r5, [r0]
 8015764:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8015768:	304c      	adds	r0, #76	@ 0x4c
 801576a:	f00d f855 	bl	8022818 <memset>
 801576e:	2301      	movs	r3, #1
 8015770:	4620      	mov	r0, r4
 8015772:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8015776:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801577a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801577e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8015782:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8015786:	f7ee ff51 	bl	800462c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801578a:	4620      	mov	r0, r4
 801578c:	bd38      	pop	{r3, r4, r5, pc}

0801578e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801578e:	b530      	push	{r4, r5, lr}
 8015790:	2500      	movs	r5, #0
 8015792:	2401      	movs	r4, #1
 8015794:	6843      	ldr	r3, [r0, #4]
 8015796:	b913      	cbnz	r3, 801579e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015798:	6803      	ldr	r3, [r0, #0]
 801579a:	b313      	cbz	r3, 80157e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801579c:	6043      	str	r3, [r0, #4]
 801579e:	7e03      	ldrb	r3, [r0, #24]
 80157a0:	b143      	cbz	r3, 80157b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80157a2:	6943      	ldr	r3, [r0, #20]
 80157a4:	b12b      	cbz	r3, 80157b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80157a6:	881a      	ldrh	r2, [r3, #0]
 80157a8:	b11a      	cbz	r2, 80157b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80157aa:	1c9a      	adds	r2, r3, #2
 80157ac:	6142      	str	r2, [r0, #20]
 80157ae:	8818      	ldrh	r0, [r3, #0]
 80157b0:	bd30      	pop	{r4, r5, pc}
 80157b2:	7605      	strb	r5, [r0, #24]
 80157b4:	6843      	ldr	r3, [r0, #4]
 80157b6:	8819      	ldrh	r1, [r3, #0]
 80157b8:	b199      	cbz	r1, 80157e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80157ba:	1c9a      	adds	r2, r3, #2
 80157bc:	2902      	cmp	r1, #2
 80157be:	6042      	str	r2, [r0, #4]
 80157c0:	d1f5      	bne.n	80157ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80157c2:	7c03      	ldrb	r3, [r0, #16]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d8e5      	bhi.n	8015794 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80157c8:	1c5a      	adds	r2, r3, #1
 80157ca:	3302      	adds	r3, #2
 80157cc:	7402      	strb	r2, [r0, #16]
 80157ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80157d2:	6143      	str	r3, [r0, #20]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d0dd      	beq.n	8015794 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80157d8:	881b      	ldrh	r3, [r3, #0]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d0da      	beq.n	8015794 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80157de:	7604      	strb	r4, [r0, #24]
 80157e0:	e7d8      	b.n	8015794 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80157e2:	2000      	movs	r0, #0
 80157e4:	e7e4      	b.n	80157b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080157e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80157e6:	6001      	str	r1, [r0, #0]
 80157e8:	2100      	movs	r1, #0
 80157ea:	b430      	push	{r4, r5}
 80157ec:	6041      	str	r1, [r0, #4]
 80157ee:	6815      	ldr	r5, [r2, #0]
 80157f0:	6085      	str	r5, [r0, #8]
 80157f2:	6852      	ldr	r2, [r2, #4]
 80157f4:	6443      	str	r3, [r0, #68]	@ 0x44
 80157f6:	9b02      	ldr	r3, [sp, #8]
 80157f8:	60c2      	str	r2, [r0, #12]
 80157fa:	7401      	strb	r1, [r0, #16]
 80157fc:	6141      	str	r1, [r0, #20]
 80157fe:	7601      	strb	r1, [r0, #24]
 8015800:	8701      	strh	r1, [r0, #56]	@ 0x38
 8015802:	8401      	strh	r1, [r0, #32]
 8015804:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8015808:	6483      	str	r3, [r0, #72]	@ 0x48
 801580a:	bc30      	pop	{r4, r5}
 801580c:	f7ee bf0e 	b.w	800462c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015810 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015812:	4605      	mov	r5, r0
 8015814:	4608      	mov	r0, r1
 8015816:	b1f1      	cbz	r1, 8015856 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8015818:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801581c:	460b      	mov	r3, r1
 801581e:	f101 0708 	add.w	r7, r1, #8
 8015822:	4622      	mov	r2, r4
 8015824:	6818      	ldr	r0, [r3, #0]
 8015826:	3308      	adds	r3, #8
 8015828:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801582c:	4626      	mov	r6, r4
 801582e:	42bb      	cmp	r3, r7
 8015830:	c603      	stmia	r6!, {r0, r1}
 8015832:	4634      	mov	r4, r6
 8015834:	d1f6      	bne.n	8015824 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015836:	6818      	ldr	r0, [r3, #0]
 8015838:	6030      	str	r0, [r6, #0]
 801583a:	4610      	mov	r0, r2
 801583c:	889b      	ldrh	r3, [r3, #4]
 801583e:	80b3      	strh	r3, [r6, #4]
 8015840:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8015844:	015b      	lsls	r3, r3, #5
 8015846:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801584a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801584e:	430b      	orrs	r3, r1
 8015850:	425b      	negs	r3, r3
 8015852:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8015856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015858 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015858:	b538      	push	{r3, r4, r5, lr}
 801585a:	460c      	mov	r4, r1
 801585c:	6811      	ldr	r1, [r2, #0]
 801585e:	4610      	mov	r0, r2
 8015860:	68cd      	ldr	r5, [r1, #12]
 8015862:	4619      	mov	r1, r3
 8015864:	47a8      	blx	r5
 8015866:	2800      	cmp	r0, #0
 8015868:	bf08      	it	eq
 801586a:	4620      	moveq	r0, r4
 801586c:	bd38      	pop	{r3, r4, r5, pc}
	...

08015870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015874:	468c      	mov	ip, r1
 8015876:	4605      	mov	r5, r0
 8015878:	4614      	mov	r4, r2
 801587a:	b942      	cbnz	r2, 801588e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801587c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8015880:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8015884:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8015888:	4620      	mov	r0, r4
 801588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801588e:	7b50      	ldrb	r0, [r2, #13]
 8015890:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8015894:	8893      	ldrh	r3, [r2, #4]
 8015896:	0106      	lsls	r6, r0, #4
 8015898:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801589c:	79e6      	ldrb	r6, [r4, #7]
 801589e:	4316      	orrs	r6, r2
 80158a0:	185a      	adds	r2, r3, r1
 80158a2:	b291      	uxth	r1, r2
 80158a4:	b2b7      	uxth	r7, r6
 80158a6:	291d      	cmp	r1, #29
 80158a8:	d87f      	bhi.n	80159aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80158aa:	2201      	movs	r2, #1
 80158ac:	10f6      	asrs	r6, r6, #3
 80158ae:	408a      	lsls	r2, r1
 80158b0:	498b      	ldr	r1, [pc, #556]	@ (8015ae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 80158b2:	420a      	tst	r2, r1
 80158b4:	d12e      	bne.n	8015914 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80158b6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 80158ba:	d076      	beq.n	80159aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80158bc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80158c0:	4623      	mov	r3, r4
 80158c2:	f104 0e08 	add.w	lr, r4, #8
 80158c6:	4614      	mov	r4, r2
 80158c8:	6818      	ldr	r0, [r3, #0]
 80158ca:	3308      	adds	r3, #8
 80158cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80158d0:	4694      	mov	ip, r2
 80158d2:	4573      	cmp	r3, lr
 80158d4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80158d8:	4662      	mov	r2, ip
 80158da:	d1f5      	bne.n	80158c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80158dc:	6818      	ldr	r0, [r3, #0]
 80158de:	f8cc 0000 	str.w	r0, [ip]
 80158e2:	889b      	ldrh	r3, [r3, #4]
 80158e4:	f8ac 3004 	strh.w	r3, [ip, #4]
 80158e8:	b2b3      	uxth	r3, r6
 80158ea:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80158ee:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80158f2:	1aca      	subs	r2, r1, r3
 80158f4:	1bcf      	subs	r7, r1, r7
 80158f6:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80158fa:	b292      	uxth	r2, r2
 80158fc:	1afb      	subs	r3, r7, r3
 80158fe:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8015902:	10d2      	asrs	r2, r2, #3
 8015904:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8015908:	4302      	orrs	r2, r0
 801590a:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801590e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8015912:	e7b9      	b.n	8015888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8015914:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8015918:	4623      	mov	r3, r4
 801591a:	f104 0808 	add.w	r8, r4, #8
 801591e:	4614      	mov	r4, r2
 8015920:	6818      	ldr	r0, [r3, #0]
 8015922:	3308      	adds	r3, #8
 8015924:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015928:	4696      	mov	lr, r2
 801592a:	4543      	cmp	r3, r8
 801592c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015930:	4672      	mov	r2, lr
 8015932:	d1f5      	bne.n	8015920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8015934:	6818      	ldr	r0, [r3, #0]
 8015936:	f8ce 0000 	str.w	r0, [lr]
 801593a:	889b      	ldrh	r3, [r3, #4]
 801593c:	f8ae 3004 	strh.w	r3, [lr, #4]
 8015940:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8015942:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015946:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8015948:	f640 6333 	movw	r3, #3635	@ 0xe33
 801594c:	4299      	cmp	r1, r3
 801594e:	d111      	bne.n	8015974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8015950:	f8dc 3000 	ldr.w	r3, [ip]
 8015954:	4660      	mov	r0, ip
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	4798      	blx	r3
 801595a:	7b41      	ldrb	r1, [r0, #13]
 801595c:	00cb      	lsls	r3, r1, #3
 801595e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015962:	7a03      	ldrb	r3, [r0, #8]
 8015964:	4313      	orrs	r3, r2
 8015966:	064a      	lsls	r2, r1, #25
 8015968:	bf44      	itt	mi
 801596a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801596e:	b21b      	sxthmi	r3, r3
 8015970:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8015974:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8015978:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801597c:	443b      	add	r3, r7
 801597e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015982:	4433      	add	r3, r6
 8015984:	b29b      	uxth	r3, r3
 8015986:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801598a:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801598e:	10db      	asrs	r3, r3, #3
 8015990:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015994:	4313      	orrs	r3, r2
 8015996:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801599a:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801599e:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 80159a2:	1a9b      	subs	r3, r3, r2
 80159a4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80159a8:	e76e      	b.n	8015888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80159aa:	f023 0204 	bic.w	r2, r3, #4
 80159ae:	f640 611b 	movw	r1, #3611	@ 0xe1b
 80159b2:	428a      	cmp	r2, r1
 80159b4:	d003      	beq.n	80159be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 80159b6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d138      	bne.n	8015a30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 80159be:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 80159c2:	4622      	mov	r2, r4
 80159c4:	f104 0808 	add.w	r8, r4, #8
 80159c8:	4634      	mov	r4, r6
 80159ca:	6810      	ldr	r0, [r2, #0]
 80159cc:	3208      	adds	r2, #8
 80159ce:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80159d2:	46b6      	mov	lr, r6
 80159d4:	4542      	cmp	r2, r8
 80159d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80159da:	4676      	mov	r6, lr
 80159dc:	d1f5      	bne.n	80159ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 80159de:	6810      	ldr	r0, [r2, #0]
 80159e0:	3b01      	subs	r3, #1
 80159e2:	4621      	mov	r1, r4
 80159e4:	f8ce 0000 	str.w	r0, [lr]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	8892      	ldrh	r2, [r2, #4]
 80159ec:	4628      	mov	r0, r5
 80159ee:	f8ae 2004 	strh.w	r2, [lr, #4]
 80159f2:	4662      	mov	r2, ip
 80159f4:	f7ff ff30 	bl	8015858 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80159f8:	7b41      	ldrb	r1, [r0, #13]
 80159fa:	00cb      	lsls	r3, r1, #3
 80159fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015a00:	7a03      	ldrb	r3, [r0, #8]
 8015a02:	0648      	lsls	r0, r1, #25
 8015a04:	ea43 0302 	orr.w	r3, r3, r2
 8015a08:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8015a0c:	bf44      	itt	mi
 8015a0e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015a12:	b21b      	sxthmi	r3, r3
 8015a14:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8015a18:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8015a1c:	005b      	lsls	r3, r3, #1
 8015a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a22:	4313      	orrs	r3, r2
 8015a24:	115a      	asrs	r2, r3, #5
 8015a26:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015a2a:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8015a2e:	e047      	b.n	8015ac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8015a30:	00c2      	lsls	r2, r0, #3
 8015a32:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8015a36:	7a22      	ldrb	r2, [r4, #8]
 8015a38:	430a      	orrs	r2, r1
 8015a3a:	0641      	lsls	r1, r0, #25
 8015a3c:	f640 6109 	movw	r1, #3593	@ 0xe09
 8015a40:	bf44      	itt	mi
 8015a42:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8015a46:	b212      	sxthmi	r2, r2
 8015a48:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8015a4c:	f023 0210 	bic.w	r2, r3, #16
 8015a50:	428a      	cmp	r2, r1
 8015a52:	d003      	beq.n	8015a5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8015a54:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	d13e      	bne.n	8015ada <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8015a5c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8015a60:	f104 0808 	add.w	r8, r4, #8
 8015a64:	4696      	mov	lr, r2
 8015a66:	6820      	ldr	r0, [r4, #0]
 8015a68:	3408      	adds	r4, #8
 8015a6a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8015a6e:	4616      	mov	r6, r2
 8015a70:	4544      	cmp	r4, r8
 8015a72:	c603      	stmia	r6!, {r0, r1}
 8015a74:	4632      	mov	r2, r6
 8015a76:	d1f6      	bne.n	8015a66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8015a78:	6820      	ldr	r0, [r4, #0]
 8015a7a:	6030      	str	r0, [r6, #0]
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	88a1      	ldrh	r1, [r4, #4]
 8015a80:	4674      	mov	r4, lr
 8015a82:	80b1      	strh	r1, [r6, #4]
 8015a84:	4671      	mov	r1, lr
 8015a86:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8015a8a:	0076      	lsls	r6, r6, #1
 8015a8c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8015a90:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8015a94:	4316      	orrs	r6, r2
 8015a96:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	4662      	mov	r2, ip
 8015a9e:	bf16      	itet	ne
 8015aa0:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015aa4:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8015aa8:	b29b      	uxthne	r3, r3
 8015aaa:	f7ff fed5 	bl	8015858 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015aae:	7b43      	ldrb	r3, [r0, #13]
 8015ab0:	7a82      	ldrb	r2, [r0, #10]
 8015ab2:	005b      	lsls	r3, r3, #1
 8015ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	1af6      	subs	r6, r6, r3
 8015abc:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8015ac0:	7b61      	ldrb	r1, [r4, #13]
 8015ac2:	00cb      	lsls	r3, r1, #3
 8015ac4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015ac8:	7a23      	ldrb	r3, [r4, #8]
 8015aca:	4313      	orrs	r3, r2
 8015acc:	064a      	lsls	r2, r1, #25
 8015ace:	bf44      	itt	mi
 8015ad0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015ad4:	b21b      	sxthmi	r3, r3
 8015ad6:	1bdb      	subs	r3, r3, r7
 8015ad8:	e719      	b.n	801590e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8015ada:	2300      	movs	r3, #0
 8015adc:	e7a5      	b.n	8015a2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8015ade:	bf00      	nop
 8015ae0:	3fc00079 	.word	0x3fc00079

08015ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ae8:	4604      	mov	r4, r0
 8015aea:	b942      	cbnz	r2, 8015afe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015af0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8015af4:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8015af8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8015afc:	e047      	b.n	8015b8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015afe:	7b51      	ldrb	r1, [r2, #13]
 8015b00:	8893      	ldrh	r3, [r2, #4]
 8015b02:	010d      	lsls	r5, r1, #4
 8015b04:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8015b08:	79d5      	ldrb	r5, [r2, #7]
 8015b0a:	4305      	orrs	r5, r0
 8015b0c:	2d04      	cmp	r5, #4
 8015b0e:	bfcc      	ite	gt
 8015b10:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8015b14:	f04f 0e01 	movle.w	lr, #1
 8015b18:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8015b1c:	f200 80ab 	bhi.w	8015c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015b20:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8015b24:	4283      	cmp	r3, r0
 8015b26:	d216      	bcs.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b28:	f240 605b 	movw	r0, #1627	@ 0x65b
 8015b2c:	4283      	cmp	r3, r0
 8015b2e:	d859      	bhi.n	8015be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015b30:	f240 6057 	movw	r0, #1623	@ 0x657
 8015b34:	4283      	cmp	r3, r0
 8015b36:	d20e      	bcs.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b38:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015b3c:	d24a      	bcs.n	8015bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015b3e:	f240 604e 	movw	r0, #1614	@ 0x64e
 8015b42:	4283      	cmp	r3, r0
 8015b44:	d207      	bcs.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b46:	f240 601a 	movw	r0, #1562	@ 0x61a
 8015b4a:	4283      	cmp	r3, r0
 8015b4c:	d02a      	beq.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015b4e:	d821      	bhi.n	8015b94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015b50:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8015b54:	d35b      	bcc.n	8015c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015b56:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8015b5a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015b5e:	f040 80d0 	bne.w	8015d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015b62:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8015b66:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015b6a:	f040 80ca 	bne.w	8015d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015b6e:	00cb      	lsls	r3, r1, #3
 8015b70:	0649      	lsls	r1, r1, #25
 8015b72:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015b76:	7a13      	ldrb	r3, [r2, #8]
 8015b78:	ea43 0300 	orr.w	r3, r3, r0
 8015b7c:	bf44      	itt	mi
 8015b7e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015b82:	b21b      	sxthmi	r3, r3
 8015b84:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015b88:	1b5d      	subs	r5, r3, r5
 8015b8a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015b8e:	4610      	mov	r0, r2
 8015b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b94:	f240 604b 	movw	r0, #1611	@ 0x64b
 8015b98:	4283      	cmp	r3, r0
 8015b9a:	d338      	bcc.n	8015c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015b9c:	f240 604c 	movw	r0, #1612	@ 0x64c
 8015ba0:	4283      	cmp	r3, r0
 8015ba2:	d9d8      	bls.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015ba4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8015ba8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8015bac:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015bb0:	f040 80f3 	bne.w	8015d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015bb4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015bb8:	f040 80ef 	bne.w	8015d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015bbc:	00cb      	lsls	r3, r1, #3
 8015bbe:	064e      	lsls	r6, r1, #25
 8015bc0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015bc4:	7a13      	ldrb	r3, [r2, #8]
 8015bc6:	ea43 0300 	orr.w	r3, r3, r0
 8015bca:	bf44      	itt	mi
 8015bcc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015bd0:	b21b      	sxthmi	r3, r3
 8015bd2:	e7d9      	b.n	8015b88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015bd4:	f240 6054 	movw	r0, #1620	@ 0x654
 8015bd8:	4283      	cmp	r3, r0
 8015bda:	d8e3      	bhi.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015bdc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015be0:	d9e0      	bls.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015be2:	e7b8      	b.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015be4:	f240 6074 	movw	r0, #1652	@ 0x674
 8015be8:	4283      	cmp	r3, r0
 8015bea:	d0b4      	beq.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015bec:	d82d      	bhi.n	8015c4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8015bee:	f240 605e 	movw	r0, #1630	@ 0x65e
 8015bf2:	4283      	cmp	r3, r0
 8015bf4:	d804      	bhi.n	8015c00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015bf6:	f240 605d 	movw	r0, #1629	@ 0x65d
 8015bfa:	4283      	cmp	r3, r0
 8015bfc:	d3d2      	bcc.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015bfe:	e7aa      	b.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c00:	f240 605f 	movw	r0, #1631	@ 0x65f
 8015c04:	4283      	cmp	r3, r0
 8015c06:	d0cd      	beq.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c08:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8015c0c:	d0a3      	beq.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c0e:	00cb      	lsls	r3, r1, #3
 8015c10:	0649      	lsls	r1, r1, #25
 8015c12:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015c16:	7a13      	ldrb	r3, [r2, #8]
 8015c18:	ea43 0300 	orr.w	r3, r3, r0
 8015c1c:	bf44      	itt	mi
 8015c1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015c22:	b21b      	sxthmi	r3, r3
 8015c24:	1b5d      	subs	r5, r3, r5
 8015c26:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015c2a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015c2e:	7b53      	ldrb	r3, [r2, #13]
 8015c30:	015b      	lsls	r3, r3, #5
 8015c32:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015c36:	7993      	ldrb	r3, [r2, #6]
 8015c38:	430b      	orrs	r3, r1
 8015c3a:	2105      	movs	r1, #5
 8015c3c:	005b      	lsls	r3, r3, #1
 8015c3e:	fb93 f3f1 	sdiv	r3, r3, r1
 8015c42:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015c46:	440b      	add	r3, r1
 8015c48:	e756      	b.n	8015af8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015c4a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8015c4e:	4283      	cmp	r3, r0
 8015c50:	d809      	bhi.n	8015c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015c52:	f240 60df 	movw	r0, #1759	@ 0x6df
 8015c56:	4283      	cmp	r3, r0
 8015c58:	f4bf af7d 	bcs.w	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c5c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8015c60:	2b05      	cmp	r3, #5
 8015c62:	d8d4      	bhi.n	8015c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015c64:	e777      	b.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c66:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8015c6a:	4283      	cmp	r3, r0
 8015c6c:	d09a      	beq.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c6e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8015c72:	4283      	cmp	r3, r0
 8015c74:	e7ca      	b.n	8015c0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015c76:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8015c7a:	d22b      	bcs.n	8015cd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015c7c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8015c80:	4283      	cmp	r3, r0
 8015c82:	d28f      	bcs.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c84:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8015c88:	4283      	cmp	r3, r0
 8015c8a:	d816      	bhi.n	8015cba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015c8c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8015c90:	4283      	cmp	r3, r0
 8015c92:	f4bf af60 	bcs.w	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c96:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8015c9a:	4283      	cmp	r3, r0
 8015c9c:	d80a      	bhi.n	8015cb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015c9e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8015ca2:	4283      	cmp	r3, r0
 8015ca4:	f4bf af57 	bcs.w	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015ca8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8015cac:	4283      	cmp	r3, r0
 8015cae:	f43f af79 	beq.w	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cb2:	e7ac      	b.n	8015c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015cb4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8015cb8:	e7f8      	b.n	8015cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015cba:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8015cbe:	4283      	cmp	r3, r0
 8015cc0:	d802      	bhi.n	8015cc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8015cc2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8015cc6:	e798      	b.n	8015bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015cc8:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8015ccc:	4283      	cmp	r3, r0
 8015cce:	f47f af42 	bne.w	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015cd2:	e767      	b.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cd4:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8015cd8:	4283      	cmp	r3, r0
 8015cda:	f43f af63 	beq.w	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cde:	d802      	bhi.n	8015ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8015ce0:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8015ce4:	e7f2      	b.n	8015ccc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8015ce6:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8015cea:	4283      	cmp	r3, r0
 8015cec:	d805      	bhi.n	8015cfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8015cee:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8015cf2:	4283      	cmp	r3, r0
 8015cf4:	f4ff af2f 	bcc.w	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015cf8:	e754      	b.n	8015ba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cfa:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8015cfe:	4283      	cmp	r3, r0
 8015d00:	e7af      	b.n	8015c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8015d02:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015d06:	4617      	mov	r7, r2
 8015d08:	f102 0808 	add.w	r8, r2, #8
 8015d0c:	4666      	mov	r6, ip
 8015d0e:	6838      	ldr	r0, [r7, #0]
 8015d10:	3708      	adds	r7, #8
 8015d12:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015d16:	46e6      	mov	lr, ip
 8015d18:	4547      	cmp	r7, r8
 8015d1a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015d1e:	46f4      	mov	ip, lr
 8015d20:	d1f5      	bne.n	8015d0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8015d22:	6838      	ldr	r0, [r7, #0]
 8015d24:	f8ce 0000 	str.w	r0, [lr]
 8015d28:	88b9      	ldrh	r1, [r7, #4]
 8015d2a:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015d2e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015d32:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015d36:	d009      	beq.n	8015d4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8015d38:	7b51      	ldrb	r1, [r2, #13]
 8015d3a:	7992      	ldrb	r2, [r2, #6]
 8015d3c:	0149      	lsls	r1, r1, #5
 8015d3e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015d42:	4311      	orrs	r1, r2
 8015d44:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015d48:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015d4c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015d50:	b2ad      	uxth	r5, r5
 8015d52:	d00d      	beq.n	8015d70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8015d54:	442b      	add	r3, r5
 8015d56:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015d60:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015d64:	10db      	asrs	r3, r3, #3
 8015d66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d6a:	4313      	orrs	r3, r2
 8015d6c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015d70:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015d74:	00cb      	lsls	r3, r1, #3
 8015d76:	064f      	lsls	r7, r1, #25
 8015d78:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015d7c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015d80:	ea43 0302 	orr.w	r3, r3, r2
 8015d84:	bf44      	itt	mi
 8015d86:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015d8a:	b21b      	sxthmi	r3, r3
 8015d8c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015d90:	1b5b      	subs	r3, r3, r5
 8015d92:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8015d96:	4632      	mov	r2, r6
 8015d98:	e6f9      	b.n	8015b8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015d9a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015d9e:	4617      	mov	r7, r2
 8015da0:	f102 0908 	add.w	r9, r2, #8
 8015da4:	4666      	mov	r6, ip
 8015da6:	6838      	ldr	r0, [r7, #0]
 8015da8:	3708      	adds	r7, #8
 8015daa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015dae:	46e0      	mov	r8, ip
 8015db0:	454f      	cmp	r7, r9
 8015db2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015db6:	46c4      	mov	ip, r8
 8015db8:	d1f5      	bne.n	8015da6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8015dba:	6838      	ldr	r0, [r7, #0]
 8015dbc:	f8c8 0000 	str.w	r0, [r8]
 8015dc0:	88b9      	ldrh	r1, [r7, #4]
 8015dc2:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015dc6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015dca:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015dce:	d009      	beq.n	8015de4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8015dd0:	7b51      	ldrb	r1, [r2, #13]
 8015dd2:	7992      	ldrb	r2, [r2, #6]
 8015dd4:	0149      	lsls	r1, r1, #5
 8015dd6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015dda:	4311      	orrs	r1, r2
 8015ddc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015de0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015de4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015de8:	d00e      	beq.n	8015e08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8015dea:	eba3 030e 	sub.w	r3, r3, lr
 8015dee:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015df8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015dfc:	10db      	asrs	r3, r3, #3
 8015dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015e02:	4313      	orrs	r3, r2
 8015e04:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015e08:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015e0c:	00cb      	lsls	r3, r1, #3
 8015e0e:	0648      	lsls	r0, r1, #25
 8015e10:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015e14:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015e18:	ea43 0302 	orr.w	r3, r3, r2
 8015e1c:	bf44      	itt	mi
 8015e1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015e22:	b21b      	sxthmi	r3, r3
 8015e24:	1b5d      	subs	r5, r3, r5
 8015e26:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015e2a:	e7b4      	b.n	8015d96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e30:	461e      	mov	r6, r3
 8015e32:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015e34:	4604      	mov	r4, r0
 8015e36:	4617      	mov	r7, r2
 8015e38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015e3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015e40:	f7ee fbb2 	bl	80045a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015e44:	4605      	mov	r5, r0
 8015e46:	b918      	cbnz	r0, 8015e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8015e48:	6030      	str	r0, [r6, #0]
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	4601      	mov	r1, r0
 8015e54:	4638      	mov	r0, r7
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	4798      	blx	r3
 8015e5a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015e5e:	4602      	mov	r2, r0
 8015e60:	6030      	str	r0, [r6, #0]
 8015e62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015e66:	d213      	bcs.n	8015e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015e68:	4643      	mov	r3, r8
 8015e6a:	4639      	mov	r1, r7
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f7ff fe39 	bl	8015ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015e72:	6030      	str	r0, [r6, #0]
 8015e74:	6833      	ldr	r3, [r6, #0]
 8015e76:	b143      	cbz	r3, 8015e8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015e78:	7b5a      	ldrb	r2, [r3, #13]
 8015e7a:	7a9b      	ldrb	r3, [r3, #10]
 8015e7c:	0052      	lsls	r2, r2, #1
 8015e7e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015e82:	4313      	orrs	r3, r2
 8015e84:	bf0c      	ite	eq
 8015e86:	2301      	moveq	r3, #1
 8015e88:	2300      	movne	r3, #0
 8015e8a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015e8e:	e7dc      	b.n	8015e4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015e90:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8015e98:	d804      	bhi.n	8015ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015e9a:	4639      	mov	r1, r7
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	f7ff fce7 	bl	8015870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015ea2:	e7e6      	b.n	8015e72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015ea4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d0e3      	beq.n	8015e74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015eac:	f640 1302 	movw	r3, #2306	@ 0x902
 8015eb0:	429d      	cmp	r5, r3
 8015eb2:	d1df      	bne.n	8015e74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015eb4:	4601      	mov	r1, r0
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f7ff fcaa 	bl	8015810 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015ebc:	e7d9      	b.n	8015e72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8015ebe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec2:	461e      	mov	r6, r3
 8015ec4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	4617      	mov	r7, r2
 8015eca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015ece:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015ed2:	f7ee fb69 	bl	80045a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	b918      	cbnz	r0, 8015ee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8015eda:	6030      	str	r0, [r6, #0]
 8015edc:	4628      	mov	r0, r5
 8015ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	4601      	mov	r1, r0
 8015ee6:	4638      	mov	r0, r7
 8015ee8:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015eec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ef0:	47c8      	blx	r9
 8015ef2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	6030      	str	r0, [r6, #0]
 8015efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015efe:	d213      	bcs.n	8015f28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8015f00:	4643      	mov	r3, r8
 8015f02:	4639      	mov	r1, r7
 8015f04:	4620      	mov	r0, r4
 8015f06:	f7ff fded 	bl	8015ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015f0a:	6030      	str	r0, [r6, #0]
 8015f0c:	6833      	ldr	r3, [r6, #0]
 8015f0e:	b143      	cbz	r3, 8015f22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8015f10:	7b5a      	ldrb	r2, [r3, #13]
 8015f12:	7a9b      	ldrb	r3, [r3, #10]
 8015f14:	0052      	lsls	r2, r2, #1
 8015f16:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015f1a:	4313      	orrs	r3, r2
 8015f1c:	bf0c      	ite	eq
 8015f1e:	2301      	moveq	r3, #1
 8015f20:	2300      	movne	r3, #0
 8015f22:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015f26:	e7d9      	b.n	8015edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8015f28:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015f30:	d804      	bhi.n	8015f3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8015f32:	4639      	mov	r1, r7
 8015f34:	4620      	mov	r0, r4
 8015f36:	f7ff fc9b 	bl	8015870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015f3a:	e7e6      	b.n	8015f0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8015f3c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d0e3      	beq.n	8015f0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015f44:	f640 1302 	movw	r3, #2306	@ 0x902
 8015f48:	429d      	cmp	r5, r3
 8015f4a:	d1df      	bne.n	8015f0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015f4c:	4601      	mov	r1, r0
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f7ff fc5e 	bl	8015810 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015f54:	e7d9      	b.n	8015f0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08015f56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015f56:	b510      	push	{r4, lr}
 8015f58:	4604      	mov	r4, r0
 8015f5a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8015f5e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015f60:	b1e1      	cbz	r1, 8015f9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8015f62:	2b0a      	cmp	r3, #10
 8015f64:	d02d      	beq.n	8015fc2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015f66:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015f68:	3901      	subs	r1, #1
 8015f6a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8015f6e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8015f70:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8015f74:	1c51      	adds	r1, r2, #1
 8015f76:	b289      	uxth	r1, r1
 8015f78:	2901      	cmp	r1, #1
 8015f7a:	bf8a      	itet	hi
 8015f7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015f80:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8015f82:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8015f84:	1c5a      	adds	r2, r3, #1
 8015f86:	8722      	strh	r2, [r4, #56]	@ 0x38
 8015f88:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015f8a:	4413      	add	r3, r2
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	2b09      	cmp	r3, #9
 8015f90:	bf88      	it	hi
 8015f92:	3b0a      	subhi	r3, #10
 8015f94:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015f98:	8458      	strh	r0, [r3, #34]	@ 0x22
 8015f9a:	e7de      	b.n	8015f5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015f9c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015f9e:	2b0a      	cmp	r3, #10
 8015fa0:	d00f      	beq.n	8015fc2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	f7ff fbf3 	bl	801578e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015fa8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015faa:	1c5a      	adds	r2, r3, #1
 8015fac:	8722      	strh	r2, [r4, #56]	@ 0x38
 8015fae:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015fb0:	4413      	add	r3, r2
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	2b09      	cmp	r3, #9
 8015fb6:	bf88      	it	hi
 8015fb8:	3b0a      	subhi	r3, #10
 8015fba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015fbe:	8458      	strh	r0, [r3, #34]	@ 0x22
 8015fc0:	e7ec      	b.n	8015f9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8015fc2:	bd10      	pop	{r4, pc}

08015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015fc8:	4604      	mov	r4, r0
 8015fca:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8015fce:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8015fd0:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8015fd2:	3a01      	subs	r2, #1
 8015fd4:	8702      	strh	r2, [r0, #56]	@ 0x38
 8015fd6:	1c5a      	adds	r2, r3, #1
 8015fd8:	b292      	uxth	r2, r2
 8015fda:	2a09      	cmp	r2, #9
 8015fdc:	bf8a      	itet	hi
 8015fde:	3b09      	subhi	r3, #9
 8015fe0:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8015fe2:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8015fe4:	f7ff ffb7 	bl	8015f56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015fe8:	8c23      	ldrh	r3, [r4, #32]
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	bf9c      	itt	ls
 8015fee:	3301      	addls	r3, #1
 8015ff0:	8423      	strhls	r3, [r4, #32]
 8015ff2:	8be3      	ldrh	r3, [r4, #30]
 8015ff4:	b90b      	cbnz	r3, 8015ffa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015ff6:	2302      	movs	r3, #2
 8015ff8:	83e3      	strh	r3, [r4, #30]
 8015ffa:	8be3      	ldrh	r3, [r4, #30]
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	3b01      	subs	r3, #1
 8016000:	b29b      	uxth	r3, r3
 8016002:	83e3      	strh	r3, [r4, #30]
 8016004:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016008:	8365      	strh	r5, [r4, #26]
 801600a:	bd38      	pop	{r3, r4, r5, pc}

0801600c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801600c:	428a      	cmp	r2, r1
 801600e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016012:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8016014:	d932      	bls.n	801607c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8016016:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8016018:	1a54      	subs	r4, r2, r1
 801601a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801601e:	19ee      	adds	r6, r5, r7
 8016020:	fa1f fe84 	uxth.w	lr, r4
 8016024:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8016028:	3e01      	subs	r6, #1
 801602a:	b2b4      	uxth	r4, r6
 801602c:	eba4 090e 	sub.w	r9, r4, lr
 8016030:	fa1f f989 	uxth.w	r9, r9
 8016034:	2c09      	cmp	r4, #9
 8016036:	4626      	mov	r6, r4
 8016038:	bf88      	it	hi
 801603a:	f1a4 060a 	subhi.w	r6, r4, #10
 801603e:	f1bc 0f00 	cmp.w	ip, #0
 8016042:	f104 34ff 	add.w	r4, r4, #4294967295
 8016046:	bf08      	it	eq
 8016048:	f04f 0c02 	moveq.w	ip, #2
 801604c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016050:	b2a4      	uxth	r4, r4
 8016052:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016056:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801605a:	454c      	cmp	r4, r9
 801605c:	fa1f fc8c 	uxth.w	ip, ip
 8016060:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016064:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8016068:	d1e4      	bne.n	8016034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801606a:	eba5 050e 	sub.w	r5, r5, lr
 801606e:	eb0e 0408 	add.w	r4, lr, r8
 8016072:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8016076:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016078:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801607c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801607e:	250a      	movs	r5, #10
 8016080:	1a64      	subs	r4, r4, r1
 8016082:	4439      	add	r1, r7
 8016084:	b289      	uxth	r1, r1
 8016086:	8704      	strh	r4, [r0, #56]	@ 0x38
 8016088:	2909      	cmp	r1, #9
 801608a:	bf88      	it	hi
 801608c:	390a      	subhi	r1, #10
 801608e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016090:	b18a      	cbz	r2, 80160b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016092:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8016094:	3a01      	subs	r2, #1
 8016096:	3101      	adds	r1, #1
 8016098:	b292      	uxth	r2, r2
 801609a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801609e:	8701      	strh	r1, [r0, #56]	@ 0x38
 80160a0:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80160a2:	b901      	cbnz	r1, 80160a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80160a4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80160a6:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80160a8:	3901      	subs	r1, #1
 80160aa:	b289      	uxth	r1, r1
 80160ac:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80160ae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80160b2:	844c      	strh	r4, [r1, #34]	@ 0x22
 80160b4:	e7ec      	b.n	8016090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80160b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160ba:	f7ff bf4c 	b.w	8015f56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080160be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80160be:	b570      	push	{r4, r5, r6, lr}
 80160c0:	2500      	movs	r5, #0
 80160c2:	4295      	cmp	r5, r2
 80160c4:	d011      	beq.n	80160ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80160c6:	8bc4      	ldrh	r4, [r0, #30]
 80160c8:	f831 6b02 	ldrh.w	r6, [r1], #2
 80160cc:	4414      	add	r4, r2
 80160ce:	3c01      	subs	r4, #1
 80160d0:	1b64      	subs	r4, r4, r5
 80160d2:	b2a4      	uxth	r4, r4
 80160d4:	2c01      	cmp	r4, #1
 80160d6:	bf88      	it	hi
 80160d8:	3c02      	subhi	r4, #2
 80160da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80160de:	8b64      	ldrh	r4, [r4, #26]
 80160e0:	42b4      	cmp	r4, r6
 80160e2:	d117      	bne.n	8016114 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80160e4:	3501      	adds	r5, #1
 80160e6:	b2ad      	uxth	r5, r5
 80160e8:	e7eb      	b.n	80160c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80160ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80160ee:	2400      	movs	r4, #0
 80160f0:	4413      	add	r3, r2
 80160f2:	b2a2      	uxth	r2, r4
 80160f4:	429a      	cmp	r2, r3
 80160f6:	da0f      	bge.n	8016118 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80160f8:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80160fa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80160fe:	3401      	adds	r4, #1
 8016100:	4432      	add	r2, r6
 8016102:	b292      	uxth	r2, r2
 8016104:	2a09      	cmp	r2, #9
 8016106:	bf88      	it	hi
 8016108:	3a0a      	subhi	r2, #10
 801610a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801610e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8016110:	42aa      	cmp	r2, r5
 8016112:	d0ee      	beq.n	80160f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8016114:	2000      	movs	r0, #0
 8016116:	bd70      	pop	{r4, r5, r6, pc}
 8016118:	2001      	movs	r0, #1
 801611a:	e7fc      	b.n	8016116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801611c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801611c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	4605      	mov	r5, r0
 8016122:	4616      	mov	r6, r2
 8016124:	1c8c      	adds	r4, r1, #2
 8016126:	8809      	ldrh	r1, [r1, #0]
 8016128:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801612c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016130:	42b3      	cmp	r3, r6
 8016132:	d124      	bne.n	801617e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016134:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016138:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801613c:	f001 070f 	and.w	r7, r1, #15
 8016140:	4652      	mov	r2, sl
 8016142:	f8cd 8000 	str.w	r8, [sp]
 8016146:	464b      	mov	r3, r9
 8016148:	4621      	mov	r1, r4
 801614a:	4628      	mov	r0, r5
 801614c:	f7ff ffb7 	bl	80160be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016150:	4683      	mov	fp, r0
 8016152:	b168      	cbz	r0, 8016170 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016154:	eb0a 0109 	add.w	r1, sl, r9
 8016158:	463a      	mov	r2, r7
 801615a:	4628      	mov	r0, r5
 801615c:	4441      	add	r1, r8
 801615e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016162:	4649      	mov	r1, r9
 8016164:	f7ff ff52 	bl	801600c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016168:	4658      	mov	r0, fp
 801616a:	b003      	add	sp, #12
 801616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016170:	eb07 010a 	add.w	r1, r7, sl
 8016174:	4449      	add	r1, r9
 8016176:	4441      	add	r1, r8
 8016178:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801617c:	e7d2      	b.n	8016124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801617e:	f04f 0b00 	mov.w	fp, #0
 8016182:	e7f1      	b.n	8016168 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016184 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016184:	b570      	push	{r4, r5, r6, lr}
 8016186:	8810      	ldrh	r0, [r2, #0]
 8016188:	4298      	cmp	r0, r3
 801618a:	d817      	bhi.n	80161bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801618c:	1e48      	subs	r0, r1, #1
 801618e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016192:	4298      	cmp	r0, r3
 8016194:	d312      	bcc.n	80161bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016196:	2400      	movs	r4, #0
 8016198:	428c      	cmp	r4, r1
 801619a:	d20f      	bcs.n	80161bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801619c:	1860      	adds	r0, r4, r1
 801619e:	1040      	asrs	r0, r0, #1
 80161a0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80161a4:	0085      	lsls	r5, r0, #2
 80161a6:	42b3      	cmp	r3, r6
 80161a8:	d902      	bls.n	80161b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80161aa:	3001      	adds	r0, #1
 80161ac:	b284      	uxth	r4, r0
 80161ae:	e7f3      	b.n	8016198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80161b0:	d201      	bcs.n	80161b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80161b2:	b281      	uxth	r1, r0
 80161b4:	e7f0      	b.n	8016198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80161b6:	442a      	add	r2, r5
 80161b8:	8850      	ldrh	r0, [r2, #2]
 80161ba:	bd70      	pop	{r4, r5, r6, pc}
 80161bc:	2000      	movs	r0, #0
 80161be:	e7fc      	b.n	80161ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080161c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80161c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c4:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80161c6:	4604      	mov	r4, r0
 80161c8:	260b      	movs	r6, #11
 80161ca:	886f      	ldrh	r7, [r5, #2]
 80161cc:	087f      	lsrs	r7, r7, #1
 80161ce:	3e01      	subs	r6, #1
 80161d0:	d013      	beq.n	80161fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80161d2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80161d4:	462a      	mov	r2, r5
 80161d6:	4639      	mov	r1, r7
 80161d8:	4620      	mov	r0, r4
 80161da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80161de:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80161e2:	4643      	mov	r3, r8
 80161e4:	f7ff ffce 	bl	8016184 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80161e8:	b138      	cbz	r0, 80161fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80161ea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80161ee:	4642      	mov	r2, r8
 80161f0:	4620      	mov	r0, r4
 80161f2:	f7ff ff93 	bl	801611c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d1e9      	bne.n	80161ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80161fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016200 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	694a      	ldr	r2, [r1, #20]
 8016204:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8016206:	684b      	ldr	r3, [r1, #4]
 8016208:	1b54      	subs	r4, r2, r5
 801620a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801620c:	f000 8106 	beq.w	801641c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016210:	1b9b      	subs	r3, r3, r6
 8016212:	d003      	beq.n	801621c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016214:	4363      	muls	r3, r4
 8016216:	2210      	movs	r2, #16
 8016218:	fb93 f3f2 	sdiv	r3, r3, r2
 801621c:	680c      	ldr	r4, [r1, #0]
 801621e:	698a      	ldr	r2, [r1, #24]
 8016220:	1b65      	subs	r5, r4, r5
 8016222:	f000 80fd 	beq.w	8016420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016226:	1b92      	subs	r2, r2, r6
 8016228:	d003      	beq.n	8016232 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801622a:	436a      	muls	r2, r5
 801622c:	2410      	movs	r4, #16
 801622e:	fb92 f2f4 	sdiv	r2, r2, r4
 8016232:	1a9b      	subs	r3, r3, r2
 8016234:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801645c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801623c:	460a      	mov	r2, r1
 801623e:	ee07 3a90 	vmov	s15, r3
 8016242:	f100 040c 	add.w	r4, r0, #12
 8016246:	4603      	mov	r3, r0
 8016248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801624c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016250:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016254:	eeb1 6a43 	vneg.f32	s12, s6
 8016258:	edd2 7a02 	vldr	s15, [r2, #8]
 801625c:	3214      	adds	r2, #20
 801625e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016262:	ece3 6a01 	vstmia	r3!, {s13}
 8016266:	429c      	cmp	r4, r3
 8016268:	ed52 7a02 	vldr	s15, [r2, #-8]
 801626c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016270:	edc3 7a02 	vstr	s15, [r3, #8]
 8016274:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016278:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801627c:	edc3 7a05 	vstr	s15, [r3, #20]
 8016280:	d1ea      	bne.n	8016258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016282:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016284:	698b      	ldr	r3, [r1, #24]
 8016286:	edd0 4a02 	vldr	s9, [r0, #8]
 801628a:	1a9b      	subs	r3, r3, r2
 801628c:	edd0 3a00 	vldr	s7, [r0]
 8016290:	edd0 6a01 	vldr	s13, [r0, #4]
 8016294:	ee07 3a90 	vmov	s15, r3
 8016298:	684b      	ldr	r3, [r1, #4]
 801629a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801629e:	ed90 5a05 	vldr	s10, [r0, #20]
 80162a2:	1a9b      	subs	r3, r3, r2
 80162a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162a8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80162ac:	ed90 2a03 	vldr	s4, [r0, #12]
 80162b0:	ee07 3a10 	vmov	s14, r3
 80162b4:	edd0 5a04 	vldr	s11, [r0, #16]
 80162b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80162bc:	ed90 1a07 	vldr	s2, [r0, #28]
 80162c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162c4:	edd0 2a06 	vldr	s5, [r0, #24]
 80162c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80162cc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80162d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80162d4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80162d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80162e0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80162e4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80162e6:	694a      	ldr	r2, [r1, #20]
 80162e8:	1b13      	subs	r3, r2, r4
 80162ea:	ee07 3a10 	vmov	s14, r3
 80162ee:	680b      	ldr	r3, [r1, #0]
 80162f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162f4:	1b1b      	subs	r3, r3, r4
 80162f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80162fa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80162fe:	ee07 3a10 	vmov	s14, r3
 8016302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016306:	ee27 7a04 	vmul.f32	s14, s14, s8
 801630a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801630e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016312:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8016316:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016318:	698b      	ldr	r3, [r1, #24]
 801631a:	1a9b      	subs	r3, r3, r2
 801631c:	ee06 3a90 	vmov	s13, r3
 8016320:	684b      	ldr	r3, [r1, #4]
 8016322:	1a9b      	subs	r3, r3, r2
 8016324:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016328:	ee07 3a10 	vmov	s14, r3
 801632c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016334:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016338:	ee27 7a04 	vmul.f32	s14, s14, s8
 801633c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016340:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016344:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8016348:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801634a:	694a      	ldr	r2, [r1, #20]
 801634c:	1b13      	subs	r3, r2, r4
 801634e:	ee07 3a10 	vmov	s14, r3
 8016352:	680b      	ldr	r3, [r1, #0]
 8016354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016358:	1b1b      	subs	r3, r3, r4
 801635a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801635e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016362:	ee07 3a10 	vmov	s14, r3
 8016366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801636a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801636e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016372:	edd0 5a08 	vldr	s11, [r0, #32]
 8016376:	ee31 1a65 	vsub.f32	s2, s2, s11
 801637a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801637e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016382:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8016386:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016388:	698b      	ldr	r3, [r1, #24]
 801638a:	1a9b      	subs	r3, r3, r2
 801638c:	ee07 3a10 	vmov	s14, r3
 8016390:	684b      	ldr	r3, [r1, #4]
 8016392:	1a9b      	subs	r3, r3, r2
 8016394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016398:	ee01 3a90 	vmov	s3, r3
 801639c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80163a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80163a4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80163a8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80163ac:	eea1 7a21 	vfma.f32	s14, s2, s3
 80163b0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80163b4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80163b8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80163ba:	694a      	ldr	r2, [r1, #20]
 80163bc:	1b13      	subs	r3, r2, r4
 80163be:	ee03 3a10 	vmov	s6, r3
 80163c2:	680b      	ldr	r3, [r1, #0]
 80163c4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80163c8:	1b1b      	subs	r3, r3, r4
 80163ca:	ee23 3a04 	vmul.f32	s6, s6, s8
 80163ce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80163d2:	ee03 3a10 	vmov	s6, r3
 80163d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80163da:	ee23 4a04 	vmul.f32	s8, s6, s8
 80163de:	eee1 5a04 	vfma.f32	s11, s2, s8
 80163e2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80163e6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80163ea:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80163ee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80163f2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80163f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fa:	dd13      	ble.n	8016424 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80163fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016400:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016404:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016406:	eee3 7a87 	vfma.f32	s15, s7, s14
 801640a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016412:	dd15      	ble.n	8016440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016414:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016418:	6403      	str	r3, [r0, #64]	@ 0x40
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	4623      	mov	r3, r4
 801641e:	e6fd      	b.n	801621c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016420:	462a      	mov	r2, r5
 8016422:	e706      	b.n	8016232 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016424:	d502      	bpl.n	801642c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016426:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801642a:	e7e9      	b.n	8016400 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801642c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016430:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016434:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	dade      	bge.n	80163fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801643e:	e7f2      	b.n	8016426 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016440:	d502      	bpl.n	8016448 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016442:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016446:	e7e7      	b.n	8016418 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016448:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801644c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016450:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	dadc      	bge.n	8016414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801645a:	e7f2      	b.n	8016442 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801645c:	3d800000 	.word	0x3d800000

08016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016464:	2714      	movs	r7, #20
 8016466:	435f      	muls	r7, r3
 8016468:	eb02 0c07 	add.w	ip, r2, r7
 801646c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016470:	f115 0e0f 	adds.w	lr, r5, #15
 8016474:	f100 80a2 	bmi.w	80165bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016478:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801647c:	9c08      	ldr	r4, [sp, #32]
 801647e:	2614      	movs	r6, #20
 8016480:	f8c0 e014 	str.w	lr, [r0, #20]
 8016484:	4366      	muls	r6, r4
 8016486:	eb02 0806 	add.w	r8, r2, r6
 801648a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801648e:	f115 040f 	adds.w	r4, r5, #15
 8016492:	f100 809f 	bmi.w	80165d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8016496:	1124      	asrs	r4, r4, #4
 8016498:	eba4 040e 	sub.w	r4, r4, lr
 801649c:	6184      	str	r4, [r0, #24]
 801649e:	2c00      	cmp	r4, #0
 80164a0:	f000 808a 	beq.w	80165b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80164a4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80164a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80164ac:	5995      	ldr	r5, [r2, r6]
 80164ae:	eba4 0809 	sub.w	r8, r4, r9
 80164b2:	59d4      	ldr	r4, [r2, r7]
 80164b4:	eba5 0a04 	sub.w	sl, r5, r4
 80164b8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80164bc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80164c0:	fb0e fe05 	mul.w	lr, lr, r5
 80164c4:	fb0a ee19 	mls	lr, sl, r9, lr
 80164c8:	fb08 e404 	mla	r4, r8, r4, lr
 80164cc:	3c01      	subs	r4, #1
 80164ce:	19a4      	adds	r4, r4, r6
 80164d0:	f100 808c 	bmi.w	80165ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80164d4:	fb94 fef6 	sdiv	lr, r4, r6
 80164d8:	fb06 441e 	mls	r4, r6, lr, r4
 80164dc:	f8c0 e000 	str.w	lr, [r0]
 80164e0:	6104      	str	r4, [r0, #16]
 80164e2:	2d00      	cmp	r5, #0
 80164e4:	f2c0 8095 	blt.w	8016612 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80164e8:	fb95 f4f6 	sdiv	r4, r5, r6
 80164ec:	fb06 5514 	mls	r5, r6, r4, r5
 80164f0:	6044      	str	r4, [r0, #4]
 80164f2:	6085      	str	r5, [r0, #8]
 80164f4:	60c6      	str	r6, [r0, #12]
 80164f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80164fa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80164fe:	6945      	ldr	r5, [r0, #20]
 8016500:	59d2      	ldr	r2, [r2, r7]
 8016502:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8016506:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8016634 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801650a:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801650e:	ee07 4a10 	vmov	s14, r4
 8016512:	6804      	ldr	r4, [r0, #0]
 8016514:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8016518:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801651c:	ee07 2a90 	vmov	s15, r2
 8016520:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016528:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801652c:	edd3 6a00 	vldr	s13, [r3]
 8016530:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016534:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8016538:	eee6 6a27 	vfma.f32	s13, s12, s15
 801653c:	edc0 6a07 	vstr	s13, [r0, #28]
 8016540:	edd0 6a01 	vldr	s13, [r0, #4]
 8016544:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8016548:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801654c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8016550:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016554:	ed80 6a08 	vstr	s12, [r0, #32]
 8016558:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801655a:	6242      	str	r2, [r0, #36]	@ 0x24
 801655c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8016560:	ed93 6a03 	vldr	s12, [r3, #12]
 8016564:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016568:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801656c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016570:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8016574:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8016578:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801657c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016580:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8016584:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016586:	6302      	str	r2, [r0, #48]	@ 0x30
 8016588:	ed93 6a06 	vldr	s12, [r3, #24]
 801658c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8016590:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016594:	eeb0 7a46 	vmov.f32	s14, s12
 8016598:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801659c:	eea6 7a27 	vfma.f32	s14, s12, s15
 80165a0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80165a4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80165a8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80165ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165b0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80165b4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80165b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80165b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165bc:	2410      	movs	r4, #16
 80165be:	f1c5 0501 	rsb	r5, r5, #1
 80165c2:	fb9e fef4 	sdiv	lr, lr, r4
 80165c6:	f015 050f 	ands.w	r5, r5, #15
 80165ca:	bf18      	it	ne
 80165cc:	2501      	movne	r5, #1
 80165ce:	ebae 0e05 	sub.w	lr, lr, r5
 80165d2:	e753      	b.n	801647c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80165d4:	f04f 0910 	mov.w	r9, #16
 80165d8:	f1c5 0501 	rsb	r5, r5, #1
 80165dc:	fb94 f4f9 	sdiv	r4, r4, r9
 80165e0:	f015 050f 	ands.w	r5, r5, #15
 80165e4:	bf18      	it	ne
 80165e6:	2501      	movne	r5, #1
 80165e8:	1b64      	subs	r4, r4, r5
 80165ea:	e755      	b.n	8016498 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80165ec:	4264      	negs	r4, r4
 80165ee:	fb94 fef6 	sdiv	lr, r4, r6
 80165f2:	f1ce 0800 	rsb	r8, lr, #0
 80165f6:	fb06 441e 	mls	r4, r6, lr, r4
 80165fa:	f8c0 8000 	str.w	r8, [r0]
 80165fe:	6104      	str	r4, [r0, #16]
 8016600:	2c00      	cmp	r4, #0
 8016602:	f43f af6e 	beq.w	80164e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8016606:	ea6f 0e0e 	mvn.w	lr, lr
 801660a:	1b34      	subs	r4, r6, r4
 801660c:	f8c0 e000 	str.w	lr, [r0]
 8016610:	e766      	b.n	80164e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8016612:	426d      	negs	r5, r5
 8016614:	fb95 f4f6 	sdiv	r4, r5, r6
 8016618:	f1c4 0e00 	rsb	lr, r4, #0
 801661c:	fb06 5514 	mls	r5, r6, r4, r5
 8016620:	f8c0 e004 	str.w	lr, [r0, #4]
 8016624:	6085      	str	r5, [r0, #8]
 8016626:	2d00      	cmp	r5, #0
 8016628:	f43f af64 	beq.w	80164f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801662c:	43e4      	mvns	r4, r4
 801662e:	1b75      	subs	r5, r6, r5
 8016630:	6044      	str	r4, [r0, #4]
 8016632:	e75e      	b.n	80164f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8016634:	3d800000 	.word	0x3d800000

08016638 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8016638:	4602      	mov	r2, r0
 801663a:	b148      	cbz	r0, 8016650 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801663c:	2300      	movs	r3, #0
 801663e:	b298      	uxth	r0, r3
 8016640:	3301      	adds	r3, #1
 8016642:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016646:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801664a:	2900      	cmp	r1, #0
 801664c:	d1f7      	bne.n	801663e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801664e:	4770      	bx	lr
 8016650:	4770      	bx	lr

08016652 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8016652:	b530      	push	{r4, r5, lr}
 8016654:	4604      	mov	r4, r0
 8016656:	b159      	cbz	r1, 8016670 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8016658:	b148      	cbz	r0, 801666e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801665a:	2300      	movs	r3, #0
 801665c:	b298      	uxth	r0, r3
 801665e:	4282      	cmp	r2, r0
 8016660:	d905      	bls.n	801666e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8016662:	5ccd      	ldrb	r5, [r1, r3]
 8016664:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8016668:	3301      	adds	r3, #1
 801666a:	2d00      	cmp	r5, #0
 801666c:	d1f6      	bne.n	801665c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801666e:	bd30      	pop	{r4, r5, pc}
 8016670:	4608      	mov	r0, r1
 8016672:	e7fc      	b.n	801666e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08016674 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8016674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016676:	b08b      	sub	sp, #44	@ 0x2c
 8016678:	468c      	mov	ip, r1
 801667a:	4604      	mov	r4, r0
 801667c:	2100      	movs	r1, #0
 801667e:	261f      	movs	r6, #31
 8016680:	af01      	add	r7, sp, #4
 8016682:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016686:	1e71      	subs	r1, r6, #1
 8016688:	fb94 fef3 	sdiv	lr, r4, r3
 801668c:	fb03 441e 	mls	r4, r3, lr, r4
 8016690:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8016694:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8016698:	b2ec      	uxtb	r4, r5
 801669a:	2d09      	cmp	r5, #9
 801669c:	bfd4      	ite	le
 801669e:	3430      	addle	r4, #48	@ 0x30
 80166a0:	3457      	addgt	r4, #87	@ 0x57
 80166a2:	b2e4      	uxtb	r4, r4
 80166a4:	55bc      	strb	r4, [r7, r6]
 80166a6:	4674      	mov	r4, lr
 80166a8:	b974      	cbnz	r4, 80166c8 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80166aa:	2800      	cmp	r0, #0
 80166ac:	da05      	bge.n	80166ba <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80166ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80166b0:	4419      	add	r1, r3
 80166b2:	232d      	movs	r3, #45	@ 0x2d
 80166b4:	f801 3c24 	strb.w	r3, [r1, #-36]
 80166b8:	1eb1      	subs	r1, r6, #2
 80166ba:	3101      	adds	r1, #1
 80166bc:	4660      	mov	r0, ip
 80166be:	4439      	add	r1, r7
 80166c0:	f7ff ffc7 	bl	8016652 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80166c4:	b00b      	add	sp, #44	@ 0x2c
 80166c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c8:	460e      	mov	r6, r1
 80166ca:	e7dc      	b.n	8016686 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080166cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80166cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ce:	468c      	mov	ip, r1
 80166d0:	b08b      	sub	sp, #44	@ 0x2c
 80166d2:	2100      	movs	r1, #0
 80166d4:	ae01      	add	r6, sp, #4
 80166d6:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80166da:	211f      	movs	r1, #31
 80166dc:	fbb0 f7f3 	udiv	r7, r0, r3
 80166e0:	fb03 0517 	mls	r5, r3, r7, r0
 80166e4:	4638      	mov	r0, r7
 80166e6:	b2ec      	uxtb	r4, r5
 80166e8:	2d09      	cmp	r5, #9
 80166ea:	bfd4      	ite	le
 80166ec:	3430      	addle	r4, #48	@ 0x30
 80166ee:	3457      	addgt	r4, #87	@ 0x57
 80166f0:	b2e4      	uxtb	r4, r4
 80166f2:	558c      	strb	r4, [r1, r6]
 80166f4:	1e4c      	subs	r4, r1, #1
 80166f6:	b92f      	cbnz	r7, 8016704 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80166f8:	4431      	add	r1, r6
 80166fa:	4660      	mov	r0, ip
 80166fc:	f7ff ffa9 	bl	8016652 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016700:	b00b      	add	sp, #44	@ 0x2c
 8016702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016704:	4621      	mov	r1, r4
 8016706:	e7e9      	b.n	80166dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08016708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8016708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	b085      	sub	sp, #20
 801670e:	4691      	mov	r9, r2
 8016710:	6802      	ldr	r2, [r0, #0]
 8016712:	4688      	mov	r8, r1
 8016714:	461c      	mov	r4, r3
 8016716:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801671a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801671e:	4683      	mov	fp, r0
 8016720:	4610      	mov	r0, r2
 8016722:	9103      	str	r1, [sp, #12]
 8016724:	9302      	str	r3, [sp, #8]
 8016726:	9201      	str	r2, [sp, #4]
 8016728:	f7ff ff86 	bl	8016638 <_ZN8touchgfx7Unicode6strlenEPKt>
 801672c:	f1b8 0f00 	cmp.w	r8, #0
 8016730:	bf0c      	ite	eq
 8016732:	4684      	moveq	ip, r0
 8016734:	f100 0c01 	addne.w	ip, r0, #1
 8016738:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801673c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8016740:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016742:	fa1f fc8c 	uxth.w	ip, ip
 8016746:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016748:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801674c:	9903      	ldr	r1, [sp, #12]
 801674e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016752:	d041      	beq.n	80167d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016754:	d834      	bhi.n	80167c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8016756:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801675a:	d059      	beq.n	8016810 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801675c:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8016760:	d03a      	beq.n	80167d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016762:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8016766:	d034      	beq.n	80167d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8016768:	2400      	movs	r4, #0
 801676a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801676e:	3a01      	subs	r2, #1
 8016770:	b169      	cbz	r1, 801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016772:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016774:	458c      	cmp	ip, r1
 8016776:	da09      	bge.n	801678c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8016778:	eba1 010c 	sub.w	r1, r1, ip
 801677c:	b289      	uxth	r1, r1
 801677e:	b933      	cbnz	r3, 801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016780:	2e00      	cmp	r6, #0
 8016782:	d051      	beq.n	8016828 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016784:	2800      	cmp	r0, #0
 8016786:	d04f      	beq.n	8016828 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016788:	440c      	add	r4, r1
 801678a:	b2a4      	uxth	r4, r4
 801678c:	2100      	movs	r1, #0
 801678e:	682b      	ldr	r3, [r5, #0]
 8016790:	4293      	cmp	r3, r2
 8016792:	da07      	bge.n	80167a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8016794:	f1b8 0f00 	cmp.w	r8, #0
 8016798:	d004      	beq.n	80167a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801679a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801679e:	682b      	ldr	r3, [r5, #0]
 80167a0:	3301      	adds	r3, #1
 80167a2:	602b      	str	r3, [r5, #0]
 80167a4:	2730      	movs	r7, #48	@ 0x30
 80167a6:	2c00      	cmp	r4, #0
 80167a8:	d04e      	beq.n	8016848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80167aa:	682e      	ldr	r6, [r5, #0]
 80167ac:	3c01      	subs	r4, #1
 80167ae:	42b2      	cmp	r2, r6
 80167b0:	b2a4      	uxth	r4, r4
 80167b2:	dd49      	ble.n	8016848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80167b4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80167b8:	682b      	ldr	r3, [r5, #0]
 80167ba:	3301      	adds	r3, #1
 80167bc:	602b      	str	r3, [r5, #0]
 80167be:	e7f2      	b.n	80167a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80167c0:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 80167c4:	d01d      	beq.n	8016802 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80167c6:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 80167ca:	d002      	beq.n	80167d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80167cc:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80167d0:	e7c9      	b.n	8016766 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80167d2:	4684      	mov	ip, r0
 80167d4:	f04f 0800 	mov.w	r8, #0
 80167d8:	2c00      	cmp	r4, #0
 80167da:	d0c6      	beq.n	801676a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80167dc:	b947      	cbnz	r7, 80167f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80167de:	2801      	cmp	r0, #1
 80167e0:	d106      	bne.n	80167f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80167e2:	8814      	ldrh	r4, [r2, #0]
 80167e4:	2c30      	cmp	r4, #48	@ 0x30
 80167e6:	bf02      	ittt	eq
 80167e8:	3202      	addeq	r2, #2
 80167ea:	4638      	moveq	r0, r7
 80167ec:	f8cb 2000 	streq.w	r2, [fp]
 80167f0:	45bc      	cmp	ip, r7
 80167f2:	da14      	bge.n	801681e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80167f4:	b2bf      	uxth	r7, r7
 80167f6:	eba7 040c 	sub.w	r4, r7, ip
 80167fa:	46bc      	mov	ip, r7
 80167fc:	b2a4      	uxth	r4, r4
 80167fe:	2600      	movs	r6, #0
 8016800:	e7b3      	b.n	801676a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016802:	4684      	mov	ip, r0
 8016804:	b16c      	cbz	r4, 8016822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8016806:	42b8      	cmp	r0, r7
 8016808:	dd00      	ble.n	801680c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801680a:	b2b8      	uxth	r0, r7
 801680c:	2400      	movs	r4, #0
 801680e:	e003      	b.n	8016818 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8016810:	f04f 0c01 	mov.w	ip, #1
 8016814:	2400      	movs	r4, #0
 8016816:	4660      	mov	r0, ip
 8016818:	4626      	mov	r6, r4
 801681a:	46a0      	mov	r8, r4
 801681c:	e7a5      	b.n	801676a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801681e:	2400      	movs	r4, #0
 8016820:	e7ed      	b.n	80167fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8016822:	4626      	mov	r6, r4
 8016824:	46a0      	mov	r8, r4
 8016826:	e7a0      	b.n	801676a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016828:	2900      	cmp	r1, #0
 801682a:	d0b0      	beq.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801682c:	2720      	movs	r7, #32
 801682e:	682e      	ldr	r6, [r5, #0]
 8016830:	2900      	cmp	r1, #0
 8016832:	d0ac      	beq.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016834:	3901      	subs	r1, #1
 8016836:	4296      	cmp	r6, r2
 8016838:	b289      	uxth	r1, r1
 801683a:	daa7      	bge.n	801678c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801683c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8016840:	682b      	ldr	r3, [r5, #0]
 8016842:	3301      	adds	r3, #1
 8016844:	602b      	str	r3, [r5, #0]
 8016846:	e7f2      	b.n	801682e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8016848:	b188      	cbz	r0, 801686e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801684a:	682b      	ldr	r3, [r5, #0]
 801684c:	3801      	subs	r0, #1
 801684e:	429a      	cmp	r2, r3
 8016850:	b280      	uxth	r0, r0
 8016852:	dd0c      	ble.n	801686e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8016854:	f8db 3000 	ldr.w	r3, [fp]
 8016858:	1c9c      	adds	r4, r3, #2
 801685a:	f8cb 4000 	str.w	r4, [fp]
 801685e:	881c      	ldrh	r4, [r3, #0]
 8016860:	682b      	ldr	r3, [r5, #0]
 8016862:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8016866:	682b      	ldr	r3, [r5, #0]
 8016868:	3301      	adds	r3, #1
 801686a:	602b      	str	r3, [r5, #0]
 801686c:	e7ec      	b.n	8016848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801686e:	2620      	movs	r6, #32
 8016870:	b151      	cbz	r1, 8016888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016872:	6828      	ldr	r0, [r5, #0]
 8016874:	3901      	subs	r1, #1
 8016876:	4282      	cmp	r2, r0
 8016878:	b289      	uxth	r1, r1
 801687a:	dd05      	ble.n	8016888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801687c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8016880:	682b      	ldr	r3, [r5, #0]
 8016882:	3301      	adds	r3, #1
 8016884:	602b      	str	r3, [r5, #0]
 8016886:	e7f3      	b.n	8016870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8016888:	b005      	add	sp, #20
 801688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801688e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801688e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016892:	2400      	movs	r4, #0
 8016894:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8016898:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801689c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80168a0:	8014      	strh	r4, [r2, #0]
 80168a2:	701c      	strb	r4, [r3, #0]
 80168a4:	f888 4000 	strb.w	r4, [r8]
 80168a8:	f88c 4000 	strb.w	r4, [ip]
 80168ac:	f88e 4000 	strb.w	r4, [lr]
 80168b0:	703c      	strb	r4, [r7, #0]
 80168b2:	6804      	ldr	r4, [r0, #0]
 80168b4:	b1a4      	cbz	r4, 80168e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80168b6:	8824      	ldrh	r4, [r4, #0]
 80168b8:	f04f 0901 	mov.w	r9, #1
 80168bc:	b314      	cbz	r4, 8016904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80168be:	2c2b      	cmp	r4, #43	@ 0x2b
 80168c0:	d001      	beq.n	80168c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80168c2:	2c20      	cmp	r4, #32
 80168c4:	d110      	bne.n	80168e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80168c6:	8014      	strh	r4, [r2, #0]
 80168c8:	6804      	ldr	r4, [r0, #0]
 80168ca:	b10c      	cbz	r4, 80168d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80168cc:	3402      	adds	r4, #2
 80168ce:	6004      	str	r4, [r0, #0]
 80168d0:	680c      	ldr	r4, [r1, #0]
 80168d2:	b10c      	cbz	r4, 80168d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80168d4:	3401      	adds	r4, #1
 80168d6:	600c      	str	r4, [r1, #0]
 80168d8:	6804      	ldr	r4, [r0, #0]
 80168da:	b17c      	cbz	r4, 80168fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80168dc:	8824      	ldrh	r4, [r4, #0]
 80168de:	e7ed      	b.n	80168bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80168e0:	680c      	ldr	r4, [r1, #0]
 80168e2:	b17c      	cbz	r4, 8016904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80168e4:	7824      	ldrb	r4, [r4, #0]
 80168e6:	e7e7      	b.n	80168b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80168e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80168ea:	d102      	bne.n	80168f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80168ec:	f883 9000 	strb.w	r9, [r3]
 80168f0:	e7ea      	b.n	80168c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80168f2:	2c23      	cmp	r4, #35	@ 0x23
 80168f4:	d107      	bne.n	8016906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80168f6:	f888 9000 	strb.w	r9, [r8]
 80168fa:	e7e5      	b.n	80168c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80168fc:	680c      	ldr	r4, [r1, #0]
 80168fe:	b10c      	cbz	r4, 8016904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016900:	7824      	ldrb	r4, [r4, #0]
 8016902:	e7db      	b.n	80168bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016904:	2400      	movs	r4, #0
 8016906:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801690a:	2b09      	cmp	r3, #9
 801690c:	d901      	bls.n	8016912 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801690e:	2c2a      	cmp	r4, #42	@ 0x2a
 8016910:	d122      	bne.n	8016958 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016912:	2301      	movs	r3, #1
 8016914:	2c30      	cmp	r4, #48	@ 0x30
 8016916:	f88e 3000 	strb.w	r3, [lr]
 801691a:	d10d      	bne.n	8016938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801691c:	f88c 3000 	strb.w	r3, [ip]
 8016920:	6803      	ldr	r3, [r0, #0]
 8016922:	b10b      	cbz	r3, 8016928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8016924:	3302      	adds	r3, #2
 8016926:	6003      	str	r3, [r0, #0]
 8016928:	680b      	ldr	r3, [r1, #0]
 801692a:	b10b      	cbz	r3, 8016930 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801692c:	3301      	adds	r3, #1
 801692e:	600b      	str	r3, [r1, #0]
 8016930:	6803      	ldr	r3, [r0, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d02f      	beq.n	8016996 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8016936:	881c      	ldrh	r4, [r3, #0]
 8016938:	2c2a      	cmp	r4, #42	@ 0x2a
 801693a:	d135      	bne.n	80169a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801693c:	f04f 33ff 	mov.w	r3, #4294967295
 8016940:	6033      	str	r3, [r6, #0]
 8016942:	6803      	ldr	r3, [r0, #0]
 8016944:	b10b      	cbz	r3, 801694a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8016946:	3302      	adds	r3, #2
 8016948:	6003      	str	r3, [r0, #0]
 801694a:	680b      	ldr	r3, [r1, #0]
 801694c:	b10b      	cbz	r3, 8016952 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801694e:	3301      	adds	r3, #1
 8016950:	600b      	str	r3, [r1, #0]
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	b31b      	cbz	r3, 801699e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8016956:	881c      	ldrh	r4, [r3, #0]
 8016958:	2c2e      	cmp	r4, #46	@ 0x2e
 801695a:	d11a      	bne.n	8016992 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801695c:	2301      	movs	r3, #1
 801695e:	703b      	strb	r3, [r7, #0]
 8016960:	6803      	ldr	r3, [r0, #0]
 8016962:	b10b      	cbz	r3, 8016968 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8016964:	3302      	adds	r3, #2
 8016966:	6003      	str	r3, [r0, #0]
 8016968:	680b      	ldr	r3, [r1, #0]
 801696a:	b10b      	cbz	r3, 8016970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801696c:	3301      	adds	r3, #1
 801696e:	600b      	str	r3, [r1, #0]
 8016970:	6803      	ldr	r3, [r0, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d036      	beq.n	80169e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8016976:	881b      	ldrh	r3, [r3, #0]
 8016978:	2b2a      	cmp	r3, #42	@ 0x2a
 801697a:	d137      	bne.n	80169ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801697c:	f04f 33ff 	mov.w	r3, #4294967295
 8016980:	602b      	str	r3, [r5, #0]
 8016982:	6803      	ldr	r3, [r0, #0]
 8016984:	b10b      	cbz	r3, 801698a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8016986:	3302      	adds	r3, #2
 8016988:	6003      	str	r3, [r0, #0]
 801698a:	680b      	ldr	r3, [r1, #0]
 801698c:	b10b      	cbz	r3, 8016992 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801698e:	3301      	adds	r3, #1
 8016990:	600b      	str	r3, [r1, #0]
 8016992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016996:	680c      	ldr	r4, [r1, #0]
 8016998:	b134      	cbz	r4, 80169a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801699a:	7824      	ldrb	r4, [r4, #0]
 801699c:	e7cc      	b.n	8016938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801699e:	680b      	ldr	r3, [r1, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d0f6      	beq.n	8016992 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80169a4:	781c      	ldrb	r4, [r3, #0]
 80169a6:	e7d7      	b.n	8016958 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80169a8:	2300      	movs	r3, #0
 80169aa:	220a      	movs	r2, #10
 80169ac:	6033      	str	r3, [r6, #0]
 80169ae:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80169b2:	fa1f f38c 	uxth.w	r3, ip
 80169b6:	2b09      	cmp	r3, #9
 80169b8:	d8ce      	bhi.n	8016958 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80169ba:	6833      	ldr	r3, [r6, #0]
 80169bc:	fb02 c303 	mla	r3, r2, r3, ip
 80169c0:	6033      	str	r3, [r6, #0]
 80169c2:	6803      	ldr	r3, [r0, #0]
 80169c4:	b10b      	cbz	r3, 80169ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80169c6:	3302      	adds	r3, #2
 80169c8:	6003      	str	r3, [r0, #0]
 80169ca:	680b      	ldr	r3, [r1, #0]
 80169cc:	b10b      	cbz	r3, 80169d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80169ce:	3301      	adds	r3, #1
 80169d0:	600b      	str	r3, [r1, #0]
 80169d2:	6803      	ldr	r3, [r0, #0]
 80169d4:	b10b      	cbz	r3, 80169da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80169d6:	881c      	ldrh	r4, [r3, #0]
 80169d8:	e7e9      	b.n	80169ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80169da:	680c      	ldr	r4, [r1, #0]
 80169dc:	2c00      	cmp	r4, #0
 80169de:	d0e6      	beq.n	80169ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80169e0:	7824      	ldrb	r4, [r4, #0]
 80169e2:	e7e4      	b.n	80169ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80169e4:	680b      	ldr	r3, [r1, #0]
 80169e6:	b10b      	cbz	r3, 80169ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	e7c5      	b.n	8016978 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80169ec:	2200      	movs	r2, #0
 80169ee:	240a      	movs	r4, #10
 80169f0:	602a      	str	r2, [r5, #0]
 80169f2:	3b30      	subs	r3, #48	@ 0x30
 80169f4:	682a      	ldr	r2, [r5, #0]
 80169f6:	b29e      	uxth	r6, r3
 80169f8:	2e09      	cmp	r6, #9
 80169fa:	d813      	bhi.n	8016a24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80169fc:	fb04 3302 	mla	r3, r4, r2, r3
 8016a00:	602b      	str	r3, [r5, #0]
 8016a02:	6803      	ldr	r3, [r0, #0]
 8016a04:	b10b      	cbz	r3, 8016a0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8016a06:	3302      	adds	r3, #2
 8016a08:	6003      	str	r3, [r0, #0]
 8016a0a:	680b      	ldr	r3, [r1, #0]
 8016a0c:	b10b      	cbz	r3, 8016a12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8016a0e:	3301      	adds	r3, #1
 8016a10:	600b      	str	r3, [r1, #0]
 8016a12:	6803      	ldr	r3, [r0, #0]
 8016a14:	b10b      	cbz	r3, 8016a1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8016a16:	881b      	ldrh	r3, [r3, #0]
 8016a18:	e7eb      	b.n	80169f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a1a:	680b      	ldr	r3, [r1, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d0e8      	beq.n	80169f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	e7e6      	b.n	80169f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a24:	2a06      	cmp	r2, #6
 8016a26:	bfa8      	it	ge
 8016a28:	2206      	movge	r2, #6
 8016a2a:	602a      	str	r2, [r5, #0]
 8016a2c:	e7b1      	b.n	8016992 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08016a2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8016a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a32:	b0a3      	sub	sp, #140	@ 0x8c
 8016a34:	2600      	movs	r6, #0
 8016a36:	4607      	mov	r7, r0
 8016a38:	4688      	mov	r8, r1
 8016a3a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8016a3e:	4631      	mov	r1, r6
 8016a40:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8016a42:	4648      	mov	r0, r9
 8016a44:	960d      	str	r6, [sp, #52]	@ 0x34
 8016a46:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016a4a:	2242      	movs	r2, #66	@ 0x42
 8016a4c:	f00b fee4 	bl	8022818 <memset>
 8016a50:	b15f      	cbz	r7, 8016a6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8016a52:	f108 3aff 	add.w	sl, r8, #4294967295
 8016a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a5a:	b152      	cbz	r2, 8016a72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8016a5c:	8812      	ldrh	r2, [r2, #0]
 8016a5e:	b10a      	cbz	r2, 8016a64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016a60:	459a      	cmp	sl, r3
 8016a62:	dc2e      	bgt.n	8016ac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8016a64:	2200      	movs	r2, #0
 8016a66:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016a6a:	4638      	mov	r0, r7
 8016a6c:	b023      	add	sp, #140	@ 0x8c
 8016a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a72:	9a08      	ldr	r2, [sp, #32]
 8016a74:	2a00      	cmp	r2, #0
 8016a76:	d0f5      	beq.n	8016a64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016a78:	7812      	ldrb	r2, [r2, #0]
 8016a7a:	e7f0      	b.n	8016a5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016a7c:	2d00      	cmp	r5, #0
 8016a7e:	d0ea      	beq.n	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016a80:	782a      	ldrb	r2, [r5, #0]
 8016a82:	b142      	cbz	r2, 8016a96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8016a84:	2a25      	cmp	r2, #37	@ 0x25
 8016a86:	d001      	beq.n	8016a8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8016a88:	459a      	cmp	sl, r3
 8016a8a:	dc08      	bgt.n	8016a9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016a8c:	f1bb 0f00 	cmp.w	fp, #0
 8016a90:	d121      	bne.n	8016ad6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8016a92:	2d00      	cmp	r5, #0
 8016a94:	d0df      	beq.n	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016a96:	782a      	ldrb	r2, [r5, #0]
 8016a98:	f04f 0b00 	mov.w	fp, #0
 8016a9c:	e01d      	b.n	8016ada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016a9e:	f1bb 0f00 	cmp.w	fp, #0
 8016aa2:	d077      	beq.n	8016b94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8016aa4:	f8bb 2000 	ldrh.w	r2, [fp]
 8016aa8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016aac:	f1bb 0f00 	cmp.w	fp, #0
 8016ab0:	d002      	beq.n	8016ab8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8016ab2:	f10b 0202 	add.w	r2, fp, #2
 8016ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ab8:	b10d      	cbz	r5, 8016abe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8016aba:	3501      	adds	r5, #1
 8016abc:	9508      	str	r5, [sp, #32]
 8016abe:	3301      	adds	r3, #1
 8016ac0:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ac4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8016ac8:	f1bb 0f00 	cmp.w	fp, #0
 8016acc:	d0d6      	beq.n	8016a7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016ace:	f8bb 2000 	ldrh.w	r2, [fp]
 8016ad2:	2a00      	cmp	r2, #0
 8016ad4:	d1d6      	bne.n	8016a84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8016ad6:	f8bb 2000 	ldrh.w	r2, [fp]
 8016ada:	2a00      	cmp	r2, #0
 8016adc:	d0bb      	beq.n	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016ade:	459a      	cmp	sl, r3
 8016ae0:	ddb9      	ble.n	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016ae2:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8016ae6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016aea:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8016aee:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8016af2:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8016af6:	960e      	str	r6, [sp, #56]	@ 0x38
 8016af8:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8016afc:	960f      	str	r6, [sp, #60]	@ 0x3c
 8016afe:	f1bb 0f00 	cmp.w	fp, #0
 8016b02:	d002      	beq.n	8016b0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8016b04:	f10b 0302 	add.w	r3, fp, #2
 8016b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b0a:	b10d      	cbz	r5, 8016b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8016b0c:	1c6b      	adds	r3, r5, #1
 8016b0e:	9308      	str	r3, [sp, #32]
 8016b10:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016b12:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8016b16:	a908      	add	r1, sp, #32
 8016b18:	a809      	add	r0, sp, #36	@ 0x24
 8016b1a:	9305      	str	r3, [sp, #20]
 8016b1c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8016b20:	9304      	str	r3, [sp, #16]
 8016b22:	ab0e      	add	r3, sp, #56	@ 0x38
 8016b24:	9303      	str	r3, [sp, #12]
 8016b26:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b28:	9302      	str	r3, [sp, #8]
 8016b2a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8016b2e:	9301      	str	r3, [sp, #4]
 8016b30:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8016b34:	9300      	str	r3, [sp, #0]
 8016b36:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8016b3a:	f7ff fea8 	bl	801688e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8016b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	bfbf      	itttt	lt
 8016b44:	6823      	ldrlt	r3, [r4, #0]
 8016b46:	3404      	addlt	r4, #4
 8016b48:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016b4c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8016b4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	bfbe      	ittt	lt
 8016b54:	6823      	ldrlt	r3, [r4, #0]
 8016b56:	3404      	addlt	r4, #4
 8016b58:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016b5c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8016b60:	bfb8      	it	lt
 8016b62:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8016b64:	b1d9      	cbz	r1, 8016b9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8016b66:	880b      	ldrh	r3, [r1, #0]
 8016b68:	2b69      	cmp	r3, #105	@ 0x69
 8016b6a:	d01f      	beq.n	8016bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016b6c:	d82f      	bhi.n	8016bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8016b6e:	2b58      	cmp	r3, #88	@ 0x58
 8016b70:	d01c      	beq.n	8016bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016b72:	d818      	bhi.n	8016ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8016b74:	2b25      	cmp	r3, #37	@ 0x25
 8016b76:	d034      	beq.n	8016be2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8016b78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016b7a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016b7e:	f1bb 0f00 	cmp.w	fp, #0
 8016b82:	f000 80b7 	beq.w	8016cf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8016b86:	f8bb 5000 	ldrh.w	r5, [fp]
 8016b8a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016b8e:	3301      	adds	r3, #1
 8016b90:	930d      	str	r3, [sp, #52]	@ 0x34
 8016b92:	e029      	b.n	8016be8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016b94:	b10d      	cbz	r5, 8016b9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8016b96:	782a      	ldrb	r2, [r5, #0]
 8016b98:	e786      	b.n	8016aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016b9a:	462a      	mov	r2, r5
 8016b9c:	e784      	b.n	8016aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016b9e:	2a00      	cmp	r2, #0
 8016ba0:	d0ea      	beq.n	8016b78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016ba2:	7813      	ldrb	r3, [r2, #0]
 8016ba4:	e7e0      	b.n	8016b68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8016ba6:	3b63      	subs	r3, #99	@ 0x63
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d8e5      	bhi.n	8016b78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016bac:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8016bb0:	b329      	cbz	r1, 8016bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8016bb2:	880b      	ldrh	r3, [r1, #0]
 8016bb4:	2b69      	cmp	r3, #105	@ 0x69
 8016bb6:	d063      	beq.n	8016c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016bb8:	d825      	bhi.n	8016c06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8016bba:	2b63      	cmp	r3, #99	@ 0x63
 8016bbc:	d038      	beq.n	8016c30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8016bbe:	2b64      	cmp	r3, #100	@ 0x64
 8016bc0:	d05e      	beq.n	8016c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016bc2:	2b58      	cmp	r3, #88	@ 0x58
 8016bc4:	d07a      	beq.n	8016cbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8016bc6:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8016bca:	4625      	mov	r5, r4
 8016bcc:	e036      	b.n	8016c3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016bce:	2b73      	cmp	r3, #115	@ 0x73
 8016bd0:	d0ec      	beq.n	8016bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016bd2:	d802      	bhi.n	8016bda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8016bd4:	2b6f      	cmp	r3, #111	@ 0x6f
 8016bd6:	d1cf      	bne.n	8016b78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016bd8:	e7e8      	b.n	8016bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016bda:	2b75      	cmp	r3, #117	@ 0x75
 8016bdc:	d0e6      	beq.n	8016bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016bde:	2b78      	cmp	r3, #120	@ 0x78
 8016be0:	e7f9      	b.n	8016bd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8016be2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016be4:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8016be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bea:	b10b      	cbz	r3, 8016bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8016bec:	3302      	adds	r3, #2
 8016bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bf0:	9b08      	ldr	r3, [sp, #32]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f43f af2f 	beq.w	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	9308      	str	r3, [sp, #32]
 8016bfc:	e72b      	b.n	8016a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016bfe:	2a00      	cmp	r2, #0
 8016c00:	d0e1      	beq.n	8016bc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c02:	7813      	ldrb	r3, [r2, #0]
 8016c04:	e7d6      	b.n	8016bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8016c06:	2b73      	cmp	r3, #115	@ 0x73
 8016c08:	d036      	beq.n	8016c78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8016c0a:	d807      	bhi.n	8016c1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8016c0c:	2b6f      	cmp	r3, #111	@ 0x6f
 8016c0e:	d1da      	bne.n	8016bc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c12:	1d25      	adds	r5, r4, #4
 8016c14:	2308      	movs	r3, #8
 8016c16:	eba8 0202 	sub.w	r2, r8, r2
 8016c1a:	e049      	b.n	8016cb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016c1c:	2b75      	cmp	r3, #117	@ 0x75
 8016c1e:	d042      	beq.n	8016ca6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8016c20:	2b78      	cmp	r3, #120	@ 0x78
 8016c22:	d1d0      	bne.n	8016bc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c26:	1d25      	adds	r5, r4, #4
 8016c28:	2310      	movs	r3, #16
 8016c2a:	eba8 0202 	sub.w	r2, r8, r2
 8016c2e:	e03f      	b.n	8016cb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016c30:	6823      	ldr	r3, [r4, #0]
 8016c32:	1d25      	adds	r5, r4, #4
 8016c34:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8016c38:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8016c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c3e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d051      	beq.n	8016cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8016c46:	881a      	ldrh	r2, [r3, #0]
 8016c48:	a80d      	add	r0, sp, #52	@ 0x34
 8016c4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8016c4e:	462c      	mov	r4, r5
 8016c50:	9005      	str	r0, [sp, #20]
 8016c52:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8016c56:	9004      	str	r0, [sp, #16]
 8016c58:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8016c5a:	9003      	str	r0, [sp, #12]
 8016c5c:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8016c60:	9002      	str	r0, [sp, #8]
 8016c62:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8016c64:	9001      	str	r0, [sp, #4]
 8016c66:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8016c6a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8016c6e:	9000      	str	r0, [sp, #0]
 8016c70:	a810      	add	r0, sp, #64	@ 0x40
 8016c72:	f7ff fd49 	bl	8016708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8016c76:	e7b7      	b.n	8016be8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016c78:	1d25      	adds	r5, r4, #4
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	9310      	str	r3, [sp, #64]	@ 0x40
 8016c7e:	e7dd      	b.n	8016c3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016c80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c82:	230a      	movs	r3, #10
 8016c84:	4649      	mov	r1, r9
 8016c86:	6820      	ldr	r0, [r4, #0]
 8016c88:	eba8 0202 	sub.w	r2, r8, r2
 8016c8c:	1d25      	adds	r5, r4, #4
 8016c8e:	b292      	uxth	r2, r2
 8016c90:	f7ff fcf0 	bl	8016674 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8016c94:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016c98:	2b2d      	cmp	r3, #45	@ 0x2d
 8016c9a:	d1cf      	bne.n	8016c3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016c9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016ca0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ca2:	3302      	adds	r3, #2
 8016ca4:	e7ea      	b.n	8016c7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8016ca6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016ca8:	1d25      	adds	r5, r4, #4
 8016caa:	230a      	movs	r3, #10
 8016cac:	eba8 0202 	sub.w	r2, r8, r2
 8016cb0:	b292      	uxth	r2, r2
 8016cb2:	4649      	mov	r1, r9
 8016cb4:	6820      	ldr	r0, [r4, #0]
 8016cb6:	f7ff fd09 	bl	80166cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8016cba:	e7bf      	b.n	8016c3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016cbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016cbe:	2310      	movs	r3, #16
 8016cc0:	4649      	mov	r1, r9
 8016cc2:	6820      	ldr	r0, [r4, #0]
 8016cc4:	eba8 0202 	sub.w	r2, r8, r2
 8016cc8:	1d25      	adds	r5, r4, #4
 8016cca:	b292      	uxth	r2, r2
 8016ccc:	f7ff fcfe 	bl	80166cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8016cd0:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8016cd4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d0af      	beq.n	8016c3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016cdc:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8016ce0:	2919      	cmp	r1, #25
 8016ce2:	d8f7      	bhi.n	8016cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016ce4:	3b20      	subs	r3, #32
 8016ce6:	8013      	strh	r3, [r2, #0]
 8016ce8:	e7f4      	b.n	8016cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016cea:	9a08      	ldr	r2, [sp, #32]
 8016cec:	2a00      	cmp	r2, #0
 8016cee:	d0ab      	beq.n	8016c48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016cf0:	7812      	ldrb	r2, [r2, #0]
 8016cf2:	e7a9      	b.n	8016c48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016cf4:	2d00      	cmp	r5, #0
 8016cf6:	f43f af48 	beq.w	8016b8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8016cfa:	782d      	ldrb	r5, [r5, #0]
 8016cfc:	e745      	b.n	8016b8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08016cfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8016cfe:	b507      	push	{r0, r1, r2, lr}
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	4613      	mov	r3, r2
 8016d04:	2200      	movs	r2, #0
 8016d06:	f7ff fe92 	bl	8016a2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8016d0a:	b003      	add	sp, #12
 8016d0c:	f85d fb04 	ldr.w	pc, [sp], #4

08016d10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8016d10:	b40c      	push	{r2, r3}
 8016d12:	b507      	push	{r0, r1, r2, lr}
 8016d14:	ab04      	add	r3, sp, #16
 8016d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d1a:	9301      	str	r3, [sp, #4]
 8016d1c:	f7ff ffef 	bl	8016cfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8016d20:	b003      	add	sp, #12
 8016d22:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d26:	b002      	add	sp, #8
 8016d28:	4770      	bx	lr
	...

08016d2c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016d2c:	4b01      	ldr	r3, [pc, #4]	@ (8016d34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8016d2e:	6018      	str	r0, [r3, #0]
 8016d30:	4770      	bx	lr
 8016d32:	bf00      	nop
 8016d34:	240252d4 	.word	0x240252d4

08016d38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8016d38:	4b06      	ldr	r3, [pc, #24]	@ (8016d54 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8016d3a:	881a      	ldrh	r2, [r3, #0]
 8016d3c:	4282      	cmp	r2, r0
 8016d3e:	d807      	bhi.n	8016d50 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8016d40:	4b05      	ldr	r3, [pc, #20]	@ (8016d58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8016d42:	881b      	ldrh	r3, [r3, #0]
 8016d44:	4413      	add	r3, r2
 8016d46:	4298      	cmp	r0, r3
 8016d48:	bfac      	ite	ge
 8016d4a:	2000      	movge	r0, #0
 8016d4c:	2001      	movlt	r0, #1
 8016d4e:	4770      	bx	lr
 8016d50:	2000      	movs	r0, #0
 8016d52:	4770      	bx	lr
 8016d54:	240252f4 	.word	0x240252f4
 8016d58:	240252f8 	.word	0x240252f8

08016d5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016d5c:	b508      	push	{r3, lr}
 8016d5e:	4601      	mov	r1, r0
 8016d60:	f7ff ffea 	bl	8016d38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016d64:	b118      	cbz	r0, 8016d6e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8016d66:	4b02      	ldr	r3, [pc, #8]	@ (8016d70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8016d6e:	bd08      	pop	{r3, pc}
 8016d70:	240252d8 	.word	0x240252d8

08016d74 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8016d74:	b538      	push	{r3, r4, r5, lr}
 8016d76:	4604      	mov	r4, r0
 8016d78:	f7ff ffde 	bl	8016d38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016d7c:	b1d8      	cbz	r0, 8016db6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8016d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016dbc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8016d80:	881b      	ldrh	r3, [r3, #0]
 8016d82:	1ae4      	subs	r4, r4, r3
 8016d84:	230e      	movs	r3, #14
 8016d86:	4363      	muls	r3, r4
 8016d88:	4c0d      	ldr	r4, [pc, #52]	@ (8016dc0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8016d8a:	6825      	ldr	r5, [r4, #0]
 8016d8c:	18ea      	adds	r2, r5, r3
 8016d8e:	7b12      	ldrb	r2, [r2, #12]
 8016d90:	f012 0220 	ands.w	r2, r2, #32
 8016d94:	d010      	beq.n	8016db8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8016d96:	f9b1 2000 	ldrsh.w	r2, [r1]
 8016d9a:	52ea      	strh	r2, [r5, r3]
 8016d9c:	6822      	ldr	r2, [r4, #0]
 8016d9e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016da2:	441a      	add	r2, r3
 8016da4:	8055      	strh	r5, [r2, #2]
 8016da6:	6822      	ldr	r2, [r4, #0]
 8016da8:	4413      	add	r3, r2
 8016daa:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8016dae:	809a      	strh	r2, [r3, #4]
 8016db0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016db4:	80da      	strh	r2, [r3, #6]
 8016db6:	bd38      	pop	{r3, r4, r5, pc}
 8016db8:	4610      	mov	r0, r2
 8016dba:	e7fc      	b.n	8016db6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8016dbc:	240252f4 	.word	0x240252f4
 8016dc0:	240252dc 	.word	0x240252dc

08016dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8016dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016dc8:	4606      	mov	r6, r0
 8016dca:	460c      	mov	r4, r1
 8016dcc:	f7ff ffb4 	bl	8016d38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016dd0:	b918      	cbnz	r0, 8016dda <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8016dd2:	2000      	movs	r0, #0
 8016dd4:	b002      	add	sp, #8
 8016dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dda:	4608      	mov	r0, r1
 8016ddc:	f7f6 fea7 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016de0:	2800      	cmp	r0, #0
 8016de2:	d1f6      	bne.n	8016dd2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016de4:	4b3f      	ldr	r3, [pc, #252]	@ (8016ee4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8016de6:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8016ee8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8016dea:	881d      	ldrh	r5, [r3, #0]
 8016dec:	f8d9 a000 	ldr.w	sl, [r9]
 8016df0:	46c8      	mov	r8, r9
 8016df2:	1b73      	subs	r3, r6, r5
 8016df4:	250e      	movs	r5, #14
 8016df6:	435d      	muls	r5, r3
 8016df8:	eb0a 0705 	add.w	r7, sl, r5
 8016dfc:	7b3b      	ldrb	r3, [r7, #12]
 8016dfe:	f013 0f20 	tst.w	r3, #32
 8016e02:	d0e6      	beq.n	8016dd2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016e04:	4621      	mov	r1, r4
 8016e06:	4638      	mov	r0, r7
 8016e08:	f7fc fa50 	bl	80132ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	d1e1      	bne.n	8016dd4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016e10:	4639      	mov	r1, r7
 8016e12:	4620      	mov	r0, r4
 8016e14:	f7fc fa4a 	bl	80132ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8016e18:	b108      	cbz	r0, 8016e1e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	e020      	b.n	8016e60 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8016e1e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016e22:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d11e      	bne.n	8016e68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016e2a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016e2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d118      	bne.n	8016e68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016e36:	6820      	ldr	r0, [r4, #0]
 8016e38:	466b      	mov	r3, sp
 8016e3a:	6861      	ldr	r1, [r4, #4]
 8016e3c:	c303      	stmia	r3!, {r0, r1}
 8016e3e:	4639      	mov	r1, r7
 8016e40:	4668      	mov	r0, sp
 8016e42:	f7fc fa59 	bl	80132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016e46:	f8d9 3000 	ldr.w	r3, [r9]
 8016e4a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016e4e:	442b      	add	r3, r5
 8016e50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016e54:	4413      	add	r3, r2
 8016e56:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8016e5a:	4293      	cmp	r3, r2
 8016e5c:	dc04      	bgt.n	8016e68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016e5e:	4669      	mov	r1, sp
 8016e60:	4630      	mov	r0, r6
 8016e62:	f7ff ff87 	bl	8016d74 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8016e66:	e7b5      	b.n	8016dd4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016e68:	f8d8 3000 	ldr.w	r3, [r8]
 8016e6c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016e70:	442b      	add	r3, r5
 8016e72:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016e76:	4291      	cmp	r1, r2
 8016e78:	d119      	bne.n	8016eae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016e7a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016e7e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016e82:	4291      	cmp	r1, r2
 8016e84:	d113      	bne.n	8016eae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016e86:	6820      	ldr	r0, [r4, #0]
 8016e88:	466a      	mov	r2, sp
 8016e8a:	6861      	ldr	r1, [r4, #4]
 8016e8c:	c203      	stmia	r2!, {r0, r1}
 8016e8e:	4619      	mov	r1, r3
 8016e90:	4668      	mov	r0, sp
 8016e92:	f7fc fa31 	bl	80132f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016e96:	f8d8 3000 	ldr.w	r3, [r8]
 8016e9a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016e9e:	442b      	add	r3, r5
 8016ea0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	ddd7      	ble.n	8016e5e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8016eae:	4620      	mov	r0, r4
 8016eb0:	f7f6 fe3d 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016eb4:	b990      	cbnz	r0, 8016edc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8016eb6:	88a7      	ldrh	r7, [r4, #4]
 8016eb8:	88e3      	ldrh	r3, [r4, #6]
 8016eba:	fb17 f703 	smulbb	r7, r7, r3
 8016ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8016ec2:	441d      	add	r5, r3
 8016ec4:	4628      	mov	r0, r5
 8016ec6:	f7f6 fe32 	bl	800db2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016eca:	b948      	cbnz	r0, 8016ee0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8016ecc:	88ab      	ldrh	r3, [r5, #4]
 8016ece:	88ea      	ldrh	r2, [r5, #6]
 8016ed0:	fb13 f302 	smulbb	r3, r3, r2
 8016ed4:	42bb      	cmp	r3, r7
 8016ed6:	f6bf af7c 	bge.w	8016dd2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016eda:	e79e      	b.n	8016e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8016edc:	2700      	movs	r7, #0
 8016ede:	e7ee      	b.n	8016ebe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	e7f7      	b.n	8016ed4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8016ee4:	240252f4 	.word	0x240252f4
 8016ee8:	240252dc 	.word	0x240252dc

08016eec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8016eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eee:	4c24      	ldr	r4, [pc, #144]	@ (8016f80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d042      	beq.n	8016f7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016ef6:	4a23      	ldr	r2, [pc, #140]	@ (8016f84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016ef8:	4d23      	ldr	r5, [pc, #140]	@ (8016f88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8016efa:	8811      	ldrh	r1, [r2, #0]
 8016efc:	f8b5 c000 	ldrh.w	ip, [r5]
 8016f00:	4822      	ldr	r0, [pc, #136]	@ (8016f8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8016f02:	4461      	add	r1, ip
 8016f04:	1c4a      	adds	r2, r1, #1
 8016f06:	008f      	lsls	r7, r1, #2
 8016f08:	f022 0201 	bic.w	r2, r2, #1
 8016f0c:	19de      	adds	r6, r3, r7
 8016f0e:	0412      	lsls	r2, r2, #16
 8016f10:	6006      	str	r6, [r0, #0]
 8016f12:	4e1f      	ldr	r6, [pc, #124]	@ (8016f90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8016f14:	0c12      	lsrs	r2, r2, #16
 8016f16:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016f1a:	19da      	adds	r2, r3, r7
 8016f1c:	6032      	str	r2, [r6, #0]
 8016f1e:	220e      	movs	r2, #14
 8016f20:	fb02 f20c 	mul.w	r2, r2, ip
 8016f24:	3203      	adds	r2, #3
 8016f26:	f022 0203 	bic.w	r2, r2, #3
 8016f2a:	443a      	add	r2, r7
 8016f2c:	4f19      	ldr	r7, [pc, #100]	@ (8016f94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8016f2e:	4413      	add	r3, r2
 8016f30:	603b      	str	r3, [r7, #0]
 8016f32:	2300      	movs	r3, #0
 8016f34:	4f18      	ldr	r7, [pc, #96]	@ (8016f98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8016f36:	469c      	mov	ip, r3
 8016f38:	803b      	strh	r3, [r7, #0]
 8016f3a:	4f18      	ldr	r7, [pc, #96]	@ (8016f9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8016f3c:	683f      	ldr	r7, [r7, #0]
 8016f3e:	1aba      	subs	r2, r7, r2
 8016f40:	4f17      	ldr	r7, [pc, #92]	@ (8016fa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8016f42:	603a      	str	r2, [r7, #0]
 8016f44:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8016f48:	4a16      	ldr	r2, [pc, #88]	@ (8016fa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8016f4a:	8013      	strh	r3, [r2, #0]
 8016f4c:	428b      	cmp	r3, r1
 8016f4e:	d10d      	bne.n	8016f6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8016f50:	882d      	ldrh	r5, [r5, #0]
 8016f52:	2300      	movs	r3, #0
 8016f54:	6830      	ldr	r0, [r6, #0]
 8016f56:	240e      	movs	r4, #14
 8016f58:	429d      	cmp	r5, r3
 8016f5a:	d90f      	bls.n	8016f7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016f5c:	fb04 0203 	mla	r2, r4, r3, r0
 8016f60:	3301      	adds	r3, #1
 8016f62:	7b11      	ldrb	r1, [r2, #12]
 8016f64:	f36f 1145 	bfc	r1, #5, #1
 8016f68:	7311      	strb	r1, [r2, #12]
 8016f6a:	e7f5      	b.n	8016f58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8016f6c:	6822      	ldr	r2, [r4, #0]
 8016f6e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8016f72:	6802      	ldr	r2, [r0, #0]
 8016f74:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016f78:	3301      	adds	r3, #1
 8016f7a:	e7e7      	b.n	8016f4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8016f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	240252d8 	.word	0x240252d8
 8016f84:	240252f4 	.word	0x240252f4
 8016f88:	240252f8 	.word	0x240252f8
 8016f8c:	240252ec 	.word	0x240252ec
 8016f90:	240252dc 	.word	0x240252dc
 8016f94:	240252e4 	.word	0x240252e4
 8016f98:	240252f6 	.word	0x240252f6
 8016f9c:	240252e0 	.word	0x240252e0
 8016fa0:	240252f0 	.word	0x240252f0
 8016fa4:	240252e8 	.word	0x240252e8

08016fa8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8016fa8:	4b06      	ldr	r3, [pc, #24]	@ (8016fc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	b943      	cbnz	r3, 8016fc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8016fae:	b139      	cbz	r1, 8016fc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8016fb0:	4b05      	ldr	r3, [pc, #20]	@ (8016fc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8016fb2:	801a      	strh	r2, [r3, #0]
 8016fb4:	4b05      	ldr	r3, [pc, #20]	@ (8016fcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8016fb6:	6019      	str	r1, [r3, #0]
 8016fb8:	4b05      	ldr	r3, [pc, #20]	@ (8016fd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8016fba:	6018      	str	r0, [r3, #0]
 8016fbc:	f7ff bf96 	b.w	8016eec <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016fc0:	4770      	bx	lr
 8016fc2:	bf00      	nop
 8016fc4:	240252e4 	.word	0x240252e4
 8016fc8:	240252f8 	.word	0x240252f8
 8016fcc:	240252e0 	.word	0x240252e0
 8016fd0:	240252d8 	.word	0x240252d8

08016fd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8016fd4:	b470      	push	{r4, r5, r6}
 8016fd6:	4c07      	ldr	r4, [pc, #28]	@ (8016ff4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016fd8:	4605      	mov	r5, r0
 8016fda:	4610      	mov	r0, r2
 8016fdc:	9a03      	ldr	r2, [sp, #12]
 8016fde:	6826      	ldr	r6, [r4, #0]
 8016fe0:	b936      	cbnz	r6, 8016ff0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8016fe2:	6025      	str	r5, [r4, #0]
 8016fe4:	4c04      	ldr	r4, [pc, #16]	@ (8016ff8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8016fe6:	8021      	strh	r1, [r4, #0]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	bc70      	pop	{r4, r5, r6}
 8016fec:	f7ff bfdc 	b.w	8016fa8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016ff0:	bc70      	pop	{r4, r5, r6}
 8016ff2:	4770      	bx	lr
 8016ff4:	240252fc 	.word	0x240252fc
 8016ff8:	240252f4 	.word	0x240252f4

08016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8016ffc:	4a12      	ldr	r2, [pc, #72]	@ (8017048 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8016ffe:	8803      	ldrh	r3, [r0, #0]
 8017000:	8812      	ldrh	r2, [r2, #0]
 8017002:	4293      	cmp	r3, r2
 8017004:	d207      	bcs.n	8017016 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8017006:	4a11      	ldr	r2, [pc, #68]	@ (801704c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8017008:	2114      	movs	r1, #20
 801700a:	6812      	ldr	r2, [r2, #0]
 801700c:	fb01 2303 	mla	r3, r1, r3, r2
 8017010:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017014:	4770      	bx	lr
 8017016:	490e      	ldr	r1, [pc, #56]	@ (8017050 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017018:	8809      	ldrh	r1, [r1, #0]
 801701a:	4411      	add	r1, r2
 801701c:	428b      	cmp	r3, r1
 801701e:	da04      	bge.n	801702a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017020:	1a9b      	subs	r3, r3, r2
 8017022:	4a0c      	ldr	r2, [pc, #48]	@ (8017054 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017024:	210e      	movs	r1, #14
 8017026:	6812      	ldr	r2, [r2, #0]
 8017028:	e7f0      	b.n	801700c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801702a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801702e:	4293      	cmp	r3, r2
 8017030:	d108      	bne.n	8017044 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017032:	4b09      	ldr	r3, [pc, #36]	@ (8017058 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	b91b      	cbnz	r3, 8017040 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017038:	4b08      	ldr	r3, [pc, #32]	@ (801705c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801703a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801703e:	4770      	bx	lr
 8017040:	4b07      	ldr	r3, [pc, #28]	@ (8017060 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017042:	e7fa      	b.n	801703a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017044:	2000      	movs	r0, #0
 8017046:	4770      	bx	lr
 8017048:	240252f4 	.word	0x240252f4
 801704c:	240252fc 	.word	0x240252fc
 8017050:	240252f8 	.word	0x240252f8
 8017054:	240252dc 	.word	0x240252dc
 8017058:	24025264 	.word	0x24025264
 801705c:	24025266 	.word	0x24025266
 8017060:	24025268 	.word	0x24025268

08017064 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017064:	4a12      	ldr	r2, [pc, #72]	@ (80170b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017066:	8803      	ldrh	r3, [r0, #0]
 8017068:	8812      	ldrh	r2, [r2, #0]
 801706a:	4293      	cmp	r3, r2
 801706c:	d207      	bcs.n	801707e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801706e:	4a11      	ldr	r2, [pc, #68]	@ (80170b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017070:	2114      	movs	r1, #20
 8017072:	6812      	ldr	r2, [r2, #0]
 8017074:	fb01 2303 	mla	r3, r1, r3, r2
 8017078:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801707c:	4770      	bx	lr
 801707e:	490e      	ldr	r1, [pc, #56]	@ (80170b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017080:	8809      	ldrh	r1, [r1, #0]
 8017082:	4411      	add	r1, r2
 8017084:	428b      	cmp	r3, r1
 8017086:	da04      	bge.n	8017092 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017088:	1a9b      	subs	r3, r3, r2
 801708a:	4a0c      	ldr	r2, [pc, #48]	@ (80170bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801708c:	210e      	movs	r1, #14
 801708e:	6812      	ldr	r2, [r2, #0]
 8017090:	e7f0      	b.n	8017074 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017092:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017096:	4293      	cmp	r3, r2
 8017098:	d108      	bne.n	80170ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801709a:	4b09      	ldr	r3, [pc, #36]	@ (80170c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	b91b      	cbnz	r3, 80170a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80170a0:	4b08      	ldr	r3, [pc, #32]	@ (80170c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80170a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80170a6:	4770      	bx	lr
 80170a8:	4b07      	ldr	r3, [pc, #28]	@ (80170c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80170aa:	e7fa      	b.n	80170a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80170ac:	2000      	movs	r0, #0
 80170ae:	4770      	bx	lr
 80170b0:	240252f4 	.word	0x240252f4
 80170b4:	240252fc 	.word	0x240252fc
 80170b8:	240252f8 	.word	0x240252f8
 80170bc:	240252dc 	.word	0x240252dc
 80170c0:	24025264 	.word	0x24025264
 80170c4:	24025268 	.word	0x24025268
 80170c8:	24025266 	.word	0x24025266

080170cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80170cc:	4a22      	ldr	r2, [pc, #136]	@ (8017158 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80170ce:	b530      	push	{r4, r5, lr}
 80170d0:	880b      	ldrh	r3, [r1, #0]
 80170d2:	8812      	ldrh	r2, [r2, #0]
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d213      	bcs.n	8017100 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80170d8:	4a20      	ldr	r2, [pc, #128]	@ (801715c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80170da:	2114      	movs	r1, #20
 80170dc:	6812      	ldr	r2, [r2, #0]
 80170de:	fb01 2303 	mla	r3, r1, r3, r2
 80170e2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80170e6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80170ea:	8a1a      	ldrh	r2, [r3, #16]
 80170ec:	8a5b      	ldrh	r3, [r3, #18]
 80170ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80170f2:	8004      	strh	r4, [r0, #0]
 80170f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170f8:	8041      	strh	r1, [r0, #2]
 80170fa:	8082      	strh	r2, [r0, #4]
 80170fc:	80c3      	strh	r3, [r0, #6]
 80170fe:	e024      	b.n	801714a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8017100:	4917      	ldr	r1, [pc, #92]	@ (8017160 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017102:	8809      	ldrh	r1, [r1, #0]
 8017104:	4411      	add	r1, r2
 8017106:	428b      	cmp	r3, r1
 8017108:	da10      	bge.n	801712c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801710a:	1a9b      	subs	r3, r3, r2
 801710c:	220e      	movs	r2, #14
 801710e:	4353      	muls	r3, r2
 8017110:	4a14      	ldr	r2, [pc, #80]	@ (8017164 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017112:	6811      	ldr	r1, [r2, #0]
 8017114:	18ca      	adds	r2, r1, r3
 8017116:	5ecd      	ldrsh	r5, [r1, r3]
 8017118:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801711c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017120:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017124:	8005      	strh	r5, [r0, #0]
 8017126:	8044      	strh	r4, [r0, #2]
 8017128:	8081      	strh	r1, [r0, #4]
 801712a:	e7e7      	b.n	80170fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801712c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017130:	4293      	cmp	r3, r2
 8017132:	d10b      	bne.n	801714c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017134:	4b0c      	ldr	r3, [pc, #48]	@ (8017168 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017136:	f9b3 1000 	ldrsh.w	r1, [r3]
 801713a:	4b0c      	ldr	r3, [pc, #48]	@ (801716c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801713c:	8081      	strh	r1, [r0, #4]
 801713e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017142:	2300      	movs	r3, #0
 8017144:	80c2      	strh	r2, [r0, #6]
 8017146:	8003      	strh	r3, [r0, #0]
 8017148:	8043      	strh	r3, [r0, #2]
 801714a:	bd30      	pop	{r4, r5, pc}
 801714c:	2300      	movs	r3, #0
 801714e:	8003      	strh	r3, [r0, #0]
 8017150:	8043      	strh	r3, [r0, #2]
 8017152:	8083      	strh	r3, [r0, #4]
 8017154:	e7d2      	b.n	80170fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017156:	bf00      	nop
 8017158:	240252f4 	.word	0x240252f4
 801715c:	240252fc 	.word	0x240252fc
 8017160:	240252f8 	.word	0x240252f8
 8017164:	240252dc 	.word	0x240252dc
 8017168:	24025260 	.word	0x24025260
 801716c:	24025262 	.word	0x24025262

08017170 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017170:	4a17      	ldr	r2, [pc, #92]	@ (80171d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8017172:	8803      	ldrh	r3, [r0, #0]
 8017174:	8812      	ldrh	r2, [r2, #0]
 8017176:	4293      	cmp	r3, r2
 8017178:	d213      	bcs.n	80171a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801717a:	4a16      	ldr	r2, [pc, #88]	@ (80171d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801717c:	2114      	movs	r1, #20
 801717e:	6812      	ldr	r2, [r2, #0]
 8017180:	fb01 2303 	mla	r3, r1, r3, r2
 8017184:	8a1a      	ldrh	r2, [r3, #16]
 8017186:	8919      	ldrh	r1, [r3, #8]
 8017188:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801718c:	428a      	cmp	r2, r1
 801718e:	db1d      	blt.n	80171cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017190:	8a58      	ldrh	r0, [r3, #18]
 8017192:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017196:	895b      	ldrh	r3, [r3, #10]
 8017198:	4298      	cmp	r0, r3
 801719a:	bfac      	ite	ge
 801719c:	2000      	movge	r0, #0
 801719e:	2001      	movlt	r0, #1
 80171a0:	4770      	bx	lr
 80171a2:	490d      	ldr	r1, [pc, #52]	@ (80171d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80171a4:	8809      	ldrh	r1, [r1, #0]
 80171a6:	4411      	add	r1, r2
 80171a8:	428b      	cmp	r3, r1
 80171aa:	da0d      	bge.n	80171c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80171ac:	1a9b      	subs	r3, r3, r2
 80171ae:	4a0b      	ldr	r2, [pc, #44]	@ (80171dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80171b0:	210e      	movs	r1, #14
 80171b2:	6812      	ldr	r2, [r2, #0]
 80171b4:	fb01 2303 	mla	r3, r1, r3, r2
 80171b8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80171bc:	891a      	ldrh	r2, [r3, #8]
 80171be:	4291      	cmp	r1, r2
 80171c0:	db04      	blt.n	80171cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80171c2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80171c6:	e7e6      	b.n	8017196 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80171c8:	2000      	movs	r0, #0
 80171ca:	4770      	bx	lr
 80171cc:	2001      	movs	r0, #1
 80171ce:	4770      	bx	lr
 80171d0:	240252f4 	.word	0x240252f4
 80171d4:	240252fc 	.word	0x240252fc
 80171d8:	240252f8 	.word	0x240252f8
 80171dc:	240252dc 	.word	0x240252dc

080171e0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80171e0:	4a12      	ldr	r2, [pc, #72]	@ (801722c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80171e2:	8803      	ldrh	r3, [r0, #0]
 80171e4:	8811      	ldrh	r1, [r2, #0]
 80171e6:	428b      	cmp	r3, r1
 80171e8:	d20b      	bcs.n	8017202 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80171ea:	4a11      	ldr	r2, [pc, #68]	@ (8017230 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80171ec:	6812      	ldr	r2, [r2, #0]
 80171ee:	b112      	cbz	r2, 80171f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80171f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80171f4:	b9c0      	cbnz	r0, 8017228 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80171f6:	4a0f      	ldr	r2, [pc, #60]	@ (8017234 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80171f8:	6811      	ldr	r1, [r2, #0]
 80171fa:	2214      	movs	r2, #20
 80171fc:	4353      	muls	r3, r2
 80171fe:	58c8      	ldr	r0, [r1, r3]
 8017200:	4770      	bx	lr
 8017202:	4a0d      	ldr	r2, [pc, #52]	@ (8017238 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017204:	8812      	ldrh	r2, [r2, #0]
 8017206:	440a      	add	r2, r1
 8017208:	4293      	cmp	r3, r2
 801720a:	da04      	bge.n	8017216 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801720c:	4a08      	ldr	r2, [pc, #32]	@ (8017230 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801720e:	6812      	ldr	r2, [r2, #0]
 8017210:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017214:	4770      	bx	lr
 8017216:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801721a:	4293      	cmp	r3, r2
 801721c:	d103      	bne.n	8017226 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801721e:	4b07      	ldr	r3, [pc, #28]	@ (801723c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017224:	4770      	bx	lr
 8017226:	2000      	movs	r0, #0
 8017228:	4770      	bx	lr
 801722a:	bf00      	nop
 801722c:	240252f4 	.word	0x240252f4
 8017230:	240252d8 	.word	0x240252d8
 8017234:	240252fc 	.word	0x240252fc
 8017238:	240252f8 	.word	0x240252f8
 801723c:	2402526c 	.word	0x2402526c

08017240 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017240:	4b24      	ldr	r3, [pc, #144]	@ (80172d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017242:	8802      	ldrh	r2, [r0, #0]
 8017244:	8818      	ldrh	r0, [r3, #0]
 8017246:	4282      	cmp	r2, r0
 8017248:	d221      	bcs.n	801728e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801724a:	4b23      	ldr	r3, [pc, #140]	@ (80172d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801724c:	6819      	ldr	r1, [r3, #0]
 801724e:	2314      	movs	r3, #20
 8017250:	fb03 1302 	mla	r3, r3, r2, r1
 8017254:	6858      	ldr	r0, [r3, #4]
 8017256:	2800      	cmp	r0, #0
 8017258:	d03a      	beq.n	80172d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801725a:	4920      	ldr	r1, [pc, #128]	@ (80172dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801725c:	6809      	ldr	r1, [r1, #0]
 801725e:	2900      	cmp	r1, #0
 8017260:	d036      	beq.n	80172d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017262:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017266:	2900      	cmp	r1, #0
 8017268:	d032      	beq.n	80172d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801726a:	891a      	ldrh	r2, [r3, #8]
 801726c:	8958      	ldrh	r0, [r3, #10]
 801726e:	4350      	muls	r0, r2
 8017270:	7c5a      	ldrb	r2, [r3, #17]
 8017272:	7cdb      	ldrb	r3, [r3, #19]
 8017274:	0952      	lsrs	r2, r2, #5
 8017276:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801727a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801727e:	2b0b      	cmp	r3, #11
 8017280:	bf18      	it	ne
 8017282:	0040      	lslne	r0, r0, #1
 8017284:	3003      	adds	r0, #3
 8017286:	f020 0003 	bic.w	r0, r0, #3
 801728a:	4408      	add	r0, r1
 801728c:	4770      	bx	lr
 801728e:	4b14      	ldr	r3, [pc, #80]	@ (80172e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017290:	881b      	ldrh	r3, [r3, #0]
 8017292:	4403      	add	r3, r0
 8017294:	429a      	cmp	r2, r3
 8017296:	da1a      	bge.n	80172ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017298:	4b12      	ldr	r3, [pc, #72]	@ (80172e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801729a:	1a10      	subs	r0, r2, r0
 801729c:	210e      	movs	r1, #14
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	fb01 3000 	mla	r0, r1, r0, r3
 80172a4:	7b03      	ldrb	r3, [r0, #12]
 80172a6:	f003 031f 	and.w	r3, r3, #31
 80172aa:	2b0b      	cmp	r3, #11
 80172ac:	d10b      	bne.n	80172c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80172ae:	8903      	ldrh	r3, [r0, #8]
 80172b0:	8940      	ldrh	r0, [r0, #10]
 80172b2:	4358      	muls	r0, r3
 80172b4:	4b09      	ldr	r3, [pc, #36]	@ (80172dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80172b6:	3003      	adds	r0, #3
 80172b8:	6819      	ldr	r1, [r3, #0]
 80172ba:	f020 0303 	bic.w	r3, r0, #3
 80172be:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80172c2:	4418      	add	r0, r3
 80172c4:	4770      	bx	lr
 80172c6:	2b0d      	cmp	r3, #13
 80172c8:	d101      	bne.n	80172ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80172ca:	300d      	adds	r0, #13
 80172cc:	4770      	bx	lr
 80172ce:	2000      	movs	r0, #0
 80172d0:	4770      	bx	lr
 80172d2:	bf00      	nop
 80172d4:	240252f4 	.word	0x240252f4
 80172d8:	240252fc 	.word	0x240252fc
 80172dc:	240252d8 	.word	0x240252d8
 80172e0:	240252f8 	.word	0x240252f8
 80172e4:	240252dc 	.word	0x240252dc

080172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80172e8:	4b1f      	ldr	r3, [pc, #124]	@ (8017368 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80172ea:	b510      	push	{r4, lr}
 80172ec:	8802      	ldrh	r2, [r0, #0]
 80172ee:	881b      	ldrh	r3, [r3, #0]
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d21a      	bcs.n	801732a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80172f4:	4b1d      	ldr	r3, [pc, #116]	@ (801736c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80172f6:	2114      	movs	r1, #20
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	fb01 3102 	mla	r1, r1, r2, r3
 80172fe:	7c4b      	ldrb	r3, [r1, #17]
 8017300:	0958      	lsrs	r0, r3, #5
 8017302:	7ccb      	ldrb	r3, [r1, #19]
 8017304:	491a      	ldr	r1, [pc, #104]	@ (8017370 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8017306:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801730a:	6809      	ldr	r1, [r1, #0]
 801730c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8017310:	b2d8      	uxtb	r0, r3
 8017312:	b149      	cbz	r1, 8017328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017314:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017318:	b132      	cbz	r2, 8017328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801731a:	2b0e      	cmp	r3, #14
 801731c:	d021      	beq.n	8017362 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801731e:	280f      	cmp	r0, #15
 8017320:	d01d      	beq.n	801735e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8017322:	2810      	cmp	r0, #16
 8017324:	bf08      	it	eq
 8017326:	2002      	moveq	r0, #2
 8017328:	bd10      	pop	{r4, pc}
 801732a:	4912      	ldr	r1, [pc, #72]	@ (8017374 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801732c:	8809      	ldrh	r1, [r1, #0]
 801732e:	4419      	add	r1, r3
 8017330:	428a      	cmp	r2, r1
 8017332:	da09      	bge.n	8017348 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8017334:	1ad3      	subs	r3, r2, r3
 8017336:	4a10      	ldr	r2, [pc, #64]	@ (8017378 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8017338:	210e      	movs	r1, #14
 801733a:	6812      	ldr	r2, [r2, #0]
 801733c:	fb01 2303 	mla	r3, r1, r3, r2
 8017340:	7b18      	ldrb	r0, [r3, #12]
 8017342:	f000 001f 	and.w	r0, r0, #31
 8017346:	e7ef      	b.n	8017328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017348:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801734c:	429a      	cmp	r2, r3
 801734e:	d108      	bne.n	8017362 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017350:	f7ec fc60 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 8017354:	6803      	ldr	r3, [r0, #0]
 8017356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801735c:	4718      	bx	r3
 801735e:	2001      	movs	r0, #1
 8017360:	e7e2      	b.n	8017328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017362:	2000      	movs	r0, #0
 8017364:	e7e0      	b.n	8017328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017366:	bf00      	nop
 8017368:	240252f4 	.word	0x240252f4
 801736c:	240252fc 	.word	0x240252fc
 8017370:	240252d8 	.word	0x240252d8
 8017374:	240252f8 	.word	0x240252f8
 8017378:	240252dc 	.word	0x240252dc

0801737c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801737c:	2018      	movs	r0, #24
 801737e:	4770      	bx	lr

08017380 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017380:	2001      	movs	r0, #1
 8017382:	4770      	bx	lr

08017384 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017384:	4b02      	ldr	r3, [pc, #8]	@ (8017390 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8017386:	8818      	ldrh	r0, [r3, #0]
 8017388:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801738c:	b280      	uxth	r0, r0
 801738e:	4770      	bx	lr
 8017390:	24025266 	.word	0x24025266

08017394 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017394:	2bff      	cmp	r3, #255	@ 0xff
 8017396:	d04c      	beq.n	8017432 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017398:	2a2c      	cmp	r2, #44	@ 0x2c
 801739a:	d030      	beq.n	80173fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801739c:	d80f      	bhi.n	80173be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801739e:	2a08      	cmp	r2, #8
 80173a0:	d043      	beq.n	801742a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80173a2:	d805      	bhi.n	80173b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80173a4:	2a04      	cmp	r2, #4
 80173a6:	d03e      	beq.n	8017426 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80173a8:	2a05      	cmp	r2, #5
 80173aa:	d03a      	beq.n	8017422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80173ac:	2300      	movs	r3, #0
 80173ae:	e024      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80173b0:	2a0a      	cmp	r2, #10
 80173b2:	d03a      	beq.n	801742a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80173b4:	d301      	bcc.n	80173ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80173b6:	2a0b      	cmp	r2, #11
 80173b8:	d1f8      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80173ba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80173bc:	e01d      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80173be:	2a30      	cmp	r2, #48	@ 0x30
 80173c0:	d035      	beq.n	801742e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80173c2:	d80a      	bhi.n	80173da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80173c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80173c6:	684b      	ldr	r3, [r1, #4]
 80173c8:	d023      	beq.n	8017412 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80173ca:	d90d      	bls.n	80173e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80173cc:	781a      	ldrb	r2, [r3, #0]
 80173ce:	785b      	ldrb	r3, [r3, #1]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d1eb      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80173d4:	b98a      	cbnz	r2, 80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80173d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80173d8:	e00f      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80173da:	2a32      	cmp	r2, #50	@ 0x32
 80173dc:	d027      	beq.n	801742e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80173de:	d301      	bcc.n	80173e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80173e0:	2a33      	cmp	r2, #51	@ 0x33
 80173e2:	d1e3      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80173e4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80173e6:	e008      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80173e8:	781a      	ldrb	r2, [r3, #0]
 80173ea:	785b      	ldrb	r3, [r3, #1]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d1dd      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80173f0:	2a00      	cmp	r2, #0
 80173f2:	d0f0      	beq.n	80173d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80173f4:	2a01      	cmp	r2, #1
 80173f6:	d1d9      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80173f8:	6943      	ldr	r3, [r0, #20]
 80173fa:	4618      	mov	r0, r3
 80173fc:	4770      	bx	lr
 80173fe:	684b      	ldr	r3, [r1, #4]
 8017400:	781a      	ldrb	r2, [r3, #0]
 8017402:	785b      	ldrb	r3, [r3, #1]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d1d1      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017408:	b14a      	cbz	r2, 801741e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801740a:	2a01      	cmp	r2, #1
 801740c:	bf08      	it	eq
 801740e:	68c3      	ldreq	r3, [r0, #12]
 8017410:	e7f3      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017412:	781a      	ldrb	r2, [r3, #0]
 8017414:	785b      	ldrb	r3, [r3, #1]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d1c8      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801741a:	2a00      	cmp	r2, #0
 801741c:	d1ed      	bne.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801741e:	69c3      	ldr	r3, [r0, #28]
 8017420:	e7eb      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017422:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017424:	e7e9      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017426:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017428:	e7e7      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801742a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801742c:	e7e5      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801742e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017430:	e7e3      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017432:	2a2c      	cmp	r2, #44	@ 0x2c
 8017434:	d030      	beq.n	8017498 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8017436:	d80f      	bhi.n	8017458 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8017438:	2a08      	cmp	r2, #8
 801743a:	d042      	beq.n	80174c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801743c:	d805      	bhi.n	801744a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801743e:	2a04      	cmp	r2, #4
 8017440:	d03d      	beq.n	80174be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8017442:	2a05      	cmp	r2, #5
 8017444:	d1b2      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017446:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8017448:	e7d7      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801744a:	2a0a      	cmp	r2, #10
 801744c:	d039      	beq.n	80174c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801744e:	d301      	bcc.n	8017454 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8017450:	2a0b      	cmp	r2, #11
 8017452:	d1ab      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017454:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8017456:	e7d0      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017458:	2a30      	cmp	r2, #48	@ 0x30
 801745a:	d034      	beq.n	80174c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801745c:	d80b      	bhi.n	8017476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801745e:	2a2e      	cmp	r2, #46	@ 0x2e
 8017460:	684b      	ldr	r3, [r1, #4]
 8017462:	d023      	beq.n	80174ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017464:	d90e      	bls.n	8017484 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8017466:	781a      	ldrb	r2, [r3, #0]
 8017468:	785b      	ldrb	r3, [r3, #1]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d19e      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801746e:	2a00      	cmp	r2, #0
 8017470:	d1c3      	bne.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017472:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017474:	e7c1      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017476:	2a32      	cmp	r2, #50	@ 0x32
 8017478:	d025      	beq.n	80174c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801747a:	d301      	bcc.n	8017480 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801747c:	2a33      	cmp	r2, #51	@ 0x33
 801747e:	d195      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017480:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8017482:	e7ba      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017484:	781a      	ldrb	r2, [r3, #0]
 8017486:	785b      	ldrb	r3, [r3, #1]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d18f      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801748c:	2a00      	cmp	r2, #0
 801748e:	d0f0      	beq.n	8017472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8017490:	2a01      	cmp	r2, #1
 8017492:	d18b      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017494:	6983      	ldr	r3, [r0, #24]
 8017496:	e7b0      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017498:	684b      	ldr	r3, [r1, #4]
 801749a:	781a      	ldrb	r2, [r3, #0]
 801749c:	785b      	ldrb	r3, [r3, #1]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d184      	bne.n	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174a2:	b152      	cbz	r2, 80174ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80174a4:	2a01      	cmp	r2, #1
 80174a6:	bf08      	it	eq
 80174a8:	6903      	ldreq	r3, [r0, #16]
 80174aa:	e7a6      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174ac:	781a      	ldrb	r2, [r3, #0]
 80174ae:	785b      	ldrb	r3, [r3, #1]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f47f af7b 	bne.w	80173ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174b6:	2a00      	cmp	r2, #0
 80174b8:	d19f      	bne.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174ba:	6a03      	ldr	r3, [r0, #32]
 80174bc:	e79d      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80174c0:	e79b      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80174c4:	e799      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174c6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80174c8:	e797      	b.n	80173fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080174ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ce:	b085      	sub	sp, #20
 80174d0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80174d2:	9203      	str	r2, [sp, #12]
 80174d4:	6870      	ldr	r0, [r6, #4]
 80174d6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80174da:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80174de:	9101      	str	r1, [sp, #4]
 80174e0:	fa1f f885 	uxth.w	r8, r5
 80174e4:	43ed      	mvns	r5, r5
 80174e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80174ea:	b2ed      	uxtb	r5, r5
 80174ec:	fb00 2404 	mla	r4, r0, r4, r2
 80174f0:	6832      	ldr	r2, [r6, #0]
 80174f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80174f6:	4414      	add	r4, r2
 80174f8:	f8dc 2000 	ldr.w	r2, [ip]
 80174fc:	9202      	str	r2, [sp, #8]
 80174fe:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017502:	f102 0e04 	add.w	lr, r2, #4
 8017506:	9a01      	ldr	r2, [sp, #4]
 8017508:	2a00      	cmp	r2, #0
 801750a:	dc03      	bgt.n	8017514 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801750c:	9a03      	ldr	r2, [sp, #12]
 801750e:	2a00      	cmp	r2, #0
 8017510:	f340 8116 	ble.w	8017740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017514:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017516:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801751a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801751e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017520:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017524:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017528:	2b00      	cmp	r3, #0
 801752a:	dd0e      	ble.n	801754a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801752c:	1406      	asrs	r6, r0, #16
 801752e:	d405      	bmi.n	801753c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017530:	4556      	cmp	r6, sl
 8017532:	da03      	bge.n	801753c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017534:	1416      	asrs	r6, r2, #16
 8017536:	d401      	bmi.n	801753c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017538:	454e      	cmp	r6, r9
 801753a:	db07      	blt.n	801754c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801753c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801753e:	3b01      	subs	r3, #1
 8017540:	3403      	adds	r4, #3
 8017542:	4430      	add	r0, r6
 8017544:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017546:	4432      	add	r2, r6
 8017548:	e7ee      	b.n	8017528 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801754a:	d063      	beq.n	8017614 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801754c:	1e5e      	subs	r6, r3, #1
 801754e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8017550:	fb07 0706 	mla	r7, r7, r6, r0
 8017554:	143f      	asrs	r7, r7, #16
 8017556:	d454      	bmi.n	8017602 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017558:	4557      	cmp	r7, sl
 801755a:	da52      	bge.n	8017602 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801755c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801755e:	fb07 2606 	mla	r6, r7, r6, r2
 8017562:	1436      	asrs	r6, r6, #16
 8017564:	d44d      	bmi.n	8017602 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017566:	454e      	cmp	r6, r9
 8017568:	da4b      	bge.n	8017602 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801756a:	1ce6      	adds	r6, r4, #3
 801756c:	4699      	mov	r9, r3
 801756e:	f1b9 0f00 	cmp.w	r9, #0
 8017572:	f106 0603 	add.w	r6, r6, #3
 8017576:	dd48      	ble.n	801760a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017578:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801757c:	1417      	asrs	r7, r2, #16
 801757e:	9902      	ldr	r1, [sp, #8]
 8017580:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017584:	f109 39ff 	add.w	r9, r9, #4294967295
 8017588:	fb0b 1707 	mla	r7, fp, r7, r1
 801758c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8017590:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017592:	f817 700a 	ldrb.w	r7, [r7, sl]
 8017596:	fb1b fb05 	smulbb	fp, fp, r5
 801759a:	4408      	add	r0, r1
 801759c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801759e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80175a2:	440a      	add	r2, r1
 80175a4:	eb0e 0a07 	add.w	sl, lr, r7
 80175a8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80175ac:	fb07 b708 	mla	r7, r7, r8, fp
 80175b0:	b2bf      	uxth	r7, r7
 80175b2:	f107 0b01 	add.w	fp, r7, #1
 80175b6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80175ba:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80175be:	fb1b fb05 	smulbb	fp, fp, r5
 80175c2:	123f      	asrs	r7, r7, #8
 80175c4:	f806 7c06 	strb.w	r7, [r6, #-6]
 80175c8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80175cc:	fb07 b708 	mla	r7, r7, r8, fp
 80175d0:	b2bf      	uxth	r7, r7
 80175d2:	f107 0b01 	add.w	fp, r7, #1
 80175d6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80175da:	123f      	asrs	r7, r7, #8
 80175dc:	f806 7c05 	strb.w	r7, [r6, #-5]
 80175e0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80175e4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80175e8:	fb1a fa05 	smulbb	sl, sl, r5
 80175ec:	fb07 a708 	mla	r7, r7, r8, sl
 80175f0:	b2bf      	uxth	r7, r7
 80175f2:	f107 0a01 	add.w	sl, r7, #1
 80175f6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80175fa:	123f      	asrs	r7, r7, #8
 80175fc:	f806 7c04 	strb.w	r7, [r6, #-4]
 8017600:	e7b5      	b.n	801756e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8017602:	2700      	movs	r7, #0
 8017604:	1bde      	subs	r6, r3, r7
 8017606:	2e00      	cmp	r6, #0
 8017608:	dc42      	bgt.n	8017690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801760a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801760e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017612:	441c      	add	r4, r3
 8017614:	9b01      	ldr	r3, [sp, #4]
 8017616:	2b00      	cmp	r3, #0
 8017618:	f340 8092 	ble.w	8017740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801761c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017622:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017626:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801762a:	eef0 6a62 	vmov.f32	s13, s5
 801762e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017632:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801763a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801763e:	eef0 6a43 	vmov.f32	s13, s6
 8017642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017646:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801764a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801764e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017652:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017656:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801765a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801765e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017662:	ee12 2a90 	vmov	r2, s5
 8017666:	eef0 2a47 	vmov.f32	s5, s14
 801766a:	fb92 f3f3 	sdiv	r3, r2, r3
 801766e:	ee13 2a10 	vmov	r2, s6
 8017672:	9311      	str	r3, [sp, #68]	@ 0x44
 8017674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017676:	eeb0 3a67 	vmov.f32	s6, s15
 801767a:	fb92 f3f3 	sdiv	r3, r2, r3
 801767e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	9a03      	ldr	r2, [sp, #12]
 8017684:	3b01      	subs	r3, #1
 8017686:	9301      	str	r3, [sp, #4]
 8017688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801768a:	bf08      	it	eq
 801768c:	4613      	moveq	r3, r2
 801768e:	e73a      	b.n	8017506 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017690:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8017694:	d44e      	bmi.n	8017734 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017696:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801769a:	4556      	cmp	r6, sl
 801769c:	dd4a      	ble.n	8017734 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801769e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80176a2:	d447      	bmi.n	8017734 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80176a4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80176a8:	4559      	cmp	r1, fp
 80176aa:	dd43      	ble.n	8017734 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80176ac:	fa0f f986 	sxth.w	r9, r6
 80176b0:	9902      	ldr	r1, [sp, #8]
 80176b2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80176b6:	fb0b 1909 	mla	r9, fp, r9, r1
 80176ba:	f814 b006 	ldrb.w	fp, [r4, r6]
 80176be:	f819 900a 	ldrb.w	r9, [r9, sl]
 80176c2:	fb1b fb05 	smulbb	fp, fp, r5
 80176c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80176ca:	eb0e 0a09 	add.w	sl, lr, r9
 80176ce:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80176d2:	fb09 b908 	mla	r9, r9, r8, fp
 80176d6:	fa1f f989 	uxth.w	r9, r9
 80176da:	f109 0b01 	add.w	fp, r9, #1
 80176de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80176e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80176e6:	f804 9006 	strb.w	r9, [r4, r6]
 80176ea:	4426      	add	r6, r4
 80176ec:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80176f0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80176f4:	fb1b fb05 	smulbb	fp, fp, r5
 80176f8:	fb09 b908 	mla	r9, r9, r8, fp
 80176fc:	fa1f f989 	uxth.w	r9, r9
 8017700:	f109 0b01 	add.w	fp, r9, #1
 8017704:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017708:	ea4f 2929 	mov.w	r9, r9, asr #8
 801770c:	f886 9001 	strb.w	r9, [r6, #1]
 8017710:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017714:	f896 a002 	ldrb.w	sl, [r6, #2]
 8017718:	fb1a fa05 	smulbb	sl, sl, r5
 801771c:	fb09 a908 	mla	r9, r9, r8, sl
 8017720:	fa1f f989 	uxth.w	r9, r9
 8017724:	f109 0a01 	add.w	sl, r9, #1
 8017728:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801772c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017730:	f886 9002 	strb.w	r9, [r6, #2]
 8017734:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017736:	3701      	adds	r7, #1
 8017738:	4408      	add	r0, r1
 801773a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801773c:	440a      	add	r2, r1
 801773e:	e761      	b.n	8017604 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017740:	b005      	add	sp, #20
 8017742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017746 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801774a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801774c:	4693      	mov	fp, r2
 801774e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017754:	6868      	ldr	r0, [r5, #4]
 8017756:	6877      	ldr	r7, [r6, #4]
 8017758:	9100      	str	r1, [sp, #0]
 801775a:	3704      	adds	r7, #4
 801775c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8017760:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8017764:	fb00 2404 	mla	r4, r0, r4, r2
 8017768:	682a      	ldr	r2, [r5, #0]
 801776a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801776e:	4414      	add	r4, r2
 8017770:	6832      	ldr	r2, [r6, #0]
 8017772:	9201      	str	r2, [sp, #4]
 8017774:	9a00      	ldr	r2, [sp, #0]
 8017776:	2a00      	cmp	r2, #0
 8017778:	dc03      	bgt.n	8017782 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801777a:	f1bb 0f00 	cmp.w	fp, #0
 801777e:	f340 80bc 	ble.w	80178fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017782:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017784:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8017788:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801778c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801778e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8017792:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017796:	2b00      	cmp	r3, #0
 8017798:	dd0c      	ble.n	80177b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801779a:	1405      	asrs	r5, r0, #16
 801779c:	d405      	bmi.n	80177aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801779e:	4555      	cmp	r5, sl
 80177a0:	da03      	bge.n	80177aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80177a2:	1415      	asrs	r5, r2, #16
 80177a4:	d401      	bmi.n	80177aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80177a6:	454d      	cmp	r5, r9
 80177a8:	db05      	blt.n	80177b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80177aa:	4440      	add	r0, r8
 80177ac:	4472      	add	r2, lr
 80177ae:	3b01      	subs	r3, #1
 80177b0:	3403      	adds	r4, #3
 80177b2:	e7f0      	b.n	8017796 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80177b4:	d03f      	beq.n	8017836 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80177b6:	1e5d      	subs	r5, r3, #1
 80177b8:	fb08 0c05 	mla	ip, r8, r5, r0
 80177bc:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80177c0:	d42e      	bmi.n	8017820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80177c2:	45d4      	cmp	ip, sl
 80177c4:	da2c      	bge.n	8017820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80177c6:	fb0e 2505 	mla	r5, lr, r5, r2
 80177ca:	142d      	asrs	r5, r5, #16
 80177cc:	d428      	bmi.n	8017820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80177ce:	454d      	cmp	r5, r9
 80177d0:	da26      	bge.n	8017820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80177d2:	1ce5      	adds	r5, r4, #3
 80177d4:	469c      	mov	ip, r3
 80177d6:	f1bc 0f00 	cmp.w	ip, #0
 80177da:	f105 0503 	add.w	r5, r5, #3
 80177de:	dd25      	ble.n	801782c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80177e0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80177e4:	ea4f 4922 	mov.w	r9, r2, asr #16
 80177e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177ec:	4472      	add	r2, lr
 80177ee:	468a      	mov	sl, r1
 80177f0:	9901      	ldr	r1, [sp, #4]
 80177f2:	fb0a 1909 	mla	r9, sl, r9, r1
 80177f6:	1401      	asrs	r1, r0, #16
 80177f8:	4440      	add	r0, r8
 80177fa:	f819 9001 	ldrb.w	r9, [r9, r1]
 80177fe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017802:	eb07 0a09 	add.w	sl, r7, r9
 8017806:	f817 9009 	ldrb.w	r9, [r7, r9]
 801780a:	f805 9c06 	strb.w	r9, [r5, #-6]
 801780e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8017812:	f805 9c05 	strb.w	r9, [r5, #-5]
 8017816:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801781a:	f805 9c04 	strb.w	r9, [r5, #-4]
 801781e:	e7da      	b.n	80177d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017820:	2500      	movs	r5, #0
 8017822:	eba3 0c05 	sub.w	ip, r3, r5
 8017826:	f1bc 0f00 	cmp.w	ip, #0
 801782a:	dc3b      	bgt.n	80178a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801782c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017834:	441c      	add	r4, r3
 8017836:	9b00      	ldr	r3, [sp, #0]
 8017838:	2b00      	cmp	r3, #0
 801783a:	dd5e      	ble.n	80178fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801783c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017842:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017846:	eeb0 6a62 	vmov.f32	s12, s5
 801784a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801784e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017856:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801785a:	eeb0 6a43 	vmov.f32	s12, s6
 801785e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017862:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8017866:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801786a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801786e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017872:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801787a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801787e:	ee12 2a90 	vmov	r2, s5
 8017882:	eef0 2a47 	vmov.f32	s5, s14
 8017886:	fb92 f8f3 	sdiv	r8, r2, r3
 801788a:	ee13 2a10 	vmov	r2, s6
 801788e:	eeb0 3a67 	vmov.f32	s6, s15
 8017892:	fb92 fef3 	sdiv	lr, r2, r3
 8017896:	9b00      	ldr	r3, [sp, #0]
 8017898:	3b01      	subs	r3, #1
 801789a:	9300      	str	r3, [sp, #0]
 801789c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801789e:	bf08      	it	eq
 80178a0:	465b      	moveq	r3, fp
 80178a2:	e767      	b.n	8017774 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80178a4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80178a8:	d423      	bmi.n	80178f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80178aa:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80178ae:	45cc      	cmp	ip, r9
 80178b0:	dd1f      	ble.n	80178f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80178b2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80178b6:	d41c      	bmi.n	80178f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80178b8:	68f1      	ldr	r1, [r6, #12]
 80178ba:	4551      	cmp	r1, sl
 80178bc:	dd19      	ble.n	80178f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80178be:	fa0f fc8c 	sxth.w	ip, ip
 80178c2:	9901      	ldr	r1, [sp, #4]
 80178c4:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80178c8:	f81c c009 	ldrb.w	ip, [ip, r9]
 80178cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80178d0:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80178d4:	eb07 090c 	add.w	r9, r7, ip
 80178d8:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80178dc:	f804 a00c 	strb.w	sl, [r4, ip]
 80178e0:	44a4      	add	ip, r4
 80178e2:	f899 a001 	ldrb.w	sl, [r9, #1]
 80178e6:	f88c a001 	strb.w	sl, [ip, #1]
 80178ea:	f899 9002 	ldrb.w	r9, [r9, #2]
 80178ee:	f88c 9002 	strb.w	r9, [ip, #2]
 80178f2:	4440      	add	r0, r8
 80178f4:	4472      	add	r2, lr
 80178f6:	3501      	adds	r5, #1
 80178f8:	e793      	b.n	8017822 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80178fa:	b003      	add	sp, #12
 80178fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017900 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017904:	b085      	sub	sp, #20
 8017906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801790a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801790c:	9202      	str	r2, [sp, #8]
 801790e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8017912:	6860      	ldr	r0, [r4, #4]
 8017914:	9203      	str	r2, [sp, #12]
 8017916:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801791a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801791e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8017922:	fb00 2505 	mla	r5, r0, r5, r2
 8017926:	6822      	ldr	r2, [r4, #0]
 8017928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801792c:	4415      	add	r5, r2
 801792e:	f8dc 2000 	ldr.w	r2, [ip]
 8017932:	9200      	str	r2, [sp, #0]
 8017934:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017938:	3204      	adds	r2, #4
 801793a:	9201      	str	r2, [sp, #4]
 801793c:	2900      	cmp	r1, #0
 801793e:	dc03      	bgt.n	8017948 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017940:	9a02      	ldr	r2, [sp, #8]
 8017942:	2a00      	cmp	r2, #0
 8017944:	f340 8127 	ble.w	8017b96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017948:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801794a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801794e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017952:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017954:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017958:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801795c:	2b00      	cmp	r3, #0
 801795e:	dd0d      	ble.n	801797c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017960:	1422      	asrs	r2, r4, #16
 8017962:	d405      	bmi.n	8017970 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017964:	4542      	cmp	r2, r8
 8017966:	da03      	bge.n	8017970 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017968:	1402      	asrs	r2, r0, #16
 801796a:	d401      	bmi.n	8017970 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801796c:	42ba      	cmp	r2, r7
 801796e:	db06      	blt.n	801797e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017970:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017972:	4474      	add	r4, lr
 8017974:	3b01      	subs	r3, #1
 8017976:	3503      	adds	r5, #3
 8017978:	4410      	add	r0, r2
 801797a:	e7ef      	b.n	801795c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801797c:	d075      	beq.n	8017a6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801797e:	1e5a      	subs	r2, r3, #1
 8017980:	fb0e 4602 	mla	r6, lr, r2, r4
 8017984:	1436      	asrs	r6, r6, #16
 8017986:	d465      	bmi.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017988:	4546      	cmp	r6, r8
 801798a:	da63      	bge.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801798c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801798e:	fb06 0202 	mla	r2, r6, r2, r0
 8017992:	1412      	asrs	r2, r2, #16
 8017994:	d45e      	bmi.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017996:	42ba      	cmp	r2, r7
 8017998:	da5c      	bge.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801799a:	1cef      	adds	r7, r5, #3
 801799c:	4699      	mov	r9, r3
 801799e:	f1b9 0f00 	cmp.w	r9, #0
 80179a2:	dd5d      	ble.n	8017a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80179a4:	1402      	asrs	r2, r0, #16
 80179a6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80179aa:	1426      	asrs	r6, r4, #16
 80179ac:	4692      	mov	sl, r2
 80179ae:	9a00      	ldr	r2, [sp, #0]
 80179b0:	fb08 220a 	mla	r2, r8, sl, r2
 80179b4:	5d92      	ldrb	r2, [r2, r6]
 80179b6:	9e01      	ldr	r6, [sp, #4]
 80179b8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80179bc:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80179c0:	d041      	beq.n	8017a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80179c2:	9a03      	ldr	r2, [sp, #12]
 80179c4:	fa5f fb86 	uxtb.w	fp, r6
 80179c8:	fb02 f808 	mul.w	r8, r2, r8
 80179cc:	f108 0201 	add.w	r2, r8, #1
 80179d0:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80179d4:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80179d8:	1212      	asrs	r2, r2, #8
 80179da:	fa1f fa82 	uxth.w	sl, r2
 80179de:	43d2      	mvns	r2, r2
 80179e0:	fb1b fb0a 	smulbb	fp, fp, sl
 80179e4:	b2d2      	uxtb	r2, r2
 80179e6:	fb08 b802 	mla	r8, r8, r2, fp
 80179ea:	fa1f f888 	uxth.w	r8, r8
 80179ee:	f108 0b01 	add.w	fp, r8, #1
 80179f2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80179f6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80179fa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80179fe:	fb1b fb0a 	smulbb	fp, fp, sl
 8017a02:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017a06:	fb16 fa0a 	smulbb	sl, r6, sl
 8017a0a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017a0e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8017a12:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017a16:	fb06 aa02 	mla	sl, r6, r2, sl
 8017a1a:	fb08 b802 	mla	r8, r8, r2, fp
 8017a1e:	fa1f fa8a 	uxth.w	sl, sl
 8017a22:	fa1f f888 	uxth.w	r8, r8
 8017a26:	f10a 0601 	add.w	r6, sl, #1
 8017a2a:	f108 0b01 	add.w	fp, r8, #1
 8017a2e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8017a32:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017a36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017a3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017a3e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017a42:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017a46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017a48:	4474      	add	r4, lr
 8017a4a:	3703      	adds	r7, #3
 8017a4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017a50:	4410      	add	r0, r2
 8017a52:	e7a4      	b.n	801799e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017a54:	f04f 0800 	mov.w	r8, #0
 8017a58:	eba3 0208 	sub.w	r2, r3, r8
 8017a5c:	2a00      	cmp	r2, #0
 8017a5e:	dc3b      	bgt.n	8017ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8017a60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a68:	441d      	add	r5, r3
 8017a6a:	2900      	cmp	r1, #0
 8017a6c:	f340 8093 	ble.w	8017b96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017a70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017a7a:	3901      	subs	r1, #1
 8017a7c:	eeb0 6a62 	vmov.f32	s12, s5
 8017a80:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017a84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017a88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a8c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017a90:	eeb0 6a43 	vmov.f32	s12, s6
 8017a94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a98:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017a9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017aa0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017aa4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017aa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017aac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ab0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017ab4:	ee12 2a90 	vmov	r2, s5
 8017ab8:	eef0 2a47 	vmov.f32	s5, s14
 8017abc:	fb92 fef3 	sdiv	lr, r2, r3
 8017ac0:	ee13 2a10 	vmov	r2, s6
 8017ac4:	eeb0 3a67 	vmov.f32	s6, s15
 8017ac8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017acc:	9a02      	ldr	r2, [sp, #8]
 8017ace:	9312      	str	r3, [sp, #72]	@ 0x48
 8017ad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ad2:	bf08      	it	eq
 8017ad4:	4613      	moveq	r3, r2
 8017ad6:	e731      	b.n	801793c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017ad8:	1427      	asrs	r7, r4, #16
 8017ada:	d456      	bmi.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017adc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017ae0:	42be      	cmp	r6, r7
 8017ae2:	dd52      	ble.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017ae4:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017ae8:	d44f      	bmi.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017aea:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017aee:	454a      	cmp	r2, r9
 8017af0:	dd4b      	ble.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017af2:	9a00      	ldr	r2, [sp, #0]
 8017af4:	b236      	sxth	r6, r6
 8017af6:	fb09 2606 	mla	r6, r9, r6, r2
 8017afa:	5df2      	ldrb	r2, [r6, r7]
 8017afc:	9e01      	ldr	r6, [sp, #4]
 8017afe:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8017b02:	0e3a      	lsrs	r2, r7, #24
 8017b04:	d041      	beq.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017b06:	9e03      	ldr	r6, [sp, #12]
 8017b08:	fa5f fb87 	uxtb.w	fp, r7
 8017b0c:	4372      	muls	r2, r6
 8017b0e:	1c56      	adds	r6, r2, #1
 8017b10:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017b14:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017b18:	1212      	asrs	r2, r2, #8
 8017b1a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017b1e:	fa1f fa82 	uxth.w	sl, r2
 8017b22:	43d2      	mvns	r2, r2
 8017b24:	fb1b fb0a 	smulbb	fp, fp, sl
 8017b28:	b2d2      	uxtb	r2, r2
 8017b2a:	fb09 b902 	mla	r9, r9, r2, fp
 8017b2e:	fa1f f989 	uxth.w	r9, r9
 8017b32:	f109 0b01 	add.w	fp, r9, #1
 8017b36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b3a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017b3e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017b42:	fb1b fb0a 	smulbb	fp, fp, sl
 8017b46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b4a:	fb17 fa0a 	smulbb	sl, r7, sl
 8017b4e:	f805 9006 	strb.w	r9, [r5, r6]
 8017b52:	442e      	add	r6, r5
 8017b54:	78b7      	ldrb	r7, [r6, #2]
 8017b56:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017b5a:	fb07 aa02 	mla	sl, r7, r2, sl
 8017b5e:	fb09 b902 	mla	r9, r9, r2, fp
 8017b62:	fa1f fa8a 	uxth.w	sl, sl
 8017b66:	fa1f f989 	uxth.w	r9, r9
 8017b6a:	f10a 0701 	add.w	r7, sl, #1
 8017b6e:	f109 0b01 	add.w	fp, r9, #1
 8017b72:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017b76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b7a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017b7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b82:	f886 a002 	strb.w	sl, [r6, #2]
 8017b86:	f886 9001 	strb.w	r9, [r6, #1]
 8017b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017b8c:	4474      	add	r4, lr
 8017b8e:	f108 0801 	add.w	r8, r8, #1
 8017b92:	4410      	add	r0, r2
 8017b94:	e760      	b.n	8017a58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8017b96:	b005      	add	sp, #20
 8017b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba0:	b085      	sub	sp, #20
 8017ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017ba6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017ba8:	9203      	str	r2, [sp, #12]
 8017baa:	6868      	ldr	r0, [r5, #4]
 8017bac:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017bb0:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017bb4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017bb8:	fb00 2404 	mla	r4, r0, r4, r2
 8017bbc:	682a      	ldr	r2, [r5, #0]
 8017bbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017bc2:	4414      	add	r4, r2
 8017bc4:	f8dc 2000 	ldr.w	r2, [ip]
 8017bc8:	9201      	str	r2, [sp, #4]
 8017bca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017bce:	3204      	adds	r2, #4
 8017bd0:	9202      	str	r2, [sp, #8]
 8017bd2:	2900      	cmp	r1, #0
 8017bd4:	dc03      	bgt.n	8017bde <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017bd6:	9a03      	ldr	r2, [sp, #12]
 8017bd8:	2a00      	cmp	r2, #0
 8017bda:	f340 8137 	ble.w	8017e4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017bde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017be0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017be4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017be8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017bea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017bee:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	dd0d      	ble.n	8017c12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017bf6:	1405      	asrs	r5, r0, #16
 8017bf8:	d405      	bmi.n	8017c06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017bfa:	4545      	cmp	r5, r8
 8017bfc:	da03      	bge.n	8017c06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017bfe:	1415      	asrs	r5, r2, #16
 8017c00:	d401      	bmi.n	8017c06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017c02:	42bd      	cmp	r5, r7
 8017c04:	db06      	blt.n	8017c14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017c06:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017c08:	4470      	add	r0, lr
 8017c0a:	3b01      	subs	r3, #1
 8017c0c:	3403      	adds	r4, #3
 8017c0e:	442a      	add	r2, r5
 8017c10:	e7ef      	b.n	8017bf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8017c12:	d070      	beq.n	8017cf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017c14:	1e5d      	subs	r5, r3, #1
 8017c16:	fb0e 0605 	mla	r6, lr, r5, r0
 8017c1a:	1436      	asrs	r6, r6, #16
 8017c1c:	d462      	bmi.n	8017ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017c1e:	4546      	cmp	r6, r8
 8017c20:	da60      	bge.n	8017ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017c22:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017c24:	fb06 2505 	mla	r5, r6, r5, r2
 8017c28:	142d      	asrs	r5, r5, #16
 8017c2a:	d45b      	bmi.n	8017ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017c2c:	42bd      	cmp	r5, r7
 8017c2e:	da59      	bge.n	8017ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017c30:	1ce5      	adds	r5, r4, #3
 8017c32:	469a      	mov	sl, r3
 8017c34:	f1ba 0f00 	cmp.w	sl, #0
 8017c38:	dd58      	ble.n	8017cec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8017c3a:	1416      	asrs	r6, r2, #16
 8017c3c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017c40:	1407      	asrs	r7, r0, #16
 8017c42:	46b1      	mov	r9, r6
 8017c44:	9e01      	ldr	r6, [sp, #4]
 8017c46:	fb08 6609 	mla	r6, r8, r9, r6
 8017c4a:	5df6      	ldrb	r6, [r6, r7]
 8017c4c:	9f02      	ldr	r7, [sp, #8]
 8017c4e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8017c52:	0e37      	lsrs	r7, r6, #24
 8017c54:	2fff      	cmp	r7, #255	@ 0xff
 8017c56:	f000 80f0 	beq.w	8017e3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017c5a:	fa5f f887 	uxtb.w	r8, r7
 8017c5e:	b3d7      	cbz	r7, 8017cd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017c60:	fa1f f788 	uxth.w	r7, r8
 8017c64:	ea6f 0808 	mvn.w	r8, r8
 8017c68:	fa5f fb86 	uxtb.w	fp, r6
 8017c6c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8017c70:	fa5f f888 	uxtb.w	r8, r8
 8017c74:	fb1b fb07 	smulbb	fp, fp, r7
 8017c78:	fb09 b908 	mla	r9, r9, r8, fp
 8017c7c:	fa1f f989 	uxth.w	r9, r9
 8017c80:	f109 0b01 	add.w	fp, r9, #1
 8017c84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017c88:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8017c8c:	fb1b fb08 	smulbb	fp, fp, r8
 8017c90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c94:	f805 9c03 	strb.w	r9, [r5, #-3]
 8017c98:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8017c9c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017ca0:	fb09 b907 	mla	r9, r9, r7, fp
 8017ca4:	fa1f f989 	uxth.w	r9, r9
 8017ca8:	f109 0b01 	add.w	fp, r9, #1
 8017cac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017cb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017cb4:	f805 9c02 	strb.w	r9, [r5, #-2]
 8017cb8:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8017cbc:	fb19 f808 	smulbb	r8, r9, r8
 8017cc0:	fb06 8607 	mla	r6, r6, r7, r8
 8017cc4:	b2b6      	uxth	r6, r6
 8017cc6:	f106 0801 	add.w	r8, r6, #1
 8017cca:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8017cce:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017cd2:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017cd6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017cd8:	4470      	add	r0, lr
 8017cda:	3503      	adds	r5, #3
 8017cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ce0:	4432      	add	r2, r6
 8017ce2:	e7a7      	b.n	8017c34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017ce4:	2600      	movs	r6, #0
 8017ce6:	1b9d      	subs	r5, r3, r6
 8017ce8:	2d00      	cmp	r5, #0
 8017cea:	dc3b      	bgt.n	8017d64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017cec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017cf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017cf4:	441c      	add	r4, r3
 8017cf6:	2900      	cmp	r1, #0
 8017cf8:	f340 80a8 	ble.w	8017e4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017cfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d06:	3901      	subs	r1, #1
 8017d08:	eeb0 6a62 	vmov.f32	s12, s5
 8017d0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017d10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d18:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017d1c:	eeb0 6a43 	vmov.f32	s12, s6
 8017d20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d24:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017d28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d40:	ee12 2a90 	vmov	r2, s5
 8017d44:	eef0 2a47 	vmov.f32	s5, s14
 8017d48:	fb92 fef3 	sdiv	lr, r2, r3
 8017d4c:	ee13 2a10 	vmov	r2, s6
 8017d50:	eeb0 3a67 	vmov.f32	s6, s15
 8017d54:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d58:	9a03      	ldr	r2, [sp, #12]
 8017d5a:	9312      	str	r3, [sp, #72]	@ 0x48
 8017d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d5e:	bf08      	it	eq
 8017d60:	4613      	moveq	r3, r2
 8017d62:	e736      	b.n	8017bd2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017d64:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017d68:	d457      	bmi.n	8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017d6a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8017d6e:	4547      	cmp	r7, r8
 8017d70:	dd53      	ble.n	8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017d72:	ea5f 4922 	movs.w	r9, r2, asr #16
 8017d76:	d450      	bmi.n	8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017d78:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8017d7c:	454d      	cmp	r5, r9
 8017d7e:	dd4c      	ble.n	8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017d80:	9d01      	ldr	r5, [sp, #4]
 8017d82:	b23f      	sxth	r7, r7
 8017d84:	fb09 5707 	mla	r7, r9, r7, r5
 8017d88:	f817 5008 	ldrb.w	r5, [r7, r8]
 8017d8c:	9f02      	ldr	r7, [sp, #8]
 8017d8e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017d92:	0e2f      	lsrs	r7, r5, #24
 8017d94:	2fff      	cmp	r7, #255	@ 0xff
 8017d96:	d045      	beq.n	8017e24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017d98:	fa5f f987 	uxtb.w	r9, r7
 8017d9c:	b3ef      	cbz	r7, 8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017d9e:	fa1f f889 	uxth.w	r8, r9
 8017da2:	ea6f 0909 	mvn.w	r9, r9
 8017da6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017daa:	fa5f fb85 	uxtb.w	fp, r5
 8017dae:	f814 a007 	ldrb.w	sl, [r4, r7]
 8017db2:	fa5f f989 	uxtb.w	r9, r9
 8017db6:	fb1b fb08 	smulbb	fp, fp, r8
 8017dba:	fb0a ba09 	mla	sl, sl, r9, fp
 8017dbe:	fa1f fa8a 	uxth.w	sl, sl
 8017dc2:	f10a 0b01 	add.w	fp, sl, #1
 8017dc6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017dca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017dce:	f804 a007 	strb.w	sl, [r4, r7]
 8017dd2:	4427      	add	r7, r4
 8017dd4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017dd8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8017ddc:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017de0:	fb1b fb09 	smulbb	fp, fp, r9
 8017de4:	fb0a ba08 	mla	sl, sl, r8, fp
 8017de8:	fa1f fa8a 	uxth.w	sl, sl
 8017dec:	f10a 0b01 	add.w	fp, sl, #1
 8017df0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017df4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017df8:	f887 a001 	strb.w	sl, [r7, #1]
 8017dfc:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017e00:	fb1a f909 	smulbb	r9, sl, r9
 8017e04:	fb05 9508 	mla	r5, r5, r8, r9
 8017e08:	b2ad      	uxth	r5, r5
 8017e0a:	f105 0901 	add.w	r9, r5, #1
 8017e0e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8017e12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017e16:	f887 9002 	strb.w	r9, [r7, #2]
 8017e1a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017e1c:	4470      	add	r0, lr
 8017e1e:	3601      	adds	r6, #1
 8017e20:	442a      	add	r2, r5
 8017e22:	e760      	b.n	8017ce6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017e24:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017e28:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8017e2c:	55e5      	strb	r5, [r4, r7]
 8017e2e:	4427      	add	r7, r4
 8017e30:	0c2d      	lsrs	r5, r5, #16
 8017e32:	f887 8001 	strb.w	r8, [r7, #1]
 8017e36:	70bd      	strb	r5, [r7, #2]
 8017e38:	e7ef      	b.n	8017e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e3a:	0a37      	lsrs	r7, r6, #8
 8017e3c:	f805 6c03 	strb.w	r6, [r5, #-3]
 8017e40:	0c36      	lsrs	r6, r6, #16
 8017e42:	f805 7c02 	strb.w	r7, [r5, #-2]
 8017e46:	f805 6c01 	strb.w	r6, [r5, #-1]
 8017e4a:	e744      	b.n	8017cd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017e4c:	b005      	add	sp, #20
 8017e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e56:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017e58:	9201      	str	r2, [sp, #4]
 8017e5a:	6870      	ldr	r0, [r6, #4]
 8017e5c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8017e60:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8017e64:	fa1f fe85 	uxth.w	lr, r5
 8017e68:	43ed      	mvns	r5, r5
 8017e6a:	f8dc 8000 	ldr.w	r8, [ip]
 8017e6e:	b2ed      	uxtb	r5, r5
 8017e70:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8017e74:	fb00 2404 	mla	r4, r0, r4, r2
 8017e78:	6832      	ldr	r2, [r6, #0]
 8017e7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017e7e:	4414      	add	r4, r2
 8017e80:	2900      	cmp	r1, #0
 8017e82:	dc03      	bgt.n	8017e8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017e84:	9a01      	ldr	r2, [sp, #4]
 8017e86:	2a00      	cmp	r2, #0
 8017e88:	f340 810d 	ble.w	80180a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e8e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8017e92:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017e96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e98:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017e9c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	dd0e      	ble.n	8017ec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ea4:	1406      	asrs	r6, r0, #16
 8017ea6:	d405      	bmi.n	8017eb4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017ea8:	4556      	cmp	r6, sl
 8017eaa:	da03      	bge.n	8017eb4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017eac:	1416      	asrs	r6, r2, #16
 8017eae:	d401      	bmi.n	8017eb4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017eb0:	454e      	cmp	r6, r9
 8017eb2:	db07      	blt.n	8017ec4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017eb4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	3403      	adds	r4, #3
 8017eba:	4430      	add	r0, r6
 8017ebc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017ebe:	4432      	add	r2, r6
 8017ec0:	e7ee      	b.n	8017ea0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8017ec2:	d060      	beq.n	8017f86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8017ec4:	1e5e      	subs	r6, r3, #1
 8017ec6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017ec8:	fb07 0706 	mla	r7, r7, r6, r0
 8017ecc:	143f      	asrs	r7, r7, #16
 8017ece:	d451      	bmi.n	8017f74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017ed0:	4557      	cmp	r7, sl
 8017ed2:	da4f      	bge.n	8017f74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017ed4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017ed6:	fb07 2606 	mla	r6, r7, r6, r2
 8017eda:	1436      	asrs	r6, r6, #16
 8017edc:	d44a      	bmi.n	8017f74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017ede:	454e      	cmp	r6, r9
 8017ee0:	da48      	bge.n	8017f74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017ee2:	1ce6      	adds	r6, r4, #3
 8017ee4:	4699      	mov	r9, r3
 8017ee6:	f1b9 0f00 	cmp.w	r9, #0
 8017eea:	f106 0603 	add.w	r6, r6, #3
 8017eee:	dd45      	ble.n	8017f7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8017ef0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017ef4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017ef8:	1417      	asrs	r7, r2, #16
 8017efa:	f109 39ff 	add.w	r9, r9, #4294967295
 8017efe:	fb0b a707 	mla	r7, fp, r7, sl
 8017f02:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8017f06:	fb1b fb05 	smulbb	fp, fp, r5
 8017f0a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017f0e:	eb08 0a07 	add.w	sl, r8, r7
 8017f12:	f818 7007 	ldrb.w	r7, [r8, r7]
 8017f16:	fb07 b70e 	mla	r7, r7, lr, fp
 8017f1a:	b2bf      	uxth	r7, r7
 8017f1c:	f107 0b01 	add.w	fp, r7, #1
 8017f20:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017f24:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8017f28:	fb1b fb05 	smulbb	fp, fp, r5
 8017f2c:	123f      	asrs	r7, r7, #8
 8017f2e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8017f32:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8017f36:	fb07 b70e 	mla	r7, r7, lr, fp
 8017f3a:	b2bf      	uxth	r7, r7
 8017f3c:	f107 0b01 	add.w	fp, r7, #1
 8017f40:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017f44:	123f      	asrs	r7, r7, #8
 8017f46:	f806 7c05 	strb.w	r7, [r6, #-5]
 8017f4a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8017f4e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8017f52:	fb1a fa05 	smulbb	sl, sl, r5
 8017f56:	fb07 a70e 	mla	r7, r7, lr, sl
 8017f5a:	b2bf      	uxth	r7, r7
 8017f5c:	f107 0a01 	add.w	sl, r7, #1
 8017f60:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017f64:	123f      	asrs	r7, r7, #8
 8017f66:	f806 7c04 	strb.w	r7, [r6, #-4]
 8017f6a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017f6c:	4438      	add	r0, r7
 8017f6e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017f70:	443a      	add	r2, r7
 8017f72:	e7b8      	b.n	8017ee6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017f74:	2700      	movs	r7, #0
 8017f76:	1bde      	subs	r6, r3, r7
 8017f78:	2e00      	cmp	r6, #0
 8017f7a:	dc3f      	bgt.n	8017ffc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8017f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f84:	441c      	add	r4, r3
 8017f86:	2900      	cmp	r1, #0
 8017f88:	f340 808d 	ble.w	80180a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f96:	3901      	subs	r1, #1
 8017f98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f9c:	eef0 6a62 	vmov.f32	s13, s5
 8017fa0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017fa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fa8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fac:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8017fb0:	eef0 6a43 	vmov.f32	s13, s6
 8017fb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fb8:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8017fbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017fc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017fc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fd4:	ee12 2a90 	vmov	r2, s5
 8017fd8:	eef0 2a47 	vmov.f32	s5, s14
 8017fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fe0:	ee13 2a10 	vmov	r2, s6
 8017fe4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fe8:	eeb0 3a67 	vmov.f32	s6, s15
 8017fec:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ff0:	9a01      	ldr	r2, [sp, #4]
 8017ff2:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ff6:	bf08      	it	eq
 8017ff8:	4613      	moveq	r3, r2
 8017ffa:	e741      	b.n	8017e80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017ffc:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018000:	d44b      	bmi.n	801809a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018002:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018006:	45cb      	cmp	fp, r9
 8018008:	dd47      	ble.n	801809a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801800a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801800e:	d444      	bmi.n	801809a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018010:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018014:	4556      	cmp	r6, sl
 8018016:	dd40      	ble.n	801809a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018018:	fa0f f68b 	sxth.w	r6, fp
 801801c:	fb0a 9906 	mla	r9, sl, r6, r9
 8018020:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018024:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018028:	f814 b006 	ldrb.w	fp, [r4, r6]
 801802c:	fb1b fb05 	smulbb	fp, fp, r5
 8018030:	eb08 0a09 	add.w	sl, r8, r9
 8018034:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018038:	fb09 b90e 	mla	r9, r9, lr, fp
 801803c:	fa1f f989 	uxth.w	r9, r9
 8018040:	f109 0b01 	add.w	fp, r9, #1
 8018044:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018048:	ea4f 2929 	mov.w	r9, r9, asr #8
 801804c:	f804 9006 	strb.w	r9, [r4, r6]
 8018050:	4426      	add	r6, r4
 8018052:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018056:	f896 b001 	ldrb.w	fp, [r6, #1]
 801805a:	fb1b fb05 	smulbb	fp, fp, r5
 801805e:	fb09 b90e 	mla	r9, r9, lr, fp
 8018062:	fa1f f989 	uxth.w	r9, r9
 8018066:	f109 0b01 	add.w	fp, r9, #1
 801806a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801806e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018072:	f886 9001 	strb.w	r9, [r6, #1]
 8018076:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801807a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801807e:	fb1a fa05 	smulbb	sl, sl, r5
 8018082:	fb09 a90e 	mla	r9, r9, lr, sl
 8018086:	fa1f f989 	uxth.w	r9, r9
 801808a:	f109 0a01 	add.w	sl, r9, #1
 801808e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018092:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018096:	f886 9002 	strb.w	r9, [r6, #2]
 801809a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801809c:	3701      	adds	r7, #1
 801809e:	4430      	add	r0, r6
 80180a0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80180a2:	4432      	add	r2, r6
 80180a4:	e767      	b.n	8017f76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80180a6:	b003      	add	sp, #12
 80180a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80180b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80180b6:	9201      	str	r2, [sp, #4]
 80180b8:	6868      	ldr	r0, [r5, #4]
 80180ba:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80180bc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80180c0:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80180c4:	fb00 2404 	mla	r4, r0, r4, r2
 80180c8:	682a      	ldr	r2, [r5, #0]
 80180ca:	f8d7 8000 	ldr.w	r8, [r7]
 80180ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80180d2:	4414      	add	r4, r2
 80180d4:	2900      	cmp	r1, #0
 80180d6:	dc03      	bgt.n	80180e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80180d8:	9a01      	ldr	r2, [sp, #4]
 80180da:	2a00      	cmp	r2, #0
 80180dc:	f340 80af 	ble.w	801823e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80180e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180e2:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80180e6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80180ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80180ec:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80180f0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	dd0c      	ble.n	8018112 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80180f8:	1405      	asrs	r5, r0, #16
 80180fa:	d405      	bmi.n	8018108 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80180fc:	4555      	cmp	r5, sl
 80180fe:	da03      	bge.n	8018108 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018100:	1415      	asrs	r5, r2, #16
 8018102:	d401      	bmi.n	8018108 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018104:	454d      	cmp	r5, r9
 8018106:	db05      	blt.n	8018114 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018108:	4470      	add	r0, lr
 801810a:	4462      	add	r2, ip
 801810c:	3b01      	subs	r3, #1
 801810e:	3403      	adds	r4, #3
 8018110:	e7f0      	b.n	80180f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018112:	d038      	beq.n	8018186 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018114:	1e5d      	subs	r5, r3, #1
 8018116:	fb0e 0605 	mla	r6, lr, r5, r0
 801811a:	1436      	asrs	r6, r6, #16
 801811c:	d42a      	bmi.n	8018174 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801811e:	4556      	cmp	r6, sl
 8018120:	da28      	bge.n	8018174 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018122:	fb0c 2505 	mla	r5, ip, r5, r2
 8018126:	142d      	asrs	r5, r5, #16
 8018128:	d424      	bmi.n	8018174 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801812a:	454d      	cmp	r5, r9
 801812c:	da22      	bge.n	8018174 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801812e:	1ce6      	adds	r6, r4, #3
 8018130:	4699      	mov	r9, r3
 8018132:	f1b9 0f00 	cmp.w	r9, #0
 8018136:	f106 0603 	add.w	r6, r6, #3
 801813a:	dd1f      	ble.n	801817c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801813c:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8018140:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018144:	1415      	asrs	r5, r2, #16
 8018146:	4470      	add	r0, lr
 8018148:	4462      	add	r2, ip
 801814a:	f109 39ff 	add.w	r9, r9, #4294967295
 801814e:	fb0b a505 	mla	r5, fp, r5, sl
 8018152:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018156:	eb08 0a05 	add.w	sl, r8, r5
 801815a:	f818 5005 	ldrb.w	r5, [r8, r5]
 801815e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018162:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018166:	f806 5c05 	strb.w	r5, [r6, #-5]
 801816a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801816e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018172:	e7de      	b.n	8018132 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018174:	2600      	movs	r6, #0
 8018176:	1b9d      	subs	r5, r3, r6
 8018178:	2d00      	cmp	r5, #0
 801817a:	dc38      	bgt.n	80181ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801817c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018184:	441c      	add	r4, r3
 8018186:	2900      	cmp	r1, #0
 8018188:	dd59      	ble.n	801823e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801818a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801818e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018190:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018194:	3901      	subs	r1, #1
 8018196:	eeb0 6a62 	vmov.f32	s12, s5
 801819a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801819e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80181a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80181a6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80181aa:	eeb0 6a43 	vmov.f32	s12, s6
 80181ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80181b2:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80181b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80181ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80181be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80181c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80181c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80181ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80181ce:	ee12 2a90 	vmov	r2, s5
 80181d2:	eef0 2a47 	vmov.f32	s5, s14
 80181d6:	fb92 fef3 	sdiv	lr, r2, r3
 80181da:	ee13 2a10 	vmov	r2, s6
 80181de:	eeb0 3a67 	vmov.f32	s6, s15
 80181e2:	fb92 fcf3 	sdiv	ip, r2, r3
 80181e6:	9a01      	ldr	r2, [sp, #4]
 80181e8:	bf08      	it	eq
 80181ea:	4613      	moveq	r3, r2
 80181ec:	e772      	b.n	80180d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80181ee:	ea5f 4920 	movs.w	r9, r0, asr #16
 80181f2:	d420      	bmi.n	8018236 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80181f4:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80181f8:	45cb      	cmp	fp, r9
 80181fa:	dd1c      	ble.n	8018236 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80181fc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018200:	d419      	bmi.n	8018236 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018202:	68fd      	ldr	r5, [r7, #12]
 8018204:	4555      	cmp	r5, sl
 8018206:	dd16      	ble.n	8018236 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018208:	fa0f f58b 	sxth.w	r5, fp
 801820c:	fb0a 9505 	mla	r5, sl, r5, r9
 8018210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018214:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018218:	eb08 0b05 	add.w	fp, r8, r5
 801821c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018220:	f804 9005 	strb.w	r9, [r4, r5]
 8018224:	4425      	add	r5, r4
 8018226:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801822a:	f885 9001 	strb.w	r9, [r5, #1]
 801822e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018232:	f885 9002 	strb.w	r9, [r5, #2]
 8018236:	4470      	add	r0, lr
 8018238:	4462      	add	r2, ip
 801823a:	3601      	adds	r6, #1
 801823c:	e79b      	b.n	8018176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801823e:	b003      	add	sp, #12
 8018240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018244 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018248:	b085      	sub	sp, #20
 801824a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801824e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018250:	9202      	str	r2, [sp, #8]
 8018252:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018256:	6860      	ldr	r0, [r4, #4]
 8018258:	9203      	str	r2, [sp, #12]
 801825a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801825e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018262:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018266:	fb00 2505 	mla	r5, r0, r5, r2
 801826a:	6822      	ldr	r2, [r4, #0]
 801826c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018270:	4415      	add	r5, r2
 8018272:	f8dc 2000 	ldr.w	r2, [ip]
 8018276:	9201      	str	r2, [sp, #4]
 8018278:	2900      	cmp	r1, #0
 801827a:	dc03      	bgt.n	8018284 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801827c:	9a02      	ldr	r2, [sp, #8]
 801827e:	2a00      	cmp	r2, #0
 8018280:	f340 8122 	ble.w	80184c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018284:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018286:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801828a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801828e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018290:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018294:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018298:	2b00      	cmp	r3, #0
 801829a:	dd0d      	ble.n	80182b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801829c:	1422      	asrs	r2, r4, #16
 801829e:	d405      	bmi.n	80182ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80182a0:	4542      	cmp	r2, r8
 80182a2:	da03      	bge.n	80182ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80182a4:	1402      	asrs	r2, r0, #16
 80182a6:	d401      	bmi.n	80182ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80182a8:	42ba      	cmp	r2, r7
 80182aa:	db06      	blt.n	80182ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80182ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80182ae:	4474      	add	r4, lr
 80182b0:	3b01      	subs	r3, #1
 80182b2:	3503      	adds	r5, #3
 80182b4:	4410      	add	r0, r2
 80182b6:	e7ef      	b.n	8018298 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80182b8:	d072      	beq.n	80183a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80182ba:	1e5a      	subs	r2, r3, #1
 80182bc:	fb0e 4602 	mla	r6, lr, r2, r4
 80182c0:	1436      	asrs	r6, r6, #16
 80182c2:	d462      	bmi.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80182c4:	4546      	cmp	r6, r8
 80182c6:	da60      	bge.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80182c8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80182ca:	fb06 0202 	mla	r2, r6, r2, r0
 80182ce:	1412      	asrs	r2, r2, #16
 80182d0:	d45b      	bmi.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80182d2:	42ba      	cmp	r2, r7
 80182d4:	da59      	bge.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80182d6:	1cef      	adds	r7, r5, #3
 80182d8:	4699      	mov	r9, r3
 80182da:	f1b9 0f00 	cmp.w	r9, #0
 80182de:	dd5a      	ble.n	8018396 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80182e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80182e4:	1426      	asrs	r6, r4, #16
 80182e6:	1402      	asrs	r2, r0, #16
 80182e8:	fb08 6202 	mla	r2, r8, r2, r6
 80182ec:	9e01      	ldr	r6, [sp, #4]
 80182ee:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80182f2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80182f6:	d041      	beq.n	801837c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80182f8:	9a03      	ldr	r2, [sp, #12]
 80182fa:	fa5f fb86 	uxtb.w	fp, r6
 80182fe:	fb02 f808 	mul.w	r8, r2, r8
 8018302:	f108 0201 	add.w	r2, r8, #1
 8018306:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801830a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801830e:	1212      	asrs	r2, r2, #8
 8018310:	fa1f fa82 	uxth.w	sl, r2
 8018314:	43d2      	mvns	r2, r2
 8018316:	fb1b fb0a 	smulbb	fp, fp, sl
 801831a:	b2d2      	uxtb	r2, r2
 801831c:	fb08 b802 	mla	r8, r8, r2, fp
 8018320:	fa1f f888 	uxth.w	r8, r8
 8018324:	f108 0b01 	add.w	fp, r8, #1
 8018328:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801832c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018330:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018334:	fb1b fb0a 	smulbb	fp, fp, sl
 8018338:	ea4f 2828 	mov.w	r8, r8, asr #8
 801833c:	fb16 fa0a 	smulbb	sl, r6, sl
 8018340:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018344:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018348:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801834c:	fb06 aa02 	mla	sl, r6, r2, sl
 8018350:	fb08 b802 	mla	r8, r8, r2, fp
 8018354:	fa1f fa8a 	uxth.w	sl, sl
 8018358:	fa1f f888 	uxth.w	r8, r8
 801835c:	f10a 0601 	add.w	r6, sl, #1
 8018360:	f108 0b01 	add.w	fp, r8, #1
 8018364:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018368:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801836c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018370:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018374:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018378:	f807 8c02 	strb.w	r8, [r7, #-2]
 801837c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801837e:	4474      	add	r4, lr
 8018380:	3703      	adds	r7, #3
 8018382:	f109 39ff 	add.w	r9, r9, #4294967295
 8018386:	4410      	add	r0, r2
 8018388:	e7a7      	b.n	80182da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801838a:	f04f 0800 	mov.w	r8, #0
 801838e:	eba3 0208 	sub.w	r2, r3, r8
 8018392:	2a00      	cmp	r2, #0
 8018394:	dc3b      	bgt.n	801840e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8018396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801839a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801839e:	441d      	add	r5, r3
 80183a0:	2900      	cmp	r1, #0
 80183a2:	f340 8091 	ble.w	80184c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80183a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183b0:	3901      	subs	r1, #1
 80183b2:	eeb0 6a62 	vmov.f32	s12, s5
 80183b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80183ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80183c6:	eeb0 6a43 	vmov.f32	s12, s6
 80183ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183ce:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80183d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183ea:	ee12 2a90 	vmov	r2, s5
 80183ee:	eef0 2a47 	vmov.f32	s5, s14
 80183f2:	fb92 fef3 	sdiv	lr, r2, r3
 80183f6:	ee13 2a10 	vmov	r2, s6
 80183fa:	eeb0 3a67 	vmov.f32	s6, s15
 80183fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018402:	9a02      	ldr	r2, [sp, #8]
 8018404:	9312      	str	r3, [sp, #72]	@ 0x48
 8018406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018408:	bf08      	it	eq
 801840a:	4613      	moveq	r3, r2
 801840c:	e734      	b.n	8018278 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801840e:	1427      	asrs	r7, r4, #16
 8018410:	d454      	bmi.n	80184bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018412:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018416:	42be      	cmp	r6, r7
 8018418:	dd50      	ble.n	80184bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801841a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801841e:	d44d      	bmi.n	80184bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018420:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018424:	454a      	cmp	r2, r9
 8018426:	dd49      	ble.n	80184bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018428:	b236      	sxth	r6, r6
 801842a:	9a01      	ldr	r2, [sp, #4]
 801842c:	fb09 7606 	mla	r6, r9, r6, r7
 8018430:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8018434:	0e3a      	lsrs	r2, r7, #24
 8018436:	d041      	beq.n	80184bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018438:	9e03      	ldr	r6, [sp, #12]
 801843a:	fa5f fb87 	uxtb.w	fp, r7
 801843e:	4372      	muls	r2, r6
 8018440:	1c56      	adds	r6, r2, #1
 8018442:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018446:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801844a:	1212      	asrs	r2, r2, #8
 801844c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018450:	fa1f fa82 	uxth.w	sl, r2
 8018454:	43d2      	mvns	r2, r2
 8018456:	fb1b fb0a 	smulbb	fp, fp, sl
 801845a:	b2d2      	uxtb	r2, r2
 801845c:	fb09 b902 	mla	r9, r9, r2, fp
 8018460:	fa1f f989 	uxth.w	r9, r9
 8018464:	f109 0b01 	add.w	fp, r9, #1
 8018468:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801846c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018470:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018474:	fb1b fb0a 	smulbb	fp, fp, sl
 8018478:	ea4f 2929 	mov.w	r9, r9, asr #8
 801847c:	fb17 fa0a 	smulbb	sl, r7, sl
 8018480:	f805 9006 	strb.w	r9, [r5, r6]
 8018484:	442e      	add	r6, r5
 8018486:	78b7      	ldrb	r7, [r6, #2]
 8018488:	f896 9001 	ldrb.w	r9, [r6, #1]
 801848c:	fb07 aa02 	mla	sl, r7, r2, sl
 8018490:	fb09 b902 	mla	r9, r9, r2, fp
 8018494:	fa1f fa8a 	uxth.w	sl, sl
 8018498:	fa1f f989 	uxth.w	r9, r9
 801849c:	f10a 0701 	add.w	r7, sl, #1
 80184a0:	f109 0b01 	add.w	fp, r9, #1
 80184a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80184a8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80184ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80184b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80184b4:	f886 a002 	strb.w	sl, [r6, #2]
 80184b8:	f886 9001 	strb.w	r9, [r6, #1]
 80184bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80184be:	4474      	add	r4, lr
 80184c0:	f108 0801 	add.w	r8, r8, #1
 80184c4:	4410      	add	r0, r2
 80184c6:	e762      	b.n	801838e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80184c8:	b005      	add	sp, #20
 80184ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80184d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80184d8:	9201      	str	r2, [sp, #4]
 80184da:	6860      	ldr	r0, [r4, #4]
 80184dc:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80184e0:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80184e4:	fb00 2505 	mla	r5, r0, r5, r2
 80184e8:	6822      	ldr	r2, [r4, #0]
 80184ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184ee:	4415      	add	r5, r2
 80184f0:	f8dc 2000 	ldr.w	r2, [ip]
 80184f4:	9200      	str	r2, [sp, #0]
 80184f6:	2900      	cmp	r1, #0
 80184f8:	dc03      	bgt.n	8018502 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80184fa:	9a01      	ldr	r2, [sp, #4]
 80184fc:	2a00      	cmp	r2, #0
 80184fe:	f340 812b 	ble.w	8018758 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018502:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018504:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018508:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801850c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801850e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018512:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018516:	2b00      	cmp	r3, #0
 8018518:	dd0e      	ble.n	8018538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801851a:	1422      	asrs	r2, r4, #16
 801851c:	d405      	bmi.n	801852a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801851e:	4572      	cmp	r2, lr
 8018520:	da03      	bge.n	801852a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018522:	1402      	asrs	r2, r0, #16
 8018524:	d401      	bmi.n	801852a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018526:	42ba      	cmp	r2, r7
 8018528:	db07      	blt.n	801853a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801852a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801852c:	3b01      	subs	r3, #1
 801852e:	3503      	adds	r5, #3
 8018530:	4414      	add	r4, r2
 8018532:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018534:	4410      	add	r0, r2
 8018536:	e7ee      	b.n	8018516 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018538:	d06f      	beq.n	801861a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801853a:	1e5a      	subs	r2, r3, #1
 801853c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801853e:	fb06 4602 	mla	r6, r6, r2, r4
 8018542:	1436      	asrs	r6, r6, #16
 8018544:	d45e      	bmi.n	8018604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018546:	4576      	cmp	r6, lr
 8018548:	da5c      	bge.n	8018604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801854a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801854c:	fb06 0202 	mla	r2, r6, r2, r0
 8018550:	1412      	asrs	r2, r2, #16
 8018552:	d457      	bmi.n	8018604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018554:	42ba      	cmp	r2, r7
 8018556:	da55      	bge.n	8018604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018558:	1cee      	adds	r6, r5, #3
 801855a:	469a      	mov	sl, r3
 801855c:	f1ba 0f00 	cmp.w	sl, #0
 8018560:	dd56      	ble.n	8018610 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018562:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018566:	1427      	asrs	r7, r4, #16
 8018568:	1402      	asrs	r2, r0, #16
 801856a:	fb0e 7202 	mla	r2, lr, r2, r7
 801856e:	9f00      	ldr	r7, [sp, #0]
 8018570:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8018574:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8018578:	d03c      	beq.n	80185f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801857a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801857e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018582:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018586:	fa5f f28e 	uxtb.w	r2, lr
 801858a:	b2ff      	uxtb	r7, r7
 801858c:	f000 80dd 	beq.w	801874a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018590:	fa1f f882 	uxth.w	r8, r2
 8018594:	43d2      	mvns	r2, r2
 8018596:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801859a:	fb17 f708 	smulbb	r7, r7, r8
 801859e:	b2d2      	uxtb	r2, r2
 80185a0:	fb19 f908 	smulbb	r9, r9, r8
 80185a4:	fb0e 7702 	mla	r7, lr, r2, r7
 80185a8:	fb1b f808 	smulbb	r8, fp, r8
 80185ac:	b2bf      	uxth	r7, r7
 80185ae:	f107 0e01 	add.w	lr, r7, #1
 80185b2:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80185b6:	123f      	asrs	r7, r7, #8
 80185b8:	f806 7c03 	strb.w	r7, [r6, #-3]
 80185bc:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80185c0:	fb07 9902 	mla	r9, r7, r2, r9
 80185c4:	fa1f f989 	uxth.w	r9, r9
 80185c8:	f109 0701 	add.w	r7, r9, #1
 80185cc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80185d0:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80185d4:	fb07 8802 	mla	r8, r7, r2, r8
 80185d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80185dc:	fa1f f888 	uxth.w	r8, r8
 80185e0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80185e4:	f108 0201 	add.w	r2, r8, #1
 80185e8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80185ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80185f0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80185f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80185f6:	3603      	adds	r6, #3
 80185f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185fc:	4414      	add	r4, r2
 80185fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018600:	4410      	add	r0, r2
 8018602:	e7ab      	b.n	801855c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018604:	f04f 0e00 	mov.w	lr, #0
 8018608:	eba3 020e 	sub.w	r2, r3, lr
 801860c:	2a00      	cmp	r2, #0
 801860e:	dc3d      	bgt.n	801868c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8018610:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018618:	441d      	add	r5, r3
 801861a:	2900      	cmp	r1, #0
 801861c:	f340 809c 	ble.w	8018758 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018620:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018626:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801862a:	3901      	subs	r1, #1
 801862c:	eeb0 6a62 	vmov.f32	s12, s5
 8018630:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018634:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018638:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801863c:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018640:	eeb0 6a43 	vmov.f32	s12, s6
 8018644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018648:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801864c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018650:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018654:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018658:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801865c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018660:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018664:	ee12 2a90 	vmov	r2, s5
 8018668:	eef0 2a47 	vmov.f32	s5, s14
 801866c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018670:	ee13 2a10 	vmov	r2, s6
 8018674:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018678:	eeb0 3a67 	vmov.f32	s6, s15
 801867c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018680:	9a01      	ldr	r2, [sp, #4]
 8018682:	9310      	str	r3, [sp, #64]	@ 0x40
 8018684:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018686:	bf08      	it	eq
 8018688:	4613      	moveq	r3, r2
 801868a:	e734      	b.n	80184f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801868c:	1427      	asrs	r7, r4, #16
 801868e:	d44d      	bmi.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018690:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018694:	42be      	cmp	r6, r7
 8018696:	dd49      	ble.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018698:	ea5f 4820 	movs.w	r8, r0, asr #16
 801869c:	d446      	bmi.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801869e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80186a2:	4542      	cmp	r2, r8
 80186a4:	dd42      	ble.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80186a6:	b236      	sxth	r6, r6
 80186a8:	9a00      	ldr	r2, [sp, #0]
 80186aa:	fb08 7606 	mla	r6, r8, r6, r7
 80186ae:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80186b2:	0e3a      	lsrs	r2, r7, #24
 80186b4:	d03a      	beq.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80186b6:	2aff      	cmp	r2, #255	@ 0xff
 80186b8:	b2d6      	uxtb	r6, r2
 80186ba:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80186be:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80186c2:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80186c6:	b2ff      	uxtb	r7, r7
 80186c8:	d037      	beq.n	801873a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80186ca:	fa1f f986 	uxth.w	r9, r6
 80186ce:	4472      	add	r2, lr
 80186d0:	43f6      	mvns	r6, r6
 80186d2:	f815 8002 	ldrb.w	r8, [r5, r2]
 80186d6:	fb17 f709 	smulbb	r7, r7, r9
 80186da:	fb1a fa09 	smulbb	sl, sl, r9
 80186de:	b2f6      	uxtb	r6, r6
 80186e0:	fb1b f909 	smulbb	r9, fp, r9
 80186e4:	fb08 7706 	mla	r7, r8, r6, r7
 80186e8:	b2bf      	uxth	r7, r7
 80186ea:	f107 0801 	add.w	r8, r7, #1
 80186ee:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80186f2:	123f      	asrs	r7, r7, #8
 80186f4:	54af      	strb	r7, [r5, r2]
 80186f6:	442a      	add	r2, r5
 80186f8:	7857      	ldrb	r7, [r2, #1]
 80186fa:	fb07 aa06 	mla	sl, r7, r6, sl
 80186fe:	fa1f fa8a 	uxth.w	sl, sl
 8018702:	f10a 0701 	add.w	r7, sl, #1
 8018706:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801870a:	7897      	ldrb	r7, [r2, #2]
 801870c:	fb07 9906 	mla	r9, r7, r6, r9
 8018710:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018714:	fa1f f989 	uxth.w	r9, r9
 8018718:	f882 a001 	strb.w	sl, [r2, #1]
 801871c:	f109 0601 	add.w	r6, r9, #1
 8018720:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8018724:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018728:	f882 9002 	strb.w	r9, [r2, #2]
 801872c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801872e:	f10e 0e01 	add.w	lr, lr, #1
 8018732:	4414      	add	r4, r2
 8018734:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018736:	4410      	add	r0, r2
 8018738:	e766      	b.n	8018608 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801873a:	4472      	add	r2, lr
 801873c:	54af      	strb	r7, [r5, r2]
 801873e:	442a      	add	r2, r5
 8018740:	f882 a001 	strb.w	sl, [r2, #1]
 8018744:	f882 b002 	strb.w	fp, [r2, #2]
 8018748:	e7f0      	b.n	801872c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801874a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801874e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8018752:	f806 bc01 	strb.w	fp, [r6, #-1]
 8018756:	e74d      	b.n	80185f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018758:	b003      	add	sp, #12
 801875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018760 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018764:	b087      	sub	sp, #28
 8018766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801876a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801876c:	9204      	str	r2, [sp, #16]
 801876e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018772:	6860      	ldr	r0, [r4, #4]
 8018774:	9205      	str	r2, [sp, #20]
 8018776:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801877a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801877e:	9101      	str	r1, [sp, #4]
 8018780:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8018784:	fb00 2505 	mla	r5, r0, r5, r2
 8018788:	6822      	ldr	r2, [r4, #0]
 801878a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801878e:	4415      	add	r5, r2
 8018790:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018794:	3201      	adds	r2, #1
 8018796:	f022 0201 	bic.w	r2, r2, #1
 801879a:	9202      	str	r2, [sp, #8]
 801879c:	f8dc 2000 	ldr.w	r2, [ip]
 80187a0:	9203      	str	r2, [sp, #12]
 80187a2:	9a01      	ldr	r2, [sp, #4]
 80187a4:	2a00      	cmp	r2, #0
 80187a6:	dc03      	bgt.n	80187b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80187a8:	9a04      	ldr	r2, [sp, #16]
 80187aa:	2a00      	cmp	r2, #0
 80187ac:	f340 8135 	ble.w	8018a1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80187b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80187b2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80187b6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80187ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80187bc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80187c0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	dd0d      	ble.n	80187e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80187c8:	1422      	asrs	r2, r4, #16
 80187ca:	d405      	bmi.n	80187d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80187cc:	4542      	cmp	r2, r8
 80187ce:	da03      	bge.n	80187d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80187d0:	1402      	asrs	r2, r0, #16
 80187d2:	d401      	bmi.n	80187d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80187d4:	42ba      	cmp	r2, r7
 80187d6:	db06      	blt.n	80187e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80187d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80187da:	4474      	add	r4, lr
 80187dc:	3b01      	subs	r3, #1
 80187de:	3503      	adds	r5, #3
 80187e0:	4410      	add	r0, r2
 80187e2:	e7ef      	b.n	80187c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80187e4:	d077      	beq.n	80188d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80187e6:	1e5a      	subs	r2, r3, #1
 80187e8:	fb0e 4602 	mla	r6, lr, r2, r4
 80187ec:	1436      	asrs	r6, r6, #16
 80187ee:	d469      	bmi.n	80188c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80187f0:	4546      	cmp	r6, r8
 80187f2:	da67      	bge.n	80188c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80187f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80187f6:	fb06 0202 	mla	r2, r6, r2, r0
 80187fa:	1412      	asrs	r2, r2, #16
 80187fc:	d462      	bmi.n	80188c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80187fe:	42ba      	cmp	r2, r7
 8018800:	da60      	bge.n	80188c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018802:	1cee      	adds	r6, r5, #3
 8018804:	4699      	mov	r9, r3
 8018806:	f1b9 0f00 	cmp.w	r9, #0
 801880a:	dd5f      	ble.n	80188cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801880c:	1422      	asrs	r2, r4, #16
 801880e:	9902      	ldr	r1, [sp, #8]
 8018810:	1407      	asrs	r7, r0, #16
 8018812:	fb01 2707 	mla	r7, r1, r7, r2
 8018816:	9903      	ldr	r1, [sp, #12]
 8018818:	087a      	lsrs	r2, r7, #1
 801881a:	5c8a      	ldrb	r2, [r1, r2]
 801881c:	07f9      	lsls	r1, r7, #31
 801881e:	bf54      	ite	pl
 8018820:	f002 020f 	andpl.w	r2, r2, #15
 8018824:	1112      	asrmi	r2, r2, #4
 8018826:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801882a:	b2d2      	uxtb	r2, r2
 801882c:	2a00      	cmp	r2, #0
 801882e:	d042      	beq.n	80188b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018830:	497b      	ldr	r1, [pc, #492]	@ (8018a20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018832:	680f      	ldr	r7, [r1, #0]
 8018834:	9905      	ldr	r1, [sp, #20]
 8018836:	fa5f fb87 	uxtb.w	fp, r7
 801883a:	434a      	muls	r2, r1
 801883c:	f102 0801 	add.w	r8, r2, #1
 8018840:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8018844:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8018848:	1212      	asrs	r2, r2, #8
 801884a:	fa1f fa82 	uxth.w	sl, r2
 801884e:	43d2      	mvns	r2, r2
 8018850:	fb1b fb0a 	smulbb	fp, fp, sl
 8018854:	b2d2      	uxtb	r2, r2
 8018856:	fb08 b802 	mla	r8, r8, r2, fp
 801885a:	fa1f f888 	uxth.w	r8, r8
 801885e:	f108 0b01 	add.w	fp, r8, #1
 8018862:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018866:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801886a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801886e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018872:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018876:	fb17 fa0a 	smulbb	sl, r7, sl
 801887a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801887e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8018882:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8018886:	fb07 aa02 	mla	sl, r7, r2, sl
 801888a:	fb08 b802 	mla	r8, r8, r2, fp
 801888e:	fa1f fa8a 	uxth.w	sl, sl
 8018892:	fa1f f888 	uxth.w	r8, r8
 8018896:	f10a 0701 	add.w	r7, sl, #1
 801889a:	f108 0b01 	add.w	fp, r8, #1
 801889e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80188a2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80188a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80188aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80188ae:	f806 ac01 	strb.w	sl, [r6, #-1]
 80188b2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80188b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80188b8:	4474      	add	r4, lr
 80188ba:	3603      	adds	r6, #3
 80188bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80188c0:	4410      	add	r0, r2
 80188c2:	e7a0      	b.n	8018806 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80188c4:	2700      	movs	r7, #0
 80188c6:	1bda      	subs	r2, r3, r7
 80188c8:	2a00      	cmp	r2, #0
 80188ca:	dc3e      	bgt.n	801894a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80188cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188d4:	441d      	add	r5, r3
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f340 809e 	ble.w	8018a1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80188de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80188e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80188e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80188e8:	eeb0 6a62 	vmov.f32	s12, s5
 80188ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80188f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80188f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80188f8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80188fc:	eeb0 6a43 	vmov.f32	s12, s6
 8018900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018904:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8018908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801890c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018910:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018914:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801891c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018920:	ee12 2a90 	vmov	r2, s5
 8018924:	eef0 2a47 	vmov.f32	s5, s14
 8018928:	fb92 fef3 	sdiv	lr, r2, r3
 801892c:	ee13 2a10 	vmov	r2, s6
 8018930:	eeb0 3a67 	vmov.f32	s6, s15
 8018934:	fb92 f3f3 	sdiv	r3, r2, r3
 8018938:	9314      	str	r3, [sp, #80]	@ 0x50
 801893a:	9b01      	ldr	r3, [sp, #4]
 801893c:	9a04      	ldr	r2, [sp, #16]
 801893e:	3b01      	subs	r3, #1
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018944:	bf08      	it	eq
 8018946:	4613      	moveq	r3, r2
 8018948:	e72b      	b.n	80187a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801894a:	1426      	asrs	r6, r4, #16
 801894c:	d460      	bmi.n	8018a10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801894e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018952:	42b2      	cmp	r2, r6
 8018954:	dd5c      	ble.n	8018a10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018956:	ea5f 4820 	movs.w	r8, r0, asr #16
 801895a:	d459      	bmi.n	8018a10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801895c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018960:	4542      	cmp	r2, r8
 8018962:	dd55      	ble.n	8018a10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018964:	9a02      	ldr	r2, [sp, #8]
 8018966:	9903      	ldr	r1, [sp, #12]
 8018968:	fb08 6602 	mla	r6, r8, r2, r6
 801896c:	0872      	lsrs	r2, r6, #1
 801896e:	07f6      	lsls	r6, r6, #31
 8018970:	5c8a      	ldrb	r2, [r1, r2]
 8018972:	bf54      	ite	pl
 8018974:	f002 020f 	andpl.w	r2, r2, #15
 8018978:	1112      	asrmi	r2, r2, #4
 801897a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801897e:	b2d2      	uxtb	r2, r2
 8018980:	2a00      	cmp	r2, #0
 8018982:	d045      	beq.n	8018a10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018984:	4926      	ldr	r1, [pc, #152]	@ (8018a20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018986:	f8d1 8000 	ldr.w	r8, [r1]
 801898a:	9905      	ldr	r1, [sp, #20]
 801898c:	fa5f fb88 	uxtb.w	fp, r8
 8018990:	434a      	muls	r2, r1
 8018992:	1c56      	adds	r6, r2, #1
 8018994:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018998:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801899c:	1212      	asrs	r2, r2, #8
 801899e:	f815 9006 	ldrb.w	r9, [r5, r6]
 80189a2:	fa1f fa82 	uxth.w	sl, r2
 80189a6:	43d2      	mvns	r2, r2
 80189a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80189ac:	b2d2      	uxtb	r2, r2
 80189ae:	fb09 b902 	mla	r9, r9, r2, fp
 80189b2:	fa1f f989 	uxth.w	r9, r9
 80189b6:	f109 0b01 	add.w	fp, r9, #1
 80189ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80189be:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80189c2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80189c6:	fb1b fb0a 	smulbb	fp, fp, sl
 80189ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80189ce:	fb18 fa0a 	smulbb	sl, r8, sl
 80189d2:	f805 9006 	strb.w	r9, [r5, r6]
 80189d6:	442e      	add	r6, r5
 80189d8:	f896 8002 	ldrb.w	r8, [r6, #2]
 80189dc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80189e0:	fb08 aa02 	mla	sl, r8, r2, sl
 80189e4:	fb09 b902 	mla	r9, r9, r2, fp
 80189e8:	fa1f fa8a 	uxth.w	sl, sl
 80189ec:	fa1f f989 	uxth.w	r9, r9
 80189f0:	f10a 0801 	add.w	r8, sl, #1
 80189f4:	f109 0b01 	add.w	fp, r9, #1
 80189f8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80189fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018a00:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018a04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a08:	f886 a002 	strb.w	sl, [r6, #2]
 8018a0c:	f886 9001 	strb.w	r9, [r6, #1]
 8018a10:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018a12:	4474      	add	r4, lr
 8018a14:	3701      	adds	r7, #1
 8018a16:	4410      	add	r0, r2
 8018a18:	e755      	b.n	80188c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8018a1a:	b007      	add	sp, #28
 8018a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a20:	2402527c 	.word	0x2402527c

08018a24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	b085      	sub	sp, #20
 8018a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018a2e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018a30:	9203      	str	r2, [sp, #12]
 8018a32:	6860      	ldr	r0, [r4, #4]
 8018a34:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018a38:	9100      	str	r1, [sp, #0]
 8018a3a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8018a3e:	fb00 2606 	mla	r6, r0, r6, r2
 8018a42:	6822      	ldr	r2, [r4, #0]
 8018a44:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018a48:	4416      	add	r6, r2
 8018a4a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018a4e:	3201      	adds	r2, #1
 8018a50:	f022 0201 	bic.w	r2, r2, #1
 8018a54:	9201      	str	r2, [sp, #4]
 8018a56:	f8dc 2000 	ldr.w	r2, [ip]
 8018a5a:	9202      	str	r2, [sp, #8]
 8018a5c:	9a00      	ldr	r2, [sp, #0]
 8018a5e:	2a00      	cmp	r2, #0
 8018a60:	dc03      	bgt.n	8018a6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8018a62:	9a03      	ldr	r2, [sp, #12]
 8018a64:	2a00      	cmp	r2, #0
 8018a66:	f340 8140 	ble.w	8018cea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018a6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018a6c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018a70:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8018a74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018a76:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018a7a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	dd0e      	ble.n	8018aa0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018a82:	142a      	asrs	r2, r5, #16
 8018a84:	d405      	bmi.n	8018a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018a86:	4572      	cmp	r2, lr
 8018a88:	da03      	bge.n	8018a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018a8a:	1422      	asrs	r2, r4, #16
 8018a8c:	d401      	bmi.n	8018a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018a8e:	42ba      	cmp	r2, r7
 8018a90:	db07      	blt.n	8018aa2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018a92:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018a94:	3b01      	subs	r3, #1
 8018a96:	3603      	adds	r6, #3
 8018a98:	4415      	add	r5, r2
 8018a9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018a9c:	4414      	add	r4, r2
 8018a9e:	e7ee      	b.n	8018a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018aa0:	d072      	beq.n	8018b88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018aa2:	1e5a      	subs	r2, r3, #1
 8018aa4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018aa6:	fb00 5002 	mla	r0, r0, r2, r5
 8018aaa:	1400      	asrs	r0, r0, #16
 8018aac:	d463      	bmi.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018aae:	4570      	cmp	r0, lr
 8018ab0:	da61      	bge.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ab2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018ab4:	fb00 4202 	mla	r2, r0, r2, r4
 8018ab8:	1412      	asrs	r2, r2, #16
 8018aba:	d45c      	bmi.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018abc:	42ba      	cmp	r2, r7
 8018abe:	da5a      	bge.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ac0:	1cf0      	adds	r0, r6, #3
 8018ac2:	469a      	mov	sl, r3
 8018ac4:	f1ba 0f00 	cmp.w	sl, #0
 8018ac8:	dd59      	ble.n	8018b7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018aca:	142a      	asrs	r2, r5, #16
 8018acc:	9901      	ldr	r1, [sp, #4]
 8018ace:	1427      	asrs	r7, r4, #16
 8018ad0:	fb01 2707 	mla	r7, r1, r7, r2
 8018ad4:	9902      	ldr	r1, [sp, #8]
 8018ad6:	087a      	lsrs	r2, r7, #1
 8018ad8:	5c8a      	ldrb	r2, [r1, r2]
 8018ada:	07f9      	lsls	r1, r7, #31
 8018adc:	bf54      	ite	pl
 8018ade:	f002 020f 	andpl.w	r2, r2, #15
 8018ae2:	1112      	asrmi	r2, r2, #4
 8018ae4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018ae8:	b2d2      	uxtb	r2, r2
 8018aea:	2a00      	cmp	r2, #0
 8018aec:	d03b      	beq.n	8018b66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018aee:	4980      	ldr	r1, [pc, #512]	@ (8018cf0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018af0:	2aff      	cmp	r2, #255	@ 0xff
 8018af2:	680f      	ldr	r7, [r1, #0]
 8018af4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018af8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018afc:	b2ff      	uxtb	r7, r7
 8018afe:	f000 80ed 	beq.w	8018cdc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8018b02:	fa1f f882 	uxth.w	r8, r2
 8018b06:	43d2      	mvns	r2, r2
 8018b08:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8018b0c:	fb17 f708 	smulbb	r7, r7, r8
 8018b10:	b2d2      	uxtb	r2, r2
 8018b12:	fb19 f908 	smulbb	r9, r9, r8
 8018b16:	fb0e 7702 	mla	r7, lr, r2, r7
 8018b1a:	fb1b f808 	smulbb	r8, fp, r8
 8018b1e:	b2bf      	uxth	r7, r7
 8018b20:	f107 0e01 	add.w	lr, r7, #1
 8018b24:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018b28:	123f      	asrs	r7, r7, #8
 8018b2a:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018b2e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8018b32:	fb07 9902 	mla	r9, r7, r2, r9
 8018b36:	fa1f f989 	uxth.w	r9, r9
 8018b3a:	f109 0701 	add.w	r7, r9, #1
 8018b3e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018b42:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8018b46:	fb07 8802 	mla	r8, r7, r2, r8
 8018b4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018b4e:	fa1f f888 	uxth.w	r8, r8
 8018b52:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018b56:	f108 0201 	add.w	r2, r8, #1
 8018b5a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018b5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018b62:	f800 8c01 	strb.w	r8, [r0, #-1]
 8018b66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018b68:	3003      	adds	r0, #3
 8018b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018b6e:	4415      	add	r5, r2
 8018b70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018b72:	4414      	add	r4, r2
 8018b74:	e7a6      	b.n	8018ac4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018b76:	2700      	movs	r7, #0
 8018b78:	1bda      	subs	r2, r3, r7
 8018b7a:	2a00      	cmp	r2, #0
 8018b7c:	dc40      	bgt.n	8018c00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8018b7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b86:	441e      	add	r6, r3
 8018b88:	9b00      	ldr	r3, [sp, #0]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	f340 80ad 	ble.w	8018cea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018b90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b9a:	eeb0 6a62 	vmov.f32	s12, s5
 8018b9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ba2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ba6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018baa:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018bae:	eeb0 6a43 	vmov.f32	s12, s6
 8018bb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018bb6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018bba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bd2:	ee12 2a90 	vmov	r2, s5
 8018bd6:	eef0 2a47 	vmov.f32	s5, s14
 8018bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bde:	ee13 2a10 	vmov	r2, s6
 8018be2:	9311      	str	r3, [sp, #68]	@ 0x44
 8018be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018be6:	eeb0 3a67 	vmov.f32	s6, s15
 8018bea:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8018bf0:	9b00      	ldr	r3, [sp, #0]
 8018bf2:	9a03      	ldr	r2, [sp, #12]
 8018bf4:	3b01      	subs	r3, #1
 8018bf6:	9300      	str	r3, [sp, #0]
 8018bf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bfa:	bf08      	it	eq
 8018bfc:	4613      	moveq	r3, r2
 8018bfe:	e72d      	b.n	8018a5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018c00:	1428      	asrs	r0, r5, #16
 8018c02:	d45c      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018c04:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018c08:	4282      	cmp	r2, r0
 8018c0a:	dd58      	ble.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018c0c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018c10:	d455      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018c12:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018c16:	4572      	cmp	r2, lr
 8018c18:	dd51      	ble.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018c1a:	9a01      	ldr	r2, [sp, #4]
 8018c1c:	9902      	ldr	r1, [sp, #8]
 8018c1e:	fb0e 0002 	mla	r0, lr, r2, r0
 8018c22:	0842      	lsrs	r2, r0, #1
 8018c24:	07c0      	lsls	r0, r0, #31
 8018c26:	5c8a      	ldrb	r2, [r1, r2]
 8018c28:	bf54      	ite	pl
 8018c2a:	f002 020f 	andpl.w	r2, r2, #15
 8018c2e:	1112      	asrmi	r2, r2, #4
 8018c30:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018c34:	b2d2      	uxtb	r2, r2
 8018c36:	2a00      	cmp	r2, #0
 8018c38:	d041      	beq.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018c3a:	492d      	ldr	r1, [pc, #180]	@ (8018cf0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018c3c:	2aff      	cmp	r2, #255	@ 0xff
 8018c3e:	6808      	ldr	r0, [r1, #0]
 8018c40:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018c44:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018c48:	fa5f fe80 	uxtb.w	lr, r0
 8018c4c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8018c50:	d03b      	beq.n	8018cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8018c52:	fa1f f982 	uxth.w	r9, r2
 8018c56:	4438      	add	r0, r7
 8018c58:	43d2      	mvns	r2, r2
 8018c5a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8018c5e:	fb1e fe09 	smulbb	lr, lr, r9
 8018c62:	fb1a fa09 	smulbb	sl, sl, r9
 8018c66:	b2d2      	uxtb	r2, r2
 8018c68:	fb1b f909 	smulbb	r9, fp, r9
 8018c6c:	fb08 ee02 	mla	lr, r8, r2, lr
 8018c70:	fa1f fe8e 	uxth.w	lr, lr
 8018c74:	f10e 0801 	add.w	r8, lr, #1
 8018c78:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8018c7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018c80:	f806 e000 	strb.w	lr, [r6, r0]
 8018c84:	4430      	add	r0, r6
 8018c86:	f890 e001 	ldrb.w	lr, [r0, #1]
 8018c8a:	fb0e aa02 	mla	sl, lr, r2, sl
 8018c8e:	fa1f fa8a 	uxth.w	sl, sl
 8018c92:	f10a 0e01 	add.w	lr, sl, #1
 8018c96:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8018c9a:	f890 e002 	ldrb.w	lr, [r0, #2]
 8018c9e:	fb0e 9902 	mla	r9, lr, r2, r9
 8018ca2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ca6:	fa1f f989 	uxth.w	r9, r9
 8018caa:	f880 a001 	strb.w	sl, [r0, #1]
 8018cae:	f109 0201 	add.w	r2, r9, #1
 8018cb2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018cb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018cba:	f880 9002 	strb.w	r9, [r0, #2]
 8018cbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018cc0:	3701      	adds	r7, #1
 8018cc2:	4415      	add	r5, r2
 8018cc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018cc6:	4414      	add	r4, r2
 8018cc8:	e756      	b.n	8018b78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018cca:	4438      	add	r0, r7
 8018ccc:	f806 e000 	strb.w	lr, [r6, r0]
 8018cd0:	4430      	add	r0, r6
 8018cd2:	f880 a001 	strb.w	sl, [r0, #1]
 8018cd6:	f880 b002 	strb.w	fp, [r0, #2]
 8018cda:	e7f0      	b.n	8018cbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018cdc:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018ce0:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018ce4:	f800 bc01 	strb.w	fp, [r0, #-1]
 8018ce8:	e73d      	b.n	8018b66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018cea:	b005      	add	sp, #20
 8018cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf0:	2402527c 	.word	0x2402527c

08018cf4 <_ZN8touchgfx8LCD24bppD1Ev>:
 8018cf4:	4770      	bx	lr

08018cf6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8018cf6:	4770      	bx	lr

08018cf8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8018cf8:	4770      	bx	lr

08018cfa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8018cfa:	4770      	bx	lr

08018cfc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8018cfc:	4770      	bx	lr

08018cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8018cfe:	4770      	bx	lr

08018d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8018d00:	4770      	bx	lr

08018d02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8018d02:	4770      	bx	lr

08018d04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8018d04:	4770      	bx	lr

08018d06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018d06:	4770      	bx	lr

08018d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018d08:	4770      	bx	lr

08018d0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018d0a:	4770      	bx	lr

08018d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018d0c:	4770      	bx	lr

08018d0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018d0e:	4770      	bx	lr

08018d10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018d10:	4770      	bx	lr

08018d12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018d12:	4770      	bx	lr

08018d14 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018d14:	4770      	bx	lr

08018d16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018d16:	4770      	bx	lr

08018d18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018d18:	4770      	bx	lr

08018d1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018d1a:	4770      	bx	lr

08018d1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018d1c:	4770      	bx	lr

08018d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018d1e:	4770      	bx	lr

08018d20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018d20:	4770      	bx	lr

08018d22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018d22:	4770      	bx	lr

08018d24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018d24:	4770      	bx	lr
	...

08018d28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d2a:	4606      	mov	r6, r0
 8018d2c:	b087      	sub	sp, #28
 8018d2e:	4615      	mov	r5, r2
 8018d30:	461f      	mov	r7, r3
 8018d32:	b353      	cbz	r3, 8018d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018d34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	dd26      	ble.n	8018d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018d3c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	dd22      	ble.n	8018d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018d44:	6808      	ldr	r0, [r1, #0]
 8018d46:	aa04      	add	r2, sp, #16
 8018d48:	6849      	ldr	r1, [r1, #4]
 8018d4a:	4c1b      	ldr	r4, [pc, #108]	@ (8018db8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018d4c:	c203      	stmia	r2!, {r0, r1}
 8018d4e:	a804      	add	r0, sp, #16
 8018d50:	f7fa f964 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018d54:	6820      	ldr	r0, [r4, #0]
 8018d56:	6803      	ldr	r3, [r0, #0]
 8018d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d5a:	4798      	blx	r3
 8018d5c:	2fff      	cmp	r7, #255	@ 0xff
 8018d5e:	d016      	beq.n	8018d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018d60:	f010 0f08 	tst.w	r0, #8
 8018d64:	6820      	ldr	r0, [r4, #0]
 8018d66:	d015      	beq.n	8018d94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8018d68:	2400      	movs	r4, #0
 8018d6a:	6801      	ldr	r1, [r0, #0]
 8018d6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018d70:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018d74:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8018d78:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018d7c:	9401      	str	r4, [sp, #4]
 8018d7e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018d82:	9400      	str	r4, [sp, #0]
 8018d84:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8018d86:	4629      	mov	r1, r5
 8018d88:	47a0      	blx	r4
 8018d8a:	b007      	add	sp, #28
 8018d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d8e:	f010 0f02 	tst.w	r0, #2
 8018d92:	e7e7      	b.n	8018d64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8018d94:	6803      	ldr	r3, [r0, #0]
 8018d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d98:	4798      	blx	r3
 8018d9a:	4b08      	ldr	r3, [pc, #32]	@ (8018dbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8018d9c:	4601      	mov	r1, r0
 8018d9e:	4630      	mov	r0, r6
 8018da0:	881a      	ldrh	r2, [r3, #0]
 8018da2:	6833      	ldr	r3, [r6, #0]
 8018da4:	e9cd 5700 	strd	r5, r7, [sp]
 8018da8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018daa:	ab04      	add	r3, sp, #16
 8018dac:	47a8      	blx	r5
 8018dae:	6820      	ldr	r0, [r4, #0]
 8018db0:	6803      	ldr	r3, [r0, #0]
 8018db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018db4:	4798      	blx	r3
 8018db6:	e7e8      	b.n	8018d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018db8:	2402526c 	.word	0x2402526c
 8018dbc:	24025266 	.word	0x24025266

08018dc0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018dc4:	b08b      	sub	sp, #44	@ 0x2c
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	4616      	mov	r6, r2
 8018dca:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8018dce:	f1b8 0f00 	cmp.w	r8, #0
 8018dd2:	d047      	beq.n	8018e64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018dd4:	6810      	ldr	r0, [r2, #0]
 8018dd6:	ac06      	add	r4, sp, #24
 8018dd8:	6851      	ldr	r1, [r2, #4]
 8018dda:	4f51      	ldr	r7, [pc, #324]	@ (8018f20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8018ddc:	c403      	stmia	r4!, {r0, r1}
 8018dde:	6818      	ldr	r0, [r3, #0]
 8018de0:	ac08      	add	r4, sp, #32
 8018de2:	6859      	ldr	r1, [r3, #4]
 8018de4:	c403      	stmia	r4!, {r0, r1}
 8018de6:	a806      	add	r0, sp, #24
 8018de8:	f7fa f918 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018dec:	4631      	mov	r1, r6
 8018dee:	a808      	add	r0, sp, #32
 8018df0:	f7fa f958 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018df4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018df8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018dfc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018e00:	6838      	ldr	r0, [r7, #0]
 8018e02:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018e06:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8018e0a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8018e0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018e12:	440d      	add	r5, r1
 8018e14:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018e18:	440a      	add	r2, r1
 8018e1a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018e1e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018e22:	4413      	add	r3, r2
 8018e24:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018e28:	6803      	ldr	r3, [r0, #0]
 8018e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018e2c:	4798      	blx	r3
 8018e2e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8018e32:	d01a      	beq.n	8018e6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8018e34:	f010 0f04 	tst.w	r0, #4
 8018e38:	6838      	ldr	r0, [r7, #0]
 8018e3a:	d019      	beq.n	8018e70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8018e3c:	2100      	movs	r1, #0
 8018e3e:	6807      	ldr	r7, [r0, #0]
 8018e40:	b2a4      	uxth	r4, r4
 8018e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e46:	b2b6      	uxth	r6, r6
 8018e48:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8018e4c:	9401      	str	r4, [sp, #4]
 8018e4e:	9600      	str	r6, [sp, #0]
 8018e50:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018e54:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8018e58:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018e5c:	9102      	str	r1, [sp, #8]
 8018e5e:	4629      	mov	r1, r5
 8018e60:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8018e62:	47a0      	blx	r4
 8018e64:	b00b      	add	sp, #44	@ 0x2c
 8018e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e6a:	f010 0f01 	tst.w	r0, #1
 8018e6e:	e7e3      	b.n	8018e38 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8018e70:	6803      	ldr	r3, [r0, #0]
 8018e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e74:	4798      	blx	r3
 8018e76:	4a2b      	ldr	r2, [pc, #172]	@ (8018f24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8018e78:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8018e7c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8018e80:	8813      	ldrh	r3, [r2, #0]
 8018e82:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8018e86:	fb03 f404 	mul.w	r4, r3, r4
 8018e8a:	fb03 c101 	mla	r1, r3, r1, ip
 8018e8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018e96:	4408      	add	r0, r1
 8018e98:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8018e9c:	4404      	add	r4, r0
 8018e9e:	d02e      	beq.n	8018efe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8018ea0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8018ea4:	1b9b      	subs	r3, r3, r6
 8018ea6:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8018eaa:	1b96      	subs	r6, r2, r6
 8018eac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018eb0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018eb4:	42a0      	cmp	r0, r4
 8018eb6:	d22d      	bcs.n	8018f14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018eb8:	eb00 0e01 	add.w	lr, r0, r1
 8018ebc:	4570      	cmp	r0, lr
 8018ebe:	d210      	bcs.n	8018ee2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8018ec0:	f890 9000 	ldrb.w	r9, [r0]
 8018ec4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8018ec8:	fb19 f90c 	smulbb	r9, r9, ip
 8018ecc:	fb02 9208 	mla	r2, r2, r8, r9
 8018ed0:	b292      	uxth	r2, r2
 8018ed2:	f102 0901 	add.w	r9, r2, #1
 8018ed6:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8018eda:	1212      	asrs	r2, r2, #8
 8018edc:	f800 2b01 	strb.w	r2, [r0], #1
 8018ee0:	e7ec      	b.n	8018ebc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8018ee2:	4418      	add	r0, r3
 8018ee4:	4435      	add	r5, r6
 8018ee6:	e7e5      	b.n	8018eb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8018ee8:	8813      	ldrh	r3, [r2, #0]
 8018eea:	1b9b      	subs	r3, r3, r6
 8018eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018ef0:	4418      	add	r0, r3
 8018ef2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018ef6:	1b9b      	subs	r3, r3, r6
 8018ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018efc:	441d      	add	r5, r3
 8018efe:	42a0      	cmp	r0, r4
 8018f00:	d208      	bcs.n	8018f14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018f02:	eb00 0c01 	add.w	ip, r0, r1
 8018f06:	4560      	cmp	r0, ip
 8018f08:	d2ee      	bcs.n	8018ee8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8018f0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018f0e:	f800 3b01 	strb.w	r3, [r0], #1
 8018f12:	e7f8      	b.n	8018f06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8018f14:	6838      	ldr	r0, [r7, #0]
 8018f16:	6803      	ldr	r3, [r0, #0]
 8018f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f1a:	4798      	blx	r3
 8018f1c:	e7a2      	b.n	8018e64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018f1e:	bf00      	nop
 8018f20:	2402526c 	.word	0x2402526c
 8018f24:	24025266 	.word	0x24025266

08018f28 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8018f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	b085      	sub	sp, #20
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	4b41      	ldr	r3, [pc, #260]	@ (8019038 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8018f32:	781b      	ldrb	r3, [r3, #0]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d136      	bne.n	8018fa6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8018f38:	4a40      	ldr	r2, [pc, #256]	@ (801903c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018f3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018f3e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d131      	bne.n	8018faa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8018f46:	4b3e      	ldr	r3, [pc, #248]	@ (8019040 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8018f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f4c:	ac02      	add	r4, sp, #8
 8018f4e:	6808      	ldr	r0, [r1, #0]
 8018f50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f54:	ab02      	add	r3, sp, #8
 8018f56:	6849      	ldr	r1, [r1, #4]
 8018f58:	4d3a      	ldr	r5, [pc, #232]	@ (8019044 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8018f5a:	c303      	stmia	r3!, {r0, r1}
 8018f5c:	4669      	mov	r1, sp
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f7fa f8a0 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018f64:	4668      	mov	r0, sp
 8018f66:	f7fa f859 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f6e:	f8bd 2000 	ldrh.w	r2, [sp]
 8018f72:	462e      	mov	r6, r5
 8018f74:	6828      	ldr	r0, [r5, #0]
 8018f76:	4413      	add	r3, r2
 8018f78:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018f7c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8018f80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018f84:	4413      	add	r3, r2
 8018f86:	f8ad 300a 	strh.w	r3, [sp, #10]
 8018f8a:	6803      	ldr	r3, [r0, #0]
 8018f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018f8e:	4798      	blx	r3
 8018f90:	f010 0f01 	tst.w	r0, #1
 8018f94:	d00b      	beq.n	8018fae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8018f96:	6828      	ldr	r0, [r5, #0]
 8018f98:	6803      	ldr	r3, [r0, #0]
 8018f9a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018fa0:	4798      	blx	r3
 8018fa2:	b005      	add	sp, #20
 8018fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa6:	4a26      	ldr	r2, [pc, #152]	@ (8019040 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8018fa8:	e7c7      	b.n	8018f3a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8018faa:	4b24      	ldr	r3, [pc, #144]	@ (801903c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018fac:	e7cc      	b.n	8018f48 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8018fae:	6830      	ldr	r0, [r6, #0]
 8018fb0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8018fb4:	6803      	ldr	r3, [r0, #0]
 8018fb6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8018fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018fbc:	4798      	blx	r3
 8018fbe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8018fc2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018fc6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8018fca:	fb14 3402 	smlabb	r4, r4, r2, r3
 8018fce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018fd2:	4404      	add	r4, r0
 8018fd4:	6830      	ldr	r0, [r6, #0]
 8018fd6:	6803      	ldr	r3, [r0, #0]
 8018fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fda:	4798      	blx	r3
 8018fdc:	4917      	ldr	r1, [pc, #92]	@ (801903c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018fde:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8018fe2:	880b      	ldrh	r3, [r1, #0]
 8018fe4:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8018fe8:	fb03 c202 	mla	r2, r3, r2, ip
 8018fec:	437b      	muls	r3, r7
 8018fee:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8018ff2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ff6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018ffa:	4410      	add	r0, r2
 8018ffc:	18c2      	adds	r2, r0, r3
 8018ffe:	4290      	cmp	r0, r2
 8019000:	d214      	bcs.n	801902c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019002:	eb00 0c07 	add.w	ip, r0, r7
 8019006:	4560      	cmp	r0, ip
 8019008:	d204      	bcs.n	8019014 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801900a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801900e:	f800 3b01 	strb.w	r3, [r0], #1
 8019012:	e7f8      	b.n	8019006 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019014:	880b      	ldrh	r3, [r1, #0]
 8019016:	1b5b      	subs	r3, r3, r5
 8019018:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801901c:	4418      	add	r0, r3
 801901e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019022:	1b5b      	subs	r3, r3, r5
 8019024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019028:	441c      	add	r4, r3
 801902a:	e7e8      	b.n	8018ffe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801902c:	6830      	ldr	r0, [r6, #0]
 801902e:	6803      	ldr	r3, [r0, #0]
 8019030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019032:	4798      	blx	r3
 8019034:	e7b5      	b.n	8018fa2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019036:	bf00      	nop
 8019038:	24025264 	.word	0x24025264
 801903c:	24025266 	.word	0x24025266
 8019040:	24025268 	.word	0x24025268
 8019044:	2402526c 	.word	0x2402526c

08019048 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904c:	b08f      	sub	sp, #60	@ 0x3c
 801904e:	461c      	mov	r4, r3
 8019050:	9203      	str	r2, [sp, #12]
 8019052:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019056:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019058:	6820      	ldr	r0, [r4, #0]
 801905a:	9100      	str	r1, [sp, #0]
 801905c:	9204      	str	r2, [sp, #16]
 801905e:	aa0a      	add	r2, sp, #40	@ 0x28
 8019060:	6861      	ldr	r1, [r4, #4]
 8019062:	c203      	stmia	r2!, {r0, r1}
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	aa0c      	add	r2, sp, #48	@ 0x30
 8019068:	6859      	ldr	r1, [r3, #4]
 801906a:	c203      	stmia	r2!, {r0, r1}
 801906c:	a80a      	add	r0, sp, #40	@ 0x28
 801906e:	f7f9 ffd5 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019072:	4621      	mov	r1, r4
 8019074:	a80c      	add	r0, sp, #48	@ 0x30
 8019076:	f7fa f815 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801907a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801907e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019082:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019086:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801908a:	bfdb      	ittet	le
 801908c:	b2b3      	uxthle	r3, r6
 801908e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019092:	2301      	movgt	r3, #1
 8019094:	fb92 f3f3 	sdivle	r3, r2, r3
 8019098:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801909c:	441d      	add	r5, r3
 801909e:	fb92 f1f3 	sdiv	r1, r2, r3
 80190a2:	fa1f fc81 	uxth.w	ip, r1
 80190a6:	3d01      	subs	r5, #1
 80190a8:	fb0c 2413 	mls	r4, ip, r3, r2
 80190ac:	4661      	mov	r1, ip
 80190ae:	fb14 f406 	smulbb	r4, r4, r6
 80190b2:	4404      	add	r4, r0
 80190b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80190b8:	b2a4      	uxth	r4, r4
 80190ba:	b131      	cbz	r1, 80190ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80190bc:	9b03      	ldr	r3, [sp, #12]
 80190be:	9900      	ldr	r1, [sp, #0]
 80190c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80190c4:	ba1b      	rev	r3, r3
 80190c6:	4419      	add	r1, r3
 80190c8:	9100      	str	r1, [sp, #0]
 80190ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80190ce:	b2ad      	uxth	r5, r5
 80190d0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80190d4:	4418      	add	r0, r3
 80190d6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80190da:	00ad      	lsls	r5, r5, #2
 80190dc:	441a      	add	r2, r3
 80190de:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80190e2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80190e6:	9301      	str	r3, [sp, #4]
 80190e8:	4b79      	ldr	r3, [pc, #484]	@ (80192d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80190ea:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80190ee:	6818      	ldr	r0, [r3, #0]
 80190f0:	6803      	ldr	r3, [r0, #0]
 80190f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190f4:	4798      	blx	r3
 80190f6:	4a77      	ldr	r2, [pc, #476]	@ (80192d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80190f8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80190fc:	2c00      	cmp	r4, #0
 80190fe:	8813      	ldrh	r3, [r2, #0]
 8019100:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019104:	9209      	str	r2, [sp, #36]	@ 0x24
 8019106:	fb03 c101 	mla	r1, r3, r1, ip
 801910a:	fb06 f303 	mul.w	r3, r6, r3
 801910e:	bf18      	it	ne
 8019110:	2600      	movne	r6, #0
 8019112:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801911a:	4408      	add	r0, r1
 801911c:	4403      	add	r3, r0
 801911e:	9306      	str	r3, [sp, #24]
 8019120:	f105 0304 	add.w	r3, r5, #4
 8019124:	9305      	str	r3, [sp, #20]
 8019126:	9b01      	ldr	r3, [sp, #4]
 8019128:	bf08      	it	eq
 801912a:	461e      	moveq	r6, r3
 801912c:	2300      	movs	r3, #0
 801912e:	b2b6      	uxth	r6, r6
 8019130:	9302      	str	r3, [sp, #8]
 8019132:	9a06      	ldr	r2, [sp, #24]
 8019134:	4290      	cmp	r0, r2
 8019136:	f080 80c2 	bcs.w	80192be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801913a:	b963      	cbnz	r3, 8019156 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801913c:	9b00      	ldr	r3, [sp, #0]
 801913e:	781a      	ldrb	r2, [r3, #0]
 8019140:	0993      	lsrs	r3, r2, #6
 8019142:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019146:	9202      	str	r2, [sp, #8]
 8019148:	1e5a      	subs	r2, r3, #1
 801914a:	2a02      	cmp	r2, #2
 801914c:	d815      	bhi.n	801917a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801914e:	9a00      	ldr	r2, [sp, #0]
 8019150:	b29b      	uxth	r3, r3
 8019152:	3201      	adds	r2, #1
 8019154:	9200      	str	r2, [sp, #0]
 8019156:	b1b4      	cbz	r4, 8019186 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8019158:	429c      	cmp	r4, r3
 801915a:	bf91      	iteee	ls
 801915c:	1b1c      	subls	r4, r3, r4
 801915e:	1ae4      	subhi	r4, r4, r3
 8019160:	4635      	movhi	r5, r6
 8019162:	f04f 0e00 	movhi.w	lr, #0
 8019166:	bf9b      	ittet	ls
 8019168:	fa1f fe84 	uxthls.w	lr, r4
 801916c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019170:	b2a4      	uxthhi	r4, r4
 8019172:	2400      	movls	r4, #0
 8019174:	4673      	mov	r3, lr
 8019176:	462e      	mov	r6, r5
 8019178:	e7db      	b.n	8019132 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801917a:	9a00      	ldr	r2, [sp, #0]
 801917c:	9b00      	ldr	r3, [sp, #0]
 801917e:	3202      	adds	r2, #2
 8019180:	785b      	ldrb	r3, [r3, #1]
 8019182:	9200      	str	r2, [sp, #0]
 8019184:	e7e7      	b.n	8019156 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019186:	2204      	movs	r2, #4
 8019188:	9905      	ldr	r1, [sp, #20]
 801918a:	429e      	cmp	r6, r3
 801918c:	4615      	mov	r5, r2
 801918e:	9a02      	ldr	r2, [sp, #8]
 8019190:	bf94      	ite	ls
 8019192:	eba3 0e06 	subls.w	lr, r3, r6
 8019196:	46a6      	movhi	lr, r4
 8019198:	fb15 1202 	smlabb	r2, r5, r2, r1
 801919c:	9903      	ldr	r1, [sp, #12]
 801919e:	bf8c      	ite	hi
 80191a0:	1af5      	subhi	r5, r6, r3
 80191a2:	fa1f fe8e 	uxthls.w	lr, lr
 80191a6:	f851 c002 	ldr.w	ip, [r1, r2]
 80191aa:	bf9a      	itte	ls
 80191ac:	4625      	movls	r5, r4
 80191ae:	4632      	movls	r2, r6
 80191b0:	b2ad      	uxthhi	r5, r5
 80191b2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80191b6:	bf88      	it	hi
 80191b8:	461a      	movhi	r2, r3
 80191ba:	b179      	cbz	r1, 80191dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80191bc:	29ff      	cmp	r1, #255	@ 0xff
 80191be:	fa5f f98c 	uxtb.w	r9, ip
 80191c2:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80191c6:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80191ca:	d126      	bne.n	801921a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80191cc:	9f04      	ldr	r7, [sp, #16]
 80191ce:	2fff      	cmp	r7, #255	@ 0xff
 80191d0:	d123      	bne.n	801921a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80191d2:	4682      	mov	sl, r0
 80191d4:	4611      	mov	r1, r2
 80191d6:	f10a 0a03 	add.w	sl, sl, #3
 80191da:	b9a9      	cbnz	r1, 8019208 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80191dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80191e0:	429e      	cmp	r6, r3
 80191e2:	4410      	add	r0, r2
 80191e4:	d8c6      	bhi.n	8019174 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80191e6:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80191ea:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80191ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191f0:	1b64      	subs	r4, r4, r5
 80191f2:	9a01      	ldr	r2, [sp, #4]
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	b2a4      	uxth	r4, r4
 80191f8:	1a9b      	subs	r3, r3, r2
 80191fa:	2c00      	cmp	r4, #0
 80191fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019200:	bf18      	it	ne
 8019202:	2500      	movne	r5, #0
 8019204:	4418      	add	r0, r3
 8019206:	e7b5      	b.n	8019174 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019208:	3901      	subs	r1, #1
 801920a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801920e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8019212:	f80a cc01 	strb.w	ip, [sl, #-1]
 8019216:	b289      	uxth	r1, r1
 8019218:	e7dd      	b.n	80191d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801921a:	9f04      	ldr	r7, [sp, #16]
 801921c:	fb07 fa01 	mul.w	sl, r7, r1
 8019220:	f10a 0101 	add.w	r1, sl, #1
 8019224:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8019228:	1209      	asrs	r1, r1, #8
 801922a:	ea6f 0a01 	mvn.w	sl, r1
 801922e:	b289      	uxth	r1, r1
 8019230:	fb19 f901 	smulbb	r9, r9, r1
 8019234:	fa5f fa8a 	uxtb.w	sl, sl
 8019238:	fb18 f801 	smulbb	r8, r8, r1
 801923c:	fb1c f101 	smulbb	r1, ip, r1
 8019240:	fa1f f789 	uxth.w	r7, r9
 8019244:	4684      	mov	ip, r0
 8019246:	4691      	mov	r9, r2
 8019248:	9707      	str	r7, [sp, #28]
 801924a:	b289      	uxth	r1, r1
 801924c:	fa1f f788 	uxth.w	r7, r8
 8019250:	9708      	str	r7, [sp, #32]
 8019252:	f10c 0c03 	add.w	ip, ip, #3
 8019256:	f1b9 0f00 	cmp.w	r9, #0
 801925a:	d0bf      	beq.n	80191dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801925c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019260:	f109 39ff 	add.w	r9, r9, #4294967295
 8019264:	9f07      	ldr	r7, [sp, #28]
 8019266:	fa1f f989 	uxth.w	r9, r9
 801926a:	fb08 780a 	mla	r8, r8, sl, r7
 801926e:	9f08      	ldr	r7, [sp, #32]
 8019270:	fa1f f888 	uxth.w	r8, r8
 8019274:	f108 0b01 	add.w	fp, r8, #1
 8019278:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801927c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019280:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019284:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8019288:	fb08 780a 	mla	r8, r8, sl, r7
 801928c:	fa1f f888 	uxth.w	r8, r8
 8019290:	f108 0b01 	add.w	fp, r8, #1
 8019294:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019298:	ea4f 2828 	mov.w	r8, r8, asr #8
 801929c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80192a0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80192a4:	fb08 180a 	mla	r8, r8, sl, r1
 80192a8:	fa1f f888 	uxth.w	r8, r8
 80192ac:	f108 0b01 	add.w	fp, r8, #1
 80192b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80192b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80192b8:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80192bc:	e7c9      	b.n	8019252 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80192be:	4b04      	ldr	r3, [pc, #16]	@ (80192d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80192c0:	6818      	ldr	r0, [r3, #0]
 80192c2:	6803      	ldr	r3, [r0, #0]
 80192c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192c6:	4798      	blx	r3
 80192c8:	b00f      	add	sp, #60	@ 0x3c
 80192ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ce:	bf00      	nop
 80192d0:	2402526c 	.word	0x2402526c
 80192d4:	24025266 	.word	0x24025266

080192d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80192d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192dc:	b089      	sub	sp, #36	@ 0x24
 80192de:	4607      	mov	r7, r0
 80192e0:	4689      	mov	r9, r1
 80192e2:	4692      	mov	sl, r2
 80192e4:	ac08      	add	r4, sp, #32
 80192e6:	461e      	mov	r6, r3
 80192e8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80192ec:	4620      	mov	r0, r4
 80192ee:	f7fd ff77 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	4605      	mov	r5, r0
 80192f6:	4620      	mov	r0, r4
 80192f8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80192fc:	f7fd fe7e 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019300:	4683      	mov	fp, r0
 8019302:	4620      	mov	r0, r4
 8019304:	f7fd feae 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019308:	4653      	mov	r3, sl
 801930a:	464a      	mov	r2, r9
 801930c:	4639      	mov	r1, r7
 801930e:	9500      	str	r5, [sp, #0]
 8019310:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019314:	a806      	add	r0, sp, #24
 8019316:	47c0      	blx	r8
 8019318:	a906      	add	r1, sp, #24
 801931a:	4630      	mov	r0, r6
 801931c:	f7fd fd52 	bl	8016dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019320:	4628      	mov	r0, r5
 8019322:	b009      	add	sp, #36	@ 0x24
 8019324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019328 <_ZN8touchgfx8LCD24bppD0Ev>:
 8019328:	b510      	push	{r4, lr}
 801932a:	4604      	mov	r4, r0
 801932c:	216c      	movs	r1, #108	@ 0x6c
 801932e:	f008 fc60 	bl	8021bf2 <_ZdlPvj>
 8019332:	4620      	mov	r0, r4
 8019334:	bd10      	pop	{r4, pc}

08019336 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8019336:	b510      	push	{r4, lr}
 8019338:	4604      	mov	r4, r0
 801933a:	2104      	movs	r1, #4
 801933c:	f008 fc59 	bl	8021bf2 <_ZdlPvj>
 8019340:	4620      	mov	r0, r4
 8019342:	bd10      	pop	{r4, pc}

08019344 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019344:	b510      	push	{r4, lr}
 8019346:	4604      	mov	r4, r0
 8019348:	2104      	movs	r1, #4
 801934a:	f008 fc52 	bl	8021bf2 <_ZdlPvj>
 801934e:	4620      	mov	r0, r4
 8019350:	bd10      	pop	{r4, pc}

08019352 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019352:	b510      	push	{r4, lr}
 8019354:	4604      	mov	r4, r0
 8019356:	f640 0144 	movw	r1, #2116	@ 0x844
 801935a:	f008 fc4a 	bl	8021bf2 <_ZdlPvj>
 801935e:	4620      	mov	r0, r4
 8019360:	bd10      	pop	{r4, pc}

08019362 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8019362:	b510      	push	{r4, lr}
 8019364:	4604      	mov	r4, r0
 8019366:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801936a:	f008 fc42 	bl	8021bf2 <_ZdlPvj>
 801936e:	4620      	mov	r0, r4
 8019370:	bd10      	pop	{r4, pc}

08019372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019372:	b510      	push	{r4, lr}
 8019374:	4604      	mov	r4, r0
 8019376:	2104      	movs	r1, #4
 8019378:	f008 fc3b 	bl	8021bf2 <_ZdlPvj>
 801937c:	4620      	mov	r0, r4
 801937e:	bd10      	pop	{r4, pc}

08019380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019380:	b510      	push	{r4, lr}
 8019382:	4604      	mov	r4, r0
 8019384:	2104      	movs	r1, #4
 8019386:	f008 fc34 	bl	8021bf2 <_ZdlPvj>
 801938a:	4620      	mov	r0, r4
 801938c:	bd10      	pop	{r4, pc}

0801938e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801938e:	b510      	push	{r4, lr}
 8019390:	4604      	mov	r4, r0
 8019392:	2104      	movs	r1, #4
 8019394:	f008 fc2d 	bl	8021bf2 <_ZdlPvj>
 8019398:	4620      	mov	r0, r4
 801939a:	bd10      	pop	{r4, pc}

0801939c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801939c:	b510      	push	{r4, lr}
 801939e:	4604      	mov	r4, r0
 80193a0:	2104      	movs	r1, #4
 80193a2:	f008 fc26 	bl	8021bf2 <_ZdlPvj>
 80193a6:	4620      	mov	r0, r4
 80193a8:	bd10      	pop	{r4, pc}

080193aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80193aa:	b510      	push	{r4, lr}
 80193ac:	4604      	mov	r4, r0
 80193ae:	2104      	movs	r1, #4
 80193b0:	f008 fc1f 	bl	8021bf2 <_ZdlPvj>
 80193b4:	4620      	mov	r0, r4
 80193b6:	bd10      	pop	{r4, pc}

080193b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80193b8:	b510      	push	{r4, lr}
 80193ba:	4604      	mov	r4, r0
 80193bc:	2104      	movs	r1, #4
 80193be:	f008 fc18 	bl	8021bf2 <_ZdlPvj>
 80193c2:	4620      	mov	r0, r4
 80193c4:	bd10      	pop	{r4, pc}

080193c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80193c6:	b510      	push	{r4, lr}
 80193c8:	4604      	mov	r4, r0
 80193ca:	2104      	movs	r1, #4
 80193cc:	f008 fc11 	bl	8021bf2 <_ZdlPvj>
 80193d0:	4620      	mov	r0, r4
 80193d2:	bd10      	pop	{r4, pc}

080193d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80193d4:	b510      	push	{r4, lr}
 80193d6:	4604      	mov	r4, r0
 80193d8:	2104      	movs	r1, #4
 80193da:	f008 fc0a 	bl	8021bf2 <_ZdlPvj>
 80193de:	4620      	mov	r0, r4
 80193e0:	bd10      	pop	{r4, pc}

080193e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80193e2:	b510      	push	{r4, lr}
 80193e4:	4604      	mov	r4, r0
 80193e6:	2104      	movs	r1, #4
 80193e8:	f008 fc03 	bl	8021bf2 <_ZdlPvj>
 80193ec:	4620      	mov	r0, r4
 80193ee:	bd10      	pop	{r4, pc}

080193f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80193f0:	b510      	push	{r4, lr}
 80193f2:	4604      	mov	r4, r0
 80193f4:	2104      	movs	r1, #4
 80193f6:	f008 fbfc 	bl	8021bf2 <_ZdlPvj>
 80193fa:	4620      	mov	r0, r4
 80193fc:	bd10      	pop	{r4, pc}

080193fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80193fe:	b510      	push	{r4, lr}
 8019400:	4604      	mov	r4, r0
 8019402:	2104      	movs	r1, #4
 8019404:	f008 fbf5 	bl	8021bf2 <_ZdlPvj>
 8019408:	4620      	mov	r0, r4
 801940a:	bd10      	pop	{r4, pc}

0801940c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801940c:	b510      	push	{r4, lr}
 801940e:	4604      	mov	r4, r0
 8019410:	2104      	movs	r1, #4
 8019412:	f008 fbee 	bl	8021bf2 <_ZdlPvj>
 8019416:	4620      	mov	r0, r4
 8019418:	bd10      	pop	{r4, pc}

0801941a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801941a:	b510      	push	{r4, lr}
 801941c:	4604      	mov	r4, r0
 801941e:	2104      	movs	r1, #4
 8019420:	f008 fbe7 	bl	8021bf2 <_ZdlPvj>
 8019424:	4620      	mov	r0, r4
 8019426:	bd10      	pop	{r4, pc}

08019428 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019428:	b510      	push	{r4, lr}
 801942a:	4604      	mov	r4, r0
 801942c:	2104      	movs	r1, #4
 801942e:	f008 fbe0 	bl	8021bf2 <_ZdlPvj>
 8019432:	4620      	mov	r0, r4
 8019434:	bd10      	pop	{r4, pc}

08019436 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019436:	b510      	push	{r4, lr}
 8019438:	4604      	mov	r4, r0
 801943a:	2104      	movs	r1, #4
 801943c:	f008 fbd9 	bl	8021bf2 <_ZdlPvj>
 8019440:	4620      	mov	r0, r4
 8019442:	bd10      	pop	{r4, pc}

08019444 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019444:	b510      	push	{r4, lr}
 8019446:	4604      	mov	r4, r0
 8019448:	2104      	movs	r1, #4
 801944a:	f008 fbd2 	bl	8021bf2 <_ZdlPvj>
 801944e:	4620      	mov	r0, r4
 8019450:	bd10      	pop	{r4, pc}

08019452 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019452:	b510      	push	{r4, lr}
 8019454:	4604      	mov	r4, r0
 8019456:	2104      	movs	r1, #4
 8019458:	f008 fbcb 	bl	8021bf2 <_ZdlPvj>
 801945c:	4620      	mov	r0, r4
 801945e:	bd10      	pop	{r4, pc}

08019460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019460:	b510      	push	{r4, lr}
 8019462:	4604      	mov	r4, r0
 8019464:	2104      	movs	r1, #4
 8019466:	f008 fbc4 	bl	8021bf2 <_ZdlPvj>
 801946a:	4620      	mov	r0, r4
 801946c:	bd10      	pop	{r4, pc}

0801946e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801946e:	b510      	push	{r4, lr}
 8019470:	4604      	mov	r4, r0
 8019472:	2104      	movs	r1, #4
 8019474:	f008 fbbd 	bl	8021bf2 <_ZdlPvj>
 8019478:	4620      	mov	r0, r4
 801947a:	bd10      	pop	{r4, pc}

0801947c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801947c:	b510      	push	{r4, lr}
 801947e:	4604      	mov	r4, r0
 8019480:	2104      	movs	r1, #4
 8019482:	f008 fbb6 	bl	8021bf2 <_ZdlPvj>
 8019486:	4620      	mov	r0, r4
 8019488:	bd10      	pop	{r4, pc}
	...

0801948c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019490:	b08f      	sub	sp, #60	@ 0x3c
 8019492:	461c      	mov	r4, r3
 8019494:	460e      	mov	r6, r1
 8019496:	9206      	str	r2, [sp, #24]
 8019498:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801949c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801949e:	9202      	str	r2, [sp, #8]
 80194a0:	2a00      	cmp	r2, #0
 80194a2:	f000 8128 	beq.w	80196f6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80194a6:	6820      	ldr	r0, [r4, #0]
 80194a8:	aa0a      	add	r2, sp, #40	@ 0x28
 80194aa:	6861      	ldr	r1, [r4, #4]
 80194ac:	c203      	stmia	r2!, {r0, r1}
 80194ae:	6818      	ldr	r0, [r3, #0]
 80194b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80194b2:	6859      	ldr	r1, [r3, #4]
 80194b4:	c203      	stmia	r2!, {r0, r1}
 80194b6:	a80a      	add	r0, sp, #40	@ 0x28
 80194b8:	f7f9 fdb0 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80194bc:	4621      	mov	r1, r4
 80194be:	a80c      	add	r0, sp, #48	@ 0x30
 80194c0:	f7f9 fdf0 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80194c4:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80194c8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80194cc:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80194d0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80194d4:	bfdb      	ittet	le
 80194d6:	b2bb      	uxthle	r3, r7
 80194d8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80194dc:	2301      	movgt	r3, #1
 80194de:	fb92 f3f3 	sdivle	r3, r2, r3
 80194e2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80194e6:	441d      	add	r5, r3
 80194e8:	fb92 f1f3 	sdiv	r1, r2, r3
 80194ec:	fa1f fc81 	uxth.w	ip, r1
 80194f0:	3d01      	subs	r5, #1
 80194f2:	fb0c 2413 	mls	r4, ip, r3, r2
 80194f6:	4661      	mov	r1, ip
 80194f8:	fb14 f407 	smulbb	r4, r4, r7
 80194fc:	4404      	add	r4, r0
 80194fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8019502:	b2a4      	uxth	r4, r4
 8019504:	b121      	cbz	r1, 8019510 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8019506:	9b06      	ldr	r3, [sp, #24]
 8019508:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801950c:	ba1b      	rev	r3, r3
 801950e:	441e      	add	r6, r3
 8019510:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019514:	b2ad      	uxth	r5, r5
 8019516:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801951a:	4418      	add	r0, r3
 801951c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019520:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8019524:	00ad      	lsls	r5, r5, #2
 8019526:	441a      	add	r2, r3
 8019528:	4b74      	ldr	r3, [pc, #464]	@ (80196fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801952a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801952e:	6818      	ldr	r0, [r3, #0]
 8019530:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019534:	6803      	ldr	r3, [r0, #0]
 8019536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019538:	4798      	blx	r3
 801953a:	4a71      	ldr	r2, [pc, #452]	@ (8019700 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801953c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019540:	2c00      	cmp	r4, #0
 8019542:	8813      	ldrh	r3, [r2, #0]
 8019544:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019548:	9209      	str	r2, [sp, #36]	@ 0x24
 801954a:	fb03 c101 	mla	r1, r3, r1, ip
 801954e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019552:	fb03 f307 	mul.w	r3, r3, r7
 8019556:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801955a:	9204      	str	r2, [sp, #16]
 801955c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019560:	9a02      	ldr	r2, [sp, #8]
 8019562:	4408      	add	r0, r1
 8019564:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8019568:	4403      	add	r3, r0
 801956a:	b292      	uxth	r2, r2
 801956c:	9307      	str	r3, [sp, #28]
 801956e:	f105 0304 	add.w	r3, r5, #4
 8019572:	bf0c      	ite	eq
 8019574:	4645      	moveq	r5, r8
 8019576:	2500      	movne	r5, #0
 8019578:	9308      	str	r3, [sp, #32]
 801957a:	2300      	movs	r3, #0
 801957c:	b2ad      	uxth	r5, r5
 801957e:	9205      	str	r2, [sp, #20]
 8019580:	9303      	str	r3, [sp, #12]
 8019582:	9a07      	ldr	r2, [sp, #28]
 8019584:	4282      	cmp	r2, r0
 8019586:	f240 80b1 	bls.w	80196ec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801958a:	b95b      	cbnz	r3, 80195a4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801958c:	7832      	ldrb	r2, [r6, #0]
 801958e:	0993      	lsrs	r3, r2, #6
 8019590:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019594:	9203      	str	r2, [sp, #12]
 8019596:	1e5a      	subs	r2, r3, #1
 8019598:	2a02      	cmp	r2, #2
 801959a:	bf8d      	iteet	hi
 801959c:	7873      	ldrbhi	r3, [r6, #1]
 801959e:	3601      	addls	r6, #1
 80195a0:	b29b      	uxthls	r3, r3
 80195a2:	3602      	addhi	r6, #2
 80195a4:	b184      	cbz	r4, 80195c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 80195a6:	429c      	cmp	r4, r3
 80195a8:	bf91      	iteee	ls
 80195aa:	1b1c      	subls	r4, r3, r4
 80195ac:	1ae4      	subhi	r4, r4, r3
 80195ae:	4629      	movhi	r1, r5
 80195b0:	f04f 0e00 	movhi.w	lr, #0
 80195b4:	bf9b      	ittet	ls
 80195b6:	fa1f fe84 	uxthls.w	lr, r4
 80195ba:	2400      	movls	r4, #0
 80195bc:	b2a4      	uxthhi	r4, r4
 80195be:	fa1f f188 	uxthls.w	r1, r8
 80195c2:	4673      	mov	r3, lr
 80195c4:	460d      	mov	r5, r1
 80195c6:	e7dc      	b.n	8019582 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80195c8:	2203      	movs	r2, #3
 80195ca:	9908      	ldr	r1, [sp, #32]
 80195cc:	42ab      	cmp	r3, r5
 80195ce:	4617      	mov	r7, r2
 80195d0:	9a03      	ldr	r2, [sp, #12]
 80195d2:	bf24      	itt	cs
 80195d4:	eba3 0e05 	subcs.w	lr, r3, r5
 80195d8:	9501      	strcs	r5, [sp, #4]
 80195da:	fb17 1702 	smlabb	r7, r7, r2, r1
 80195de:	9a06      	ldr	r2, [sp, #24]
 80195e0:	bf34      	ite	cc
 80195e2:	1ae9      	subcc	r1, r5, r3
 80195e4:	fa1f fe8e 	uxthcs.w	lr, lr
 80195e8:	4417      	add	r7, r2
 80195ea:	9a02      	ldr	r2, [sp, #8]
 80195ec:	bf2f      	iteee	cs
 80195ee:	4621      	movcs	r1, r4
 80195f0:	b289      	uxthcc	r1, r1
 80195f2:	9301      	strcc	r3, [sp, #4]
 80195f4:	46a6      	movcc	lr, r4
 80195f6:	2aff      	cmp	r2, #255	@ 0xff
 80195f8:	d11e      	bne.n	8019638 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80195fa:	4681      	mov	r9, r0
 80195fc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019600:	f109 0903 	add.w	r9, r9, #3
 8019604:	f1bc 0f00 	cmp.w	ip, #0
 8019608:	d15f      	bne.n	80196ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801960a:	9a01      	ldr	r2, [sp, #4]
 801960c:	42ab      	cmp	r3, r5
 801960e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019612:	4410      	add	r0, r2
 8019614:	d3d5      	bcc.n	80195c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8019616:	fa1f f188 	uxth.w	r1, r8
 801961a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019620:	1a64      	subs	r4, r4, r1
 8019622:	881b      	ldrh	r3, [r3, #0]
 8019624:	b2a4      	uxth	r4, r4
 8019626:	eba3 0308 	sub.w	r3, r3, r8
 801962a:	2c00      	cmp	r4, #0
 801962c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019630:	bf18      	it	ne
 8019632:	2100      	movne	r1, #0
 8019634:	4418      	add	r0, r3
 8019636:	e7c4      	b.n	80195c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8019638:	4684      	mov	ip, r0
 801963a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801963e:	f10c 0c03 	add.w	ip, ip, #3
 8019642:	f1ba 0f00 	cmp.w	sl, #0
 8019646:	d0e0      	beq.n	801960a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8019648:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801964c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019650:	9a05      	ldr	r2, [sp, #20]
 8019652:	f897 9000 	ldrb.w	r9, [r7]
 8019656:	fa1f fa8a 	uxth.w	sl, sl
 801965a:	fb1b fb02 	smulbb	fp, fp, r2
 801965e:	9a04      	ldr	r2, [sp, #16]
 8019660:	fb09 b902 	mla	r9, r9, r2, fp
 8019664:	9a05      	ldr	r2, [sp, #20]
 8019666:	fa1f f989 	uxth.w	r9, r9
 801966a:	f109 0b01 	add.w	fp, r9, #1
 801966e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019672:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8019676:	fb1b fb02 	smulbb	fp, fp, r2
 801967a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801967e:	9a04      	ldr	r2, [sp, #16]
 8019680:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8019684:	f897 9001 	ldrb.w	r9, [r7, #1]
 8019688:	fb09 b902 	mla	r9, r9, r2, fp
 801968c:	9a05      	ldr	r2, [sp, #20]
 801968e:	fa1f f989 	uxth.w	r9, r9
 8019692:	f109 0b01 	add.w	fp, r9, #1
 8019696:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801969a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801969e:	fb1b fb02 	smulbb	fp, fp, r2
 80196a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196a6:	9a04      	ldr	r2, [sp, #16]
 80196a8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80196ac:	f897 9002 	ldrb.w	r9, [r7, #2]
 80196b0:	fb09 b902 	mla	r9, r9, r2, fp
 80196b4:	fa1f f989 	uxth.w	r9, r9
 80196b8:	f109 0b01 	add.w	fp, r9, #1
 80196bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80196c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196c4:	f80c 9c01 	strb.w	r9, [ip, #-1]
 80196c8:	e7b9      	b.n	801963e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 80196ca:	f897 a000 	ldrb.w	sl, [r7]
 80196ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80196d2:	f809 ac03 	strb.w	sl, [r9, #-3]
 80196d6:	fa1f fc8c 	uxth.w	ip, ip
 80196da:	f897 a001 	ldrb.w	sl, [r7, #1]
 80196de:	f809 ac02 	strb.w	sl, [r9, #-2]
 80196e2:	f897 a002 	ldrb.w	sl, [r7, #2]
 80196e6:	f809 ac01 	strb.w	sl, [r9, #-1]
 80196ea:	e789      	b.n	8019600 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 80196ec:	4b03      	ldr	r3, [pc, #12]	@ (80196fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80196ee:	6818      	ldr	r0, [r3, #0]
 80196f0:	6803      	ldr	r3, [r0, #0]
 80196f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80196f4:	4798      	blx	r3
 80196f6:	b00f      	add	sp, #60	@ 0x3c
 80196f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fc:	2402526c 	.word	0x2402526c
 8019700:	24025266 	.word	0x24025266

08019704 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019708:	b09b      	sub	sp, #108	@ 0x6c
 801970a:	461d      	mov	r5, r3
 801970c:	4604      	mov	r4, r0
 801970e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019710:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8019714:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8019718:	9208      	str	r2, [sp, #32]
 801971a:	2a00      	cmp	r2, #0
 801971c:	f000 81f3 	beq.w	8019b06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8019720:	6828      	ldr	r0, [r5, #0]
 8019722:	aa16      	add	r2, sp, #88	@ 0x58
 8019724:	6869      	ldr	r1, [r5, #4]
 8019726:	c203      	stmia	r2!, {r0, r1}
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	aa18      	add	r2, sp, #96	@ 0x60
 801972c:	6859      	ldr	r1, [r3, #4]
 801972e:	c203      	stmia	r2!, {r0, r1}
 8019730:	a816      	add	r0, sp, #88	@ 0x58
 8019732:	f7f9 fc73 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019736:	4629      	mov	r1, r5
 8019738:	a818      	add	r0, sp, #96	@ 0x60
 801973a:	f7f9 fcb3 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801973e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8019742:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8019746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801974a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801974e:	bfdb      	ittet	le
 8019750:	b29a      	uxthle	r2, r3
 8019752:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019756:	f04f 0a01 	movgt.w	sl, #1
 801975a:	fb91 faf2 	sdivle	sl, r1, r2
 801975e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8019762:	4456      	add	r6, sl
 8019764:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8019768:	3e01      	subs	r6, #1
 801976a:	fb92 f0fa 	sdiv	r0, r2, sl
 801976e:	b280      	uxth	r0, r0
 8019770:	fb00 281a 	mls	r8, r0, sl, r2
 8019774:	900e      	str	r0, [sp, #56]	@ 0x38
 8019776:	fb18 f803 	smulbb	r8, r8, r3
 801977a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801977e:	4488      	add	r8, r1
 8019780:	4419      	add	r1, r3
 8019782:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8019786:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801978a:	fa1f f888 	uxth.w	r8, r8
 801978e:	441a      	add	r2, r3
 8019790:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019794:	9303      	str	r3, [sp, #12]
 8019796:	4b9c      	ldr	r3, [pc, #624]	@ (8019a08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8019798:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801979c:	6818      	ldr	r0, [r3, #0]
 801979e:	6803      	ldr	r3, [r0, #0]
 80197a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197a2:	4798      	blx	r3
 80197a4:	4b99      	ldr	r3, [pc, #612]	@ (8019a0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 80197a6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 80197aa:	f1b8 0f00 	cmp.w	r8, #0
 80197ae:	881a      	ldrh	r2, [r3, #0]
 80197b0:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 80197b4:	fb02 f505 	mul.w	r5, r2, r5
 80197b8:	fb02 7101 	mla	r1, r2, r1, r7
 80197bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80197c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80197c6:	9b08      	ldr	r3, [sp, #32]
 80197c8:	fb96 f6fa 	sdiv	r6, r6, sl
 80197cc:	4408      	add	r0, r1
 80197ce:	f106 0601 	add.w	r6, r6, #1
 80197d2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80197d6:	f04f 0100 	mov.w	r1, #0
 80197da:	eb00 0205 	add.w	r2, r0, r5
 80197de:	b2b6      	uxth	r6, r6
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80197e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80197e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80197e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80197ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80197ee:	4b88      	ldr	r3, [pc, #544]	@ (8019a10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 80197f0:	f106 0204 	add.w	r2, r6, #4
 80197f4:	eba3 0304 	sub.w	r3, r3, r4
 80197f8:	9205      	str	r2, [sp, #20]
 80197fa:	9a03      	ldr	r2, [sp, #12]
 80197fc:	bf18      	it	ne
 80197fe:	2200      	movne	r2, #0
 8019800:	9315      	str	r3, [sp, #84]	@ 0x54
 8019802:	b292      	uxth	r2, r2
 8019804:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019808:	fa11 f383 	uxtah	r3, r1, r3
 801980c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801980e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019812:	3304      	adds	r3, #4
 8019814:	9306      	str	r3, [sp, #24]
 8019816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019818:	4283      	cmp	r3, r0
 801981a:	f240 816f 	bls.w	8019afc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801981e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8019822:	f04f 0900 	mov.w	r9, #0
 8019826:	9d06      	ldr	r5, [sp, #24]
 8019828:	fbb8 f3f3 	udiv	r3, r8, r3
 801982c:	ebaa 0303 	sub.w	r3, sl, r3
 8019830:	782d      	ldrb	r5, [r5, #0]
 8019832:	b29b      	uxth	r3, r3
 8019834:	950f      	str	r5, [sp, #60]	@ 0x3c
 8019836:	3501      	adds	r5, #1
 8019838:	9312      	str	r3, [sp, #72]	@ 0x48
 801983a:	9b06      	ldr	r3, [sp, #24]
 801983c:	9504      	str	r5, [sp, #16]
 801983e:	7859      	ldrb	r1, [r3, #1]
 8019840:	789b      	ldrb	r3, [r3, #2]
 8019842:	021b      	lsls	r3, r3, #8
 8019844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019848:	9906      	ldr	r1, [sp, #24]
 801984a:	78c9      	ldrb	r1, [r1, #3]
 801984c:	430b      	orrs	r3, r1
 801984e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019850:	4419      	add	r1, r3
 8019852:	1c4d      	adds	r5, r1, #1
 8019854:	7849      	ldrb	r1, [r1, #1]
 8019856:	9502      	str	r5, [sp, #8]
 8019858:	0209      	lsls	r1, r1, #8
 801985a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801985c:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8019860:	5ceb      	ldrb	r3, [r5, r3]
 8019862:	4319      	orrs	r1, r3
 8019864:	b28b      	uxth	r3, r1
 8019866:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801986a:	930a      	str	r3, [sp, #40]	@ 0x28
 801986c:	2300      	movs	r3, #0
 801986e:	9307      	str	r3, [sp, #28]
 8019870:	2301      	movs	r3, #1
 8019872:	e9cd 3300 	strd	r3, r3, [sp]
 8019876:	469c      	mov	ip, r3
 8019878:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801987c:	930c      	str	r3, [sp, #48]	@ 0x30
 801987e:	f1b8 0f00 	cmp.w	r8, #0
 8019882:	f000 8082 	beq.w	801998a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8019886:	45c4      	cmp	ip, r8
 8019888:	d270      	bcs.n	801996c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801988a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801988c:	eba8 080c 	sub.w	r8, r8, ip
 8019890:	4611      	mov	r1, r2
 8019892:	4283      	cmp	r3, r0
 8019894:	fa1f f888 	uxth.w	r8, r8
 8019898:	d802      	bhi.n	80198a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801989a:	e074      	b.n	8019986 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801989c:	2b00      	cmp	r3, #0
 801989e:	d15f      	bne.n	8019960 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80198a0:	9b02      	ldr	r3, [sp, #8]
 80198a2:	9a01      	ldr	r2, [sp, #4]
 80198a4:	785b      	ldrb	r3, [r3, #1]
 80198a6:	f1c2 0207 	rsb	r2, r2, #7
 80198aa:	9d01      	ldr	r5, [sp, #4]
 80198ac:	4093      	lsls	r3, r2
 80198ae:	005b      	lsls	r3, r3, #1
 80198b0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80198b4:	9b02      	ldr	r3, [sp, #8]
 80198b6:	781b      	ldrb	r3, [r3, #0]
 80198b8:	412b      	asrs	r3, r5
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	4313      	orrs	r3, r2
 80198be:	462a      	mov	r2, r5
 80198c0:	3201      	adds	r2, #1
 80198c2:	b29e      	uxth	r6, r3
 80198c4:	b2d2      	uxtb	r2, r2
 80198c6:	2a08      	cmp	r2, #8
 80198c8:	9201      	str	r2, [sp, #4]
 80198ca:	9a02      	ldr	r2, [sp, #8]
 80198cc:	bf09      	itett	eq
 80198ce:	3202      	addeq	r2, #2
 80198d0:	3201      	addne	r2, #1
 80198d2:	9202      	streq	r2, [sp, #8]
 80198d4:	2200      	moveq	r2, #0
 80198d6:	bf14      	ite	ne
 80198d8:	9202      	strne	r2, [sp, #8]
 80198da:	9201      	streq	r2, [sp, #4]
 80198dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80198de:	42b2      	cmp	r2, r6
 80198e0:	d309      	bcc.n	80198f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 80198e2:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80198e6:	2301      	movs	r3, #1
 80198e8:	9a04      	ldr	r2, [sp, #16]
 80198ea:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80198ee:	d30e      	bcc.n	801990e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 80198f0:	9300      	str	r3, [sp, #0]
 80198f2:	2500      	movs	r5, #0
 80198f4:	e035      	b.n	8019962 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 80198f6:	9b04      	ldr	r3, [sp, #16]
 80198f8:	429e      	cmp	r6, r3
 80198fa:	d318      	bcc.n	801992e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80198fc:	9b00      	ldr	r3, [sp, #0]
 80198fe:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8019902:	18e3      	adds	r3, r4, r3
 8019904:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8019908:	9b00      	ldr	r3, [sp, #0]
 801990a:	3301      	adds	r3, #1
 801990c:	b29b      	uxth	r3, r3
 801990e:	9a04      	ldr	r2, [sp, #16]
 8019910:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8019914:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019918:	9f00      	ldr	r7, [sp, #0]
 801991a:	7115      	strb	r5, [r2, #4]
 801991c:	3701      	adds	r7, #1
 801991e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019920:	7157      	strb	r7, [r2, #5]
 8019922:	80d5      	strh	r5, [r2, #6]
 8019924:	9a04      	ldr	r2, [sp, #16]
 8019926:	3201      	adds	r2, #1
 8019928:	b292      	uxth	r2, r2
 801992a:	9204      	str	r2, [sp, #16]
 801992c:	e7e0      	b.n	80198f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801992e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019932:	4632      	mov	r2, r6
 8019934:	795b      	ldrb	r3, [r3, #5]
 8019936:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801993a:	4425      	add	r5, r4
 801993c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801993e:	eb07 0c05 	add.w	ip, r7, r5
 8019942:	f1bc 0f00 	cmp.w	ip, #0
 8019946:	dd07      	ble.n	8019958 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8019948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801994c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8019950:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8019954:	88d2      	ldrh	r2, [r2, #6]
 8019956:	e7f1      	b.n	801993c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8019958:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801995c:	b29b      	uxth	r3, r3
 801995e:	e7c3      	b.n	80198e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8019960:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019962:	460a      	mov	r2, r1
 8019964:	960a      	str	r6, [sp, #40]	@ 0x28
 8019966:	46a9      	mov	r9, r5
 8019968:	469c      	mov	ip, r3
 801996a:	e788      	b.n	801987e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801996c:	ebac 0308 	sub.w	r3, ip, r8
 8019970:	eb09 0508 	add.w	r5, r9, r8
 8019974:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019978:	b29b      	uxth	r3, r3
 801997a:	b2ad      	uxth	r5, r5
 801997c:	f04f 0800 	mov.w	r8, #0
 8019980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019982:	4282      	cmp	r2, r0
 8019984:	d88a      	bhi.n	801989c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8019986:	460a      	mov	r2, r1
 8019988:	e745      	b.n	8019816 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801998a:	4594      	cmp	ip, r2
 801998c:	9d08      	ldr	r5, [sp, #32]
 801998e:	4686      	mov	lr, r0
 8019990:	bf27      	ittee	cs
 8019992:	ebac 0302 	subcs.w	r3, ip, r2
 8019996:	4616      	movcs	r6, r2
 8019998:	eba2 010c 	subcc.w	r1, r2, ip
 801999c:	4666      	movcc	r6, ip
 801999e:	bf27      	ittee	cs
 80199a0:	b29b      	uxthcs	r3, r3
 80199a2:	4641      	movcs	r1, r8
 80199a4:	b289      	uxthcc	r1, r1
 80199a6:	4643      	movcc	r3, r8
 80199a8:	2dff      	cmp	r5, #255	@ 0xff
 80199aa:	eb09 0506 	add.w	r5, r9, r6
 80199ae:	b2ad      	uxth	r5, r5
 80199b0:	d130      	bne.n	8019a14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80199b2:	45a9      	cmp	r9, r5
 80199b4:	f10e 0e03 	add.w	lr, lr, #3
 80199b8:	d17a      	bne.n	8019ab0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 80199ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80199be:	4594      	cmp	ip, r2
 80199c0:	4430      	add	r0, r6
 80199c2:	d3db      	bcc.n	801997c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80199c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80199c6:	9903      	ldr	r1, [sp, #12]
 80199c8:	8812      	ldrh	r2, [r2, #0]
 80199ca:	1a52      	subs	r2, r2, r1
 80199cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80199ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80199d2:	4410      	add	r0, r2
 80199d4:	9a07      	ldr	r2, [sp, #28]
 80199d6:	3201      	adds	r2, #1
 80199d8:	428a      	cmp	r2, r1
 80199da:	9207      	str	r2, [sp, #28]
 80199dc:	f040 8081 	bne.w	8019ae2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 80199e0:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 80199e4:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 80199e8:	9b03      	ldr	r3, [sp, #12]
 80199ea:	eba8 080c 	sub.w	r8, r8, ip
 80199ee:	fa1f f888 	uxth.w	r8, r8
 80199f2:	f1b8 0f00 	cmp.w	r8, #0
 80199f6:	bf08      	it	eq
 80199f8:	461a      	moveq	r2, r3
 80199fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80199fc:	bf18      	it	ne
 80199fe:	2200      	movne	r2, #0
 8019a00:	3301      	adds	r3, #1
 8019a02:	b292      	uxth	r2, r2
 8019a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a06:	e6fd      	b.n	8019804 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8019a08:	2402526c 	.word	0x2402526c
 8019a0c:	24025266 	.word	0x24025266
 8019a10:	fffff7fb 	.word	0xfffff7fb
 8019a14:	45a9      	cmp	r9, r5
 8019a16:	f10e 0e03 	add.w	lr, lr, #3
 8019a1a:	d0ce      	beq.n	80199ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8019a1c:	f109 0701 	add.w	r7, r9, #1
 8019a20:	44a1      	add	r9, r4
 8019a22:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8019a26:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019a2a:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019a2c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019a30:	9f05      	ldr	r7, [sp, #20]
 8019a32:	eb07 0908 	add.w	r9, r7, r8
 8019a36:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019a3a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019a3c:	fb1b fb07 	smulbb	fp, fp, r7
 8019a40:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019a42:	fb08 b807 	mla	r8, r8, r7, fp
 8019a46:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019a48:	fa1f f888 	uxth.w	r8, r8
 8019a4c:	f108 0b01 	add.w	fp, r8, #1
 8019a50:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019a54:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8019a58:	fb1b fb07 	smulbb	fp, fp, r7
 8019a5c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019a60:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019a62:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019a66:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019a6a:	fb08 b807 	mla	r8, r8, r7, fp
 8019a6e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019a70:	fa1f f888 	uxth.w	r8, r8
 8019a74:	f108 0b01 	add.w	fp, r8, #1
 8019a78:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019a7c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019a80:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019a84:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019a88:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8019a8c:	fb19 f907 	smulbb	r9, r9, r7
 8019a90:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019a92:	fb08 9807 	mla	r8, r8, r7, r9
 8019a96:	fa1f f888 	uxth.w	r8, r8
 8019a9a:	f108 0901 	add.w	r9, r8, #1
 8019a9e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8019aa2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8019aa6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019aaa:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019aae:	e7b1      	b.n	8019a14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8019ab0:	f109 0b01 	add.w	fp, r9, #1
 8019ab4:	44a1      	add	r9, r4
 8019ab6:	9f05      	ldr	r7, [sp, #20]
 8019ab8:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019abc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019ac0:	eb07 0908 	add.w	r9, r7, r8
 8019ac4:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019ac8:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019acc:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019ad0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019ad4:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019ad8:	fa1f f98b 	uxth.w	r9, fp
 8019adc:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019ae0:	e767      	b.n	80199b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8019ae2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019ae6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8019aea:	eba8 0801 	sub.w	r8, r8, r1
 8019aee:	fa1f f888 	uxth.w	r8, r8
 8019af2:	f1b8 0f00 	cmp.w	r8, #0
 8019af6:	bf18      	it	ne
 8019af8:	2100      	movne	r1, #0
 8019afa:	e741      	b.n	8019980 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8019afc:	4b03      	ldr	r3, [pc, #12]	@ (8019b0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8019afe:	6818      	ldr	r0, [r3, #0]
 8019b00:	6803      	ldr	r3, [r0, #0]
 8019b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b04:	4798      	blx	r3
 8019b06:	b01b      	add	sp, #108	@ 0x6c
 8019b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b0c:	2402526c 	.word	0x2402526c

08019b10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b14:	b09d      	sub	sp, #116	@ 0x74
 8019b16:	461d      	mov	r5, r3
 8019b18:	4604      	mov	r4, r0
 8019b1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019b1c:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8019b20:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8019b24:	920c      	str	r2, [sp, #48]	@ 0x30
 8019b26:	2a00      	cmp	r2, #0
 8019b28:	f000 81de 	beq.w	8019ee8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8019b2c:	6828      	ldr	r0, [r5, #0]
 8019b2e:	aa18      	add	r2, sp, #96	@ 0x60
 8019b30:	6869      	ldr	r1, [r5, #4]
 8019b32:	c203      	stmia	r2!, {r0, r1}
 8019b34:	6818      	ldr	r0, [r3, #0]
 8019b36:	aa1a      	add	r2, sp, #104	@ 0x68
 8019b38:	6859      	ldr	r1, [r3, #4]
 8019b3a:	c203      	stmia	r2!, {r0, r1}
 8019b3c:	a818      	add	r0, sp, #96	@ 0x60
 8019b3e:	f7f9 fa6d 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b42:	4629      	mov	r1, r5
 8019b44:	a81a      	add	r0, sp, #104	@ 0x68
 8019b46:	f7f9 faad 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b4a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019b4e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8019b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019b56:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8019b5a:	bfdb      	ittet	le
 8019b5c:	b29a      	uxthle	r2, r3
 8019b5e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019b62:	2201      	movgt	r2, #1
 8019b64:	fb91 f2f2 	sdivle	r2, r1, r2
 8019b68:	9201      	str	r2, [sp, #4]
 8019b6a:	9801      	ldr	r0, [sp, #4]
 8019b6c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8019b70:	9901      	ldr	r1, [sp, #4]
 8019b72:	fb92 f0f0 	sdiv	r0, r2, r0
 8019b76:	b280      	uxth	r0, r0
 8019b78:	440f      	add	r7, r1
 8019b7a:	900d      	str	r0, [sp, #52]	@ 0x34
 8019b7c:	3f01      	subs	r7, #1
 8019b7e:	9801      	ldr	r0, [sp, #4]
 8019b80:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019b82:	fb05 2510 	mls	r5, r5, r0, r2
 8019b86:	fb97 f7f1 	sdiv	r7, r7, r1
 8019b8a:	fb15 f503 	smulbb	r5, r5, r3
 8019b8e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8019b92:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8019b96:	3701      	adds	r7, #1
 8019b98:	440d      	add	r5, r1
 8019b9a:	4419      	add	r1, r3
 8019b9c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8019ba0:	b2bf      	uxth	r7, r7
 8019ba2:	441a      	add	r2, r3
 8019ba4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019ba8:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8019bac:	00bf      	lsls	r7, r7, #2
 8019bae:	9304      	str	r3, [sp, #16]
 8019bb0:	b2ad      	uxth	r5, r5
 8019bb2:	4bb0      	ldr	r3, [pc, #704]	@ (8019e74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8019bb4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8019bb8:	6818      	ldr	r0, [r3, #0]
 8019bba:	6803      	ldr	r3, [r0, #0]
 8019bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bbe:	4798      	blx	r3
 8019bc0:	4bad      	ldr	r3, [pc, #692]	@ (8019e78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8019bc2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8019bc6:	2d00      	cmp	r5, #0
 8019bc8:	881a      	ldrh	r2, [r3, #0]
 8019bca:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8019bce:	fb02 f606 	mul.w	r6, r2, r6
 8019bd2:	fb02 c101 	mla	r1, r2, r1, ip
 8019bd6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019bda:	9316      	str	r3, [sp, #88]	@ 0x58
 8019bdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019be0:	4ba6      	ldr	r3, [pc, #664]	@ (8019e7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8019be2:	eb00 0801 	add.w	r8, r0, r1
 8019be6:	bf18      	it	ne
 8019be8:	2100      	movne	r1, #0
 8019bea:	eba3 0304 	sub.w	r3, r3, r4
 8019bee:	eb08 0206 	add.w	r2, r8, r6
 8019bf2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019bf4:	9208      	str	r2, [sp, #32]
 8019bf6:	f107 0204 	add.w	r2, r7, #4
 8019bfa:	9211      	str	r2, [sp, #68]	@ 0x44
 8019bfc:	9a04      	ldr	r2, [sp, #16]
 8019bfe:	bf08      	it	eq
 8019c00:	4611      	moveq	r1, r2
 8019c02:	2200      	movs	r2, #0
 8019c04:	b289      	uxth	r1, r1
 8019c06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019c08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c0c:	fa12 f383 	uxtah	r3, r2, r3
 8019c10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019c16:	3304      	adds	r3, #4
 8019c18:	9306      	str	r3, [sp, #24]
 8019c1a:	9b08      	ldr	r3, [sp, #32]
 8019c1c:	4543      	cmp	r3, r8
 8019c1e:	f240 815e 	bls.w	8019ede <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8019c22:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8019c26:	f04f 0b01 	mov.w	fp, #1
 8019c2a:	9a01      	ldr	r2, [sp, #4]
 8019c2c:	9806      	ldr	r0, [sp, #24]
 8019c2e:	465e      	mov	r6, fp
 8019c30:	f8cd b008 	str.w	fp, [sp, #8]
 8019c34:	7800      	ldrb	r0, [r0, #0]
 8019c36:	fbb5 f3f3 	udiv	r3, r5, r3
 8019c3a:	1ad3      	subs	r3, r2, r3
 8019c3c:	900e      	str	r0, [sp, #56]	@ 0x38
 8019c3e:	3001      	adds	r0, #1
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	9005      	str	r0, [sp, #20]
 8019c44:	9312      	str	r3, [sp, #72]	@ 0x48
 8019c46:	9b06      	ldr	r3, [sp, #24]
 8019c48:	785a      	ldrb	r2, [r3, #1]
 8019c4a:	789b      	ldrb	r3, [r3, #2]
 8019c4c:	021b      	lsls	r3, r3, #8
 8019c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019c52:	9a06      	ldr	r2, [sp, #24]
 8019c54:	78d2      	ldrb	r2, [r2, #3]
 8019c56:	4313      	orrs	r3, r2
 8019c58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019c5a:	441a      	add	r2, r3
 8019c5c:	1c50      	adds	r0, r2, #1
 8019c5e:	7852      	ldrb	r2, [r2, #1]
 8019c60:	9003      	str	r0, [sp, #12]
 8019c62:	0212      	lsls	r2, r2, #8
 8019c64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019c66:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019c6a:	5cc3      	ldrb	r3, [r0, r3]
 8019c6c:	431a      	orrs	r2, r3
 8019c6e:	b293      	uxth	r3, r2
 8019c70:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c76:	2300      	movs	r3, #0
 8019c78:	461a      	mov	r2, r3
 8019c7a:	9307      	str	r3, [sp, #28]
 8019c7c:	2d00      	cmp	r5, #0
 8019c7e:	d07c      	beq.n	8019d7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8019c80:	42ae      	cmp	r6, r5
 8019c82:	d26c      	bcs.n	8019d5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019c84:	9b08      	ldr	r3, [sp, #32]
 8019c86:	1bad      	subs	r5, r5, r6
 8019c88:	4608      	mov	r0, r1
 8019c8a:	4543      	cmp	r3, r8
 8019c8c:	b2ad      	uxth	r5, r5
 8019c8e:	d802      	bhi.n	8019c96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8019c90:	e071      	b.n	8019d76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d15d      	bne.n	8019d52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8019c96:	9b03      	ldr	r3, [sp, #12]
 8019c98:	9a02      	ldr	r2, [sp, #8]
 8019c9a:	785b      	ldrb	r3, [r3, #1]
 8019c9c:	f1c2 0207 	rsb	r2, r2, #7
 8019ca0:	9902      	ldr	r1, [sp, #8]
 8019ca2:	4093      	lsls	r3, r2
 8019ca4:	005b      	lsls	r3, r3, #1
 8019ca6:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019caa:	9b03      	ldr	r3, [sp, #12]
 8019cac:	781b      	ldrb	r3, [r3, #0]
 8019cae:	410b      	asrs	r3, r1
 8019cb0:	3101      	adds	r1, #1
 8019cb2:	b2c9      	uxtb	r1, r1
 8019cb4:	b2db      	uxtb	r3, r3
 8019cb6:	2908      	cmp	r1, #8
 8019cb8:	9102      	str	r1, [sp, #8]
 8019cba:	9903      	ldr	r1, [sp, #12]
 8019cbc:	ea43 0302 	orr.w	r3, r3, r2
 8019cc0:	bf0c      	ite	eq
 8019cc2:	3102      	addeq	r1, #2
 8019cc4:	3101      	addne	r1, #1
 8019cc6:	b29a      	uxth	r2, r3
 8019cc8:	bf05      	ittet	eq
 8019cca:	9103      	streq	r1, [sp, #12]
 8019ccc:	2100      	moveq	r1, #0
 8019cce:	9103      	strne	r1, [sp, #12]
 8019cd0:	9102      	streq	r1, [sp, #8]
 8019cd2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019cd4:	4291      	cmp	r1, r2
 8019cd6:	d30a      	bcc.n	8019cee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8019cd8:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019cdc:	2301      	movs	r3, #1
 8019cde:	9905      	ldr	r1, [sp, #20]
 8019ce0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019ce4:	d30f      	bcc.n	8019d06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8019ce6:	469b      	mov	fp, r3
 8019ce8:	f04f 0c00 	mov.w	ip, #0
 8019cec:	e032      	b.n	8019d54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8019cee:	9b05      	ldr	r3, [sp, #20]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	d318      	bcc.n	8019d26 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8019cf4:	eb04 030b 	add.w	r3, r4, fp
 8019cf8:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8019cfc:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019d00:	f10b 0301 	add.w	r3, fp, #1
 8019d04:	b29b      	uxth	r3, r3
 8019d06:	9905      	ldr	r1, [sp, #20]
 8019d08:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8019d0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d10:	710e      	strb	r6, [r1, #4]
 8019d12:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019d14:	80ce      	strh	r6, [r1, #6]
 8019d16:	f10b 0601 	add.w	r6, fp, #1
 8019d1a:	714e      	strb	r6, [r1, #5]
 8019d1c:	9905      	ldr	r1, [sp, #20]
 8019d1e:	3101      	adds	r1, #1
 8019d20:	b289      	uxth	r1, r1
 8019d22:	9105      	str	r1, [sp, #20]
 8019d24:	e7df      	b.n	8019ce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8019d26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d2a:	4611      	mov	r1, r2
 8019d2c:	795b      	ldrb	r3, [r3, #5]
 8019d2e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8019d32:	4426      	add	r6, r4
 8019d34:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8019d36:	4437      	add	r7, r6
 8019d38:	2f00      	cmp	r7, #0
 8019d3a:	dd06      	ble.n	8019d4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8019d3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d40:	790f      	ldrb	r7, [r1, #4]
 8019d42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d46:	88c9      	ldrh	r1, [r1, #6]
 8019d48:	e7f4      	b.n	8019d34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8019d4a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019d4e:	b29b      	uxth	r3, r3
 8019d50:	e7c5      	b.n	8019cde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8019d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d54:	920a      	str	r2, [sp, #40]	@ 0x28
 8019d56:	4601      	mov	r1, r0
 8019d58:	4662      	mov	r2, ip
 8019d5a:	461e      	mov	r6, r3
 8019d5c:	e78e      	b.n	8019c7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8019d5e:	1b73      	subs	r3, r6, r5
 8019d60:	eb02 0c05 	add.w	ip, r2, r5
 8019d64:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	fa1f fc8c 	uxth.w	ip, ip
 8019d6e:	2500      	movs	r5, #0
 8019d70:	9a08      	ldr	r2, [sp, #32]
 8019d72:	4542      	cmp	r2, r8
 8019d74:	d88d      	bhi.n	8019c92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8019d76:	4601      	mov	r1, r0
 8019d78:	e74f      	b.n	8019c1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8019d7a:	428e      	cmp	r6, r1
 8019d7c:	bf2b      	itete	cs
 8019d7e:	468e      	movcs	lr, r1
 8019d80:	46b6      	movcc	lr, r6
 8019d82:	1a73      	subcs	r3, r6, r1
 8019d84:	1b88      	subcc	r0, r1, r6
 8019d86:	eb02 0c0e 	add.w	ip, r2, lr
 8019d8a:	bf2b      	itete	cs
 8019d8c:	4628      	movcs	r0, r5
 8019d8e:	462b      	movcc	r3, r5
 8019d90:	b29b      	uxthcs	r3, r3
 8019d92:	b280      	uxthcc	r0, r0
 8019d94:	f108 0503 	add.w	r5, r8, #3
 8019d98:	fa1f fc8c 	uxth.w	ip, ip
 8019d9c:	4562      	cmp	r2, ip
 8019d9e:	d06f      	beq.n	8019e80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8019da0:	1c57      	adds	r7, r2, #1
 8019da2:	4422      	add	r2, r4
 8019da4:	b2bf      	uxth	r7, r7
 8019da6:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8019daa:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019dac:	2704      	movs	r7, #4
 8019dae:	46b9      	mov	r9, r7
 8019db0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8019db2:	fb19 7202 	smlabb	r2, r9, r2, r7
 8019db6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019db8:	58bf      	ldr	r7, [r7, r2]
 8019dba:	0e3a      	lsrs	r2, r7, #24
 8019dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8019dbe:	d016      	beq.n	8019dee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8019dc0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019dc4:	fa5f fa87 	uxtb.w	sl, r7
 8019dc8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019dcc:	fa5f f289 	uxtb.w	r2, r9
 8019dd0:	9214      	str	r2, [sp, #80]	@ 0x50
 8019dd2:	b2fa      	uxtb	r2, r7
 8019dd4:	9215      	str	r2, [sp, #84]	@ 0x54
 8019dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019dd8:	2aff      	cmp	r2, #255	@ 0xff
 8019dda:	d10b      	bne.n	8019df4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019ddc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019dde:	2aff      	cmp	r2, #255	@ 0xff
 8019de0:	d108      	bne.n	8019df4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019de2:	f805 ac03 	strb.w	sl, [r5, #-3]
 8019de6:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019dea:	f805 7c01 	strb.w	r7, [r5, #-1]
 8019dee:	3503      	adds	r5, #3
 8019df0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019df2:	e7d3      	b.n	8019d9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8019df4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8019df6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019df8:	437a      	muls	r2, r7
 8019dfa:	1c57      	adds	r7, r2, #1
 8019dfc:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8019e00:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8019e04:	1212      	asrs	r2, r2, #8
 8019e06:	fa1f f982 	uxth.w	r9, r2
 8019e0a:	43d2      	mvns	r2, r2
 8019e0c:	fb1a fa09 	smulbb	sl, sl, r9
 8019e10:	b2d2      	uxtb	r2, r2
 8019e12:	fb07 a702 	mla	r7, r7, r2, sl
 8019e16:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e18:	b2bf      	uxth	r7, r7
 8019e1a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019e1c:	f107 0a01 	add.w	sl, r7, #1
 8019e20:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019e24:	fb12 fa09 	smulbb	sl, r2, r9
 8019e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e2a:	123f      	asrs	r7, r7, #8
 8019e2c:	f805 7c03 	strb.w	r7, [r5, #-3]
 8019e30:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8019e34:	fb07 aa02 	mla	sl, r7, r2, sl
 8019e38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019e3a:	fb12 f909 	smulbb	r9, r2, r9
 8019e3e:	fa1f fa8a 	uxth.w	sl, sl
 8019e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e44:	f10a 0701 	add.w	r7, sl, #1
 8019e48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019e4c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8019e50:	fb07 9902 	mla	r9, r7, r2, r9
 8019e54:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019e58:	fa1f f989 	uxth.w	r9, r9
 8019e5c:	f805 ac02 	strb.w	sl, [r5, #-2]
 8019e60:	f109 0201 	add.w	r2, r9, #1
 8019e64:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019e68:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e6c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8019e70:	e7bd      	b.n	8019dee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8019e72:	bf00      	nop
 8019e74:	2402526c 	.word	0x2402526c
 8019e78:	24025266 	.word	0x24025266
 8019e7c:	fffff7fb 	.word	0xfffff7fb
 8019e80:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019e84:	428e      	cmp	r6, r1
 8019e86:	44f0      	add	r8, lr
 8019e88:	f4ff af71 	bcc.w	8019d6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8019e8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019e8e:	9904      	ldr	r1, [sp, #16]
 8019e90:	8812      	ldrh	r2, [r2, #0]
 8019e92:	1a52      	subs	r2, r2, r1
 8019e94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019e96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e9a:	4490      	add	r8, r2
 8019e9c:	9a07      	ldr	r2, [sp, #28]
 8019e9e:	3201      	adds	r2, #1
 8019ea0:	428a      	cmp	r2, r1
 8019ea2:	9207      	str	r2, [sp, #28]
 8019ea4:	d111      	bne.n	8019eca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8019ea6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8019eaa:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8019eae:	9b04      	ldr	r3, [sp, #16]
 8019eb0:	eba5 050c 	sub.w	r5, r5, ip
 8019eb4:	b2ad      	uxth	r5, r5
 8019eb6:	2d00      	cmp	r5, #0
 8019eb8:	bf08      	it	eq
 8019eba:	4619      	moveq	r1, r3
 8019ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ebe:	bf18      	it	ne
 8019ec0:	2100      	movne	r1, #0
 8019ec2:	3301      	adds	r3, #1
 8019ec4:	b289      	uxth	r1, r1
 8019ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ec8:	e69e      	b.n	8019c08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8019eca:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019ece:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8019ed2:	1a2d      	subs	r5, r5, r0
 8019ed4:	b2ad      	uxth	r5, r5
 8019ed6:	2d00      	cmp	r5, #0
 8019ed8:	bf18      	it	ne
 8019eda:	2000      	movne	r0, #0
 8019edc:	e748      	b.n	8019d70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8019ede:	4b04      	ldr	r3, [pc, #16]	@ (8019ef0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8019ee0:	6818      	ldr	r0, [r3, #0]
 8019ee2:	6803      	ldr	r3, [r0, #0]
 8019ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ee6:	4798      	blx	r3
 8019ee8:	b01d      	add	sp, #116	@ 0x74
 8019eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eee:	bf00      	nop
 8019ef0:	2402526c 	.word	0x2402526c

08019ef4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8019ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef8:	b08f      	sub	sp, #60	@ 0x3c
 8019efa:	4616      	mov	r6, r2
 8019efc:	4681      	mov	r9, r0
 8019efe:	460d      	mov	r5, r1
 8019f00:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8019f04:	9205      	str	r2, [sp, #20]
 8019f06:	2a00      	cmp	r2, #0
 8019f08:	f000 82a8 	beq.w	801a45c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8019f0c:	6830      	ldr	r0, [r6, #0]
 8019f0e:	ac0a      	add	r4, sp, #40	@ 0x28
 8019f10:	6871      	ldr	r1, [r6, #4]
 8019f12:	c403      	stmia	r4!, {r0, r1}
 8019f14:	6818      	ldr	r0, [r3, #0]
 8019f16:	ac0c      	add	r4, sp, #48	@ 0x30
 8019f18:	6859      	ldr	r1, [r3, #4]
 8019f1a:	c403      	stmia	r4!, {r0, r1}
 8019f1c:	a80a      	add	r0, sp, #40	@ 0x28
 8019f1e:	f7f9 f87d 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f22:	4631      	mov	r1, r6
 8019f24:	a80c      	add	r0, sp, #48	@ 0x30
 8019f26:	f7f9 f8bd 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f2a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8019f2e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019f32:	bfdb      	ittet	le
 8019f34:	b293      	uxthle	r3, r2
 8019f36:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019f3a:	2301      	movgt	r3, #1
 8019f3c:	fb91 f3f3 	sdivle	r3, r1, r3
 8019f40:	9300      	str	r3, [sp, #0]
 8019f42:	f105 0308 	add.w	r3, r5, #8
 8019f46:	9900      	ldr	r1, [sp, #0]
 8019f48:	9306      	str	r3, [sp, #24]
 8019f4a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8019f4e:	440b      	add	r3, r1
 8019f50:	3b01      	subs	r3, #1
 8019f52:	fb93 f3f1 	sdiv	r3, r3, r1
 8019f56:	3b01      	subs	r3, #1
 8019f58:	9906      	ldr	r1, [sp, #24]
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019f60:	9900      	ldr	r1, [sp, #0]
 8019f62:	9307      	str	r3, [sp, #28]
 8019f64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019f68:	fb93 f0f1 	sdiv	r0, r3, r1
 8019f6c:	b284      	uxth	r4, r0
 8019f6e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8019f72:	b280      	uxth	r0, r0
 8019f74:	9402      	str	r4, [sp, #8]
 8019f76:	9d02      	ldr	r5, [sp, #8]
 8019f78:	9c00      	ldr	r4, [sp, #0]
 8019f7a:	fb05 3514 	mls	r5, r5, r4, r3
 8019f7e:	fb15 f502 	smulbb	r5, r5, r2
 8019f82:	440d      	add	r5, r1
 8019f84:	b2ad      	uxth	r5, r5
 8019f86:	2800      	cmp	r0, #0
 8019f88:	d071      	beq.n	801a06e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8019f8a:	1e42      	subs	r2, r0, #1
 8019f8c:	9806      	ldr	r0, [sp, #24]
 8019f8e:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8019f92:	9a07      	ldr	r2, [sp, #28]
 8019f94:	fa98 f888 	rev.w	r8, r8
 8019f98:	4490      	add	r8, r2
 8019f9a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8019f9e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8019fa2:	4411      	add	r1, r2
 8019fa4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8019fa8:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801a2f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8019fac:	4413      	add	r3, r2
 8019fae:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8019fb2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019fb6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019fba:	9301      	str	r3, [sp, #4]
 8019fbc:	4bcb      	ldr	r3, [pc, #812]	@ (801a2ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8019fbe:	6818      	ldr	r0, [r3, #0]
 8019fc0:	6803      	ldr	r3, [r0, #0]
 8019fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fc4:	4798      	blx	r3
 8019fc6:	4bca      	ldr	r3, [pc, #808]	@ (801a2f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8019fc8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019fcc:	881b      	ldrh	r3, [r3, #0]
 8019fce:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8019fd2:	fb03 2707 	mla	r7, r3, r7, r2
 8019fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019fda:	4363      	muls	r3, r4
 8019fdc:	2400      	movs	r4, #0
 8019fde:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fe6:	4621      	mov	r1, r4
 8019fe8:	4407      	add	r7, r0
 8019fea:	18fb      	adds	r3, r7, r3
 8019fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fee:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019ff2:	fb95 f3f3 	sdiv	r3, r5, r3
 8019ff6:	9304      	str	r3, [sp, #16]
 8019ff8:	f109 0304 	add.w	r3, r9, #4
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	9308      	str	r3, [sp, #32]
 801a000:	f008 fc0a 	bl	8022818 <memset>
 801a004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a006:	42bb      	cmp	r3, r7
 801a008:	f240 8223 	bls.w	801a452 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801a00c:	2003      	movs	r0, #3
 801a00e:	f04f 0c07 	mov.w	ip, #7
 801a012:	f04f 0e0b 	mov.w	lr, #11
 801a016:	2d00      	cmp	r5, #0
 801a018:	f000 813c 	beq.w	801a294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801a01c:	f898 3000 	ldrb.w	r3, [r8]
 801a020:	b2db      	uxtb	r3, r3
 801a022:	2bfe      	cmp	r3, #254	@ 0xfe
 801a024:	d126      	bne.n	801a074 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801a026:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a02a:	f108 0604 	add.w	r6, r8, #4
 801a02e:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a032:	3d01      	subs	r5, #1
 801a034:	b2c9      	uxtb	r1, r1
 801a036:	f898 8003 	ldrb.w	r8, [r8, #3]
 801a03a:	b2d2      	uxtb	r2, r2
 801a03c:	f361 0407 	bfi	r4, r1, #0, #8
 801a040:	fa5f f888 	uxtb.w	r8, r8
 801a044:	b2ad      	uxth	r5, r5
 801a046:	f362 240f 	bfi	r4, r2, #8, #8
 801a04a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a04e:	fb10 2208 	smlabb	r2, r0, r8, r2
 801a052:	f368 4417 	bfi	r4, r8, #16, #8
 801a056:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801a05a:	0e23      	lsrs	r3, r4, #24
 801a05c:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801a060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a064:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a068:	605c      	str	r4, [r3, #4]
 801a06a:	46b0      	mov	r8, r6
 801a06c:	e7d3      	b.n	801a016 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801a06e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a072:	e792      	b.n	8019f9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801a074:	2bff      	cmp	r3, #255	@ 0xff
 801a076:	d127      	bne.n	801a0c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801a078:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a07c:	f108 0605 	add.w	r6, r8, #5
 801a080:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a084:	3d01      	subs	r5, #1
 801a086:	b2d2      	uxtb	r2, r2
 801a088:	f898 1003 	ldrb.w	r1, [r8, #3]
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	f898 8004 	ldrb.w	r8, [r8, #4]
 801a092:	f362 0407 	bfi	r4, r2, #0, #8
 801a096:	b2c9      	uxtb	r1, r1
 801a098:	fa5f f888 	uxtb.w	r8, r8
 801a09c:	f363 240f 	bfi	r4, r3, #8, #8
 801a0a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a0a4:	b2ad      	uxth	r5, r5
 801a0a6:	fb10 3301 	smlabb	r3, r0, r1, r3
 801a0aa:	f361 4417 	bfi	r4, r1, #16, #8
 801a0ae:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801a0b2:	f368 641f 	bfi	r4, r8, #24, #8
 801a0b6:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801a0ba:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801a0be:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801a0c2:	f8c8 4004 	str.w	r4, [r8, #4]
 801a0c6:	e7d0      	b.n	801a06a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801a0c8:	119a      	asrs	r2, r3, #6
 801a0ca:	f108 0601 	add.w	r6, r8, #1
 801a0ce:	d107      	bne.n	801a0e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801a0d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a0d4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a0d8:	685c      	ldr	r4, [r3, #4]
 801a0da:	3d01      	subs	r5, #1
 801a0dc:	b2ad      	uxth	r5, r5
 801a0de:	e7c4      	b.n	801a06a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801a0e0:	2a01      	cmp	r2, #1
 801a0e2:	d129      	bne.n	801a138 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801a0e4:	f003 0203 	and.w	r2, r3, #3
 801a0e8:	1ea1      	subs	r1, r4, #2
 801a0ea:	4411      	add	r1, r2
 801a0ec:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801a0f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a0f4:	b2c9      	uxtb	r1, r1
 801a0f6:	3a02      	subs	r2, #2
 801a0f8:	3b02      	subs	r3, #2
 801a0fa:	f361 0407 	bfi	r4, r1, #0, #8
 801a0fe:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a102:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a106:	f362 240f 	bfi	r4, r2, #8, #8
 801a10a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a10e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a112:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a116:	fb10 2203 	smlabb	r2, r0, r3, r2
 801a11a:	f363 4417 	bfi	r4, r3, #16, #8
 801a11e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801a122:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801a126:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801a12a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801a12e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801a132:	f8c8 4004 	str.w	r4, [r8, #4]
 801a136:	e7d0      	b.n	801a0da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801a138:	2a02      	cmp	r2, #2
 801a13a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a13e:	d12e      	bne.n	801a19e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801a140:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a144:	f1a3 0a20 	sub.w	sl, r3, #32
 801a148:	f108 0602 	add.w	r6, r8, #2
 801a14c:	b2d2      	uxtb	r2, r2
 801a14e:	f002 010f 	and.w	r1, r2, #15
 801a152:	1112      	asrs	r2, r2, #4
 801a154:	3908      	subs	r1, #8
 801a156:	3a08      	subs	r2, #8
 801a158:	4451      	add	r1, sl
 801a15a:	4492      	add	sl, r2
 801a15c:	4421      	add	r1, r4
 801a15e:	b2c9      	uxtb	r1, r1
 801a160:	f361 0407 	bfi	r4, r1, #0, #8
 801a164:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801a168:	f1a8 0820 	sub.w	r8, r8, #32
 801a16c:	4443      	add	r3, r8
 801a16e:	b2db      	uxtb	r3, r3
 801a170:	f363 240f 	bfi	r4, r3, #8, #8
 801a174:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a178:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801a17c:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801a180:	fb10 330a 	smlabb	r3, r0, sl, r3
 801a184:	f36a 4417 	bfi	r4, sl, #16, #8
 801a188:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801a18c:	0e22      	lsrs	r2, r4, #24
 801a18e:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801a192:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a196:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801a19a:	6054      	str	r4, [r2, #4]
 801a19c:	e79d      	b.n	801a0da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801a19e:	3301      	adds	r3, #1
 801a1a0:	42ab      	cmp	r3, r5
 801a1a2:	dd59      	ble.n	801a258 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801a1a4:	1b5d      	subs	r5, r3, r5
 801a1a6:	2d00      	cmp	r5, #0
 801a1a8:	dc58      	bgt.n	801a25c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801a1aa:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a1ae:	f04f 0800 	mov.w	r8, #0
 801a1b2:	f1ba 0f00 	cmp.w	sl, #0
 801a1b6:	f340 8108 	ble.w	801a3ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801a1ba:	1c73      	adds	r3, r6, #1
 801a1bc:	9303      	str	r3, [sp, #12]
 801a1be:	7833      	ldrb	r3, [r6, #0]
 801a1c0:	b2db      	uxtb	r3, r3
 801a1c2:	2bfe      	cmp	r3, #254	@ 0xfe
 801a1c4:	d16a      	bne.n	801a29c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801a1c6:	7871      	ldrb	r1, [r6, #1]
 801a1c8:	1d33      	adds	r3, r6, #4
 801a1ca:	78b2      	ldrb	r2, [r6, #2]
 801a1cc:	b2c9      	uxtb	r1, r1
 801a1ce:	78f0      	ldrb	r0, [r6, #3]
 801a1d0:	b2d2      	uxtb	r2, r2
 801a1d2:	9303      	str	r3, [sp, #12]
 801a1d4:	f361 0407 	bfi	r4, r1, #0, #8
 801a1d8:	b2c0      	uxtb	r0, r0
 801a1da:	2303      	movs	r3, #3
 801a1dc:	f362 240f 	bfi	r4, r2, #8, #8
 801a1e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a1e4:	fb13 2200 	smlabb	r2, r3, r0, r2
 801a1e8:	f360 4417 	bfi	r4, r0, #16, #8
 801a1ec:	2307      	movs	r3, #7
 801a1ee:	0e25      	lsrs	r5, r4, #24
 801a1f0:	fb13 2101 	smlabb	r1, r3, r1, r2
 801a1f4:	230b      	movs	r3, #11
 801a1f6:	fb13 1305 	smlabb	r3, r3, r5, r1
 801a1fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a1fe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a202:	605c      	str	r4, [r3, #4]
 801a204:	2501      	movs	r5, #1
 801a206:	462e      	mov	r6, r5
 801a208:	eb06 0308 	add.w	r3, r6, r8
 801a20c:	ebaa 0a06 	sub.w	sl, sl, r6
 801a210:	1bad      	subs	r5, r5, r6
 801a212:	2b40      	cmp	r3, #64	@ 0x40
 801a214:	dd16      	ble.n	801a244 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801a216:	4658      	mov	r0, fp
 801a218:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801a21c:	f7e8 fe3c 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801a220:	4659      	mov	r1, fp
 801a222:	9b05      	ldr	r3, [sp, #20]
 801a224:	4642      	mov	r2, r8
 801a226:	4638      	mov	r0, r7
 801a228:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a22c:	f7e8 fe9c 	bl	8002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801a230:	4b30      	ldr	r3, [pc, #192]	@ (801a2f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801a232:	4447      	add	r7, r8
 801a234:	f04f 0800 	mov.w	r8, #0
 801a238:	459b      	cmp	fp, r3
 801a23a:	bf0c      	ite	eq
 801a23c:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801a2f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801a240:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801a2f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801a244:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801a248:	4633      	mov	r3, r6
 801a24a:	3b01      	subs	r3, #1
 801a24c:	f842 4b04 	str.w	r4, [r2], #4
 801a250:	d1fb      	bne.n	801a24a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801a252:	44b0      	add	r8, r6
 801a254:	9e03      	ldr	r6, [sp, #12]
 801a256:	e7ac      	b.n	801a1b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801a258:	1aed      	subs	r5, r5, r3
 801a25a:	e73f      	b.n	801a0dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801a25c:	9b01      	ldr	r3, [sp, #4]
 801a25e:	42ab      	cmp	r3, r5
 801a260:	bfa8      	it	ge
 801a262:	462b      	movge	r3, r5
 801a264:	4698      	mov	r8, r3
 801a266:	9b01      	ldr	r3, [sp, #4]
 801a268:	eba3 0a08 	sub.w	sl, r3, r8
 801a26c:	0e23      	lsrs	r3, r4, #24
 801a26e:	eba5 0508 	sub.w	r5, r5, r8
 801a272:	d00b      	beq.n	801a28c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801a274:	9a05      	ldr	r2, [sp, #20]
 801a276:	4641      	mov	r1, r8
 801a278:	4638      	mov	r0, r7
 801a27a:	4353      	muls	r3, r2
 801a27c:	1c5a      	adds	r2, r3, #1
 801a27e:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801a282:	4622      	mov	r2, r4
 801a284:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a288:	f7e8 fe20 	bl	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801a28c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a290:	4447      	add	r7, r8
 801a292:	e78c      	b.n	801a1ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801a294:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a298:	4646      	mov	r6, r8
 801a29a:	e788      	b.n	801a1ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801a29c:	2bff      	cmp	r3, #255	@ 0xff
 801a29e:	d11d      	bne.n	801a2dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801a2a0:	7870      	ldrb	r0, [r6, #1]
 801a2a2:	1d73      	adds	r3, r6, #5
 801a2a4:	78b2      	ldrb	r2, [r6, #2]
 801a2a6:	b2c0      	uxtb	r0, r0
 801a2a8:	78f5      	ldrb	r5, [r6, #3]
 801a2aa:	b2d2      	uxtb	r2, r2
 801a2ac:	9303      	str	r3, [sp, #12]
 801a2ae:	f360 0407 	bfi	r4, r0, #0, #8
 801a2b2:	7933      	ldrb	r3, [r6, #4]
 801a2b4:	b2ed      	uxtb	r5, r5
 801a2b6:	b2d9      	uxtb	r1, r3
 801a2b8:	f362 240f 	bfi	r4, r2, #8, #8
 801a2bc:	2303      	movs	r3, #3
 801a2be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a2c2:	f365 4417 	bfi	r4, r5, #16, #8
 801a2c6:	fb13 2205 	smlabb	r2, r3, r5, r2
 801a2ca:	2307      	movs	r3, #7
 801a2cc:	f361 641f 	bfi	r4, r1, #24, #8
 801a2d0:	fb13 2000 	smlabb	r0, r3, r0, r2
 801a2d4:	230b      	movs	r3, #11
 801a2d6:	fb13 0301 	smlabb	r3, r3, r1, r0
 801a2da:	e78e      	b.n	801a1fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801a2dc:	119d      	asrs	r5, r3, #6
 801a2de:	d10d      	bne.n	801a2fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801a2e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a2e4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a2e8:	685c      	ldr	r4, [r3, #4]
 801a2ea:	e78b      	b.n	801a204 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801a2ec:	2402526c 	.word	0x2402526c
 801a2f0:	24025266 	.word	0x24025266
 801a2f4:	24009740 	.word	0x24009740
 801a2f8:	24009840 	.word	0x24009840
 801a2fc:	2d01      	cmp	r5, #1
 801a2fe:	d12a      	bne.n	801a356 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801a300:	f003 0203 	and.w	r2, r3, #3
 801a304:	1ea1      	subs	r1, r4, #2
 801a306:	2603      	movs	r6, #3
 801a308:	4411      	add	r1, r2
 801a30a:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801a30e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a312:	b2c9      	uxtb	r1, r1
 801a314:	3a02      	subs	r2, #2
 801a316:	3b02      	subs	r3, #2
 801a318:	f361 0407 	bfi	r4, r1, #0, #8
 801a31c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a320:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a324:	f362 240f 	bfi	r4, r2, #8, #8
 801a328:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a32c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a330:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a334:	fb16 2203 	smlabb	r2, r6, r3, r2
 801a338:	f363 4417 	bfi	r4, r3, #16, #8
 801a33c:	2307      	movs	r3, #7
 801a33e:	0e20      	lsrs	r0, r4, #24
 801a340:	fb13 2101 	smlabb	r1, r3, r1, r2
 801a344:	230b      	movs	r3, #11
 801a346:	fb13 1300 	smlabb	r3, r3, r0, r1
 801a34a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a34e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a352:	605c      	str	r4, [r3, #4]
 801a354:	e757      	b.n	801a206 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801a356:	2d02      	cmp	r5, #2
 801a358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a35c:	d12f      	bne.n	801a3be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801a35e:	1cb2      	adds	r2, r6, #2
 801a360:	f1a3 0020 	sub.w	r0, r3, #32
 801a364:	9203      	str	r2, [sp, #12]
 801a366:	7872      	ldrb	r2, [r6, #1]
 801a368:	b2d2      	uxtb	r2, r2
 801a36a:	f002 010f 	and.w	r1, r2, #15
 801a36e:	1112      	asrs	r2, r2, #4
 801a370:	3908      	subs	r1, #8
 801a372:	3a08      	subs	r2, #8
 801a374:	4401      	add	r1, r0
 801a376:	4402      	add	r2, r0
 801a378:	4421      	add	r1, r4
 801a37a:	b2c9      	uxtb	r1, r1
 801a37c:	f361 0407 	bfi	r4, r1, #0, #8
 801a380:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801a384:	3d20      	subs	r5, #32
 801a386:	442b      	add	r3, r5
 801a388:	2503      	movs	r5, #3
 801a38a:	b2db      	uxtb	r3, r3
 801a38c:	f363 240f 	bfi	r4, r3, #8, #8
 801a390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a394:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801a398:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a39c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a3a0:	f362 4417 	bfi	r4, r2, #16, #8
 801a3a4:	2207      	movs	r2, #7
 801a3a6:	0e20      	lsrs	r0, r4, #24
 801a3a8:	fb12 3201 	smlabb	r2, r2, r1, r3
 801a3ac:	210b      	movs	r1, #11
 801a3ae:	fb11 2100 	smlabb	r1, r1, r0, r2
 801a3b2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801a3b6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801a3ba:	604c      	str	r4, [r1, #4]
 801a3bc:	e722      	b.n	801a204 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801a3be:	1c5d      	adds	r5, r3, #1
 801a3c0:	4656      	mov	r6, sl
 801a3c2:	45aa      	cmp	sl, r5
 801a3c4:	bfa8      	it	ge
 801a3c6:	462e      	movge	r6, r5
 801a3c8:	e71e      	b.n	801a208 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801a3ca:	f1b8 0f00 	cmp.w	r8, #0
 801a3ce:	d00d      	beq.n	801a3ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801a3d0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801a3d4:	4658      	mov	r0, fp
 801a3d6:	f7e8 fd5f 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801a3da:	4642      	mov	r2, r8
 801a3dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a3e0:	4638      	mov	r0, r7
 801a3e2:	9b05      	ldr	r3, [sp, #20]
 801a3e4:	4659      	mov	r1, fp
 801a3e6:	4447      	add	r7, r8
 801a3e8:	f7e8 fdbe 	bl	8002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801a3ec:	4b1d      	ldr	r3, [pc, #116]	@ (801a464 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801a3ee:	9a01      	ldr	r2, [sp, #4]
 801a3f0:	881b      	ldrh	r3, [r3, #0]
 801a3f2:	1a9b      	subs	r3, r3, r2
 801a3f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3f8:	441f      	add	r7, r3
 801a3fa:	9b04      	ldr	r3, [sp, #16]
 801a3fc:	3301      	adds	r3, #1
 801a3fe:	9304      	str	r3, [sp, #16]
 801a400:	9a04      	ldr	r2, [sp, #16]
 801a402:	9b00      	ldr	r3, [sp, #0]
 801a404:	4293      	cmp	r3, r2
 801a406:	d11d      	bne.n	801a444 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801a408:	9b02      	ldr	r3, [sp, #8]
 801a40a:	2400      	movs	r4, #0
 801a40c:	9a02      	ldr	r2, [sp, #8]
 801a40e:	f103 0801 	add.w	r8, r3, #1
 801a412:	9b06      	ldr	r3, [sp, #24]
 801a414:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801a418:	4621      	mov	r1, r4
 801a41a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a41e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a422:	9b07      	ldr	r3, [sp, #28]
 801a424:	ba36      	rev	r6, r6
 801a426:	9808      	ldr	r0, [sp, #32]
 801a428:	441e      	add	r6, r3
 801a42a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a42e:	1aed      	subs	r5, r5, r3
 801a430:	f008 f9f2 	bl	8022818 <memset>
 801a434:	f8cd 8008 	str.w	r8, [sp, #8]
 801a438:	b2ad      	uxth	r5, r5
 801a43a:	9404      	str	r4, [sp, #16]
 801a43c:	f7e8 fd22 	bl	8002e84 <_ZN8touchgfx5paint8tearDownEv>
 801a440:	46b0      	mov	r8, r6
 801a442:	e5df      	b.n	801a004 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801a444:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a448:	9a01      	ldr	r2, [sp, #4]
 801a44a:	1a9b      	subs	r3, r3, r2
 801a44c:	1b5d      	subs	r5, r3, r5
 801a44e:	b2ad      	uxth	r5, r5
 801a450:	e7f4      	b.n	801a43c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801a452:	4b05      	ldr	r3, [pc, #20]	@ (801a468 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801a454:	6818      	ldr	r0, [r3, #0]
 801a456:	6803      	ldr	r3, [r0, #0]
 801a458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a45a:	4798      	blx	r3
 801a45c:	b00f      	add	sp, #60	@ 0x3c
 801a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a462:	bf00      	nop
 801a464:	24025266 	.word	0x24025266
 801a468:	2402526c 	.word	0x2402526c

0801a46c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a470:	b093      	sub	sp, #76	@ 0x4c
 801a472:	460d      	mov	r5, r1
 801a474:	4616      	mov	r6, r2
 801a476:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801a47a:	9000      	str	r0, [sp, #0]
 801a47c:	f1bb 0f00 	cmp.w	fp, #0
 801a480:	f000 82ac 	beq.w	801a9dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801a484:	6810      	ldr	r0, [r2, #0]
 801a486:	ac0e      	add	r4, sp, #56	@ 0x38
 801a488:	6851      	ldr	r1, [r2, #4]
 801a48a:	c403      	stmia	r4!, {r0, r1}
 801a48c:	6818      	ldr	r0, [r3, #0]
 801a48e:	ac10      	add	r4, sp, #64	@ 0x40
 801a490:	6859      	ldr	r1, [r3, #4]
 801a492:	c403      	stmia	r4!, {r0, r1}
 801a494:	a80e      	add	r0, sp, #56	@ 0x38
 801a496:	f7f8 fdc1 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a49a:	4631      	mov	r1, r6
 801a49c:	a810      	add	r0, sp, #64	@ 0x40
 801a49e:	f7f8 fe01 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a4a2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a4a6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801a4aa:	bfdb      	ittet	le
 801a4ac:	b293      	uxthle	r3, r2
 801a4ae:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a4b2:	2301      	movgt	r3, #1
 801a4b4:	fb91 f3f3 	sdivle	r3, r1, r3
 801a4b8:	9301      	str	r3, [sp, #4]
 801a4ba:	f105 0308 	add.w	r3, r5, #8
 801a4be:	9901      	ldr	r1, [sp, #4]
 801a4c0:	9305      	str	r3, [sp, #20]
 801a4c2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801a4c6:	440b      	add	r3, r1
 801a4c8:	3b01      	subs	r3, #1
 801a4ca:	fb93 f3f1 	sdiv	r3, r3, r1
 801a4ce:	3b01      	subs	r3, #1
 801a4d0:	9905      	ldr	r1, [sp, #20]
 801a4d2:	b29b      	uxth	r3, r3
 801a4d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a4d8:	9901      	ldr	r1, [sp, #4]
 801a4da:	9306      	str	r3, [sp, #24]
 801a4dc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801a4e0:	fb93 f0f1 	sdiv	r0, r3, r1
 801a4e4:	b284      	uxth	r4, r0
 801a4e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801a4ea:	9403      	str	r4, [sp, #12]
 801a4ec:	9d03      	ldr	r5, [sp, #12]
 801a4ee:	9c01      	ldr	r4, [sp, #4]
 801a4f0:	fb05 3714 	mls	r7, r5, r4, r3
 801a4f4:	fb17 f702 	smulbb	r7, r7, r2
 801a4f8:	440f      	add	r7, r1
 801a4fa:	b2bf      	uxth	r7, r7
 801a4fc:	2d00      	cmp	r5, #0
 801a4fe:	d06b      	beq.n	801a5d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801a500:	1e6a      	subs	r2, r5, #1
 801a502:	9805      	ldr	r0, [sp, #20]
 801a504:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801a508:	9a06      	ldr	r2, [sp, #24]
 801a50a:	fa99 f989 	rev.w	r9, r9
 801a50e:	4491      	add	r9, r2
 801a510:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801a514:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801a518:	4411      	add	r1, r2
 801a51a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a51e:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801a87c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801a522:	4413      	add	r3, r2
 801a524:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801a528:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801a52c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801a530:	9302      	str	r3, [sp, #8]
 801a532:	4bd0      	ldr	r3, [pc, #832]	@ (801a874 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801a534:	6818      	ldr	r0, [r3, #0]
 801a536:	6803      	ldr	r3, [r0, #0]
 801a538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a53a:	4798      	blx	r3
 801a53c:	4bce      	ldr	r3, [pc, #824]	@ (801a878 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801a53e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801a542:	881b      	ldrh	r3, [r3, #0]
 801a544:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801a548:	fb03 2404 	mla	r4, r3, r4, r2
 801a54c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a550:	436b      	muls	r3, r5
 801a552:	2500      	movs	r5, #0
 801a554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a55c:	4629      	mov	r1, r5
 801a55e:	4404      	add	r4, r0
 801a560:	18e3      	adds	r3, r4, r3
 801a562:	930d      	str	r3, [sp, #52]	@ 0x34
 801a564:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801a568:	fb97 f3f3 	sdiv	r3, r7, r3
 801a56c:	9304      	str	r3, [sp, #16]
 801a56e:	9b00      	ldr	r3, [sp, #0]
 801a570:	3304      	adds	r3, #4
 801a572:	4618      	mov	r0, r3
 801a574:	9309      	str	r3, [sp, #36]	@ 0x24
 801a576:	f008 f94f 	bl	8022818 <memset>
 801a57a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a57c:	42a3      	cmp	r3, r4
 801a57e:	f240 8228 	bls.w	801a9d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801a582:	2003      	movs	r0, #3
 801a584:	2607      	movs	r6, #7
 801a586:	2f00      	cmp	r7, #0
 801a588:	f000 80cb 	beq.w	801a722 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801a58c:	f899 3000 	ldrb.w	r3, [r9]
 801a590:	b2db      	uxtb	r3, r3
 801a592:	2bfe      	cmp	r3, #254	@ 0xfe
 801a594:	d123      	bne.n	801a5de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801a596:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a59a:	3f01      	subs	r7, #1
 801a59c:	f899 2002 	ldrb.w	r2, [r9, #2]
 801a5a0:	f109 0804 	add.w	r8, r9, #4
 801a5a4:	b2db      	uxtb	r3, r3
 801a5a6:	f899 1003 	ldrb.w	r1, [r9, #3]
 801a5aa:	b2d2      	uxtb	r2, r2
 801a5ac:	f363 0507 	bfi	r5, r3, #0, #8
 801a5b0:	b2c9      	uxtb	r1, r1
 801a5b2:	b2bf      	uxth	r7, r7
 801a5b4:	f362 250f 	bfi	r5, r2, #8, #8
 801a5b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a5bc:	fb10 2201 	smlabb	r2, r0, r1, r2
 801a5c0:	f361 4517 	bfi	r5, r1, #16, #8
 801a5c4:	fb16 2303 	smlabb	r3, r6, r3, r2
 801a5c8:	9a00      	ldr	r2, [sp, #0]
 801a5ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a5ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a5d2:	605d      	str	r5, [r3, #4]
 801a5d4:	46c1      	mov	r9, r8
 801a5d6:	e7d6      	b.n	801a586 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801a5d8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a5dc:	e798      	b.n	801a510 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801a5de:	119a      	asrs	r2, r3, #6
 801a5e0:	f109 0801 	add.w	r8, r9, #1
 801a5e4:	d108      	bne.n	801a5f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801a5e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a5ea:	9a00      	ldr	r2, [sp, #0]
 801a5ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a5f0:	685d      	ldr	r5, [r3, #4]
 801a5f2:	3f01      	subs	r7, #1
 801a5f4:	b2bf      	uxth	r7, r7
 801a5f6:	e7ed      	b.n	801a5d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801a5f8:	2a01      	cmp	r2, #1
 801a5fa:	d125      	bne.n	801a648 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801a5fc:	f003 0103 	and.w	r1, r3, #3
 801a600:	1eaa      	subs	r2, r5, #2
 801a602:	440a      	add	r2, r1
 801a604:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801a608:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a60c:	b2d2      	uxtb	r2, r2
 801a60e:	3902      	subs	r1, #2
 801a610:	3b02      	subs	r3, #2
 801a612:	f362 0507 	bfi	r5, r2, #0, #8
 801a616:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a61a:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801a61e:	f361 250f 	bfi	r5, r1, #8, #8
 801a622:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a626:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801a62a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a62e:	fb10 1103 	smlabb	r1, r0, r3, r1
 801a632:	f363 4517 	bfi	r5, r3, #16, #8
 801a636:	9b00      	ldr	r3, [sp, #0]
 801a638:	fb16 1202 	smlabb	r2, r6, r2, r1
 801a63c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a640:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a644:	6055      	str	r5, [r2, #4]
 801a646:	e7d4      	b.n	801a5f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801a648:	2a02      	cmp	r2, #2
 801a64a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a64e:	d12c      	bne.n	801a6aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801a650:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a654:	f1a3 0c20 	sub.w	ip, r3, #32
 801a658:	f109 0802 	add.w	r8, r9, #2
 801a65c:	b2d2      	uxtb	r2, r2
 801a65e:	f002 010f 	and.w	r1, r2, #15
 801a662:	1112      	asrs	r2, r2, #4
 801a664:	3908      	subs	r1, #8
 801a666:	3a08      	subs	r2, #8
 801a668:	4461      	add	r1, ip
 801a66a:	4494      	add	ip, r2
 801a66c:	4429      	add	r1, r5
 801a66e:	b2c9      	uxtb	r1, r1
 801a670:	f361 0507 	bfi	r5, r1, #0, #8
 801a674:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801a678:	f1ae 0e20 	sub.w	lr, lr, #32
 801a67c:	4473      	add	r3, lr
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	f363 250f 	bfi	r5, r3, #8, #8
 801a684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a688:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801a68c:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801a690:	fb10 330c 	smlabb	r3, r0, ip, r3
 801a694:	f36c 4517 	bfi	r5, ip, #16, #8
 801a698:	fb16 3101 	smlabb	r1, r6, r1, r3
 801a69c:	9b00      	ldr	r3, [sp, #0]
 801a69e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801a6a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a6a6:	604d      	str	r5, [r1, #4]
 801a6a8:	e7a3      	b.n	801a5f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	42bb      	cmp	r3, r7
 801a6ae:	dd23      	ble.n	801a6f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801a6b0:	eba3 0907 	sub.w	r9, r3, r7
 801a6b4:	f1b9 0f00 	cmp.w	r9, #0
 801a6b8:	dc20      	bgt.n	801a6fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801a6ba:	9e02      	ldr	r6, [sp, #8]
 801a6bc:	2700      	movs	r7, #0
 801a6be:	2e00      	cmp	r6, #0
 801a6c0:	f340 8142 	ble.w	801a948 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801a6c4:	f108 0301 	add.w	r3, r8, #1
 801a6c8:	9307      	str	r3, [sp, #28]
 801a6ca:	f898 3000 	ldrb.w	r3, [r8]
 801a6ce:	b2db      	uxtb	r3, r3
 801a6d0:	119a      	asrs	r2, r3, #6
 801a6d2:	d12a      	bne.n	801a72a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801a6d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a6d8:	9a00      	ldr	r2, [sp, #0]
 801a6da:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a6de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6e2:	685d      	ldr	r5, [r3, #4]
 801a6e4:	f040 811f 	bne.w	801a926 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a6e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801a6ec:	7025      	strb	r5, [r4, #0]
 801a6ee:	7063      	strb	r3, [r4, #1]
 801a6f0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a6f4:	70a3      	strb	r3, [r4, #2]
 801a6f6:	e04e      	b.n	801a796 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a6f8:	1aff      	subs	r7, r7, r3
 801a6fa:	e77b      	b.n	801a5f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801a6fc:	9b02      	ldr	r3, [sp, #8]
 801a6fe:	4620      	mov	r0, r4
 801a700:	462a      	mov	r2, r5
 801a702:	454b      	cmp	r3, r9
 801a704:	bfa8      	it	ge
 801a706:	464b      	movge	r3, r9
 801a708:	461f      	mov	r7, r3
 801a70a:	9b02      	ldr	r3, [sp, #8]
 801a70c:	4639      	mov	r1, r7
 801a70e:	1bde      	subs	r6, r3, r7
 801a710:	eba9 0907 	sub.w	r9, r9, r7
 801a714:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a718:	465b      	mov	r3, fp
 801a71a:	f7e8 fbd7 	bl	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801a71e:	443c      	add	r4, r7
 801a720:	e7cc      	b.n	801a6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801a722:	46c8      	mov	r8, r9
 801a724:	9e02      	ldr	r6, [sp, #8]
 801a726:	46b9      	mov	r9, r7
 801a728:	e7c8      	b.n	801a6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801a72a:	2a01      	cmp	r2, #1
 801a72c:	d136      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801a72e:	f003 0103 	and.w	r1, r3, #3
 801a732:	1ea8      	subs	r0, r5, #2
 801a734:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a738:	4408      	add	r0, r1
 801a73a:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801a73e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a742:	b2c0      	uxtb	r0, r0
 801a744:	f1a1 0102 	sub.w	r1, r1, #2
 801a748:	f1a3 0302 	sub.w	r3, r3, #2
 801a74c:	f360 0507 	bfi	r5, r0, #0, #8
 801a750:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a754:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801a758:	f361 250f 	bfi	r5, r1, #8, #8
 801a75c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801a760:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801a764:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801a768:	f04f 0303 	mov.w	r3, #3
 801a76c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801a770:	f04f 0c07 	mov.w	ip, #7
 801a774:	9b00      	ldr	r3, [sp, #0]
 801a776:	f368 4517 	bfi	r5, r8, #16, #8
 801a77a:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801a77e:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801a782:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801a786:	f8cc 5004 	str.w	r5, [ip, #4]
 801a78a:	f040 80cd 	bne.w	801a928 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801a78e:	7020      	strb	r0, [r4, #0]
 801a790:	7061      	strb	r1, [r4, #1]
 801a792:	f884 8002 	strb.w	r8, [r4, #2]
 801a796:	3e01      	subs	r6, #1
 801a798:	3403      	adds	r4, #3
 801a79a:	e0c1      	b.n	801a920 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801a79c:	2a02      	cmp	r2, #2
 801a79e:	d13d      	bne.n	801a81c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801a7a0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a7a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a7a8:	f108 0202 	add.w	r2, r8, #2
 801a7ac:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a7b0:	b2c9      	uxtb	r1, r1
 801a7b2:	f1a3 0c20 	sub.w	ip, r3, #32
 801a7b6:	9207      	str	r2, [sp, #28]
 801a7b8:	f001 000f 	and.w	r0, r1, #15
 801a7bc:	f1a0 0008 	sub.w	r0, r0, #8
 801a7c0:	4460      	add	r0, ip
 801a7c2:	4428      	add	r0, r5
 801a7c4:	b2c0      	uxtb	r0, r0
 801a7c6:	f360 0507 	bfi	r5, r0, #0, #8
 801a7ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801a7ce:	f1a2 0220 	sub.w	r2, r2, #32
 801a7d2:	4413      	add	r3, r2
 801a7d4:	ea4f 1221 	mov.w	r2, r1, asr #4
 801a7d8:	b2db      	uxtb	r3, r3
 801a7da:	f1a2 0208 	sub.w	r2, r2, #8
 801a7de:	f363 250f 	bfi	r5, r3, #8, #8
 801a7e2:	4462      	add	r2, ip
 801a7e4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a7e8:	f04f 0c03 	mov.w	ip, #3
 801a7ec:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801a7f0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a7f4:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801a7f8:	f04f 0107 	mov.w	r1, #7
 801a7fc:	f362 4517 	bfi	r5, r2, #16, #8
 801a800:	fb11 c100 	smlabb	r1, r1, r0, ip
 801a804:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801a808:	9900      	ldr	r1, [sp, #0]
 801a80a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801a80e:	604d      	str	r5, [r1, #4]
 801a810:	f040 8089 	bne.w	801a926 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a814:	7020      	strb	r0, [r4, #0]
 801a816:	7063      	strb	r3, [r4, #1]
 801a818:	70a2      	strb	r2, [r4, #2]
 801a81a:	e7bc      	b.n	801a796 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a81c:	2bfe      	cmp	r3, #254	@ 0xfe
 801a81e:	d12f      	bne.n	801a880 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801a820:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a824:	f108 0304 	add.w	r3, r8, #4
 801a828:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a82c:	f04f 0c03 	mov.w	ip, #3
 801a830:	f898 1003 	ldrb.w	r1, [r8, #3]
 801a834:	b2c0      	uxtb	r0, r0
 801a836:	b2d2      	uxtb	r2, r2
 801a838:	9307      	str	r3, [sp, #28]
 801a83a:	b2c9      	uxtb	r1, r1
 801a83c:	f360 0507 	bfi	r5, r0, #0, #8
 801a840:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801a844:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a848:	f362 250f 	bfi	r5, r2, #8, #8
 801a84c:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801a850:	f04f 0307 	mov.w	r3, #7
 801a854:	f361 4517 	bfi	r5, r1, #16, #8
 801a858:	fb13 c300 	smlabb	r3, r3, r0, ip
 801a85c:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801a860:	9b00      	ldr	r3, [sp, #0]
 801a862:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801a866:	605d      	str	r5, [r3, #4]
 801a868:	d15d      	bne.n	801a926 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a86a:	7020      	strb	r0, [r4, #0]
 801a86c:	7062      	strb	r2, [r4, #1]
 801a86e:	70a1      	strb	r1, [r4, #2]
 801a870:	e791      	b.n	801a796 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a872:	bf00      	nop
 801a874:	2402526c 	.word	0x2402526c
 801a878:	24025266 	.word	0x24025266
 801a87c:	24009740 	.word	0x24009740
 801a880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a884:	1c5a      	adds	r2, r3, #1
 801a886:	b94b      	cbnz	r3, 801a89c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801a888:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a88c:	d14c      	bne.n	801a928 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801a88e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801a892:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a896:	7025      	strb	r5, [r4, #0]
 801a898:	7062      	strb	r2, [r4, #1]
 801a89a:	e72b      	b.n	801a6f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801a89c:	4296      	cmp	r6, r2
 801a89e:	46b0      	mov	r8, r6
 801a8a0:	bfa8      	it	ge
 801a8a2:	4690      	movge	r8, r2
 801a8a4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801a8a8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a8ac:	eba6 0608 	sub.w	r6, r6, r8
 801a8b0:	eba2 0908 	sub.w	r9, r2, r8
 801a8b4:	9308      	str	r3, [sp, #32]
 801a8b6:	b2eb      	uxtb	r3, r5
 801a8b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801a8ba:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801a8be:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a8c0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801a8c6:	9b08      	ldr	r3, [sp, #32]
 801a8c8:	d030      	beq.n	801a92c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801a8ca:	18fb      	adds	r3, r7, r3
 801a8cc:	2bc0      	cmp	r3, #192	@ 0xc0
 801a8ce:	dd15      	ble.n	801a8fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801a8d0:	4650      	mov	r0, sl
 801a8d2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801a8d6:	f7e8 fadf 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801a8da:	2203      	movs	r2, #3
 801a8dc:	4651      	mov	r1, sl
 801a8de:	465b      	mov	r3, fp
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	443c      	add	r4, r7
 801a8e4:	fb97 f2f2 	sdiv	r2, r7, r2
 801a8e8:	f7e8 fb1a 	bl	8002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801a8ec:	4b3d      	ldr	r3, [pc, #244]	@ (801a9e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801a8ee:	2700      	movs	r7, #0
 801a8f0:	459a      	cmp	sl, r3
 801a8f2:	bf0c      	ite	eq
 801a8f4:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801a9f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801a8f8:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801a9e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801a8fc:	eb0a 0307 	add.w	r3, sl, r7
 801a900:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a902:	f1b8 0801 	subs.w	r8, r8, #1
 801a906:	f103 0303 	add.w	r3, r3, #3
 801a90a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801a90e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a910:	f803 2c02 	strb.w	r2, [r3, #-2]
 801a914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a916:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a91a:	d1f1      	bne.n	801a900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801a91c:	9b08      	ldr	r3, [sp, #32]
 801a91e:	441f      	add	r7, r3
 801a920:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a924:	e6cb      	b.n	801a6be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801a926:	2201      	movs	r2, #1
 801a928:	4690      	mov	r8, r2
 801a92a:	e7bb      	b.n	801a8a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801a92c:	4423      	add	r3, r4
 801a92e:	42a3      	cmp	r3, r4
 801a930:	d9f6      	bls.n	801a920 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801a932:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a934:	3403      	adds	r4, #3
 801a936:	f804 2c03 	strb.w	r2, [r4, #-3]
 801a93a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a93c:	f804 2c02 	strb.w	r2, [r4, #-2]
 801a940:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a942:	f804 2c01 	strb.w	r2, [r4, #-1]
 801a946:	e7f2      	b.n	801a92e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801a948:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a94c:	d00e      	beq.n	801a96c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801a94e:	b16f      	cbz	r7, 801a96c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801a950:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801a954:	4650      	mov	r0, sl
 801a956:	f7e8 fa9f 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801a95a:	2203      	movs	r2, #3
 801a95c:	4620      	mov	r0, r4
 801a95e:	443c      	add	r4, r7
 801a960:	465b      	mov	r3, fp
 801a962:	4651      	mov	r1, sl
 801a964:	fb97 f2f2 	sdiv	r2, r7, r2
 801a968:	f7e8 fada 	bl	8002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801a96c:	4b1e      	ldr	r3, [pc, #120]	@ (801a9e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801a96e:	9a02      	ldr	r2, [sp, #8]
 801a970:	881b      	ldrh	r3, [r3, #0]
 801a972:	1a9b      	subs	r3, r3, r2
 801a974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a978:	441c      	add	r4, r3
 801a97a:	9b04      	ldr	r3, [sp, #16]
 801a97c:	3301      	adds	r3, #1
 801a97e:	9304      	str	r3, [sp, #16]
 801a980:	9a04      	ldr	r2, [sp, #16]
 801a982:	9b01      	ldr	r3, [sp, #4]
 801a984:	4293      	cmp	r3, r2
 801a986:	d11c      	bne.n	801a9c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801a988:	9b03      	ldr	r3, [sp, #12]
 801a98a:	2500      	movs	r5, #0
 801a98c:	9a03      	ldr	r2, [sp, #12]
 801a98e:	1c5e      	adds	r6, r3, #1
 801a990:	9b05      	ldr	r3, [sp, #20]
 801a992:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801a996:	4629      	mov	r1, r5
 801a998:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801a99c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a9a0:	9b06      	ldr	r3, [sp, #24]
 801a9a2:	fa98 f888 	rev.w	r8, r8
 801a9a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9a8:	4498      	add	r8, r3
 801a9aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a9ae:	1aff      	subs	r7, r7, r3
 801a9b0:	f007 ff32 	bl	8022818 <memset>
 801a9b4:	b2bf      	uxth	r7, r7
 801a9b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801a9ba:	f7e8 fa63 	bl	8002e84 <_ZN8touchgfx5paint8tearDownEv>
 801a9be:	46c1      	mov	r9, r8
 801a9c0:	e5db      	b.n	801a57a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801a9c2:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801a9c6:	9b02      	ldr	r3, [sp, #8]
 801a9c8:	1aff      	subs	r7, r7, r3
 801a9ca:	eba7 0709 	sub.w	r7, r7, r9
 801a9ce:	b2bf      	uxth	r7, r7
 801a9d0:	e7f3      	b.n	801a9ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801a9d2:	4b06      	ldr	r3, [pc, #24]	@ (801a9ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801a9d4:	6818      	ldr	r0, [r3, #0]
 801a9d6:	6803      	ldr	r3, [r0, #0]
 801a9d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a9da:	4798      	blx	r3
 801a9dc:	b013      	add	sp, #76	@ 0x4c
 801a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e2:	bf00      	nop
 801a9e4:	24009740 	.word	0x24009740
 801a9e8:	24025266 	.word	0x24025266
 801a9ec:	2402526c 	.word	0x2402526c
 801a9f0:	24009840 	.word	0x24009840

0801a9f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801a9fc:	9c06      	ldr	r4, [sp, #24]
 801a9fe:	2800      	cmp	r0, #0
 801aa00:	d06e      	beq.n	801aae0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aa02:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801aa06:	2d00      	cmp	r5, #0
 801aa08:	dd6a      	ble.n	801aae0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aa0a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801aa0e:	f1bc 0f00 	cmp.w	ip, #0
 801aa12:	dd65      	ble.n	801aae0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aa14:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801aa18:	28ff      	cmp	r0, #255	@ 0xff
 801aa1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa1e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801aa22:	fb02 3306 	mla	r3, r2, r6, r3
 801aa26:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801aa2a:	b2e4      	uxtb	r4, r4
 801aa2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa30:	4419      	add	r1, r3
 801aa32:	fb02 f30c 	mul.w	r3, r2, ip
 801aa36:	eba2 0205 	sub.w	r2, r2, r5
 801aa3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa46:	440b      	add	r3, r1
 801aa48:	d03e      	beq.n	801aac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801aa4a:	fa1f fc80 	uxth.w	ip, r0
 801aa4e:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801aa52:	fb06 f60c 	mul.w	r6, r6, ip
 801aa56:	b280      	uxth	r0, r0
 801aa58:	fb07 f70c 	mul.w	r7, r7, ip
 801aa5c:	fb04 f40c 	mul.w	r4, r4, ip
 801aa60:	4299      	cmp	r1, r3
 801aa62:	d23d      	bcs.n	801aae0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aa64:	eb01 0c05 	add.w	ip, r1, r5
 801aa68:	458c      	cmp	ip, r1
 801aa6a:	f101 0e03 	add.w	lr, r1, #3
 801aa6e:	d928      	bls.n	801aac2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801aa70:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801aa74:	fb11 f100 	smulbb	r1, r1, r0
 801aa78:	4421      	add	r1, r4
 801aa7a:	b289      	uxth	r1, r1
 801aa7c:	f101 0801 	add.w	r8, r1, #1
 801aa80:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aa84:	1209      	asrs	r1, r1, #8
 801aa86:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801aa8a:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801aa8e:	fb11 f100 	smulbb	r1, r1, r0
 801aa92:	4439      	add	r1, r7
 801aa94:	b289      	uxth	r1, r1
 801aa96:	f101 0801 	add.w	r8, r1, #1
 801aa9a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aa9e:	1209      	asrs	r1, r1, #8
 801aaa0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801aaa4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801aaa8:	fb11 f100 	smulbb	r1, r1, r0
 801aaac:	4431      	add	r1, r6
 801aaae:	b289      	uxth	r1, r1
 801aab0:	f101 0801 	add.w	r8, r1, #1
 801aab4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aab8:	1209      	asrs	r1, r1, #8
 801aaba:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801aabe:	4671      	mov	r1, lr
 801aac0:	e7d2      	b.n	801aa68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801aac2:	4411      	add	r1, r2
 801aac4:	e7cc      	b.n	801aa60 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801aac6:	4411      	add	r1, r2
 801aac8:	4299      	cmp	r1, r3
 801aaca:	d209      	bcs.n	801aae0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aacc:	1948      	adds	r0, r1, r5
 801aace:	4281      	cmp	r1, r0
 801aad0:	d2f9      	bcs.n	801aac6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801aad2:	700c      	strb	r4, [r1, #0]
 801aad4:	3103      	adds	r1, #3
 801aad6:	f801 7c02 	strb.w	r7, [r1, #-2]
 801aada:	f801 6c01 	strb.w	r6, [r1, #-1]
 801aade:	e7f6      	b.n	801aace <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aae4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae8:	b093      	sub	sp, #76	@ 0x4c
 801aaea:	4699      	mov	r9, r3
 801aaec:	4617      	mov	r7, r2
 801aaee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aaf2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801aaf6:	4604      	mov	r4, r0
 801aaf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aafc:	a80c      	add	r0, sp, #48	@ 0x30
 801aafe:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801ab02:	460d      	mov	r5, r1
 801ab04:	4649      	mov	r1, r9
 801ab06:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801ab0a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ab0e:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801ab12:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801ab16:	f7f2 ffc7 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801ab1a:	4639      	mov	r1, r7
 801ab1c:	a80c      	add	r0, sp, #48	@ 0x30
 801ab1e:	f7f2 ffc3 	bl	800daa8 <_ZN8touchgfx4RectaNERKS0_>
 801ab22:	4b78      	ldr	r3, [pc, #480]	@ (801ad04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ab24:	8818      	ldrh	r0, [r3, #0]
 801ab26:	4b78      	ldr	r3, [pc, #480]	@ (801ad08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801ab28:	b202      	sxth	r2, r0
 801ab2a:	8819      	ldrh	r1, [r3, #0]
 801ab2c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ab30:	b20f      	sxth	r7, r1
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	da07      	bge.n	801ab46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801ab36:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801ab3a:	4463      	add	r3, ip
 801ab3c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801ab40:	2300      	movs	r3, #0
 801ab42:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801ab46:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ab4a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801ab4e:	1ad2      	subs	r2, r2, r3
 801ab50:	4594      	cmp	ip, r2
 801ab52:	bfc4      	itt	gt
 801ab54:	1ac2      	subgt	r2, r0, r3
 801ab56:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801ab5a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ab5e:	2a00      	cmp	r2, #0
 801ab60:	da07      	bge.n	801ab72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801ab62:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801ab66:	4462      	add	r2, ip
 801ab68:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801ab6c:	2200      	movs	r2, #0
 801ab6e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ab72:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ab76:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801ab7a:	1abf      	subs	r7, r7, r2
 801ab7c:	45bc      	cmp	ip, r7
 801ab7e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801ad10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801ab82:	bfc8      	it	gt
 801ab84:	1a8f      	subgt	r7, r1, r2
 801ab86:	f89c c000 	ldrb.w	ip, [ip]
 801ab8a:	bfc8      	it	gt
 801ab8c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801ab90:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801ab94:	f1bc 0f00 	cmp.w	ip, #0
 801ab98:	d176      	bne.n	801ac88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801ab9a:	4287      	cmp	r7, r0
 801ab9c:	bf14      	ite	ne
 801ab9e:	2100      	movne	r1, #0
 801aba0:	2101      	moveq	r1, #1
 801aba2:	2f00      	cmp	r7, #0
 801aba4:	9107      	str	r1, [sp, #28]
 801aba6:	dd73      	ble.n	801ac90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801aba8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801abac:	2900      	cmp	r1, #0
 801abae:	9104      	str	r1, [sp, #16]
 801abb0:	dd6e      	ble.n	801ac90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801abb2:	f8b9 1000 	ldrh.w	r1, [r9]
 801abb6:	a80e      	add	r0, sp, #56	@ 0x38
 801abb8:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801abbc:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801abc0:	1a5b      	subs	r3, r3, r1
 801abc2:	a910      	add	r1, sp, #64	@ 0x40
 801abc4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801abc8:	b21b      	sxth	r3, r3
 801abca:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801abce:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801ad14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801abd2:	9305      	str	r3, [sp, #20]
 801abd4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801abd8:	1ad2      	subs	r2, r2, r3
 801abda:	b213      	sxth	r3, r2
 801abdc:	9306      	str	r3, [sp, #24]
 801abde:	9b05      	ldr	r3, [sp, #20]
 801abe0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801abe4:	9b06      	ldr	r3, [sp, #24]
 801abe6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801abea:	9b04      	ldr	r3, [sp, #16]
 801abec:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801abf0:	2300      	movs	r3, #0
 801abf2:	9310      	str	r3, [sp, #64]	@ 0x40
 801abf4:	f7f8 fa56 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abf8:	4640      	mov	r0, r8
 801abfa:	f7f8 fa0f 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abfe:	a810      	add	r0, sp, #64	@ 0x40
 801ac00:	f7f8 fa0c 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac04:	4b41      	ldr	r3, [pc, #260]	@ (801ad0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801ac06:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	881b      	ldrh	r3, [r3, #0]
 801ac0e:	9308      	str	r3, [sp, #32]
 801ac10:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ac14:	b21b      	sxth	r3, r3
 801ac16:	9303      	str	r3, [sp, #12]
 801ac18:	682b      	ldr	r3, [r5, #0]
 801ac1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac1c:	4798      	blx	r3
 801ac1e:	9a03      	ldr	r2, [sp, #12]
 801ac20:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801ac24:	4681      	mov	r9, r0
 801ac26:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ac2a:	fb13 f302 	smulbb	r3, r3, r2
 801ac2e:	2203      	movs	r2, #3
 801ac30:	f8da 0000 	ldr.w	r0, [sl]
 801ac34:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ac38:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801ac3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ac3c:	441d      	add	r5, r3
 801ac3e:	6803      	ldr	r3, [r0, #0]
 801ac40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac42:	4798      	blx	r3
 801ac44:	9009      	str	r0, [sp, #36]	@ 0x24
 801ac46:	f8da 0000 	ldr.w	r0, [sl]
 801ac4a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ac4e:	6803      	ldr	r3, [r0, #0]
 801ac50:	910a      	str	r1, [sp, #40]	@ 0x28
 801ac52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac54:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801ac58:	4798      	blx	r3
 801ac5a:	f010 0f01 	tst.w	r0, #1
 801ac5e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801ac62:	d01e      	beq.n	801aca2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801ac64:	f8da 0000 	ldr.w	r0, [sl]
 801ac68:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ac6c:	6803      	ldr	r3, [r0, #0]
 801ac6e:	9200      	str	r2, [sp, #0]
 801ac70:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801ac72:	462b      	mov	r3, r5
 801ac74:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ac78:	47b0      	blx	r6
 801ac7a:	9b05      	ldr	r3, [sp, #20]
 801ac7c:	80a7      	strh	r7, [r4, #4]
 801ac7e:	8023      	strh	r3, [r4, #0]
 801ac80:	9b06      	ldr	r3, [sp, #24]
 801ac82:	8063      	strh	r3, [r4, #2]
 801ac84:	9b04      	ldr	r3, [sp, #16]
 801ac86:	e007      	b.n	801ac98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801ac88:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801ac8c:	4288      	cmp	r0, r1
 801ac8e:	e785      	b.n	801ab9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801ac90:	2300      	movs	r3, #0
 801ac92:	8023      	strh	r3, [r4, #0]
 801ac94:	8063      	strh	r3, [r4, #2]
 801ac96:	80a3      	strh	r3, [r4, #4]
 801ac98:	4620      	mov	r0, r4
 801ac9a:	80e3      	strh	r3, [r4, #6]
 801ac9c:	b013      	add	sp, #76	@ 0x4c
 801ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca2:	fb09 f606 	mul.w	r6, r9, r6
 801aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aca8:	fb11 6602 	smlabb	r6, r1, r2, r6
 801acac:	9a07      	ldr	r2, [sp, #28]
 801acae:	4433      	add	r3, r6
 801acb0:	461e      	mov	r6, r3
 801acb2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801acb6:	b16a      	cbz	r2, 801acd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801acb8:	9a08      	ldr	r2, [sp, #32]
 801acba:	4593      	cmp	fp, r2
 801acbc:	d10a      	bne.n	801acd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801acbe:	f8da 0000 	ldr.w	r0, [sl]
 801acc2:	fb09 f303 	mul.w	r3, r9, r3
 801acc6:	4629      	mov	r1, r5
 801acc8:	6802      	ldr	r2, [r0, #0]
 801acca:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801acce:	4632      	mov	r2, r6
 801acd0:	47d0      	blx	sl
 801acd2:	e7d2      	b.n	801ac7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801acd4:	9a03      	ldr	r2, [sp, #12]
 801acd6:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801ad14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801acda:	fb02 5803 	mla	r8, r2, r3, r5
 801acde:	4545      	cmp	r5, r8
 801ace0:	d2cb      	bcs.n	801ac7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801ace2:	f8db 0000 	ldr.w	r0, [fp]
 801ace6:	4629      	mov	r1, r5
 801ace8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801acec:	6802      	ldr	r2, [r0, #0]
 801acee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acf2:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801acf6:	4632      	mov	r2, r6
 801acf8:	47d0      	blx	sl
 801acfa:	9b03      	ldr	r3, [sp, #12]
 801acfc:	444e      	add	r6, r9
 801acfe:	441d      	add	r5, r3
 801ad00:	e7ed      	b.n	801acde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801ad02:	bf00      	nop
 801ad04:	24025260 	.word	0x24025260
 801ad08:	24025262 	.word	0x24025262
 801ad0c:	24025266 	.word	0x24025266
 801ad10:	24025264 	.word	0x24025264
 801ad14:	2402526c 	.word	0x2402526c

0801ad18 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ad18:	2200      	movs	r2, #0
 801ad1a:	490e      	ldr	r1, [pc, #56]	@ (801ad54 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801ad1c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801ad20:	6001      	str	r1, [r0, #0]
 801ad22:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ad26:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ad2a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801ad2e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801ad32:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801ad36:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801ad3a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801ad3e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801ad42:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801ad46:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801ad4a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801ad4e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801ad52:	4770      	bx	lr
 801ad54:	08026900 	.word	0x08026900

0801ad58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad5c:	b091      	sub	sp, #68	@ 0x44
 801ad5e:	4607      	mov	r7, r0
 801ad60:	4688      	mov	r8, r1
 801ad62:	6810      	ldr	r0, [r2, #0]
 801ad64:	6851      	ldr	r1, [r2, #4]
 801ad66:	ac0c      	add	r4, sp, #48	@ 0x30
 801ad68:	4616      	mov	r6, r2
 801ad6a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801ad6e:	4d64      	ldr	r5, [pc, #400]	@ (801af00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ad70:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801af04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ad74:	c403      	stmia	r4!, {r0, r1}
 801ad76:	6818      	ldr	r0, [r3, #0]
 801ad78:	ac0e      	add	r4, sp, #56	@ 0x38
 801ad7a:	6859      	ldr	r1, [r3, #4]
 801ad7c:	c403      	stmia	r4!, {r0, r1}
 801ad7e:	a80c      	add	r0, sp, #48	@ 0x30
 801ad80:	f7f8 f94c 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ad84:	4631      	mov	r1, r6
 801ad86:	a80e      	add	r0, sp, #56	@ 0x38
 801ad88:	f7f8 f98c 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ad8c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ad90:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ad94:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ad98:	6828      	ldr	r0, [r5, #0]
 801ad9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ad9e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801ada2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801ada6:	440f      	add	r7, r1
 801ada8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801adac:	440a      	add	r2, r1
 801adae:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801adb2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801adb6:	4413      	add	r3, r2
 801adb8:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801adbc:	6803      	ldr	r3, [r0, #0]
 801adbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801adc0:	4798      	blx	r3
 801adc2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801adc6:	6828      	ldr	r0, [r5, #0]
 801adc8:	d01f      	beq.n	801ae0a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801adca:	2201      	movs	r2, #1
 801adcc:	2500      	movs	r5, #0
 801adce:	6801      	ldr	r1, [r0, #0]
 801add0:	b2a4      	uxth	r4, r4
 801add2:	b2b6      	uxth	r6, r6
 801add4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801add8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801addc:	250b      	movs	r5, #11
 801adde:	9507      	str	r5, [sp, #28]
 801ade0:	f8ba 5000 	ldrh.w	r5, [sl]
 801ade4:	f8cd 9010 	str.w	r9, [sp, #16]
 801ade8:	9602      	str	r6, [sp, #8]
 801adea:	9401      	str	r4, [sp, #4]
 801adec:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801adf0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801adf4:	9203      	str	r2, [sp, #12]
 801adf6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801adfa:	9200      	str	r2, [sp, #0]
 801adfc:	4642      	mov	r2, r8
 801adfe:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801ae00:	4639      	mov	r1, r7
 801ae02:	47a0      	blx	r4
 801ae04:	b011      	add	sp, #68	@ 0x44
 801ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae0a:	6803      	ldr	r3, [r0, #0]
 801ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae0e:	4798      	blx	r3
 801ae10:	f8ba 5000 	ldrh.w	r5, [sl]
 801ae14:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ae18:	f04f 0e04 	mov.w	lr, #4
 801ae1c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ae20:	436e      	muls	r6, r5
 801ae22:	fb05 2303 	mla	r3, r5, r3, r2
 801ae26:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ae2a:	1b2d      	subs	r5, r5, r4
 801ae2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae34:	4418      	add	r0, r3
 801ae36:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ae3a:	1982      	adds	r2, r0, r6
 801ae3c:	1b1b      	subs	r3, r3, r4
 801ae3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae42:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae44:	4290      	cmp	r0, r2
 801ae46:	d254      	bcs.n	801aef2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ae48:	eb00 0a04 	add.w	sl, r0, r4
 801ae4c:	4550      	cmp	r0, sl
 801ae4e:	d24c      	bcs.n	801aeea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ae50:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ae54:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ae58:	eb08 0c01 	add.w	ip, r8, r1
 801ae5c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ae60:	b173      	cbz	r3, 801ae80 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ae62:	2bff      	cmp	r3, #255	@ 0xff
 801ae64:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ae68:	d10c      	bne.n	801ae84 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ae6a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ae6e:	d109      	bne.n	801ae84 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ae70:	f880 b000 	strb.w	fp, [r0]
 801ae74:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ae78:	7043      	strb	r3, [r0, #1]
 801ae7a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ae7e:	7083      	strb	r3, [r0, #2]
 801ae80:	3003      	adds	r0, #3
 801ae82:	e7e3      	b.n	801ae4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ae84:	fb09 f103 	mul.w	r1, r9, r3
 801ae88:	1c4b      	adds	r3, r1, #1
 801ae8a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ae8e:	7801      	ldrb	r1, [r0, #0]
 801ae90:	121b      	asrs	r3, r3, #8
 801ae92:	b29e      	uxth	r6, r3
 801ae94:	43db      	mvns	r3, r3
 801ae96:	fb1b fb06 	smulbb	fp, fp, r6
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	fb01 b103 	mla	r1, r1, r3, fp
 801aea0:	b289      	uxth	r1, r1
 801aea2:	f101 0b01 	add.w	fp, r1, #1
 801aea6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801aeaa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801aeae:	fb1b fb03 	smulbb	fp, fp, r3
 801aeb2:	1209      	asrs	r1, r1, #8
 801aeb4:	7001      	strb	r1, [r0, #0]
 801aeb6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801aeba:	fb01 b106 	mla	r1, r1, r6, fp
 801aebe:	b289      	uxth	r1, r1
 801aec0:	f101 0b01 	add.w	fp, r1, #1
 801aec4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801aec8:	1209      	asrs	r1, r1, #8
 801aeca:	7041      	strb	r1, [r0, #1]
 801aecc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801aed0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801aed4:	fb1c f303 	smulbb	r3, ip, r3
 801aed8:	fb01 3606 	mla	r6, r1, r6, r3
 801aedc:	b2b6      	uxth	r6, r6
 801aede:	1c73      	adds	r3, r6, #1
 801aee0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801aee4:	1236      	asrs	r6, r6, #8
 801aee6:	7086      	strb	r6, [r0, #2]
 801aee8:	e7ca      	b.n	801ae80 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801aeea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aeec:	4428      	add	r0, r5
 801aeee:	441f      	add	r7, r3
 801aef0:	e7a8      	b.n	801ae44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801aef2:	4b03      	ldr	r3, [pc, #12]	@ (801af00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801aef4:	6818      	ldr	r0, [r3, #0]
 801aef6:	6803      	ldr	r3, [r0, #0]
 801aef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aefa:	4798      	blx	r3
 801aefc:	e782      	b.n	801ae04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801aefe:	bf00      	nop
 801af00:	2402526c 	.word	0x2402526c
 801af04:	24025266 	.word	0x24025266

0801af08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af0c:	b091      	sub	sp, #68	@ 0x44
 801af0e:	4680      	mov	r8, r0
 801af10:	460e      	mov	r6, r1
 801af12:	6810      	ldr	r0, [r2, #0]
 801af14:	6851      	ldr	r1, [r2, #4]
 801af16:	ad0c      	add	r5, sp, #48	@ 0x30
 801af18:	4614      	mov	r4, r2
 801af1a:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801af1e:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801b0b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801af22:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801b0bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801af26:	c503      	stmia	r5!, {r0, r1}
 801af28:	6818      	ldr	r0, [r3, #0]
 801af2a:	ad0e      	add	r5, sp, #56	@ 0x38
 801af2c:	6859      	ldr	r1, [r3, #4]
 801af2e:	c503      	stmia	r5!, {r0, r1}
 801af30:	a80c      	add	r0, sp, #48	@ 0x30
 801af32:	f7f8 f873 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af36:	4621      	mov	r1, r4
 801af38:	a80e      	add	r0, sp, #56	@ 0x38
 801af3a:	f7f8 f8b3 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801af3e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801af42:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801af46:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801af4a:	f8d9 0000 	ldr.w	r0, [r9]
 801af4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801af52:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801af56:	eb08 0401 	add.w	r4, r8, r1
 801af5a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801af5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801af62:	440a      	add	r2, r1
 801af64:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801af68:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801af6c:	4413      	add	r3, r2
 801af6e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801af72:	6803      	ldr	r3, [r0, #0]
 801af74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af76:	4798      	blx	r3
 801af78:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801af7c:	f8d9 0000 	ldr.w	r0, [r9]
 801af80:	d022      	beq.n	801afc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801af82:	2200      	movs	r2, #0
 801af84:	f04f 0c01 	mov.w	ip, #1
 801af88:	6801      	ldr	r1, [r0, #0]
 801af8a:	b2ad      	uxth	r5, r5
 801af8c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801af90:	e9cd c208 	strd	ip, r2, [sp, #32]
 801af94:	f04f 0c0b 	mov.w	ip, #11
 801af98:	f8cd c01c 	str.w	ip, [sp, #28]
 801af9c:	f8ba c000 	ldrh.w	ip, [sl]
 801afa0:	9704      	str	r7, [sp, #16]
 801afa2:	9502      	str	r5, [sp, #8]
 801afa4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801afa8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801afac:	9203      	str	r2, [sp, #12]
 801afae:	fa1f f288 	uxth.w	r2, r8
 801afb2:	9201      	str	r2, [sp, #4]
 801afb4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801afb8:	9200      	str	r2, [sp, #0]
 801afba:	4632      	mov	r2, r6
 801afbc:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801afbe:	4621      	mov	r1, r4
 801afc0:	47a8      	blx	r5
 801afc2:	b011      	add	sp, #68	@ 0x44
 801afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc8:	6803      	ldr	r3, [r0, #0]
 801afca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afcc:	4798      	blx	r3
 801afce:	f8ba 2000 	ldrh.w	r2, [sl]
 801afd2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801afd6:	f04f 0e03 	mov.w	lr, #3
 801afda:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801afde:	4355      	muls	r5, r2
 801afe0:	fa1f fc87 	uxth.w	ip, r7
 801afe4:	fb02 1303 	mla	r3, r2, r3, r1
 801afe8:	eba2 0208 	sub.w	r2, r2, r8
 801afec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aff8:	4418      	add	r0, r3
 801affa:	920b      	str	r2, [sp, #44]	@ 0x2c
 801affc:	1943      	adds	r3, r0, r5
 801affe:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801b002:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801b006:	eba2 0208 	sub.w	r2, r2, r8
 801b00a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b00e:	b2ad      	uxth	r5, r5
 801b010:	4298      	cmp	r0, r3
 801b012:	d24a      	bcs.n	801b0aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801b014:	eb00 0908 	add.w	r9, r0, r8
 801b018:	4621      	mov	r1, r4
 801b01a:	4548      	cmp	r0, r9
 801b01c:	460c      	mov	r4, r1
 801b01e:	d240      	bcs.n	801b0a2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b020:	f04f 0a04 	mov.w	sl, #4
 801b024:	7824      	ldrb	r4, [r4, #0]
 801b026:	2fff      	cmp	r7, #255	@ 0xff
 801b028:	f101 0101 	add.w	r1, r1, #1
 801b02c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801b030:	eb06 0a04 	add.w	sl, r6, r4
 801b034:	f816 b004 	ldrb.w	fp, [r6, r4]
 801b038:	d02b      	beq.n	801b092 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801b03a:	7804      	ldrb	r4, [r0, #0]
 801b03c:	fb14 f405 	smulbb	r4, r4, r5
 801b040:	fb0b 440c 	mla	r4, fp, ip, r4
 801b044:	b2a4      	uxth	r4, r4
 801b046:	f104 0b01 	add.w	fp, r4, #1
 801b04a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b04e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b052:	fb1b fb05 	smulbb	fp, fp, r5
 801b056:	1224      	asrs	r4, r4, #8
 801b058:	7004      	strb	r4, [r0, #0]
 801b05a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b05e:	fb04 b40c 	mla	r4, r4, ip, fp
 801b062:	b2a4      	uxth	r4, r4
 801b064:	f104 0b01 	add.w	fp, r4, #1
 801b068:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b06c:	1224      	asrs	r4, r4, #8
 801b06e:	7044      	strb	r4, [r0, #1]
 801b070:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b074:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b078:	fb1a fa05 	smulbb	sl, sl, r5
 801b07c:	fb04 a40c 	mla	r4, r4, ip, sl
 801b080:	b2a4      	uxth	r4, r4
 801b082:	f104 0a01 	add.w	sl, r4, #1
 801b086:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b08a:	1224      	asrs	r4, r4, #8
 801b08c:	7084      	strb	r4, [r0, #2]
 801b08e:	3003      	adds	r0, #3
 801b090:	e7c3      	b.n	801b01a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801b092:	f880 b000 	strb.w	fp, [r0]
 801b096:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b09a:	7044      	strb	r4, [r0, #1]
 801b09c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b0a0:	e7f4      	b.n	801b08c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801b0a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b0a4:	4420      	add	r0, r4
 801b0a6:	188c      	adds	r4, r1, r2
 801b0a8:	e7b2      	b.n	801b010 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801b0aa:	4b03      	ldr	r3, [pc, #12]	@ (801b0b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801b0ac:	6818      	ldr	r0, [r3, #0]
 801b0ae:	6803      	ldr	r3, [r0, #0]
 801b0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0b2:	4798      	blx	r3
 801b0b4:	e785      	b.n	801afc2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801b0b6:	bf00      	nop
 801b0b8:	2402526c 	.word	0x2402526c
 801b0bc:	24025266 	.word	0x24025266

0801b0c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b0c0:	b4f0      	push	{r4, r5, r6, r7}
 801b0c2:	460c      	mov	r4, r1
 801b0c4:	4611      	mov	r1, r2
 801b0c6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b0ca:	461a      	mov	r2, r3
 801b0cc:	780f      	ldrb	r7, [r1, #0]
 801b0ce:	9b04      	ldr	r3, [sp, #16]
 801b0d0:	784e      	ldrb	r6, [r1, #1]
 801b0d2:	b11f      	cbz	r7, 801b0dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801b0d4:	2f01      	cmp	r7, #1
 801b0d6:	d01d      	beq.n	801b114 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801b0d8:	bcf0      	pop	{r4, r5, r6, r7}
 801b0da:	4770      	bx	lr
 801b0dc:	2e03      	cmp	r6, #3
 801b0de:	d8fb      	bhi.n	801b0d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b0e0:	e8df f006 	tbb	[pc, r6]
 801b0e4:	16140702 	.word	0x16140702
 801b0e8:	9504      	str	r5, [sp, #16]
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	bcf0      	pop	{r4, r5, r6, r7}
 801b0ee:	f7ff be33 	b.w	801ad58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b0f2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	d0ef      	beq.n	801b0d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b0f8:	6806      	ldr	r6, [r0, #0]
 801b0fa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b0fe:	68f5      	ldr	r5, [r6, #12]
 801b100:	4613      	mov	r3, r2
 801b102:	46ac      	mov	ip, r5
 801b104:	460a      	mov	r2, r1
 801b106:	4621      	mov	r1, r4
 801b108:	bcf0      	pop	{r4, r5, r6, r7}
 801b10a:	4760      	bx	ip
 801b10c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b10e:	e7f1      	b.n	801b0f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b110:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b112:	e7ef      	b.n	801b0f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b114:	2e03      	cmp	r6, #3
 801b116:	d8df      	bhi.n	801b0d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b118:	e8df f006 	tbb	[pc, r6]
 801b11c:	110f0702 	.word	0x110f0702
 801b120:	9504      	str	r5, [sp, #16]
 801b122:	4620      	mov	r0, r4
 801b124:	bcf0      	pop	{r4, r5, r6, r7}
 801b126:	f7ff beef 	b.w	801af08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b12a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b12c:	2800      	cmp	r0, #0
 801b12e:	d0d3      	beq.n	801b0d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b130:	6806      	ldr	r6, [r0, #0]
 801b132:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b136:	68b5      	ldr	r5, [r6, #8]
 801b138:	e7e2      	b.n	801b100 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801b13a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b13c:	e7f6      	b.n	801b12c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801b13e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b140:	e7f4      	b.n	801b12c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801b144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801b144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b148:	4605      	mov	r5, r0
 801b14a:	b08f      	sub	sp, #60	@ 0x3c
 801b14c:	460c      	mov	r4, r1
 801b14e:	461f      	mov	r7, r3
 801b150:	2b00      	cmp	r3, #0
 801b152:	d052      	beq.n	801b1fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b154:	6808      	ldr	r0, [r1, #0]
 801b156:	ab0a      	add	r3, sp, #40	@ 0x28
 801b158:	6849      	ldr	r1, [r1, #4]
 801b15a:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801b324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801b15e:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801b328 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801b162:	c303      	stmia	r3!, {r0, r1}
 801b164:	6810      	ldr	r0, [r2, #0]
 801b166:	ab0c      	add	r3, sp, #48	@ 0x30
 801b168:	6851      	ldr	r1, [r2, #4]
 801b16a:	c303      	stmia	r3!, {r0, r1}
 801b16c:	a80a      	add	r0, sp, #40	@ 0x28
 801b16e:	f7f7 ff55 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b172:	4621      	mov	r1, r4
 801b174:	a80c      	add	r0, sp, #48	@ 0x30
 801b176:	f7f7 ff95 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b17a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b17e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b182:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b186:	f8d8 0000 	ldr.w	r0, [r8]
 801b18a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b18e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801b192:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801b196:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801b19a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801b19e:	440a      	add	r2, r1
 801b1a0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b1a4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801b1a8:	4413      	add	r3, r2
 801b1aa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b1ae:	6803      	ldr	r3, [r0, #0]
 801b1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b1b2:	4798      	blx	r3
 801b1b4:	2fff      	cmp	r7, #255	@ 0xff
 801b1b6:	d023      	beq.n	801b200 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801b1b8:	f010 0f04 	tst.w	r0, #4
 801b1bc:	f8d8 0000 	ldr.w	r0, [r8]
 801b1c0:	d021      	beq.n	801b206 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801b1c2:	2100      	movs	r1, #0
 801b1c4:	f04f 0e01 	mov.w	lr, #1
 801b1c8:	f8d0 c000 	ldr.w	ip, [r0]
 801b1cc:	b2a4      	uxth	r4, r4
 801b1ce:	9106      	str	r1, [sp, #24]
 801b1d0:	b2b6      	uxth	r6, r6
 801b1d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801b1d6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801b1da:	e9cd e107 	strd	lr, r1, [sp, #28]
 801b1de:	f8b9 e000 	ldrh.w	lr, [r9]
 801b1e2:	9703      	str	r7, [sp, #12]
 801b1e4:	9401      	str	r4, [sp, #4]
 801b1e6:	9600      	str	r6, [sp, #0]
 801b1e8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801b1ec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b1f0:	9102      	str	r1, [sp, #8]
 801b1f2:	4629      	mov	r1, r5
 801b1f4:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801b1f8:	47a0      	blx	r4
 801b1fa:	b00f      	add	sp, #60	@ 0x3c
 801b1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b200:	f010 0f01 	tst.w	r0, #1
 801b204:	e7da      	b.n	801b1bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801b206:	6803      	ldr	r3, [r0, #0]
 801b208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b20a:	4798      	blx	r3
 801b20c:	f8b9 1000 	ldrh.w	r1, [r9]
 801b210:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b214:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801b218:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b21c:	434c      	muls	r4, r1
 801b21e:	2fff      	cmp	r7, #255	@ 0xff
 801b220:	fb01 2303 	mla	r3, r1, r3, r2
 801b224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b228:	eba1 0106 	sub.w	r1, r1, r6
 801b22c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b234:	4418      	add	r0, r3
 801b236:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801b23a:	eba3 0606 	sub.w	r6, r3, r6
 801b23e:	4404      	add	r4, r0
 801b240:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801b244:	d04a      	beq.n	801b2dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801b246:	43fa      	mvns	r2, r7
 801b248:	b2bb      	uxth	r3, r7
 801b24a:	b2d7      	uxtb	r7, r2
 801b24c:	42a0      	cmp	r0, r4
 801b24e:	d263      	bcs.n	801b318 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b250:	eb00 0e0c 	add.w	lr, r0, ip
 801b254:	4586      	cmp	lr, r0
 801b256:	f100 0803 	add.w	r8, r0, #3
 801b25a:	d93a      	bls.n	801b2d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801b25c:	f835 2b02 	ldrh.w	r2, [r5], #2
 801b260:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801b264:	00d0      	lsls	r0, r2, #3
 801b266:	fb19 f907 	smulbb	r9, r9, r7
 801b26a:	b2c0      	uxtb	r0, r0
 801b26c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b270:	fb00 9003 	mla	r0, r0, r3, r9
 801b274:	b280      	uxth	r0, r0
 801b276:	f100 0901 	add.w	r9, r0, #1
 801b27a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b27e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801b282:	fb19 f907 	smulbb	r9, r9, r7
 801b286:	1200      	asrs	r0, r0, #8
 801b288:	f808 0c03 	strb.w	r0, [r8, #-3]
 801b28c:	10d0      	asrs	r0, r2, #3
 801b28e:	1212      	asrs	r2, r2, #8
 801b290:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801b294:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801b298:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801b29c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b2a0:	fb00 9003 	mla	r0, r0, r3, r9
 801b2a4:	b280      	uxth	r0, r0
 801b2a6:	f100 0901 	add.w	r9, r0, #1
 801b2aa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b2ae:	1200      	asrs	r0, r0, #8
 801b2b0:	f808 0c02 	strb.w	r0, [r8, #-2]
 801b2b4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801b2b8:	fb10 f007 	smulbb	r0, r0, r7
 801b2bc:	fb02 0203 	mla	r2, r2, r3, r0
 801b2c0:	b292      	uxth	r2, r2
 801b2c2:	1c50      	adds	r0, r2, #1
 801b2c4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b2c8:	4640      	mov	r0, r8
 801b2ca:	1212      	asrs	r2, r2, #8
 801b2cc:	f808 2c01 	strb.w	r2, [r8, #-1]
 801b2d0:	e7c0      	b.n	801b254 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801b2d2:	4408      	add	r0, r1
 801b2d4:	4435      	add	r5, r6
 801b2d6:	e7b9      	b.n	801b24c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801b2d8:	4408      	add	r0, r1
 801b2da:	4435      	add	r5, r6
 801b2dc:	42a0      	cmp	r0, r4
 801b2de:	d21b      	bcs.n	801b318 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b2e0:	eb00 070c 	add.w	r7, r0, ip
 801b2e4:	42b8      	cmp	r0, r7
 801b2e6:	d2f7      	bcs.n	801b2d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801b2e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 801b2ec:	3003      	adds	r0, #3
 801b2ee:	00da      	lsls	r2, r3, #3
 801b2f0:	b2d2      	uxtb	r2, r2
 801b2f2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b2f6:	f800 2c03 	strb.w	r2, [r0, #-3]
 801b2fa:	10da      	asrs	r2, r3, #3
 801b2fc:	121b      	asrs	r3, r3, #8
 801b2fe:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801b302:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b306:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b30a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b30e:	f800 2c02 	strb.w	r2, [r0, #-2]
 801b312:	f800 3c01 	strb.w	r3, [r0, #-1]
 801b316:	e7e5      	b.n	801b2e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801b318:	4b02      	ldr	r3, [pc, #8]	@ (801b324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801b31a:	6818      	ldr	r0, [r3, #0]
 801b31c:	6803      	ldr	r3, [r0, #0]
 801b31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b320:	4798      	blx	r3
 801b322:	e76a      	b.n	801b1fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b324:	2402526c 	.word	0x2402526c
 801b328:	24025266 	.word	0x24025266

0801b32c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b330:	b08a      	sub	sp, #40	@ 0x28
 801b332:	460d      	mov	r5, r1
 801b334:	4604      	mov	r4, r0
 801b336:	461e      	mov	r6, r3
 801b338:	6808      	ldr	r0, [r1, #0]
 801b33a:	ab06      	add	r3, sp, #24
 801b33c:	6849      	ldr	r1, [r1, #4]
 801b33e:	4f5d      	ldr	r7, [pc, #372]	@ (801b4b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801b340:	c303      	stmia	r3!, {r0, r1}
 801b342:	6810      	ldr	r0, [r2, #0]
 801b344:	ab08      	add	r3, sp, #32
 801b346:	6851      	ldr	r1, [r2, #4]
 801b348:	c303      	stmia	r3!, {r0, r1}
 801b34a:	a806      	add	r0, sp, #24
 801b34c:	f7f7 fe66 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b350:	4629      	mov	r1, r5
 801b352:	a808      	add	r0, sp, #32
 801b354:	f7f7 fea6 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b358:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b35c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b360:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b364:	6838      	ldr	r0, [r7, #0]
 801b366:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b36a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801b36e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801b372:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b376:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b37a:	440a      	add	r2, r1
 801b37c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b380:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b384:	4413      	add	r3, r2
 801b386:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b38a:	6803      	ldr	r3, [r0, #0]
 801b38c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b38e:	4798      	blx	r3
 801b390:	2eff      	cmp	r6, #255	@ 0xff
 801b392:	d119      	bne.n	801b3c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b394:	f010 0f20 	tst.w	r0, #32
 801b398:	6838      	ldr	r0, [r7, #0]
 801b39a:	d018      	beq.n	801b3ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b39c:	b2ad      	uxth	r5, r5
 801b39e:	2700      	movs	r7, #0
 801b3a0:	6801      	ldr	r1, [r0, #0]
 801b3a2:	9501      	str	r5, [sp, #4]
 801b3a4:	fa1f f588 	uxth.w	r5, r8
 801b3a8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801b3ac:	9500      	str	r5, [sp, #0]
 801b3ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b3b2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801b3b6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b3ba:	9602      	str	r6, [sp, #8]
 801b3bc:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801b3be:	4621      	mov	r1, r4
 801b3c0:	47a8      	blx	r5
 801b3c2:	b00a      	add	sp, #40	@ 0x28
 801b3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3c8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801b3cc:	e7e4      	b.n	801b398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801b3ce:	6803      	ldr	r3, [r0, #0]
 801b3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3d2:	4798      	blx	r3
 801b3d4:	4b38      	ldr	r3, [pc, #224]	@ (801b4b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801b3d6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b3da:	f8b3 c000 	ldrh.w	ip, [r3]
 801b3de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b3e2:	fb0c f505 	mul.w	r5, ip, r5
 801b3e6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801b3ea:	fb0c 2303 	mla	r3, ip, r3, r2
 801b3ee:	ebac 0c08 	sub.w	ip, ip, r8
 801b3f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3f6:	ebae 0e08 	sub.w	lr, lr, r8
 801b3fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b402:	4418      	add	r0, r3
 801b404:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b408:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b40c:	4405      	add	r5, r0
 801b40e:	42a8      	cmp	r0, r5
 801b410:	d24a      	bcs.n	801b4a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801b412:	eb00 0803 	add.w	r8, r0, r3
 801b416:	4540      	cmp	r0, r8
 801b418:	d243      	bcs.n	801b4a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801b41a:	78e2      	ldrb	r2, [r4, #3]
 801b41c:	b15a      	cbz	r2, 801b436 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b41e:	2aff      	cmp	r2, #255	@ 0xff
 801b420:	f894 9000 	ldrb.w	r9, [r4]
 801b424:	d10a      	bne.n	801b43c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b426:	2eff      	cmp	r6, #255	@ 0xff
 801b428:	d108      	bne.n	801b43c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b42a:	f880 9000 	strb.w	r9, [r0]
 801b42e:	7862      	ldrb	r2, [r4, #1]
 801b430:	7042      	strb	r2, [r0, #1]
 801b432:	78a2      	ldrb	r2, [r4, #2]
 801b434:	7082      	strb	r2, [r0, #2]
 801b436:	3003      	adds	r0, #3
 801b438:	3404      	adds	r4, #4
 801b43a:	e7ec      	b.n	801b416 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801b43c:	4372      	muls	r2, r6
 801b43e:	1c51      	adds	r1, r2, #1
 801b440:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801b444:	1209      	asrs	r1, r1, #8
 801b446:	fa1f fa81 	uxth.w	sl, r1
 801b44a:	43c9      	mvns	r1, r1
 801b44c:	fb19 f90a 	smulbb	r9, r9, sl
 801b450:	b2ca      	uxtb	r2, r1
 801b452:	7801      	ldrb	r1, [r0, #0]
 801b454:	fb01 9902 	mla	r9, r1, r2, r9
 801b458:	fa1f f989 	uxth.w	r9, r9
 801b45c:	f109 0101 	add.w	r1, r9, #1
 801b460:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801b464:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b468:	f880 9000 	strb.w	r9, [r0]
 801b46c:	f890 9001 	ldrb.w	r9, [r0, #1]
 801b470:	7861      	ldrb	r1, [r4, #1]
 801b472:	fb19 f902 	smulbb	r9, r9, r2
 801b476:	fb01 910a 	mla	r1, r1, sl, r9
 801b47a:	b289      	uxth	r1, r1
 801b47c:	f101 0901 	add.w	r9, r1, #1
 801b480:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801b484:	1209      	asrs	r1, r1, #8
 801b486:	7041      	strb	r1, [r0, #1]
 801b488:	7881      	ldrb	r1, [r0, #2]
 801b48a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801b48e:	fb11 f202 	smulbb	r2, r1, r2
 801b492:	fb09 220a 	mla	r2, r9, sl, r2
 801b496:	b292      	uxth	r2, r2
 801b498:	1c51      	adds	r1, r2, #1
 801b49a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b49e:	1212      	asrs	r2, r2, #8
 801b4a0:	e7c8      	b.n	801b434 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801b4a2:	4460      	add	r0, ip
 801b4a4:	4474      	add	r4, lr
 801b4a6:	e7b2      	b.n	801b40e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801b4a8:	6838      	ldr	r0, [r7, #0]
 801b4aa:	6803      	ldr	r3, [r0, #0]
 801b4ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b4ae:	4798      	blx	r3
 801b4b0:	e787      	b.n	801b3c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b4b2:	bf00      	nop
 801b4b4:	2402526c 	.word	0x2402526c
 801b4b8:	24025266 	.word	0x24025266

0801b4bc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b4c0:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801b4c4:	4607      	mov	r7, r0
 801b4c6:	460c      	mov	r4, r1
 801b4c8:	4692      	mov	sl, r2
 801b4ca:	4699      	mov	r9, r3
 801b4cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b4ce:	b335      	cbz	r5, 801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b4d0:	4608      	mov	r0, r1
 801b4d2:	f7fb fd93 	bl	8016ffc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b4d6:	4680      	mov	r8, r0
 801b4d8:	4620      	mov	r0, r4
 801b4da:	f7fb fdc3 	bl	8017064 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b4de:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f8ad a008 	strh.w	sl, [sp, #8]
 801b4e8:	f8ad 900a 	strh.w	r9, [sp, #10]
 801b4ec:	f8ad 800c 	strh.w	r8, [sp, #12]
 801b4f0:	f7fb fefa 	bl	80172e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b4f4:	2810      	cmp	r0, #16
 801b4f6:	d812      	bhi.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b4f8:	e8df f000 	tbb	[pc, r0]
 801b4fc:	11092d24 	.word	0x11092d24
 801b500:	11111111 	.word	0x11111111
 801b504:	14111111 	.word	0x14111111
 801b508:	4c111111 	.word	0x4c111111
 801b50c:	3c          	.byte	0x3c
 801b50d:	00          	.byte	0x00
 801b50e:	4620      	mov	r0, r4
 801b510:	f7fb fe66 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b514:	462b      	mov	r3, r5
 801b516:	4632      	mov	r2, r6
 801b518:	a902      	add	r1, sp, #8
 801b51a:	f7ff ff07 	bl	801b32c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b51e:	b004      	add	sp, #16
 801b520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b524:	4620      	mov	r0, r4
 801b526:	f7fb fe5b 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b52a:	4680      	mov	r8, r0
 801b52c:	4620      	mov	r0, r4
 801b52e:	f7fb fe87 	bl	8017240 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b532:	ab02      	add	r3, sp, #8
 801b534:	4602      	mov	r2, r0
 801b536:	4641      	mov	r1, r8
 801b538:	4638      	mov	r0, r7
 801b53a:	e9cd 6500 	strd	r6, r5, [sp]
 801b53e:	f7ff fdbf 	bl	801b0c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b542:	e7ec      	b.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b544:	4620      	mov	r0, r4
 801b546:	f7fb fe4b 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b54a:	462b      	mov	r3, r5
 801b54c:	4632      	mov	r2, r6
 801b54e:	a902      	add	r1, sp, #8
 801b550:	f7ff fdf8 	bl	801b144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b554:	e7e3      	b.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b556:	683b      	ldr	r3, [r7, #0]
 801b558:	4620      	mov	r0, r4
 801b55a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b55e:	f7fb fe3f 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b562:	2300      	movs	r3, #0
 801b564:	4601      	mov	r1, r0
 801b566:	aa02      	add	r2, sp, #8
 801b568:	4638      	mov	r0, r7
 801b56a:	e9cd 5300 	strd	r5, r3, [sp]
 801b56e:	4633      	mov	r3, r6
 801b570:	47c0      	blx	r8
 801b572:	e7d4      	b.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b574:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801b576:	2f00      	cmp	r7, #0
 801b578:	d0d1      	beq.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801b580:	4620      	mov	r0, r4
 801b582:	f7fb fe2d 	bl	80171e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b586:	9500      	str	r5, [sp, #0]
 801b588:	4601      	mov	r1, r0
 801b58a:	4633      	mov	r3, r6
 801b58c:	aa02      	add	r2, sp, #8
 801b58e:	4638      	mov	r0, r7
 801b590:	47c0      	blx	r8
 801b592:	e7c4      	b.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b594:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801b596:	2f00      	cmp	r7, #0
 801b598:	d0c1      	beq.n	801b51e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b5a0:	e7ee      	b.n	801b580 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801b5a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b5a2:	b4f0      	push	{r4, r5, r6, r7}
 801b5a4:	4616      	mov	r6, r2
 801b5a6:	461c      	mov	r4, r3
 801b5a8:	460d      	mov	r5, r1
 801b5aa:	9a04      	ldr	r2, [sp, #16]
 801b5ac:	2e01      	cmp	r6, #1
 801b5ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b5b2:	d00e      	beq.n	801b5d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801b5b4:	d303      	bcc.n	801b5be <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801b5b6:	2e02      	cmp	r6, #2
 801b5b8:	d006      	beq.n	801b5c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801b5ba:	bcf0      	pop	{r4, r5, r6, r7}
 801b5bc:	4770      	bx	lr
 801b5be:	4621      	mov	r1, r4
 801b5c0:	4628      	mov	r0, r5
 801b5c2:	bcf0      	pop	{r4, r5, r6, r7}
 801b5c4:	f7ff bdbe 	b.w	801b144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b5c8:	4621      	mov	r1, r4
 801b5ca:	4628      	mov	r0, r5
 801b5cc:	bcf0      	pop	{r4, r5, r6, r7}
 801b5ce:	f7ff bead 	b.w	801b32c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b5d2:	6805      	ldr	r5, [r0, #0]
 801b5d4:	2600      	movs	r6, #0
 801b5d6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b5da:	68ed      	ldr	r5, [r5, #12]
 801b5dc:	4613      	mov	r3, r2
 801b5de:	4622      	mov	r2, r4
 801b5e0:	46ac      	mov	ip, r5
 801b5e2:	bcf0      	pop	{r4, r5, r6, r7}
 801b5e4:	4760      	bx	ip
	...

0801b5e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b5e8:	b160      	cbz	r0, 801b604 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801b5ea:	2903      	cmp	r1, #3
 801b5ec:	d818      	bhi.n	801b620 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b5ee:	e8df f001 	tbb	[pc, r1]
 801b5f2:	1902      	.short	0x1902
 801b5f4:	1b06      	.short	0x1b06
 801b5f6:	4b0e      	ldr	r3, [pc, #56]	@ (801b630 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b5f8:	8818      	ldrh	r0, [r3, #0]
 801b5fa:	4240      	negs	r0, r0
 801b5fc:	4770      	bx	lr
 801b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (801b630 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b600:	8818      	ldrh	r0, [r3, #0]
 801b602:	4770      	bx	lr
 801b604:	2903      	cmp	r1, #3
 801b606:	d80b      	bhi.n	801b620 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b608:	a301      	add	r3, pc, #4	@ (adr r3, 801b610 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801b60a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b60e:	bf00      	nop
 801b610:	0801b625 	.word	0x0801b625
 801b614:	0801b5ff 	.word	0x0801b5ff
 801b618:	0801b629 	.word	0x0801b629
 801b61c:	0801b5f7 	.word	0x0801b5f7
 801b620:	2000      	movs	r0, #0
 801b622:	4770      	bx	lr
 801b624:	2001      	movs	r0, #1
 801b626:	4770      	bx	lr
 801b628:	f04f 30ff 	mov.w	r0, #4294967295
 801b62c:	4770      	bx	lr
 801b62e:	bf00      	nop
 801b630:	24025266 	.word	0x24025266

0801b634 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b634:	b160      	cbz	r0, 801b650 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801b636:	2903      	cmp	r1, #3
 801b638:	d818      	bhi.n	801b66c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b63a:	e8df f001 	tbb	[pc, r1]
 801b63e:	0219      	.short	0x0219
 801b640:	051b      	.short	0x051b
 801b642:	4b0e      	ldr	r3, [pc, #56]	@ (801b67c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b644:	8818      	ldrh	r0, [r3, #0]
 801b646:	4770      	bx	lr
 801b648:	4b0c      	ldr	r3, [pc, #48]	@ (801b67c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b64a:	8818      	ldrh	r0, [r3, #0]
 801b64c:	4240      	negs	r0, r0
 801b64e:	4770      	bx	lr
 801b650:	2903      	cmp	r1, #3
 801b652:	d80b      	bhi.n	801b66c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b654:	a301      	add	r3, pc, #4	@ (adr r3, 801b65c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801b656:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b65a:	bf00      	nop
 801b65c:	0801b643 	.word	0x0801b643
 801b660:	0801b675 	.word	0x0801b675
 801b664:	0801b649 	.word	0x0801b649
 801b668:	0801b671 	.word	0x0801b671
 801b66c:	2000      	movs	r0, #0
 801b66e:	4770      	bx	lr
 801b670:	2001      	movs	r0, #1
 801b672:	4770      	bx	lr
 801b674:	f04f 30ff 	mov.w	r0, #4294967295
 801b678:	4770      	bx	lr
 801b67a:	bf00      	nop
 801b67c:	24025266 	.word	0x24025266

0801b680 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b684:	b097      	sub	sp, #92	@ 0x5c
 801b686:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b688:	a912      	add	r1, sp, #72	@ 0x48
 801b68a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801b68e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801b692:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801b696:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801b69a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801b69e:	e881 000c 	stmia.w	r1, {r2, r3}
 801b6a2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801b6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801b6a8:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801b6ac:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801b6b0:	9311      	str	r3, [sp, #68]	@ 0x44
 801b6b2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801b6b6:	798d      	ldrb	r5, [r1, #6]
 801b6b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801b6ba:	7b4b      	ldrb	r3, [r1, #13]
 801b6bc:	0158      	lsls	r0, r3, #5
 801b6be:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801b6c2:	4328      	orrs	r0, r5
 801b6c4:	9009      	str	r0, [sp, #36]	@ 0x24
 801b6c6:	f000 817c 	beq.w	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b6ca:	011b      	lsls	r3, r3, #4
 801b6cc:	79c8      	ldrb	r0, [r1, #7]
 801b6ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b6d2:	4303      	orrs	r3, r0
 801b6d4:	930e      	str	r3, [sp, #56]	@ 0x38
 801b6d6:	f000 8174 	beq.w	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b6da:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b6de:	b29b      	uxth	r3, r3
 801b6e0:	2f00      	cmp	r7, #0
 801b6e2:	f000 8116 	beq.w	801b912 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801b6e6:	1aff      	subs	r7, r7, r3
 801b6e8:	b2bf      	uxth	r7, r7
 801b6ea:	043b      	lsls	r3, r7, #16
 801b6ec:	d502      	bpl.n	801b6f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b6ee:	1bf6      	subs	r6, r6, r7
 801b6f0:	2700      	movs	r7, #0
 801b6f2:	b236      	sxth	r6, r6
 801b6f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b6f8:	a812      	add	r0, sp, #72	@ 0x48
 801b6fa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801b6fe:	428e      	cmp	r6, r1
 801b700:	b28b      	uxth	r3, r1
 801b702:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801b706:	bfbf      	itttt	lt
 801b708:	18ff      	addlt	r7, r7, r3
 801b70a:	1bbe      	sublt	r6, r7, r6
 801b70c:	b2b7      	uxthlt	r7, r6
 801b70e:	460e      	movlt	r6, r1
 801b710:	8891      	ldrh	r1, [r2, #4]
 801b712:	440b      	add	r3, r1
 801b714:	4631      	mov	r1, r6
 801b716:	b21b      	sxth	r3, r3
 801b718:	9310      	str	r3, [sp, #64]	@ 0x40
 801b71a:	88d3      	ldrh	r3, [r2, #6]
 801b71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b71e:	449a      	add	sl, r3
 801b720:	fa0f f38a 	sxth.w	r3, sl
 801b724:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801b728:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b72a:	4bb5      	ldr	r3, [pc, #724]	@ (801ba00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801b72c:	f893 b000 	ldrb.w	fp, [r3]
 801b730:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b734:	f1dc 0300 	rsbs	r3, ip, #0
 801b738:	eb43 030c 	adc.w	r3, r3, ip
 801b73c:	930d      	str	r3, [sp, #52]	@ 0x34
 801b73e:	464b      	mov	r3, r9
 801b740:	f7f7 fae1 	bl	8012d06 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b744:	4631      	mov	r1, r6
 801b746:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801b74a:	464b      	mov	r3, r9
 801b74c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b74e:	a812      	add	r0, sp, #72	@ 0x48
 801b750:	f7f7 faf6 	bl	8012d40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b754:	a916      	add	r1, sp, #88	@ 0x58
 801b756:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b75a:	a815      	add	r0, sp, #84	@ 0x54
 801b75c:	f7f7 fc1c 	bl	8012f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b760:	f1b9 0f00 	cmp.w	r9, #0
 801b764:	f040 80d8 	bne.w	801b918 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801b768:	f1bb 0f01 	cmp.w	fp, #1
 801b76c:	f040 80dc 	bne.w	801b928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b770:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b772:	b153      	cbz	r3, 801b78a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801b774:	2508      	movs	r5, #8
 801b776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b778:	fb95 f3f8 	sdiv	r3, r5, r8
 801b77c:	1e5d      	subs	r5, r3, #1
 801b77e:	4415      	add	r5, r2
 801b780:	fb95 f5f3 	sdiv	r5, r5, r3
 801b784:	fb15 f503 	smulbb	r5, r5, r3
 801b788:	b2ad      	uxth	r5, r5
 801b78a:	b907      	cbnz	r7, 801b78e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b78c:	b16c      	cbz	r4, 801b7aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801b78e:	fb04 7305 	mla	r3, r4, r5, r7
 801b792:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b794:	ebaa 0a04 	sub.w	sl, sl, r4
 801b798:	fb08 f303 	mul.w	r3, r8, r3
 801b79c:	fa1f fa8a 	uxth.w	sl, sl
 801b7a0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801b7a4:	f003 0407 	and.w	r4, r3, #7
 801b7a8:	9226      	str	r2, [sp, #152]	@ 0x98
 801b7aa:	4649      	mov	r1, r9
 801b7ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b7ae:	f7ff ff1b 	bl	801b5e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801b7b2:	4683      	mov	fp, r0
 801b7b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b7b6:	f7ff ff3d 	bl	801b634 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801b7ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b7bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7be:	4681      	mov	r9, r0
 801b7c0:	1a9b      	subs	r3, r3, r2
 801b7c2:	459a      	cmp	sl, r3
 801b7c4:	bfa8      	it	ge
 801b7c6:	469a      	movge	sl, r3
 801b7c8:	f1ba 0f00 	cmp.w	sl, #0
 801b7cc:	f340 80f9 	ble.w	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b7d0:	1bf6      	subs	r6, r6, r7
 801b7d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b7d4:	1b9e      	subs	r6, r3, r6
 801b7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7d8:	429e      	cmp	r6, r3
 801b7da:	bfd4      	ite	le
 801b7dc:	ebc7 0706 	rsble	r7, r7, r6
 801b7e0:	ebc7 0703 	rsbgt	r7, r7, r3
 801b7e4:	2f00      	cmp	r7, #0
 801b7e6:	f340 80ec 	ble.w	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b7ea:	1bed      	subs	r5, r5, r7
 801b7ec:	fb08 f305 	mul.w	r3, r8, r5
 801b7f0:	930d      	str	r3, [sp, #52]	@ 0x34
 801b7f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b7f4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b7f8:	930e      	str	r3, [sp, #56]	@ 0x38
 801b7fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b7fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b800:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b802:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b804:	b2db      	uxtb	r3, r3
 801b806:	9310      	str	r3, [sp, #64]	@ 0x40
 801b808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	f040 80de 	bne.w	801b9cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801b810:	4b7c      	ldr	r3, [pc, #496]	@ (801ba04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801b812:	6818      	ldr	r0, [r3, #0]
 801b814:	6803      	ldr	r3, [r0, #0]
 801b816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b818:	4798      	blx	r3
 801b81a:	2301      	movs	r3, #1
 801b81c:	4a7a      	ldr	r2, [pc, #488]	@ (801ba08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801b81e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801b822:	fb07 9b1b 	mls	fp, r7, fp, r9
 801b826:	fa03 f308 	lsl.w	r3, r3, r8
 801b82a:	8811      	ldrh	r1, [r2, #0]
 801b82c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801b830:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801b834:	3b01      	subs	r3, #1
 801b836:	fb06 bb07 	mla	fp, r6, r7, fp
 801b83a:	b2db      	uxtb	r3, r3
 801b83c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b83e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801b842:	fb01 2303 	mla	r3, r1, r3, r2
 801b846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b84a:	18c3      	adds	r3, r0, r3
 801b84c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b84e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b850:	781a      	ldrb	r2, [r3, #0]
 801b852:	4122      	asrs	r2, r4
 801b854:	b2d2      	uxtb	r2, r2
 801b856:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b85a:	f0c0 80d7 	bcc.w	801ba0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801b85e:	46be      	mov	lr, r7
 801b860:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b862:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b866:	f0c0 80ba 	bcc.w	801b9de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801b86a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b86c:	4013      	ands	r3, r2
 801b86e:	d041      	beq.n	801b8f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b870:	20ff      	movs	r0, #255	@ 0xff
 801b872:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b874:	fb90 f5f5 	sdiv	r5, r0, r5
 801b878:	436b      	muls	r3, r5
 801b87a:	2bfe      	cmp	r3, #254	@ 0xfe
 801b87c:	dd03      	ble.n	801b886 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801b87e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b880:	4285      	cmp	r5, r0
 801b882:	f000 80a5 	beq.w	801b9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801b886:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b888:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b88a:	fb15 f303 	smulbb	r3, r5, r3
 801b88e:	b29b      	uxth	r3, r3
 801b890:	1c5d      	adds	r5, r3, #1
 801b892:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801b896:	780d      	ldrb	r5, [r1, #0]
 801b898:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b89c:	fa1f fc83 	uxth.w	ip, r3
 801b8a0:	43db      	mvns	r3, r3
 801b8a2:	fb10 f90c 	smulbb	r9, r0, ip
 801b8a6:	b2db      	uxtb	r3, r3
 801b8a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b8aa:	fb05 9503 	mla	r5, r5, r3, r9
 801b8ae:	b2ad      	uxth	r5, r5
 801b8b0:	f105 0901 	add.w	r9, r5, #1
 801b8b4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b8b8:	fb10 f90c 	smulbb	r9, r0, ip
 801b8bc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b8be:	122d      	asrs	r5, r5, #8
 801b8c0:	fb10 fc0c 	smulbb	ip, r0, ip
 801b8c4:	700d      	strb	r5, [r1, #0]
 801b8c6:	784d      	ldrb	r5, [r1, #1]
 801b8c8:	fb05 9503 	mla	r5, r5, r3, r9
 801b8cc:	b2ad      	uxth	r5, r5
 801b8ce:	f105 0901 	add.w	r9, r5, #1
 801b8d2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b8d6:	122d      	asrs	r5, r5, #8
 801b8d8:	704d      	strb	r5, [r1, #1]
 801b8da:	788d      	ldrb	r5, [r1, #2]
 801b8dc:	fb05 cc03 	mla	ip, r5, r3, ip
 801b8e0:	fa1f fc8c 	uxth.w	ip, ip
 801b8e4:	f10c 0301 	add.w	r3, ip, #1
 801b8e8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b8ec:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b8f0:	f881 c002 	strb.w	ip, [r1, #2]
 801b8f4:	4444      	add	r4, r8
 801b8f6:	4431      	add	r1, r6
 801b8f8:	b2a4      	uxth	r4, r4
 801b8fa:	2c07      	cmp	r4, #7
 801b8fc:	bf89      	itett	hi
 801b8fe:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801b900:	fa42 f208 	asrls.w	r2, r2, r8
 801b904:	2400      	movhi	r4, #0
 801b906:	785a      	ldrbhi	r2, [r3, #1]
 801b908:	bf8a      	itet	hi
 801b90a:	3301      	addhi	r3, #1
 801b90c:	b2d2      	uxtbls	r2, r2
 801b90e:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801b910:	e7a7      	b.n	801b862 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801b912:	441e      	add	r6, r3
 801b914:	b236      	sxth	r6, r6
 801b916:	e6ed      	b.n	801b6f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b918:	f1b9 0f01 	cmp.w	r9, #1
 801b91c:	f47f af28 	bne.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b920:	f1bb 0f01 	cmp.w	fp, #1
 801b924:	f47f af24 	bne.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b928:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801ba04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801b92c:	f8db 0000 	ldr.w	r0, [fp]
 801b930:	6803      	ldr	r3, [r0, #0]
 801b932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b934:	4798      	blx	r3
 801b936:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801b93a:	465a      	mov	r2, fp
 801b93c:	d006      	beq.n	801b94c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b93e:	f1b8 0f04 	cmp.w	r8, #4
 801b942:	d141      	bne.n	801b9c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801b944:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b946:	3300      	adds	r3, #0
 801b948:	bf18      	it	ne
 801b94a:	2301      	movne	r3, #1
 801b94c:	0580      	lsls	r0, r0, #22
 801b94e:	d566      	bpl.n	801ba1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b950:	f1b8 0f08 	cmp.w	r8, #8
 801b954:	d163      	bne.n	801ba1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b956:	2b00      	cmp	r3, #0
 801b958:	bf0c      	ite	eq
 801b95a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801b95e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801b962:	2f00      	cmp	r7, #0
 801b964:	f47f af04 	bne.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b968:	2c00      	cmp	r4, #0
 801b96a:	f47f af01 	bne.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b970:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b972:	18f3      	adds	r3, r6, r3
 801b974:	4283      	cmp	r3, r0
 801b976:	f73f aefb 	bgt.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b97a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b97c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b97e:	4403      	add	r3, r0
 801b980:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b982:	4283      	cmp	r3, r0
 801b984:	f73f aef4 	bgt.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b988:	f1b8 0f08 	cmp.w	r8, #8
 801b98c:	6810      	ldr	r0, [r2, #0]
 801b98e:	f04f 0600 	mov.w	r6, #0
 801b992:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801b996:	bf18      	it	ne
 801b998:	3501      	addne	r5, #1
 801b99a:	6804      	ldr	r4, [r0, #0]
 801b99c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801b9a0:	bf18      	it	ne
 801b9a2:	f025 0501 	bicne.w	r5, r5, #1
 801b9a6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b9aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b9ac:	bf18      	it	ne
 801b9ae:	b2ad      	uxthne	r5, r5
 801b9b0:	9104      	str	r1, [sp, #16]
 801b9b2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801b9b4:	e9cd 5a00 	strd	r5, sl, [sp]
 801b9b8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b9bc:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801b9be:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801b9c0:	47a0      	blx	r4
 801b9c2:	b017      	add	sp, #92	@ 0x5c
 801b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	e7bf      	b.n	801b94c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b9cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b9ce:	e724      	b.n	801b81a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801b9d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b9d2:	700b      	strb	r3, [r1, #0]
 801b9d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b9d6:	704b      	strb	r3, [r1, #1]
 801b9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b9da:	708b      	strb	r3, [r1, #2]
 801b9dc:	e78a      	b.n	801b8f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b9e0:	b153      	cbz	r3, 801b9f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801b9e2:	441c      	add	r4, r3
 801b9e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b9e6:	b2a4      	uxth	r4, r4
 801b9e8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801b9ec:	f004 0407 	and.w	r4, r4, #7
 801b9f0:	781a      	ldrb	r2, [r3, #0]
 801b9f2:	9326      	str	r3, [sp, #152]	@ 0x98
 801b9f4:	4122      	asrs	r2, r4
 801b9f6:	b2d2      	uxtb	r2, r2
 801b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9fa:	445b      	add	r3, fp
 801b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9fe:	e72a      	b.n	801b856 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801ba00:	24025264 	.word	0x24025264
 801ba04:	2402526c 	.word	0x2402526c
 801ba08:	24025266 	.word	0x24025266
 801ba0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d1d7      	bne.n	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ba12:	4b06      	ldr	r3, [pc, #24]	@ (801ba2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801ba14:	6818      	ldr	r0, [r3, #0]
 801ba16:	6803      	ldr	r3, [r0, #0]
 801ba18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ba1a:	4798      	blx	r3
 801ba1c:	e7d1      	b.n	801b9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	f43f aea6 	beq.w	801b770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ba28:	e79b      	b.n	801b962 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801ba2a:	bf00      	nop
 801ba2c:	2402526c 	.word	0x2402526c

0801ba30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ba30:	b538      	push	{r3, r4, r5, lr}
 801ba32:	4c15      	ldr	r4, [pc, #84]	@ (801ba88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ba34:	4605      	mov	r5, r0
 801ba36:	7823      	ldrb	r3, [r4, #0]
 801ba38:	f3bf 8f5b 	dmb	ish
 801ba3c:	07da      	lsls	r2, r3, #31
 801ba3e:	d40b      	bmi.n	801ba58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ba40:	4620      	mov	r0, r4
 801ba42:	f006 f8d8 	bl	8021bf6 <__cxa_guard_acquire>
 801ba46:	b138      	cbz	r0, 801ba58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ba48:	4620      	mov	r0, r4
 801ba4a:	f006 f8e0 	bl	8021c0e <__cxa_guard_release>
 801ba4e:	4a0f      	ldr	r2, [pc, #60]	@ (801ba8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ba50:	490f      	ldr	r1, [pc, #60]	@ (801ba90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ba52:	4810      	ldr	r0, [pc, #64]	@ (801ba94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ba54:	f006 f8c8 	bl	8021be8 <__aeabi_atexit>
 801ba58:	4c0f      	ldr	r4, [pc, #60]	@ (801ba98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ba5a:	7823      	ldrb	r3, [r4, #0]
 801ba5c:	f3bf 8f5b 	dmb	ish
 801ba60:	07db      	lsls	r3, r3, #31
 801ba62:	d40b      	bmi.n	801ba7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ba64:	4620      	mov	r0, r4
 801ba66:	f006 f8c6 	bl	8021bf6 <__cxa_guard_acquire>
 801ba6a:	b138      	cbz	r0, 801ba7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ba6c:	4620      	mov	r0, r4
 801ba6e:	f006 f8ce 	bl	8021c0e <__cxa_guard_release>
 801ba72:	4a06      	ldr	r2, [pc, #24]	@ (801ba8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ba74:	4909      	ldr	r1, [pc, #36]	@ (801ba9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ba76:	480a      	ldr	r0, [pc, #40]	@ (801baa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ba78:	f006 f8b6 	bl	8021be8 <__aeabi_atexit>
 801ba7c:	4b05      	ldr	r3, [pc, #20]	@ (801ba94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ba7e:	616b      	str	r3, [r5, #20]
 801ba80:	4b07      	ldr	r3, [pc, #28]	@ (801baa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ba82:	61ab      	str	r3, [r5, #24]
 801ba84:	bd38      	pop	{r3, r4, r5, pc}
 801ba86:	bf00      	nop
 801ba88:	24025350 	.word	0x24025350
 801ba8c:	24000000 	.word	0x24000000
 801ba90:	08018d21 	.word	0x08018d21
 801ba94:	240000c8 	.word	0x240000c8
 801ba98:	24025354 	.word	0x24025354
 801ba9c:	08018d1f 	.word	0x08018d1f
 801baa0:	240000cc 	.word	0x240000cc

0801baa4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801baa4:	b538      	push	{r3, r4, r5, lr}
 801baa6:	4c15      	ldr	r4, [pc, #84]	@ (801bafc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801baa8:	4605      	mov	r5, r0
 801baaa:	7823      	ldrb	r3, [r4, #0]
 801baac:	f3bf 8f5b 	dmb	ish
 801bab0:	07da      	lsls	r2, r3, #31
 801bab2:	d40b      	bmi.n	801bacc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bab4:	4620      	mov	r0, r4
 801bab6:	f006 f89e 	bl	8021bf6 <__cxa_guard_acquire>
 801baba:	b138      	cbz	r0, 801bacc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801babc:	4620      	mov	r0, r4
 801babe:	f006 f8a6 	bl	8021c0e <__cxa_guard_release>
 801bac2:	4a0f      	ldr	r2, [pc, #60]	@ (801bb00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bac4:	490f      	ldr	r1, [pc, #60]	@ (801bb04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bac6:	4810      	ldr	r0, [pc, #64]	@ (801bb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bac8:	f006 f88e 	bl	8021be8 <__aeabi_atexit>
 801bacc:	4c0f      	ldr	r4, [pc, #60]	@ (801bb0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bace:	7823      	ldrb	r3, [r4, #0]
 801bad0:	f3bf 8f5b 	dmb	ish
 801bad4:	07db      	lsls	r3, r3, #31
 801bad6:	d40b      	bmi.n	801baf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bad8:	4620      	mov	r0, r4
 801bada:	f006 f88c 	bl	8021bf6 <__cxa_guard_acquire>
 801bade:	b138      	cbz	r0, 801baf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bae0:	4620      	mov	r0, r4
 801bae2:	f006 f894 	bl	8021c0e <__cxa_guard_release>
 801bae6:	4a06      	ldr	r2, [pc, #24]	@ (801bb00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bae8:	4909      	ldr	r1, [pc, #36]	@ (801bb10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801baea:	480a      	ldr	r0, [pc, #40]	@ (801bb14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801baec:	f006 f87c 	bl	8021be8 <__aeabi_atexit>
 801baf0:	4b05      	ldr	r3, [pc, #20]	@ (801bb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801baf2:	60eb      	str	r3, [r5, #12]
 801baf4:	4b07      	ldr	r3, [pc, #28]	@ (801bb14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801baf6:	612b      	str	r3, [r5, #16]
 801baf8:	bd38      	pop	{r3, r4, r5, pc}
 801bafa:	bf00      	nop
 801bafc:	24025330 	.word	0x24025330
 801bb00:	24000000 	.word	0x24000000
 801bb04:	08018d25 	.word	0x08018d25
 801bb08:	240000a8 	.word	0x240000a8
 801bb0c:	24025334 	.word	0x24025334
 801bb10:	08018d23 	.word	0x08018d23
 801bb14:	240000ac 	.word	0x240000ac

0801bb18 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801bb18:	b510      	push	{r4, lr}
 801bb1a:	4604      	mov	r4, r0
 801bb1c:	f7ff ff88 	bl	801ba30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bb20:	4620      	mov	r0, r4
 801bb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb26:	f7ff bfbd 	b.w	801baa4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bb2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bb2c:	b538      	push	{r3, r4, r5, lr}
 801bb2e:	4c15      	ldr	r4, [pc, #84]	@ (801bb84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bb30:	4605      	mov	r5, r0
 801bb32:	7823      	ldrb	r3, [r4, #0]
 801bb34:	f3bf 8f5b 	dmb	ish
 801bb38:	07da      	lsls	r2, r3, #31
 801bb3a:	d40b      	bmi.n	801bb54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	f006 f85a 	bl	8021bf6 <__cxa_guard_acquire>
 801bb42:	b138      	cbz	r0, 801bb54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bb44:	4620      	mov	r0, r4
 801bb46:	f006 f862 	bl	8021c0e <__cxa_guard_release>
 801bb4a:	4a0f      	ldr	r2, [pc, #60]	@ (801bb88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bb4c:	490f      	ldr	r1, [pc, #60]	@ (801bb8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bb4e:	4810      	ldr	r0, [pc, #64]	@ (801bb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bb50:	f006 f84a 	bl	8021be8 <__aeabi_atexit>
 801bb54:	4c0f      	ldr	r4, [pc, #60]	@ (801bb94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bb56:	7823      	ldrb	r3, [r4, #0]
 801bb58:	f3bf 8f5b 	dmb	ish
 801bb5c:	07db      	lsls	r3, r3, #31
 801bb5e:	d40b      	bmi.n	801bb78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bb60:	4620      	mov	r0, r4
 801bb62:	f006 f848 	bl	8021bf6 <__cxa_guard_acquire>
 801bb66:	b138      	cbz	r0, 801bb78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bb68:	4620      	mov	r0, r4
 801bb6a:	f006 f850 	bl	8021c0e <__cxa_guard_release>
 801bb6e:	4a06      	ldr	r2, [pc, #24]	@ (801bb88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bb70:	4909      	ldr	r1, [pc, #36]	@ (801bb98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bb72:	480a      	ldr	r0, [pc, #40]	@ (801bb9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bb74:	f006 f838 	bl	8021be8 <__aeabi_atexit>
 801bb78:	4b05      	ldr	r3, [pc, #20]	@ (801bb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bb7a:	626b      	str	r3, [r5, #36]	@ 0x24
 801bb7c:	4b07      	ldr	r3, [pc, #28]	@ (801bb9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bb7e:	62ab      	str	r3, [r5, #40]	@ 0x28
 801bb80:	bd38      	pop	{r3, r4, r5, pc}
 801bb82:	bf00      	nop
 801bb84:	24025358 	.word	0x24025358
 801bb88:	24000000 	.word	0x24000000
 801bb8c:	08018d19 	.word	0x08018d19
 801bb90:	240000d0 	.word	0x240000d0
 801bb94:	2402535c 	.word	0x2402535c
 801bb98:	08018d17 	.word	0x08018d17
 801bb9c:	240000d4 	.word	0x240000d4

0801bba0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bba0:	b538      	push	{r3, r4, r5, lr}
 801bba2:	4c15      	ldr	r4, [pc, #84]	@ (801bbf8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bba4:	4605      	mov	r5, r0
 801bba6:	7823      	ldrb	r3, [r4, #0]
 801bba8:	f3bf 8f5b 	dmb	ish
 801bbac:	07da      	lsls	r2, r3, #31
 801bbae:	d40b      	bmi.n	801bbc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	f006 f820 	bl	8021bf6 <__cxa_guard_acquire>
 801bbb6:	b138      	cbz	r0, 801bbc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f006 f828 	bl	8021c0e <__cxa_guard_release>
 801bbbe:	4a0f      	ldr	r2, [pc, #60]	@ (801bbfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bbc0:	490f      	ldr	r1, [pc, #60]	@ (801bc00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bbc2:	4810      	ldr	r0, [pc, #64]	@ (801bc04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bbc4:	f006 f810 	bl	8021be8 <__aeabi_atexit>
 801bbc8:	4c0f      	ldr	r4, [pc, #60]	@ (801bc08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bbca:	7823      	ldrb	r3, [r4, #0]
 801bbcc:	f3bf 8f5b 	dmb	ish
 801bbd0:	07db      	lsls	r3, r3, #31
 801bbd2:	d40b      	bmi.n	801bbec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f006 f80e 	bl	8021bf6 <__cxa_guard_acquire>
 801bbda:	b138      	cbz	r0, 801bbec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f006 f816 	bl	8021c0e <__cxa_guard_release>
 801bbe2:	4a06      	ldr	r2, [pc, #24]	@ (801bbfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bbe4:	4909      	ldr	r1, [pc, #36]	@ (801bc0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bbe6:	480a      	ldr	r0, [pc, #40]	@ (801bc10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bbe8:	f005 fffe 	bl	8021be8 <__aeabi_atexit>
 801bbec:	4b05      	ldr	r3, [pc, #20]	@ (801bc04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bbee:	61eb      	str	r3, [r5, #28]
 801bbf0:	4b07      	ldr	r3, [pc, #28]	@ (801bc10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bbf2:	622b      	str	r3, [r5, #32]
 801bbf4:	bd38      	pop	{r3, r4, r5, pc}
 801bbf6:	bf00      	nop
 801bbf8:	24025338 	.word	0x24025338
 801bbfc:	24000000 	.word	0x24000000
 801bc00:	08018d1d 	.word	0x08018d1d
 801bc04:	240000b0 	.word	0x240000b0
 801bc08:	2402533c 	.word	0x2402533c
 801bc0c:	08018d1b 	.word	0x08018d1b
 801bc10:	240000b4 	.word	0x240000b4

0801bc14 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bc14:	b510      	push	{r4, lr}
 801bc16:	4604      	mov	r4, r0
 801bc18:	f7ff ff88 	bl	801bb2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc22:	f7ff bfbd 	b.w	801bba0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bc28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801bc28:	b538      	push	{r3, r4, r5, lr}
 801bc2a:	4c15      	ldr	r4, [pc, #84]	@ (801bc80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801bc2c:	4605      	mov	r5, r0
 801bc2e:	7823      	ldrb	r3, [r4, #0]
 801bc30:	f3bf 8f5b 	dmb	ish
 801bc34:	07da      	lsls	r2, r3, #31
 801bc36:	d40b      	bmi.n	801bc50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f005 ffdc 	bl	8021bf6 <__cxa_guard_acquire>
 801bc3e:	b138      	cbz	r0, 801bc50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bc40:	4620      	mov	r0, r4
 801bc42:	f005 ffe4 	bl	8021c0e <__cxa_guard_release>
 801bc46:	4a0f      	ldr	r2, [pc, #60]	@ (801bc84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bc48:	490f      	ldr	r1, [pc, #60]	@ (801bc88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801bc4a:	4810      	ldr	r0, [pc, #64]	@ (801bc8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bc4c:	f005 ffcc 	bl	8021be8 <__aeabi_atexit>
 801bc50:	4c0f      	ldr	r4, [pc, #60]	@ (801bc90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801bc52:	7823      	ldrb	r3, [r4, #0]
 801bc54:	f3bf 8f5b 	dmb	ish
 801bc58:	07db      	lsls	r3, r3, #31
 801bc5a:	d40b      	bmi.n	801bc74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	f005 ffca 	bl	8021bf6 <__cxa_guard_acquire>
 801bc62:	b138      	cbz	r0, 801bc74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bc64:	4620      	mov	r0, r4
 801bc66:	f005 ffd2 	bl	8021c0e <__cxa_guard_release>
 801bc6a:	4a06      	ldr	r2, [pc, #24]	@ (801bc84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bc6c:	4909      	ldr	r1, [pc, #36]	@ (801bc94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801bc6e:	480a      	ldr	r0, [pc, #40]	@ (801bc98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bc70:	f005 ffba 	bl	8021be8 <__aeabi_atexit>
 801bc74:	4b05      	ldr	r3, [pc, #20]	@ (801bc8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bc76:	636b      	str	r3, [r5, #52]	@ 0x34
 801bc78:	4b07      	ldr	r3, [pc, #28]	@ (801bc98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bc7a:	63ab      	str	r3, [r5, #56]	@ 0x38
 801bc7c:	bd38      	pop	{r3, r4, r5, pc}
 801bc7e:	bf00      	nop
 801bc80:	24025340 	.word	0x24025340
 801bc84:	24000000 	.word	0x24000000
 801bc88:	08018d11 	.word	0x08018d11
 801bc8c:	240000b8 	.word	0x240000b8
 801bc90:	24025344 	.word	0x24025344
 801bc94:	08018d0f 	.word	0x08018d0f
 801bc98:	240000bc 	.word	0x240000bc

0801bc9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801bc9c:	b538      	push	{r3, r4, r5, lr}
 801bc9e:	4c15      	ldr	r4, [pc, #84]	@ (801bcf4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801bca0:	4605      	mov	r5, r0
 801bca2:	7823      	ldrb	r3, [r4, #0]
 801bca4:	f3bf 8f5b 	dmb	ish
 801bca8:	07da      	lsls	r2, r3, #31
 801bcaa:	d40b      	bmi.n	801bcc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bcac:	4620      	mov	r0, r4
 801bcae:	f005 ffa2 	bl	8021bf6 <__cxa_guard_acquire>
 801bcb2:	b138      	cbz	r0, 801bcc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bcb4:	4620      	mov	r0, r4
 801bcb6:	f005 ffaa 	bl	8021c0e <__cxa_guard_release>
 801bcba:	4a0f      	ldr	r2, [pc, #60]	@ (801bcf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bcbc:	490f      	ldr	r1, [pc, #60]	@ (801bcfc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801bcbe:	4810      	ldr	r0, [pc, #64]	@ (801bd00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bcc0:	f005 ff92 	bl	8021be8 <__aeabi_atexit>
 801bcc4:	4c0f      	ldr	r4, [pc, #60]	@ (801bd04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801bcc6:	7823      	ldrb	r3, [r4, #0]
 801bcc8:	f3bf 8f5b 	dmb	ish
 801bccc:	07db      	lsls	r3, r3, #31
 801bcce:	d40b      	bmi.n	801bce8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bcd0:	4620      	mov	r0, r4
 801bcd2:	f005 ff90 	bl	8021bf6 <__cxa_guard_acquire>
 801bcd6:	b138      	cbz	r0, 801bce8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f005 ff98 	bl	8021c0e <__cxa_guard_release>
 801bcde:	4a06      	ldr	r2, [pc, #24]	@ (801bcf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bce0:	4909      	ldr	r1, [pc, #36]	@ (801bd08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801bce2:	480a      	ldr	r0, [pc, #40]	@ (801bd0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bce4:	f005 ff80 	bl	8021be8 <__aeabi_atexit>
 801bce8:	4b05      	ldr	r3, [pc, #20]	@ (801bd00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bcea:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801bcec:	4b07      	ldr	r3, [pc, #28]	@ (801bd0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bcee:	632b      	str	r3, [r5, #48]	@ 0x30
 801bcf0:	bd38      	pop	{r3, r4, r5, pc}
 801bcf2:	bf00      	nop
 801bcf4:	24025318 	.word	0x24025318
 801bcf8:	24000000 	.word	0x24000000
 801bcfc:	08018d15 	.word	0x08018d15
 801bd00:	24000090 	.word	0x24000090
 801bd04:	2402531c 	.word	0x2402531c
 801bd08:	08018d13 	.word	0x08018d13
 801bd0c:	24000094 	.word	0x24000094

0801bd10 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801bd10:	b510      	push	{r4, lr}
 801bd12:	4604      	mov	r4, r0
 801bd14:	f7ff ff88 	bl	801bc28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801bd18:	4620      	mov	r0, r4
 801bd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd1e:	f7ff bfbd 	b.w	801bc9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801bd24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801bd24:	b538      	push	{r3, r4, r5, lr}
 801bd26:	4c15      	ldr	r4, [pc, #84]	@ (801bd7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801bd28:	4605      	mov	r5, r0
 801bd2a:	7823      	ldrb	r3, [r4, #0]
 801bd2c:	f3bf 8f5b 	dmb	ish
 801bd30:	07da      	lsls	r2, r3, #31
 801bd32:	d40b      	bmi.n	801bd4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bd34:	4620      	mov	r0, r4
 801bd36:	f005 ff5e 	bl	8021bf6 <__cxa_guard_acquire>
 801bd3a:	b138      	cbz	r0, 801bd4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bd3c:	4620      	mov	r0, r4
 801bd3e:	f005 ff66 	bl	8021c0e <__cxa_guard_release>
 801bd42:	4a0f      	ldr	r2, [pc, #60]	@ (801bd80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bd44:	490f      	ldr	r1, [pc, #60]	@ (801bd84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801bd46:	4810      	ldr	r0, [pc, #64]	@ (801bd88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bd48:	f005 ff4e 	bl	8021be8 <__aeabi_atexit>
 801bd4c:	4c0f      	ldr	r4, [pc, #60]	@ (801bd8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801bd4e:	7823      	ldrb	r3, [r4, #0]
 801bd50:	f3bf 8f5b 	dmb	ish
 801bd54:	07db      	lsls	r3, r3, #31
 801bd56:	d40b      	bmi.n	801bd70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f005 ff4c 	bl	8021bf6 <__cxa_guard_acquire>
 801bd5e:	b138      	cbz	r0, 801bd70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bd60:	4620      	mov	r0, r4
 801bd62:	f005 ff54 	bl	8021c0e <__cxa_guard_release>
 801bd66:	4a06      	ldr	r2, [pc, #24]	@ (801bd80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bd68:	4909      	ldr	r1, [pc, #36]	@ (801bd90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801bd6a:	480a      	ldr	r0, [pc, #40]	@ (801bd94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bd6c:	f005 ff3c 	bl	8021be8 <__aeabi_atexit>
 801bd70:	4b05      	ldr	r3, [pc, #20]	@ (801bd88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bd72:	646b      	str	r3, [r5, #68]	@ 0x44
 801bd74:	4b07      	ldr	r3, [pc, #28]	@ (801bd94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bd76:	64ab      	str	r3, [r5, #72]	@ 0x48
 801bd78:	bd38      	pop	{r3, r4, r5, pc}
 801bd7a:	bf00      	nop
 801bd7c:	24025348 	.word	0x24025348
 801bd80:	24000000 	.word	0x24000000
 801bd84:	08018d09 	.word	0x08018d09
 801bd88:	240000c0 	.word	0x240000c0
 801bd8c:	2402534c 	.word	0x2402534c
 801bd90:	08018d07 	.word	0x08018d07
 801bd94:	240000c4 	.word	0x240000c4

0801bd98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801bd98:	b538      	push	{r3, r4, r5, lr}
 801bd9a:	4c15      	ldr	r4, [pc, #84]	@ (801bdf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801bd9c:	4605      	mov	r5, r0
 801bd9e:	7823      	ldrb	r3, [r4, #0]
 801bda0:	f3bf 8f5b 	dmb	ish
 801bda4:	07da      	lsls	r2, r3, #31
 801bda6:	d40b      	bmi.n	801bdc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bda8:	4620      	mov	r0, r4
 801bdaa:	f005 ff24 	bl	8021bf6 <__cxa_guard_acquire>
 801bdae:	b138      	cbz	r0, 801bdc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	f005 ff2c 	bl	8021c0e <__cxa_guard_release>
 801bdb6:	4a0f      	ldr	r2, [pc, #60]	@ (801bdf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bdb8:	490f      	ldr	r1, [pc, #60]	@ (801bdf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801bdba:	4810      	ldr	r0, [pc, #64]	@ (801bdfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bdbc:	f005 ff14 	bl	8021be8 <__aeabi_atexit>
 801bdc0:	4c0f      	ldr	r4, [pc, #60]	@ (801be00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801bdc2:	7823      	ldrb	r3, [r4, #0]
 801bdc4:	f3bf 8f5b 	dmb	ish
 801bdc8:	07db      	lsls	r3, r3, #31
 801bdca:	d40b      	bmi.n	801bde4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f005 ff12 	bl	8021bf6 <__cxa_guard_acquire>
 801bdd2:	b138      	cbz	r0, 801bde4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bdd4:	4620      	mov	r0, r4
 801bdd6:	f005 ff1a 	bl	8021c0e <__cxa_guard_release>
 801bdda:	4a06      	ldr	r2, [pc, #24]	@ (801bdf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bddc:	4909      	ldr	r1, [pc, #36]	@ (801be04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801bdde:	480a      	ldr	r0, [pc, #40]	@ (801be08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bde0:	f005 ff02 	bl	8021be8 <__aeabi_atexit>
 801bde4:	4b05      	ldr	r3, [pc, #20]	@ (801bdfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bde6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801bde8:	4b07      	ldr	r3, [pc, #28]	@ (801be08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bdea:	642b      	str	r3, [r5, #64]	@ 0x40
 801bdec:	bd38      	pop	{r3, r4, r5, pc}
 801bdee:	bf00      	nop
 801bdf0:	24025328 	.word	0x24025328
 801bdf4:	24000000 	.word	0x24000000
 801bdf8:	08018d0d 	.word	0x08018d0d
 801bdfc:	240000a0 	.word	0x240000a0
 801be00:	2402532c 	.word	0x2402532c
 801be04:	08018d0b 	.word	0x08018d0b
 801be08:	240000a4 	.word	0x240000a4

0801be0c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801be0c:	b510      	push	{r4, lr}
 801be0e:	4604      	mov	r4, r0
 801be10:	f7ff ff88 	bl	801bd24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801be14:	4620      	mov	r0, r4
 801be16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be1a:	f7ff bfbd 	b.w	801bd98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801be20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801be20:	b538      	push	{r3, r4, r5, lr}
 801be22:	4c15      	ldr	r4, [pc, #84]	@ (801be78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801be24:	4605      	mov	r5, r0
 801be26:	7823      	ldrb	r3, [r4, #0]
 801be28:	f3bf 8f5b 	dmb	ish
 801be2c:	07da      	lsls	r2, r3, #31
 801be2e:	d40b      	bmi.n	801be48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801be30:	4620      	mov	r0, r4
 801be32:	f005 fee0 	bl	8021bf6 <__cxa_guard_acquire>
 801be36:	b138      	cbz	r0, 801be48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801be38:	4620      	mov	r0, r4
 801be3a:	f005 fee8 	bl	8021c0e <__cxa_guard_release>
 801be3e:	4a0f      	ldr	r2, [pc, #60]	@ (801be7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801be40:	490f      	ldr	r1, [pc, #60]	@ (801be80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801be42:	4810      	ldr	r0, [pc, #64]	@ (801be84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801be44:	f005 fed0 	bl	8021be8 <__aeabi_atexit>
 801be48:	4c0f      	ldr	r4, [pc, #60]	@ (801be88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801be4a:	7823      	ldrb	r3, [r4, #0]
 801be4c:	f3bf 8f5b 	dmb	ish
 801be50:	07db      	lsls	r3, r3, #31
 801be52:	d40b      	bmi.n	801be6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801be54:	4620      	mov	r0, r4
 801be56:	f005 fece 	bl	8021bf6 <__cxa_guard_acquire>
 801be5a:	b138      	cbz	r0, 801be6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801be5c:	4620      	mov	r0, r4
 801be5e:	f005 fed6 	bl	8021c0e <__cxa_guard_release>
 801be62:	4a06      	ldr	r2, [pc, #24]	@ (801be7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801be64:	4909      	ldr	r1, [pc, #36]	@ (801be8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801be66:	480a      	ldr	r0, [pc, #40]	@ (801be90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801be68:	f005 febe 	bl	8021be8 <__aeabi_atexit>
 801be6c:	4b05      	ldr	r3, [pc, #20]	@ (801be84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801be6e:	656b      	str	r3, [r5, #84]	@ 0x54
 801be70:	4b07      	ldr	r3, [pc, #28]	@ (801be90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801be72:	65ab      	str	r3, [r5, #88]	@ 0x58
 801be74:	bd38      	pop	{r3, r4, r5, pc}
 801be76:	bf00      	nop
 801be78:	24025320 	.word	0x24025320
 801be7c:	24000000 	.word	0x24000000
 801be80:	08018d01 	.word	0x08018d01
 801be84:	24000098 	.word	0x24000098
 801be88:	24025324 	.word	0x24025324
 801be8c:	08018cff 	.word	0x08018cff
 801be90:	2400009c 	.word	0x2400009c

0801be94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801be94:	b538      	push	{r3, r4, r5, lr}
 801be96:	4c15      	ldr	r4, [pc, #84]	@ (801beec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801be98:	4605      	mov	r5, r0
 801be9a:	7823      	ldrb	r3, [r4, #0]
 801be9c:	f3bf 8f5b 	dmb	ish
 801bea0:	07da      	lsls	r2, r3, #31
 801bea2:	d40b      	bmi.n	801bebc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bea4:	4620      	mov	r0, r4
 801bea6:	f005 fea6 	bl	8021bf6 <__cxa_guard_acquire>
 801beaa:	b138      	cbz	r0, 801bebc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801beac:	4620      	mov	r0, r4
 801beae:	f005 feae 	bl	8021c0e <__cxa_guard_release>
 801beb2:	4a0f      	ldr	r2, [pc, #60]	@ (801bef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801beb4:	490f      	ldr	r1, [pc, #60]	@ (801bef4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801beb6:	4810      	ldr	r0, [pc, #64]	@ (801bef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801beb8:	f005 fe96 	bl	8021be8 <__aeabi_atexit>
 801bebc:	4c0f      	ldr	r4, [pc, #60]	@ (801befc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801bebe:	7823      	ldrb	r3, [r4, #0]
 801bec0:	f3bf 8f5b 	dmb	ish
 801bec4:	07db      	lsls	r3, r3, #31
 801bec6:	d40b      	bmi.n	801bee0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bec8:	4620      	mov	r0, r4
 801beca:	f005 fe94 	bl	8021bf6 <__cxa_guard_acquire>
 801bece:	b138      	cbz	r0, 801bee0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bed0:	4620      	mov	r0, r4
 801bed2:	f005 fe9c 	bl	8021c0e <__cxa_guard_release>
 801bed6:	4a06      	ldr	r2, [pc, #24]	@ (801bef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801bed8:	4909      	ldr	r1, [pc, #36]	@ (801bf00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801beda:	480a      	ldr	r0, [pc, #40]	@ (801bf04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bedc:	f005 fe84 	bl	8021be8 <__aeabi_atexit>
 801bee0:	4b05      	ldr	r3, [pc, #20]	@ (801bef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801bee2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801bee4:	4b07      	ldr	r3, [pc, #28]	@ (801bf04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bee6:	652b      	str	r3, [r5, #80]	@ 0x50
 801bee8:	bd38      	pop	{r3, r4, r5, pc}
 801beea:	bf00      	nop
 801beec:	24025310 	.word	0x24025310
 801bef0:	24000000 	.word	0x24000000
 801bef4:	08018d05 	.word	0x08018d05
 801bef8:	24000088 	.word	0x24000088
 801befc:	24025314 	.word	0x24025314
 801bf00:	08018d03 	.word	0x08018d03
 801bf04:	2400008c 	.word	0x2400008c

0801bf08 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801bf08:	b510      	push	{r4, lr}
 801bf0a:	4604      	mov	r4, r0
 801bf0c:	f7ff ff88 	bl	801be20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801bf10:	4620      	mov	r0, r4
 801bf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf16:	f7ff bfbd 	b.w	801be94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801bf1a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801bf1a:	b510      	push	{r4, lr}
 801bf1c:	4604      	mov	r4, r0
 801bf1e:	f7ff fff3 	bl	801bf08 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801bf22:	4620      	mov	r0, r4
 801bf24:	f7ff ff72 	bl	801be0c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f7ff fe73 	bl	801bc14 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801bf2e:	4620      	mov	r0, r4
 801bf30:	f7ff fdf2 	bl	801bb18 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801bf34:	4620      	mov	r0, r4
 801bf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf3a:	f7ff bee9 	b.w	801bd10 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801bf40 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801bf40:	b538      	push	{r3, r4, r5, lr}
 801bf42:	4c0b      	ldr	r4, [pc, #44]	@ (801bf70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801bf44:	4605      	mov	r5, r0
 801bf46:	7823      	ldrb	r3, [r4, #0]
 801bf48:	f3bf 8f5b 	dmb	ish
 801bf4c:	07db      	lsls	r3, r3, #31
 801bf4e:	d40b      	bmi.n	801bf68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801bf50:	4620      	mov	r0, r4
 801bf52:	f005 fe50 	bl	8021bf6 <__cxa_guard_acquire>
 801bf56:	b138      	cbz	r0, 801bf68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f005 fe58 	bl	8021c0e <__cxa_guard_release>
 801bf5e:	4a05      	ldr	r2, [pc, #20]	@ (801bf74 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801bf60:	4905      	ldr	r1, [pc, #20]	@ (801bf78 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801bf62:	4806      	ldr	r0, [pc, #24]	@ (801bf7c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801bf64:	f005 fe40 	bl	8021be8 <__aeabi_atexit>
 801bf68:	4b04      	ldr	r3, [pc, #16]	@ (801bf7c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801bf6a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801bf6c:	bd38      	pop	{r3, r4, r5, pc}
 801bf6e:	bf00      	nop
 801bf70:	24025304 	.word	0x24025304
 801bf74:	24000000 	.word	0x24000000
 801bf78:	08018cfd 	.word	0x08018cfd
 801bf7c:	24000080 	.word	0x24000080

0801bf80 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801bf80:	b538      	push	{r3, r4, r5, lr}
 801bf82:	4c0b      	ldr	r4, [pc, #44]	@ (801bfb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801bf84:	4605      	mov	r5, r0
 801bf86:	7823      	ldrb	r3, [r4, #0]
 801bf88:	f3bf 8f5b 	dmb	ish
 801bf8c:	07db      	lsls	r3, r3, #31
 801bf8e:	d40b      	bmi.n	801bfa8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801bf90:	4620      	mov	r0, r4
 801bf92:	f005 fe30 	bl	8021bf6 <__cxa_guard_acquire>
 801bf96:	b138      	cbz	r0, 801bfa8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f005 fe38 	bl	8021c0e <__cxa_guard_release>
 801bf9e:	4a05      	ldr	r2, [pc, #20]	@ (801bfb4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801bfa0:	4905      	ldr	r1, [pc, #20]	@ (801bfb8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801bfa2:	4806      	ldr	r0, [pc, #24]	@ (801bfbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801bfa4:	f005 fe20 	bl	8021be8 <__aeabi_atexit>
 801bfa8:	4b04      	ldr	r3, [pc, #16]	@ (801bfbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801bfaa:	662b      	str	r3, [r5, #96]	@ 0x60
 801bfac:	bd38      	pop	{r3, r4, r5, pc}
 801bfae:	bf00      	nop
 801bfb0:	24025308 	.word	0x24025308
 801bfb4:	24000000 	.word	0x24000000
 801bfb8:	08018cfb 	.word	0x08018cfb
 801bfbc:	24000084 	.word	0x24000084

0801bfc0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801bfc0:	b570      	push	{r4, r5, r6, lr}
 801bfc2:	4d0c      	ldr	r5, [pc, #48]	@ (801bff4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801bfc4:	4606      	mov	r6, r0
 801bfc6:	4c0c      	ldr	r4, [pc, #48]	@ (801bff8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801bfc8:	782b      	ldrb	r3, [r5, #0]
 801bfca:	f3bf 8f5b 	dmb	ish
 801bfce:	f013 0f01 	tst.w	r3, #1
 801bfd2:	d10d      	bne.n	801bff0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801bfd4:	4628      	mov	r0, r5
 801bfd6:	f005 fe0e 	bl	8021bf6 <__cxa_guard_acquire>
 801bfda:	b148      	cbz	r0, 801bff0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801bfdc:	4b07      	ldr	r3, [pc, #28]	@ (801bffc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801bfde:	4628      	mov	r0, r5
 801bfe0:	6023      	str	r3, [r4, #0]
 801bfe2:	f005 fe14 	bl	8021c0e <__cxa_guard_release>
 801bfe6:	4a06      	ldr	r2, [pc, #24]	@ (801c000 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801bfe8:	4620      	mov	r0, r4
 801bfea:	4906      	ldr	r1, [pc, #24]	@ (801c004 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801bfec:	f005 fdfc 	bl	8021be8 <__aeabi_atexit>
 801bff0:	6674      	str	r4, [r6, #100]	@ 0x64
 801bff2:	bd70      	pop	{r4, r5, r6, pc}
 801bff4:	2402530c 	.word	0x2402530c
 801bff8:	24025464 	.word	0x24025464
 801bffc:	08026740 	.word	0x08026740
 801c000:	24000000 	.word	0x24000000
 801c004:	08018cf9 	.word	0x08018cf9

0801c008 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801c008:	b510      	push	{r4, lr}
 801c00a:	4604      	mov	r4, r0
 801c00c:	f7ff ff98 	bl	801bf40 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801c010:	4620      	mov	r0, r4
 801c012:	f7ff ffb5 	bl	801bf80 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801c016:	4620      	mov	r0, r4
 801c018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c01c:	f7ff bfd0 	b.w	801bfc0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801c020 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801c020:	b570      	push	{r4, r5, r6, lr}
 801c022:	4d0c      	ldr	r5, [pc, #48]	@ (801c054 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801c024:	4606      	mov	r6, r0
 801c026:	4c0c      	ldr	r4, [pc, #48]	@ (801c058 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801c028:	782b      	ldrb	r3, [r5, #0]
 801c02a:	f3bf 8f5b 	dmb	ish
 801c02e:	f013 0f01 	tst.w	r3, #1
 801c032:	d10d      	bne.n	801c050 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801c034:	4628      	mov	r0, r5
 801c036:	f005 fdde 	bl	8021bf6 <__cxa_guard_acquire>
 801c03a:	b148      	cbz	r0, 801c050 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801c03c:	4b07      	ldr	r3, [pc, #28]	@ (801c05c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801c03e:	4628      	mov	r0, r5
 801c040:	6023      	str	r3, [r4, #0]
 801c042:	f005 fde4 	bl	8021c0e <__cxa_guard_release>
 801c046:	4a06      	ldr	r2, [pc, #24]	@ (801c060 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801c048:	4620      	mov	r0, r4
 801c04a:	4906      	ldr	r1, [pc, #24]	@ (801c064 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801c04c:	f005 fdcc 	bl	8021be8 <__aeabi_atexit>
 801c050:	66b4      	str	r4, [r6, #104]	@ 0x68
 801c052:	bd70      	pop	{r4, r5, r6, pc}
 801c054:	24025300 	.word	0x24025300
 801c058:	24025360 	.word	0x24025360
 801c05c:	08026758 	.word	0x08026758
 801c060:	24000000 	.word	0x24000000
 801c064:	08018cf7 	.word	0x08018cf7

0801c068 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c06c:	b087      	sub	sp, #28
 801c06e:	788d      	ldrb	r5, [r1, #2]
 801c070:	f891 9000 	ldrb.w	r9, [r1]
 801c074:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801c078:	9501      	str	r5, [sp, #4]
 801c07a:	784d      	ldrb	r5, [r1, #1]
 801c07c:	9203      	str	r2, [sp, #12]
 801c07e:	9502      	str	r5, [sp, #8]
 801c080:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801c084:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801c088:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801c08c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801c090:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801c094:	fb06 0708 	mla	r7, r6, r8, r0
 801c098:	2e00      	cmp	r6, #0
 801c09a:	eb02 0a07 	add.w	sl, r2, r7
 801c09e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801c0a2:	9d01      	ldr	r5, [sp, #4]
 801c0a4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c0a8:	ea45 0509 	orr.w	r5, r5, r9
 801c0ac:	9505      	str	r5, [sp, #20]
 801c0ae:	f2c0 80b2 	blt.w	801c216 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c0b2:	45b3      	cmp	fp, r6
 801c0b4:	f340 80af 	ble.w	801c216 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c0b8:	2800      	cmp	r0, #0
 801c0ba:	f2c0 80aa 	blt.w	801c212 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c0be:	4580      	cmp	r8, r0
 801c0c0:	f340 80a7 	ble.w	801c212 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c0c4:	9a03      	ldr	r2, [sp, #12]
 801c0c6:	5dd7      	ldrb	r7, [r2, r7]
 801c0c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c0cc:	441f      	add	r7, r3
 801c0ce:	1c42      	adds	r2, r0, #1
 801c0d0:	f100 80a4 	bmi.w	801c21c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c0d4:	4590      	cmp	r8, r2
 801c0d6:	f340 80a1 	ble.w	801c21c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c0da:	2c00      	cmp	r4, #0
 801c0dc:	f000 809e 	beq.w	801c21c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c0e0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c0e8:	441d      	add	r5, r3
 801c0ea:	3601      	adds	r6, #1
 801c0ec:	f100 809a 	bmi.w	801c224 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c0f0:	45b3      	cmp	fp, r6
 801c0f2:	f340 8097 	ble.w	801c224 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c0f6:	f1bc 0f00 	cmp.w	ip, #0
 801c0fa:	f000 8093 	beq.w	801c224 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c0fe:	2800      	cmp	r0, #0
 801c100:	f2c0 808e 	blt.w	801c220 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c104:	4580      	cmp	r8, r0
 801c106:	f340 808b 	ble.w	801c220 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c10a:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801c10e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c112:	441e      	add	r6, r3
 801c114:	3001      	adds	r0, #1
 801c116:	f100 8088 	bmi.w	801c22a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c11a:	4580      	cmp	r8, r0
 801c11c:	f340 8085 	ble.w	801c22a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c120:	2c00      	cmp	r4, #0
 801c122:	f000 8082 	beq.w	801c22a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c126:	44d0      	add	r8, sl
 801c128:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c12c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c130:	4413      	add	r3, r2
 801c132:	b2a4      	uxth	r4, r4
 801c134:	f895 a000 	ldrb.w	sl, [r5]
 801c138:	fa1f fc8c 	uxth.w	ip, ip
 801c13c:	fb04 fb0c 	mul.w	fp, r4, ip
 801c140:	0124      	lsls	r4, r4, #4
 801c142:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801c146:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801c14a:	eba4 040b 	sub.w	r4, r4, fp
 801c14e:	fa1f f08c 	uxth.w	r0, ip
 801c152:	b2a2      	uxth	r2, r4
 801c154:	783c      	ldrb	r4, [r7, #0]
 801c156:	eba8 0800 	sub.w	r8, r8, r0
 801c15a:	fa1f fc8e 	uxth.w	ip, lr
 801c15e:	fb02 fa0a 	mul.w	sl, r2, sl
 801c162:	ea6f 0e0e 	mvn.w	lr, lr
 801c166:	fa1f f888 	uxth.w	r8, r8
 801c16a:	fa5f fe8e 	uxtb.w	lr, lr
 801c16e:	fb08 aa04 	mla	sl, r8, r4, sl
 801c172:	7834      	ldrb	r4, [r6, #0]
 801c174:	fb19 f90e 	smulbb	r9, r9, lr
 801c178:	fb00 aa04 	mla	sl, r0, r4, sl
 801c17c:	781c      	ldrb	r4, [r3, #0]
 801c17e:	fb0b a404 	mla	r4, fp, r4, sl
 801c182:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c186:	fb04 990c 	mla	r9, r4, ip, r9
 801c18a:	fa1f f989 	uxth.w	r9, r9
 801c18e:	f109 0401 	add.w	r4, r9, #1
 801c192:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c196:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c19a:	f881 9000 	strb.w	r9, [r1]
 801c19e:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c1a2:	787c      	ldrb	r4, [r7, #1]
 801c1a4:	fb02 f909 	mul.w	r9, r2, r9
 801c1a8:	fb08 9904 	mla	r9, r8, r4, r9
 801c1ac:	7874      	ldrb	r4, [r6, #1]
 801c1ae:	fb00 9904 	mla	r9, r0, r4, r9
 801c1b2:	785c      	ldrb	r4, [r3, #1]
 801c1b4:	fb0b 9404 	mla	r4, fp, r4, r9
 801c1b8:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801c1bc:	9c02      	ldr	r4, [sp, #8]
 801c1be:	fb14 f90e 	smulbb	r9, r4, lr
 801c1c2:	fb0a 940c 	mla	r4, sl, ip, r9
 801c1c6:	b2a4      	uxth	r4, r4
 801c1c8:	f104 0901 	add.w	r9, r4, #1
 801c1cc:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801c1d0:	1224      	asrs	r4, r4, #8
 801c1d2:	704c      	strb	r4, [r1, #1]
 801c1d4:	78ad      	ldrb	r5, [r5, #2]
 801c1d6:	78bc      	ldrb	r4, [r7, #2]
 801c1d8:	436a      	muls	r2, r5
 801c1da:	789b      	ldrb	r3, [r3, #2]
 801c1dc:	fb08 2204 	mla	r2, r8, r4, r2
 801c1e0:	78b4      	ldrb	r4, [r6, #2]
 801c1e2:	fb00 2004 	mla	r0, r0, r4, r2
 801c1e6:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c1ea:	9b01      	ldr	r3, [sp, #4]
 801c1ec:	fb13 fe0e 	smulbb	lr, r3, lr
 801c1f0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c1f4:	fb0b ec0c 	mla	ip, fp, ip, lr
 801c1f8:	fa1f fc8c 	uxth.w	ip, ip
 801c1fc:	f10c 0e01 	add.w	lr, ip, #1
 801c200:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c204:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c208:	f881 c002 	strb.w	ip, [r1, #2]
 801c20c:	b007      	add	sp, #28
 801c20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c212:	af05      	add	r7, sp, #20
 801c214:	e75b      	b.n	801c0ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801c216:	ad05      	add	r5, sp, #20
 801c218:	462f      	mov	r7, r5
 801c21a:	e766      	b.n	801c0ea <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c21c:	ad05      	add	r5, sp, #20
 801c21e:	e764      	b.n	801c0ea <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c220:	ae05      	add	r6, sp, #20
 801c222:	e777      	b.n	801c114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801c224:	ab05      	add	r3, sp, #20
 801c226:	461e      	mov	r6, r3
 801c228:	e783      	b.n	801c132 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801c22a:	ab05      	add	r3, sp, #20
 801c22c:	e781      	b.n	801c132 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801c22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c232:	b093      	sub	sp, #76	@ 0x4c
 801c234:	9210      	str	r2, [sp, #64]	@ 0x40
 801c236:	9309      	str	r3, [sp, #36]	@ 0x24
 801c238:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c23a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801c23e:	9011      	str	r0, [sp, #68]	@ 0x44
 801c240:	930e      	str	r3, [sp, #56]	@ 0x38
 801c242:	6850      	ldr	r0, [r2, #4]
 801c244:	910d      	str	r1, [sp, #52]	@ 0x34
 801c246:	6812      	ldr	r2, [r2, #0]
 801c248:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801c24c:	fb00 1303 	mla	r3, r0, r3, r1
 801c250:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c254:	18d3      	adds	r3, r2, r3
 801c256:	930a      	str	r3, [sp, #40]	@ 0x28
 801c258:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c25e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c260:	685c      	ldr	r4, [r3, #4]
 801c262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c264:	3404      	adds	r4, #4
 801c266:	43db      	mvns	r3, r3
 801c268:	b2db      	uxtb	r3, r3
 801c26a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c26c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c26e:	2b00      	cmp	r3, #0
 801c270:	dc03      	bgt.n	801c27a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c272:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c274:	2b00      	cmp	r3, #0
 801c276:	f340 8250 	ble.w	801c71a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c27a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c27c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c280:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c284:	1e48      	subs	r0, r1, #1
 801c286:	1e55      	subs	r5, r2, #1
 801c288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	f340 80ee 	ble.w	801c46c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801c290:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801c292:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c294:	1436      	asrs	r6, r6, #16
 801c296:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c29a:	d406      	bmi.n	801c2aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c29c:	4286      	cmp	r6, r0
 801c29e:	da04      	bge.n	801c2aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	db02      	blt.n	801c2aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2a4:	42ab      	cmp	r3, r5
 801c2a6:	f2c0 80e2 	blt.w	801c46e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801c2aa:	3601      	adds	r6, #1
 801c2ac:	f100 80cf 	bmi.w	801c44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c2b0:	42b1      	cmp	r1, r6
 801c2b2:	f2c0 80cc 	blt.w	801c44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	f100 80c9 	bmi.w	801c44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c2bc:	429a      	cmp	r2, r3
 801c2be:	f2c0 80c6 	blt.w	801c44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c2c2:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801c2c6:	f1bb 0f00 	cmp.w	fp, #0
 801c2ca:	f340 80f1 	ble.w	801c4b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c2ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c2d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c2d2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801c2d4:	141d      	asrs	r5, r3, #16
 801c2d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c2d8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c2dc:	68c7      	ldr	r7, [r0, #12]
 801c2de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c2e0:	1418      	asrs	r0, r3, #16
 801c2e2:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801c2e6:	6892      	ldr	r2, [r2, #8]
 801c2e8:	f100 8137 	bmi.w	801c55a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c2ec:	f102 3cff 	add.w	ip, r2, #4294967295
 801c2f0:	4560      	cmp	r0, ip
 801c2f2:	f280 8132 	bge.w	801c55a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c2f6:	2d00      	cmp	r5, #0
 801c2f8:	f2c0 812f 	blt.w	801c55a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c2fc:	f107 3cff 	add.w	ip, r7, #4294967295
 801c300:	4565      	cmp	r5, ip
 801c302:	f280 812a 	bge.w	801c55a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c306:	b212      	sxth	r2, r2
 801c308:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c30a:	fb05 0002 	mla	r0, r5, r2, r0
 801c30e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c310:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c314:	4405      	add	r5, r0
 801c316:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c31a:	eb04 0e0c 	add.w	lr, r4, ip
 801c31e:	f1b8 0f00 	cmp.w	r8, #0
 801c322:	f000 810c 	beq.w	801c53e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801c326:	786f      	ldrb	r7, [r5, #1]
 801c328:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c32c:	4427      	add	r7, r4
 801c32e:	2900      	cmp	r1, #0
 801c330:	f000 810d 	beq.w	801c54e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801c334:	18a8      	adds	r0, r5, r2
 801c336:	5caa      	ldrb	r2, [r5, r2]
 801c338:	7840      	ldrb	r0, [r0, #1]
 801c33a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c33e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c342:	4422      	add	r2, r4
 801c344:	4420      	add	r0, r4
 801c346:	fa1f f388 	uxth.w	r3, r8
 801c34a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801c34e:	b289      	uxth	r1, r1
 801c350:	f897 c000 	ldrb.w	ip, [r7]
 801c354:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801c358:	fb03 f901 	mul.w	r9, r3, r1
 801c35c:	011b      	lsls	r3, r3, #4
 801c35e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c362:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801c366:	eba3 0309 	sub.w	r3, r3, r9
 801c36a:	b289      	uxth	r1, r1
 801c36c:	b29b      	uxth	r3, r3
 801c36e:	eba8 0801 	sub.w	r8, r8, r1
 801c372:	fb03 fc0c 	mul.w	ip, r3, ip
 801c376:	fa1f f888 	uxth.w	r8, r8
 801c37a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c37e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c382:	f892 a000 	ldrb.w	sl, [r2]
 801c386:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c38a:	f890 a000 	ldrb.w	sl, [r0]
 801c38e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c392:	f896 a000 	ldrb.w	sl, [r6]
 801c396:	fb1a fa03 	smulbb	sl, sl, r3
 801c39a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c39e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3a0:	fb0c ac05 	mla	ip, ip, r5, sl
 801c3a4:	fa1f fc8c 	uxth.w	ip, ip
 801c3a8:	f10c 0a01 	add.w	sl, ip, #1
 801c3ac:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c3b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3b4:	f886 a000 	strb.w	sl, [r6]
 801c3b8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c3bc:	f89e a001 	ldrb.w	sl, [lr, #1]
 801c3c0:	fb03 fc0c 	mul.w	ip, r3, ip
 801c3c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3c6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c3ca:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c3ce:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c3d2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c3d6:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c3da:	f896 a001 	ldrb.w	sl, [r6, #1]
 801c3de:	fb1a fa03 	smulbb	sl, sl, r3
 801c3e2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c3e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3e8:	fb0c ac05 	mla	ip, ip, r5, sl
 801c3ec:	fa1f fc8c 	uxth.w	ip, ip
 801c3f0:	f10c 0a01 	add.w	sl, ip, #1
 801c3f4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801c3f8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3fc:	f886 c001 	strb.w	ip, [r6, #1]
 801c400:	78bf      	ldrb	r7, [r7, #2]
 801c402:	f89e c002 	ldrb.w	ip, [lr, #2]
 801c406:	437b      	muls	r3, r7
 801c408:	fb08 330c 	mla	r3, r8, ip, r3
 801c40c:	f892 c002 	ldrb.w	ip, [r2, #2]
 801c410:	7882      	ldrb	r2, [r0, #2]
 801c412:	fb01 310c 	mla	r1, r1, ip, r3
 801c416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c418:	fb09 1902 	mla	r9, r9, r2, r1
 801c41c:	78b1      	ldrb	r1, [r6, #2]
 801c41e:	fb11 f103 	smulbb	r1, r1, r3
 801c422:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c426:	fb09 1505 	mla	r5, r9, r5, r1
 801c42a:	b2ad      	uxth	r5, r5
 801c42c:	1c6b      	adds	r3, r5, #1
 801c42e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c432:	122d      	asrs	r5, r5, #8
 801c434:	70b5      	strb	r5, [r6, #2]
 801c436:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c438:	3603      	adds	r6, #3
 801c43a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801c43c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c440:	4413      	add	r3, r2
 801c442:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c444:	931d      	str	r3, [sp, #116]	@ 0x74
 801c446:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c448:	4413      	add	r3, r2
 801c44a:	931e      	str	r3, [sp, #120]	@ 0x78
 801c44c:	e73b      	b.n	801c2c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c44e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c450:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801c452:	4433      	add	r3, r6
 801c454:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c456:	931d      	str	r3, [sp, #116]	@ 0x74
 801c458:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c45a:	4433      	add	r3, r6
 801c45c:	931e      	str	r3, [sp, #120]	@ 0x78
 801c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c460:	3b01      	subs	r3, #1
 801c462:	9309      	str	r3, [sp, #36]	@ 0x24
 801c464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c466:	3303      	adds	r3, #3
 801c468:	930a      	str	r3, [sp, #40]	@ 0x28
 801c46a:	e70d      	b.n	801c288 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c46c:	d028      	beq.n	801c4c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c470:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801c472:	3b01      	subs	r3, #1
 801c474:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801c476:	fb00 5003 	mla	r0, r0, r3, r5
 801c47a:	1400      	asrs	r0, r0, #16
 801c47c:	f53f af21 	bmi.w	801c2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c480:	3901      	subs	r1, #1
 801c482:	4288      	cmp	r0, r1
 801c484:	f6bf af1d 	bge.w	801c2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c488:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801c48a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c48c:	fb01 0303 	mla	r3, r1, r3, r0
 801c490:	141b      	asrs	r3, r3, #16
 801c492:	f53f af16 	bmi.w	801c2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c496:	3a01      	subs	r2, #1
 801c498:	4293      	cmp	r3, r2
 801c49a:	f6bf af12 	bge.w	801c2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c49e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801c4a4:	1cdf      	adds	r7, r3, #3
 801c4a6:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c4aa:	f1b9 0f00 	cmp.w	r9, #0
 801c4ae:	dc73      	bgt.n	801c598 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c4b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4bc:	441a      	add	r2, r3
 801c4be:	920a      	str	r2, [sp, #40]	@ 0x28
 801c4c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	f340 8129 	ble.w	801c71a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c4c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c4cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c4ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4d6:	eef0 6a62 	vmov.f32	s13, s5
 801c4da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c4de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4e6:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801c4ea:	eef0 6a43 	vmov.f32	s13, s6
 801c4ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4f2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801c4f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c502:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c506:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c50a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c50e:	ee12 2a90 	vmov	r2, s5
 801c512:	eef0 2a47 	vmov.f32	s5, s14
 801c516:	fb92 f3f3 	sdiv	r3, r2, r3
 801c51a:	ee13 2a10 	vmov	r2, s6
 801c51e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c520:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c522:	eeb0 3a67 	vmov.f32	s6, s15
 801c526:	fb92 f3f3 	sdiv	r3, r2, r3
 801c52a:	9320      	str	r3, [sp, #128]	@ 0x80
 801c52c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c52e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c530:	3b01      	subs	r3, #1
 801c532:	930d      	str	r3, [sp, #52]	@ 0x34
 801c534:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c536:	bf08      	it	eq
 801c538:	4613      	moveq	r3, r2
 801c53a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c53c:	e696      	b.n	801c26c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c53e:	b149      	cbz	r1, 801c554 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c540:	5caa      	ldrb	r2, [r5, r2]
 801c542:	4670      	mov	r0, lr
 801c544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c548:	4422      	add	r2, r4
 801c54a:	4677      	mov	r7, lr
 801c54c:	e6fb      	b.n	801c346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c54e:	4670      	mov	r0, lr
 801c550:	4672      	mov	r2, lr
 801c552:	e6f8      	b.n	801c346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c554:	4670      	mov	r0, lr
 801c556:	4672      	mov	r2, lr
 801c558:	e7f7      	b.n	801c54a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801c55a:	f110 0c01 	adds.w	ip, r0, #1
 801c55e:	f53f af6a 	bmi.w	801c436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c562:	4562      	cmp	r2, ip
 801c564:	f6ff af67 	blt.w	801c436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c568:	f115 0c01 	adds.w	ip, r5, #1
 801c56c:	f53f af63 	bmi.w	801c436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c570:	4567      	cmp	r7, ip
 801c572:	f6ff af60 	blt.w	801c436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c578:	b23f      	sxth	r7, r7
 801c57a:	b212      	sxth	r2, r2
 801c57c:	9002      	str	r0, [sp, #8]
 801c57e:	9701      	str	r7, [sp, #4]
 801c580:	9200      	str	r2, [sp, #0]
 801c582:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c584:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c586:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801c58a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801c58e:	4623      	mov	r3, r4
 801c590:	4631      	mov	r1, r6
 801c592:	f7ff fd69 	bl	801c068 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c596:	e74e      	b.n	801c436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c598:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c59a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c59c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c5a0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801c5a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c5a4:	1400      	asrs	r0, r0, #16
 801c5a6:	142d      	asrs	r5, r5, #16
 801c5a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c5aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c5ae:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c5b2:	fb02 5000 	mla	r0, r2, r0, r5
 801c5b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c5b8:	f815 e000 	ldrb.w	lr, [r5, r0]
 801c5bc:	eb05 0c00 	add.w	ip, r5, r0
 801c5c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c5c4:	eb04 060e 	add.w	r6, r4, lr
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	f000 8097 	beq.w	801c6fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801c5ce:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c5d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c5d6:	4425      	add	r5, r4
 801c5d8:	2900      	cmp	r1, #0
 801c5da:	f000 8098 	beq.w	801c70e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801c5de:	eb0c 0002 	add.w	r0, ip, r2
 801c5e2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c5e6:	7840      	ldrb	r0, [r0, #1]
 801c5e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c5ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c5f0:	4422      	add	r2, r4
 801c5f2:	4420      	add	r0, r4
 801c5f4:	b29b      	uxth	r3, r3
 801c5f6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c5fa:	b289      	uxth	r1, r1
 801c5fc:	f895 e000 	ldrb.w	lr, [r5]
 801c600:	3703      	adds	r7, #3
 801c602:	f109 39ff 	add.w	r9, r9, #4294967295
 801c606:	fb03 f801 	mul.w	r8, r3, r1
 801c60a:	011b      	lsls	r3, r3, #4
 801c60c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c610:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801c614:	eba3 0308 	sub.w	r3, r3, r8
 801c618:	b289      	uxth	r1, r1
 801c61a:	b29b      	uxth	r3, r3
 801c61c:	ebac 0c01 	sub.w	ip, ip, r1
 801c620:	fb03 fe0e 	mul.w	lr, r3, lr
 801c624:	fa1f fc8c 	uxth.w	ip, ip
 801c628:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c62a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c62c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c630:	f892 b000 	ldrb.w	fp, [r2]
 801c634:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c638:	f890 b000 	ldrb.w	fp, [r0]
 801c63c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c640:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801c644:	fb1b fb03 	smulbb	fp, fp, r3
 801c648:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c64e:	fb0e be0a 	mla	lr, lr, sl, fp
 801c652:	fa1f fe8e 	uxth.w	lr, lr
 801c656:	f10e 0b01 	add.w	fp, lr, #1
 801c65a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c65e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c662:	f807 ec06 	strb.w	lr, [r7, #-6]
 801c666:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c66a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c66e:	fb03 fe0e 	mul.w	lr, r3, lr
 801c672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c674:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c678:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c67c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c680:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c684:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c688:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801c68c:	fb1b fb03 	smulbb	fp, fp, r3
 801c690:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c696:	fb0e be0a 	mla	lr, lr, sl, fp
 801c69a:	fa1f fe8e 	uxth.w	lr, lr
 801c69e:	f10e 0b01 	add.w	fp, lr, #1
 801c6a2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c6a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c6aa:	f807 ec05 	strb.w	lr, [r7, #-5]
 801c6ae:	78ad      	ldrb	r5, [r5, #2]
 801c6b0:	78b6      	ldrb	r6, [r6, #2]
 801c6b2:	436b      	muls	r3, r5
 801c6b4:	7895      	ldrb	r5, [r2, #2]
 801c6b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c6b8:	fb0c 3306 	mla	r3, ip, r6, r3
 801c6bc:	fb01 3305 	mla	r3, r1, r5, r3
 801c6c0:	7885      	ldrb	r5, [r0, #2]
 801c6c2:	fb08 3805 	mla	r8, r8, r5, r3
 801c6c6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801c6ca:	fb13 f302 	smulbb	r3, r3, r2
 801c6ce:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c6d2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801c6d4:	fb08 380a 	mla	r8, r8, sl, r3
 801c6d8:	fa1f f888 	uxth.w	r8, r8
 801c6dc:	f108 0301 	add.w	r3, r8, #1
 801c6e0:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801c6e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c6e6:	4413      	add	r3, r2
 801c6e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c6ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c6ee:	931d      	str	r3, [sp, #116]	@ 0x74
 801c6f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c6f2:	f807 8c04 	strb.w	r8, [r7, #-4]
 801c6f6:	4413      	add	r3, r2
 801c6f8:	931e      	str	r3, [sp, #120]	@ 0x78
 801c6fa:	e6d6      	b.n	801c4aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c6fc:	b151      	cbz	r1, 801c714 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801c6fe:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c702:	4630      	mov	r0, r6
 801c704:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c708:	4422      	add	r2, r4
 801c70a:	4635      	mov	r5, r6
 801c70c:	e772      	b.n	801c5f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c70e:	4630      	mov	r0, r6
 801c710:	4632      	mov	r2, r6
 801c712:	e76f      	b.n	801c5f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c714:	4630      	mov	r0, r6
 801c716:	4632      	mov	r2, r6
 801c718:	e7f7      	b.n	801c70a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c71a:	b013      	add	sp, #76	@ 0x4c
 801c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c720 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c720:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c724:	784c      	ldrb	r4, [r1, #1]
 801c726:	f891 a002 	ldrb.w	sl, [r1, #2]
 801c72a:	0224      	lsls	r4, r4, #8
 801c72c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801c730:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801c734:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c738:	f891 a000 	ldrb.w	sl, [r1]
 801c73c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801c740:	ea44 040a 	orr.w	r4, r4, sl
 801c744:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801c748:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801c74c:	9401      	str	r4, [sp, #4]
 801c74e:	fb05 c70e 	mla	r7, r5, lr, ip
 801c752:	2d00      	cmp	r5, #0
 801c754:	eb02 0807 	add.w	r8, r2, r7
 801c758:	db72      	blt.n	801c840 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c75a:	45a9      	cmp	r9, r5
 801c75c:	dd70      	ble.n	801c840 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c75e:	f1bc 0f00 	cmp.w	ip, #0
 801c762:	db6b      	blt.n	801c83c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c764:	45e6      	cmp	lr, ip
 801c766:	dd69      	ble.n	801c83c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c768:	5dd7      	ldrb	r7, [r2, r7]
 801c76a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c76e:	441f      	add	r7, r3
 801c770:	f11c 0201 	adds.w	r2, ip, #1
 801c774:	d467      	bmi.n	801c846 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c776:	4596      	cmp	lr, r2
 801c778:	dd65      	ble.n	801c846 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c77a:	2800      	cmp	r0, #0
 801c77c:	d063      	beq.n	801c846 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c77e:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c782:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c786:	441c      	add	r4, r3
 801c788:	3501      	adds	r5, #1
 801c78a:	d460      	bmi.n	801c84e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c78c:	45a9      	cmp	r9, r5
 801c78e:	dd5e      	ble.n	801c84e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c790:	2e00      	cmp	r6, #0
 801c792:	d05c      	beq.n	801c84e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c794:	f1bc 0f00 	cmp.w	ip, #0
 801c798:	db57      	blt.n	801c84a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c79a:	45e6      	cmp	lr, ip
 801c79c:	dd55      	ble.n	801c84a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c79e:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c7a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7a6:	441d      	add	r5, r3
 801c7a8:	f11c 0201 	adds.w	r2, ip, #1
 801c7ac:	d452      	bmi.n	801c854 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c7ae:	4596      	cmp	lr, r2
 801c7b0:	dd50      	ble.n	801c854 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c7b2:	2800      	cmp	r0, #0
 801c7b4:	d04e      	beq.n	801c854 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c7b6:	44c6      	add	lr, r8
 801c7b8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c7bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c7c0:	4413      	add	r3, r2
 801c7c2:	b280      	uxth	r0, r0
 801c7c4:	f897 8000 	ldrb.w	r8, [r7]
 801c7c8:	b2b2      	uxth	r2, r6
 801c7ca:	fb00 f602 	mul.w	r6, r0, r2
 801c7ce:	0100      	lsls	r0, r0, #4
 801c7d0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c7d4:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801c7d8:	1b80      	subs	r0, r0, r6
 801c7da:	fa1f fc82 	uxth.w	ip, r2
 801c7de:	b282      	uxth	r2, r0
 801c7e0:	7820      	ldrb	r0, [r4, #0]
 801c7e2:	ebae 0e0c 	sub.w	lr, lr, ip
 801c7e6:	4350      	muls	r0, r2
 801c7e8:	fa1f fe8e 	uxth.w	lr, lr
 801c7ec:	fb0e 0808 	mla	r8, lr, r8, r0
 801c7f0:	7828      	ldrb	r0, [r5, #0]
 801c7f2:	fb0c 8800 	mla	r8, ip, r0, r8
 801c7f6:	7818      	ldrb	r0, [r3, #0]
 801c7f8:	fb06 8000 	mla	r0, r6, r0, r8
 801c7fc:	1200      	asrs	r0, r0, #8
 801c7fe:	7008      	strb	r0, [r1, #0]
 801c800:	7860      	ldrb	r0, [r4, #1]
 801c802:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c806:	4350      	muls	r0, r2
 801c808:	fb0e 0808 	mla	r8, lr, r8, r0
 801c80c:	7868      	ldrb	r0, [r5, #1]
 801c80e:	fb0c 8800 	mla	r8, ip, r0, r8
 801c812:	7858      	ldrb	r0, [r3, #1]
 801c814:	fb06 8000 	mla	r0, r6, r0, r8
 801c818:	1200      	asrs	r0, r0, #8
 801c81a:	7048      	strb	r0, [r1, #1]
 801c81c:	78a0      	ldrb	r0, [r4, #2]
 801c81e:	78bf      	ldrb	r7, [r7, #2]
 801c820:	4350      	muls	r0, r2
 801c822:	78aa      	ldrb	r2, [r5, #2]
 801c824:	fb0e 0007 	mla	r0, lr, r7, r0
 801c828:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c82c:	789a      	ldrb	r2, [r3, #2]
 801c82e:	fb06 c202 	mla	r2, r6, r2, ip
 801c832:	1212      	asrs	r2, r2, #8
 801c834:	708a      	strb	r2, [r1, #2]
 801c836:	b002      	add	sp, #8
 801c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c83c:	af01      	add	r7, sp, #4
 801c83e:	e797      	b.n	801c770 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801c840:	ac01      	add	r4, sp, #4
 801c842:	4627      	mov	r7, r4
 801c844:	e7a0      	b.n	801c788 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c846:	ac01      	add	r4, sp, #4
 801c848:	e79e      	b.n	801c788 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c84a:	ad01      	add	r5, sp, #4
 801c84c:	e7ac      	b.n	801c7a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801c84e:	ab01      	add	r3, sp, #4
 801c850:	461d      	mov	r5, r3
 801c852:	e7b6      	b.n	801c7c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801c854:	ab01      	add	r3, sp, #4
 801c856:	e7b4      	b.n	801c7c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801c858 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c85c:	b08d      	sub	sp, #52	@ 0x34
 801c85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c862:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801c866:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c868:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c86a:	9306      	str	r3, [sp, #24]
 801c86c:	6850      	ldr	r0, [r2, #4]
 801c86e:	6812      	ldr	r2, [r2, #0]
 801c870:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c872:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801c876:	fb00 1303 	mla	r3, r0, r3, r1
 801c87a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c87e:	18d3      	adds	r3, r2, r3
 801c880:	9307      	str	r3, [sp, #28]
 801c882:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	9308      	str	r3, [sp, #32]
 801c888:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c88a:	685d      	ldr	r5, [r3, #4]
 801c88c:	3504      	adds	r5, #4
 801c88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c890:	2b00      	cmp	r3, #0
 801c892:	dc03      	bgt.n	801c89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c896:	2b00      	cmp	r3, #0
 801c898:	f340 81e6 	ble.w	801cc68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c89c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c89e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c8a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c8a6:	1e48      	subs	r0, r1, #1
 801c8a8:	1e56      	subs	r6, r2, #1
 801c8aa:	9b06      	ldr	r3, [sp, #24]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	f340 80bd 	ble.w	801ca2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c8b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c8b4:	1427      	asrs	r7, r4, #16
 801c8b6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c8ba:	d406      	bmi.n	801c8ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c8bc:	4287      	cmp	r7, r0
 801c8be:	da04      	bge.n	801c8ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	db02      	blt.n	801c8ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c8c4:	42b3      	cmp	r3, r6
 801c8c6:	f2c0 80b2 	blt.w	801ca2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801c8ca:	3701      	adds	r7, #1
 801c8cc:	f100 80a1 	bmi.w	801ca12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c8d0:	42b9      	cmp	r1, r7
 801c8d2:	f2c0 809e 	blt.w	801ca12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c8d6:	3301      	adds	r3, #1
 801c8d8:	f100 809b 	bmi.w	801ca12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	f2c0 8098 	blt.w	801ca12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c8e2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801c8e6:	f1bb 0f00 	cmp.w	fp, #0
 801c8ea:	f340 80bf 	ble.w	801ca6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c8ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c8f0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c8f2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c8f4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c8f8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801c8fc:	1420      	asrs	r0, r4, #16
 801c8fe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c900:	ea4f 4723 	mov.w	r7, r3, asr #16
 801c904:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c908:	6892      	ldr	r2, [r2, #8]
 801c90a:	f100 8103 	bmi.w	801cb14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c90e:	f102 3eff 	add.w	lr, r2, #4294967295
 801c912:	4570      	cmp	r0, lr
 801c914:	f280 80fe 	bge.w	801cb14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c918:	2f00      	cmp	r7, #0
 801c91a:	f2c0 80fb 	blt.w	801cb14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c91e:	f10c 3eff 	add.w	lr, ip, #4294967295
 801c922:	4577      	cmp	r7, lr
 801c924:	f280 80f6 	bge.w	801cb14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c928:	b212      	sxth	r2, r2
 801c92a:	fb07 0002 	mla	r0, r7, r2, r0
 801c92e:	9f08      	ldr	r7, [sp, #32]
 801c930:	f817 8000 	ldrb.w	r8, [r7, r0]
 801c934:	eb07 0e00 	add.w	lr, r7, r0
 801c938:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c93c:	eb05 0c08 	add.w	ip, r5, r8
 801c940:	2b00      	cmp	r3, #0
 801c942:	f000 80d8 	beq.w	801caf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c946:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801c94a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c94e:	442f      	add	r7, r5
 801c950:	2900      	cmp	r1, #0
 801c952:	f000 80d9 	beq.w	801cb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c956:	eb0e 0002 	add.w	r0, lr, r2
 801c95a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c95e:	7840      	ldrb	r0, [r0, #1]
 801c960:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c964:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c968:	442a      	add	r2, r5
 801c96a:	4428      	add	r0, r5
 801c96c:	b29b      	uxth	r3, r3
 801c96e:	f815 a008 	ldrb.w	sl, [r5, r8]
 801c972:	b289      	uxth	r1, r1
 801c974:	f897 8000 	ldrb.w	r8, [r7]
 801c978:	fb03 f901 	mul.w	r9, r3, r1
 801c97c:	011b      	lsls	r3, r3, #4
 801c97e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c982:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801c986:	eba3 0309 	sub.w	r3, r3, r9
 801c98a:	b289      	uxth	r1, r1
 801c98c:	b29b      	uxth	r3, r3
 801c98e:	ebae 0e01 	sub.w	lr, lr, r1
 801c992:	fb03 f808 	mul.w	r8, r3, r8
 801c996:	fa1f fe8e 	uxth.w	lr, lr
 801c99a:	fb0e 880a 	mla	r8, lr, sl, r8
 801c99e:	f892 a000 	ldrb.w	sl, [r2]
 801c9a2:	fb01 880a 	mla	r8, r1, sl, r8
 801c9a6:	f890 a000 	ldrb.w	sl, [r0]
 801c9aa:	fb09 880a 	mla	r8, r9, sl, r8
 801c9ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c9b2:	f886 8000 	strb.w	r8, [r6]
 801c9b6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c9ba:	f89c a001 	ldrb.w	sl, [ip, #1]
 801c9be:	fb03 f808 	mul.w	r8, r3, r8
 801c9c2:	fb0e 880a 	mla	r8, lr, sl, r8
 801c9c6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c9ca:	fb01 880a 	mla	r8, r1, sl, r8
 801c9ce:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c9d2:	fb09 880a 	mla	r8, r9, sl, r8
 801c9d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c9da:	f886 8001 	strb.w	r8, [r6, #1]
 801c9de:	78bf      	ldrb	r7, [r7, #2]
 801c9e0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c9e4:	437b      	muls	r3, r7
 801c9e6:	7892      	ldrb	r2, [r2, #2]
 801c9e8:	fb0e 330c 	mla	r3, lr, ip, r3
 801c9ec:	fb01 3102 	mla	r1, r1, r2, r3
 801c9f0:	7882      	ldrb	r2, [r0, #2]
 801c9f2:	fb09 1902 	mla	r9, r9, r2, r1
 801c9f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9fa:	f886 9002 	strb.w	r9, [r6, #2]
 801c9fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca00:	3603      	adds	r6, #3
 801ca02:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ca04:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca08:	441c      	add	r4, r3
 801ca0a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ca0c:	4413      	add	r3, r2
 801ca0e:	9318      	str	r3, [sp, #96]	@ 0x60
 801ca10:	e769      	b.n	801c8e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ca12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca14:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801ca16:	441c      	add	r4, r3
 801ca18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ca1a:	443b      	add	r3, r7
 801ca1c:	9318      	str	r3, [sp, #96]	@ 0x60
 801ca1e:	9b06      	ldr	r3, [sp, #24]
 801ca20:	3b01      	subs	r3, #1
 801ca22:	9306      	str	r3, [sp, #24]
 801ca24:	9b07      	ldr	r3, [sp, #28]
 801ca26:	3303      	adds	r3, #3
 801ca28:	9307      	str	r3, [sp, #28]
 801ca2a:	e73e      	b.n	801c8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ca2c:	d026      	beq.n	801ca7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ca2e:	9b06      	ldr	r3, [sp, #24]
 801ca30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ca32:	3b01      	subs	r3, #1
 801ca34:	fb00 4003 	mla	r0, r0, r3, r4
 801ca38:	1400      	asrs	r0, r0, #16
 801ca3a:	f53f af52 	bmi.w	801c8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ca3e:	3901      	subs	r1, #1
 801ca40:	4288      	cmp	r0, r1
 801ca42:	f6bf af4e 	bge.w	801c8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ca46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ca48:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801ca4a:	fb01 0303 	mla	r3, r1, r3, r0
 801ca4e:	141b      	asrs	r3, r3, #16
 801ca50:	f53f af47 	bmi.w	801c8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ca54:	3a01      	subs	r2, #1
 801ca56:	4293      	cmp	r3, r2
 801ca58:	f6bf af43 	bge.w	801c8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ca5c:	9b07      	ldr	r3, [sp, #28]
 801ca5e:	f8dd a018 	ldr.w	sl, [sp, #24]
 801ca62:	f103 0803 	add.w	r8, r3, #3
 801ca66:	f1ba 0f00 	cmp.w	sl, #0
 801ca6a:	dc71      	bgt.n	801cb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ca6c:	9b06      	ldr	r3, [sp, #24]
 801ca6e:	9a07      	ldr	r2, [sp, #28]
 801ca70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca78:	441a      	add	r2, r3
 801ca7a:	9207      	str	r2, [sp, #28]
 801ca7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	f340 80f2 	ble.w	801cc68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801ca84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ca8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca8e:	eeb0 6a62 	vmov.f32	s12, s5
 801ca92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca9e:	ee16 4a10 	vmov	r4, s12
 801caa2:	eeb0 6a43 	vmov.f32	s12, s6
 801caa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801caaa:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801caae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cab2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cab6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801caba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cabe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cac2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cac6:	ee12 2a90 	vmov	r2, s5
 801caca:	eef0 2a47 	vmov.f32	s5, s14
 801cace:	fb92 f3f3 	sdiv	r3, r2, r3
 801cad2:	ee13 2a10 	vmov	r2, s6
 801cad6:	9319      	str	r3, [sp, #100]	@ 0x64
 801cad8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cada:	eeb0 3a67 	vmov.f32	s6, s15
 801cade:	fb92 f3f3 	sdiv	r3, r2, r3
 801cae2:	931a      	str	r3, [sp, #104]	@ 0x68
 801cae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cae6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cae8:	3b01      	subs	r3, #1
 801caea:	9309      	str	r3, [sp, #36]	@ 0x24
 801caec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801caee:	bf08      	it	eq
 801caf0:	4613      	moveq	r3, r2
 801caf2:	9306      	str	r3, [sp, #24]
 801caf4:	e6cb      	b.n	801c88e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801caf6:	b151      	cbz	r1, 801cb0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801caf8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801cafc:	4660      	mov	r0, ip
 801cafe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb02:	442a      	add	r2, r5
 801cb04:	4667      	mov	r7, ip
 801cb06:	e731      	b.n	801c96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cb08:	4660      	mov	r0, ip
 801cb0a:	4662      	mov	r2, ip
 801cb0c:	e72e      	b.n	801c96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cb0e:	4660      	mov	r0, ip
 801cb10:	4662      	mov	r2, ip
 801cb12:	e7f7      	b.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801cb14:	f110 0e01 	adds.w	lr, r0, #1
 801cb18:	f53f af71 	bmi.w	801c9fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cb1c:	4572      	cmp	r2, lr
 801cb1e:	f6ff af6e 	blt.w	801c9fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cb22:	f117 0e01 	adds.w	lr, r7, #1
 801cb26:	f53f af6a 	bmi.w	801c9fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cb2a:	45f4      	cmp	ip, lr
 801cb2c:	f6ff af67 	blt.w	801c9fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cb30:	b212      	sxth	r2, r2
 801cb32:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cb36:	fa0f f38c 	sxth.w	r3, ip
 801cb3a:	9200      	str	r2, [sp, #0]
 801cb3c:	4631      	mov	r1, r6
 801cb3e:	9a08      	ldr	r2, [sp, #32]
 801cb40:	9301      	str	r3, [sp, #4]
 801cb42:	462b      	mov	r3, r5
 801cb44:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801cb48:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801cb4a:	f7ff fde9 	bl	801c720 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801cb4e:	e756      	b.n	801c9fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cb50:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cb52:	1426      	asrs	r6, r4, #16
 801cb54:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801cb56:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801cb5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cb5e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cb60:	1400      	asrs	r0, r0, #16
 801cb62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cb66:	fb02 6000 	mla	r0, r2, r0, r6
 801cb6a:	9e08      	ldr	r6, [sp, #32]
 801cb6c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cb70:	eb06 0c00 	add.w	ip, r6, r0
 801cb74:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cb78:	eb05 070e 	add.w	r7, r5, lr
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d064      	beq.n	801cc4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801cb80:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801cb84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cb88:	442e      	add	r6, r5
 801cb8a:	2900      	cmp	r1, #0
 801cb8c:	d066      	beq.n	801cc5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801cb8e:	eb0c 0002 	add.w	r0, ip, r2
 801cb92:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cb96:	7840      	ldrb	r0, [r0, #1]
 801cb98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cba0:	442a      	add	r2, r5
 801cba2:	4428      	add	r0, r5
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801cbaa:	b289      	uxth	r1, r1
 801cbac:	f896 e000 	ldrb.w	lr, [r6]
 801cbb0:	f108 0803 	add.w	r8, r8, #3
 801cbb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cbb8:	fb03 f901 	mul.w	r9, r3, r1
 801cbbc:	011b      	lsls	r3, r3, #4
 801cbbe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cbc2:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801cbc6:	eba3 0309 	sub.w	r3, r3, r9
 801cbca:	b289      	uxth	r1, r1
 801cbcc:	b29b      	uxth	r3, r3
 801cbce:	ebac 0c01 	sub.w	ip, ip, r1
 801cbd2:	fb03 fe0e 	mul.w	lr, r3, lr
 801cbd6:	fa1f fc8c 	uxth.w	ip, ip
 801cbda:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cbde:	f892 b000 	ldrb.w	fp, [r2]
 801cbe2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cbe6:	f890 b000 	ldrb.w	fp, [r0]
 801cbea:	fb09 ee0b 	mla	lr, r9, fp, lr
 801cbee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cbf2:	f808 ec06 	strb.w	lr, [r8, #-6]
 801cbf6:	f896 e001 	ldrb.w	lr, [r6, #1]
 801cbfa:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cbfe:	fb03 fe0e 	mul.w	lr, r3, lr
 801cc02:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cc06:	f892 b001 	ldrb.w	fp, [r2, #1]
 801cc0a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cc0e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cc12:	fb09 ee0b 	mla	lr, r9, fp, lr
 801cc16:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc1a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801cc1e:	78b6      	ldrb	r6, [r6, #2]
 801cc20:	78bf      	ldrb	r7, [r7, #2]
 801cc22:	4373      	muls	r3, r6
 801cc24:	7896      	ldrb	r6, [r2, #2]
 801cc26:	7882      	ldrb	r2, [r0, #2]
 801cc28:	fb0c 3307 	mla	r3, ip, r7, r3
 801cc2c:	fb01 3306 	mla	r3, r1, r6, r3
 801cc30:	fb09 3902 	mla	r9, r9, r2, r3
 801cc34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cc36:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cc38:	441c      	add	r4, r3
 801cc3a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cc3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc40:	4413      	add	r3, r2
 801cc42:	f808 9c04 	strb.w	r9, [r8, #-4]
 801cc46:	9318      	str	r3, [sp, #96]	@ 0x60
 801cc48:	e70d      	b.n	801ca66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801cc4a:	b151      	cbz	r1, 801cc62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801cc4c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cc50:	4638      	mov	r0, r7
 801cc52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc56:	442a      	add	r2, r5
 801cc58:	463e      	mov	r6, r7
 801cc5a:	e7a3      	b.n	801cba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cc5c:	4638      	mov	r0, r7
 801cc5e:	463a      	mov	r2, r7
 801cc60:	e7a0      	b.n	801cba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cc62:	4638      	mov	r0, r7
 801cc64:	463a      	mov	r2, r7
 801cc66:	e7f7      	b.n	801cc58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801cc68:	b00d      	add	sp, #52	@ 0x34
 801cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801cc6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc72:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801cc76:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801cc7a:	2d00      	cmp	r5, #0
 801cc7c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801cc80:	fb05 700c 	mla	r0, r5, ip, r7
 801cc84:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801cc88:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801cc8c:	eb02 0800 	add.w	r8, r2, r0
 801cc90:	f2c0 8118 	blt.w	801cec4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801cc94:	45a9      	cmp	r9, r5
 801cc96:	f340 8115 	ble.w	801cec4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801cc9a:	2f00      	cmp	r7, #0
 801cc9c:	f2c0 8110 	blt.w	801cec0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cca0:	45bc      	cmp	ip, r7
 801cca2:	f340 810d 	ble.w	801cec0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cca6:	5c12      	ldrb	r2, [r2, r0]
 801cca8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ccac:	1c7a      	adds	r2, r7, #1
 801ccae:	f100 810c 	bmi.w	801ceca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ccb2:	4594      	cmp	ip, r2
 801ccb4:	f340 8109 	ble.w	801ceca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ccb8:	2c00      	cmp	r4, #0
 801ccba:	f000 8108 	beq.w	801cece <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801ccbe:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ccc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ccc6:	3501      	adds	r5, #1
 801ccc8:	f100 8105 	bmi.w	801ced6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801cccc:	45a9      	cmp	r9, r5
 801ccce:	f340 8102 	ble.w	801ced6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801ccd2:	f1be 0f00 	cmp.w	lr, #0
 801ccd6:	f000 8101 	beq.w	801cedc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801ccda:	2f00      	cmp	r7, #0
 801ccdc:	f2c0 80f9 	blt.w	801ced2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cce0:	45bc      	cmp	ip, r7
 801cce2:	f340 80f6 	ble.w	801ced2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cce6:	f818 200c 	ldrb.w	r2, [r8, ip]
 801ccea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ccee:	3701      	adds	r7, #1
 801ccf0:	f100 80f7 	bmi.w	801cee2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801ccf4:	45bc      	cmp	ip, r7
 801ccf6:	f340 80f4 	ble.w	801cee2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801ccfa:	2c00      	cmp	r4, #0
 801ccfc:	f000 80f3 	beq.w	801cee6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801cd00:	44c4      	add	ip, r8
 801cd02:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cd06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cd0a:	fa1f fc84 	uxth.w	ip, r4
 801cd0e:	fa1f f48e 	uxth.w	r4, lr
 801cd12:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cd16:	fb04 fe0c 	mul.w	lr, r4, ip
 801cd1a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801cd1e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cd22:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801cd26:	ebac 070e 	sub.w	r7, ip, lr
 801cd2a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801cd2e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cd32:	b2a4      	uxth	r4, r4
 801cd34:	b2bf      	uxth	r7, r7
 801cd36:	1b1b      	subs	r3, r3, r4
 801cd38:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cd3c:	fb07 fc0a 	mul.w	ip, r7, sl
 801cd40:	b29b      	uxth	r3, r3
 801cd42:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cd46:	9300      	str	r3, [sp, #0]
 801cd48:	fb04 cc09 	mla	ip, r4, r9, ip
 801cd4c:	fb0e cc08 	mla	ip, lr, r8, ip
 801cd50:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cd54:	9301      	str	r3, [sp, #4]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f000 80af 	beq.w	801ceba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801cd5c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801cd60:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cd64:	fb0b fc0c 	mul.w	ip, fp, ip
 801cd68:	fb0b f606 	mul.w	r6, fp, r6
 801cd6c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cd70:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cd74:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801cd78:	44dc      	add	ip, fp
 801cd7a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801cd7e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cd82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd86:	fb0a fb0b 	mul.w	fp, sl, fp
 801cd8a:	fb0a fa00 	mul.w	sl, sl, r0
 801cd8e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801cd92:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801cd96:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801cd9a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cd9e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cda2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cda6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cdaa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cdae:	0a36      	lsrs	r6, r6, #8
 801cdb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cdb4:	44dc      	add	ip, fp
 801cdb6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801cdba:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cdbe:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cdc2:	fb09 fb0b 	mul.w	fp, r9, fp
 801cdc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdca:	fb09 f905 	mul.w	r9, r9, r5
 801cdce:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cdd2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cdd6:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801cdda:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cdde:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cde2:	fb0c fc07 	mul.w	ip, ip, r7
 801cde6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801cdea:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801cdee:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cdf2:	4458      	add	r0, fp
 801cdf4:	fb08 f505 	mul.w	r5, r8, r5
 801cdf8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cdfc:	fb08 f802 	mul.w	r8, r8, r2
 801ce00:	0a00      	lsrs	r0, r0, #8
 801ce02:	0a2a      	lsrs	r2, r5, #8
 801ce04:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801ce08:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ce0c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ce10:	4415      	add	r5, r2
 801ce12:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801ce16:	0a2d      	lsrs	r5, r5, #8
 801ce18:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ce1c:	9a00      	ldr	r2, [sp, #0]
 801ce1e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ce22:	fb03 cc02 	mla	ip, r3, r2, ip
 801ce26:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ce2a:	9b01      	ldr	r3, [sp, #4]
 801ce2c:	fb05 c50e 	mla	r5, r5, lr, ip
 801ce30:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ce34:	fb00 5004 	mla	r0, r0, r4, r5
 801ce38:	0a00      	lsrs	r0, r0, #8
 801ce3a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ce3e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ce42:	4378      	muls	r0, r7
 801ce44:	fb02 0006 	mla	r0, r2, r6, r0
 801ce48:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ce4c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ce50:	fb04 e000 	mla	r0, r4, r0, lr
 801ce54:	0a00      	lsrs	r0, r0, #8
 801ce56:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ce5a:	4328      	orrs	r0, r5
 801ce5c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801ce60:	b2ad      	uxth	r5, r5
 801ce62:	b2c4      	uxtb	r4, r0
 801ce64:	436b      	muls	r3, r5
 801ce66:	fb14 f405 	smulbb	r4, r4, r5
 801ce6a:	1c5a      	adds	r2, r3, #1
 801ce6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ce70:	780b      	ldrb	r3, [r1, #0]
 801ce72:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ce76:	b2d2      	uxtb	r2, r2
 801ce78:	fb03 4302 	mla	r3, r3, r2, r4
 801ce7c:	b29b      	uxth	r3, r3
 801ce7e:	1c5c      	adds	r4, r3, #1
 801ce80:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ce84:	784c      	ldrb	r4, [r1, #1]
 801ce86:	fb14 f402 	smulbb	r4, r4, r2
 801ce8a:	121b      	asrs	r3, r3, #8
 801ce8c:	700b      	strb	r3, [r1, #0]
 801ce8e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ce92:	fb03 4305 	mla	r3, r3, r5, r4
 801ce96:	b29b      	uxth	r3, r3
 801ce98:	1c5c      	adds	r4, r3, #1
 801ce9a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ce9e:	0c04      	lsrs	r4, r0, #16
 801cea0:	7888      	ldrb	r0, [r1, #2]
 801cea2:	121b      	asrs	r3, r3, #8
 801cea4:	fb10 f002 	smulbb	r0, r0, r2
 801cea8:	704b      	strb	r3, [r1, #1]
 801ceaa:	fb04 0005 	mla	r0, r4, r5, r0
 801ceae:	b280      	uxth	r0, r0
 801ceb0:	1c43      	adds	r3, r0, #1
 801ceb2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ceb6:	1200      	asrs	r0, r0, #8
 801ceb8:	7088      	strb	r0, [r1, #2]
 801ceba:	b003      	add	sp, #12
 801cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cec0:	2600      	movs	r6, #0
 801cec2:	e6f3      	b.n	801ccac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801cec4:	2000      	movs	r0, #0
 801cec6:	4606      	mov	r6, r0
 801cec8:	e6fd      	b.n	801ccc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ceca:	2000      	movs	r0, #0
 801cecc:	e6fb      	b.n	801ccc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cece:	4620      	mov	r0, r4
 801ced0:	e6f9      	b.n	801ccc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ced2:	2500      	movs	r5, #0
 801ced4:	e70b      	b.n	801ccee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801ced6:	2200      	movs	r2, #0
 801ced8:	4615      	mov	r5, r2
 801ceda:	e716      	b.n	801cd0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cedc:	4672      	mov	r2, lr
 801cede:	4675      	mov	r5, lr
 801cee0:	e713      	b.n	801cd0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cee2:	2200      	movs	r2, #0
 801cee4:	e711      	b.n	801cd0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cee6:	4622      	mov	r2, r4
 801cee8:	e70f      	b.n	801cd0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801ceea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ceea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceee:	b09f      	sub	sp, #124	@ 0x7c
 801cef0:	921b      	str	r2, [sp, #108]	@ 0x6c
 801cef2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cef4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801cef6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801cefa:	901d      	str	r0, [sp, #116]	@ 0x74
 801cefc:	931c      	str	r3, [sp, #112]	@ 0x70
 801cefe:	6850      	ldr	r0, [r2, #4]
 801cf00:	9119      	str	r1, [sp, #100]	@ 0x64
 801cf02:	6812      	ldr	r2, [r2, #0]
 801cf04:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801cf06:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801cf0a:	fb00 1303 	mla	r3, r0, r3, r1
 801cf0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf12:	18d3      	adds	r3, r2, r3
 801cf14:	930c      	str	r3, [sp, #48]	@ 0x30
 801cf16:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	9312      	str	r3, [sp, #72]	@ 0x48
 801cf1c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801cf1e:	685e      	ldr	r6, [r3, #4]
 801cf20:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801cf24:	3604      	adds	r6, #4
 801cf26:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	dc03      	bgt.n	801cf36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cf2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	f340 8378 	ble.w	801d626 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801cf36:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801cf38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cf3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cf40:	1e48      	subs	r0, r1, #1
 801cf42:	1e57      	subs	r7, r2, #1
 801cf44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	f340 818c 	ble.w	801d264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801cf4c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801cf4e:	142b      	asrs	r3, r5, #16
 801cf50:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cf54:	d406      	bmi.n	801cf64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cf56:	4584      	cmp	ip, r0
 801cf58:	da04      	bge.n	801cf64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	db02      	blt.n	801cf64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cf5e:	42bb      	cmp	r3, r7
 801cf60:	f2c0 8181 	blt.w	801d266 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801cf64:	f11c 0c01 	adds.w	ip, ip, #1
 801cf68:	f100 816f 	bmi.w	801d24a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cf6c:	4561      	cmp	r1, ip
 801cf6e:	f2c0 816c 	blt.w	801d24a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cf72:	3301      	adds	r3, #1
 801cf74:	f100 8169 	bmi.w	801d24a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	f2c0 8166 	blt.w	801d24a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf80:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cf82:	931a      	str	r3, [sp, #104]	@ 0x68
 801cf84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	f340 818c 	ble.w	801d2a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801cf8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cf8e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801cf92:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cf96:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cf9a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801cf9c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801cfa0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cfa2:	141b      	asrs	r3, r3, #16
 801cfa4:	f100 81d0 	bmi.w	801d348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cfa8:	f100 38ff 	add.w	r8, r0, #4294967295
 801cfac:	4543      	cmp	r3, r8
 801cfae:	f280 81cb 	bge.w	801d348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cfb2:	f1bc 0f00 	cmp.w	ip, #0
 801cfb6:	f2c0 81c7 	blt.w	801d348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cfba:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cfbe:	45c4      	cmp	ip, r8
 801cfc0:	f280 81c2 	bge.w	801d348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cfc4:	b200      	sxth	r0, r0
 801cfc6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801cfc8:	fb0c 3300 	mla	r3, ip, r0, r3
 801cfcc:	eb04 0803 	add.w	r8, r4, r3
 801cfd0:	5ce3      	ldrb	r3, [r4, r3]
 801cfd2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cfd6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cfda:	2a00      	cmp	r2, #0
 801cfdc:	f000 81a9 	beq.w	801d332 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801cfe0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cfe4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801cfe8:	940e      	str	r4, [sp, #56]	@ 0x38
 801cfea:	0e24      	lsrs	r4, r4, #24
 801cfec:	9415      	str	r4, [sp, #84]	@ 0x54
 801cfee:	b179      	cbz	r1, 801d010 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cff0:	eb08 0c00 	add.w	ip, r8, r0
 801cff4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cff8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cffc:	900a      	str	r0, [sp, #40]	@ 0x28
 801cffe:	0e00      	lsrs	r0, r0, #24
 801d000:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d002:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d006:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d00a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d00c:	0e00      	lsrs	r0, r0, #24
 801d00e:	9016      	str	r0, [sp, #88]	@ 0x58
 801d010:	b292      	uxth	r2, r2
 801d012:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d014:	b289      	uxth	r1, r1
 801d016:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d018:	fb02 f901 	mul.w	r9, r2, r1
 801d01c:	0112      	lsls	r2, r2, #4
 801d01e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d022:	eba2 0809 	sub.w	r8, r2, r9
 801d026:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d02a:	b289      	uxth	r1, r1
 801d02c:	fa1f f888 	uxth.w	r8, r8
 801d030:	1a52      	subs	r2, r2, r1
 801d032:	fb08 f000 	mul.w	r0, r8, r0
 801d036:	b292      	uxth	r2, r2
 801d038:	fb02 000e 	mla	r0, r2, lr, r0
 801d03c:	fb01 0004 	mla	r0, r1, r4, r0
 801d040:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d042:	fb09 0004 	mla	r0, r9, r4, r0
 801d046:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d04a:	2800      	cmp	r0, #0
 801d04c:	f000 80f2 	beq.w	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d050:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d054:	d01b      	beq.n	801d08e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d056:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d05a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d05e:	fb0e fa0a 	mul.w	sl, lr, sl
 801d062:	fb0e fe03 	mul.w	lr, lr, r3
 801d066:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d06a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d06e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d072:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d076:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d07a:	4453      	add	r3, sl
 801d07c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d080:	0a1b      	lsrs	r3, r3, #8
 801d082:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d086:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d08a:	ea43 030c 	orr.w	r3, r3, ip
 801d08e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d090:	2cff      	cmp	r4, #255	@ 0xff
 801d092:	d021      	beq.n	801d0d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d094:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d096:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d09a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d09c:	fb04 fb0b 	mul.w	fp, r4, fp
 801d0a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d0a2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d0a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d0ac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d0b0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0b8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d0bc:	44de      	add	lr, fp
 801d0be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d0c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0ce:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d0d2:	ea4e 040a 	orr.w	r4, lr, sl
 801d0d6:	940e      	str	r4, [sp, #56]	@ 0x38
 801d0d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d0da:	2cff      	cmp	r4, #255	@ 0xff
 801d0dc:	d021      	beq.n	801d122 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d0de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d0e0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d0e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d0e6:	fb04 fb0b 	mul.w	fp, r4, fp
 801d0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d0ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d0f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d0f6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d0fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d102:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d106:	44de      	add	lr, fp
 801d108:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d10c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d110:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d114:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d118:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d11c:	ea4e 040a 	orr.w	r4, lr, sl
 801d120:	940a      	str	r4, [sp, #40]	@ 0x28
 801d122:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d124:	2cff      	cmp	r4, #255	@ 0xff
 801d126:	d021      	beq.n	801d16c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d128:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d12a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d12e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d130:	fb04 fb0b 	mul.w	fp, r4, fp
 801d134:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d136:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d13a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d13c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d140:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d144:	fb04 fa0a 	mul.w	sl, r4, sl
 801d148:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d14c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d150:	44de      	add	lr, fp
 801d152:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d156:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d15a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d15e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d162:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d166:	ea4e 040a 	orr.w	r4, lr, sl
 801d16a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d16c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d16e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801d172:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d176:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d17a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d17c:	fb08 fc0c 	mul.w	ip, r8, ip
 801d180:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d184:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d188:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d18a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d18e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d192:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d194:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d198:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d19c:	fb08 f80e 	mul.w	r8, r8, lr
 801d1a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1a4:	fb02 8303 	mla	r3, r2, r3, r8
 801d1a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1aa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d1ae:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d1b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d1b4:	fb01 330a 	mla	r3, r1, sl, r3
 801d1b8:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801d1bc:	fb09 3901 	mla	r9, r9, r1, r3
 801d1c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d1c4:	4343      	muls	r3, r0
 801d1c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d1ca:	1c58      	adds	r0, r3, #1
 801d1cc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d1d0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d1d4:	ea4c 0c09 	orr.w	ip, ip, r9
 801d1d8:	783b      	ldrb	r3, [r7, #0]
 801d1da:	fa5f f28c 	uxtb.w	r2, ip
 801d1de:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d1e2:	fb12 f201 	smulbb	r2, r2, r1
 801d1e6:	b2c0      	uxtb	r0, r0
 801d1e8:	fb03 2300 	mla	r3, r3, r0, r2
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	1c5a      	adds	r2, r3, #1
 801d1f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d1f4:	787a      	ldrb	r2, [r7, #1]
 801d1f6:	fb12 f200 	smulbb	r2, r2, r0
 801d1fa:	121b      	asrs	r3, r3, #8
 801d1fc:	703b      	strb	r3, [r7, #0]
 801d1fe:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d202:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d206:	fb03 2301 	mla	r3, r3, r1, r2
 801d20a:	b29b      	uxth	r3, r3
 801d20c:	1c5a      	adds	r2, r3, #1
 801d20e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d212:	121b      	asrs	r3, r3, #8
 801d214:	707b      	strb	r3, [r7, #1]
 801d216:	78bb      	ldrb	r3, [r7, #2]
 801d218:	fb13 f000 	smulbb	r0, r3, r0
 801d21c:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d220:	fa1f fc8c 	uxth.w	ip, ip
 801d224:	f10c 0301 	add.w	r3, ip, #1
 801d228:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d22c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d230:	f887 c002 	strb.w	ip, [r7, #2]
 801d234:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d236:	3703      	adds	r7, #3
 801d238:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d23a:	441a      	add	r2, r3
 801d23c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d23e:	441d      	add	r5, r3
 801d240:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d242:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d244:	3b01      	subs	r3, #1
 801d246:	931a      	str	r3, [sp, #104]	@ 0x68
 801d248:	e69c      	b.n	801cf84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d24a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d24c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d24e:	441c      	add	r4, r3
 801d250:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d252:	441d      	add	r5, r3
 801d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d256:	9429      	str	r4, [sp, #164]	@ 0xa4
 801d258:	3b01      	subs	r3, #1
 801d25a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d25c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d25e:	3303      	adds	r3, #3
 801d260:	930c      	str	r3, [sp, #48]	@ 0x30
 801d262:	e66f      	b.n	801cf44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d264:	d026      	beq.n	801d2b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801d266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d268:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d26a:	3b01      	subs	r3, #1
 801d26c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d26e:	fb00 4003 	mla	r0, r0, r3, r4
 801d272:	1400      	asrs	r0, r0, #16
 801d274:	f53f ae83 	bmi.w	801cf7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d278:	3901      	subs	r1, #1
 801d27a:	4288      	cmp	r0, r1
 801d27c:	f6bf ae7f 	bge.w	801cf7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d280:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d282:	fb01 5303 	mla	r3, r1, r3, r5
 801d286:	141b      	asrs	r3, r3, #16
 801d288:	f53f ae79 	bmi.w	801cf7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d28c:	3a01      	subs	r2, #1
 801d28e:	4293      	cmp	r3, r2
 801d290:	f6bf ae75 	bge.w	801cf7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d296:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801d29a:	f103 0e03 	add.w	lr, r3, #3
 801d29e:	f1bb 0f00 	cmp.w	fp, #0
 801d2a2:	dc71      	bgt.n	801d388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d2aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2b0:	4423      	add	r3, r4
 801d2b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801d2b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	f340 81b5 	ble.w	801d626 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d2bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d2c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d2c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d2c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2ca:	eef0 6a62 	vmov.f32	s13, s5
 801d2ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d2d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2da:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801d2de:	eef0 6a43 	vmov.f32	s13, s6
 801d2e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2e6:	ee16 5a90 	vmov	r5, s13
 801d2ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d302:	ee12 2a90 	vmov	r2, s5
 801d306:	eef0 2a47 	vmov.f32	s5, s14
 801d30a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d30e:	ee13 2a10 	vmov	r2, s6
 801d312:	932b      	str	r3, [sp, #172]	@ 0xac
 801d314:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d316:	eeb0 3a67 	vmov.f32	s6, s15
 801d31a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d31e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801d320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d322:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d324:	3b01      	subs	r3, #1
 801d326:	9319      	str	r3, [sp, #100]	@ 0x64
 801d328:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d32a:	bf08      	it	eq
 801d32c:	4613      	moveq	r3, r2
 801d32e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d330:	e5fa      	b.n	801cf28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d332:	2900      	cmp	r1, #0
 801d334:	f43f ae6c 	beq.w	801d010 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d338:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d33c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d340:	900a      	str	r0, [sp, #40]	@ 0x28
 801d342:	0e00      	lsrs	r0, r0, #24
 801d344:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d346:	e663      	b.n	801d010 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d348:	f113 0801 	adds.w	r8, r3, #1
 801d34c:	f53f af72 	bmi.w	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d350:	4540      	cmp	r0, r8
 801d352:	f6ff af6f 	blt.w	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d356:	f11c 0801 	adds.w	r8, ip, #1
 801d35a:	f53f af6b 	bmi.w	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d35e:	45c6      	cmp	lr, r8
 801d360:	f6ff af68 	blt.w	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d364:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801d366:	b200      	sxth	r0, r0
 801d368:	9302      	str	r3, [sp, #8]
 801d36a:	fa0f f38e 	sxth.w	r3, lr
 801d36e:	9000      	str	r0, [sp, #0]
 801d370:	9301      	str	r3, [sp, #4]
 801d372:	4633      	mov	r3, r6
 801d374:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d376:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d37a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d37e:	4639      	mov	r1, r7
 801d380:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d382:	f7ff fc74 	bl	801cc6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801d386:	e755      	b.n	801d234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d388:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d38a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d38e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d390:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d394:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d396:	1427      	asrs	r7, r4, #16
 801d398:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d39a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d39e:	142b      	asrs	r3, r5, #16
 801d3a0:	fb01 7303 	mla	r3, r1, r3, r7
 801d3a4:	18e7      	adds	r7, r4, r3
 801d3a6:	5ce3      	ldrb	r3, [r4, r3]
 801d3a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d3ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	f000 812e 	beq.w	801d612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801d3b6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d3ba:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d3be:	9410      	str	r4, [sp, #64]	@ 0x40
 801d3c0:	0e24      	lsrs	r4, r4, #24
 801d3c2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d3c4:	b170      	cbz	r0, 801d3e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d3c6:	eb07 0801 	add.w	r8, r7, r1
 801d3ca:	5c79      	ldrb	r1, [r7, r1]
 801d3cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d3d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d3d2:	0e09      	lsrs	r1, r1, #24
 801d3d4:	9114      	str	r1, [sp, #80]	@ 0x50
 801d3d6:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d3da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d3de:	9111      	str	r1, [sp, #68]	@ 0x44
 801d3e0:	0e09      	lsrs	r1, r1, #24
 801d3e2:	9118      	str	r1, [sp, #96]	@ 0x60
 801d3e4:	b292      	uxth	r2, r2
 801d3e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d3e8:	b280      	uxth	r0, r0
 801d3ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d3ec:	fb02 f900 	mul.w	r9, r2, r0
 801d3f0:	0112      	lsls	r2, r2, #4
 801d3f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d3f6:	eba2 0809 	sub.w	r8, r2, r9
 801d3fa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d3fe:	b280      	uxth	r0, r0
 801d400:	fa1f f888 	uxth.w	r8, r8
 801d404:	1a12      	subs	r2, r2, r0
 801d406:	fb08 f101 	mul.w	r1, r8, r1
 801d40a:	b292      	uxth	r2, r2
 801d40c:	fb02 110c 	mla	r1, r2, ip, r1
 801d410:	fb00 1104 	mla	r1, r0, r4, r1
 801d414:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d416:	fb09 1104 	mla	r1, r9, r4, r1
 801d41a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d41e:	2900      	cmp	r1, #0
 801d420:	f000 80ec 	beq.w	801d5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801d424:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d428:	d019      	beq.n	801d45e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801d42a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d42e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d432:	fb0c fa0a 	mul.w	sl, ip, sl
 801d436:	fb0c fc03 	mul.w	ip, ip, r3
 801d43a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d43e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d442:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d446:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d44a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d44e:	4453      	add	r3, sl
 801d450:	0a3f      	lsrs	r7, r7, #8
 801d452:	0a1b      	lsrs	r3, r3, #8
 801d454:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d458:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d45c:	433b      	orrs	r3, r7
 801d45e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d460:	2cff      	cmp	r4, #255	@ 0xff
 801d462:	d020      	beq.n	801d4a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801d464:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d466:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d46a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d46c:	4367      	muls	r7, r4
 801d46e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d470:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d474:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d478:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d47a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d47e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d482:	fb04 fa0a 	mul.w	sl, r4, sl
 801d486:	44bc      	add	ip, r7
 801d488:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d48c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d490:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d494:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d498:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d49c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d4a0:	ea4c 040a 	orr.w	r4, ip, sl
 801d4a4:	9410      	str	r4, [sp, #64]	@ 0x40
 801d4a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d4a8:	2cff      	cmp	r4, #255	@ 0xff
 801d4aa:	d020      	beq.n	801d4ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801d4ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d4ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d4b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d4b4:	4367      	muls	r7, r4
 801d4b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d4b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d4bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d4c0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d4c2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d4c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4ce:	44bc      	add	ip, r7
 801d4d0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d4d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d4e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d4e8:	ea4c 040a 	orr.w	r4, ip, sl
 801d4ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d4ee:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d4f0:	2cff      	cmp	r4, #255	@ 0xff
 801d4f2:	d020      	beq.n	801d536 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801d4f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d4f6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d4fa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d4fc:	4367      	muls	r7, r4
 801d4fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d500:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d504:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d508:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d50a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d50e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d512:	fb04 fa0a 	mul.w	sl, r4, sl
 801d516:	44bc      	add	ip, r7
 801d518:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d51c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d520:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d524:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d528:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d52c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d530:	ea4c 040a 	orr.w	r4, ip, sl
 801d534:	9411      	str	r4, [sp, #68]	@ 0x44
 801d536:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d538:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d53c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d540:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d544:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d546:	fb08 f707 	mul.w	r7, r8, r7
 801d54a:	fb02 770c 	mla	r7, r2, ip, r7
 801d54e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d552:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d554:	fb00 770c 	mla	r7, r0, ip, r7
 801d558:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d55c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d55e:	fb09 770c 	mla	r7, r9, ip, r7
 801d562:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d566:	fb08 f80c 	mul.w	r8, r8, ip
 801d56a:	0a3f      	lsrs	r7, r7, #8
 801d56c:	fb02 8303 	mla	r3, r2, r3, r8
 801d570:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d572:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d576:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d57a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d57c:	fb00 330a 	mla	r3, r0, sl, r3
 801d580:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d584:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d586:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d58c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d590:	434b      	muls	r3, r1
 801d592:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d596:	1c59      	adds	r1, r3, #1
 801d598:	ea47 070c 	orr.w	r7, r7, ip
 801d59c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d5a0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d5a4:	b2fa      	uxtb	r2, r7
 801d5a6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d5aa:	fb12 f200 	smulbb	r2, r2, r0
 801d5ae:	b2c9      	uxtb	r1, r1
 801d5b0:	fb03 2301 	mla	r3, r3, r1, r2
 801d5b4:	b29b      	uxth	r3, r3
 801d5b6:	1c5a      	adds	r2, r3, #1
 801d5b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d5bc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d5c0:	fb12 f201 	smulbb	r2, r2, r1
 801d5c4:	121b      	asrs	r3, r3, #8
 801d5c6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d5ca:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d5ce:	0c3f      	lsrs	r7, r7, #16
 801d5d0:	fb03 2300 	mla	r3, r3, r0, r2
 801d5d4:	b29b      	uxth	r3, r3
 801d5d6:	1c5a      	adds	r2, r3, #1
 801d5d8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d5dc:	121b      	asrs	r3, r3, #8
 801d5de:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d5e2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d5e6:	fb13 f101 	smulbb	r1, r3, r1
 801d5ea:	fb07 1700 	mla	r7, r7, r0, r1
 801d5ee:	b2bf      	uxth	r7, r7
 801d5f0:	1c7b      	adds	r3, r7, #1
 801d5f2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d5f6:	123f      	asrs	r7, r7, #8
 801d5f8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d5fc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d5fe:	f10e 0e03 	add.w	lr, lr, #3
 801d602:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d604:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d608:	441a      	add	r2, r3
 801d60a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d60c:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d60e:	441d      	add	r5, r3
 801d610:	e645      	b.n	801d29e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801d612:	2800      	cmp	r0, #0
 801d614:	f43f aee6 	beq.w	801d3e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d618:	5c79      	ldrb	r1, [r7, r1]
 801d61a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d61e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d620:	0e09      	lsrs	r1, r1, #24
 801d622:	9114      	str	r1, [sp, #80]	@ 0x50
 801d624:	e6de      	b.n	801d3e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d626:	b01f      	add	sp, #124	@ 0x7c
 801d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d62c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d634:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801d638:	2d00      	cmp	r5, #0
 801d63a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d63e:	fb05 700e 	mla	r0, r5, lr, r7
 801d642:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d646:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801d64a:	eb02 0800 	add.w	r8, r2, r0
 801d64e:	f2c0 8105 	blt.w	801d85c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d652:	45a9      	cmp	r9, r5
 801d654:	f340 8102 	ble.w	801d85c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d658:	2f00      	cmp	r7, #0
 801d65a:	f2c0 80fd 	blt.w	801d858 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d65e:	45be      	cmp	lr, r7
 801d660:	f340 80fa 	ble.w	801d858 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d664:	5c12      	ldrb	r2, [r2, r0]
 801d666:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d66a:	1c7a      	adds	r2, r7, #1
 801d66c:	f100 80f9 	bmi.w	801d862 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d670:	4596      	cmp	lr, r2
 801d672:	f340 80f6 	ble.w	801d862 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d676:	2c00      	cmp	r4, #0
 801d678:	f000 80f5 	beq.w	801d866 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801d67c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d680:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d684:	3501      	adds	r5, #1
 801d686:	f100 80f2 	bmi.w	801d86e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d68a:	45a9      	cmp	r9, r5
 801d68c:	f340 80ef 	ble.w	801d86e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d690:	f1bc 0f00 	cmp.w	ip, #0
 801d694:	f000 80ee 	beq.w	801d874 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801d698:	2f00      	cmp	r7, #0
 801d69a:	f2c0 80e6 	blt.w	801d86a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d69e:	45be      	cmp	lr, r7
 801d6a0:	f340 80e3 	ble.w	801d86a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d6a4:	f818 200e 	ldrb.w	r2, [r8, lr]
 801d6a8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d6ac:	3701      	adds	r7, #1
 801d6ae:	f100 80e4 	bmi.w	801d87a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d6b2:	45be      	cmp	lr, r7
 801d6b4:	f340 80e1 	ble.w	801d87a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d6b8:	2c00      	cmp	r4, #0
 801d6ba:	f000 80e0 	beq.w	801d87e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801d6be:	44c6      	add	lr, r8
 801d6c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d6c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d6c8:	b2a3      	uxth	r3, r4
 801d6ca:	fa1f fc8c 	uxth.w	ip, ip
 801d6ce:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d6d2:	fb0c fe03 	mul.w	lr, ip, r3
 801d6d6:	011b      	lsls	r3, r3, #4
 801d6d8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d6dc:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801d6e0:	eba3 070e 	sub.w	r7, r3, lr
 801d6e4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801d6e8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d6ec:	fa1f f48c 	uxth.w	r4, ip
 801d6f0:	b2bf      	uxth	r7, r7
 801d6f2:	1b1b      	subs	r3, r3, r4
 801d6f4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d6f8:	fb07 fc0a 	mul.w	ip, r7, sl
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d702:	9300      	str	r3, [sp, #0]
 801d704:	fb04 cc09 	mla	ip, r4, r9, ip
 801d708:	fb0e cc08 	mla	ip, lr, r8, ip
 801d70c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d710:	9301      	str	r3, [sp, #4]
 801d712:	2b00      	cmp	r3, #0
 801d714:	f000 809d 	beq.w	801d852 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801d718:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d71c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d720:	fb0b fc0c 	mul.w	ip, fp, ip
 801d724:	fb0b f606 	mul.w	r6, fp, r6
 801d728:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d72c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d730:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d734:	44dc      	add	ip, fp
 801d736:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d73a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d73e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d742:	fb0a fb0b 	mul.w	fp, sl, fp
 801d746:	fb0a fa00 	mul.w	sl, sl, r0
 801d74a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d74e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d752:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d756:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d75a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d75e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d762:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d766:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d76a:	0a36      	lsrs	r6, r6, #8
 801d76c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d770:	44dc      	add	ip, fp
 801d772:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d776:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d77a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d77e:	fb09 fb0b 	mul.w	fp, r9, fp
 801d782:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d786:	fb09 f905 	mul.w	r9, r9, r5
 801d78a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d78e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d792:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801d796:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d79a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d79e:	fb0c fc07 	mul.w	ip, ip, r7
 801d7a2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d7a6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801d7aa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d7ae:	4458      	add	r0, fp
 801d7b0:	fb08 f505 	mul.w	r5, r8, r5
 801d7b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d7b8:	fb08 f802 	mul.w	r8, r8, r2
 801d7bc:	0a00      	lsrs	r0, r0, #8
 801d7be:	0a2a      	lsrs	r2, r5, #8
 801d7c0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801d7c4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d7c8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d7cc:	4415      	add	r5, r2
 801d7ce:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801d7d2:	0a2d      	lsrs	r5, r5, #8
 801d7d4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d7d8:	9a00      	ldr	r2, [sp, #0]
 801d7da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801d7de:	fb03 cc02 	mla	ip, r3, r2, ip
 801d7e2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d7e6:	9b01      	ldr	r3, [sp, #4]
 801d7e8:	fb05 c50e 	mla	r5, r5, lr, ip
 801d7ec:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801d7f0:	43db      	mvns	r3, r3
 801d7f2:	fb00 5004 	mla	r0, r0, r4, r5
 801d7f6:	b2db      	uxtb	r3, r3
 801d7f8:	0a00      	lsrs	r0, r0, #8
 801d7fa:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801d7fe:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801d802:	4378      	muls	r0, r7
 801d804:	fb02 0006 	mla	r0, r2, r6, r0
 801d808:	780a      	ldrb	r2, [r1, #0]
 801d80a:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d80e:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801d812:	fb04 e000 	mla	r0, r4, r0, lr
 801d816:	fb02 f403 	mul.w	r4, r2, r3
 801d81a:	0a00      	lsrs	r0, r0, #8
 801d81c:	1c62      	adds	r2, r4, #1
 801d81e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d822:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d826:	4328      	orrs	r0, r5
 801d828:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d82c:	700a      	strb	r2, [r1, #0]
 801d82e:	784a      	ldrb	r2, [r1, #1]
 801d830:	435a      	muls	r2, r3
 801d832:	1c54      	adds	r4, r2, #1
 801d834:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801d838:	0a02      	lsrs	r2, r0, #8
 801d83a:	0c00      	lsrs	r0, r0, #16
 801d83c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d840:	704a      	strb	r2, [r1, #1]
 801d842:	788a      	ldrb	r2, [r1, #2]
 801d844:	4353      	muls	r3, r2
 801d846:	1c5a      	adds	r2, r3, #1
 801d848:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d84c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d850:	7088      	strb	r0, [r1, #2]
 801d852:	b003      	add	sp, #12
 801d854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d858:	2600      	movs	r6, #0
 801d85a:	e706      	b.n	801d66a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801d85c:	2000      	movs	r0, #0
 801d85e:	4606      	mov	r6, r0
 801d860:	e710      	b.n	801d684 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d862:	2000      	movs	r0, #0
 801d864:	e70e      	b.n	801d684 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d866:	4620      	mov	r0, r4
 801d868:	e70c      	b.n	801d684 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d86a:	2500      	movs	r5, #0
 801d86c:	e71e      	b.n	801d6ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801d86e:	2200      	movs	r2, #0
 801d870:	4615      	mov	r5, r2
 801d872:	e729      	b.n	801d6c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d874:	4662      	mov	r2, ip
 801d876:	4665      	mov	r5, ip
 801d878:	e726      	b.n	801d6c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d87a:	2200      	movs	r2, #0
 801d87c:	e724      	b.n	801d6c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d87e:	4622      	mov	r2, r4
 801d880:	e722      	b.n	801d6c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801d882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d886:	b09b      	sub	sp, #108	@ 0x6c
 801d888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d88c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d88e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d890:	9019      	str	r0, [sp, #100]	@ 0x64
 801d892:	9116      	str	r1, [sp, #88]	@ 0x58
 801d894:	6850      	ldr	r0, [r2, #4]
 801d896:	9307      	str	r3, [sp, #28]
 801d898:	6812      	ldr	r2, [r2, #0]
 801d89a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801d89c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801d8a0:	fb00 1303 	mla	r3, r0, r3, r1
 801d8a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8a8:	18d3      	adds	r3, r2, r3
 801d8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d8ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d8b2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d8b4:	685e      	ldr	r6, [r3, #4]
 801d8b6:	3604      	adds	r6, #4
 801d8b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	dc03      	bgt.n	801d8c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d8be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	f340 834f 	ble.w	801df64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d8c6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d8c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d8cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d8d0:	1e48      	subs	r0, r1, #1
 801d8d2:	1e57      	subs	r7, r2, #1
 801d8d4:	9b07      	ldr	r3, [sp, #28]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	f340 8178 	ble.w	801dbcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d8dc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d8de:	142b      	asrs	r3, r5, #16
 801d8e0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d8e4:	d406      	bmi.n	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8e6:	4584      	cmp	ip, r0
 801d8e8:	da04      	bge.n	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	db02      	blt.n	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8ee:	42bb      	cmp	r3, r7
 801d8f0:	f2c0 816d 	blt.w	801dbce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d8f4:	f11c 0c01 	adds.w	ip, ip, #1
 801d8f8:	f100 815b 	bmi.w	801dbb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d8fc:	4561      	cmp	r1, ip
 801d8fe:	f2c0 8158 	blt.w	801dbb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d902:	3301      	adds	r3, #1
 801d904:	f100 8155 	bmi.w	801dbb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d908:	429a      	cmp	r2, r3
 801d90a:	f2c0 8152 	blt.w	801dbb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d90e:	9b07      	ldr	r3, [sp, #28]
 801d910:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801d912:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d914:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d916:	2b00      	cmp	r3, #0
 801d918:	f340 8178 	ble.w	801dc0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d91c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d91e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d922:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d926:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d92a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d92c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d930:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d932:	141b      	asrs	r3, r3, #16
 801d934:	f100 81ba 	bmi.w	801dcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d938:	f101 38ff 	add.w	r8, r1, #4294967295
 801d93c:	4543      	cmp	r3, r8
 801d93e:	f280 81b5 	bge.w	801dcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d942:	f1bc 0f00 	cmp.w	ip, #0
 801d946:	f2c0 81b1 	blt.w	801dcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d94a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d94e:	45c4      	cmp	ip, r8
 801d950:	f280 81ac 	bge.w	801dcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d954:	b209      	sxth	r1, r1
 801d956:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d958:	fb0c 3301 	mla	r3, ip, r1, r3
 801d95c:	eb04 0803 	add.w	r8, r4, r3
 801d960:	5ce3      	ldrb	r3, [r4, r3]
 801d962:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d966:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d96a:	2a00      	cmp	r2, #0
 801d96c:	f000 8193 	beq.w	801dc96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801d970:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d974:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d978:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d97a:	0e24      	lsrs	r4, r4, #24
 801d97c:	9412      	str	r4, [sp, #72]	@ 0x48
 801d97e:	b178      	cbz	r0, 801d9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d980:	eb08 0c01 	add.w	ip, r8, r1
 801d984:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d988:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d98c:	9108      	str	r1, [sp, #32]
 801d98e:	0e09      	lsrs	r1, r1, #24
 801d990:	9110      	str	r1, [sp, #64]	@ 0x40
 801d992:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d996:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d99a:	910c      	str	r1, [sp, #48]	@ 0x30
 801d99c:	0e09      	lsrs	r1, r1, #24
 801d99e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d9a0:	b292      	uxth	r2, r2
 801d9a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d9a4:	b280      	uxth	r0, r0
 801d9a6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d9a8:	fb02 f900 	mul.w	r9, r2, r0
 801d9ac:	0112      	lsls	r2, r2, #4
 801d9ae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d9b2:	eba2 0809 	sub.w	r8, r2, r9
 801d9b6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d9ba:	b280      	uxth	r0, r0
 801d9bc:	fa1f f888 	uxth.w	r8, r8
 801d9c0:	1a12      	subs	r2, r2, r0
 801d9c2:	fb08 f101 	mul.w	r1, r8, r1
 801d9c6:	b292      	uxth	r2, r2
 801d9c8:	fb02 110e 	mla	r1, r2, lr, r1
 801d9cc:	fb00 1104 	mla	r1, r0, r4, r1
 801d9d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d9d2:	fb09 1104 	mla	r1, r9, r4, r1
 801d9d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d9da:	2900      	cmp	r1, #0
 801d9dc:	f000 80de 	beq.w	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d9e0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d9e4:	d01b      	beq.n	801da1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801d9e6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d9ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d9ee:	fb0e fa0a 	mul.w	sl, lr, sl
 801d9f2:	fb0e fe03 	mul.w	lr, lr, r3
 801d9f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d9fa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d9fe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801da02:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801da06:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801da0a:	4453      	add	r3, sl
 801da0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da10:	0a1b      	lsrs	r3, r3, #8
 801da12:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801da16:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801da1a:	ea43 030c 	orr.w	r3, r3, ip
 801da1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801da20:	2cff      	cmp	r4, #255	@ 0xff
 801da22:	d021      	beq.n	801da68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801da24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801da26:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801da2a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801da2c:	fb04 fb0b 	mul.w	fp, r4, fp
 801da30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801da32:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801da36:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801da38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801da3c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801da40:	fb04 fa0a 	mul.w	sl, r4, sl
 801da44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da48:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801da4c:	44de      	add	lr, fp
 801da4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801da62:	ea4e 040a 	orr.w	r4, lr, sl
 801da66:	940b      	str	r4, [sp, #44]	@ 0x2c
 801da68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da6a:	2cff      	cmp	r4, #255	@ 0xff
 801da6c:	d021      	beq.n	801dab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801da6e:	9c08      	ldr	r4, [sp, #32]
 801da70:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801da74:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da76:	fb04 fb0b 	mul.w	fp, r4, fp
 801da7a:	9c08      	ldr	r4, [sp, #32]
 801da7c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801da80:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801da86:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801da8a:	fb04 fa0a 	mul.w	sl, r4, sl
 801da8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da92:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801da96:	44de      	add	lr, fp
 801da98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801daa0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801daa4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801daa8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801daac:	ea4e 040a 	orr.w	r4, lr, sl
 801dab0:	9408      	str	r4, [sp, #32]
 801dab2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dab4:	2cff      	cmp	r4, #255	@ 0xff
 801dab6:	d021      	beq.n	801dafc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dab8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801daba:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dabe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dac0:	fb04 fb0b 	mul.w	fp, r4, fp
 801dac4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dac6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801daca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dacc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dad0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dad4:	fb04 fa0a 	mul.w	sl, r4, sl
 801dad8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dadc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dae0:	44de      	add	lr, fp
 801dae2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801daea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801daee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801daf2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801daf6:	ea4e 040a 	orr.w	r4, lr, sl
 801dafa:	940c      	str	r4, [sp, #48]	@ 0x30
 801dafc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dafe:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801db02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801db06:	43c9      	mvns	r1, r1
 801db08:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801db0c:	9c08      	ldr	r4, [sp, #32]
 801db0e:	b2c9      	uxtb	r1, r1
 801db10:	fb08 fc0c 	mul.w	ip, r8, ip
 801db14:	fb02 cc0e 	mla	ip, r2, lr, ip
 801db18:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801db1c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801db1e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801db22:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801db26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801db28:	fb09 cc0e 	mla	ip, r9, lr, ip
 801db2c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801db30:	fb08 f80e 	mul.w	r8, r8, lr
 801db34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db38:	fb02 8303 	mla	r3, r2, r3, r8
 801db3c:	9a08      	ldr	r2, [sp, #32]
 801db3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801db42:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801db46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801db48:	fb00 330a 	mla	r3, r0, sl, r3
 801db4c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801db50:	fb09 3900 	mla	r9, r9, r0, r3
 801db54:	783b      	ldrb	r3, [r7, #0]
 801db56:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801db5a:	fb03 f201 	mul.w	r2, r3, r1
 801db5e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801db62:	1c53      	adds	r3, r2, #1
 801db64:	ea4c 0c09 	orr.w	ip, ip, r9
 801db68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db6c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801db70:	703b      	strb	r3, [r7, #0]
 801db72:	787b      	ldrb	r3, [r7, #1]
 801db74:	434b      	muls	r3, r1
 801db76:	1c5a      	adds	r2, r3, #1
 801db78:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801db7c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801db80:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801db84:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db88:	707b      	strb	r3, [r7, #1]
 801db8a:	78bb      	ldrb	r3, [r7, #2]
 801db8c:	4359      	muls	r1, r3
 801db8e:	1c4b      	adds	r3, r1, #1
 801db90:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801db94:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801db98:	f887 c002 	strb.w	ip, [r7, #2]
 801db9c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801db9e:	3703      	adds	r7, #3
 801dba0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801dba2:	441a      	add	r2, r3
 801dba4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dba6:	441d      	add	r5, r3
 801dba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dbaa:	9225      	str	r2, [sp, #148]	@ 0x94
 801dbac:	3b01      	subs	r3, #1
 801dbae:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dbb0:	e6b0      	b.n	801d914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dbb2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dbb4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801dbb6:	441c      	add	r4, r3
 801dbb8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dbba:	441d      	add	r5, r3
 801dbbc:	9b07      	ldr	r3, [sp, #28]
 801dbbe:	9425      	str	r4, [sp, #148]	@ 0x94
 801dbc0:	3b01      	subs	r3, #1
 801dbc2:	9307      	str	r3, [sp, #28]
 801dbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbc6:	3303      	adds	r3, #3
 801dbc8:	930a      	str	r3, [sp, #40]	@ 0x28
 801dbca:	e683      	b.n	801d8d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801dbcc:	d026      	beq.n	801dc1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801dbce:	9b07      	ldr	r3, [sp, #28]
 801dbd0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801dbd2:	3b01      	subs	r3, #1
 801dbd4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801dbd6:	fb00 4003 	mla	r0, r0, r3, r4
 801dbda:	1400      	asrs	r0, r0, #16
 801dbdc:	f53f ae97 	bmi.w	801d90e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dbe0:	3901      	subs	r1, #1
 801dbe2:	4288      	cmp	r0, r1
 801dbe4:	f6bf ae93 	bge.w	801d90e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dbe8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801dbea:	fb01 5303 	mla	r3, r1, r3, r5
 801dbee:	141b      	asrs	r3, r3, #16
 801dbf0:	f53f ae8d 	bmi.w	801d90e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dbf4:	3a01      	subs	r2, #1
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	f6bf ae89 	bge.w	801d90e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbfe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801dc02:	f103 0e03 	add.w	lr, r3, #3
 801dc06:	f1bb 0f00 	cmp.w	fp, #0
 801dc0a:	dc6d      	bgt.n	801dce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801dc0c:	9b07      	ldr	r3, [sp, #28]
 801dc0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dc12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc18:	4423      	add	r3, r4
 801dc1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	f340 81a0 	ble.w	801df64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801dc24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc2e:	eeb0 6a62 	vmov.f32	s12, s5
 801dc32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc3e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801dc42:	eeb0 6a43 	vmov.f32	s12, s6
 801dc46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc4a:	ee16 5a10 	vmov	r5, s12
 801dc4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc66:	ee12 2a90 	vmov	r2, s5
 801dc6a:	eef0 2a47 	vmov.f32	s5, s14
 801dc6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc72:	ee13 2a10 	vmov	r2, s6
 801dc76:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dc78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc7a:	eeb0 3a67 	vmov.f32	s6, s15
 801dc7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc82:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dc84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dc86:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dc88:	3b01      	subs	r3, #1
 801dc8a:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc8e:	bf08      	it	eq
 801dc90:	4613      	moveq	r3, r2
 801dc92:	9307      	str	r3, [sp, #28]
 801dc94:	e610      	b.n	801d8b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dc96:	2800      	cmp	r0, #0
 801dc98:	f43f ae82 	beq.w	801d9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dc9c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dca0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dca4:	9108      	str	r1, [sp, #32]
 801dca6:	0e09      	lsrs	r1, r1, #24
 801dca8:	9110      	str	r1, [sp, #64]	@ 0x40
 801dcaa:	e679      	b.n	801d9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dcac:	f113 0801 	adds.w	r8, r3, #1
 801dcb0:	f53f af74 	bmi.w	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcb4:	4541      	cmp	r1, r8
 801dcb6:	f6ff af71 	blt.w	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcba:	f11c 0801 	adds.w	r8, ip, #1
 801dcbe:	f53f af6d 	bmi.w	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcc2:	45c6      	cmp	lr, r8
 801dcc4:	f6ff af6a 	blt.w	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcc8:	b209      	sxth	r1, r1
 801dcca:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801dcce:	fa0f f38e 	sxth.w	r3, lr
 801dcd2:	9100      	str	r1, [sp, #0]
 801dcd4:	4639      	mov	r1, r7
 801dcd6:	9301      	str	r3, [sp, #4]
 801dcd8:	4633      	mov	r3, r6
 801dcda:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801dcde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dce0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801dce2:	f7ff fca3 	bl	801d62c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801dce6:	e759      	b.n	801db9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dce8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dcea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dcee:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801dcf0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dcf4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dcf6:	1427      	asrs	r7, r4, #16
 801dcf8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dcfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dcfe:	142b      	asrs	r3, r5, #16
 801dd00:	fb01 7303 	mla	r3, r1, r3, r7
 801dd04:	18e7      	adds	r7, r4, r3
 801dd06:	5ce3      	ldrb	r3, [r4, r3]
 801dd08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dd0c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dd10:	2a00      	cmp	r2, #0
 801dd12:	f000 811d 	beq.w	801df50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801dd16:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dd1a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dd1e:	940d      	str	r4, [sp, #52]	@ 0x34
 801dd20:	0e24      	lsrs	r4, r4, #24
 801dd22:	9414      	str	r4, [sp, #80]	@ 0x50
 801dd24:	b170      	cbz	r0, 801dd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801dd26:	eb07 0801 	add.w	r8, r7, r1
 801dd2a:	5c79      	ldrb	r1, [r7, r1]
 801dd2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dd30:	9109      	str	r1, [sp, #36]	@ 0x24
 801dd32:	0e09      	lsrs	r1, r1, #24
 801dd34:	9111      	str	r1, [sp, #68]	@ 0x44
 801dd36:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dd3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dd3e:	910e      	str	r1, [sp, #56]	@ 0x38
 801dd40:	0e09      	lsrs	r1, r1, #24
 801dd42:	9115      	str	r1, [sp, #84]	@ 0x54
 801dd44:	b292      	uxth	r2, r2
 801dd46:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dd48:	b280      	uxth	r0, r0
 801dd4a:	fb02 f900 	mul.w	r9, r2, r0
 801dd4e:	0112      	lsls	r2, r2, #4
 801dd50:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dd54:	eba2 0809 	sub.w	r8, r2, r9
 801dd58:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801dd5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dd5e:	b280      	uxth	r0, r0
 801dd60:	fa1f f888 	uxth.w	r8, r8
 801dd64:	1a09      	subs	r1, r1, r0
 801dd66:	fb08 f202 	mul.w	r2, r8, r2
 801dd6a:	b289      	uxth	r1, r1
 801dd6c:	fb01 220c 	mla	r2, r1, ip, r2
 801dd70:	fb00 2204 	mla	r2, r0, r4, r2
 801dd74:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dd76:	fb09 2204 	mla	r2, r9, r4, r2
 801dd7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801dd7e:	2a00      	cmp	r2, #0
 801dd80:	f000 80db 	beq.w	801df3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801dd84:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801dd88:	d019      	beq.n	801ddbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801dd8a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dd8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dd92:	fb0c fa0a 	mul.w	sl, ip, sl
 801dd96:	fb0c fc03 	mul.w	ip, ip, r3
 801dd9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dd9e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dda2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801dda6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ddaa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ddae:	4453      	add	r3, sl
 801ddb0:	0a3f      	lsrs	r7, r7, #8
 801ddb2:	0a1b      	lsrs	r3, r3, #8
 801ddb4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801ddb8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ddbc:	433b      	orrs	r3, r7
 801ddbe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ddc0:	2cff      	cmp	r4, #255	@ 0xff
 801ddc2:	d020      	beq.n	801de06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801ddc4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ddc6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ddca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ddcc:	4367      	muls	r7, r4
 801ddce:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ddd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ddd4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ddd8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ddda:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ddde:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dde2:	fb04 fa0a 	mul.w	sl, r4, sl
 801dde6:	44bc      	add	ip, r7
 801dde8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ddec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddf0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ddf4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ddf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddfc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801de00:	ea4c 040a 	orr.w	r4, ip, sl
 801de04:	940d      	str	r4, [sp, #52]	@ 0x34
 801de06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de08:	2cff      	cmp	r4, #255	@ 0xff
 801de0a:	d020      	beq.n	801de4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801de0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801de0e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801de12:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de14:	4367      	muls	r7, r4
 801de16:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801de18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801de1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801de20:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de22:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801de26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801de2e:	44bc      	add	ip, r7
 801de30:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801de34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de3c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de44:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801de48:	ea4c 040a 	orr.w	r4, ip, sl
 801de4c:	9409      	str	r4, [sp, #36]	@ 0x24
 801de4e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de50:	2cff      	cmp	r4, #255	@ 0xff
 801de52:	d020      	beq.n	801de96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801de54:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801de56:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801de5a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de5c:	4367      	muls	r7, r4
 801de5e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801de60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801de64:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801de68:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de6a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801de6e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de72:	fb04 fa0a 	mul.w	sl, r4, sl
 801de76:	44bc      	add	ip, r7
 801de78:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801de7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de84:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801de90:	ea4c 040a 	orr.w	r4, ip, sl
 801de94:	940e      	str	r4, [sp, #56]	@ 0x38
 801de96:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801de98:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801de9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dea0:	43d2      	mvns	r2, r2
 801dea2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801dea6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801dea8:	b2d2      	uxtb	r2, r2
 801deaa:	fb08 f707 	mul.w	r7, r8, r7
 801deae:	fb01 770c 	mla	r7, r1, ip, r7
 801deb2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801deb6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801deb8:	fb00 770c 	mla	r7, r0, ip, r7
 801debc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dec0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dec2:	fb09 770c 	mla	r7, r9, ip, r7
 801dec6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801deca:	fb08 f80c 	mul.w	r8, r8, ip
 801dece:	0a3f      	lsrs	r7, r7, #8
 801ded0:	fb01 8303 	mla	r3, r1, r3, r8
 801ded4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ded6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801deda:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801dede:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dee0:	fb00 330a 	mla	r3, r0, sl, r3
 801dee4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801dee8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801deec:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801def0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801def4:	fb03 f102 	mul.w	r1, r3, r2
 801def8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801defc:	1c4b      	adds	r3, r1, #1
 801defe:	ea47 070c 	orr.w	r7, r7, ip
 801df02:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801df06:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801df0a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801df0e:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801df12:	4353      	muls	r3, r2
 801df14:	1c59      	adds	r1, r3, #1
 801df16:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801df1a:	0a3b      	lsrs	r3, r7, #8
 801df1c:	0c3f      	lsrs	r7, r7, #16
 801df1e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801df22:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801df26:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801df2a:	435a      	muls	r2, r3
 801df2c:	1c53      	adds	r3, r2, #1
 801df2e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801df32:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801df36:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801df3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801df3c:	f10e 0e03 	add.w	lr, lr, #3
 801df40:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801df42:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df46:	441a      	add	r2, r3
 801df48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df4a:	9225      	str	r2, [sp, #148]	@ 0x94
 801df4c:	441d      	add	r5, r3
 801df4e:	e65a      	b.n	801dc06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801df50:	2800      	cmp	r0, #0
 801df52:	f43f aef7 	beq.w	801dd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801df56:	5c79      	ldrb	r1, [r7, r1]
 801df58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df5c:	9109      	str	r1, [sp, #36]	@ 0x24
 801df5e:	0e09      	lsrs	r1, r1, #24
 801df60:	9111      	str	r1, [sp, #68]	@ 0x44
 801df62:	e6ef      	b.n	801dd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801df64:	b01b      	add	sp, #108	@ 0x6c
 801df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801df6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df6e:	b08d      	sub	sp, #52	@ 0x34
 801df70:	468b      	mov	fp, r1
 801df72:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801df76:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801df7a:	fb0c 5703 	mla	r7, ip, r3, r5
 801df7e:	f1bc 0f00 	cmp.w	ip, #0
 801df82:	910b      	str	r1, [sp, #44]	@ 0x2c
 801df84:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801df88:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801df8c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801df90:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801df94:	eb02 0607 	add.w	r6, r2, r7
 801df98:	f89b 4000 	ldrb.w	r4, [fp]
 801df9c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801dfa0:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801dfa4:	f2c0 80c1 	blt.w	801e12a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801dfa8:	45e6      	cmp	lr, ip
 801dfaa:	f340 80be 	ble.w	801e12a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801dfae:	2d00      	cmp	r5, #0
 801dfb0:	f2c0 80b7 	blt.w	801e122 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801dfb4:	42ab      	cmp	r3, r5
 801dfb6:	f340 80b4 	ble.w	801e122 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801dfba:	5dd2      	ldrb	r2, [r2, r7]
 801dfbc:	9205      	str	r2, [sp, #20]
 801dfbe:	7872      	ldrb	r2, [r6, #1]
 801dfc0:	9206      	str	r2, [sp, #24]
 801dfc2:	78b2      	ldrb	r2, [r6, #2]
 801dfc4:	9207      	str	r2, [sp, #28]
 801dfc6:	1c6a      	adds	r2, r5, #1
 801dfc8:	f100 80b6 	bmi.w	801e138 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dfcc:	4293      	cmp	r3, r2
 801dfce:	f340 80b3 	ble.w	801e138 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dfd2:	f1b8 0f00 	cmp.w	r8, #0
 801dfd6:	f000 80af 	beq.w	801e138 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dfda:	78f2      	ldrb	r2, [r6, #3]
 801dfdc:	9201      	str	r2, [sp, #4]
 801dfde:	7932      	ldrb	r2, [r6, #4]
 801dfe0:	9202      	str	r2, [sp, #8]
 801dfe2:	7972      	ldrb	r2, [r6, #5]
 801dfe4:	9203      	str	r2, [sp, #12]
 801dfe6:	f11c 0c01 	adds.w	ip, ip, #1
 801dfea:	f100 80ad 	bmi.w	801e148 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dfee:	45e6      	cmp	lr, ip
 801dff0:	f340 80aa 	ble.w	801e148 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dff4:	f1ba 0f00 	cmp.w	sl, #0
 801dff8:	f000 80a6 	beq.w	801e148 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dffc:	2d00      	cmp	r5, #0
 801dffe:	f2c0 809f 	blt.w	801e140 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e002:	42ab      	cmp	r3, r5
 801e004:	f340 809c 	ble.w	801e140 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e008:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e00c:	f816 9002 	ldrb.w	r9, [r6, r2]
 801e010:	2203      	movs	r2, #3
 801e012:	fb03 6c02 	mla	ip, r3, r2, r6
 801e016:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e01a:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e01e:	9704      	str	r7, [sp, #16]
 801e020:	3501      	adds	r5, #1
 801e022:	f100 8098 	bmi.w	801e156 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e026:	42ab      	cmp	r3, r5
 801e028:	f340 8095 	ble.w	801e156 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e02c:	f1b8 0f00 	cmp.w	r8, #0
 801e030:	f000 8091 	beq.w	801e156 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e034:	f04f 0c03 	mov.w	ip, #3
 801e038:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801e03c:	5cb5      	ldrb	r5, [r6, r2]
 801e03e:	fb03 620c 	mla	r2, r3, ip, r6
 801e042:	fb03 630c 	mla	r3, r3, ip, r6
 801e046:	7912      	ldrb	r2, [r2, #4]
 801e048:	795e      	ldrb	r6, [r3, #5]
 801e04a:	fa1f f388 	uxth.w	r3, r8
 801e04e:	fa1f fc8a 	uxth.w	ip, sl
 801e052:	fb03 f70c 	mul.w	r7, r3, ip
 801e056:	011b      	lsls	r3, r3, #4
 801e058:	9708      	str	r7, [sp, #32]
 801e05a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e05e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801e062:	1bdb      	subs	r3, r3, r7
 801e064:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801e068:	fa1f fc8c 	uxth.w	ip, ip
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	9709      	str	r7, [sp, #36]	@ 0x24
 801e070:	ebaa 0a0c 	sub.w	sl, sl, ip
 801e074:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e076:	930a      	str	r3, [sp, #40]	@ 0x28
 801e078:	fa1f fa8a 	uxth.w	sl, sl
 801e07c:	ea6f 0807 	mvn.w	r8, r7
 801e080:	9f01      	ldr	r7, [sp, #4]
 801e082:	435f      	muls	r7, r3
 801e084:	9b05      	ldr	r3, [sp, #20]
 801e086:	fa5f f888 	uxtb.w	r8, r8
 801e08a:	fb0a 7703 	mla	r7, sl, r3, r7
 801e08e:	9b08      	ldr	r3, [sp, #32]
 801e090:	fb14 f408 	smulbb	r4, r4, r8
 801e094:	fb0c 7709 	mla	r7, ip, r9, r7
 801e098:	fb10 f008 	smulbb	r0, r0, r8
 801e09c:	fb11 f108 	smulbb	r1, r1, r8
 801e0a0:	fb03 7705 	mla	r7, r3, r5, r7
 801e0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0a6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e0aa:	fb07 4703 	mla	r7, r7, r3, r4
 801e0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0b0:	b2bf      	uxth	r7, r7
 801e0b2:	1c7c      	adds	r4, r7, #1
 801e0b4:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801e0b8:	1224      	asrs	r4, r4, #8
 801e0ba:	f88b 4000 	strb.w	r4, [fp]
 801e0be:	9c02      	ldr	r4, [sp, #8]
 801e0c0:	435c      	muls	r4, r3
 801e0c2:	9b06      	ldr	r3, [sp, #24]
 801e0c4:	fb0a 4403 	mla	r4, sl, r3, r4
 801e0c8:	9b04      	ldr	r3, [sp, #16]
 801e0ca:	fb0c 4403 	mla	r4, ip, r3, r4
 801e0ce:	9b08      	ldr	r3, [sp, #32]
 801e0d0:	fb03 4402 	mla	r4, r3, r2, r4
 801e0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e0dc:	fb04 0403 	mla	r4, r4, r3, r0
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	435a      	muls	r2, r3
 801e0e4:	b2a4      	uxth	r4, r4
 801e0e6:	4613      	mov	r3, r2
 801e0e8:	9a07      	ldr	r2, [sp, #28]
 801e0ea:	1c60      	adds	r0, r4, #1
 801e0ec:	fb0a 3a02 	mla	sl, sl, r2, r3
 801e0f0:	9b08      	ldr	r3, [sp, #32]
 801e0f2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801e0f6:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e0fa:	1224      	asrs	r4, r4, #8
 801e0fc:	fb03 c606 	mla	r6, r3, r6, ip
 801e100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e102:	f88b 4001 	strb.w	r4, [fp, #1]
 801e106:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e10a:	fb06 1103 	mla	r1, r6, r3, r1
 801e10e:	b289      	uxth	r1, r1
 801e110:	1c4e      	adds	r6, r1, #1
 801e112:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e116:	1209      	asrs	r1, r1, #8
 801e118:	f88b 1002 	strb.w	r1, [fp, #2]
 801e11c:	b00d      	add	sp, #52	@ 0x34
 801e11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e122:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e126:	9405      	str	r4, [sp, #20]
 801e128:	e74d      	b.n	801dfc6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801e12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e12e:	9401      	str	r4, [sp, #4]
 801e130:	9405      	str	r4, [sp, #20]
 801e132:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e136:	e756      	b.n	801dfe6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e13c:	9401      	str	r4, [sp, #4]
 801e13e:	e752      	b.n	801dfe6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e140:	468e      	mov	lr, r1
 801e142:	9004      	str	r0, [sp, #16]
 801e144:	46a1      	mov	r9, r4
 801e146:	e76b      	b.n	801e020 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801e148:	460e      	mov	r6, r1
 801e14a:	4602      	mov	r2, r0
 801e14c:	4625      	mov	r5, r4
 801e14e:	468e      	mov	lr, r1
 801e150:	9004      	str	r0, [sp, #16]
 801e152:	46a1      	mov	r9, r4
 801e154:	e779      	b.n	801e04a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801e156:	460e      	mov	r6, r1
 801e158:	4602      	mov	r2, r0
 801e15a:	4625      	mov	r5, r4
 801e15c:	e775      	b.n	801e04a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801e15e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e162:	b09f      	sub	sp, #124	@ 0x7c
 801e164:	920e      	str	r2, [sp, #56]	@ 0x38
 801e166:	9307      	str	r3, [sp, #28]
 801e168:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801e16a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801e16e:	901d      	str	r0, [sp, #116]	@ 0x74
 801e170:	930c      	str	r3, [sp, #48]	@ 0x30
 801e172:	6850      	ldr	r0, [r2, #4]
 801e174:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e176:	6812      	ldr	r2, [r2, #0]
 801e178:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801e17c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801e180:	fb00 1303 	mla	r3, r0, r3, r1
 801e184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e188:	18d3      	adds	r3, r2, r3
 801e18a:	9308      	str	r3, [sp, #32]
 801e18c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	930a      	str	r3, [sp, #40]	@ 0x28
 801e192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e194:	43db      	mvns	r3, r3
 801e196:	b2db      	uxtb	r3, r3
 801e198:	9309      	str	r3, [sp, #36]	@ 0x24
 801e19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	dc03      	bgt.n	801e1a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	f340 81f5 	ble.w	801e592 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e1a8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e1aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e1ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e1b2:	1e48      	subs	r0, r1, #1
 801e1b4:	1e54      	subs	r4, r2, #1
 801e1b6:	9b07      	ldr	r3, [sp, #28]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	f340 80d5 	ble.w	801e368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e1be:	ea5f 452a 	movs.w	r5, sl, asr #16
 801e1c2:	ea4f 4328 	mov.w	r3, r8, asr #16
 801e1c6:	d406      	bmi.n	801e1d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e1c8:	4285      	cmp	r5, r0
 801e1ca:	da04      	bge.n	801e1d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	db02      	blt.n	801e1d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e1d0:	42a3      	cmp	r3, r4
 801e1d2:	f2c0 80ca 	blt.w	801e36a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e1d6:	3501      	adds	r5, #1
 801e1d8:	f100 80bb 	bmi.w	801e352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e1dc:	42a9      	cmp	r1, r5
 801e1de:	f2c0 80b8 	blt.w	801e352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e1e2:	3301      	adds	r3, #1
 801e1e4:	f100 80b5 	bmi.w	801e352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e1e8:	429a      	cmp	r2, r3
 801e1ea:	f2c0 80b2 	blt.w	801e352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e1ee:	9b07      	ldr	r3, [sp, #28]
 801e1f0:	9d08      	ldr	r5, [sp, #32]
 801e1f2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e1f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	f340 80d6 	ble.w	801e3a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801e1fc:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801e1fe:	ea4f 4428 	mov.w	r4, r8, asr #16
 801e202:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e204:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801e208:	68c6      	ldr	r6, [r0, #12]
 801e20a:	ea5f 402a 	movs.w	r0, sl, asr #16
 801e20e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801e212:	689b      	ldr	r3, [r3, #8]
 801e214:	f100 810f 	bmi.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e218:	1e5f      	subs	r7, r3, #1
 801e21a:	42b8      	cmp	r0, r7
 801e21c:	f280 810b 	bge.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e220:	2c00      	cmp	r4, #0
 801e222:	f2c0 8108 	blt.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e226:	1e77      	subs	r7, r6, #1
 801e228:	42bc      	cmp	r4, r7
 801e22a:	f280 8104 	bge.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e22e:	b21b      	sxth	r3, r3
 801e230:	fb04 0003 	mla	r0, r4, r3, r0
 801e234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e236:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e23a:	1826      	adds	r6, r4, r0
 801e23c:	5c24      	ldrb	r4, [r4, r0]
 801e23e:	78b7      	ldrb	r7, [r6, #2]
 801e240:	7870      	ldrb	r0, [r6, #1]
 801e242:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e244:	7977      	ldrb	r7, [r6, #5]
 801e246:	f896 e003 	ldrb.w	lr, [r6, #3]
 801e24a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801e24e:	9710      	str	r7, [sp, #64]	@ 0x40
 801e250:	b1c9      	cbz	r1, 801e286 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e252:	f04f 0b03 	mov.w	fp, #3
 801e256:	f06f 0904 	mvn.w	r9, #4
 801e25a:	3605      	adds	r6, #5
 801e25c:	fb13 930b 	smlabb	r3, r3, fp, r9
 801e260:	eb06 0b03 	add.w	fp, r6, r3
 801e264:	5cf3      	ldrb	r3, [r6, r3]
 801e266:	9311      	str	r3, [sp, #68]	@ 0x44
 801e268:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801e26c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e26e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e272:	9315      	str	r3, [sp, #84]	@ 0x54
 801e274:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801e278:	9312      	str	r3, [sp, #72]	@ 0x48
 801e27a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801e27e:	9314      	str	r3, [sp, #80]	@ 0x50
 801e280:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801e284:	9316      	str	r3, [sp, #88]	@ 0x58
 801e286:	b292      	uxth	r2, r2
 801e288:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e28a:	b289      	uxth	r1, r1
 801e28c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801e290:	fb02 f601 	mul.w	r6, r2, r1
 801e294:	0112      	lsls	r2, r2, #4
 801e296:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801e29a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801e29e:	1b92      	subs	r2, r2, r6
 801e2a0:	b289      	uxth	r1, r1
 801e2a2:	b292      	uxth	r2, r2
 801e2a4:	eba9 0901 	sub.w	r9, r9, r1
 801e2a8:	fb02 fe0e 	mul.w	lr, r2, lr
 801e2ac:	fa1f f989 	uxth.w	r9, r9
 801e2b0:	fb02 fc0c 	mul.w	ip, r2, ip
 801e2b4:	fb09 e404 	mla	r4, r9, r4, lr
 801e2b8:	f895 e000 	ldrb.w	lr, [r5]
 801e2bc:	fb09 c000 	mla	r0, r9, r0, ip
 801e2c0:	fb01 4407 	mla	r4, r1, r7, r4
 801e2c4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801e2c6:	fb06 4407 	mla	r4, r6, r7, r4
 801e2ca:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e2cc:	fb1e fe07 	smulbb	lr, lr, r7
 801e2d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e2d4:	fb04 e403 	mla	r4, r4, r3, lr
 801e2d8:	b2a4      	uxth	r4, r4
 801e2da:	f104 0e01 	add.w	lr, r4, #1
 801e2de:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801e2e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e2e4:	fb01 0004 	mla	r0, r1, r4, r0
 801e2e8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e2ea:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e2ee:	fb06 0004 	mla	r0, r6, r4, r0
 801e2f2:	786c      	ldrb	r4, [r5, #1]
 801e2f4:	f885 e000 	strb.w	lr, [r5]
 801e2f8:	fb14 f407 	smulbb	r4, r4, r7
 801e2fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e300:	fb00 4003 	mla	r0, r0, r3, r4
 801e304:	b280      	uxth	r0, r0
 801e306:	1c44      	adds	r4, r0, #1
 801e308:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e30c:	1200      	asrs	r0, r0, #8
 801e30e:	7068      	strb	r0, [r5, #1]
 801e310:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e312:	4342      	muls	r2, r0
 801e314:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e316:	fb09 2200 	mla	r2, r9, r0, r2
 801e31a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e31c:	fb01 2100 	mla	r1, r1, r0, r2
 801e320:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e322:	fb06 1602 	mla	r6, r6, r2, r1
 801e326:	78a9      	ldrb	r1, [r5, #2]
 801e328:	fb11 f107 	smulbb	r1, r1, r7
 801e32c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e330:	fb06 1303 	mla	r3, r6, r3, r1
 801e334:	b29b      	uxth	r3, r3
 801e336:	1c5e      	adds	r6, r3, #1
 801e338:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e33c:	121b      	asrs	r3, r3, #8
 801e33e:	70ab      	strb	r3, [r5, #2]
 801e340:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e342:	3503      	adds	r5, #3
 801e344:	449a      	add	sl, r3
 801e346:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e348:	4498      	add	r8, r3
 801e34a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e34c:	3b01      	subs	r3, #1
 801e34e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e350:	e750      	b.n	801e1f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e352:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e354:	449a      	add	sl, r3
 801e356:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e358:	4498      	add	r8, r3
 801e35a:	9b07      	ldr	r3, [sp, #28]
 801e35c:	3b01      	subs	r3, #1
 801e35e:	9307      	str	r3, [sp, #28]
 801e360:	9b08      	ldr	r3, [sp, #32]
 801e362:	3303      	adds	r3, #3
 801e364:	9308      	str	r3, [sp, #32]
 801e366:	e726      	b.n	801e1b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e368:	d026      	beq.n	801e3b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801e36a:	9b07      	ldr	r3, [sp, #28]
 801e36c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801e36e:	3b01      	subs	r3, #1
 801e370:	fb00 a003 	mla	r0, r0, r3, sl
 801e374:	1400      	asrs	r0, r0, #16
 801e376:	f53f af3a 	bmi.w	801e1ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e37a:	3901      	subs	r1, #1
 801e37c:	4288      	cmp	r0, r1
 801e37e:	f6bf af36 	bge.w	801e1ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e382:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e384:	fb01 8303 	mla	r3, r1, r3, r8
 801e388:	141b      	asrs	r3, r3, #16
 801e38a:	f53f af30 	bmi.w	801e1ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e38e:	3a01      	subs	r2, #1
 801e390:	4293      	cmp	r3, r2
 801e392:	f6bf af2c 	bge.w	801e1ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e396:	9b08      	ldr	r3, [sp, #32]
 801e398:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e39c:	1cdd      	adds	r5, r3, #3
 801e39e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801e3a2:	f1bc 0f00 	cmp.w	ip, #0
 801e3a6:	dc5f      	bgt.n	801e468 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801e3a8:	9b07      	ldr	r3, [sp, #28]
 801e3aa:	9a08      	ldr	r2, [sp, #32]
 801e3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3b4:	441a      	add	r2, r3
 801e3b6:	9208      	str	r2, [sp, #32]
 801e3b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	f340 80e9 	ble.w	801e592 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e3c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e3c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e3c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3ce:	eef0 6a62 	vmov.f32	s13, s5
 801e3d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e3d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e3de:	ee16 aa90 	vmov	sl, s13
 801e3e2:	eef0 6a43 	vmov.f32	s13, s6
 801e3e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e3ea:	ee16 8a90 	vmov	r8, s13
 801e3ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e3f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e406:	ee12 2a90 	vmov	r2, s5
 801e40a:	eef0 2a47 	vmov.f32	s5, s14
 801e40e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e412:	ee13 2a10 	vmov	r2, s6
 801e416:	932b      	str	r3, [sp, #172]	@ 0xac
 801e418:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e41a:	eeb0 3a67 	vmov.f32	s6, s15
 801e41e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e422:	932c      	str	r3, [sp, #176]	@ 0xb0
 801e424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e428:	3b01      	subs	r3, #1
 801e42a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e42c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e42e:	bf08      	it	eq
 801e430:	4613      	moveq	r3, r2
 801e432:	9307      	str	r3, [sp, #28]
 801e434:	e6b1      	b.n	801e19a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e436:	1c47      	adds	r7, r0, #1
 801e438:	d482      	bmi.n	801e340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e43a:	42bb      	cmp	r3, r7
 801e43c:	db80      	blt.n	801e340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e43e:	1c67      	adds	r7, r4, #1
 801e440:	f53f af7e 	bmi.w	801e340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e444:	42be      	cmp	r6, r7
 801e446:	f6ff af7b 	blt.w	801e340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e44a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e44c:	b236      	sxth	r6, r6
 801e44e:	9001      	str	r0, [sp, #4]
 801e450:	b21b      	sxth	r3, r3
 801e452:	9600      	str	r6, [sp, #0]
 801e454:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e456:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801e45a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e45e:	4629      	mov	r1, r5
 801e460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e462:	f7ff fd82 	bl	801df6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e466:	e76b      	b.n	801e340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e468:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801e46a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801e46e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801e472:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801e476:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801e47a:	ea4f 4128 	mov.w	r1, r8, asr #16
 801e47e:	fb07 0101 	mla	r1, r7, r1, r0
 801e482:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e484:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e488:	1844      	adds	r4, r0, r1
 801e48a:	5c40      	ldrb	r0, [r0, r1]
 801e48c:	78a6      	ldrb	r6, [r4, #2]
 801e48e:	7861      	ldrb	r1, [r4, #1]
 801e490:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e492:	78e6      	ldrb	r6, [r4, #3]
 801e494:	910d      	str	r1, [sp, #52]	@ 0x34
 801e496:	9610      	str	r6, [sp, #64]	@ 0x40
 801e498:	f894 9004 	ldrb.w	r9, [r4, #4]
 801e49c:	f894 b005 	ldrb.w	fp, [r4, #5]
 801e4a0:	b192      	cbz	r2, 801e4c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e4a2:	f06f 0604 	mvn.w	r6, #4
 801e4a6:	2103      	movs	r1, #3
 801e4a8:	3405      	adds	r4, #5
 801e4aa:	fb17 6701 	smlabb	r7, r7, r1, r6
 801e4ae:	19e6      	adds	r6, r4, r7
 801e4b0:	5de4      	ldrb	r4, [r4, r7]
 801e4b2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e4b4:	7874      	ldrb	r4, [r6, #1]
 801e4b6:	9419      	str	r4, [sp, #100]	@ 0x64
 801e4b8:	78b4      	ldrb	r4, [r6, #2]
 801e4ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 801e4bc:	78f4      	ldrb	r4, [r6, #3]
 801e4be:	9418      	str	r4, [sp, #96]	@ 0x60
 801e4c0:	7934      	ldrb	r4, [r6, #4]
 801e4c2:	941a      	str	r4, [sp, #104]	@ 0x68
 801e4c4:	7974      	ldrb	r4, [r6, #5]
 801e4c6:	941c      	str	r4, [sp, #112]	@ 0x70
 801e4c8:	b29b      	uxth	r3, r3
 801e4ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e4cc:	b292      	uxth	r2, r2
 801e4ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e4d0:	3503      	adds	r5, #3
 801e4d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e4d6:	fb03 f402 	mul.w	r4, r3, r2
 801e4da:	011b      	lsls	r3, r3, #4
 801e4dc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801e4e0:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801e4e4:	1b1b      	subs	r3, r3, r4
 801e4e6:	b292      	uxth	r2, r2
 801e4e8:	b29b      	uxth	r3, r3
 801e4ea:	1ab6      	subs	r6, r6, r2
 801e4ec:	435f      	muls	r7, r3
 801e4ee:	b2b6      	uxth	r6, r6
 801e4f0:	fb03 f909 	mul.w	r9, r3, r9
 801e4f4:	fb03 fb0b 	mul.w	fp, r3, fp
 801e4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4fa:	fb06 7000 	mla	r0, r6, r0, r7
 801e4fe:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801e500:	fb06 bb03 	mla	fp, r6, r3, fp
 801e504:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e506:	fb02 0007 	mla	r0, r2, r7, r0
 801e50a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801e50c:	fb02 bb03 	mla	fp, r2, r3, fp
 801e510:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e512:	fb04 0007 	mla	r0, r4, r7, r0
 801e516:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801e51a:	fb17 f701 	smulbb	r7, r7, r1
 801e51e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e522:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e524:	fb00 700e 	mla	r0, r0, lr, r7
 801e528:	fb06 9101 	mla	r1, r6, r1, r9
 801e52c:	b280      	uxth	r0, r0
 801e52e:	1c47      	adds	r7, r0, #1
 801e530:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801e534:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e536:	1200      	asrs	r0, r0, #8
 801e538:	f805 0c06 	strb.w	r0, [r5, #-6]
 801e53c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e53e:	fb02 1100 	mla	r1, r2, r0, r1
 801e542:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801e544:	fb04 1100 	mla	r1, r4, r0, r1
 801e548:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801e54c:	fb04 b403 	mla	r4, r4, r3, fp
 801e550:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801e554:	fb10 f007 	smulbb	r0, r0, r7
 801e558:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e55c:	fb13 f307 	smulbb	r3, r3, r7
 801e560:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e564:	fb01 010e 	mla	r1, r1, lr, r0
 801e568:	fb04 340e 	mla	r4, r4, lr, r3
 801e56c:	b289      	uxth	r1, r1
 801e56e:	b2a4      	uxth	r4, r4
 801e570:	1c48      	adds	r0, r1, #1
 801e572:	1c63      	adds	r3, r4, #1
 801e574:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e578:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e57c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e57e:	1209      	asrs	r1, r1, #8
 801e580:	1224      	asrs	r4, r4, #8
 801e582:	449a      	add	sl, r3
 801e584:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e586:	f805 1c05 	strb.w	r1, [r5, #-5]
 801e58a:	f805 4c04 	strb.w	r4, [r5, #-4]
 801e58e:	4498      	add	r8, r3
 801e590:	e707      	b.n	801e3a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e592:	b01f      	add	sp, #124	@ 0x7c
 801e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e598 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e59c:	b087      	sub	sp, #28
 801e59e:	780d      	ldrb	r5, [r1, #0]
 801e5a0:	784c      	ldrb	r4, [r1, #1]
 801e5a2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801e5a6:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801e5aa:	9004      	str	r0, [sp, #16]
 801e5ac:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801e5b0:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801e5b4:	9005      	str	r0, [sp, #20]
 801e5b6:	fb06 bc03 	mla	ip, r6, r3, fp
 801e5ba:	2e00      	cmp	r6, #0
 801e5bc:	7888      	ldrb	r0, [r1, #2]
 801e5be:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e5c2:	eb02 090c 	add.w	r9, r2, ip
 801e5c6:	f2c0 8084 	blt.w	801e6d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e5ca:	42b7      	cmp	r7, r6
 801e5cc:	f340 8081 	ble.w	801e6d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e5d0:	f1bb 0f00 	cmp.w	fp, #0
 801e5d4:	db79      	blt.n	801e6ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e5d6:	455b      	cmp	r3, fp
 801e5d8:	dd77      	ble.n	801e6ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e5da:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e5de:	9201      	str	r2, [sp, #4]
 801e5e0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e5e4:	9202      	str	r2, [sp, #8]
 801e5e6:	f899 2002 	ldrb.w	r2, [r9, #2]
 801e5ea:	9203      	str	r2, [sp, #12]
 801e5ec:	f11b 0201 	adds.w	r2, fp, #1
 801e5f0:	d476      	bmi.n	801e6e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e5f2:	4293      	cmp	r3, r2
 801e5f4:	dd74      	ble.n	801e6e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e5f6:	9a04      	ldr	r2, [sp, #16]
 801e5f8:	2a00      	cmp	r2, #0
 801e5fa:	d071      	beq.n	801e6e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e5fc:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e600:	f899 c004 	ldrb.w	ip, [r9, #4]
 801e604:	f899 a005 	ldrb.w	sl, [r9, #5]
 801e608:	3601      	adds	r6, #1
 801e60a:	d471      	bmi.n	801e6f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e60c:	42b7      	cmp	r7, r6
 801e60e:	dd6f      	ble.n	801e6f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e610:	9a05      	ldr	r2, [sp, #20]
 801e612:	2a00      	cmp	r2, #0
 801e614:	d06c      	beq.n	801e6f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e616:	f1bb 0f00 	cmp.w	fp, #0
 801e61a:	db65      	blt.n	801e6e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e61c:	455b      	cmp	r3, fp
 801e61e:	dd63      	ble.n	801e6e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e620:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e624:	f819 e002 	ldrb.w	lr, [r9, r2]
 801e628:	2203      	movs	r2, #3
 801e62a:	fb03 9602 	mla	r6, r3, r2, r9
 801e62e:	7877      	ldrb	r7, [r6, #1]
 801e630:	78b6      	ldrb	r6, [r6, #2]
 801e632:	f11b 0b01 	adds.w	fp, fp, #1
 801e636:	d40c      	bmi.n	801e652 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e638:	455b      	cmp	r3, fp
 801e63a:	dd0a      	ble.n	801e652 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e63c:	9a04      	ldr	r2, [sp, #16]
 801e63e:	b142      	cbz	r2, 801e652 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e640:	2203      	movs	r2, #3
 801e642:	fb13 2002 	smlabb	r0, r3, r2, r2
 801e646:	f819 5000 	ldrb.w	r5, [r9, r0]
 801e64a:	fb03 9002 	mla	r0, r3, r2, r9
 801e64e:	7904      	ldrb	r4, [r0, #4]
 801e650:	7940      	ldrb	r0, [r0, #5]
 801e652:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e656:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e65a:	fb03 fb02 	mul.w	fp, r3, r2
 801e65e:	011b      	lsls	r3, r3, #4
 801e660:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801e664:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801e668:	eba3 030b 	sub.w	r3, r3, fp
 801e66c:	b292      	uxth	r2, r2
 801e66e:	b29b      	uxth	r3, r3
 801e670:	eba9 0902 	sub.w	r9, r9, r2
 801e674:	9304      	str	r3, [sp, #16]
 801e676:	fa1f f989 	uxth.w	r9, r9
 801e67a:	fb03 f808 	mul.w	r8, r3, r8
 801e67e:	9b01      	ldr	r3, [sp, #4]
 801e680:	fb09 8803 	mla	r8, r9, r3, r8
 801e684:	9b04      	ldr	r3, [sp, #16]
 801e686:	fb03 fc0c 	mul.w	ip, r3, ip
 801e68a:	9b02      	ldr	r3, [sp, #8]
 801e68c:	fb02 880e 	mla	r8, r2, lr, r8
 801e690:	fb09 cc03 	mla	ip, r9, r3, ip
 801e694:	9b04      	ldr	r3, [sp, #16]
 801e696:	fb0b 8805 	mla	r8, fp, r5, r8
 801e69a:	fb02 c707 	mla	r7, r2, r7, ip
 801e69e:	fb03 f30a 	mul.w	r3, r3, sl
 801e6a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e6a6:	fb0b 7404 	mla	r4, fp, r4, r7
 801e6aa:	f881 8000 	strb.w	r8, [r1]
 801e6ae:	1224      	asrs	r4, r4, #8
 801e6b0:	704c      	strb	r4, [r1, #1]
 801e6b2:	9c03      	ldr	r4, [sp, #12]
 801e6b4:	fb09 3904 	mla	r9, r9, r4, r3
 801e6b8:	fb02 9206 	mla	r2, r2, r6, r9
 801e6bc:	fb0b 2000 	mla	r0, fp, r0, r2
 801e6c0:	1200      	asrs	r0, r0, #8
 801e6c2:	7088      	strb	r0, [r1, #2]
 801e6c4:	b007      	add	sp, #28
 801e6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ca:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e6ce:	9501      	str	r5, [sp, #4]
 801e6d0:	e78c      	b.n	801e5ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801e6d2:	4682      	mov	sl, r0
 801e6d4:	46a4      	mov	ip, r4
 801e6d6:	46a8      	mov	r8, r5
 801e6d8:	9501      	str	r5, [sp, #4]
 801e6da:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e6de:	e793      	b.n	801e608 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e6e0:	4682      	mov	sl, r0
 801e6e2:	46a4      	mov	ip, r4
 801e6e4:	46a8      	mov	r8, r5
 801e6e6:	e78f      	b.n	801e608 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e6e8:	4606      	mov	r6, r0
 801e6ea:	4627      	mov	r7, r4
 801e6ec:	46ae      	mov	lr, r5
 801e6ee:	e7a0      	b.n	801e632 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e6f0:	4606      	mov	r6, r0
 801e6f2:	4627      	mov	r7, r4
 801e6f4:	46ae      	mov	lr, r5
 801e6f6:	e7ac      	b.n	801e652 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801e6f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6fc:	b09b      	sub	sp, #108	@ 0x6c
 801e6fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e700:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e702:	9019      	str	r0, [sp, #100]	@ 0x64
 801e704:	9109      	str	r1, [sp, #36]	@ 0x24
 801e706:	6850      	ldr	r0, [r2, #4]
 801e708:	9306      	str	r3, [sp, #24]
 801e70a:	6812      	ldr	r2, [r2, #0]
 801e70c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e710:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801e714:	fb00 1303 	mla	r3, r0, r3, r1
 801e718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e71c:	18d3      	adds	r3, r2, r3
 801e71e:	9307      	str	r3, [sp, #28]
 801e720:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	9308      	str	r3, [sp, #32]
 801e726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e728:	2b00      	cmp	r3, #0
 801e72a:	dc03      	bgt.n	801e734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e72c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e72e:	2b00      	cmp	r3, #0
 801e730:	f340 81ab 	ble.w	801ea8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e734:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e736:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e73a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e73e:	1e48      	subs	r0, r1, #1
 801e740:	1e55      	subs	r5, r2, #1
 801e742:	9b06      	ldr	r3, [sp, #24]
 801e744:	2b00      	cmp	r3, #0
 801e746:	f340 80b1 	ble.w	801e8ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e74a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801e74e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801e752:	d406      	bmi.n	801e762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e754:	4286      	cmp	r6, r0
 801e756:	da04      	bge.n	801e762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e758:	2b00      	cmp	r3, #0
 801e75a:	db02      	blt.n	801e762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e75c:	42ab      	cmp	r3, r5
 801e75e:	f2c0 80a6 	blt.w	801e8ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e762:	3601      	adds	r6, #1
 801e764:	f100 8097 	bmi.w	801e896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e768:	42b1      	cmp	r1, r6
 801e76a:	f2c0 8094 	blt.w	801e896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e76e:	3301      	adds	r3, #1
 801e770:	f100 8091 	bmi.w	801e896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e774:	429a      	cmp	r2, r3
 801e776:	f2c0 808e 	blt.w	801e896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e77a:	9b06      	ldr	r3, [sp, #24]
 801e77c:	9e07      	ldr	r6, [sp, #28]
 801e77e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e782:	2b00      	cmp	r3, #0
 801e784:	f340 80b0 	ble.w	801e8e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e788:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801e78a:	1425      	asrs	r5, r4, #16
 801e78c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e78e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e792:	68c7      	ldr	r7, [r0, #12]
 801e794:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e798:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e79c:	689b      	ldr	r3, [r3, #8]
 801e79e:	f100 80ea 	bmi.w	801e976 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e7a2:	f103 3cff 	add.w	ip, r3, #4294967295
 801e7a6:	4560      	cmp	r0, ip
 801e7a8:	f280 80e5 	bge.w	801e976 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e7ac:	2d00      	cmp	r5, #0
 801e7ae:	f2c0 80e2 	blt.w	801e976 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e7b2:	f107 3cff 	add.w	ip, r7, #4294967295
 801e7b6:	4565      	cmp	r5, ip
 801e7b8:	f280 80dd 	bge.w	801e976 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e7bc:	b21b      	sxth	r3, r3
 801e7be:	fb05 0003 	mla	r0, r5, r3, r0
 801e7c2:	9d08      	ldr	r5, [sp, #32]
 801e7c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e7c8:	182f      	adds	r7, r5, r0
 801e7ca:	5c2d      	ldrb	r5, [r5, r0]
 801e7cc:	7878      	ldrb	r0, [r7, #1]
 801e7ce:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e7d2:	900c      	str	r0, [sp, #48]	@ 0x30
 801e7d4:	f897 9003 	ldrb.w	r9, [r7, #3]
 801e7d8:	f897 8004 	ldrb.w	r8, [r7, #4]
 801e7dc:	f897 a005 	ldrb.w	sl, [r7, #5]
 801e7e0:	b1c9      	cbz	r1, 801e816 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e7e2:	f04f 0c03 	mov.w	ip, #3
 801e7e6:	f06f 0004 	mvn.w	r0, #4
 801e7ea:	3705      	adds	r7, #5
 801e7ec:	fb13 030c 	smlabb	r3, r3, ip, r0
 801e7f0:	eb07 0c03 	add.w	ip, r7, r3
 801e7f4:	5cfb      	ldrb	r3, [r7, r3]
 801e7f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e7f8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e7fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e7fe:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e802:	9311      	str	r3, [sp, #68]	@ 0x44
 801e804:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e808:	930e      	str	r3, [sp, #56]	@ 0x38
 801e80a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801e80e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e810:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801e814:	9312      	str	r3, [sp, #72]	@ 0x48
 801e816:	b292      	uxth	r2, r2
 801e818:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e81a:	b289      	uxth	r1, r1
 801e81c:	fb02 f301 	mul.w	r3, r2, r1
 801e820:	0112      	lsls	r2, r2, #4
 801e822:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e826:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801e82a:	1ad2      	subs	r2, r2, r3
 801e82c:	b289      	uxth	r1, r1
 801e82e:	b292      	uxth	r2, r2
 801e830:	1a7f      	subs	r7, r7, r1
 801e832:	fb02 f909 	mul.w	r9, r2, r9
 801e836:	b2bf      	uxth	r7, r7
 801e838:	fb02 f808 	mul.w	r8, r2, r8
 801e83c:	fb02 fa0a 	mul.w	sl, r2, sl
 801e840:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e842:	fb07 9905 	mla	r9, r7, r5, r9
 801e846:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e848:	fb07 8800 	mla	r8, r7, r0, r8
 801e84c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e84e:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e852:	fb01 9905 	mla	r9, r1, r5, r9
 801e856:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801e858:	fb01 8800 	mla	r8, r1, r0, r8
 801e85c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e85e:	fb01 a102 	mla	r1, r1, r2, sl
 801e862:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e864:	fb03 9905 	mla	r9, r3, r5, r9
 801e868:	fb03 8800 	mla	r8, r3, r0, r8
 801e86c:	fb03 1302 	mla	r3, r3, r2, r1
 801e870:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e874:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e878:	121b      	asrs	r3, r3, #8
 801e87a:	f886 9000 	strb.w	r9, [r6]
 801e87e:	f886 8001 	strb.w	r8, [r6, #1]
 801e882:	70b3      	strb	r3, [r6, #2]
 801e884:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e886:	3603      	adds	r6, #3
 801e888:	449b      	add	fp, r3
 801e88a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e88c:	441c      	add	r4, r3
 801e88e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e890:	3b01      	subs	r3, #1
 801e892:	930a      	str	r3, [sp, #40]	@ 0x28
 801e894:	e774      	b.n	801e780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e896:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e898:	449b      	add	fp, r3
 801e89a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e89c:	441c      	add	r4, r3
 801e89e:	9b06      	ldr	r3, [sp, #24]
 801e8a0:	3b01      	subs	r3, #1
 801e8a2:	9306      	str	r3, [sp, #24]
 801e8a4:	9b07      	ldr	r3, [sp, #28]
 801e8a6:	3303      	adds	r3, #3
 801e8a8:	9307      	str	r3, [sp, #28]
 801e8aa:	e74a      	b.n	801e742 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e8ac:	d024      	beq.n	801e8f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e8ae:	9b06      	ldr	r3, [sp, #24]
 801e8b0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e8b2:	3b01      	subs	r3, #1
 801e8b4:	fb00 b003 	mla	r0, r0, r3, fp
 801e8b8:	1400      	asrs	r0, r0, #16
 801e8ba:	f53f af5e 	bmi.w	801e77a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e8be:	3901      	subs	r1, #1
 801e8c0:	4288      	cmp	r0, r1
 801e8c2:	f6bf af5a 	bge.w	801e77a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e8c6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e8c8:	fb01 4303 	mla	r3, r1, r3, r4
 801e8cc:	141b      	asrs	r3, r3, #16
 801e8ce:	f53f af54 	bmi.w	801e77a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e8d2:	3a01      	subs	r2, #1
 801e8d4:	4293      	cmp	r3, r2
 801e8d6:	f6bf af50 	bge.w	801e77a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e8da:	9b07      	ldr	r3, [sp, #28]
 801e8dc:	f8dd e018 	ldr.w	lr, [sp, #24]
 801e8e0:	1cde      	adds	r6, r3, #3
 801e8e2:	f1be 0f00 	cmp.w	lr, #0
 801e8e6:	dc5f      	bgt.n	801e9a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e8e8:	9b06      	ldr	r3, [sp, #24]
 801e8ea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8ee:	9b07      	ldr	r3, [sp, #28]
 801e8f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e8f4:	4423      	add	r3, r4
 801e8f6:	9307      	str	r3, [sp, #28]
 801e8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	f340 80c5 	ble.w	801ea8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e904:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e906:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e90a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e90e:	eef0 6a62 	vmov.f32	s13, s5
 801e912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e916:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e91a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e91e:	ee16 ba90 	vmov	fp, s13
 801e922:	eef0 6a43 	vmov.f32	s13, s6
 801e926:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e92a:	ee16 4a90 	vmov	r4, s13
 801e92e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e932:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e936:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e93e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e946:	ee12 2a90 	vmov	r2, s5
 801e94a:	eef0 2a47 	vmov.f32	s5, s14
 801e94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e952:	ee13 2a10 	vmov	r2, s6
 801e956:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e958:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e95a:	eeb0 3a67 	vmov.f32	s6, s15
 801e95e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e962:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e966:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e968:	3b01      	subs	r3, #1
 801e96a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e96c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e96e:	bf08      	it	eq
 801e970:	4613      	moveq	r3, r2
 801e972:	9306      	str	r3, [sp, #24]
 801e974:	e6d7      	b.n	801e726 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e976:	f110 0c01 	adds.w	ip, r0, #1
 801e97a:	d483      	bmi.n	801e884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e97c:	4563      	cmp	r3, ip
 801e97e:	db81      	blt.n	801e884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e980:	f115 0c01 	adds.w	ip, r5, #1
 801e984:	f53f af7e 	bmi.w	801e884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e988:	4567      	cmp	r7, ip
 801e98a:	f6ff af7b 	blt.w	801e884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e98e:	b23f      	sxth	r7, r7
 801e990:	b21b      	sxth	r3, r3
 801e992:	9700      	str	r7, [sp, #0]
 801e994:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801e998:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801e99c:	9a08      	ldr	r2, [sp, #32]
 801e99e:	4631      	mov	r1, r6
 801e9a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e9a2:	f7ff fdf9 	bl	801e598 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801e9a6:	e76d      	b.n	801e884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e9a8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e9aa:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e9ae:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e9b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e9b6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e9ba:	1421      	asrs	r1, r4, #16
 801e9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e9be:	fb0c 0101 	mla	r1, ip, r1, r0
 801e9c2:	9808      	ldr	r0, [sp, #32]
 801e9c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e9c8:	1845      	adds	r5, r0, r1
 801e9ca:	5c40      	ldrb	r0, [r0, r1]
 801e9cc:	796f      	ldrb	r7, [r5, #5]
 801e9ce:	7869      	ldrb	r1, [r5, #1]
 801e9d0:	f895 8002 	ldrb.w	r8, [r5, #2]
 801e9d4:	f895 a003 	ldrb.w	sl, [r5, #3]
 801e9d8:	f895 9004 	ldrb.w	r9, [r5, #4]
 801e9dc:	970c      	str	r7, [sp, #48]	@ 0x30
 801e9de:	b1a2      	cbz	r2, 801ea0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801e9e0:	2703      	movs	r7, #3
 801e9e2:	f06f 0304 	mvn.w	r3, #4
 801e9e6:	3505      	adds	r5, #5
 801e9e8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801e9ec:	eb05 070c 	add.w	r7, r5, ip
 801e9f0:	f815 500c 	ldrb.w	r5, [r5, ip]
 801e9f4:	9513      	str	r5, [sp, #76]	@ 0x4c
 801e9f6:	787d      	ldrb	r5, [r7, #1]
 801e9f8:	9515      	str	r5, [sp, #84]	@ 0x54
 801e9fa:	78bd      	ldrb	r5, [r7, #2]
 801e9fc:	9517      	str	r5, [sp, #92]	@ 0x5c
 801e9fe:	78fd      	ldrb	r5, [r7, #3]
 801ea00:	9514      	str	r5, [sp, #80]	@ 0x50
 801ea02:	793d      	ldrb	r5, [r7, #4]
 801ea04:	9516      	str	r5, [sp, #88]	@ 0x58
 801ea06:	797d      	ldrb	r5, [r7, #5]
 801ea08:	9518      	str	r5, [sp, #96]	@ 0x60
 801ea0a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	3603      	adds	r6, #3
 801ea12:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea16:	fb03 f502 	mul.w	r5, r3, r2
 801ea1a:	011b      	lsls	r3, r3, #4
 801ea1c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801ea20:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801ea24:	1b5b      	subs	r3, r3, r5
 801ea26:	b292      	uxth	r2, r2
 801ea28:	b29b      	uxth	r3, r3
 801ea2a:	1abf      	subs	r7, r7, r2
 801ea2c:	fb03 f909 	mul.w	r9, r3, r9
 801ea30:	b2bf      	uxth	r7, r7
 801ea32:	fb03 fa0a 	mul.w	sl, r3, sl
 801ea36:	fb07 9901 	mla	r9, r7, r1, r9
 801ea3a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801ea3c:	fb07 aa00 	mla	sl, r7, r0, sl
 801ea40:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ea42:	fb02 9901 	mla	r9, r2, r1, r9
 801ea46:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ea48:	fb02 aa00 	mla	sl, r2, r0, sl
 801ea4c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ea4e:	fb05 9901 	mla	r9, r5, r1, r9
 801ea52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ea54:	fb05 aa00 	mla	sl, r5, r0, sl
 801ea58:	434b      	muls	r3, r1
 801ea5a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ea5c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ea60:	fb07 3308 	mla	r3, r7, r8, r3
 801ea64:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea68:	f806 ac06 	strb.w	sl, [r6, #-6]
 801ea6c:	fb02 3201 	mla	r2, r2, r1, r3
 801ea70:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ea72:	f806 9c05 	strb.w	r9, [r6, #-5]
 801ea76:	fb05 2503 	mla	r5, r5, r3, r2
 801ea7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ea7c:	122d      	asrs	r5, r5, #8
 801ea7e:	449b      	add	fp, r3
 801ea80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ea82:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ea86:	441c      	add	r4, r3
 801ea88:	e72b      	b.n	801e8e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ea8a:	b01b      	add	sp, #108	@ 0x6c
 801ea8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	b087      	sub	sp, #28
 801ea96:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801ea9a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801ea9e:	fb05 7003 	mla	r0, r5, r3, r7
 801eaa2:	2d00      	cmp	r5, #0
 801eaa4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801eaa8:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801eaac:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801eab0:	f2c0 811f 	blt.w	801ecf2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801eab4:	45a8      	cmp	r8, r5
 801eab6:	f340 811c 	ble.w	801ecf2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801eaba:	2f00      	cmp	r7, #0
 801eabc:	f2c0 8117 	blt.w	801ecee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801eac0:	42bb      	cmp	r3, r7
 801eac2:	f340 8114 	ble.w	801ecee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801eac6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801eaca:	1c7a      	adds	r2, r7, #1
 801eacc:	f100 8114 	bmi.w	801ecf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ead0:	4293      	cmp	r3, r2
 801ead2:	f340 8111 	ble.w	801ecf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ead6:	2c00      	cmp	r4, #0
 801ead8:	f000 8110 	beq.w	801ecfc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801eadc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801eae0:	3501      	adds	r5, #1
 801eae2:	f100 810f 	bmi.w	801ed04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801eae6:	45a8      	cmp	r8, r5
 801eae8:	f340 810c 	ble.w	801ed04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801eaec:	f1be 0f00 	cmp.w	lr, #0
 801eaf0:	f000 810b 	beq.w	801ed0a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801eaf4:	2f00      	cmp	r7, #0
 801eaf6:	f2c0 8103 	blt.w	801ed00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801eafa:	42bb      	cmp	r3, r7
 801eafc:	f340 8100 	ble.w	801ed00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801eb00:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801eb04:	3701      	adds	r7, #1
 801eb06:	f100 8103 	bmi.w	801ed10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801eb0a:	42bb      	cmp	r3, r7
 801eb0c:	f340 8100 	ble.w	801ed10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801eb10:	2c00      	cmp	r4, #0
 801eb12:	f000 80ff 	beq.w	801ed14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801eb16:	3301      	adds	r3, #1
 801eb18:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801eb1c:	fa1f fc84 	uxth.w	ip, r4
 801eb20:	fa1f fe8e 	uxth.w	lr, lr
 801eb24:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801eb28:	fb0c f90e 	mul.w	r9, ip, lr
 801eb2c:	0e13      	lsrs	r3, r2, #24
 801eb2e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801eb32:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801eb36:	9302      	str	r3, [sp, #8]
 801eb38:	ebac 0709 	sub.w	r7, ip, r9
 801eb3c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801eb40:	fa1f f48e 	uxth.w	r4, lr
 801eb44:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801eb48:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801eb4c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801eb50:	fb0a fe0e 	mul.w	lr, sl, lr
 801eb54:	1b1b      	subs	r3, r3, r4
 801eb56:	fb0a f606 	mul.w	r6, sl, r6
 801eb5a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801eb5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eb62:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801eb66:	b29b      	uxth	r3, r3
 801eb68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb6c:	b2bf      	uxth	r7, r7
 801eb6e:	9301      	str	r3, [sp, #4]
 801eb70:	44e6      	add	lr, ip
 801eb72:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801eb76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb7a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801eb7e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801eb82:	9303      	str	r3, [sp, #12]
 801eb84:	0a33      	lsrs	r3, r6, #8
 801eb86:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801eb8a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801eb8e:	9304      	str	r3, [sp, #16]
 801eb90:	fb0b f606 	mul.w	r6, fp, r6
 801eb94:	fb0b f000 	mul.w	r0, fp, r0
 801eb98:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801eb9c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801eba0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eba4:	44b6      	add	lr, r6
 801eba6:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ebaa:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ebae:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ebb2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ebb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ebba:	fb08 f606 	mul.w	r6, r8, r6
 801ebbe:	0a03      	lsrs	r3, r0, #8
 801ebc0:	fb08 f505 	mul.w	r5, r8, r5
 801ebc4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ebc8:	0a30      	lsrs	r0, r6, #8
 801ebca:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ebce:	9305      	str	r3, [sp, #20]
 801ebd0:	0e13      	lsrs	r3, r2, #24
 801ebd2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ebd6:	fb0e fe07 	mul.w	lr, lr, r7
 801ebda:	4430      	add	r0, r6
 801ebdc:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801ebe0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ebe4:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801ebe8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ebec:	0a00      	lsrs	r0, r0, #8
 801ebee:	435e      	muls	r6, r3
 801ebf0:	0a2d      	lsrs	r5, r5, #8
 801ebf2:	435a      	muls	r2, r3
 801ebf4:	9b03      	ldr	r3, [sp, #12]
 801ebf6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ebfa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ebfe:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ec02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ec06:	44b4      	add	ip, r6
 801ec08:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801ec0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec10:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ec14:	9e01      	ldr	r6, [sp, #4]
 801ec16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ec1a:	fb03 ee06 	mla	lr, r3, r6, lr
 801ec1e:	9b04      	ldr	r3, [sp, #16]
 801ec20:	0a12      	lsrs	r2, r2, #8
 801ec22:	fb0c ee09 	mla	lr, ip, r9, lr
 801ec26:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801ec2a:	9b05      	ldr	r3, [sp, #20]
 801ec2c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ec30:	fb00 ee04 	mla	lr, r0, r4, lr
 801ec34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec38:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801ec3c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ec40:	9b01      	ldr	r3, [sp, #4]
 801ec42:	fb07 fe0e 	mul.w	lr, r7, lr
 801ec46:	fb07 f70b 	mul.w	r7, r7, fp
 801ec4a:	fb03 ee06 	mla	lr, r3, r6, lr
 801ec4e:	fb03 730a 	mla	r3, r3, sl, r7
 801ec52:	fb09 e202 	mla	r2, r9, r2, lr
 801ec56:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801ec5a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ec5e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801ec62:	fb04 3408 	mla	r4, r4, r8, r3
 801ec66:	9b02      	ldr	r3, [sp, #8]
 801ec68:	b292      	uxth	r2, r2
 801ec6a:	fb09 4903 	mla	r9, r9, r3, r4
 801ec6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec72:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ec76:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ec7a:	fb09 f902 	mul.w	r9, r9, r2
 801ec7e:	ea40 0e0e 	orr.w	lr, r0, lr
 801ec82:	f109 0301 	add.w	r3, r9, #1
 801ec86:	fa5f f08e 	uxtb.w	r0, lr
 801ec8a:	fb10 f002 	smulbb	r0, r0, r2
 801ec8e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ec92:	780b      	ldrb	r3, [r1, #0]
 801ec94:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801ec98:	fa5f f989 	uxtb.w	r9, r9
 801ec9c:	fb03 0309 	mla	r3, r3, r9, r0
 801eca0:	b29b      	uxth	r3, r3
 801eca2:	1c58      	adds	r0, r3, #1
 801eca4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801eca8:	7848      	ldrb	r0, [r1, #1]
 801ecaa:	fb10 f009 	smulbb	r0, r0, r9
 801ecae:	121b      	asrs	r3, r3, #8
 801ecb0:	700b      	strb	r3, [r1, #0]
 801ecb2:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801ecb6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ecba:	fb03 0302 	mla	r3, r3, r2, r0
 801ecbe:	b29b      	uxth	r3, r3
 801ecc0:	1c58      	adds	r0, r3, #1
 801ecc2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ecc6:	121b      	asrs	r3, r3, #8
 801ecc8:	704b      	strb	r3, [r1, #1]
 801ecca:	788b      	ldrb	r3, [r1, #2]
 801eccc:	fb13 f909 	smulbb	r9, r3, r9
 801ecd0:	fb0e 9e02 	mla	lr, lr, r2, r9
 801ecd4:	fa1f fe8e 	uxth.w	lr, lr
 801ecd8:	f10e 0301 	add.w	r3, lr, #1
 801ecdc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801ece0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ece4:	f881 e002 	strb.w	lr, [r1, #2]
 801ece8:	b007      	add	sp, #28
 801ecea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecee:	2600      	movs	r6, #0
 801ecf0:	e6eb      	b.n	801eaca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801ecf2:	2000      	movs	r0, #0
 801ecf4:	4606      	mov	r6, r0
 801ecf6:	e6f3      	b.n	801eae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ecf8:	2000      	movs	r0, #0
 801ecfa:	e6f1      	b.n	801eae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	e6ef      	b.n	801eae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ed00:	2500      	movs	r5, #0
 801ed02:	e6ff      	b.n	801eb04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801ed04:	2200      	movs	r2, #0
 801ed06:	4615      	mov	r5, r2
 801ed08:	e708      	b.n	801eb1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed0a:	4672      	mov	r2, lr
 801ed0c:	4675      	mov	r5, lr
 801ed0e:	e705      	b.n	801eb1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed10:	2200      	movs	r2, #0
 801ed12:	e703      	b.n	801eb1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed14:	4622      	mov	r2, r4
 801ed16:	e701      	b.n	801eb1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801ed18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed1c:	b09d      	sub	sp, #116	@ 0x74
 801ed1e:	9219      	str	r2, [sp, #100]	@ 0x64
 801ed20:	9307      	str	r3, [sp, #28]
 801ed22:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801ed24:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801ed28:	901b      	str	r0, [sp, #108]	@ 0x6c
 801ed2a:	931a      	str	r3, [sp, #104]	@ 0x68
 801ed2c:	6850      	ldr	r0, [r2, #4]
 801ed2e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801ed30:	6812      	ldr	r2, [r2, #0]
 801ed32:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801ed36:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801ed3a:	fb00 1303 	mla	r3, r0, r3, r1
 801ed3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed42:	18d3      	adds	r3, r2, r3
 801ed44:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed46:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ed48:	681b      	ldr	r3, [r3, #0]
 801ed4a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ed4c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801ed50:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	dc03      	bgt.n	801ed60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ed58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	f340 8368 	ble.w	801f430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ed60:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ed62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ed6a:	1e48      	subs	r0, r1, #1
 801ed6c:	1e57      	subs	r7, r2, #1
 801ed6e:	9b07      	ldr	r3, [sp, #28]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	f340 8187 	ble.w	801f084 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ed76:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ed7a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ed7e:	d406      	bmi.n	801ed8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed80:	4584      	cmp	ip, r0
 801ed82:	da04      	bge.n	801ed8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	db02      	blt.n	801ed8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed88:	42bb      	cmp	r3, r7
 801ed8a:	f2c0 817c 	blt.w	801f086 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ed8e:	f11c 0c01 	adds.w	ip, ip, #1
 801ed92:	f100 816c 	bmi.w	801f06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ed96:	4561      	cmp	r1, ip
 801ed98:	f2c0 8169 	blt.w	801f06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ed9c:	3301      	adds	r3, #1
 801ed9e:	f100 8166 	bmi.w	801f06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801eda2:	429a      	cmp	r2, r3
 801eda4:	f2c0 8163 	blt.w	801f06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801eda8:	9b07      	ldr	r3, [sp, #28]
 801edaa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801edac:	9318      	str	r3, [sp, #96]	@ 0x60
 801edae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	f340 8186 	ble.w	801f0c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801edb6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801edb8:	142a      	asrs	r2, r5, #16
 801edba:	ea4f 4026 	mov.w	r0, r6, asr #16
 801edbe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801edc2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801edc6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801edca:	f100 81cb 	bmi.w	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801edce:	f10e 38ff 	add.w	r8, lr, #4294967295
 801edd2:	4542      	cmp	r2, r8
 801edd4:	f280 81c6 	bge.w	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801edd8:	2800      	cmp	r0, #0
 801edda:	f2c0 81c3 	blt.w	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801edde:	f103 38ff 	add.w	r8, r3, #4294967295
 801ede2:	4540      	cmp	r0, r8
 801ede4:	f280 81be 	bge.w	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ede8:	fa0f f38e 	sxth.w	r3, lr
 801edec:	fb00 2203 	mla	r2, r0, r3, r2
 801edf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801edf2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801edf6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801edfa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801edfe:	2900      	cmp	r1, #0
 801ee00:	f000 81a6 	beq.w	801f150 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801ee04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ee08:	900c      	str	r0, [sp, #48]	@ 0x30
 801ee0a:	0e00      	lsrs	r0, r0, #24
 801ee0c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ee0e:	f1bc 0f00 	cmp.w	ip, #0
 801ee12:	d00f      	beq.n	801ee34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ee14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ee18:	3b01      	subs	r3, #1
 801ee1a:	009b      	lsls	r3, r3, #2
 801ee1c:	3304      	adds	r3, #4
 801ee1e:	eb08 0003 	add.w	r0, r8, r3
 801ee22:	f858 3003 	ldr.w	r3, [r8, r3]
 801ee26:	9308      	str	r3, [sp, #32]
 801ee28:	0e1b      	lsrs	r3, r3, #24
 801ee2a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee2c:	6843      	ldr	r3, [r0, #4]
 801ee2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee30:	0e1b      	lsrs	r3, r3, #24
 801ee32:	9314      	str	r3, [sp, #80]	@ 0x50
 801ee34:	b289      	uxth	r1, r1
 801ee36:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ee38:	fa1f fc8c 	uxth.w	ip, ip
 801ee3c:	0108      	lsls	r0, r1, #4
 801ee3e:	fb01 f90c 	mul.w	r9, r1, ip
 801ee42:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801ee46:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801ee4a:	eba0 0809 	sub.w	r8, r0, r9
 801ee4e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ee50:	fa1f f18c 	uxth.w	r1, ip
 801ee54:	fa1f f888 	uxth.w	r8, r8
 801ee58:	1a5b      	subs	r3, r3, r1
 801ee5a:	fb08 f000 	mul.w	r0, r8, r0
 801ee5e:	b29b      	uxth	r3, r3
 801ee60:	fb03 000e 	mla	r0, r3, lr, r0
 801ee64:	fb01 0004 	mla	r0, r1, r4, r0
 801ee68:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ee6a:	fb09 0004 	mla	r0, r9, r4, r0
 801ee6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ee72:	2800      	cmp	r0, #0
 801ee74:	f000 80f2 	beq.w	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ee78:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ee7c:	d01b      	beq.n	801eeb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ee7e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801ee82:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ee86:	fb0e fa0a 	mul.w	sl, lr, sl
 801ee8a:	fb0e fe02 	mul.w	lr, lr, r2
 801ee8e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801ee92:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ee96:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ee9a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ee9e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801eea2:	4452      	add	r2, sl
 801eea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eea8:	0a12      	lsrs	r2, r2, #8
 801eeaa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801eeae:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801eeb2:	ea42 020c 	orr.w	r2, r2, ip
 801eeb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eeb8:	2cff      	cmp	r4, #255	@ 0xff
 801eeba:	d021      	beq.n	801ef00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eebc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801eebe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801eec2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eec4:	fb04 fb0b 	mul.w	fp, r4, fp
 801eec8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801eeca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801eece:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eed0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eed4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801eed8:	fb04 fa0a 	mul.w	sl, r4, sl
 801eedc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eee0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801eee4:	44de      	add	lr, fp
 801eee6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eeea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eeee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eef2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eef6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eefa:	ea4e 040a 	orr.w	r4, lr, sl
 801eefe:	940c      	str	r4, [sp, #48]	@ 0x30
 801ef00:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ef02:	2cff      	cmp	r4, #255	@ 0xff
 801ef04:	d021      	beq.n	801ef4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ef06:	9c08      	ldr	r4, [sp, #32]
 801ef08:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ef0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ef0e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ef12:	9c08      	ldr	r4, [sp, #32]
 801ef14:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ef18:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ef1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ef1e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ef22:	fb04 fa0a 	mul.w	sl, r4, sl
 801ef26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef2a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ef2e:	44de      	add	lr, fp
 801ef30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ef34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ef3c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ef44:	ea4e 040a 	orr.w	r4, lr, sl
 801ef48:	9408      	str	r4, [sp, #32]
 801ef4a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef4c:	2cff      	cmp	r4, #255	@ 0xff
 801ef4e:	d021      	beq.n	801ef94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ef50:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ef52:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ef56:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef58:	fb04 fb0b 	mul.w	fp, r4, fp
 801ef5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ef5e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ef62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ef68:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ef6c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ef70:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef74:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ef78:	44de      	add	lr, fp
 801ef7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ef7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ef86:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef8a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ef8e:	ea4e 040a 	orr.w	r4, lr, sl
 801ef92:	940d      	str	r4, [sp, #52]	@ 0x34
 801ef94:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ef96:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801ef9a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ef9e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801efa2:	9c08      	ldr	r4, [sp, #32]
 801efa4:	fb08 fc0c 	mul.w	ip, r8, ip
 801efa8:	fb03 cc0e 	mla	ip, r3, lr, ip
 801efac:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801efb0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801efb2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801efb6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801efba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801efbc:	fb09 cc0e 	mla	ip, r9, lr, ip
 801efc0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801efc4:	fb08 f80e 	mul.w	r8, r8, lr
 801efc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801efcc:	fb03 8202 	mla	r2, r3, r2, r8
 801efd0:	9b08      	ldr	r3, [sp, #32]
 801efd2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801efd6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801efda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801efdc:	fb01 220a 	mla	r2, r1, sl, r2
 801efe0:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801efe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efe6:	fb09 2901 	mla	r9, r9, r1, r2
 801efea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efec:	4343      	muls	r3, r0
 801efee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eff2:	1c58      	adds	r0, r3, #1
 801eff4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801eff8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801effc:	783b      	ldrb	r3, [r7, #0]
 801effe:	ea4c 0c09 	orr.w	ip, ip, r9
 801f002:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f006:	fa5f f28c 	uxtb.w	r2, ip
 801f00a:	b2c0      	uxtb	r0, r0
 801f00c:	fb12 f201 	smulbb	r2, r2, r1
 801f010:	fb03 2300 	mla	r3, r3, r0, r2
 801f014:	b29b      	uxth	r3, r3
 801f016:	1c5a      	adds	r2, r3, #1
 801f018:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f01c:	787a      	ldrb	r2, [r7, #1]
 801f01e:	fb12 f200 	smulbb	r2, r2, r0
 801f022:	121b      	asrs	r3, r3, #8
 801f024:	703b      	strb	r3, [r7, #0]
 801f026:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f02a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f02e:	fb03 2301 	mla	r3, r3, r1, r2
 801f032:	b29b      	uxth	r3, r3
 801f034:	1c5a      	adds	r2, r3, #1
 801f036:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f03a:	121b      	asrs	r3, r3, #8
 801f03c:	707b      	strb	r3, [r7, #1]
 801f03e:	78bb      	ldrb	r3, [r7, #2]
 801f040:	fb13 f000 	smulbb	r0, r3, r0
 801f044:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f048:	fa1f fc8c 	uxth.w	ip, ip
 801f04c:	f10c 0301 	add.w	r3, ip, #1
 801f050:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f054:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f058:	f887 c002 	strb.w	ip, [r7, #2]
 801f05c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f05e:	3703      	adds	r7, #3
 801f060:	441d      	add	r5, r3
 801f062:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f064:	441e      	add	r6, r3
 801f066:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f068:	3b01      	subs	r3, #1
 801f06a:	9318      	str	r3, [sp, #96]	@ 0x60
 801f06c:	e69f      	b.n	801edae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f06e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f070:	441d      	add	r5, r3
 801f072:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f074:	441e      	add	r6, r3
 801f076:	9b07      	ldr	r3, [sp, #28]
 801f078:	3b01      	subs	r3, #1
 801f07a:	9307      	str	r3, [sp, #28]
 801f07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f07e:	3303      	adds	r3, #3
 801f080:	930a      	str	r3, [sp, #40]	@ 0x28
 801f082:	e674      	b.n	801ed6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f084:	d025      	beq.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f086:	9b07      	ldr	r3, [sp, #28]
 801f088:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801f08a:	3b01      	subs	r3, #1
 801f08c:	fb00 5003 	mla	r0, r0, r3, r5
 801f090:	1400      	asrs	r0, r0, #16
 801f092:	f53f ae89 	bmi.w	801eda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f096:	3901      	subs	r1, #1
 801f098:	4288      	cmp	r0, r1
 801f09a:	f6bf ae85 	bge.w	801eda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f09e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801f0a0:	fb01 6303 	mla	r3, r1, r3, r6
 801f0a4:	141b      	asrs	r3, r3, #16
 801f0a6:	f53f ae7f 	bmi.w	801eda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0aa:	3a01      	subs	r2, #1
 801f0ac:	4293      	cmp	r3, r2
 801f0ae:	f6bf ae7b 	bge.w	801eda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f0b8:	f103 0e03 	add.w	lr, r3, #3
 801f0bc:	f1bb 0f00 	cmp.w	fp, #0
 801f0c0:	dc6e      	bgt.n	801f1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f0c2:	9b07      	ldr	r3, [sp, #28]
 801f0c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f0ce:	4423      	add	r3, r4
 801f0d0:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	f340 81ab 	ble.w	801f430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f0da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f0de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f0e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0e8:	eef0 6a62 	vmov.f32	s13, s5
 801f0ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f0f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0f8:	ee16 5a90 	vmov	r5, s13
 801f0fc:	eef0 6a43 	vmov.f32	s13, s6
 801f100:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f104:	ee16 6a90 	vmov	r6, s13
 801f108:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f10c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f110:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f114:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f118:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f11c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f120:	ee12 2a90 	vmov	r2, s5
 801f124:	eef0 2a47 	vmov.f32	s5, s14
 801f128:	fb92 f3f3 	sdiv	r3, r2, r3
 801f12c:	ee13 2a10 	vmov	r2, s6
 801f130:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f132:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f134:	eeb0 3a67 	vmov.f32	s6, s15
 801f138:	fb92 f3f3 	sdiv	r3, r2, r3
 801f13c:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f13e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f140:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f142:	3b01      	subs	r3, #1
 801f144:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f146:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f148:	bf08      	it	eq
 801f14a:	4613      	moveq	r3, r2
 801f14c:	9307      	str	r3, [sp, #28]
 801f14e:	e600      	b.n	801ed52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f150:	f1bc 0f00 	cmp.w	ip, #0
 801f154:	f43f ae6e 	beq.w	801ee34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f158:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f15c:	9308      	str	r3, [sp, #32]
 801f15e:	0e1b      	lsrs	r3, r3, #24
 801f160:	9311      	str	r3, [sp, #68]	@ 0x44
 801f162:	e667      	b.n	801ee34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f164:	f112 0801 	adds.w	r8, r2, #1
 801f168:	f53f af78 	bmi.w	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f16c:	45c6      	cmp	lr, r8
 801f16e:	f6ff af75 	blt.w	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f172:	f110 0801 	adds.w	r8, r0, #1
 801f176:	f53f af71 	bmi.w	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f17a:	4543      	cmp	r3, r8
 801f17c:	f6ff af6e 	blt.w	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f180:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f182:	b21b      	sxth	r3, r3
 801f184:	9201      	str	r2, [sp, #4]
 801f186:	9300      	str	r3, [sp, #0]
 801f188:	fa0f f38e 	sxth.w	r3, lr
 801f18c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f18e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f192:	e9cd c404 	strd	ip, r4, [sp, #16]
 801f196:	4639      	mov	r1, r7
 801f198:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801f19a:	f7ff fc79 	bl	801ea90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f19e:	e75d      	b.n	801f05c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f1a0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f1a2:	142f      	asrs	r7, r5, #16
 801f1a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f1a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f1aa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f1ae:	1433      	asrs	r3, r6, #16
 801f1b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f1b4:	fb02 7303 	mla	r3, r2, r3, r7
 801f1b8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801f1bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f1c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f1c4:	2900      	cmp	r1, #0
 801f1c6:	f000 812a 	beq.w	801f41e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801f1ca:	687c      	ldr	r4, [r7, #4]
 801f1cc:	940e      	str	r4, [sp, #56]	@ 0x38
 801f1ce:	0e24      	lsrs	r4, r4, #24
 801f1d0:	9415      	str	r4, [sp, #84]	@ 0x54
 801f1d2:	b178      	cbz	r0, 801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f1d4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f1d8:	3a01      	subs	r2, #1
 801f1da:	0092      	lsls	r2, r2, #2
 801f1dc:	3204      	adds	r2, #4
 801f1de:	eb07 0802 	add.w	r8, r7, r2
 801f1e2:	58ba      	ldr	r2, [r7, r2]
 801f1e4:	9209      	str	r2, [sp, #36]	@ 0x24
 801f1e6:	0e12      	lsrs	r2, r2, #24
 801f1e8:	9212      	str	r2, [sp, #72]	@ 0x48
 801f1ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f1ee:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f1f0:	0e12      	lsrs	r2, r2, #24
 801f1f2:	9216      	str	r2, [sp, #88]	@ 0x58
 801f1f4:	b289      	uxth	r1, r1
 801f1f6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f1f8:	b280      	uxth	r0, r0
 801f1fa:	fb01 f900 	mul.w	r9, r1, r0
 801f1fe:	0109      	lsls	r1, r1, #4
 801f200:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f204:	eba1 0809 	sub.w	r8, r1, r9
 801f208:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801f20c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f20e:	b280      	uxth	r0, r0
 801f210:	fa1f f888 	uxth.w	r8, r8
 801f214:	1a12      	subs	r2, r2, r0
 801f216:	fb08 f101 	mul.w	r1, r8, r1
 801f21a:	b292      	uxth	r2, r2
 801f21c:	fb02 110c 	mla	r1, r2, ip, r1
 801f220:	fb00 1104 	mla	r1, r0, r4, r1
 801f224:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f226:	fb09 1104 	mla	r1, r9, r4, r1
 801f22a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f22e:	2900      	cmp	r1, #0
 801f230:	f000 80ec 	beq.w	801f40c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801f234:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f238:	d019      	beq.n	801f26e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801f23a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f23e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f242:	fb0c fa0a 	mul.w	sl, ip, sl
 801f246:	fb0c fc03 	mul.w	ip, ip, r3
 801f24a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f24e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f252:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801f256:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f25a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f25e:	4453      	add	r3, sl
 801f260:	0a3f      	lsrs	r7, r7, #8
 801f262:	0a1b      	lsrs	r3, r3, #8
 801f264:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f268:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f26c:	433b      	orrs	r3, r7
 801f26e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f270:	2cff      	cmp	r4, #255	@ 0xff
 801f272:	d020      	beq.n	801f2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801f274:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f276:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f27a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f27c:	4367      	muls	r7, r4
 801f27e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f280:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f284:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f288:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f28a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f28e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f292:	fb04 fa0a 	mul.w	sl, r4, sl
 801f296:	44bc      	add	ip, r7
 801f298:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f29c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f2a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f2a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f2a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f2ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f2b0:	ea4c 040a 	orr.w	r4, ip, sl
 801f2b4:	940e      	str	r4, [sp, #56]	@ 0x38
 801f2b6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f2b8:	2cff      	cmp	r4, #255	@ 0xff
 801f2ba:	d020      	beq.n	801f2fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801f2bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f2be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f2c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f2c4:	4367      	muls	r7, r4
 801f2c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f2c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f2cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f2d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f2d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f2d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f2da:	fb04 fa0a 	mul.w	sl, r4, sl
 801f2de:	44bc      	add	ip, r7
 801f2e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f2e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f2e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f2ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f2f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f2f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f2f8:	ea4c 040a 	orr.w	r4, ip, sl
 801f2fc:	9409      	str	r4, [sp, #36]	@ 0x24
 801f2fe:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f300:	2cff      	cmp	r4, #255	@ 0xff
 801f302:	d020      	beq.n	801f346 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801f304:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f306:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f30a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f30c:	4367      	muls	r7, r4
 801f30e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f310:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f314:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f318:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f31a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f31e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f322:	fb04 fa0a 	mul.w	sl, r4, sl
 801f326:	44bc      	add	ip, r7
 801f328:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f32c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f330:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f334:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f338:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f33c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f340:	ea4c 040a 	orr.w	r4, ip, sl
 801f344:	940f      	str	r4, [sp, #60]	@ 0x3c
 801f346:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f348:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801f34c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f350:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f354:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f356:	fb08 f707 	mul.w	r7, r8, r7
 801f35a:	fb02 770c 	mla	r7, r2, ip, r7
 801f35e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f362:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f364:	fb00 770c 	mla	r7, r0, ip, r7
 801f368:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f36c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f36e:	fb09 770c 	mla	r7, r9, ip, r7
 801f372:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801f376:	fb08 f80c 	mul.w	r8, r8, ip
 801f37a:	0a3f      	lsrs	r7, r7, #8
 801f37c:	fb02 8303 	mla	r3, r2, r3, r8
 801f380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f382:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801f386:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801f38a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f38c:	fb00 330a 	mla	r3, r0, sl, r3
 801f390:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801f394:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f396:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f39a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f39c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3a0:	434b      	muls	r3, r1
 801f3a2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f3a6:	1c59      	adds	r1, r3, #1
 801f3a8:	ea47 070c 	orr.w	r7, r7, ip
 801f3ac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f3b0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f3b4:	b2fa      	uxtb	r2, r7
 801f3b6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f3ba:	fb12 f200 	smulbb	r2, r2, r0
 801f3be:	b2c9      	uxtb	r1, r1
 801f3c0:	fb03 2301 	mla	r3, r3, r1, r2
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	1c5a      	adds	r2, r3, #1
 801f3c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f3cc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f3d0:	fb12 f201 	smulbb	r2, r2, r1
 801f3d4:	121b      	asrs	r3, r3, #8
 801f3d6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f3da:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f3de:	0c3f      	lsrs	r7, r7, #16
 801f3e0:	fb03 2300 	mla	r3, r3, r0, r2
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	1c5a      	adds	r2, r3, #1
 801f3e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f3ec:	121b      	asrs	r3, r3, #8
 801f3ee:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f3f2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f3f6:	fb13 f101 	smulbb	r1, r3, r1
 801f3fa:	fb07 1700 	mla	r7, r7, r0, r1
 801f3fe:	b2bf      	uxth	r7, r7
 801f400:	1c79      	adds	r1, r7, #1
 801f402:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f406:	123f      	asrs	r7, r7, #8
 801f408:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f40c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f40e:	f10e 0e03 	add.w	lr, lr, #3
 801f412:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f416:	441d      	add	r5, r3
 801f418:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f41a:	441e      	add	r6, r3
 801f41c:	e64e      	b.n	801f0bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801f41e:	2800      	cmp	r0, #0
 801f420:	f43f aee8 	beq.w	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f424:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f428:	9209      	str	r2, [sp, #36]	@ 0x24
 801f42a:	0e12      	lsrs	r2, r2, #24
 801f42c:	9212      	str	r2, [sp, #72]	@ 0x48
 801f42e:	e6e1      	b.n	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f430:	b01d      	add	sp, #116	@ 0x74
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f436 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43a:	b087      	sub	sp, #28
 801f43c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f440:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f444:	fb05 7003 	mla	r0, r5, r3, r7
 801f448:	2d00      	cmp	r5, #0
 801f44a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f44e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f452:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f456:	f2c0 810a 	blt.w	801f66e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f45a:	45a8      	cmp	r8, r5
 801f45c:	f340 8107 	ble.w	801f66e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f460:	2f00      	cmp	r7, #0
 801f462:	f2c0 8102 	blt.w	801f66a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f466:	42bb      	cmp	r3, r7
 801f468:	f340 80ff 	ble.w	801f66a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f46c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f470:	1c7a      	adds	r2, r7, #1
 801f472:	f100 80ff 	bmi.w	801f674 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f476:	4293      	cmp	r3, r2
 801f478:	f340 80fc 	ble.w	801f674 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f47c:	2c00      	cmp	r4, #0
 801f47e:	f000 80fb 	beq.w	801f678 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801f482:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f486:	3501      	adds	r5, #1
 801f488:	f100 80fa 	bmi.w	801f680 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f48c:	45a8      	cmp	r8, r5
 801f48e:	f340 80f7 	ble.w	801f680 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f492:	f1be 0f00 	cmp.w	lr, #0
 801f496:	f000 80f6 	beq.w	801f686 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801f49a:	2f00      	cmp	r7, #0
 801f49c:	f2c0 80ee 	blt.w	801f67c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f4a0:	42bb      	cmp	r3, r7
 801f4a2:	f340 80eb 	ble.w	801f67c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f4a6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f4aa:	3701      	adds	r7, #1
 801f4ac:	f100 80ee 	bmi.w	801f68c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f4b0:	42bb      	cmp	r3, r7
 801f4b2:	f340 80eb 	ble.w	801f68c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f4b6:	2c00      	cmp	r4, #0
 801f4b8:	f000 80ea 	beq.w	801f690 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801f4bc:	3301      	adds	r3, #1
 801f4be:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f4c2:	fa1f fc84 	uxth.w	ip, r4
 801f4c6:	fa1f fe8e 	uxth.w	lr, lr
 801f4ca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f4ce:	fb0c f90e 	mul.w	r9, ip, lr
 801f4d2:	0e13      	lsrs	r3, r2, #24
 801f4d4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f4d8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f4dc:	9302      	str	r3, [sp, #8]
 801f4de:	ebac 0709 	sub.w	r7, ip, r9
 801f4e2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f4e6:	fa1f f48e 	uxth.w	r4, lr
 801f4ea:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f4ee:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f4f2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f4f6:	fb0a fe0e 	mul.w	lr, sl, lr
 801f4fa:	1b1b      	subs	r3, r3, r4
 801f4fc:	fb0a f606 	mul.w	r6, sl, r6
 801f500:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f504:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f508:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f512:	b2bf      	uxth	r7, r7
 801f514:	9301      	str	r3, [sp, #4]
 801f516:	44e6      	add	lr, ip
 801f518:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f51c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f520:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f524:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f528:	9303      	str	r3, [sp, #12]
 801f52a:	0a33      	lsrs	r3, r6, #8
 801f52c:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f530:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f534:	9304      	str	r3, [sp, #16]
 801f536:	fb0b f606 	mul.w	r6, fp, r6
 801f53a:	fb0b f000 	mul.w	r0, fp, r0
 801f53e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f542:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f546:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f54a:	44b6      	add	lr, r6
 801f54c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f550:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f554:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f558:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f55c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f560:	fb08 f606 	mul.w	r6, r8, r6
 801f564:	0a03      	lsrs	r3, r0, #8
 801f566:	fb08 f505 	mul.w	r5, r8, r5
 801f56a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f56e:	0a30      	lsrs	r0, r6, #8
 801f570:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f574:	9305      	str	r3, [sp, #20]
 801f576:	0e13      	lsrs	r3, r2, #24
 801f578:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f57c:	fb0e fe07 	mul.w	lr, lr, r7
 801f580:	4430      	add	r0, r6
 801f582:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f586:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f58a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f58e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f592:	0a00      	lsrs	r0, r0, #8
 801f594:	435e      	muls	r6, r3
 801f596:	0a2d      	lsrs	r5, r5, #8
 801f598:	435a      	muls	r2, r3
 801f59a:	9b03      	ldr	r3, [sp, #12]
 801f59c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f5a0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f5a4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f5a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f5ac:	44b4      	add	ip, r6
 801f5ae:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f5b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5b6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f5ba:	9e01      	ldr	r6, [sp, #4]
 801f5bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f5c0:	fb03 ee06 	mla	lr, r3, r6, lr
 801f5c4:	9b04      	ldr	r3, [sp, #16]
 801f5c6:	0a12      	lsrs	r2, r2, #8
 801f5c8:	fb0c ee09 	mla	lr, ip, r9, lr
 801f5cc:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f5d0:	9b05      	ldr	r3, [sp, #20]
 801f5d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f5d6:	fb00 ee04 	mla	lr, r0, r4, lr
 801f5da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f5de:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f5e2:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f5e6:	9b01      	ldr	r3, [sp, #4]
 801f5e8:	fb07 fe0e 	mul.w	lr, r7, lr
 801f5ec:	fb07 f70b 	mul.w	r7, r7, fp
 801f5f0:	fb03 ee06 	mla	lr, r3, r6, lr
 801f5f4:	fb03 730a 	mla	r3, r3, sl, r7
 801f5f8:	fb09 e202 	mla	r2, r9, r2, lr
 801f5fc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f600:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f604:	fb04 3408 	mla	r4, r4, r8, r3
 801f608:	9b02      	ldr	r3, [sp, #8]
 801f60a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f60e:	fb09 4903 	mla	r9, r9, r3, r4
 801f612:	780b      	ldrb	r3, [r1, #0]
 801f614:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f618:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801f61c:	ea40 0e0e 	orr.w	lr, r0, lr
 801f620:	fa5f f989 	uxtb.w	r9, r9
 801f624:	fb03 f209 	mul.w	r2, r3, r9
 801f628:	1c53      	adds	r3, r2, #1
 801f62a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f62e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801f632:	700b      	strb	r3, [r1, #0]
 801f634:	784b      	ldrb	r3, [r1, #1]
 801f636:	fb03 f309 	mul.w	r3, r3, r9
 801f63a:	1c5a      	adds	r2, r3, #1
 801f63c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f640:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f644:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f648:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f64c:	704b      	strb	r3, [r1, #1]
 801f64e:	788b      	ldrb	r3, [r1, #2]
 801f650:	fb03 f909 	mul.w	r9, r3, r9
 801f654:	f109 0301 	add.w	r3, r9, #1
 801f658:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f65c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801f660:	f881 e002 	strb.w	lr, [r1, #2]
 801f664:	b007      	add	sp, #28
 801f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f66a:	2600      	movs	r6, #0
 801f66c:	e700      	b.n	801f470 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801f66e:	2000      	movs	r0, #0
 801f670:	4606      	mov	r6, r0
 801f672:	e708      	b.n	801f486 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f674:	2000      	movs	r0, #0
 801f676:	e706      	b.n	801f486 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f678:	4620      	mov	r0, r4
 801f67a:	e704      	b.n	801f486 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f67c:	2500      	movs	r5, #0
 801f67e:	e714      	b.n	801f4aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801f680:	2200      	movs	r2, #0
 801f682:	4615      	mov	r5, r2
 801f684:	e71d      	b.n	801f4c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f686:	4672      	mov	r2, lr
 801f688:	4675      	mov	r5, lr
 801f68a:	e71a      	b.n	801f4c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f68c:	2200      	movs	r2, #0
 801f68e:	e718      	b.n	801f4c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f690:	4622      	mov	r2, r4
 801f692:	e716      	b.n	801f4c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801f694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f698:	b099      	sub	sp, #100	@ 0x64
 801f69a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801f69e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801f6a0:	9017      	str	r0, [sp, #92]	@ 0x5c
 801f6a2:	9306      	str	r3, [sp, #24]
 801f6a4:	6850      	ldr	r0, [r2, #4]
 801f6a6:	6812      	ldr	r2, [r2, #0]
 801f6a8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801f6ac:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801f6b0:	fb00 1303 	mla	r3, r0, r3, r1
 801f6b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6b8:	18d3      	adds	r3, r2, r3
 801f6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801f6bc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f6c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	dc03      	bgt.n	801f6d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f6c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	f340 8360 	ble.w	801fd90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f6d0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f6d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f6d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f6da:	1e48      	subs	r0, r1, #1
 801f6dc:	1e57      	subs	r7, r2, #1
 801f6de:	9b06      	ldr	r3, [sp, #24]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	f340 817b 	ble.w	801f9dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801f6e6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f6ea:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f6ee:	d406      	bmi.n	801f6fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f6f0:	4584      	cmp	ip, r0
 801f6f2:	da04      	bge.n	801f6fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	db02      	blt.n	801f6fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f6f8:	42bb      	cmp	r3, r7
 801f6fa:	f2c0 8170 	blt.w	801f9de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f6fe:	f11c 0c01 	adds.w	ip, ip, #1
 801f702:	f100 8160 	bmi.w	801f9c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f706:	4561      	cmp	r1, ip
 801f708:	f2c0 815d 	blt.w	801f9c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f70c:	3301      	adds	r3, #1
 801f70e:	f100 815a 	bmi.w	801f9c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f712:	429a      	cmp	r2, r3
 801f714:	f2c0 8157 	blt.w	801f9c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f718:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f71c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f71e:	f1b8 0f00 	cmp.w	r8, #0
 801f722:	f340 8179 	ble.w	801fa18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f726:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801f728:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f72c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f72e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f732:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f736:	142a      	asrs	r2, r5, #16
 801f738:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f73c:	689b      	ldr	r3, [r3, #8]
 801f73e:	f100 81be 	bmi.w	801fabe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f742:	f103 39ff 	add.w	r9, r3, #4294967295
 801f746:	454a      	cmp	r2, r9
 801f748:	f280 81b9 	bge.w	801fabe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f74c:	f1bc 0f00 	cmp.w	ip, #0
 801f750:	f2c0 81b5 	blt.w	801fabe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f754:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f758:	45cc      	cmp	ip, r9
 801f75a:	f280 81b0 	bge.w	801fabe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f75e:	b21b      	sxth	r3, r3
 801f760:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f762:	fb0c 2203 	mla	r2, ip, r3, r2
 801f766:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801f76a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f76e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f772:	2900      	cmp	r1, #0
 801f774:	f000 8197 	beq.w	801faa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801f778:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801f77c:	940a      	str	r4, [sp, #40]	@ 0x28
 801f77e:	0e24      	lsrs	r4, r4, #24
 801f780:	9411      	str	r4, [sp, #68]	@ 0x44
 801f782:	b180      	cbz	r0, 801f7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801f788:	3b01      	subs	r3, #1
 801f78a:	009b      	lsls	r3, r3, #2
 801f78c:	3304      	adds	r3, #4
 801f78e:	eb09 0c03 	add.w	ip, r9, r3
 801f792:	f859 3003 	ldr.w	r3, [r9, r3]
 801f796:	9307      	str	r3, [sp, #28]
 801f798:	0e1b      	lsrs	r3, r3, #24
 801f79a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f79c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f7a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f7a2:	0e1b      	lsrs	r3, r3, #24
 801f7a4:	9312      	str	r3, [sp, #72]	@ 0x48
 801f7a6:	b289      	uxth	r1, r1
 801f7a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f7aa:	b280      	uxth	r0, r0
 801f7ac:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f7ae:	fb01 fa00 	mul.w	sl, r1, r0
 801f7b2:	0109      	lsls	r1, r1, #4
 801f7b4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f7b8:	eba1 090a 	sub.w	r9, r1, sl
 801f7bc:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801f7c0:	b280      	uxth	r0, r0
 801f7c2:	fa1f f989 	uxth.w	r9, r9
 801f7c6:	1a09      	subs	r1, r1, r0
 801f7c8:	fb09 f303 	mul.w	r3, r9, r3
 801f7cc:	b289      	uxth	r1, r1
 801f7ce:	fb01 330e 	mla	r3, r1, lr, r3
 801f7d2:	fb00 3304 	mla	r3, r0, r4, r3
 801f7d6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f7d8:	fb0a 3304 	mla	r3, sl, r4, r3
 801f7dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	f000 80e8 	beq.w	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f7e6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f7ea:	d01b      	beq.n	801f824 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f7ec:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801f7f0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f7f4:	fb0e fb0b 	mul.w	fp, lr, fp
 801f7f8:	fb0e fe02 	mul.w	lr, lr, r2
 801f7fc:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801f800:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f804:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f808:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f80c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f810:	445a      	add	r2, fp
 801f812:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f816:	0a12      	lsrs	r2, r2, #8
 801f818:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f81c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f820:	ea42 020c 	orr.w	r2, r2, ip
 801f824:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f826:	2cff      	cmp	r4, #255	@ 0xff
 801f828:	d021      	beq.n	801f86e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f82a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f82c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f830:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f832:	fb04 fc0c 	mul.w	ip, r4, ip
 801f836:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f838:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f83c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f840:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f842:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f846:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f84a:	fb04 fb0b 	mul.w	fp, r4, fp
 801f84e:	44e6      	add	lr, ip
 801f850:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f854:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f858:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f85c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f860:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f864:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f868:	ea4e 040b 	orr.w	r4, lr, fp
 801f86c:	940a      	str	r4, [sp, #40]	@ 0x28
 801f86e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f870:	2cff      	cmp	r4, #255	@ 0xff
 801f872:	d021      	beq.n	801f8b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f874:	9c07      	ldr	r4, [sp, #28]
 801f876:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f87a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f87c:	fb04 fc0c 	mul.w	ip, r4, ip
 801f880:	9c07      	ldr	r4, [sp, #28]
 801f882:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f886:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f88a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f88c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f890:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f894:	fb04 fb0b 	mul.w	fp, r4, fp
 801f898:	44e6      	add	lr, ip
 801f89a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f89e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8a2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f8a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f8aa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f8ae:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f8b2:	ea4e 040b 	orr.w	r4, lr, fp
 801f8b6:	9407      	str	r4, [sp, #28]
 801f8b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f8ba:	2cff      	cmp	r4, #255	@ 0xff
 801f8bc:	d021      	beq.n	801f902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f8be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f8c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f8c6:	fb04 fc0c 	mul.w	ip, r4, ip
 801f8ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8cc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f8d0:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f8d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f8d6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f8da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f8de:	fb04 fb0b 	mul.w	fp, r4, fp
 801f8e2:	44e6      	add	lr, ip
 801f8e4:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f8e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8ec:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f8f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f8f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f8f8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f8fc:	ea4e 040b 	orr.w	r4, lr, fp
 801f900:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f904:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801f908:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f90c:	2bff      	cmp	r3, #255	@ 0xff
 801f90e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f912:	9c07      	ldr	r4, [sp, #28]
 801f914:	fb09 fc0c 	mul.w	ip, r9, ip
 801f918:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f91c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f920:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f922:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f926:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f92a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f92c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801f930:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f934:	fb09 f90e 	mul.w	r9, r9, lr
 801f938:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f93c:	fb01 9202 	mla	r2, r1, r2, r9
 801f940:	9907      	ldr	r1, [sp, #28]
 801f942:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f946:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801f94a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f94c:	fb00 220b 	mla	r2, r0, fp, r2
 801f950:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801f954:	fb0a 2a00 	mla	sl, sl, r0, r2
 801f958:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f95c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f960:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f964:	fa5f f08c 	uxtb.w	r0, ip
 801f968:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f96c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f970:	f000 80a2 	beq.w	801fab8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f974:	43db      	mvns	r3, r3
 801f976:	783a      	ldrb	r2, [r7, #0]
 801f978:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f97c:	b2db      	uxtb	r3, r3
 801f97e:	fb02 fe03 	mul.w	lr, r2, r3
 801f982:	fb0a fa03 	mul.w	sl, sl, r3
 801f986:	f10e 0201 	add.w	r2, lr, #1
 801f98a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801f98e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f992:	703a      	strb	r2, [r7, #0]
 801f994:	787a      	ldrb	r2, [r7, #1]
 801f996:	fb02 f003 	mul.w	r0, r2, r3
 801f99a:	f10a 0301 	add.w	r3, sl, #1
 801f99e:	1c42      	adds	r2, r0, #1
 801f9a0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f9a4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f9a8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f9ac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f9b0:	707a      	strb	r2, [r7, #1]
 801f9b2:	f887 c002 	strb.w	ip, [r7, #2]
 801f9b6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f9b8:	3703      	adds	r7, #3
 801f9ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9be:	441d      	add	r5, r3
 801f9c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f9c2:	441e      	add	r6, r3
 801f9c4:	e6ab      	b.n	801f71e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f9c6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f9c8:	441d      	add	r5, r3
 801f9ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f9cc:	441e      	add	r6, r3
 801f9ce:	9b06      	ldr	r3, [sp, #24]
 801f9d0:	3b01      	subs	r3, #1
 801f9d2:	9306      	str	r3, [sp, #24]
 801f9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9d6:	3303      	adds	r3, #3
 801f9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9da:	e680      	b.n	801f6de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f9dc:	d024      	beq.n	801fa28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f9de:	9b06      	ldr	r3, [sp, #24]
 801f9e0:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801f9e2:	3b01      	subs	r3, #1
 801f9e4:	fb00 5003 	mla	r0, r0, r3, r5
 801f9e8:	1400      	asrs	r0, r0, #16
 801f9ea:	f53f ae95 	bmi.w	801f718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f9ee:	3901      	subs	r1, #1
 801f9f0:	4288      	cmp	r0, r1
 801f9f2:	f6bf ae91 	bge.w	801f718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f9f6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801f9f8:	fb01 6303 	mla	r3, r1, r3, r6
 801f9fc:	141b      	asrs	r3, r3, #16
 801f9fe:	f53f ae8b 	bmi.w	801f718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fa02:	3a01      	subs	r2, #1
 801fa04:	4293      	cmp	r3, r2
 801fa06:	f6bf ae87 	bge.w	801f718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa0c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801fa10:	1cdf      	adds	r7, r3, #3
 801fa12:	f1bb 0f00 	cmp.w	fp, #0
 801fa16:	dc6e      	bgt.n	801faf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801fa18:	9b06      	ldr	r3, [sp, #24]
 801fa1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fa24:	4423      	add	r3, r4
 801fa26:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	f340 81b0 	ble.w	801fd90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801fa30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fa36:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa3e:	eef0 6a62 	vmov.f32	s13, s5
 801fa42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa4e:	ee16 5a90 	vmov	r5, s13
 801fa52:	eef0 6a43 	vmov.f32	s13, s6
 801fa56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa5a:	ee16 6a90 	vmov	r6, s13
 801fa5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa76:	ee12 2a90 	vmov	r2, s5
 801fa7a:	eef0 2a47 	vmov.f32	s5, s14
 801fa7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa82:	ee13 2a10 	vmov	r2, s6
 801fa86:	9325      	str	r3, [sp, #148]	@ 0x94
 801fa88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fa8a:	eeb0 3a67 	vmov.f32	s6, s15
 801fa8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa92:	9326      	str	r3, [sp, #152]	@ 0x98
 801fa94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fa96:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fa98:	3b01      	subs	r3, #1
 801fa9a:	9315      	str	r3, [sp, #84]	@ 0x54
 801fa9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fa9e:	bf08      	it	eq
 801faa0:	4613      	moveq	r3, r2
 801faa2:	9306      	str	r3, [sp, #24]
 801faa4:	e60d      	b.n	801f6c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801faa6:	2800      	cmp	r0, #0
 801faa8:	f43f ae7d 	beq.w	801f7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801faac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fab0:	9307      	str	r3, [sp, #28]
 801fab2:	0e1b      	lsrs	r3, r3, #24
 801fab4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fab6:	e676      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fab8:	7038      	strb	r0, [r7, #0]
 801faba:	7079      	strb	r1, [r7, #1]
 801fabc:	e779      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fabe:	f112 0901 	adds.w	r9, r2, #1
 801fac2:	f53f af78 	bmi.w	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fac6:	454b      	cmp	r3, r9
 801fac8:	f6ff af75 	blt.w	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801facc:	f11c 0901 	adds.w	r9, ip, #1
 801fad0:	f53f af71 	bmi.w	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fad4:	45ce      	cmp	lr, r9
 801fad6:	f6ff af6e 	blt.w	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fada:	b21b      	sxth	r3, r3
 801fadc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801fae0:	fa0f f28e 	sxth.w	r2, lr
 801fae4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801fae8:	9200      	str	r2, [sp, #0]
 801faea:	4639      	mov	r1, r7
 801faec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801faee:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801faf0:	f7ff fca1 	bl	801f436 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801faf4:	e75f      	b.n	801f9b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801faf6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801faf8:	1429      	asrs	r1, r5, #16
 801fafa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fafc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fb00:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801fb04:	1433      	asrs	r3, r6, #16
 801fb06:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fb0a:	fb0c 1303 	mla	r3, ip, r3, r1
 801fb0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fb10:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fb14:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fb18:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fb1c:	2a00      	cmp	r2, #0
 801fb1e:	f000 8129 	beq.w	801fd74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801fb22:	684c      	ldr	r4, [r1, #4]
 801fb24:	940c      	str	r4, [sp, #48]	@ 0x30
 801fb26:	0e24      	lsrs	r4, r4, #24
 801fb28:	9413      	str	r4, [sp, #76]	@ 0x4c
 801fb2a:	b198      	cbz	r0, 801fb54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fb2c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801fb30:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb34:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801fb38:	f10c 0c04 	add.w	ip, ip, #4
 801fb3c:	eb01 080c 	add.w	r8, r1, ip
 801fb40:	f851 100c 	ldr.w	r1, [r1, ip]
 801fb44:	9108      	str	r1, [sp, #32]
 801fb46:	0e09      	lsrs	r1, r1, #24
 801fb48:	9110      	str	r1, [sp, #64]	@ 0x40
 801fb4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fb4e:	910d      	str	r1, [sp, #52]	@ 0x34
 801fb50:	0e09      	lsrs	r1, r1, #24
 801fb52:	9114      	str	r1, [sp, #80]	@ 0x50
 801fb54:	b292      	uxth	r2, r2
 801fb56:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb58:	b280      	uxth	r0, r0
 801fb5a:	fb02 f900 	mul.w	r9, r2, r0
 801fb5e:	0112      	lsls	r2, r2, #4
 801fb60:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fb64:	eba2 0809 	sub.w	r8, r2, r9
 801fb68:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801fb6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fb6e:	b280      	uxth	r0, r0
 801fb70:	fa1f f888 	uxth.w	r8, r8
 801fb74:	1a09      	subs	r1, r1, r0
 801fb76:	fb08 f202 	mul.w	r2, r8, r2
 801fb7a:	b289      	uxth	r1, r1
 801fb7c:	fb01 220e 	mla	r2, r1, lr, r2
 801fb80:	fb00 2204 	mla	r2, r0, r4, r2
 801fb84:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb86:	fb09 2204 	mla	r2, r9, r4, r2
 801fb8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fb8e:	2a00      	cmp	r2, #0
 801fb90:	f000 80e8 	beq.w	801fd64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801fb94:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fb98:	d01b      	beq.n	801fbd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801fb9a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fb9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fba2:	fb0e fa0a 	mul.w	sl, lr, sl
 801fba6:	fb0e fe03 	mul.w	lr, lr, r3
 801fbaa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fbae:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fbb2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fbb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fbba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fbbe:	4453      	add	r3, sl
 801fbc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbc4:	0a1b      	lsrs	r3, r3, #8
 801fbc6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fbca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fbce:	ea43 030c 	orr.w	r3, r3, ip
 801fbd2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbd4:	2cff      	cmp	r4, #255	@ 0xff
 801fbd6:	d021      	beq.n	801fc1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801fbd8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbda:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fbde:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbe0:	fb04 fc0c 	mul.w	ip, r4, ip
 801fbe4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbe6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fbea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fbee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbf0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fbf4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fbf8:	fb04 fa0a 	mul.w	sl, r4, sl
 801fbfc:	44e6      	add	lr, ip
 801fbfe:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fc02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc0a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fc0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc12:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fc16:	ea4e 040a 	orr.w	r4, lr, sl
 801fc1a:	940c      	str	r4, [sp, #48]	@ 0x30
 801fc1c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fc1e:	2cff      	cmp	r4, #255	@ 0xff
 801fc20:	d021      	beq.n	801fc66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801fc22:	9c08      	ldr	r4, [sp, #32]
 801fc24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fc28:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fc2a:	fb04 fc0c 	mul.w	ip, r4, ip
 801fc2e:	9c08      	ldr	r4, [sp, #32]
 801fc30:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fc34:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fc36:	fb04 fa0e 	mul.w	sl, r4, lr
 801fc3a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fc3e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fc42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fc46:	44e6      	add	lr, ip
 801fc48:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fc4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fc5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fc60:	ea4e 040a 	orr.w	r4, lr, sl
 801fc64:	9408      	str	r4, [sp, #32]
 801fc66:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fc68:	2cff      	cmp	r4, #255	@ 0xff
 801fc6a:	d021      	beq.n	801fcb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801fc6c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fc6e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fc72:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fc74:	fb04 fc0c 	mul.w	ip, r4, ip
 801fc78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fc7a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fc7e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fc82:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fc84:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fc88:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fc8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fc90:	44e6      	add	lr, ip
 801fc92:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fc96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc9e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fca2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fca6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fcaa:	ea4e 040a 	orr.w	r4, lr, sl
 801fcae:	940d      	str	r4, [sp, #52]	@ 0x34
 801fcb0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fcb2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801fcb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fcba:	2aff      	cmp	r2, #255	@ 0xff
 801fcbc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fcc0:	9c08      	ldr	r4, [sp, #32]
 801fcc2:	fb08 fc0c 	mul.w	ip, r8, ip
 801fcc6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fcca:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fcce:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fcd0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fcd4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fcd8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fcda:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fcde:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fce2:	fb08 f80e 	mul.w	r8, r8, lr
 801fce6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcea:	fb01 8303 	mla	r3, r1, r3, r8
 801fcee:	9908      	ldr	r1, [sp, #32]
 801fcf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fcf4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801fcf8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801fcfa:	fb00 330a 	mla	r3, r0, sl, r3
 801fcfe:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801fd02:	fb09 3e0e 	mla	lr, r9, lr, r3
 801fd06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd0a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801fd0e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801fd12:	fa5f f08c 	uxtb.w	r0, ip
 801fd16:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801fd1a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fd1e:	d032      	beq.n	801fd86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801fd20:	43d2      	mvns	r2, r2
 801fd22:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801fd26:	b2d2      	uxtb	r2, r2
 801fd28:	fb0e fe02 	mul.w	lr, lr, r2
 801fd2c:	f10e 0301 	add.w	r3, lr, #1
 801fd30:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801fd34:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fd38:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801fd3c:	4350      	muls	r0, r2
 801fd3e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801fd42:	1c43      	adds	r3, r0, #1
 801fd44:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fd48:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fd4c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801fd50:	4353      	muls	r3, r2
 801fd52:	f807 1c02 	strb.w	r1, [r7, #-2]
 801fd56:	1c5a      	adds	r2, r3, #1
 801fd58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fd5c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801fd60:	f807 cc01 	strb.w	ip, [r7, #-1]
 801fd64:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fd66:	3703      	adds	r7, #3
 801fd68:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd6c:	441d      	add	r5, r3
 801fd6e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd70:	441e      	add	r6, r3
 801fd72:	e64e      	b.n	801fa12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801fd74:	2800      	cmp	r0, #0
 801fd76:	f43f aeed 	beq.w	801fb54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fd7a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801fd7e:	9108      	str	r1, [sp, #32]
 801fd80:	0e09      	lsrs	r1, r1, #24
 801fd82:	9110      	str	r1, [sp, #64]	@ 0x40
 801fd84:	e6e6      	b.n	801fb54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fd86:	f807 0c03 	strb.w	r0, [r7, #-3]
 801fd8a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801fd8e:	e7e7      	b.n	801fd60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801fd90:	b019      	add	sp, #100	@ 0x64
 801fd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fd98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd9c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801fda0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fda4:	2c00      	cmp	r4, #0
 801fda6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801fdaa:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801fdae:	fb00 4e03 	mla	lr, r0, r3, r4
 801fdb2:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801fdb6:	f2c0 80b8 	blt.w	801ff2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fdba:	45a1      	cmp	r9, r4
 801fdbc:	f340 80b5 	ble.w	801ff2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fdc0:	2800      	cmp	r0, #0
 801fdc2:	f2c0 80b2 	blt.w	801ff2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fdc6:	4580      	cmp	r8, r0
 801fdc8:	f340 80af 	ble.w	801ff2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fdcc:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801fdd0:	f01e 0f01 	tst.w	lr, #1
 801fdd4:	5d56      	ldrb	r6, [r2, r5]
 801fdd6:	bf0c      	ite	eq
 801fdd8:	f006 060f 	andeq.w	r6, r6, #15
 801fddc:	1136      	asrne	r6, r6, #4
 801fdde:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fde2:	b2f6      	uxtb	r6, r6
 801fde4:	f114 0a01 	adds.w	sl, r4, #1
 801fde8:	f100 80a1 	bmi.w	801ff2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fdec:	45d1      	cmp	r9, sl
 801fdee:	f340 809e 	ble.w	801ff2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fdf2:	2800      	cmp	r0, #0
 801fdf4:	f2c0 809b 	blt.w	801ff2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fdf8:	4580      	cmp	r8, r0
 801fdfa:	f340 8098 	ble.w	801ff2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fdfe:	2f00      	cmp	r7, #0
 801fe00:	f000 8097 	beq.w	801ff32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801fe04:	f10e 0b01 	add.w	fp, lr, #1
 801fe08:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fe0c:	f01b 0f01 	tst.w	fp, #1
 801fe10:	5d55      	ldrb	r5, [r2, r5]
 801fe12:	bf0c      	ite	eq
 801fe14:	f005 050f 	andeq.w	r5, r5, #15
 801fe18:	112d      	asrne	r5, r5, #4
 801fe1a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fe1e:	b2ed      	uxtb	r5, r5
 801fe20:	f1bc 0f00 	cmp.w	ip, #0
 801fe24:	f000 8089 	beq.w	801ff3a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801fe28:	2c00      	cmp	r4, #0
 801fe2a:	f100 0001 	add.w	r0, r0, #1
 801fe2e:	f2c0 8082 	blt.w	801ff36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fe32:	45a1      	cmp	r9, r4
 801fe34:	dd7f      	ble.n	801ff36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fe36:	2800      	cmp	r0, #0
 801fe38:	db7d      	blt.n	801ff36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fe3a:	4580      	cmp	r8, r0
 801fe3c:	dd7b      	ble.n	801ff36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fe3e:	eb03 0b0e 	add.w	fp, r3, lr
 801fe42:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801fe46:	f01b 0f01 	tst.w	fp, #1
 801fe4a:	5d14      	ldrb	r4, [r2, r4]
 801fe4c:	bf0c      	ite	eq
 801fe4e:	f004 040f 	andeq.w	r4, r4, #15
 801fe52:	1124      	asrne	r4, r4, #4
 801fe54:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fe58:	b2e4      	uxtb	r4, r4
 801fe5a:	f1ba 0f00 	cmp.w	sl, #0
 801fe5e:	db6f      	blt.n	801ff40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fe60:	45d1      	cmp	r9, sl
 801fe62:	dd6d      	ble.n	801ff40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fe64:	2800      	cmp	r0, #0
 801fe66:	db6b      	blt.n	801ff40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fe68:	4580      	cmp	r8, r0
 801fe6a:	dd69      	ble.n	801ff40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fe6c:	2f00      	cmp	r7, #0
 801fe6e:	d069      	beq.n	801ff44 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801fe70:	3301      	adds	r3, #1
 801fe72:	449e      	add	lr, r3
 801fe74:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fe78:	f01e 0f01 	tst.w	lr, #1
 801fe7c:	5cd0      	ldrb	r0, [r2, r3]
 801fe7e:	bf0c      	ite	eq
 801fe80:	f000 000f 	andeq.w	r0, r0, #15
 801fe84:	1100      	asrne	r0, r0, #4
 801fe86:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fe8a:	b2c3      	uxtb	r3, r0
 801fe8c:	b2ba      	uxth	r2, r7
 801fe8e:	fa1f fc8c 	uxth.w	ip, ip
 801fe92:	fb02 f00c 	mul.w	r0, r2, ip
 801fe96:	0112      	lsls	r2, r2, #4
 801fe98:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801fe9c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801fea0:	1a12      	subs	r2, r2, r0
 801fea2:	fa1f fc8c 	uxth.w	ip, ip
 801fea6:	b292      	uxth	r2, r2
 801fea8:	eba7 070c 	sub.w	r7, r7, ip
 801feac:	436a      	muls	r2, r5
 801feae:	b2bf      	uxth	r7, r7
 801feb0:	fb06 2207 	mla	r2, r6, r7, r2
 801feb4:	fb0c 2404 	mla	r4, ip, r4, r2
 801feb8:	fb00 4303 	mla	r3, r0, r3, r4
 801febc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fec0:	b38b      	cbz	r3, 801ff26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801fec2:	4a21      	ldr	r2, [pc, #132]	@ (801ff48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801fec4:	6814      	ldr	r4, [r2, #0]
 801fec6:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801feca:	b2e5      	uxtb	r5, r4
 801fecc:	4353      	muls	r3, r2
 801fece:	1c5a      	adds	r2, r3, #1
 801fed0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fed4:	1212      	asrs	r2, r2, #8
 801fed6:	b290      	uxth	r0, r2
 801fed8:	43d2      	mvns	r2, r2
 801feda:	fb15 f500 	smulbb	r5, r5, r0
 801fede:	b2d3      	uxtb	r3, r2
 801fee0:	780a      	ldrb	r2, [r1, #0]
 801fee2:	fb02 5203 	mla	r2, r2, r3, r5
 801fee6:	b292      	uxth	r2, r2
 801fee8:	1c55      	adds	r5, r2, #1
 801feea:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801feee:	784d      	ldrb	r5, [r1, #1]
 801fef0:	fb15 f503 	smulbb	r5, r5, r3
 801fef4:	1212      	asrs	r2, r2, #8
 801fef6:	700a      	strb	r2, [r1, #0]
 801fef8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801fefc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ff00:	fb02 5200 	mla	r2, r2, r0, r5
 801ff04:	b292      	uxth	r2, r2
 801ff06:	1c55      	adds	r5, r2, #1
 801ff08:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ff0c:	1212      	asrs	r2, r2, #8
 801ff0e:	704a      	strb	r2, [r1, #1]
 801ff10:	788a      	ldrb	r2, [r1, #2]
 801ff12:	fb12 f303 	smulbb	r3, r2, r3
 801ff16:	fb04 3300 	mla	r3, r4, r0, r3
 801ff1a:	b29b      	uxth	r3, r3
 801ff1c:	1c5a      	adds	r2, r3, #1
 801ff1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff22:	121b      	asrs	r3, r3, #8
 801ff24:	708b      	strb	r3, [r1, #2]
 801ff26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff2a:	2600      	movs	r6, #0
 801ff2c:	e75a      	b.n	801fde4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801ff2e:	2500      	movs	r5, #0
 801ff30:	e776      	b.n	801fe20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ff32:	463d      	mov	r5, r7
 801ff34:	e774      	b.n	801fe20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ff36:	2400      	movs	r4, #0
 801ff38:	e78f      	b.n	801fe5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801ff3a:	4663      	mov	r3, ip
 801ff3c:	4664      	mov	r4, ip
 801ff3e:	e7a5      	b.n	801fe8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ff40:	2300      	movs	r3, #0
 801ff42:	e7a3      	b.n	801fe8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ff44:	463b      	mov	r3, r7
 801ff46:	e7a1      	b.n	801fe8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ff48:	2402527c 	.word	0x2402527c

0801ff4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff50:	b097      	sub	sp, #92	@ 0x5c
 801ff52:	9214      	str	r2, [sp, #80]	@ 0x50
 801ff54:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff56:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ff58:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801ff5c:	9015      	str	r0, [sp, #84]	@ 0x54
 801ff5e:	910c      	str	r1, [sp, #48]	@ 0x30
 801ff60:	6850      	ldr	r0, [r2, #4]
 801ff62:	930e      	str	r3, [sp, #56]	@ 0x38
 801ff64:	6812      	ldr	r2, [r2, #0]
 801ff66:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801ff6a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801ff6e:	fb00 1303 	mla	r3, r0, r3, r1
 801ff72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff76:	eb02 0a03 	add.w	sl, r2, r3
 801ff7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ff7c:	689b      	ldr	r3, [r3, #8]
 801ff7e:	3301      	adds	r3, #1
 801ff80:	f023 0301 	bic.w	r3, r3, #1
 801ff84:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ff86:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ff88:	681f      	ldr	r7, [r3, #0]
 801ff8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	dc03      	bgt.n	801ff98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ff90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	f340 8247 	ble.w	8020426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ff98:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ff9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ffa2:	1e48      	subs	r0, r1, #1
 801ffa4:	f102 3cff 	add.w	ip, r2, #4294967295
 801ffa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	f340 80e5 	ble.w	802017a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ffb0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801ffb4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ffb8:	d406      	bmi.n	801ffc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ffba:	4586      	cmp	lr, r0
 801ffbc:	da04      	bge.n	801ffc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	db02      	blt.n	801ffc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ffc2:	4563      	cmp	r3, ip
 801ffc4:	f2c0 80da 	blt.w	802017c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ffc8:	f11e 0e01 	adds.w	lr, lr, #1
 801ffcc:	f100 80cb 	bmi.w	8020166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ffd0:	4571      	cmp	r1, lr
 801ffd2:	f2c0 80c8 	blt.w	8020166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ffd6:	3301      	adds	r3, #1
 801ffd8:	f100 80c5 	bmi.w	8020166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ffdc:	429a      	cmp	r2, r3
 801ffde:	f2c0 80c2 	blt.w	8020166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ffe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffe4:	46d0      	mov	r8, sl
 801ffe6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801ffea:	930d      	str	r3, [sp, #52]	@ 0x34
 801ffec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	f340 80e3 	ble.w	80201ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801fff4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fff6:	1430      	asrs	r0, r6, #16
 801fff8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fffc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020000:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020004:	142b      	asrs	r3, r5, #16
 8020006:	f100 812e 	bmi.w	8020266 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802000a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802000e:	455b      	cmp	r3, fp
 8020010:	f280 8129 	bge.w	8020266 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020014:	2800      	cmp	r0, #0
 8020016:	f2c0 8126 	blt.w	8020266 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802001a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802001e:	4558      	cmp	r0, fp
 8020020:	f280 8121 	bge.w	8020266 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020024:	fb00 3309 	mla	r3, r0, r9, r3
 8020028:	0858      	lsrs	r0, r3, #1
 802002a:	07dc      	lsls	r4, r3, #31
 802002c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020030:	bf54      	ite	pl
 8020032:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020036:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802003a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802003e:	fa5f fc8c 	uxtb.w	ip, ip
 8020042:	2a00      	cmp	r2, #0
 8020044:	f000 80fe 	beq.w	8020244 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020048:	1c58      	adds	r0, r3, #1
 802004a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802004e:	07c0      	lsls	r0, r0, #31
 8020050:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020054:	bf54      	ite	pl
 8020056:	f00e 0e0f 	andpl.w	lr, lr, #15
 802005a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802005e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020062:	fa5f f08e 	uxtb.w	r0, lr
 8020066:	9010      	str	r0, [sp, #64]	@ 0x40
 8020068:	b1d9      	cbz	r1, 80200a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802006a:	444b      	add	r3, r9
 802006c:	0858      	lsrs	r0, r3, #1
 802006e:	07dc      	lsls	r4, r3, #31
 8020070:	f103 0301 	add.w	r3, r3, #1
 8020074:	5c38      	ldrb	r0, [r7, r0]
 8020076:	bf54      	ite	pl
 8020078:	f000 000f 	andpl.w	r0, r0, #15
 802007c:	1100      	asrmi	r0, r0, #4
 802007e:	07dc      	lsls	r4, r3, #31
 8020080:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020084:	b2c0      	uxtb	r0, r0
 8020086:	900a      	str	r0, [sp, #40]	@ 0x28
 8020088:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802008c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020090:	bf54      	ite	pl
 8020092:	f00e 030f 	andpl.w	r3, lr, #15
 8020096:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802009a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802009e:	b2db      	uxtb	r3, r3
 80200a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80200a2:	b292      	uxth	r2, r2
 80200a4:	b289      	uxth	r1, r1
 80200a6:	0113      	lsls	r3, r2, #4
 80200a8:	fb02 f001 	mul.w	r0, r2, r1
 80200ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80200ae:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80200b2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80200b6:	1a1b      	subs	r3, r3, r0
 80200b8:	b289      	uxth	r1, r1
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	ebae 0e01 	sub.w	lr, lr, r1
 80200c0:	4353      	muls	r3, r2
 80200c2:	fa1f fe8e 	uxth.w	lr, lr
 80200c6:	fb0c 320e 	mla	r2, ip, lr, r3
 80200ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80200cc:	fb01 2203 	mla	r2, r1, r3, r2
 80200d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80200d2:	fb00 2203 	mla	r2, r0, r3, r2
 80200d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80200da:	2a00      	cmp	r2, #0
 80200dc:	d039      	beq.n	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80200de:	4bc7      	ldr	r3, [pc, #796]	@ (80203fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80200e0:	6819      	ldr	r1, [r3, #0]
 80200e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200e4:	fa5f fc81 	uxtb.w	ip, r1
 80200e8:	435a      	muls	r2, r3
 80200ea:	1c53      	adds	r3, r2, #1
 80200ec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80200f0:	1212      	asrs	r2, r2, #8
 80200f2:	b290      	uxth	r0, r2
 80200f4:	43d2      	mvns	r2, r2
 80200f6:	fb1c fc00 	smulbb	ip, ip, r0
 80200fa:	b2d3      	uxtb	r3, r2
 80200fc:	f898 2000 	ldrb.w	r2, [r8]
 8020100:	fb02 c203 	mla	r2, r2, r3, ip
 8020104:	b292      	uxth	r2, r2
 8020106:	f102 0c01 	add.w	ip, r2, #1
 802010a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802010e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020112:	fb1c fc03 	smulbb	ip, ip, r3
 8020116:	1212      	asrs	r2, r2, #8
 8020118:	f888 2000 	strb.w	r2, [r8]
 802011c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020120:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020124:	fb02 c200 	mla	r2, r2, r0, ip
 8020128:	b292      	uxth	r2, r2
 802012a:	f102 0c01 	add.w	ip, r2, #1
 802012e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020132:	1212      	asrs	r2, r2, #8
 8020134:	f888 2001 	strb.w	r2, [r8, #1]
 8020138:	f898 2002 	ldrb.w	r2, [r8, #2]
 802013c:	fb12 f303 	smulbb	r3, r2, r3
 8020140:	fb01 3300 	mla	r3, r1, r0, r3
 8020144:	b29b      	uxth	r3, r3
 8020146:	1c5a      	adds	r2, r3, #1
 8020148:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802014c:	121b      	asrs	r3, r3, #8
 802014e:	f888 3002 	strb.w	r3, [r8, #2]
 8020152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020154:	f108 0803 	add.w	r8, r8, #3
 8020158:	441d      	add	r5, r3
 802015a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802015c:	441e      	add	r6, r3
 802015e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020160:	3b01      	subs	r3, #1
 8020162:	930d      	str	r3, [sp, #52]	@ 0x34
 8020164:	e742      	b.n	801ffec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020166:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020168:	f10a 0a03 	add.w	sl, sl, #3
 802016c:	441d      	add	r5, r3
 802016e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020170:	441e      	add	r6, r3
 8020172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020174:	3b01      	subs	r3, #1
 8020176:	9309      	str	r3, [sp, #36]	@ 0x24
 8020178:	e716      	b.n	801ffa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802017a:	d024      	beq.n	80201c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802017c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802017e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020180:	3b01      	subs	r3, #1
 8020182:	fb00 5003 	mla	r0, r0, r3, r5
 8020186:	1400      	asrs	r0, r0, #16
 8020188:	f53f af2b 	bmi.w	801ffe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802018c:	3901      	subs	r1, #1
 802018e:	4288      	cmp	r0, r1
 8020190:	f6bf af27 	bge.w	801ffe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020194:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8020196:	fb01 6303 	mla	r3, r1, r3, r6
 802019a:	141b      	asrs	r3, r3, #16
 802019c:	f53f af21 	bmi.w	801ffe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80201a0:	3a01      	subs	r2, #1
 80201a2:	4293      	cmp	r3, r2
 80201a4:	f6bf af1d 	bge.w	801ffe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80201a8:	f10a 0e03 	add.w	lr, sl, #3
 80201ac:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80201b0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80201b4:	f1b8 0f00 	cmp.w	r8, #0
 80201b8:	dc76      	bgt.n	80202a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80201ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201c4:	44a2      	add	sl, r4
 80201c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	f340 812c 	ble.w	8020426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80201ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80201d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80201d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201dc:	eef0 6a62 	vmov.f32	s13, s5
 80201e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80201e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201ec:	ee16 5a90 	vmov	r5, s13
 80201f0:	eef0 6a43 	vmov.f32	s13, s6
 80201f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201f8:	ee16 6a90 	vmov	r6, s13
 80201fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020200:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020204:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020208:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802020c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020210:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020214:	ee12 2a90 	vmov	r2, s5
 8020218:	eef0 2a47 	vmov.f32	s5, s14
 802021c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020220:	ee13 2a10 	vmov	r2, s6
 8020224:	9323      	str	r3, [sp, #140]	@ 0x8c
 8020226:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020228:	eeb0 3a67 	vmov.f32	s6, s15
 802022c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020230:	9324      	str	r3, [sp, #144]	@ 0x90
 8020232:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020234:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020236:	3b01      	subs	r3, #1
 8020238:	930c      	str	r3, [sp, #48]	@ 0x30
 802023a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802023c:	bf08      	it	eq
 802023e:	4613      	moveq	r3, r2
 8020240:	9309      	str	r3, [sp, #36]	@ 0x24
 8020242:	e6a2      	b.n	801ff8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020244:	2900      	cmp	r1, #0
 8020246:	f43f af2c 	beq.w	80200a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802024a:	eb09 0003 	add.w	r0, r9, r3
 802024e:	0843      	lsrs	r3, r0, #1
 8020250:	07c0      	lsls	r0, r0, #31
 8020252:	5cfb      	ldrb	r3, [r7, r3]
 8020254:	bf54      	ite	pl
 8020256:	f003 030f 	andpl.w	r3, r3, #15
 802025a:	111b      	asrmi	r3, r3, #4
 802025c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020260:	b2db      	uxtb	r3, r3
 8020262:	930a      	str	r3, [sp, #40]	@ 0x28
 8020264:	e71d      	b.n	80200a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020266:	f113 0b01 	adds.w	fp, r3, #1
 802026a:	f53f af72 	bmi.w	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802026e:	45dc      	cmp	ip, fp
 8020270:	f6ff af6f 	blt.w	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020274:	f110 0b01 	adds.w	fp, r0, #1
 8020278:	f53f af6b 	bmi.w	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802027c:	45de      	cmp	lr, fp
 802027e:	f6ff af68 	blt.w	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020282:	9302      	str	r3, [sp, #8]
 8020284:	fa0f f38e 	sxth.w	r3, lr
 8020288:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802028a:	9301      	str	r3, [sp, #4]
 802028c:	fa0f f38c 	sxth.w	r3, ip
 8020290:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020294:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020298:	9300      	str	r3, [sp, #0]
 802029a:	463a      	mov	r2, r7
 802029c:	464b      	mov	r3, r9
 802029e:	4641      	mov	r1, r8
 80202a0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80202a2:	f7ff fd79 	bl	801fd98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80202a6:	e754      	b.n	8020152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80202a8:	142a      	asrs	r2, r5, #16
 80202aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80202ae:	1433      	asrs	r3, r6, #16
 80202b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80202b4:	fb09 2303 	mla	r3, r9, r3, r2
 80202b8:	085a      	lsrs	r2, r3, #1
 80202ba:	07dc      	lsls	r4, r3, #31
 80202bc:	5cba      	ldrb	r2, [r7, r2]
 80202be:	bf54      	ite	pl
 80202c0:	f002 020f 	andpl.w	r2, r2, #15
 80202c4:	1112      	asrmi	r2, r2, #4
 80202c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80202ca:	b2d2      	uxtb	r2, r2
 80202cc:	2900      	cmp	r1, #0
 80202ce:	f000 8097 	beq.w	8020400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80202d2:	f103 0b01 	add.w	fp, r3, #1
 80202d6:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80202da:	f01b 0f01 	tst.w	fp, #1
 80202de:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80202e2:	bf0c      	ite	eq
 80202e4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80202e8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80202ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80202f0:	fa5f f48c 	uxtb.w	r4, ip
 80202f4:	9412      	str	r4, [sp, #72]	@ 0x48
 80202f6:	b300      	cbz	r0, 802033a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80202f8:	444b      	add	r3, r9
 80202fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80202fe:	07dc      	lsls	r4, r3, #31
 8020300:	f103 0301 	add.w	r3, r3, #1
 8020304:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020308:	bf54      	ite	pl
 802030a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802030e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020312:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020316:	fa5f f48c 	uxtb.w	r4, ip
 802031a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802031e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020320:	07dc      	lsls	r4, r3, #31
 8020322:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020326:	bf54      	ite	pl
 8020328:	f00c 0c0f 	andpl.w	ip, ip, #15
 802032c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020330:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020334:	fa5f f38c 	uxtb.w	r3, ip
 8020338:	9313      	str	r3, [sp, #76]	@ 0x4c
 802033a:	b289      	uxth	r1, r1
 802033c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802033e:	b280      	uxth	r0, r0
 8020340:	fb01 f300 	mul.w	r3, r1, r0
 8020344:	0109      	lsls	r1, r1, #4
 8020346:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802034a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802034e:	1ac9      	subs	r1, r1, r3
 8020350:	b280      	uxth	r0, r0
 8020352:	b289      	uxth	r1, r1
 8020354:	ebac 0c00 	sub.w	ip, ip, r0
 8020358:	4361      	muls	r1, r4
 802035a:	fa1f fc8c 	uxth.w	ip, ip
 802035e:	fb02 120c 	mla	r2, r2, ip, r1
 8020362:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020364:	fb00 2001 	mla	r0, r0, r1, r2
 8020368:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802036a:	fb03 0302 	mla	r3, r3, r2, r0
 802036e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020372:	2b00      	cmp	r3, #0
 8020374:	d039      	beq.n	80203ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020376:	4a21      	ldr	r2, [pc, #132]	@ (80203fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020378:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802037c:	6810      	ldr	r0, [r2, #0]
 802037e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020380:	fa5f fc80 	uxtb.w	ip, r0
 8020384:	4353      	muls	r3, r2
 8020386:	1c5a      	adds	r2, r3, #1
 8020388:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802038c:	121b      	asrs	r3, r3, #8
 802038e:	b29a      	uxth	r2, r3
 8020390:	43db      	mvns	r3, r3
 8020392:	fb1c fc02 	smulbb	ip, ip, r2
 8020396:	b2db      	uxtb	r3, r3
 8020398:	fb01 c103 	mla	r1, r1, r3, ip
 802039c:	b289      	uxth	r1, r1
 802039e:	f101 0c01 	add.w	ip, r1, #1
 80203a2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80203a6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80203aa:	fb1c fc03 	smulbb	ip, ip, r3
 80203ae:	1209      	asrs	r1, r1, #8
 80203b0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80203b4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80203b8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80203bc:	fb01 c102 	mla	r1, r1, r2, ip
 80203c0:	b289      	uxth	r1, r1
 80203c2:	f101 0c01 	add.w	ip, r1, #1
 80203c6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80203ca:	1209      	asrs	r1, r1, #8
 80203cc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80203d0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80203d4:	fb11 f303 	smulbb	r3, r1, r3
 80203d8:	fb00 3002 	mla	r0, r0, r2, r3
 80203dc:	b280      	uxth	r0, r0
 80203de:	1c42      	adds	r2, r0, #1
 80203e0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80203e4:	1200      	asrs	r0, r0, #8
 80203e6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80203ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80203ec:	f10e 0e03 	add.w	lr, lr, #3
 80203f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80203f4:	441d      	add	r5, r3
 80203f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80203f8:	441e      	add	r6, r3
 80203fa:	e6db      	b.n	80201b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80203fc:	2402527c 	.word	0x2402527c
 8020400:	2800      	cmp	r0, #0
 8020402:	d09a      	beq.n	802033a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020404:	444b      	add	r3, r9
 8020406:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802040a:	07db      	lsls	r3, r3, #31
 802040c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020410:	bf54      	ite	pl
 8020412:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020416:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802041a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802041e:	fa5f f38c 	uxtb.w	r3, ip
 8020422:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020424:	e789      	b.n	802033a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020426:	b017      	add	sp, #92	@ 0x5c
 8020428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802042c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 802042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020430:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8020434:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020438:	2d00      	cmp	r5, #0
 802043a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802043e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8020442:	fb04 5e03 	mla	lr, r4, r3, r5
 8020446:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802044a:	f2c0 80b1 	blt.w	80205b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802044e:	45a9      	cmp	r9, r5
 8020450:	f340 80ae 	ble.w	80205b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020454:	2c00      	cmp	r4, #0
 8020456:	f2c0 80ab 	blt.w	80205b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802045a:	45a0      	cmp	r8, r4
 802045c:	f340 80a8 	ble.w	80205b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020460:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8020464:	f01e 0f01 	tst.w	lr, #1
 8020468:	5d97      	ldrb	r7, [r2, r6]
 802046a:	bf0c      	ite	eq
 802046c:	f007 070f 	andeq.w	r7, r7, #15
 8020470:	113f      	asrne	r7, r7, #4
 8020472:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8020476:	b2ff      	uxtb	r7, r7
 8020478:	f115 0a01 	adds.w	sl, r5, #1
 802047c:	f100 809a 	bmi.w	80205b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020480:	45d1      	cmp	r9, sl
 8020482:	f340 8097 	ble.w	80205b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020486:	2c00      	cmp	r4, #0
 8020488:	f2c0 8094 	blt.w	80205b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802048c:	45a0      	cmp	r8, r4
 802048e:	f340 8091 	ble.w	80205b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020492:	2800      	cmp	r0, #0
 8020494:	f000 8090 	beq.w	80205b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8020498:	f10e 0b01 	add.w	fp, lr, #1
 802049c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80204a0:	f01b 0f01 	tst.w	fp, #1
 80204a4:	5d96      	ldrb	r6, [r2, r6]
 80204a6:	bf0c      	ite	eq
 80204a8:	f006 060f 	andeq.w	r6, r6, #15
 80204ac:	1136      	asrne	r6, r6, #4
 80204ae:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80204b2:	b2f6      	uxtb	r6, r6
 80204b4:	f1bc 0f00 	cmp.w	ip, #0
 80204b8:	f000 8082 	beq.w	80205c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80204bc:	2d00      	cmp	r5, #0
 80204be:	f104 0401 	add.w	r4, r4, #1
 80204c2:	db7b      	blt.n	80205bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80204c4:	45a9      	cmp	r9, r5
 80204c6:	dd79      	ble.n	80205bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80204c8:	2c00      	cmp	r4, #0
 80204ca:	db77      	blt.n	80205bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80204cc:	45a0      	cmp	r8, r4
 80204ce:	dd75      	ble.n	80205bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80204d0:	eb03 0b0e 	add.w	fp, r3, lr
 80204d4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80204d8:	f01b 0f01 	tst.w	fp, #1
 80204dc:	5d55      	ldrb	r5, [r2, r5]
 80204de:	bf0c      	ite	eq
 80204e0:	f005 050f 	andeq.w	r5, r5, #15
 80204e4:	112d      	asrne	r5, r5, #4
 80204e6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80204ea:	b2ed      	uxtb	r5, r5
 80204ec:	f1ba 0f00 	cmp.w	sl, #0
 80204f0:	db69      	blt.n	80205c6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80204f2:	45d1      	cmp	r9, sl
 80204f4:	dd67      	ble.n	80205c6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80204f6:	2c00      	cmp	r4, #0
 80204f8:	db65      	blt.n	80205c6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80204fa:	45a0      	cmp	r8, r4
 80204fc:	dd63      	ble.n	80205c6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80204fe:	2800      	cmp	r0, #0
 8020500:	d063      	beq.n	80205ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8020502:	3301      	adds	r3, #1
 8020504:	449e      	add	lr, r3
 8020506:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802050a:	f01e 0f01 	tst.w	lr, #1
 802050e:	5cd4      	ldrb	r4, [r2, r3]
 8020510:	bf0c      	ite	eq
 8020512:	f004 040f 	andeq.w	r4, r4, #15
 8020516:	1124      	asrne	r4, r4, #4
 8020518:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802051c:	b2e3      	uxtb	r3, r4
 802051e:	b282      	uxth	r2, r0
 8020520:	fa1f fc8c 	uxth.w	ip, ip
 8020524:	fb02 f40c 	mul.w	r4, r2, ip
 8020528:	0112      	lsls	r2, r2, #4
 802052a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 802052e:	fa1f f08c 	uxth.w	r0, ip
 8020532:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8020536:	1b12      	subs	r2, r2, r4
 8020538:	ebac 0c00 	sub.w	ip, ip, r0
 802053c:	b292      	uxth	r2, r2
 802053e:	fa1f fc8c 	uxth.w	ip, ip
 8020542:	4372      	muls	r2, r6
 8020544:	fb07 220c 	mla	r2, r7, ip, r2
 8020548:	fb00 2005 	mla	r0, r0, r5, r2
 802054c:	fb04 0303 	mla	r3, r4, r3, r0
 8020550:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020554:	b353      	cbz	r3, 80205ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8020556:	4a1e      	ldr	r2, [pc, #120]	@ (80205d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8020558:	7808      	ldrb	r0, [r1, #0]
 802055a:	6814      	ldr	r4, [r2, #0]
 802055c:	b29a      	uxth	r2, r3
 802055e:	43db      	mvns	r3, r3
 8020560:	b2e5      	uxtb	r5, r4
 8020562:	b2db      	uxtb	r3, r3
 8020564:	fb15 f502 	smulbb	r5, r5, r2
 8020568:	fb00 5003 	mla	r0, r0, r3, r5
 802056c:	b280      	uxth	r0, r0
 802056e:	1c45      	adds	r5, r0, #1
 8020570:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020574:	784d      	ldrb	r5, [r1, #1]
 8020576:	fb15 f503 	smulbb	r5, r5, r3
 802057a:	1200      	asrs	r0, r0, #8
 802057c:	7008      	strb	r0, [r1, #0]
 802057e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8020582:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020586:	fb00 5002 	mla	r0, r0, r2, r5
 802058a:	b280      	uxth	r0, r0
 802058c:	1c45      	adds	r5, r0, #1
 802058e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020592:	1200      	asrs	r0, r0, #8
 8020594:	7048      	strb	r0, [r1, #1]
 8020596:	7888      	ldrb	r0, [r1, #2]
 8020598:	fb10 f303 	smulbb	r3, r0, r3
 802059c:	fb04 3202 	mla	r2, r4, r2, r3
 80205a0:	b292      	uxth	r2, r2
 80205a2:	1c53      	adds	r3, r2, #1
 80205a4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80205a8:	1212      	asrs	r2, r2, #8
 80205aa:	708a      	strb	r2, [r1, #2]
 80205ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b0:	2700      	movs	r7, #0
 80205b2:	e761      	b.n	8020478 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80205b4:	2600      	movs	r6, #0
 80205b6:	e77d      	b.n	80204b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80205b8:	4606      	mov	r6, r0
 80205ba:	e77b      	b.n	80204b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80205bc:	2500      	movs	r5, #0
 80205be:	e795      	b.n	80204ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80205c0:	4663      	mov	r3, ip
 80205c2:	4665      	mov	r5, ip
 80205c4:	e7ab      	b.n	802051e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80205c6:	2300      	movs	r3, #0
 80205c8:	e7a9      	b.n	802051e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80205ca:	4603      	mov	r3, r0
 80205cc:	e7a7      	b.n	802051e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80205ce:	bf00      	nop
 80205d0:	2402527c 	.word	0x2402527c

080205d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205d8:	b093      	sub	sp, #76	@ 0x4c
 80205da:	461c      	mov	r4, r3
 80205dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80205de:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80205e0:	9011      	str	r0, [sp, #68]	@ 0x44
 80205e2:	9107      	str	r1, [sp, #28]
 80205e4:	6850      	ldr	r0, [r2, #4]
 80205e6:	6812      	ldr	r2, [r2, #0]
 80205e8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80205ec:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80205f0:	fb00 1303 	mla	r3, r0, r3, r1
 80205f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80205f8:	eb02 0b03 	add.w	fp, r2, r3
 80205fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80205fe:	689b      	ldr	r3, [r3, #8]
 8020600:	3301      	adds	r3, #1
 8020602:	f023 0301 	bic.w	r3, r3, #1
 8020606:	9309      	str	r3, [sp, #36]	@ 0x24
 8020608:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802060a:	f8d3 8000 	ldr.w	r8, [r3]
 802060e:	9b07      	ldr	r3, [sp, #28]
 8020610:	2b00      	cmp	r3, #0
 8020612:	dc03      	bgt.n	802061c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020616:	2b00      	cmp	r3, #0
 8020618:	f340 822b 	ble.w	8020a72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802061c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802061e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020622:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020626:	1e48      	subs	r0, r1, #1
 8020628:	1e57      	subs	r7, r2, #1
 802062a:	2c00      	cmp	r4, #0
 802062c:	f340 80d7 	ble.w	80207de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020630:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020634:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020638:	d406      	bmi.n	8020648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802063a:	4584      	cmp	ip, r0
 802063c:	da04      	bge.n	8020648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802063e:	2b00      	cmp	r3, #0
 8020640:	db02      	blt.n	8020648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020642:	42bb      	cmp	r3, r7
 8020644:	f2c0 80cc 	blt.w	80207e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020648:	f11c 0c01 	adds.w	ip, ip, #1
 802064c:	f100 80bf 	bmi.w	80207ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020650:	4561      	cmp	r1, ip
 8020652:	f2c0 80bc 	blt.w	80207ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020656:	3301      	adds	r3, #1
 8020658:	f100 80b9 	bmi.w	80207ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802065c:	429a      	cmp	r2, r3
 802065e:	f2c0 80b6 	blt.w	80207ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020662:	46a2      	mov	sl, r4
 8020664:	465f      	mov	r7, fp
 8020666:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802066a:	f1ba 0f00 	cmp.w	sl, #0
 802066e:	f340 80d4 	ble.w	802081a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8020672:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8020676:	1430      	asrs	r0, r6, #16
 8020678:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802067c:	9308      	str	r3, [sp, #32]
 802067e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020680:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020684:	142b      	asrs	r3, r5, #16
 8020686:	f100 8124 	bmi.w	80208d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802068a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802068e:	4293      	cmp	r3, r2
 8020690:	f280 811f 	bge.w	80208d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020694:	2800      	cmp	r0, #0
 8020696:	f2c0 811c 	blt.w	80208d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802069a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802069e:	4290      	cmp	r0, r2
 80206a0:	f280 8117 	bge.w	80208d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80206a4:	fb00 3309 	mla	r3, r0, r9, r3
 80206a8:	0858      	lsrs	r0, r3, #1
 80206aa:	07da      	lsls	r2, r3, #31
 80206ac:	9a08      	ldr	r2, [sp, #32]
 80206ae:	f818 c000 	ldrb.w	ip, [r8, r0]
 80206b2:	bf54      	ite	pl
 80206b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80206b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80206bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80206c0:	fa5f fc8c 	uxtb.w	ip, ip
 80206c4:	2a00      	cmp	r2, #0
 80206c6:	f000 80ed 	beq.w	80208a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80206ca:	1c58      	adds	r0, r3, #1
 80206cc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80206d0:	07c0      	lsls	r0, r0, #31
 80206d2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80206d6:	bf54      	ite	pl
 80206d8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80206dc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80206e0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80206e4:	fa5f fe8e 	uxtb.w	lr, lr
 80206e8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80206ec:	b1c9      	cbz	r1, 8020722 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80206ee:	444b      	add	r3, r9
 80206f0:	0858      	lsrs	r0, r3, #1
 80206f2:	07da      	lsls	r2, r3, #31
 80206f4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80206f8:	bf54      	ite	pl
 80206fa:	f000 000f 	andpl.w	r0, r0, #15
 80206fe:	1100      	asrmi	r0, r0, #4
 8020700:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020704:	b2c0      	uxtb	r0, r0
 8020706:	900a      	str	r0, [sp, #40]	@ 0x28
 8020708:	1c58      	adds	r0, r3, #1
 802070a:	0843      	lsrs	r3, r0, #1
 802070c:	07c2      	lsls	r2, r0, #31
 802070e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8020712:	bf54      	ite	pl
 8020714:	f003 030f 	andpl.w	r3, r3, #15
 8020718:	111b      	asrmi	r3, r3, #4
 802071a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802071e:	b2db      	uxtb	r3, r3
 8020720:	930e      	str	r3, [sp, #56]	@ 0x38
 8020722:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020726:	b289      	uxth	r1, r1
 8020728:	fb02 f301 	mul.w	r3, r2, r1
 802072c:	0112      	lsls	r2, r2, #4
 802072e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020732:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8020736:	1ad2      	subs	r2, r2, r3
 8020738:	b289      	uxth	r1, r1
 802073a:	b292      	uxth	r2, r2
 802073c:	1a40      	subs	r0, r0, r1
 802073e:	fa1f fe80 	uxth.w	lr, r0
 8020742:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020744:	4342      	muls	r2, r0
 8020746:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802074a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802074c:	fb01 c102 	mla	r1, r1, r2, ip
 8020750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020752:	fb03 1302 	mla	r3, r3, r2, r1
 8020756:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802075a:	b383      	cbz	r3, 80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802075c:	4ac6      	ldr	r2, [pc, #792]	@ (8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802075e:	2bff      	cmp	r3, #255	@ 0xff
 8020760:	6812      	ldr	r2, [r2, #0]
 8020762:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8020766:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802076a:	b2d2      	uxtb	r2, r2
 802076c:	f000 80ac 	beq.w	80208c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020770:	b299      	uxth	r1, r3
 8020772:	43db      	mvns	r3, r3
 8020774:	f897 c000 	ldrb.w	ip, [r7]
 8020778:	fb12 f201 	smulbb	r2, r2, r1
 802077c:	b2db      	uxtb	r3, r3
 802077e:	fb10 f001 	smulbb	r0, r0, r1
 8020782:	fb0c 2203 	mla	r2, ip, r3, r2
 8020786:	fb1e f101 	smulbb	r1, lr, r1
 802078a:	b292      	uxth	r2, r2
 802078c:	f102 0c01 	add.w	ip, r2, #1
 8020790:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020794:	1212      	asrs	r2, r2, #8
 8020796:	703a      	strb	r2, [r7, #0]
 8020798:	787a      	ldrb	r2, [r7, #1]
 802079a:	fb02 0003 	mla	r0, r2, r3, r0
 802079e:	b280      	uxth	r0, r0
 80207a0:	1c42      	adds	r2, r0, #1
 80207a2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80207a6:	78ba      	ldrb	r2, [r7, #2]
 80207a8:	fb02 1303 	mla	r3, r2, r3, r1
 80207ac:	1200      	asrs	r0, r0, #8
 80207ae:	b29b      	uxth	r3, r3
 80207b0:	7078      	strb	r0, [r7, #1]
 80207b2:	f103 0e01 	add.w	lr, r3, #1
 80207b6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80207ba:	121b      	asrs	r3, r3, #8
 80207bc:	70bb      	strb	r3, [r7, #2]
 80207be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80207c0:	3703      	adds	r7, #3
 80207c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80207c6:	441d      	add	r5, r3
 80207c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80207ca:	441e      	add	r6, r3
 80207cc:	e74d      	b.n	802066a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80207ce:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80207d0:	3c01      	subs	r4, #1
 80207d2:	f10b 0b03 	add.w	fp, fp, #3
 80207d6:	441d      	add	r5, r3
 80207d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80207da:	441e      	add	r6, r3
 80207dc:	e725      	b.n	802062a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80207de:	d021      	beq.n	8020824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80207e0:	1e63      	subs	r3, r4, #1
 80207e2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80207e4:	fb00 5003 	mla	r0, r0, r3, r5
 80207e8:	1400      	asrs	r0, r0, #16
 80207ea:	f53f af3a 	bmi.w	8020662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207ee:	3901      	subs	r1, #1
 80207f0:	4288      	cmp	r0, r1
 80207f2:	f6bf af36 	bge.w	8020662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207f6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80207f8:	fb01 6303 	mla	r3, r1, r3, r6
 80207fc:	141b      	asrs	r3, r3, #16
 80207fe:	f53f af30 	bmi.w	8020662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020802:	3a01      	subs	r2, #1
 8020804:	4293      	cmp	r3, r2
 8020806:	f6bf af2c 	bge.w	8020662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802080a:	f10b 0c03 	add.w	ip, fp, #3
 802080e:	46a6      	mov	lr, r4
 8020810:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020814:	f1be 0f00 	cmp.w	lr, #0
 8020818:	dc79      	bgt.n	802090e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802081a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802081e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020822:	44a3      	add	fp, r4
 8020824:	9b07      	ldr	r3, [sp, #28]
 8020826:	2b00      	cmp	r3, #0
 8020828:	f340 8123 	ble.w	8020a72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802082c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020830:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020832:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020836:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802083a:	eef0 6a62 	vmov.f32	s13, s5
 802083e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020842:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020846:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802084a:	ee16 5a90 	vmov	r5, s13
 802084e:	eef0 6a43 	vmov.f32	s13, s6
 8020852:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020856:	ee16 6a90 	vmov	r6, s13
 802085a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802085e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020862:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020866:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802086a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802086e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020872:	ee12 2a90 	vmov	r2, s5
 8020876:	eef0 2a47 	vmov.f32	s5, s14
 802087a:	fb92 f3f3 	sdiv	r3, r2, r3
 802087e:	ee13 2a10 	vmov	r2, s6
 8020882:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020884:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020886:	eeb0 3a67 	vmov.f32	s6, s15
 802088a:	fb92 f3f3 	sdiv	r3, r2, r3
 802088e:	9320      	str	r3, [sp, #128]	@ 0x80
 8020890:	9b07      	ldr	r3, [sp, #28]
 8020892:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020894:	3b01      	subs	r3, #1
 8020896:	9307      	str	r3, [sp, #28]
 8020898:	bf08      	it	eq
 802089a:	4614      	moveq	r4, r2
 802089c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802089e:	bf18      	it	ne
 80208a0:	461c      	movne	r4, r3
 80208a2:	e6b4      	b.n	802060e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80208a4:	2900      	cmp	r1, #0
 80208a6:	f43f af3c 	beq.w	8020722 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80208aa:	eb09 0003 	add.w	r0, r9, r3
 80208ae:	0843      	lsrs	r3, r0, #1
 80208b0:	07c0      	lsls	r0, r0, #31
 80208b2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80208b6:	bf54      	ite	pl
 80208b8:	f003 030f 	andpl.w	r3, r3, #15
 80208bc:	111b      	asrmi	r3, r3, #4
 80208be:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80208c2:	b2db      	uxtb	r3, r3
 80208c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80208c6:	e72c      	b.n	8020722 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80208c8:	703a      	strb	r2, [r7, #0]
 80208ca:	7078      	strb	r0, [r7, #1]
 80208cc:	f887 e002 	strb.w	lr, [r7, #2]
 80208d0:	e775      	b.n	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80208d2:	1c5a      	adds	r2, r3, #1
 80208d4:	f53f af73 	bmi.w	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80208d8:	4594      	cmp	ip, r2
 80208da:	f6ff af70 	blt.w	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80208de:	1c42      	adds	r2, r0, #1
 80208e0:	f53f af6d 	bmi.w	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80208e4:	4596      	cmp	lr, r2
 80208e6:	f6ff af6a 	blt.w	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80208ea:	9302      	str	r3, [sp, #8]
 80208ec:	fa0f f38e 	sxth.w	r3, lr
 80208f0:	9a08      	ldr	r2, [sp, #32]
 80208f2:	9301      	str	r3, [sp, #4]
 80208f4:	fa0f f38c 	sxth.w	r3, ip
 80208f8:	9105      	str	r1, [sp, #20]
 80208fa:	4639      	mov	r1, r7
 80208fc:	9300      	str	r3, [sp, #0]
 80208fe:	464b      	mov	r3, r9
 8020900:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020904:	4642      	mov	r2, r8
 8020906:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020908:	f7ff fd90 	bl	802042c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802090c:	e757      	b.n	80207be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802090e:	142a      	asrs	r2, r5, #16
 8020910:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020914:	1433      	asrs	r3, r6, #16
 8020916:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802091a:	fb09 2303 	mla	r3, r9, r3, r2
 802091e:	085a      	lsrs	r2, r3, #1
 8020920:	07d9      	lsls	r1, r3, #31
 8020922:	f818 2002 	ldrb.w	r2, [r8, r2]
 8020926:	bf54      	ite	pl
 8020928:	f002 020f 	andpl.w	r2, r2, #15
 802092c:	1112      	asrmi	r2, r2, #4
 802092e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020932:	b2d2      	uxtb	r2, r2
 8020934:	2800      	cmp	r0, #0
 8020936:	f000 8085 	beq.w	8020a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802093a:	f103 0a01 	add.w	sl, r3, #1
 802093e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8020942:	f01a 0f01 	tst.w	sl, #1
 8020946:	f818 1001 	ldrb.w	r1, [r8, r1]
 802094a:	bf0c      	ite	eq
 802094c:	f001 010f 	andeq.w	r1, r1, #15
 8020950:	1109      	asrne	r1, r1, #4
 8020952:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020956:	b2c9      	uxtb	r1, r1
 8020958:	910f      	str	r1, [sp, #60]	@ 0x3c
 802095a:	b1df      	cbz	r7, 8020994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802095c:	444b      	add	r3, r9
 802095e:	0859      	lsrs	r1, r3, #1
 8020960:	f013 0f01 	tst.w	r3, #1
 8020964:	f103 0301 	add.w	r3, r3, #1
 8020968:	f818 1001 	ldrb.w	r1, [r8, r1]
 802096c:	bf0c      	ite	eq
 802096e:	f001 010f 	andeq.w	r1, r1, #15
 8020972:	1109      	asrne	r1, r1, #4
 8020974:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020978:	b2c9      	uxtb	r1, r1
 802097a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802097c:	0859      	lsrs	r1, r3, #1
 802097e:	07db      	lsls	r3, r3, #31
 8020980:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020984:	bf54      	ite	pl
 8020986:	f001 010f 	andpl.w	r1, r1, #15
 802098a:	1109      	asrmi	r1, r1, #4
 802098c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020990:	b2c9      	uxtb	r1, r1
 8020992:	9110      	str	r1, [sp, #64]	@ 0x40
 8020994:	b280      	uxth	r0, r0
 8020996:	b2bf      	uxth	r7, r7
 8020998:	fb00 f307 	mul.w	r3, r0, r7
 802099c:	0100      	lsls	r0, r0, #4
 802099e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80209a2:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80209a6:	1ac0      	subs	r0, r0, r3
 80209a8:	b2bf      	uxth	r7, r7
 80209aa:	b280      	uxth	r0, r0
 80209ac:	1bc9      	subs	r1, r1, r7
 80209ae:	fa1f fa81 	uxth.w	sl, r1
 80209b2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80209b4:	4348      	muls	r0, r1
 80209b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209b8:	fb02 020a 	mla	r2, r2, sl, r0
 80209bc:	fb07 2701 	mla	r7, r7, r1, r2
 80209c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80209c2:	fb03 7302 	mla	r3, r3, r2, r7
 80209c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80209ca:	b393      	cbz	r3, 8020a32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80209cc:	4a2a      	ldr	r2, [pc, #168]	@ (8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80209ce:	2bff      	cmp	r3, #255	@ 0xff
 80209d0:	6811      	ldr	r1, [r2, #0]
 80209d2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80209d6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80209da:	b2c9      	uxtb	r1, r1
 80209dc:	d042      	beq.n	8020a64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80209de:	b298      	uxth	r0, r3
 80209e0:	43db      	mvns	r3, r3
 80209e2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80209e6:	fb11 f100 	smulbb	r1, r1, r0
 80209ea:	b2db      	uxtb	r3, r3
 80209ec:	fb17 f700 	smulbb	r7, r7, r0
 80209f0:	fb02 1103 	mla	r1, r2, r3, r1
 80209f4:	fb1a f000 	smulbb	r0, sl, r0
 80209f8:	b289      	uxth	r1, r1
 80209fa:	1c4a      	adds	r2, r1, #1
 80209fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020a00:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8020a04:	fb02 7703 	mla	r7, r2, r3, r7
 8020a08:	1209      	asrs	r1, r1, #8
 8020a0a:	b2bf      	uxth	r7, r7
 8020a0c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020a10:	1c7a      	adds	r2, r7, #1
 8020a12:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020a16:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8020a1a:	fb02 0303 	mla	r3, r2, r3, r0
 8020a1e:	123f      	asrs	r7, r7, #8
 8020a20:	b29b      	uxth	r3, r3
 8020a22:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020a26:	1c5a      	adds	r2, r3, #1
 8020a28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020a2c:	121b      	asrs	r3, r3, #8
 8020a2e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8020a32:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020a34:	f10c 0c03 	add.w	ip, ip, #3
 8020a38:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020a3c:	441d      	add	r5, r3
 8020a3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020a40:	441e      	add	r6, r3
 8020a42:	e6e7      	b.n	8020814 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020a44:	2f00      	cmp	r7, #0
 8020a46:	d0a5      	beq.n	8020994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020a48:	444b      	add	r3, r9
 8020a4a:	0859      	lsrs	r1, r3, #1
 8020a4c:	07db      	lsls	r3, r3, #31
 8020a4e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020a52:	bf54      	ite	pl
 8020a54:	f001 010f 	andpl.w	r1, r1, #15
 8020a58:	1109      	asrmi	r1, r1, #4
 8020a5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020a5e:	b2c9      	uxtb	r1, r1
 8020a60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a62:	e797      	b.n	8020994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020a64:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020a68:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020a6c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020a70:	e7df      	b.n	8020a32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020a72:	b013      	add	sp, #76	@ 0x4c
 8020a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a78:	2402527c 	.word	0x2402527c

08020a7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8020a7c:	b530      	push	{r4, r5, lr}
 8020a7e:	b29d      	uxth	r5, r3
 8020a80:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8020a84:	780c      	ldrb	r4, [r1, #0]
 8020a86:	b298      	uxth	r0, r3
 8020a88:	7813      	ldrb	r3, [r2, #0]
 8020a8a:	fb14 f405 	smulbb	r4, r4, r5
 8020a8e:	fb13 f300 	smulbb	r3, r3, r0
 8020a92:	441c      	add	r4, r3
 8020a94:	b2a4      	uxth	r4, r4
 8020a96:	1c63      	adds	r3, r4, #1
 8020a98:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020a9c:	7853      	ldrb	r3, [r2, #1]
 8020a9e:	fb13 f300 	smulbb	r3, r3, r0
 8020aa2:	1224      	asrs	r4, r4, #8
 8020aa4:	7014      	strb	r4, [r2, #0]
 8020aa6:	784c      	ldrb	r4, [r1, #1]
 8020aa8:	fb14 f405 	smulbb	r4, r4, r5
 8020aac:	441c      	add	r4, r3
 8020aae:	b2a4      	uxth	r4, r4
 8020ab0:	1c63      	adds	r3, r4, #1
 8020ab2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020ab6:	1224      	asrs	r4, r4, #8
 8020ab8:	7054      	strb	r4, [r2, #1]
 8020aba:	788b      	ldrb	r3, [r1, #2]
 8020abc:	7891      	ldrb	r1, [r2, #2]
 8020abe:	fb13 f305 	smulbb	r3, r3, r5
 8020ac2:	fb11 f000 	smulbb	r0, r1, r0
 8020ac6:	4403      	add	r3, r0
 8020ac8:	b29b      	uxth	r3, r3
 8020aca:	1c59      	adds	r1, r3, #1
 8020acc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020ad0:	121b      	asrs	r3, r3, #8
 8020ad2:	7093      	strb	r3, [r2, #2]
 8020ad4:	bd30      	pop	{r4, r5, pc}
	...

08020ad8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020adc:	461c      	mov	r4, r3
 8020ade:	b08b      	sub	sp, #44	@ 0x2c
 8020ae0:	460e      	mov	r6, r1
 8020ae2:	4615      	mov	r5, r2
 8020ae4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ae6:	4682      	mov	sl, r0
 8020ae8:	6861      	ldr	r1, [r4, #4]
 8020aea:	aa06      	add	r2, sp, #24
 8020aec:	6820      	ldr	r0, [r4, #0]
 8020aee:	2702      	movs	r7, #2
 8020af0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8020af4:	3504      	adds	r5, #4
 8020af6:	c203      	stmia	r2!, {r0, r1}
 8020af8:	6818      	ldr	r0, [r3, #0]
 8020afa:	aa08      	add	r2, sp, #32
 8020afc:	6859      	ldr	r1, [r3, #4]
 8020afe:	c203      	stmia	r2!, {r0, r1}
 8020b00:	a806      	add	r0, sp, #24
 8020b02:	f7f2 fa8b 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b06:	4621      	mov	r1, r4
 8020b08:	a808      	add	r0, sp, #32
 8020b0a:	f7f2 facb 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b0e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020b12:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8020b16:	f002 0301 	and.w	r3, r2, #1
 8020b1a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8020b1e:	9302      	str	r3, [sp, #8]
 8020b20:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020b24:	f003 0101 	and.w	r1, r3, #1
 8020b28:	9101      	str	r1, [sp, #4]
 8020b2a:	9801      	ldr	r0, [sp, #4]
 8020b2c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8020b30:	4403      	add	r3, r0
 8020b32:	fb01 2303 	mla	r3, r1, r3, r2
 8020b36:	fb93 f3f7 	sdiv	r3, r3, r7
 8020b3a:	441e      	add	r6, r3
 8020b3c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8020b40:	441a      	add	r2, r3
 8020b42:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8020b46:	4419      	add	r1, r3
 8020b48:	4b70      	ldr	r3, [pc, #448]	@ (8020d0c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020b4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020b4e:	6818      	ldr	r0, [r3, #0]
 8020b50:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8020b54:	6803      	ldr	r3, [r0, #0]
 8020b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b58:	4798      	blx	r3
 8020b5a:	4a6d      	ldr	r2, [pc, #436]	@ (8020d10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8020b5c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020b60:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020b64:	8813      	ldrh	r3, [r2, #0]
 8020b66:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8020b6a:	fb03 1404 	mla	r4, r3, r4, r1
 8020b6e:	4611      	mov	r1, r2
 8020b70:	fb0b f303 	mul.w	r3, fp, r3
 8020b74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b7c:	4404      	add	r4, r0
 8020b7e:	4423      	add	r3, r4
 8020b80:	d073      	beq.n	8020c6a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8020b82:	9705      	str	r7, [sp, #20]
 8020b84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020b88:	9b03      	ldr	r3, [sp, #12]
 8020b8a:	429c      	cmp	r4, r3
 8020b8c:	f080 80b5 	bcs.w	8020cfa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8020b90:	9b02      	ldr	r3, [sp, #8]
 8020b92:	b35b      	cbz	r3, 8020bec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8020b94:	7831      	ldrb	r1, [r6, #0]
 8020b96:	4622      	mov	r2, r4
 8020b98:	1c77      	adds	r7, r6, #1
 8020b9a:	3403      	adds	r4, #3
 8020b9c:	f001 010f 	and.w	r1, r1, #15
 8020ba0:	f108 3bff 	add.w	fp, r8, #4294967295
 8020ba4:	464b      	mov	r3, r9
 8020ba6:	4650      	mov	r0, sl
 8020ba8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020bac:	4429      	add	r1, r5
 8020bae:	f7ff ff65 	bl	8020a7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020bb2:	f1bb 0f01 	cmp.w	fp, #1
 8020bb6:	dd1c      	ble.n	8020bf2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020bb8:	7839      	ldrb	r1, [r7, #0]
 8020bba:	4622      	mov	r2, r4
 8020bbc:	464b      	mov	r3, r9
 8020bbe:	4650      	mov	r0, sl
 8020bc0:	0909      	lsrs	r1, r1, #4
 8020bc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8020bc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020bca:	4429      	add	r1, r5
 8020bcc:	f7ff ff56 	bl	8020a7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020bd0:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020bd4:	1ce2      	adds	r2, r4, #3
 8020bd6:	464b      	mov	r3, r9
 8020bd8:	f001 010f 	and.w	r1, r1, #15
 8020bdc:	4650      	mov	r0, sl
 8020bde:	3406      	adds	r4, #6
 8020be0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020be4:	4429      	add	r1, r5
 8020be6:	f7ff ff49 	bl	8020a7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020bea:	e7e2      	b.n	8020bb2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020bec:	4637      	mov	r7, r6
 8020bee:	46c3      	mov	fp, r8
 8020bf0:	e7df      	b.n	8020bb2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020bf2:	d10a      	bne.n	8020c0a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8020bf4:	7839      	ldrb	r1, [r7, #0]
 8020bf6:	4622      	mov	r2, r4
 8020bf8:	3403      	adds	r4, #3
 8020bfa:	464b      	mov	r3, r9
 8020bfc:	0909      	lsrs	r1, r1, #4
 8020bfe:	4650      	mov	r0, sl
 8020c00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020c04:	4429      	add	r1, r5
 8020c06:	f7ff ff39 	bl	8020a7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020c0a:	9b04      	ldr	r3, [sp, #16]
 8020c0c:	9a01      	ldr	r2, [sp, #4]
 8020c0e:	881b      	ldrh	r3, [r3, #0]
 8020c10:	eba3 0308 	sub.w	r3, r3, r8
 8020c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c18:	441c      	add	r4, r3
 8020c1a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020c1e:	4413      	add	r3, r2
 8020c20:	9a05      	ldr	r2, [sp, #20]
 8020c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8020c26:	441e      	add	r6, r3
 8020c28:	e7ae      	b.n	8020b88 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8020c2a:	4632      	mov	r2, r6
 8020c2c:	46c4      	mov	ip, r8
 8020c2e:	e037      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020c30:	d10e      	bne.n	8020c50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8020c32:	7812      	ldrb	r2, [r2, #0]
 8020c34:	3003      	adds	r0, #3
 8020c36:	0912      	lsrs	r2, r2, #4
 8020c38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c3c:	18ac      	adds	r4, r5, r2
 8020c3e:	5caa      	ldrb	r2, [r5, r2]
 8020c40:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020c44:	7862      	ldrb	r2, [r4, #1]
 8020c46:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020c4a:	78a2      	ldrb	r2, [r4, #2]
 8020c4c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8020c50:	880c      	ldrh	r4, [r1, #0]
 8020c52:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020c56:	eba4 0408 	sub.w	r4, r4, r8
 8020c5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c5e:	4404      	add	r4, r0
 8020c60:	9801      	ldr	r0, [sp, #4]
 8020c62:	4402      	add	r2, r0
 8020c64:	fb92 f2f7 	sdiv	r2, r2, r7
 8020c68:	4416      	add	r6, r2
 8020c6a:	429c      	cmp	r4, r3
 8020c6c:	d245      	bcs.n	8020cfa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8020c6e:	9a02      	ldr	r2, [sp, #8]
 8020c70:	2a00      	cmp	r2, #0
 8020c72:	d0da      	beq.n	8020c2a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8020c74:	7830      	ldrb	r0, [r6, #0]
 8020c76:	1c72      	adds	r2, r6, #1
 8020c78:	3403      	adds	r4, #3
 8020c7a:	f000 000f 	and.w	r0, r0, #15
 8020c7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020c82:	eb05 0c00 	add.w	ip, r5, r0
 8020c86:	5c28      	ldrb	r0, [r5, r0]
 8020c88:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020c8c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020c90:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020c94:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8020c98:	f108 3cff 	add.w	ip, r8, #4294967295
 8020c9c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020ca0:	f1bc 0f01 	cmp.w	ip, #1
 8020ca4:	4620      	mov	r0, r4
 8020ca6:	f104 0406 	add.w	r4, r4, #6
 8020caa:	ddc1      	ble.n	8020c30 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8020cac:	7810      	ldrb	r0, [r2, #0]
 8020cae:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cb2:	0900      	lsrs	r0, r0, #4
 8020cb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020cb8:	eb05 0e00 	add.w	lr, r5, r0
 8020cbc:	5c28      	ldrb	r0, [r5, r0]
 8020cbe:	f804 0c06 	strb.w	r0, [r4, #-6]
 8020cc2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020cc6:	f804 0c05 	strb.w	r0, [r4, #-5]
 8020cca:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020cce:	f804 0c04 	strb.w	r0, [r4, #-4]
 8020cd2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8020cd6:	f000 000f 	and.w	r0, r0, #15
 8020cda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020cde:	eb05 0e00 	add.w	lr, r5, r0
 8020ce2:	5c28      	ldrb	r0, [r5, r0]
 8020ce4:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020ce8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020cec:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020cf0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020cf4:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020cf8:	e7d2      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020cfa:	4b04      	ldr	r3, [pc, #16]	@ (8020d0c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020cfc:	6818      	ldr	r0, [r3, #0]
 8020cfe:	6803      	ldr	r3, [r0, #0]
 8020d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020d02:	4798      	blx	r3
 8020d04:	b00b      	add	sp, #44	@ 0x2c
 8020d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d0a:	bf00      	nop
 8020d0c:	2402526c 	.word	0x2402526c
 8020d10:	24025266 	.word	0x24025266

08020d14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8020d14:	b530      	push	{r4, r5, lr}
 8020d16:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020d1a:	780d      	ldrb	r5, [r1, #0]
 8020d1c:	28ff      	cmp	r0, #255	@ 0xff
 8020d1e:	d107      	bne.n	8020d30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020d20:	2bff      	cmp	r3, #255	@ 0xff
 8020d22:	d105      	bne.n	8020d30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020d24:	7015      	strb	r5, [r2, #0]
 8020d26:	784b      	ldrb	r3, [r1, #1]
 8020d28:	7053      	strb	r3, [r2, #1]
 8020d2a:	788b      	ldrb	r3, [r1, #2]
 8020d2c:	7093      	strb	r3, [r2, #2]
 8020d2e:	bd30      	pop	{r4, r5, pc}
 8020d30:	fb10 f003 	smulbb	r0, r0, r3
 8020d34:	b283      	uxth	r3, r0
 8020d36:	1c58      	adds	r0, r3, #1
 8020d38:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020d3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d40:	b284      	uxth	r4, r0
 8020d42:	43c0      	mvns	r0, r0
 8020d44:	fb15 f504 	smulbb	r5, r5, r4
 8020d48:	b2c3      	uxtb	r3, r0
 8020d4a:	7810      	ldrb	r0, [r2, #0]
 8020d4c:	fb00 5003 	mla	r0, r0, r3, r5
 8020d50:	b280      	uxth	r0, r0
 8020d52:	1c45      	adds	r5, r0, #1
 8020d54:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020d58:	7855      	ldrb	r5, [r2, #1]
 8020d5a:	fb15 f503 	smulbb	r5, r5, r3
 8020d5e:	1200      	asrs	r0, r0, #8
 8020d60:	7010      	strb	r0, [r2, #0]
 8020d62:	7848      	ldrb	r0, [r1, #1]
 8020d64:	fb00 5004 	mla	r0, r0, r4, r5
 8020d68:	b280      	uxth	r0, r0
 8020d6a:	1c45      	adds	r5, r0, #1
 8020d6c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020d70:	1200      	asrs	r0, r0, #8
 8020d72:	7050      	strb	r0, [r2, #1]
 8020d74:	7888      	ldrb	r0, [r1, #2]
 8020d76:	7891      	ldrb	r1, [r2, #2]
 8020d78:	fb11 f303 	smulbb	r3, r1, r3
 8020d7c:	fb00 3304 	mla	r3, r0, r4, r3
 8020d80:	b29b      	uxth	r3, r3
 8020d82:	1c59      	adds	r1, r3, #1
 8020d84:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020d88:	121b      	asrs	r3, r3, #8
 8020d8a:	e7cf      	b.n	8020d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08020d8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d90:	461d      	mov	r5, r3
 8020d92:	b08f      	sub	sp, #60	@ 0x3c
 8020d94:	460c      	mov	r4, r1
 8020d96:	4616      	mov	r6, r2
 8020d98:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020d9a:	4680      	mov	r8, r0
 8020d9c:	6869      	ldr	r1, [r5, #4]
 8020d9e:	aa0a      	add	r2, sp, #40	@ 0x28
 8020da0:	6828      	ldr	r0, [r5, #0]
 8020da2:	3604      	adds	r6, #4
 8020da4:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8020da8:	4f57      	ldr	r7, [pc, #348]	@ (8020f08 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8020daa:	c203      	stmia	r2!, {r0, r1}
 8020dac:	6818      	ldr	r0, [r3, #0]
 8020dae:	aa0c      	add	r2, sp, #48	@ 0x30
 8020db0:	6859      	ldr	r1, [r3, #4]
 8020db2:	c203      	stmia	r2!, {r0, r1}
 8020db4:	a80a      	add	r0, sp, #40	@ 0x28
 8020db6:	f7f2 f931 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020dba:	4629      	mov	r1, r5
 8020dbc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dbe:	2502      	movs	r5, #2
 8020dc0:	f7f2 f970 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020dc4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020dc8:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8020dcc:	f002 0301 	and.w	r3, r2, #1
 8020dd0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8020dd4:	9304      	str	r3, [sp, #16]
 8020dd6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020dda:	f003 0101 	and.w	r1, r3, #1
 8020dde:	9103      	str	r1, [sp, #12]
 8020de0:	9803      	ldr	r0, [sp, #12]
 8020de2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020de6:	4403      	add	r3, r0
 8020de8:	6838      	ldr	r0, [r7, #0]
 8020dea:	fb01 2303 	mla	r3, r1, r3, r2
 8020dee:	fb93 f3f5 	sdiv	r3, r3, r5
 8020df2:	18e5      	adds	r5, r4, r3
 8020df4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020df8:	441a      	add	r2, r3
 8020dfa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020dfe:	4419      	add	r1, r3
 8020e00:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020e04:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8020e08:	6803      	ldr	r3, [r0, #0]
 8020e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e0c:	4798      	blx	r3
 8020e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8020f0c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8020e10:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8020e14:	8813      	ldrh	r3, [r2, #0]
 8020e16:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020e1a:	9207      	str	r2, [sp, #28]
 8020e1c:	fb03 1404 	mla	r4, r3, r4, r1
 8020e20:	fb0a f303 	mul.w	r3, sl, r3
 8020e24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020e28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e2c:	4404      	add	r4, r0
 8020e2e:	18e3      	adds	r3, r4, r3
 8020e30:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8020e34:	9b05      	ldr	r3, [sp, #20]
 8020e36:	429c      	cmp	r4, r3
 8020e38:	d25d      	bcs.n	8020ef6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8020e3a:	9b04      	ldr	r3, [sp, #16]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	d037      	beq.n	8020eb0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020e40:	782b      	ldrb	r3, [r5, #0]
 8020e42:	1c6f      	adds	r7, r5, #1
 8020e44:	f003 030f 	and.w	r3, r3, #15
 8020e48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e4e:	0e1b      	lsrs	r3, r3, #24
 8020e50:	d006      	beq.n	8020e60 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8020e52:	9300      	str	r3, [sp, #0]
 8020e54:	4622      	mov	r2, r4
 8020e56:	464b      	mov	r3, r9
 8020e58:	a909      	add	r1, sp, #36	@ 0x24
 8020e5a:	4640      	mov	r0, r8
 8020e5c:	f7ff ff5a 	bl	8020d14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020e60:	3403      	adds	r4, #3
 8020e62:	f10b 3aff 	add.w	sl, fp, #4294967295
 8020e66:	f1ba 0f01 	cmp.w	sl, #1
 8020e6a:	dd24      	ble.n	8020eb6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020e6c:	783b      	ldrb	r3, [r7, #0]
 8020e6e:	091b      	lsrs	r3, r3, #4
 8020e70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e74:	9308      	str	r3, [sp, #32]
 8020e76:	0e1b      	lsrs	r3, r3, #24
 8020e78:	d006      	beq.n	8020e88 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8020e7a:	9300      	str	r3, [sp, #0]
 8020e7c:	4622      	mov	r2, r4
 8020e7e:	464b      	mov	r3, r9
 8020e80:	a908      	add	r1, sp, #32
 8020e82:	4640      	mov	r0, r8
 8020e84:	f7ff ff46 	bl	8020d14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020e88:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020e8c:	f003 030f 	and.w	r3, r3, #15
 8020e90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e96:	0e1b      	lsrs	r3, r3, #24
 8020e98:	d006      	beq.n	8020ea8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020e9a:	9300      	str	r3, [sp, #0]
 8020e9c:	1ce2      	adds	r2, r4, #3
 8020e9e:	464b      	mov	r3, r9
 8020ea0:	a909      	add	r1, sp, #36	@ 0x24
 8020ea2:	4640      	mov	r0, r8
 8020ea4:	f7ff ff36 	bl	8020d14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020ea8:	3406      	adds	r4, #6
 8020eaa:	f1aa 0a02 	sub.w	sl, sl, #2
 8020eae:	e7da      	b.n	8020e66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020eb0:	462f      	mov	r7, r5
 8020eb2:	46da      	mov	sl, fp
 8020eb4:	e7d7      	b.n	8020e66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020eb6:	d10e      	bne.n	8020ed6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020eb8:	783b      	ldrb	r3, [r7, #0]
 8020eba:	091b      	lsrs	r3, r3, #4
 8020ebc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ec2:	0e1b      	lsrs	r3, r3, #24
 8020ec4:	d006      	beq.n	8020ed4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8020ec6:	9300      	str	r3, [sp, #0]
 8020ec8:	4622      	mov	r2, r4
 8020eca:	464b      	mov	r3, r9
 8020ecc:	a909      	add	r1, sp, #36	@ 0x24
 8020ece:	4640      	mov	r0, r8
 8020ed0:	f7ff ff20 	bl	8020d14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020ed4:	3403      	adds	r4, #3
 8020ed6:	9b07      	ldr	r3, [sp, #28]
 8020ed8:	9a03      	ldr	r2, [sp, #12]
 8020eda:	881b      	ldrh	r3, [r3, #0]
 8020edc:	eba3 030b 	sub.w	r3, r3, fp
 8020ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ee4:	441c      	add	r4, r3
 8020ee6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020eea:	4413      	add	r3, r2
 8020eec:	2202      	movs	r2, #2
 8020eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8020ef2:	441d      	add	r5, r3
 8020ef4:	e79e      	b.n	8020e34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8020ef6:	9b06      	ldr	r3, [sp, #24]
 8020ef8:	6818      	ldr	r0, [r3, #0]
 8020efa:	6803      	ldr	r3, [r0, #0]
 8020efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020efe:	4798      	blx	r3
 8020f00:	b00f      	add	sp, #60	@ 0x3c
 8020f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f06:	bf00      	nop
 8020f08:	2402526c 	.word	0x2402526c
 8020f0c:	24025266 	.word	0x24025266

08020f10 <CRC_Lock>:
 8020f10:	4a2d      	ldr	r2, [pc, #180]	@ (8020fc8 <CRC_Lock+0xb8>)
 8020f12:	b530      	push	{r4, r5, lr}
 8020f14:	6813      	ldr	r3, [r2, #0]
 8020f16:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8020f1a:	f023 0301 	bic.w	r3, r3, #1
 8020f1e:	6013      	str	r3, [r2, #0]
 8020f20:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8020f24:	4b29      	ldr	r3, [pc, #164]	@ (8020fcc <CRC_Lock+0xbc>)
 8020f26:	681c      	ldr	r4, [r3, #0]
 8020f28:	4014      	ands	r4, r2
 8020f2a:	42ac      	cmp	r4, r5
 8020f2c:	d005      	beq.n	8020f3a <CRC_Lock+0x2a>
 8020f2e:	681c      	ldr	r4, [r3, #0]
 8020f30:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8020f34:	4014      	ands	r4, r2
 8020f36:	42ac      	cmp	r4, r5
 8020f38:	d125      	bne.n	8020f86 <CRC_Lock+0x76>
 8020f3a:	4b25      	ldr	r3, [pc, #148]	@ (8020fd0 <CRC_Lock+0xc0>)
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d139      	bne.n	8020fb6 <CRC_Lock+0xa6>
 8020f42:	4b24      	ldr	r3, [pc, #144]	@ (8020fd4 <CRC_Lock+0xc4>)
 8020f44:	681a      	ldr	r2, [r3, #0]
 8020f46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020f4a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8020f4e:	d00d      	beq.n	8020f6c <CRC_Lock+0x5c>
 8020f50:	681a      	ldr	r2, [r3, #0]
 8020f52:	f240 4483 	movw	r4, #1155	@ 0x483
 8020f56:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020f5a:	42a2      	cmp	r2, r4
 8020f5c:	d006      	beq.n	8020f6c <CRC_Lock+0x5c>
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	f240 4285 	movw	r2, #1157	@ 0x485
 8020f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020f68:	4293      	cmp	r3, r2
 8020f6a:	d124      	bne.n	8020fb6 <CRC_Lock+0xa6>
 8020f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8020fd8 <CRC_Lock+0xc8>)
 8020f6e:	2201      	movs	r2, #1
 8020f70:	601a      	str	r2, [r3, #0]
 8020f72:	681a      	ldr	r2, [r3, #0]
 8020f74:	2a00      	cmp	r2, #0
 8020f76:	d1fc      	bne.n	8020f72 <CRC_Lock+0x62>
 8020f78:	4b18      	ldr	r3, [pc, #96]	@ (8020fdc <CRC_Lock+0xcc>)
 8020f7a:	6018      	str	r0, [r3, #0]
 8020f7c:	6818      	ldr	r0, [r3, #0]
 8020f7e:	1a43      	subs	r3, r0, r1
 8020f80:	4258      	negs	r0, r3
 8020f82:	4158      	adcs	r0, r3
 8020f84:	e00e      	b.n	8020fa4 <CRC_Lock+0x94>
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	4013      	ands	r3, r2
 8020f8a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8020f8e:	4293      	cmp	r3, r2
 8020f90:	d111      	bne.n	8020fb6 <CRC_Lock+0xa6>
 8020f92:	4b13      	ldr	r3, [pc, #76]	@ (8020fe0 <CRC_Lock+0xd0>)
 8020f94:	f240 4286 	movw	r2, #1158	@ 0x486
 8020f98:	681b      	ldr	r3, [r3, #0]
 8020f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020f9e:	4293      	cmp	r3, r2
 8020fa0:	d001      	beq.n	8020fa6 <CRC_Lock+0x96>
 8020fa2:	2000      	movs	r0, #0
 8020fa4:	bd30      	pop	{r4, r5, pc}
 8020fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8020fe4 <CRC_Lock+0xd4>)
 8020fa8:	2201      	movs	r2, #1
 8020faa:	601a      	str	r2, [r3, #0]
 8020fac:	681a      	ldr	r2, [r3, #0]
 8020fae:	2a00      	cmp	r2, #0
 8020fb0:	d1fc      	bne.n	8020fac <CRC_Lock+0x9c>
 8020fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8020fe8 <CRC_Lock+0xd8>)
 8020fb4:	e7e1      	b.n	8020f7a <CRC_Lock+0x6a>
 8020fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8020fec <CRC_Lock+0xdc>)
 8020fb8:	2201      	movs	r2, #1
 8020fba:	601a      	str	r2, [r3, #0]
 8020fbc:	681a      	ldr	r2, [r3, #0]
 8020fbe:	2a00      	cmp	r2, #0
 8020fc0:	d1fc      	bne.n	8020fbc <CRC_Lock+0xac>
 8020fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8020ff0 <CRC_Lock+0xe0>)
 8020fc4:	e7d9      	b.n	8020f7a <CRC_Lock+0x6a>
 8020fc6:	bf00      	nop
 8020fc8:	e0002000 	.word	0xe0002000
 8020fcc:	e000ed00 	.word	0xe000ed00
 8020fd0:	e0042000 	.word	0xe0042000
 8020fd4:	5c001000 	.word	0x5c001000
 8020fd8:	58024c08 	.word	0x58024c08
 8020fdc:	58024c00 	.word	0x58024c00
 8020fe0:	46008ff0 	.word	0x46008ff0
 8020fe4:	46024c08 	.word	0x46024c08
 8020fe8:	46024c00 	.word	0x46024c00
 8020fec:	40023008 	.word	0x40023008
 8020ff0:	40023000 	.word	0x40023000

08020ff4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020ff4:	6101      	str	r1, [r0, #16]
 8020ff6:	4770      	bx	lr

08020ff8 <_ZN8touchgfx8Gestures4tickEv>:
 8020ff8:	7b83      	ldrb	r3, [r0, #14]
 8020ffa:	b14b      	cbz	r3, 8021010 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020ffc:	8903      	ldrh	r3, [r0, #8]
 8020ffe:	3301      	adds	r3, #1
 8021000:	b29b      	uxth	r3, r3
 8021002:	2b07      	cmp	r3, #7
 8021004:	8103      	strh	r3, [r0, #8]
 8021006:	bf81      	itttt	hi
 8021008:	2300      	movhi	r3, #0
 802100a:	8143      	strhhi	r3, [r0, #10]
 802100c:	8183      	strhhi	r3, [r0, #12]
 802100e:	7383      	strbhi	r3, [r0, #14]
 8021010:	4770      	bx	lr
	...

08021014 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021014:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021018:	4698      	mov	r8, r3
 802101a:	8883      	ldrh	r3, [r0, #4]
 802101c:	4604      	mov	r4, r0
 802101e:	4617      	mov	r7, r2
 8021020:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021024:	eba8 0303 	sub.w	r3, r8, r3
 8021028:	4a19      	ldr	r2, [pc, #100]	@ (8021090 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802102a:	460e      	mov	r6, r1
 802102c:	b21b      	sxth	r3, r3
 802102e:	88c1      	ldrh	r1, [r0, #6]
 8021030:	9200      	str	r2, [sp, #0]
 8021032:	2000      	movs	r0, #0
 8021034:	2b00      	cmp	r3, #0
 8021036:	8aa2      	ldrh	r2, [r4, #20]
 8021038:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802103c:	bfb8      	it	lt
 802103e:	425b      	neglt	r3, r3
 8021040:	f88d 0004 	strb.w	r0, [sp, #4]
 8021044:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021048:	b21b      	sxth	r3, r3
 802104a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802104e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021052:	4293      	cmp	r3, r2
 8021054:	dc07      	bgt.n	8021066 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021056:	1a69      	subs	r1, r5, r1
 8021058:	b209      	sxth	r1, r1
 802105a:	2900      	cmp	r1, #0
 802105c:	bfb8      	it	lt
 802105e:	4249      	neglt	r1, r1
 8021060:	b209      	sxth	r1, r1
 8021062:	428a      	cmp	r2, r1
 8021064:	da10      	bge.n	8021088 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021066:	6920      	ldr	r0, [r4, #16]
 8021068:	4669      	mov	r1, sp
 802106a:	eba8 0606 	sub.w	r6, r8, r6
 802106e:	1bef      	subs	r7, r5, r7
 8021070:	6803      	ldr	r3, [r0, #0]
 8021072:	685b      	ldr	r3, [r3, #4]
 8021074:	4798      	blx	r3
 8021076:	2300      	movs	r3, #0
 8021078:	2001      	movs	r0, #1
 802107a:	8166      	strh	r6, [r4, #10]
 802107c:	8123      	strh	r3, [r4, #8]
 802107e:	81a7      	strh	r7, [r4, #12]
 8021080:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021084:	80e5      	strh	r5, [r4, #6]
 8021086:	73a0      	strb	r0, [r4, #14]
 8021088:	b004      	add	sp, #16
 802108a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802108e:	bf00      	nop
 8021090:	080266b4 	.word	0x080266b4

08021094 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021096:	461e      	mov	r6, r3
 8021098:	1e4b      	subs	r3, r1, #1
 802109a:	b085      	sub	sp, #20
 802109c:	4604      	mov	r4, r0
 802109e:	2b01      	cmp	r3, #1
 80210a0:	460d      	mov	r5, r1
 80210a2:	4617      	mov	r7, r2
 80210a4:	d84b      	bhi.n	802113e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80210a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80210aa:	1cd3      	adds	r3, r2, #3
 80210ac:	b29b      	uxth	r3, r3
 80210ae:	2b06      	cmp	r3, #6
 80210b0:	d916      	bls.n	80210e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80210b2:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021154 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80210b6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80210ba:	f8cd c004 	str.w	ip, [sp, #4]
 80210be:	f04f 0c00 	mov.w	ip, #0
 80210c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80210c6:	6900      	ldr	r0, [r0, #16]
 80210c8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80210cc:	a901      	add	r1, sp, #4
 80210ce:	f88d c008 	strb.w	ip, [sp, #8]
 80210d2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80210d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80210da:	6803      	ldr	r3, [r0, #0]
 80210dc:	689b      	ldr	r3, [r3, #8]
 80210de:	4798      	blx	r3
 80210e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210e4:	1cd3      	adds	r3, r2, #3
 80210e6:	b29b      	uxth	r3, r3
 80210e8:	2b06      	cmp	r3, #6
 80210ea:	d916      	bls.n	802111a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80210ec:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021154 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80210f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80210f4:	f8cd c004 	str.w	ip, [sp, #4]
 80210f8:	f04f 0c01 	mov.w	ip, #1
 80210fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021100:	6920      	ldr	r0, [r4, #16]
 8021102:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021106:	a901      	add	r1, sp, #4
 8021108:	f88d c008 	strb.w	ip, [sp, #8]
 802110c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021110:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021114:	6803      	ldr	r3, [r0, #0]
 8021116:	689b      	ldr	r3, [r3, #8]
 8021118:	4798      	blx	r3
 802111a:	4b0d      	ldr	r3, [pc, #52]	@ (8021150 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802111c:	a901      	add	r1, sp, #4
 802111e:	6920      	ldr	r0, [r4, #16]
 8021120:	9301      	str	r3, [sp, #4]
 8021122:	2300      	movs	r3, #0
 8021124:	f88d 5008 	strb.w	r5, [sp, #8]
 8021128:	f8ad 700a 	strh.w	r7, [sp, #10]
 802112c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021130:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021134:	6803      	ldr	r3, [r0, #0]
 8021136:	681b      	ldr	r3, [r3, #0]
 8021138:	4798      	blx	r3
 802113a:	b005      	add	sp, #20
 802113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802113e:	2900      	cmp	r1, #0
 8021140:	d1eb      	bne.n	802111a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021142:	80a2      	strh	r2, [r4, #4]
 8021144:	80c6      	strh	r6, [r0, #6]
 8021146:	60a1      	str	r1, [r4, #8]
 8021148:	81a1      	strh	r1, [r4, #12]
 802114a:	73a1      	strb	r1, [r4, #14]
 802114c:	e7e5      	b.n	802111a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802114e:	bf00      	nop
 8021150:	080266a0 	.word	0x080266a0
 8021154:	080266c8 	.word	0x080266c8

08021158 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8021158:	10c9      	asrs	r1, r1, #3
 802115a:	2900      	cmp	r1, #0
 802115c:	bfb8      	it	lt
 802115e:	4249      	neglt	r1, r1
 8021160:	2801      	cmp	r0, #1
 8021162:	d108      	bne.n	8021176 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021164:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021168:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802116c:	4601      	mov	r1, r0
 802116e:	dd02      	ble.n	8021176 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021170:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8021174:	4770      	bx	lr
 8021176:	29ff      	cmp	r1, #255	@ 0xff
 8021178:	bfa8      	it	ge
 802117a:	21ff      	movge	r1, #255	@ 0xff
 802117c:	4608      	mov	r0, r1
 802117e:	4770      	bx	lr

08021180 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021180:	b410      	push	{r4}
 8021182:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021186:	429c      	cmp	r4, r3
 8021188:	d803      	bhi.n	8021192 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802118a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802118e:	f7f0 ba4f 	b.w	8011630 <_ZN8touchgfx7Outline6lineToEii>
 8021192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021196:	4770      	bx	lr

08021198 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802119c:	b08b      	sub	sp, #44	@ 0x2c
 802119e:	4606      	mov	r6, r0
 80211a0:	468a      	mov	sl, r1
 80211a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80211a6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80211aa:	9308      	str	r3, [sp, #32]
 80211ac:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80211b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80211b2:	f7f0 fba8 	bl	8011906 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80211b6:	68b5      	ldr	r5, [r6, #8]
 80211b8:	4604      	mov	r4, r0
 80211ba:	2d00      	cmp	r5, #0
 80211bc:	d044      	beq.n	8021248 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80211be:	6873      	ldr	r3, [r6, #4]
 80211c0:	42ab      	cmp	r3, r5
 80211c2:	d33d      	bcc.n	8021240 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80211c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80211c8:	f04f 0800 	mov.w	r8, #0
 80211cc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80211d0:	eb02 0b03 	add.w	fp, r2, r3
 80211d4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80211d8:	fb02 1203 	mla	r2, r2, r3, r1
 80211dc:	9205      	str	r2, [sp, #20]
 80211de:	1e6a      	subs	r2, r5, #1
 80211e0:	9204      	str	r2, [sp, #16]
 80211e2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80211e6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80211ea:	454b      	cmp	r3, r9
 80211ec:	463a      	mov	r2, r7
 80211ee:	d008      	beq.n	8021202 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80211f0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80211f4:	eb03 0b09 	add.w	fp, r3, r9
 80211f8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80211fc:	fb03 1309 	mla	r3, r3, r9, r1
 8021200:	9305      	str	r3, [sp, #20]
 8021202:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021206:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802120a:	4498      	add	r8, r3
 802120c:	9b04      	ldr	r3, [sp, #16]
 802120e:	3b01      	subs	r3, #1
 8021210:	9304      	str	r3, [sp, #16]
 8021212:	9b04      	ldr	r3, [sp, #16]
 8021214:	3301      	adds	r3, #1
 8021216:	d015      	beq.n	8021244 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021218:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802121c:	42bb      	cmp	r3, r7
 802121e:	d117      	bne.n	8021250 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021220:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021224:	9b04      	ldr	r3, [sp, #16]
 8021226:	4548      	cmp	r0, r9
 8021228:	f103 33ff 	add.w	r3, r3, #4294967295
 802122c:	d17d      	bne.n	802132a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802122e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021232:	4401      	add	r1, r0
 8021234:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021238:	4480      	add	r8, r0
 802123a:	e7e9      	b.n	8021210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802123c:	461f      	mov	r7, r3
 802123e:	e042      	b.n	80212c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021240:	2000      	movs	r0, #0
 8021242:	e002      	b.n	802124a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021244:	2900      	cmp	r1, #0
 8021246:	d16d      	bne.n	8021324 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8021248:	2001      	movs	r0, #1
 802124a:	b00b      	add	sp, #44	@ 0x2c
 802124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021250:	b379      	cbz	r1, 80212b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021252:	2f00      	cmp	r7, #0
 8021254:	db29      	blt.n	80212aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021256:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802125a:	42bb      	cmp	r3, r7
 802125c:	dd25      	ble.n	80212aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802125e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021262:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021266:	f7ff ff77 	bl	8021158 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802126a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802126c:	fb10 f003 	smulbb	r0, r0, r3
 8021270:	b280      	uxth	r0, r0
 8021272:	1c41      	adds	r1, r0, #1
 8021274:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021278:	1209      	asrs	r1, r1, #8
 802127a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802127e:	d014      	beq.n	80212aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021280:	b2c9      	uxtb	r1, r1
 8021282:	9808      	ldr	r0, [sp, #32]
 8021284:	b2ba      	uxth	r2, r7
 8021286:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021288:	9102      	str	r1, [sp, #8]
 802128a:	2101      	movs	r1, #1
 802128c:	4413      	add	r3, r2
 802128e:	4402      	add	r2, r0
 8021290:	9101      	str	r1, [sp, #4]
 8021292:	fa0f f18b 	sxth.w	r1, fp
 8021296:	f8da 0000 	ldr.w	r0, [sl]
 802129a:	b21b      	sxth	r3, r3
 802129c:	9100      	str	r1, [sp, #0]
 802129e:	b212      	sxth	r2, r2
 80212a0:	6941      	ldr	r1, [r0, #20]
 80212a2:	4650      	mov	r0, sl
 80212a4:	460d      	mov	r5, r1
 80212a6:	9905      	ldr	r1, [sp, #20]
 80212a8:	47a8      	blx	r5
 80212aa:	9b04      	ldr	r3, [sp, #16]
 80212ac:	1c7a      	adds	r2, r7, #1
 80212ae:	3301      	adds	r3, #1
 80212b0:	d0ca      	beq.n	8021248 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80212b2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80212b6:	1abb      	subs	r3, r7, r2
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	dd31      	ble.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80212bc:	2a00      	cmp	r2, #0
 80212be:	dabd      	bge.n	802123c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80212c0:	2f00      	cmp	r7, #0
 80212c2:	dd2d      	ble.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80212c4:	2200      	movs	r2, #0
 80212c6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80212ca:	19d1      	adds	r1, r2, r7
 80212cc:	4299      	cmp	r1, r3
 80212ce:	db02      	blt.n	80212d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80212d0:	1a9f      	subs	r7, r3, r2
 80212d2:	2f00      	cmp	r7, #0
 80212d4:	dd24      	ble.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80212d6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80212da:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80212de:	f7ff ff3b 	bl	8021158 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80212e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80212e4:	fb10 f003 	smulbb	r0, r0, r3
 80212e8:	b280      	uxth	r0, r0
 80212ea:	1c41      	adds	r1, r0, #1
 80212ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80212f0:	1209      	asrs	r1, r1, #8
 80212f2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80212f6:	d013      	beq.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80212f8:	b292      	uxth	r2, r2
 80212fa:	9808      	ldr	r0, [sp, #32]
 80212fc:	b2c9      	uxtb	r1, r1
 80212fe:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021300:	b23f      	sxth	r7, r7
 8021302:	4413      	add	r3, r2
 8021304:	9102      	str	r1, [sp, #8]
 8021306:	4402      	add	r2, r0
 8021308:	fa0f f18b 	sxth.w	r1, fp
 802130c:	f8da 0000 	ldr.w	r0, [sl]
 8021310:	b21b      	sxth	r3, r3
 8021312:	9100      	str	r1, [sp, #0]
 8021314:	b212      	sxth	r2, r2
 8021316:	9701      	str	r7, [sp, #4]
 8021318:	9905      	ldr	r1, [sp, #20]
 802131a:	6947      	ldr	r7, [r0, #20]
 802131c:	4650      	mov	r0, sl
 802131e:	47b8      	blx	r7
 8021320:	464b      	mov	r3, r9
 8021322:	e75e      	b.n	80211e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021324:	2f00      	cmp	r7, #0
 8021326:	da96      	bge.n	8021256 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021328:	e78e      	b.n	8021248 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802132a:	2900      	cmp	r1, #0
 802132c:	d0f8      	beq.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802132e:	e790      	b.n	8021252 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021330 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021334:	461e      	mov	r6, r3
 8021336:	4b36      	ldr	r3, [pc, #216]	@ (8021410 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8021338:	2500      	movs	r5, #0
 802133a:	f100 0814 	add.w	r8, r0, #20
 802133e:	4604      	mov	r4, r0
 8021340:	4617      	mov	r7, r2
 8021342:	e9c0 3100 	strd	r3, r1, [r0]
 8021346:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802134a:	8185      	strh	r5, [r0, #12]
 802134c:	8103      	strh	r3, [r0, #8]
 802134e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021352:	81c5      	strh	r5, [r0, #14]
 8021354:	7283      	strb	r3, [r0, #10]
 8021356:	8205      	strh	r5, [r0, #16]
 8021358:	8245      	strh	r5, [r0, #18]
 802135a:	4640      	mov	r0, r8
 802135c:	f7ef fcae 	bl	8010cbc <_ZN8touchgfx7OutlineC1Ev>
 8021360:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021364:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8021368:	466b      	mov	r3, sp
 802136a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802136e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021372:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8021376:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802137a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802137e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021382:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8021386:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802138a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802138e:	6830      	ldr	r0, [r6, #0]
 8021390:	6871      	ldr	r1, [r6, #4]
 8021392:	8872      	ldrh	r2, [r6, #2]
 8021394:	8835      	ldrh	r5, [r6, #0]
 8021396:	c303      	stmia	r3!, {r0, r1}
 8021398:	887b      	ldrh	r3, [r7, #2]
 802139a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802139e:	4413      	add	r3, r2
 80213a0:	883a      	ldrh	r2, [r7, #0]
 80213a2:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80213a6:	442a      	add	r2, r5
 80213a8:	81e3      	strh	r3, [r4, #14]
 80213aa:	8220      	strh	r0, [r4, #16]
 80213ac:	4668      	mov	r0, sp
 80213ae:	81a2      	strh	r2, [r4, #12]
 80213b0:	8261      	strh	r1, [r4, #18]
 80213b2:	4639      	mov	r1, r7
 80213b4:	f7f1 fe76 	bl	80130a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80213b8:	f104 000c 	add.w	r0, r4, #12
 80213bc:	f7f1 fe2e 	bl	801301c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213c0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80213c4:	f8bd 2000 	ldrh.w	r2, [sp]
 80213c8:	4640      	mov	r0, r8
 80213ca:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80213ce:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80213d2:	f7ef fc57 	bl	8010c84 <_ZN8touchgfx7Outline5resetEv>
 80213d6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80213da:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80213de:	4620      	mov	r0, r4
 80213e0:	015b      	lsls	r3, r3, #5
 80213e2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80213e4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80213e8:	015b      	lsls	r3, r3, #5
 80213ea:	6523      	str	r3, [r4, #80]	@ 0x50
 80213ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80213f0:	015b      	lsls	r3, r3, #5
 80213f2:	6563      	str	r3, [r4, #84]	@ 0x54
 80213f4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80213f8:	015b      	lsls	r3, r3, #5
 80213fa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80213fc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8021400:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8021404:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8021408:	b002      	add	sp, #8
 802140a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802140e:	bf00      	nop
 8021410:	08026958 	.word	0x08026958

08021414 <_ZN8touchgfx6Canvas5closeEv>:
 8021414:	b538      	push	{r3, r4, r5, lr}
 8021416:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802141a:	4604      	mov	r4, r0
 802141c:	b193      	cbz	r3, 8021444 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802141e:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8021422:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8021426:	4213      	tst	r3, r2
 8021428:	d10c      	bne.n	8021444 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802142a:	f100 0514 	add.w	r5, r0, #20
 802142e:	b123      	cbz	r3, 802143a <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021430:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8021434:	4628      	mov	r0, r5
 8021436:	f7ff fea3 	bl	8021180 <_ZN8touchgfx10Rasterizer6lineToEii>
 802143a:	4628      	mov	r0, r5
 802143c:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8021440:	f7ff fe9e 	bl	8021180 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021444:	2300      	movs	r3, #0
 8021446:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802144a:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802144e:	4298      	cmp	r0, r3
 8021450:	bf34      	ite	cc
 8021452:	2000      	movcc	r0, #0
 8021454:	2001      	movcs	r0, #1
 8021456:	bd38      	pop	{r3, r4, r5, pc}

08021458 <_ZN8touchgfx6Canvas6renderEh>:
 8021458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802145c:	7a85      	ldrb	r5, [r0, #10]
 802145e:	4604      	mov	r4, r0
 8021460:	4369      	muls	r1, r5
 8021462:	1c4d      	adds	r5, r1, #1
 8021464:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8021468:	122d      	asrs	r5, r5, #8
 802146a:	f000 8098 	beq.w	802159e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802146e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8021472:	2b00      	cmp	r3, #0
 8021474:	f000 8093 	beq.w	802159e <_ZN8touchgfx6Canvas6renderEh+0x146>
 8021478:	f7ff ffcc 	bl	8021414 <_ZN8touchgfx6Canvas5closeEv>
 802147c:	4607      	mov	r7, r0
 802147e:	2800      	cmp	r0, #0
 8021480:	d045      	beq.n	802150e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8021482:	6860      	ldr	r0, [r4, #4]
 8021484:	4e47      	ldr	r6, [pc, #284]	@ (80215a4 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8021486:	6803      	ldr	r3, [r0, #0]
 8021488:	6837      	ldr	r7, [r6, #0]
 802148a:	689b      	ldr	r3, [r3, #8]
 802148c:	4798      	blx	r3
 802148e:	4601      	mov	r1, r0
 8021490:	4638      	mov	r0, r7
 8021492:	f7ed fa4b 	bl	800e92c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8021496:	4607      	mov	r7, r0
 8021498:	f7e2 fbbc 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 802149c:	6803      	ldr	r3, [r0, #0]
 802149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80214a0:	4798      	blx	r3
 80214a2:	4680      	mov	r8, r0
 80214a4:	f7e2 fbb6 	bl	8003c14 <_ZN8touchgfx3HAL3lcdEv>
 80214a8:	6803      	ldr	r3, [r0, #0]
 80214aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214ac:	4798      	blx	r3
 80214ae:	280b      	cmp	r0, #11
 80214b0:	d85a      	bhi.n	8021568 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80214b2:	e8df f000 	tbb	[pc, r0]
 80214b6:	5b50      	.short	0x5b50
 80214b8:	3059066b 	.word	0x3059066b
 80214bc:	64646440 	.word	0x64646440
 80214c0:	6464      	.short	0x6464
 80214c2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80214c6:	2208      	movs	r2, #8
 80214c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80214cc:	fb91 f2f2 	sdiv	r2, r1, r2
 80214d0:	fb08 2303 	mla	r3, r8, r3, r2
 80214d4:	441f      	add	r7, r3
 80214d6:	424b      	negs	r3, r1
 80214d8:	f001 0107 	and.w	r1, r1, #7
 80214dc:	f003 0307 	and.w	r3, r3, #7
 80214e0:	bf58      	it	pl
 80214e2:	4259      	negpl	r1, r3
 80214e4:	b2c9      	uxtb	r1, r1
 80214e6:	b2ed      	uxtb	r5, r5
 80214e8:	463a      	mov	r2, r7
 80214ea:	fa0f f388 	sxth.w	r3, r8
 80214ee:	f104 0014 	add.w	r0, r4, #20
 80214f2:	e9cd 1500 	strd	r1, r5, [sp]
 80214f6:	6861      	ldr	r1, [r4, #4]
 80214f8:	f7ff fe4e 	bl	8021198 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80214fc:	4607      	mov	r7, r0
 80214fe:	6860      	ldr	r0, [r4, #4]
 8021500:	6803      	ldr	r3, [r0, #0]
 8021502:	691b      	ldr	r3, [r3, #16]
 8021504:	4798      	blx	r3
 8021506:	6830      	ldr	r0, [r6, #0]
 8021508:	6803      	ldr	r3, [r0, #0]
 802150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802150c:	4798      	blx	r3
 802150e:	4638      	mov	r0, r7
 8021510:	b002      	add	sp, #8
 8021512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021516:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802151a:	2204      	movs	r2, #4
 802151c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021520:	fb91 f2f2 	sdiv	r2, r1, r2
 8021524:	fb08 2303 	mla	r3, r8, r3, r2
 8021528:	441f      	add	r7, r3
 802152a:	424b      	negs	r3, r1
 802152c:	f001 0103 	and.w	r1, r1, #3
 8021530:	f003 0303 	and.w	r3, r3, #3
 8021534:	e7d4      	b.n	80214e0 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8021536:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802153a:	2202      	movs	r2, #2
 802153c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021540:	2900      	cmp	r1, #0
 8021542:	fb91 f2f2 	sdiv	r2, r1, r2
 8021546:	f001 0101 	and.w	r1, r1, #1
 802154a:	fb08 2303 	mla	r3, r8, r3, r2
 802154e:	bfb8      	it	lt
 8021550:	4249      	neglt	r1, r1
 8021552:	441f      	add	r7, r3
 8021554:	e7c6      	b.n	80214e4 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8021556:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802155a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802155e:	fb08 f303 	mul.w	r3, r8, r3
 8021562:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021566:	441f      	add	r7, r3
 8021568:	2100      	movs	r1, #0
 802156a:	e7bc      	b.n	80214e6 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802156c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021570:	2103      	movs	r1, #3
 8021572:	fb08 f203 	mul.w	r2, r8, r3
 8021576:	89a3      	ldrh	r3, [r4, #12]
 8021578:	fb13 2301 	smlabb	r3, r3, r1, r2
 802157c:	e7f3      	b.n	8021566 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802157e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021586:	fb08 2303 	mla	r3, r8, r3, r2
 802158a:	e7ec      	b.n	8021566 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802158c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021594:	fb08 f303 	mul.w	r3, r8, r3
 8021598:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802159c:	e7e3      	b.n	8021566 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802159e:	2701      	movs	r7, #1
 80215a0:	e7b5      	b.n	802150e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80215a2:	bf00      	nop
 80215a4:	2402526c 	.word	0x2402526c

080215a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80215a8:	4b06      	ldr	r3, [pc, #24]	@ (80215c4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80215aa:	b510      	push	{r4, lr}
 80215ac:	781b      	ldrb	r3, [r3, #0]
 80215ae:	2b01      	cmp	r3, #1
 80215b0:	d107      	bne.n	80215c2 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80215b2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80215b6:	680b      	ldr	r3, [r1, #0]
 80215b8:	6814      	ldr	r4, [r2, #0]
 80215ba:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80215be:	6013      	str	r3, [r2, #0]
 80215c0:	600c      	str	r4, [r1, #0]
 80215c2:	bd10      	pop	{r4, pc}
 80215c4:	24025264 	.word	0x24025264

080215c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80215c8:	b513      	push	{r0, r1, r4, lr}
 80215ca:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80215ce:	4604      	mov	r4, r0
 80215d0:	e9cd 2100 	strd	r2, r1, [sp]
 80215d4:	b9a3      	cbnz	r3, 8021600 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80215d6:	466a      	mov	r2, sp
 80215d8:	a901      	add	r1, sp, #4
 80215da:	4620      	mov	r0, r4
 80215dc:	f7ff ffe4 	bl	80215a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80215e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80215e2:	9901      	ldr	r1, [sp, #4]
 80215e4:	9a00      	ldr	r2, [sp, #0]
 80215e6:	1ac9      	subs	r1, r1, r3
 80215e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80215ea:	1ad2      	subs	r2, r2, r3
 80215ec:	9101      	str	r1, [sp, #4]
 80215ee:	2a00      	cmp	r2, #0
 80215f0:	9200      	str	r2, [sp, #0]
 80215f2:	da0b      	bge.n	802160c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80215f4:	2301      	movs	r3, #1
 80215f6:	2900      	cmp	r1, #0
 80215f8:	da0e      	bge.n	8021618 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80215fa:	f043 0304 	orr.w	r3, r3, #4
 80215fe:	e013      	b.n	8021628 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8021600:	f7ff ff08 	bl	8021414 <_ZN8touchgfx6Canvas5closeEv>
 8021604:	2800      	cmp	r0, #0
 8021606:	d1e6      	bne.n	80215d6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8021608:	b002      	add	sp, #8
 802160a:	bd10      	pop	{r4, pc}
 802160c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802160e:	429a      	cmp	r2, r3
 8021610:	bfac      	ite	ge
 8021612:	2302      	movge	r3, #2
 8021614:	2300      	movlt	r3, #0
 8021616:	e7ee      	b.n	80215f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8021618:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802161a:	4281      	cmp	r1, r0
 802161c:	bfac      	ite	ge
 802161e:	2008      	movge	r0, #8
 8021620:	2000      	movlt	r0, #0
 8021622:	4318      	orrs	r0, r3
 8021624:	b2c3      	uxtb	r3, r0
 8021626:	b158      	cbz	r0, 8021640 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8021628:	2200      	movs	r2, #0
 802162a:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802162e:	9901      	ldr	r1, [sp, #4]
 8021630:	9a00      	ldr	r2, [sp, #0]
 8021632:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8021634:	6722      	str	r2, [r4, #112]	@ 0x70
 8021636:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802163a:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802163e:	e7e3      	b.n	8021608 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8021640:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8021644:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8021648:	4298      	cmp	r0, r3
 802164a:	d803      	bhi.n	8021654 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802164c:	f104 0014 	add.w	r0, r4, #20
 8021650:	f7f0 f808 	bl	8011664 <_ZN8touchgfx7Outline6moveToEii>
 8021654:	2301      	movs	r3, #1
 8021656:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802165a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802165e:	2300      	movs	r3, #0
 8021660:	e7e5      	b.n	802162e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08021662 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021664:	ab02      	add	r3, sp, #8
 8021666:	4604      	mov	r4, r0
 8021668:	9101      	str	r1, [sp, #4]
 802166a:	a901      	add	r1, sp, #4
 802166c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8021670:	461a      	mov	r2, r3
 8021672:	f7ff ff99 	bl	80215a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021676:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021678:	9901      	ldr	r1, [sp, #4]
 802167a:	9a00      	ldr	r2, [sp, #0]
 802167c:	1ac9      	subs	r1, r1, r3
 802167e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8021680:	1ad2      	subs	r2, r2, r3
 8021682:	9101      	str	r1, [sp, #4]
 8021684:	2a00      	cmp	r2, #0
 8021686:	9200      	str	r2, [sp, #0]
 8021688:	db1c      	blt.n	80216c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802168a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802168c:	429a      	cmp	r2, r3
 802168e:	bfac      	ite	ge
 8021690:	2002      	movge	r0, #2
 8021692:	2000      	movlt	r0, #0
 8021694:	2900      	cmp	r1, #0
 8021696:	db17      	blt.n	80216c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8021698:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802169a:	4299      	cmp	r1, r3
 802169c:	bfac      	ite	ge
 802169e:	2308      	movge	r3, #8
 80216a0:	2300      	movlt	r3, #0
 80216a2:	4303      	orrs	r3, r0
 80216a4:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80216a8:	b2dd      	uxtb	r5, r3
 80216aa:	b978      	cbnz	r0, 80216cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80216ac:	f104 0014 	add.w	r0, r4, #20
 80216b0:	f7ff fd66 	bl	8021180 <_ZN8touchgfx10Rasterizer6lineToEii>
 80216b4:	9b01      	ldr	r3, [sp, #4]
 80216b6:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80216ba:	6623      	str	r3, [r4, #96]	@ 0x60
 80216bc:	9b00      	ldr	r3, [sp, #0]
 80216be:	6663      	str	r3, [r4, #100]	@ 0x64
 80216c0:	b002      	add	sp, #8
 80216c2:	bd70      	pop	{r4, r5, r6, pc}
 80216c4:	2001      	movs	r0, #1
 80216c6:	e7e5      	b.n	8021694 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80216c8:	2304      	movs	r3, #4
 80216ca:	e7ea      	b.n	80216a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80216cc:	b113      	cbz	r3, 80216d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80216ce:	ea10 0305 	ands.w	r3, r0, r5
 80216d2:	d11c      	bne.n	802170e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80216d4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80216d8:	f104 0614 	add.w	r6, r4, #20
 80216dc:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80216e0:	b98b      	cbnz	r3, 8021706 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80216e2:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80216e6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80216ea:	4298      	cmp	r0, r3
 80216ec:	d802      	bhi.n	80216f4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80216ee:	4630      	mov	r0, r6
 80216f0:	f7ef ffb8 	bl	8011664 <_ZN8touchgfx7Outline6moveToEii>
 80216f4:	2301      	movs	r3, #1
 80216f6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80216fa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80216fe:	4630      	mov	r0, r6
 8021700:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021704:	e7d4      	b.n	80216b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8021706:	4630      	mov	r0, r6
 8021708:	f7ff fd3a 	bl	8021180 <_ZN8touchgfx10Rasterizer6lineToEii>
 802170c:	e7f7      	b.n	80216fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802170e:	461d      	mov	r5, r3
 8021710:	e7d0      	b.n	80216b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08021714 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8021714:	b538      	push	{r3, r4, r5, lr}
 8021716:	ed2d 8b10 	vpush	{d8-d15}
 802171a:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802171e:	4605      	mov	r5, r0
 8021720:	eeb0 ca40 	vmov.f32	s24, s0
 8021724:	460c      	mov	r4, r1
 8021726:	eef0 ca60 	vmov.f32	s25, s1
 802172a:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8021888 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802172e:	eeb0 da41 	vmov.f32	s26, s2
 8021732:	eef0 da61 	vmov.f32	s27, s3
 8021736:	eeb0 ea42 	vmov.f32	s28, s4
 802173a:	eef0 ea62 	vmov.f32	s29, s5
 802173e:	eef0 aa6b 	vmov.f32	s21, s23
 8021742:	2c08      	cmp	r4, #8
 8021744:	d86e      	bhi.n	8021824 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8021746:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802174a:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802174e:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8021752:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8021756:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802175a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802175e:	ee7c faad 	vadd.f32	s31, s25, s27
 8021762:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021766:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802176a:	ee3d aaae 	vadd.f32	s20, s27, s29
 802176e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8021772:	ee6f faab 	vmul.f32	s31, s31, s23
 8021776:	ee69 9aab 	vmul.f32	s19, s19, s23
 802177a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802177e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8021782:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8021786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802178a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802178e:	ee68 8aab 	vmul.f32	s17, s17, s23
 8021792:	bf48      	it	mi
 8021794:	eef1 7a67 	vnegmi.f32	s15, s15
 8021798:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802179c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80217a0:	eef4 7acb 	vcmpe.f32	s15, s22
 80217a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217a8:	dd3f      	ble.n	802182a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80217aa:	ee27 7a07 	vmul.f32	s14, s14, s14
 80217ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80217b2:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80217b6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80217ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80217be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217c2:	d847      	bhi.n	8021854 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80217c4:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80217c8:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80217cc:	f000 fa39 	bl	8021c42 <atan2f>
 80217d0:	eeb0 8a40 	vmov.f32	s16, s0
 80217d4:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80217d8:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80217dc:	f000 fa31 	bl	8021c42 <atan2f>
 80217e0:	ee38 0a40 	vsub.f32	s0, s16, s0
 80217e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 802188c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80217e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80217ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217f0:	bf48      	it	mi
 80217f2:	eeb1 0a40 	vnegmi.f32	s0, s0
 80217f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80217fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217fe:	bfa4      	itt	ge
 8021800:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8021890 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8021804:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8021808:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8021894 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802180c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021814:	d51e      	bpl.n	8021854 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8021816:	eef0 0a49 	vmov.f32	s1, s18
 802181a:	4628      	mov	r0, r5
 802181c:	eeb0 0a68 	vmov.f32	s0, s17
 8021820:	f7ed ff8a 	bl	800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021824:	ecbd 8b10 	vpop	{d8-d15}
 8021828:	bd38      	pop	{r3, r4, r5, pc}
 802182a:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802182e:	eeb0 7a68 	vmov.f32	s14, s17
 8021832:	eef0 6a49 	vmov.f32	s13, s18
 8021836:	eea7 7aea 	vfms.f32	s14, s15, s21
 802183a:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802183e:	eee7 6aea 	vfms.f32	s13, s15, s21
 8021842:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8021846:	eee7 7a07 	vfma.f32	s15, s14, s14
 802184a:	eef4 7ac6 	vcmpe.f32	s15, s12
 802184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021852:	d9e0      	bls.n	8021816 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8021854:	3401      	adds	r4, #1
 8021856:	eef0 0a6c 	vmov.f32	s1, s25
 802185a:	eeb0 0a4c 	vmov.f32	s0, s24
 802185e:	4628      	mov	r0, r5
 8021860:	4621      	mov	r1, r4
 8021862:	eef0 2a49 	vmov.f32	s5, s18
 8021866:	eeb0 2a68 	vmov.f32	s4, s17
 802186a:	eef0 1a6f 	vmov.f32	s3, s31
 802186e:	eeb0 1a4f 	vmov.f32	s2, s30
 8021872:	f7ff ff4f 	bl	8021714 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8021876:	eef0 da4a 	vmov.f32	s27, s20
 802187a:	eeb0 da69 	vmov.f32	s26, s19
 802187e:	eef0 ca49 	vmov.f32	s25, s18
 8021882:	eeb0 ca68 	vmov.f32	s24, s17
 8021886:	e75c      	b.n	8021742 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8021888:	2edbe6ff 	.word	0x2edbe6ff
 802188c:	40490fdb 	.word	0x40490fdb
 8021890:	40c90fdb 	.word	0x40c90fdb
 8021894:	3dcccccd 	.word	0x3dcccccd

08021898 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8021898:	b530      	push	{r4, r5, lr}
 802189a:	ed2d 8b10 	vpush	{d8-d15}
 802189e:	eef0 8a40 	vmov.f32	s17, s0
 80218a2:	b085      	sub	sp, #20
 80218a4:	eef0 9a60 	vmov.f32	s19, s1
 80218a8:	4604      	mov	r4, r0
 80218aa:	eef0 fa41 	vmov.f32	s31, s2
 80218ae:	460d      	mov	r5, r1
 80218b0:	eeb0 fa61 	vmov.f32	s30, s3
 80218b4:	eef0 ba42 	vmov.f32	s23, s4
 80218b8:	eeb0 ca62 	vmov.f32	s24, s5
 80218bc:	eef0 aa43 	vmov.f32	s21, s6
 80218c0:	eeb0 ba63 	vmov.f32	s22, s7
 80218c4:	2d08      	cmp	r5, #8
 80218c6:	f200 8113 	bhi.w	8021af0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80218ca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80218ce:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80218d2:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80218d6:	ee38 daaf 	vadd.f32	s26, s17, s31
 80218da:	ee26 6a27 	vmul.f32	s12, s12, s15
 80218de:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80218e2:	ee2d da27 	vmul.f32	s26, s26, s15
 80218e6:	ed8d 6a01 	vstr	s12, [sp, #4]
 80218ea:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80218ee:	ee6c caa7 	vmul.f32	s25, s25, s15
 80218f2:	eeb0 ea4d 	vmov.f32	s28, s26
 80218f6:	ee79 da8f 	vadd.f32	s27, s19, s30
 80218fa:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80218fe:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8021902:	ee66 6a27 	vmul.f32	s13, s12, s15
 8021906:	ee6d daa7 	vmul.f32	s27, s27, s15
 802190a:	edcd 6a03 	vstr	s13, [sp, #12]
 802190e:	eef0 6a6c 	vmov.f32	s13, s25
 8021912:	eef0 ea6d 	vmov.f32	s29, s27
 8021916:	ee2e ea27 	vmul.f32	s28, s28, s15
 802191a:	eee7 6a27 	vfma.f32	s13, s14, s15
 802191e:	eee7 ea27 	vfma.f32	s29, s14, s15
 8021922:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8021926:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802192a:	eef0 6a67 	vmov.f32	s13, s15
 802192e:	ed8d 7a02 	vstr	s14, [sp, #8]
 8021932:	ed9d 7a03 	vldr	s14, [sp, #12]
 8021936:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802193a:	ed9d 7a02 	vldr	s14, [sp, #8]
 802193e:	ee3e aa87 	vadd.f32	s20, s29, s14
 8021942:	ee29 9a27 	vmul.f32	s18, s18, s15
 8021946:	ee2a aa27 	vmul.f32	s20, s20, s15
 802194a:	2d00      	cmp	r5, #0
 802194c:	f000 810b 	beq.w	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021950:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8021954:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8021bac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8021958:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802195c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8021960:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8021964:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8021968:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802196c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8021970:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8021974:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8021978:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802197c:	eea5 6a27 	vfma.f32	s12, s10, s15
 8021980:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8021984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021988:	bf48      	it	mi
 802198a:	eeb1 7a47 	vnegmi.f32	s14, s14
 802198e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021996:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802199a:	bf48      	it	mi
 802199c:	eeb1 6a46 	vnegmi.f32	s12, s12
 80219a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219a4:	f340 80a8 	ble.w	8021af8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80219a8:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80219ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219b0:	dd5a      	ble.n	8021a68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80219b2:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80219b6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80219ba:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80219be:	ee27 7a07 	vmul.f32	s14, s14, s14
 80219c2:	ee65 7a85 	vmul.f32	s15, s11, s10
 80219c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80219ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ce:	f200 80ca 	bhi.w	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80219d2:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80219d6:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80219da:	f000 f932 	bl	8021c42 <atan2f>
 80219de:	eeb0 8a40 	vmov.f32	s16, s0
 80219e2:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80219e6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80219ea:	f000 f92a 	bl	8021c42 <atan2f>
 80219ee:	ee38 fa40 	vsub.f32	s30, s16, s0
 80219f2:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80219f6:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80219fa:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80219fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a02:	bf48      	it	mi
 8021a04:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8021a08:	f000 f91b 	bl	8021c42 <atan2f>
 8021a0c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8021a10:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8021bb0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021a14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a1c:	eeb4 fae7 	vcmpe.f32	s30, s15
 8021a20:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8021bb0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021a24:	bf48      	it	mi
 8021a26:	eeb1 0a40 	vnegmi.f32	s0, s0
 8021a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021a32:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8021bb4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8021a36:	bfa4      	itt	ge
 8021a38:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8021bb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021a3c:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8021a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a44:	bfa4      	itt	ge
 8021a46:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8021bb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021a4a:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8021a4e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8021a52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a5a:	f140 8084 	bpl.w	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021a5e:	eef0 0a4a 	vmov.f32	s1, s20
 8021a62:	eeb0 0a49 	vmov.f32	s0, s18
 8021a66:	e040      	b.n	8021aea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8021a68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021a6c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8021a70:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8021a74:	ee67 7a85 	vmul.f32	s15, s15, s10
 8021a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a80:	d871      	bhi.n	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021a82:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8021a86:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021a8a:	f000 f8da 	bl	8021c42 <atan2f>
 8021a8e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8021a92:	eeb0 8a40 	vmov.f32	s16, s0
 8021a96:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8021a9a:	f000 f8d2 	bl	8021c42 <atan2f>
 8021a9e:	ee38 0a40 	vsub.f32	s0, s16, s0
 8021aa2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8021bb0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021aa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aae:	bf48      	it	mi
 8021ab0:	eeb1 0a40 	vnegmi.f32	s0, s0
 8021ab4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021abc:	bfa4      	itt	ge
 8021abe:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8021bb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021ac2:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8021ac6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8021bb4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8021aca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ad2:	d548      	bpl.n	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021ad4:	eef0 0a4f 	vmov.f32	s1, s30
 8021ad8:	4620      	mov	r0, r4
 8021ada:	eeb0 0a6f 	vmov.f32	s0, s31
 8021ade:	f7ed fe2b 	bl	800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021ae2:	eef0 0a4c 	vmov.f32	s1, s24
 8021ae6:	eeb0 0a6b 	vmov.f32	s0, s23
 8021aea:	4620      	mov	r0, r4
 8021aec:	f7ed fe24 	bl	800f738 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021af0:	b005      	add	sp, #20
 8021af2:	ecbd 8b10 	vpop	{d8-d15}
 8021af6:	bd30      	pop	{r4, r5, pc}
 8021af8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8021bac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8021afc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8021b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b04:	dd19      	ble.n	8021b3a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8021b06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021b0a:	ee26 7a06 	vmul.f32	s14, s12, s12
 8021b0e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8021b12:	ee67 7a85 	vmul.f32	s15, s15, s10
 8021b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b1e:	d822      	bhi.n	8021b66 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021b20:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8021b24:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8021b28:	f000 f88b 	bl	8021c42 <atan2f>
 8021b2c:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8021b30:	eeb0 8a40 	vmov.f32	s16, s0
 8021b34:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021b38:	e7af      	b.n	8021a9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8021b3a:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8021b3e:	eeb0 7a49 	vmov.f32	s14, s18
 8021b42:	eeb0 6a4a 	vmov.f32	s12, s20
 8021b46:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021b4a:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8021b4e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8021b52:	ee66 7a06 	vmul.f32	s15, s12, s12
 8021b56:	eee7 7a07 	vfma.f32	s15, s14, s14
 8021b5a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8021b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b62:	f67f af7c 	bls.w	8021a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8021b66:	3501      	adds	r5, #1
 8021b68:	eef0 0a69 	vmov.f32	s1, s19
 8021b6c:	eeb0 0a68 	vmov.f32	s0, s17
 8021b70:	4620      	mov	r0, r4
 8021b72:	4629      	mov	r1, r5
 8021b74:	eef0 3a4a 	vmov.f32	s7, s20
 8021b78:	eeb0 3a49 	vmov.f32	s6, s18
 8021b7c:	eef0 2a6e 	vmov.f32	s5, s29
 8021b80:	eeb0 2a4e 	vmov.f32	s4, s28
 8021b84:	eef0 1a6d 	vmov.f32	s3, s27
 8021b88:	eeb0 1a4d 	vmov.f32	s2, s26
 8021b8c:	f7ff fe84 	bl	8021898 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8021b90:	eeb0 ca6c 	vmov.f32	s24, s25
 8021b94:	eddd ba01 	vldr	s23, [sp, #4]
 8021b98:	eef0 9a4a 	vmov.f32	s19, s20
 8021b9c:	ed9d fa02 	vldr	s30, [sp, #8]
 8021ba0:	eef0 8a49 	vmov.f32	s17, s18
 8021ba4:	eddd fa03 	vldr	s31, [sp, #12]
 8021ba8:	e68c      	b.n	80218c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8021baa:	bf00      	nop
 8021bac:	2edbe6ff 	.word	0x2edbe6ff
 8021bb0:	40490fdb 	.word	0x40490fdb
 8021bb4:	3dcccccd 	.word	0x3dcccccd
 8021bb8:	40c90fdb 	.word	0x40c90fdb

08021bbc <_ZN8touchgfx6CanvasD1Ev>:
 8021bbc:	4b04      	ldr	r3, [pc, #16]	@ (8021bd0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8021bbe:	b510      	push	{r4, lr}
 8021bc0:	4604      	mov	r4, r0
 8021bc2:	f840 3b14 	str.w	r3, [r0], #20
 8021bc6:	f7ef f855 	bl	8010c74 <_ZN8touchgfx7OutlineD1Ev>
 8021bca:	4620      	mov	r0, r4
 8021bcc:	bd10      	pop	{r4, pc}
 8021bce:	bf00      	nop
 8021bd0:	08026958 	.word	0x08026958

08021bd4 <_ZN8touchgfx6CanvasD0Ev>:
 8021bd4:	b510      	push	{r4, lr}
 8021bd6:	4604      	mov	r4, r0
 8021bd8:	f7ff fff0 	bl	8021bbc <_ZN8touchgfx6CanvasD1Ev>
 8021bdc:	2174      	movs	r1, #116	@ 0x74
 8021bde:	4620      	mov	r0, r4
 8021be0:	f000 f807 	bl	8021bf2 <_ZdlPvj>
 8021be4:	4620      	mov	r0, r4
 8021be6:	bd10      	pop	{r4, pc}

08021be8 <__aeabi_atexit>:
 8021be8:	460b      	mov	r3, r1
 8021bea:	4601      	mov	r1, r0
 8021bec:	4618      	mov	r0, r3
 8021bee:	f000 bc59 	b.w	80224a4 <__cxa_atexit>

08021bf2 <_ZdlPvj>:
 8021bf2:	f000 b812 	b.w	8021c1a <_ZdlPv>

08021bf6 <__cxa_guard_acquire>:
 8021bf6:	6802      	ldr	r2, [r0, #0]
 8021bf8:	07d2      	lsls	r2, r2, #31
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	d405      	bmi.n	8021c0a <__cxa_guard_acquire+0x14>
 8021bfe:	7842      	ldrb	r2, [r0, #1]
 8021c00:	b102      	cbz	r2, 8021c04 <__cxa_guard_acquire+0xe>
 8021c02:	deff      	udf	#255	@ 0xff
 8021c04:	2001      	movs	r0, #1
 8021c06:	7058      	strb	r0, [r3, #1]
 8021c08:	4770      	bx	lr
 8021c0a:	2000      	movs	r0, #0
 8021c0c:	4770      	bx	lr

08021c0e <__cxa_guard_release>:
 8021c0e:	2301      	movs	r3, #1
 8021c10:	6003      	str	r3, [r0, #0]
 8021c12:	4770      	bx	lr

08021c14 <__cxa_pure_virtual>:
 8021c14:	b508      	push	{r3, lr}
 8021c16:	f000 f80f 	bl	8021c38 <_ZSt9terminatev>

08021c1a <_ZdlPv>:
 8021c1a:	f000 bb8d 	b.w	8022338 <free>

08021c1e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021c1e:	b508      	push	{r3, lr}
 8021c20:	4780      	blx	r0
 8021c22:	f000 fb56 	bl	80222d2 <abort>
	...

08021c28 <_ZSt13get_terminatev>:
 8021c28:	4b02      	ldr	r3, [pc, #8]	@ (8021c34 <_ZSt13get_terminatev+0xc>)
 8021c2a:	6818      	ldr	r0, [r3, #0]
 8021c2c:	f3bf 8f5b 	dmb	ish
 8021c30:	4770      	bx	lr
 8021c32:	bf00      	nop
 8021c34:	240000d8 	.word	0x240000d8

08021c38 <_ZSt9terminatev>:
 8021c38:	b508      	push	{r3, lr}
 8021c3a:	f7ff fff5 	bl	8021c28 <_ZSt13get_terminatev>
 8021c3e:	f7ff ffee 	bl	8021c1e <_ZN10__cxxabiv111__terminateEPFvvE>

08021c42 <atan2f>:
 8021c42:	f000 b9cd 	b.w	8021fe0 <__ieee754_atan2f>
	...

08021c48 <sqrtf>:
 8021c48:	b508      	push	{r3, lr}
 8021c4a:	ed2d 8b02 	vpush	{d8}
 8021c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8021c52:	f000 f9c2 	bl	8021fda <__ieee754_sqrtf>
 8021c56:	eeb4 8a48 	vcmp.f32	s16, s16
 8021c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c5e:	d60c      	bvs.n	8021c7a <sqrtf+0x32>
 8021c60:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8021c80 <sqrtf+0x38>
 8021c64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c6c:	d505      	bpl.n	8021c7a <sqrtf+0x32>
 8021c6e:	f000 fe87 	bl	8022980 <__errno>
 8021c72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8021c76:	2321      	movs	r3, #33	@ 0x21
 8021c78:	6003      	str	r3, [r0, #0]
 8021c7a:	ecbd 8b02 	vpop	{d8}
 8021c7e:	bd08      	pop	{r3, pc}
 8021c80:	00000000 	.word	0x00000000

08021c84 <sinf_poly>:
 8021c84:	07cb      	lsls	r3, r1, #31
 8021c86:	d412      	bmi.n	8021cae <sinf_poly+0x2a>
 8021c88:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021c8c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021c90:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021c94:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021c98:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021c9c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021ca0:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021ca4:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021ca8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021cac:	4770      	bx	lr
 8021cae:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021cb2:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021cb6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021cba:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021cbe:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021cc2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021cc6:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021cca:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021cce:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021cd2:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021cd6:	e7e5      	b.n	8021ca4 <sinf_poly+0x20>

08021cd8 <sinf>:
 8021cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021cda:	ee10 4a10 	vmov	r4, s0
 8021cde:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021ce2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021ce6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8021cea:	eef0 7a40 	vmov.f32	s15, s0
 8021cee:	d218      	bcs.n	8021d22 <sinf+0x4a>
 8021cf0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021cf4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021cf8:	d20a      	bcs.n	8021d10 <sinf+0x38>
 8021cfa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8021cfe:	d103      	bne.n	8021d08 <sinf+0x30>
 8021d00:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021d04:	ed8d 1a01 	vstr	s2, [sp, #4]
 8021d08:	eeb0 0a67 	vmov.f32	s0, s15
 8021d0c:	b003      	add	sp, #12
 8021d0e:	bd30      	pop	{r4, r5, pc}
 8021d10:	483b      	ldr	r0, [pc, #236]	@ (8021e00 <sinf+0x128>)
 8021d12:	eeb0 0b46 	vmov.f64	d0, d6
 8021d16:	2100      	movs	r1, #0
 8021d18:	b003      	add	sp, #12
 8021d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021d1e:	f7ff bfb1 	b.w	8021c84 <sinf_poly>
 8021d22:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021d26:	4293      	cmp	r3, r2
 8021d28:	d824      	bhi.n	8021d74 <sinf+0x9c>
 8021d2a:	4b35      	ldr	r3, [pc, #212]	@ (8021e00 <sinf+0x128>)
 8021d2c:	ed93 7b08 	vldr	d7, [r3, #32]
 8021d30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021d34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021d38:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021d3c:	ee17 1a90 	vmov	r1, s15
 8021d40:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021d44:	1609      	asrs	r1, r1, #24
 8021d46:	ee07 1a90 	vmov	s15, r1
 8021d4a:	f001 0203 	and.w	r2, r1, #3
 8021d4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021d52:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021d56:	ed92 0b00 	vldr	d0, [r2]
 8021d5a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8021d5e:	f011 0f02 	tst.w	r1, #2
 8021d62:	eea5 6b47 	vfms.f64	d6, d5, d7
 8021d66:	bf08      	it	eq
 8021d68:	4618      	moveq	r0, r3
 8021d6a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021d6e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021d72:	e7d1      	b.n	8021d18 <sinf+0x40>
 8021d74:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021d78:	d237      	bcs.n	8021dea <sinf+0x112>
 8021d7a:	4922      	ldr	r1, [pc, #136]	@ (8021e04 <sinf+0x12c>)
 8021d7c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021d80:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021d84:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021d88:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021d8c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021d90:	6a10      	ldr	r0, [r2, #32]
 8021d92:	6912      	ldr	r2, [r2, #16]
 8021d94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021d98:	40ab      	lsls	r3, r5
 8021d9a:	fba0 5003 	umull	r5, r0, r0, r3
 8021d9e:	4359      	muls	r1, r3
 8021da0:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021da4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021da8:	0f9d      	lsrs	r5, r3, #30
 8021daa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021dae:	1ac9      	subs	r1, r1, r3
 8021db0:	f7de fc74 	bl	800069c <__aeabi_l2d>
 8021db4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021db8:	4b11      	ldr	r3, [pc, #68]	@ (8021e00 <sinf+0x128>)
 8021dba:	f004 0203 	and.w	r2, r4, #3
 8021dbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021dc2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8021df8 <sinf+0x120>
 8021dc6:	ed92 0b00 	vldr	d0, [r2]
 8021dca:	ec41 0b17 	vmov	d7, r0, r1
 8021dce:	f014 0f02 	tst.w	r4, #2
 8021dd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021dd6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021dda:	4629      	mov	r1, r5
 8021ddc:	bf08      	it	eq
 8021dde:	4618      	moveq	r0, r3
 8021de0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021de4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021de8:	e796      	b.n	8021d18 <sinf+0x40>
 8021dea:	b003      	add	sp, #12
 8021dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021df0:	f000 b8e4 	b.w	8021fbc <__math_invalidf>
 8021df4:	f3af 8000 	nop.w
 8021df8:	54442d18 	.word	0x54442d18
 8021dfc:	3c1921fb 	.word	0x3c1921fb
 8021e00:	080269c8 	.word	0x080269c8
 8021e04:	08026964 	.word	0x08026964

08021e08 <sinf_poly>:
 8021e08:	07cb      	lsls	r3, r1, #31
 8021e0a:	d412      	bmi.n	8021e32 <sinf_poly+0x2a>
 8021e0c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021e10:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021e14:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021e18:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021e1c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021e20:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021e24:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021e28:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021e2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021e30:	4770      	bx	lr
 8021e32:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021e36:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021e3a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021e3e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021e42:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021e46:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021e4a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021e4e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021e52:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021e56:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021e5a:	e7e5      	b.n	8021e28 <sinf_poly+0x20>
 8021e5c:	0000      	movs	r0, r0
	...

08021e60 <cosf>:
 8021e60:	b538      	push	{r3, r4, r5, lr}
 8021e62:	ee10 4a10 	vmov	r4, s0
 8021e66:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021e6a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021e6e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8021e72:	d21f      	bcs.n	8021eb4 <cosf+0x54>
 8021e74:	ee27 7b07 	vmul.f64	d7, d7, d7
 8021e78:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021e7c:	f0c0 8082 	bcc.w	8021f84 <cosf+0x124>
 8021e80:	ee27 4b07 	vmul.f64	d4, d7, d7
 8021e84:	4b44      	ldr	r3, [pc, #272]	@ (8021f98 <cosf+0x138>)
 8021e86:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8021e8a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8021e8e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8021e92:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021e96:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8021e9a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8021e9e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8021ea2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021ea6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8021eaa:	eea6 0b07 	vfma.f64	d0, d6, d7
 8021eae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021eb2:	bd38      	pop	{r3, r4, r5, pc}
 8021eb4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021eb8:	4293      	cmp	r3, r2
 8021eba:	d829      	bhi.n	8021f10 <cosf+0xb0>
 8021ebc:	4b36      	ldr	r3, [pc, #216]	@ (8021f98 <cosf+0x138>)
 8021ebe:	ed93 6b08 	vldr	d6, [r3, #32]
 8021ec2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021ec6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8021eca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021ece:	ee16 1a90 	vmov	r1, s13
 8021ed2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021ed6:	1609      	asrs	r1, r1, #24
 8021ed8:	ee06 1a90 	vmov	s13, r1
 8021edc:	f001 0203 	and.w	r2, r1, #3
 8021ee0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021ee4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8021ee8:	ed92 0b00 	vldr	d0, [r2]
 8021eec:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8021ef0:	f011 0f02 	tst.w	r1, #2
 8021ef4:	f081 0101 	eor.w	r1, r1, #1
 8021ef8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8021efc:	bf08      	it	eq
 8021efe:	4618      	moveq	r0, r3
 8021f00:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021f0c:	f7ff bf7c 	b.w	8021e08 <sinf_poly>
 8021f10:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021f14:	d232      	bcs.n	8021f7c <cosf+0x11c>
 8021f16:	4921      	ldr	r1, [pc, #132]	@ (8021f9c <cosf+0x13c>)
 8021f18:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021f1c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021f20:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021f24:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021f28:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021f2c:	6a10      	ldr	r0, [r2, #32]
 8021f2e:	6912      	ldr	r2, [r2, #16]
 8021f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021f34:	40ab      	lsls	r3, r5
 8021f36:	fba0 5003 	umull	r5, r0, r0, r3
 8021f3a:	4359      	muls	r1, r3
 8021f3c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021f40:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021f44:	0f9d      	lsrs	r5, r3, #30
 8021f46:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021f4a:	1ac9      	subs	r1, r1, r3
 8021f4c:	f7de fba6 	bl	800069c <__aeabi_l2d>
 8021f50:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021f54:	4b10      	ldr	r3, [pc, #64]	@ (8021f98 <cosf+0x138>)
 8021f56:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8021f90 <cosf+0x130>
 8021f5a:	ec41 0b17 	vmov	d7, r0, r1
 8021f5e:	f004 0203 	and.w	r2, r4, #3
 8021f62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021f66:	ed92 0b00 	vldr	d0, [r2]
 8021f6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021f6e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021f72:	f014 0f02 	tst.w	r4, #2
 8021f76:	f085 0101 	eor.w	r1, r5, #1
 8021f7a:	e7bf      	b.n	8021efc <cosf+0x9c>
 8021f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f80:	f000 b81c 	b.w	8021fbc <__math_invalidf>
 8021f84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8021f88:	e793      	b.n	8021eb2 <cosf+0x52>
 8021f8a:	bf00      	nop
 8021f8c:	f3af 8000 	nop.w
 8021f90:	54442d18 	.word	0x54442d18
 8021f94:	3c1921fb 	.word	0x3c1921fb
 8021f98:	080269c8 	.word	0x080269c8
 8021f9c:	08026964 	.word	0x08026964

08021fa0 <with_errnof>:
 8021fa0:	b510      	push	{r4, lr}
 8021fa2:	ed2d 8b02 	vpush	{d8}
 8021fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8021faa:	4604      	mov	r4, r0
 8021fac:	f000 fce8 	bl	8022980 <__errno>
 8021fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8021fb4:	ecbd 8b02 	vpop	{d8}
 8021fb8:	6004      	str	r4, [r0, #0]
 8021fba:	bd10      	pop	{r4, pc}

08021fbc <__math_invalidf>:
 8021fbc:	eef0 7a40 	vmov.f32	s15, s0
 8021fc0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021fc4:	eef4 7a67 	vcmp.f32	s15, s15
 8021fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fcc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8021fd0:	d602      	bvs.n	8021fd8 <__math_invalidf+0x1c>
 8021fd2:	2021      	movs	r0, #33	@ 0x21
 8021fd4:	f7ff bfe4 	b.w	8021fa0 <with_errnof>
 8021fd8:	4770      	bx	lr

08021fda <__ieee754_sqrtf>:
 8021fda:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021fde:	4770      	bx	lr

08021fe0 <__ieee754_atan2f>:
 8021fe0:	ee10 2a90 	vmov	r2, s1
 8021fe4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8021fe8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021fec:	b510      	push	{r4, lr}
 8021fee:	eef0 7a40 	vmov.f32	s15, s0
 8021ff2:	d806      	bhi.n	8022002 <__ieee754_atan2f+0x22>
 8021ff4:	ee10 0a10 	vmov	r0, s0
 8021ff8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8021ffc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022000:	d904      	bls.n	802200c <__ieee754_atan2f+0x2c>
 8022002:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022006:	eeb0 0a67 	vmov.f32	s0, s15
 802200a:	bd10      	pop	{r4, pc}
 802200c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022010:	d103      	bne.n	802201a <__ieee754_atan2f+0x3a>
 8022012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022016:	f000 b881 	b.w	802211c <atanf>
 802201a:	1794      	asrs	r4, r2, #30
 802201c:	f004 0402 	and.w	r4, r4, #2
 8022020:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022024:	b93b      	cbnz	r3, 8022036 <__ieee754_atan2f+0x56>
 8022026:	2c02      	cmp	r4, #2
 8022028:	d05c      	beq.n	80220e4 <__ieee754_atan2f+0x104>
 802202a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80220f8 <__ieee754_atan2f+0x118>
 802202e:	2c03      	cmp	r4, #3
 8022030:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8022034:	e7e7      	b.n	8022006 <__ieee754_atan2f+0x26>
 8022036:	b939      	cbnz	r1, 8022048 <__ieee754_atan2f+0x68>
 8022038:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80220fc <__ieee754_atan2f+0x11c>
 802203c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022100 <__ieee754_atan2f+0x120>
 8022040:	2800      	cmp	r0, #0
 8022042:	fe67 7a27 	vselge.f32	s15, s14, s15
 8022046:	e7de      	b.n	8022006 <__ieee754_atan2f+0x26>
 8022048:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802204c:	d110      	bne.n	8022070 <__ieee754_atan2f+0x90>
 802204e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022052:	f104 34ff 	add.w	r4, r4, #4294967295
 8022056:	d107      	bne.n	8022068 <__ieee754_atan2f+0x88>
 8022058:	2c02      	cmp	r4, #2
 802205a:	d846      	bhi.n	80220ea <__ieee754_atan2f+0x10a>
 802205c:	4b29      	ldr	r3, [pc, #164]	@ (8022104 <__ieee754_atan2f+0x124>)
 802205e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022062:	edd3 7a00 	vldr	s15, [r3]
 8022066:	e7ce      	b.n	8022006 <__ieee754_atan2f+0x26>
 8022068:	2c02      	cmp	r4, #2
 802206a:	d841      	bhi.n	80220f0 <__ieee754_atan2f+0x110>
 802206c:	4b26      	ldr	r3, [pc, #152]	@ (8022108 <__ieee754_atan2f+0x128>)
 802206e:	e7f6      	b.n	802205e <__ieee754_atan2f+0x7e>
 8022070:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022074:	d0e0      	beq.n	8022038 <__ieee754_atan2f+0x58>
 8022076:	1a5b      	subs	r3, r3, r1
 8022078:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802207c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022080:	da1a      	bge.n	80220b8 <__ieee754_atan2f+0xd8>
 8022082:	2a00      	cmp	r2, #0
 8022084:	da01      	bge.n	802208a <__ieee754_atan2f+0xaa>
 8022086:	313c      	adds	r1, #60	@ 0x3c
 8022088:	db19      	blt.n	80220be <__ieee754_atan2f+0xde>
 802208a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802208e:	f000 f919 	bl	80222c4 <fabsf>
 8022092:	f000 f843 	bl	802211c <atanf>
 8022096:	eef0 7a40 	vmov.f32	s15, s0
 802209a:	2c01      	cmp	r4, #1
 802209c:	d012      	beq.n	80220c4 <__ieee754_atan2f+0xe4>
 802209e:	2c02      	cmp	r4, #2
 80220a0:	d017      	beq.n	80220d2 <__ieee754_atan2f+0xf2>
 80220a2:	2c00      	cmp	r4, #0
 80220a4:	d0af      	beq.n	8022006 <__ieee754_atan2f+0x26>
 80220a6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802210c <__ieee754_atan2f+0x12c>
 80220aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220ae:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8022110 <__ieee754_atan2f+0x130>
 80220b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220b6:	e7a6      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220b8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8022100 <__ieee754_atan2f+0x120>
 80220bc:	e7ed      	b.n	802209a <__ieee754_atan2f+0xba>
 80220be:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8022114 <__ieee754_atan2f+0x134>
 80220c2:	e7ea      	b.n	802209a <__ieee754_atan2f+0xba>
 80220c4:	ee17 3a90 	vmov	r3, s15
 80220c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80220cc:	ee07 3a90 	vmov	s15, r3
 80220d0:	e799      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802210c <__ieee754_atan2f+0x12c>
 80220d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220da:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8022110 <__ieee754_atan2f+0x130>
 80220de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80220e2:	e790      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220e4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8022110 <__ieee754_atan2f+0x130>
 80220e8:	e78d      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220ea:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022118 <__ieee754_atan2f+0x138>
 80220ee:	e78a      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220f0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8022114 <__ieee754_atan2f+0x134>
 80220f4:	e787      	b.n	8022006 <__ieee754_atan2f+0x26>
 80220f6:	bf00      	nop
 80220f8:	c0490fdb 	.word	0xc0490fdb
 80220fc:	bfc90fdb 	.word	0xbfc90fdb
 8022100:	3fc90fdb 	.word	0x3fc90fdb
 8022104:	08026ab4 	.word	0x08026ab4
 8022108:	08026aa8 	.word	0x08026aa8
 802210c:	33bbbd2e 	.word	0x33bbbd2e
 8022110:	40490fdb 	.word	0x40490fdb
 8022114:	00000000 	.word	0x00000000
 8022118:	3f490fdb 	.word	0x3f490fdb

0802211c <atanf>:
 802211c:	b538      	push	{r3, r4, r5, lr}
 802211e:	ee10 5a10 	vmov	r5, s0
 8022122:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8022126:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802212a:	eef0 7a40 	vmov.f32	s15, s0
 802212e:	d30f      	bcc.n	8022150 <atanf+0x34>
 8022130:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8022134:	d904      	bls.n	8022140 <atanf+0x24>
 8022136:	ee70 7a00 	vadd.f32	s15, s0, s0
 802213a:	eeb0 0a67 	vmov.f32	s0, s15
 802213e:	bd38      	pop	{r3, r4, r5, pc}
 8022140:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022278 <atanf+0x15c>
 8022144:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802227c <atanf+0x160>
 8022148:	2d00      	cmp	r5, #0
 802214a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802214e:	e7f4      	b.n	802213a <atanf+0x1e>
 8022150:	4b4b      	ldr	r3, [pc, #300]	@ (8022280 <atanf+0x164>)
 8022152:	429c      	cmp	r4, r3
 8022154:	d810      	bhi.n	8022178 <atanf+0x5c>
 8022156:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802215a:	d20a      	bcs.n	8022172 <atanf+0x56>
 802215c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8022284 <atanf+0x168>
 8022160:	ee30 7a07 	vadd.f32	s14, s0, s14
 8022164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022168:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022170:	dce3      	bgt.n	802213a <atanf+0x1e>
 8022172:	f04f 33ff 	mov.w	r3, #4294967295
 8022176:	e013      	b.n	80221a0 <atanf+0x84>
 8022178:	f000 f8a4 	bl	80222c4 <fabsf>
 802217c:	4b42      	ldr	r3, [pc, #264]	@ (8022288 <atanf+0x16c>)
 802217e:	429c      	cmp	r4, r3
 8022180:	d84f      	bhi.n	8022222 <atanf+0x106>
 8022182:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8022186:	429c      	cmp	r4, r3
 8022188:	d841      	bhi.n	802220e <atanf+0xf2>
 802218a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802218e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022192:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022196:	2300      	movs	r3, #0
 8022198:	ee30 0a27 	vadd.f32	s0, s0, s15
 802219c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80221a0:	1c5a      	adds	r2, r3, #1
 80221a2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80221a6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802228c <atanf+0x170>
 80221aa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022290 <atanf+0x174>
 80221ae:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8022294 <atanf+0x178>
 80221b2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80221b6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80221ba:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022298 <atanf+0x17c>
 80221be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80221c2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802229c <atanf+0x180>
 80221c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80221ca:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80222a0 <atanf+0x184>
 80221ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80221d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80222a4 <atanf+0x188>
 80221d6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80221da:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80222a8 <atanf+0x18c>
 80221de:	eea6 5a87 	vfma.f32	s10, s13, s14
 80221e2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80222ac <atanf+0x190>
 80221e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80221ea:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80222b0 <atanf+0x194>
 80221ee:	eea7 5a26 	vfma.f32	s10, s14, s13
 80221f2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80222b4 <atanf+0x198>
 80221f6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80221fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80221fe:	eea5 7a86 	vfma.f32	s14, s11, s12
 8022202:	ee27 7a87 	vmul.f32	s14, s15, s14
 8022206:	d121      	bne.n	802224c <atanf+0x130>
 8022208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802220c:	e795      	b.n	802213a <atanf+0x1e>
 802220e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022212:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022216:	ee30 0a27 	vadd.f32	s0, s0, s15
 802221a:	2301      	movs	r3, #1
 802221c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022220:	e7be      	b.n	80221a0 <atanf+0x84>
 8022222:	4b25      	ldr	r3, [pc, #148]	@ (80222b8 <atanf+0x19c>)
 8022224:	429c      	cmp	r4, r3
 8022226:	d80b      	bhi.n	8022240 <atanf+0x124>
 8022228:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802222c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022230:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022234:	2302      	movs	r3, #2
 8022236:	ee70 6a67 	vsub.f32	s13, s0, s15
 802223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802223e:	e7af      	b.n	80221a0 <atanf+0x84>
 8022240:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022244:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022248:	2303      	movs	r3, #3
 802224a:	e7a9      	b.n	80221a0 <atanf+0x84>
 802224c:	4a1b      	ldr	r2, [pc, #108]	@ (80222bc <atanf+0x1a0>)
 802224e:	491c      	ldr	r1, [pc, #112]	@ (80222c0 <atanf+0x1a4>)
 8022250:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022254:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022258:	edd3 6a00 	vldr	s13, [r3]
 802225c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022260:	2d00      	cmp	r5, #0
 8022262:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022266:	edd2 7a00 	vldr	s15, [r2]
 802226a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802226e:	bfb8      	it	lt
 8022270:	eef1 7a67 	vneglt.f32	s15, s15
 8022274:	e761      	b.n	802213a <atanf+0x1e>
 8022276:	bf00      	nop
 8022278:	bfc90fdb 	.word	0xbfc90fdb
 802227c:	3fc90fdb 	.word	0x3fc90fdb
 8022280:	3edfffff 	.word	0x3edfffff
 8022284:	7149f2ca 	.word	0x7149f2ca
 8022288:	3f97ffff 	.word	0x3f97ffff
 802228c:	3c8569d7 	.word	0x3c8569d7
 8022290:	3d4bda59 	.word	0x3d4bda59
 8022294:	bd6ef16b 	.word	0xbd6ef16b
 8022298:	3d886b35 	.word	0x3d886b35
 802229c:	3dba2e6e 	.word	0x3dba2e6e
 80222a0:	3e124925 	.word	0x3e124925
 80222a4:	3eaaaaab 	.word	0x3eaaaaab
 80222a8:	bd15a221 	.word	0xbd15a221
 80222ac:	bd9d8795 	.word	0xbd9d8795
 80222b0:	bde38e38 	.word	0xbde38e38
 80222b4:	be4ccccd 	.word	0xbe4ccccd
 80222b8:	401bffff 	.word	0x401bffff
 80222bc:	08026ad0 	.word	0x08026ad0
 80222c0:	08026ac0 	.word	0x08026ac0

080222c4 <fabsf>:
 80222c4:	ee10 3a10 	vmov	r3, s0
 80222c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80222cc:	ee00 3a10 	vmov	s0, r3
 80222d0:	4770      	bx	lr

080222d2 <abort>:
 80222d2:	b508      	push	{r3, lr}
 80222d4:	2006      	movs	r0, #6
 80222d6:	f000 fae1 	bl	802289c <raise>
 80222da:	2001      	movs	r0, #1
 80222dc:	f7df f9cc 	bl	8001678 <_exit>

080222e0 <__assert_func>:
 80222e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80222e2:	4614      	mov	r4, r2
 80222e4:	461a      	mov	r2, r3
 80222e6:	4b09      	ldr	r3, [pc, #36]	@ (802230c <__assert_func+0x2c>)
 80222e8:	681b      	ldr	r3, [r3, #0]
 80222ea:	4605      	mov	r5, r0
 80222ec:	68d8      	ldr	r0, [r3, #12]
 80222ee:	b14c      	cbz	r4, 8022304 <__assert_func+0x24>
 80222f0:	4b07      	ldr	r3, [pc, #28]	@ (8022310 <__assert_func+0x30>)
 80222f2:	9100      	str	r1, [sp, #0]
 80222f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80222f8:	4906      	ldr	r1, [pc, #24]	@ (8022314 <__assert_func+0x34>)
 80222fa:	462b      	mov	r3, r5
 80222fc:	f000 f984 	bl	8022608 <fiprintf>
 8022300:	f7ff ffe7 	bl	80222d2 <abort>
 8022304:	4b04      	ldr	r3, [pc, #16]	@ (8022318 <__assert_func+0x38>)
 8022306:	461c      	mov	r4, r3
 8022308:	e7f3      	b.n	80222f2 <__assert_func+0x12>
 802230a:	bf00      	nop
 802230c:	240000e8 	.word	0x240000e8
 8022310:	080251d0 	.word	0x080251d0
 8022314:	080251dd 	.word	0x080251dd
 8022318:	0802520b 	.word	0x0802520b

0802231c <atexit>:
 802231c:	2300      	movs	r3, #0
 802231e:	4601      	mov	r1, r0
 8022320:	461a      	mov	r2, r3
 8022322:	4618      	mov	r0, r3
 8022324:	f000 bb68 	b.w	80229f8 <__register_exitproc>

08022328 <malloc>:
 8022328:	4b02      	ldr	r3, [pc, #8]	@ (8022334 <malloc+0xc>)
 802232a:	4601      	mov	r1, r0
 802232c:	6818      	ldr	r0, [r3, #0]
 802232e:	f000 b82d 	b.w	802238c <_malloc_r>
 8022332:	bf00      	nop
 8022334:	240000e8 	.word	0x240000e8

08022338 <free>:
 8022338:	4b02      	ldr	r3, [pc, #8]	@ (8022344 <free+0xc>)
 802233a:	4601      	mov	r1, r0
 802233c:	6818      	ldr	r0, [r3, #0]
 802233e:	f000 bbb7 	b.w	8022ab0 <_free_r>
 8022342:	bf00      	nop
 8022344:	240000e8 	.word	0x240000e8

08022348 <sbrk_aligned>:
 8022348:	b570      	push	{r4, r5, r6, lr}
 802234a:	4e0f      	ldr	r6, [pc, #60]	@ (8022388 <sbrk_aligned+0x40>)
 802234c:	460c      	mov	r4, r1
 802234e:	6831      	ldr	r1, [r6, #0]
 8022350:	4605      	mov	r5, r0
 8022352:	b911      	cbnz	r1, 802235a <sbrk_aligned+0x12>
 8022354:	f000 faf2 	bl	802293c <_sbrk_r>
 8022358:	6030      	str	r0, [r6, #0]
 802235a:	4621      	mov	r1, r4
 802235c:	4628      	mov	r0, r5
 802235e:	f000 faed 	bl	802293c <_sbrk_r>
 8022362:	1c43      	adds	r3, r0, #1
 8022364:	d103      	bne.n	802236e <sbrk_aligned+0x26>
 8022366:	f04f 34ff 	mov.w	r4, #4294967295
 802236a:	4620      	mov	r0, r4
 802236c:	bd70      	pop	{r4, r5, r6, pc}
 802236e:	1cc4      	adds	r4, r0, #3
 8022370:	f024 0403 	bic.w	r4, r4, #3
 8022374:	42a0      	cmp	r0, r4
 8022376:	d0f8      	beq.n	802236a <sbrk_aligned+0x22>
 8022378:	1a21      	subs	r1, r4, r0
 802237a:	4628      	mov	r0, r5
 802237c:	f000 fade 	bl	802293c <_sbrk_r>
 8022380:	3001      	adds	r0, #1
 8022382:	d1f2      	bne.n	802236a <sbrk_aligned+0x22>
 8022384:	e7ef      	b.n	8022366 <sbrk_aligned+0x1e>
 8022386:	bf00      	nop
 8022388:	24025ca8 	.word	0x24025ca8

0802238c <_malloc_r>:
 802238c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022390:	1ccd      	adds	r5, r1, #3
 8022392:	f025 0503 	bic.w	r5, r5, #3
 8022396:	3508      	adds	r5, #8
 8022398:	2d0c      	cmp	r5, #12
 802239a:	bf38      	it	cc
 802239c:	250c      	movcc	r5, #12
 802239e:	2d00      	cmp	r5, #0
 80223a0:	4606      	mov	r6, r0
 80223a2:	db01      	blt.n	80223a8 <_malloc_r+0x1c>
 80223a4:	42a9      	cmp	r1, r5
 80223a6:	d904      	bls.n	80223b2 <_malloc_r+0x26>
 80223a8:	230c      	movs	r3, #12
 80223aa:	6033      	str	r3, [r6, #0]
 80223ac:	2000      	movs	r0, #0
 80223ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80223b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022488 <_malloc_r+0xfc>
 80223b6:	f000 f869 	bl	802248c <__malloc_lock>
 80223ba:	f8d8 3000 	ldr.w	r3, [r8]
 80223be:	461c      	mov	r4, r3
 80223c0:	bb44      	cbnz	r4, 8022414 <_malloc_r+0x88>
 80223c2:	4629      	mov	r1, r5
 80223c4:	4630      	mov	r0, r6
 80223c6:	f7ff ffbf 	bl	8022348 <sbrk_aligned>
 80223ca:	1c43      	adds	r3, r0, #1
 80223cc:	4604      	mov	r4, r0
 80223ce:	d158      	bne.n	8022482 <_malloc_r+0xf6>
 80223d0:	f8d8 4000 	ldr.w	r4, [r8]
 80223d4:	4627      	mov	r7, r4
 80223d6:	2f00      	cmp	r7, #0
 80223d8:	d143      	bne.n	8022462 <_malloc_r+0xd6>
 80223da:	2c00      	cmp	r4, #0
 80223dc:	d04b      	beq.n	8022476 <_malloc_r+0xea>
 80223de:	6823      	ldr	r3, [r4, #0]
 80223e0:	4639      	mov	r1, r7
 80223e2:	4630      	mov	r0, r6
 80223e4:	eb04 0903 	add.w	r9, r4, r3
 80223e8:	f000 faa8 	bl	802293c <_sbrk_r>
 80223ec:	4581      	cmp	r9, r0
 80223ee:	d142      	bne.n	8022476 <_malloc_r+0xea>
 80223f0:	6821      	ldr	r1, [r4, #0]
 80223f2:	1a6d      	subs	r5, r5, r1
 80223f4:	4629      	mov	r1, r5
 80223f6:	4630      	mov	r0, r6
 80223f8:	f7ff ffa6 	bl	8022348 <sbrk_aligned>
 80223fc:	3001      	adds	r0, #1
 80223fe:	d03a      	beq.n	8022476 <_malloc_r+0xea>
 8022400:	6823      	ldr	r3, [r4, #0]
 8022402:	442b      	add	r3, r5
 8022404:	6023      	str	r3, [r4, #0]
 8022406:	f8d8 3000 	ldr.w	r3, [r8]
 802240a:	685a      	ldr	r2, [r3, #4]
 802240c:	bb62      	cbnz	r2, 8022468 <_malloc_r+0xdc>
 802240e:	f8c8 7000 	str.w	r7, [r8]
 8022412:	e00f      	b.n	8022434 <_malloc_r+0xa8>
 8022414:	6822      	ldr	r2, [r4, #0]
 8022416:	1b52      	subs	r2, r2, r5
 8022418:	d420      	bmi.n	802245c <_malloc_r+0xd0>
 802241a:	2a0b      	cmp	r2, #11
 802241c:	d917      	bls.n	802244e <_malloc_r+0xc2>
 802241e:	1961      	adds	r1, r4, r5
 8022420:	42a3      	cmp	r3, r4
 8022422:	6025      	str	r5, [r4, #0]
 8022424:	bf18      	it	ne
 8022426:	6059      	strne	r1, [r3, #4]
 8022428:	6863      	ldr	r3, [r4, #4]
 802242a:	bf08      	it	eq
 802242c:	f8c8 1000 	streq.w	r1, [r8]
 8022430:	5162      	str	r2, [r4, r5]
 8022432:	604b      	str	r3, [r1, #4]
 8022434:	4630      	mov	r0, r6
 8022436:	f000 f82f 	bl	8022498 <__malloc_unlock>
 802243a:	f104 000b 	add.w	r0, r4, #11
 802243e:	1d23      	adds	r3, r4, #4
 8022440:	f020 0007 	bic.w	r0, r0, #7
 8022444:	1ac2      	subs	r2, r0, r3
 8022446:	bf1c      	itt	ne
 8022448:	1a1b      	subne	r3, r3, r0
 802244a:	50a3      	strne	r3, [r4, r2]
 802244c:	e7af      	b.n	80223ae <_malloc_r+0x22>
 802244e:	6862      	ldr	r2, [r4, #4]
 8022450:	42a3      	cmp	r3, r4
 8022452:	bf0c      	ite	eq
 8022454:	f8c8 2000 	streq.w	r2, [r8]
 8022458:	605a      	strne	r2, [r3, #4]
 802245a:	e7eb      	b.n	8022434 <_malloc_r+0xa8>
 802245c:	4623      	mov	r3, r4
 802245e:	6864      	ldr	r4, [r4, #4]
 8022460:	e7ae      	b.n	80223c0 <_malloc_r+0x34>
 8022462:	463c      	mov	r4, r7
 8022464:	687f      	ldr	r7, [r7, #4]
 8022466:	e7b6      	b.n	80223d6 <_malloc_r+0x4a>
 8022468:	461a      	mov	r2, r3
 802246a:	685b      	ldr	r3, [r3, #4]
 802246c:	42a3      	cmp	r3, r4
 802246e:	d1fb      	bne.n	8022468 <_malloc_r+0xdc>
 8022470:	2300      	movs	r3, #0
 8022472:	6053      	str	r3, [r2, #4]
 8022474:	e7de      	b.n	8022434 <_malloc_r+0xa8>
 8022476:	230c      	movs	r3, #12
 8022478:	6033      	str	r3, [r6, #0]
 802247a:	4630      	mov	r0, r6
 802247c:	f000 f80c 	bl	8022498 <__malloc_unlock>
 8022480:	e794      	b.n	80223ac <_malloc_r+0x20>
 8022482:	6005      	str	r5, [r0, #0]
 8022484:	e7d6      	b.n	8022434 <_malloc_r+0xa8>
 8022486:	bf00      	nop
 8022488:	24025cac 	.word	0x24025cac

0802248c <__malloc_lock>:
 802248c:	4801      	ldr	r0, [pc, #4]	@ (8022494 <__malloc_lock+0x8>)
 802248e:	f000 baa2 	b.w	80229d6 <__retarget_lock_acquire_recursive>
 8022492:	bf00      	nop
 8022494:	24025df0 	.word	0x24025df0

08022498 <__malloc_unlock>:
 8022498:	4801      	ldr	r0, [pc, #4]	@ (80224a0 <__malloc_unlock+0x8>)
 802249a:	f000 ba9d 	b.w	80229d8 <__retarget_lock_release_recursive>
 802249e:	bf00      	nop
 80224a0:	24025df0 	.word	0x24025df0

080224a4 <__cxa_atexit>:
 80224a4:	b510      	push	{r4, lr}
 80224a6:	4604      	mov	r4, r0
 80224a8:	4804      	ldr	r0, [pc, #16]	@ (80224bc <__cxa_atexit+0x18>)
 80224aa:	4613      	mov	r3, r2
 80224ac:	b120      	cbz	r0, 80224b8 <__cxa_atexit+0x14>
 80224ae:	460a      	mov	r2, r1
 80224b0:	2002      	movs	r0, #2
 80224b2:	4621      	mov	r1, r4
 80224b4:	f000 faa0 	bl	80229f8 <__register_exitproc>
 80224b8:	bd10      	pop	{r4, pc}
 80224ba:	bf00      	nop
 80224bc:	080229f9 	.word	0x080229f9

080224c0 <std>:
 80224c0:	2300      	movs	r3, #0
 80224c2:	b510      	push	{r4, lr}
 80224c4:	4604      	mov	r4, r0
 80224c6:	e9c0 3300 	strd	r3, r3, [r0]
 80224ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80224ce:	6083      	str	r3, [r0, #8]
 80224d0:	8181      	strh	r1, [r0, #12]
 80224d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80224d4:	81c2      	strh	r2, [r0, #14]
 80224d6:	6183      	str	r3, [r0, #24]
 80224d8:	4619      	mov	r1, r3
 80224da:	2208      	movs	r2, #8
 80224dc:	305c      	adds	r0, #92	@ 0x5c
 80224de:	f000 f99b 	bl	8022818 <memset>
 80224e2:	4b0d      	ldr	r3, [pc, #52]	@ (8022518 <std+0x58>)
 80224e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80224e6:	4b0d      	ldr	r3, [pc, #52]	@ (802251c <std+0x5c>)
 80224e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80224ea:	4b0d      	ldr	r3, [pc, #52]	@ (8022520 <std+0x60>)
 80224ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80224ee:	4b0d      	ldr	r3, [pc, #52]	@ (8022524 <std+0x64>)
 80224f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80224f2:	4b0d      	ldr	r3, [pc, #52]	@ (8022528 <std+0x68>)
 80224f4:	6224      	str	r4, [r4, #32]
 80224f6:	429c      	cmp	r4, r3
 80224f8:	d006      	beq.n	8022508 <std+0x48>
 80224fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80224fe:	4294      	cmp	r4, r2
 8022500:	d002      	beq.n	8022508 <std+0x48>
 8022502:	33d0      	adds	r3, #208	@ 0xd0
 8022504:	429c      	cmp	r4, r3
 8022506:	d105      	bne.n	8022514 <std+0x54>
 8022508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022510:	f000 ba60 	b.w	80229d4 <__retarget_lock_init_recursive>
 8022514:	bd10      	pop	{r4, pc}
 8022516:	bf00      	nop
 8022518:	08022669 	.word	0x08022669
 802251c:	0802268b 	.word	0x0802268b
 8022520:	080226c3 	.word	0x080226c3
 8022524:	080226e7 	.word	0x080226e7
 8022528:	24025cb0 	.word	0x24025cb0

0802252c <stdio_exit_handler>:
 802252c:	4a02      	ldr	r2, [pc, #8]	@ (8022538 <stdio_exit_handler+0xc>)
 802252e:	4903      	ldr	r1, [pc, #12]	@ (802253c <stdio_exit_handler+0x10>)
 8022530:	4803      	ldr	r0, [pc, #12]	@ (8022540 <stdio_exit_handler+0x14>)
 8022532:	f000 b87b 	b.w	802262c <_fwalk_sglue>
 8022536:	bf00      	nop
 8022538:	240000dc 	.word	0x240000dc
 802253c:	080231e9 	.word	0x080231e9
 8022540:	240000ec 	.word	0x240000ec

08022544 <cleanup_stdio>:
 8022544:	6841      	ldr	r1, [r0, #4]
 8022546:	4b0c      	ldr	r3, [pc, #48]	@ (8022578 <cleanup_stdio+0x34>)
 8022548:	4299      	cmp	r1, r3
 802254a:	b510      	push	{r4, lr}
 802254c:	4604      	mov	r4, r0
 802254e:	d001      	beq.n	8022554 <cleanup_stdio+0x10>
 8022550:	f000 fe4a 	bl	80231e8 <_fflush_r>
 8022554:	68a1      	ldr	r1, [r4, #8]
 8022556:	4b09      	ldr	r3, [pc, #36]	@ (802257c <cleanup_stdio+0x38>)
 8022558:	4299      	cmp	r1, r3
 802255a:	d002      	beq.n	8022562 <cleanup_stdio+0x1e>
 802255c:	4620      	mov	r0, r4
 802255e:	f000 fe43 	bl	80231e8 <_fflush_r>
 8022562:	68e1      	ldr	r1, [r4, #12]
 8022564:	4b06      	ldr	r3, [pc, #24]	@ (8022580 <cleanup_stdio+0x3c>)
 8022566:	4299      	cmp	r1, r3
 8022568:	d004      	beq.n	8022574 <cleanup_stdio+0x30>
 802256a:	4620      	mov	r0, r4
 802256c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022570:	f000 be3a 	b.w	80231e8 <_fflush_r>
 8022574:	bd10      	pop	{r4, pc}
 8022576:	bf00      	nop
 8022578:	24025cb0 	.word	0x24025cb0
 802257c:	24025d18 	.word	0x24025d18
 8022580:	24025d80 	.word	0x24025d80

08022584 <global_stdio_init.part.0>:
 8022584:	b510      	push	{r4, lr}
 8022586:	4b0b      	ldr	r3, [pc, #44]	@ (80225b4 <global_stdio_init.part.0+0x30>)
 8022588:	4c0b      	ldr	r4, [pc, #44]	@ (80225b8 <global_stdio_init.part.0+0x34>)
 802258a:	4a0c      	ldr	r2, [pc, #48]	@ (80225bc <global_stdio_init.part.0+0x38>)
 802258c:	601a      	str	r2, [r3, #0]
 802258e:	4620      	mov	r0, r4
 8022590:	2200      	movs	r2, #0
 8022592:	2104      	movs	r1, #4
 8022594:	f7ff ff94 	bl	80224c0 <std>
 8022598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802259c:	2201      	movs	r2, #1
 802259e:	2109      	movs	r1, #9
 80225a0:	f7ff ff8e 	bl	80224c0 <std>
 80225a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80225a8:	2202      	movs	r2, #2
 80225aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225ae:	2112      	movs	r1, #18
 80225b0:	f7ff bf86 	b.w	80224c0 <std>
 80225b4:	24025de8 	.word	0x24025de8
 80225b8:	24025cb0 	.word	0x24025cb0
 80225bc:	0802252d 	.word	0x0802252d

080225c0 <__sfp_lock_acquire>:
 80225c0:	4801      	ldr	r0, [pc, #4]	@ (80225c8 <__sfp_lock_acquire+0x8>)
 80225c2:	f000 ba08 	b.w	80229d6 <__retarget_lock_acquire_recursive>
 80225c6:	bf00      	nop
 80225c8:	24025df2 	.word	0x24025df2

080225cc <__sfp_lock_release>:
 80225cc:	4801      	ldr	r0, [pc, #4]	@ (80225d4 <__sfp_lock_release+0x8>)
 80225ce:	f000 ba03 	b.w	80229d8 <__retarget_lock_release_recursive>
 80225d2:	bf00      	nop
 80225d4:	24025df2 	.word	0x24025df2

080225d8 <__sinit>:
 80225d8:	b510      	push	{r4, lr}
 80225da:	4604      	mov	r4, r0
 80225dc:	f7ff fff0 	bl	80225c0 <__sfp_lock_acquire>
 80225e0:	6a23      	ldr	r3, [r4, #32]
 80225e2:	b11b      	cbz	r3, 80225ec <__sinit+0x14>
 80225e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225e8:	f7ff bff0 	b.w	80225cc <__sfp_lock_release>
 80225ec:	4b04      	ldr	r3, [pc, #16]	@ (8022600 <__sinit+0x28>)
 80225ee:	6223      	str	r3, [r4, #32]
 80225f0:	4b04      	ldr	r3, [pc, #16]	@ (8022604 <__sinit+0x2c>)
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d1f5      	bne.n	80225e4 <__sinit+0xc>
 80225f8:	f7ff ffc4 	bl	8022584 <global_stdio_init.part.0>
 80225fc:	e7f2      	b.n	80225e4 <__sinit+0xc>
 80225fe:	bf00      	nop
 8022600:	08022545 	.word	0x08022545
 8022604:	24025de8 	.word	0x24025de8

08022608 <fiprintf>:
 8022608:	b40e      	push	{r1, r2, r3}
 802260a:	b503      	push	{r0, r1, lr}
 802260c:	4601      	mov	r1, r0
 802260e:	ab03      	add	r3, sp, #12
 8022610:	4805      	ldr	r0, [pc, #20]	@ (8022628 <fiprintf+0x20>)
 8022612:	f853 2b04 	ldr.w	r2, [r3], #4
 8022616:	6800      	ldr	r0, [r0, #0]
 8022618:	9301      	str	r3, [sp, #4]
 802261a:	f000 fabd 	bl	8022b98 <_vfiprintf_r>
 802261e:	b002      	add	sp, #8
 8022620:	f85d eb04 	ldr.w	lr, [sp], #4
 8022624:	b003      	add	sp, #12
 8022626:	4770      	bx	lr
 8022628:	240000e8 	.word	0x240000e8

0802262c <_fwalk_sglue>:
 802262c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022630:	4607      	mov	r7, r0
 8022632:	4688      	mov	r8, r1
 8022634:	4614      	mov	r4, r2
 8022636:	2600      	movs	r6, #0
 8022638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802263c:	f1b9 0901 	subs.w	r9, r9, #1
 8022640:	d505      	bpl.n	802264e <_fwalk_sglue+0x22>
 8022642:	6824      	ldr	r4, [r4, #0]
 8022644:	2c00      	cmp	r4, #0
 8022646:	d1f7      	bne.n	8022638 <_fwalk_sglue+0xc>
 8022648:	4630      	mov	r0, r6
 802264a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802264e:	89ab      	ldrh	r3, [r5, #12]
 8022650:	2b01      	cmp	r3, #1
 8022652:	d907      	bls.n	8022664 <_fwalk_sglue+0x38>
 8022654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022658:	3301      	adds	r3, #1
 802265a:	d003      	beq.n	8022664 <_fwalk_sglue+0x38>
 802265c:	4629      	mov	r1, r5
 802265e:	4638      	mov	r0, r7
 8022660:	47c0      	blx	r8
 8022662:	4306      	orrs	r6, r0
 8022664:	3568      	adds	r5, #104	@ 0x68
 8022666:	e7e9      	b.n	802263c <_fwalk_sglue+0x10>

08022668 <__sread>:
 8022668:	b510      	push	{r4, lr}
 802266a:	460c      	mov	r4, r1
 802266c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022670:	f000 f93e 	bl	80228f0 <_read_r>
 8022674:	2800      	cmp	r0, #0
 8022676:	bfab      	itete	ge
 8022678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802267a:	89a3      	ldrhlt	r3, [r4, #12]
 802267c:	181b      	addge	r3, r3, r0
 802267e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022682:	bfac      	ite	ge
 8022684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022686:	81a3      	strhlt	r3, [r4, #12]
 8022688:	bd10      	pop	{r4, pc}

0802268a <__swrite>:
 802268a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802268e:	461f      	mov	r7, r3
 8022690:	898b      	ldrh	r3, [r1, #12]
 8022692:	05db      	lsls	r3, r3, #23
 8022694:	4605      	mov	r5, r0
 8022696:	460c      	mov	r4, r1
 8022698:	4616      	mov	r6, r2
 802269a:	d505      	bpl.n	80226a8 <__swrite+0x1e>
 802269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226a0:	2302      	movs	r3, #2
 80226a2:	2200      	movs	r2, #0
 80226a4:	f000 f912 	bl	80228cc <_lseek_r>
 80226a8:	89a3      	ldrh	r3, [r4, #12]
 80226aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80226ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80226b2:	81a3      	strh	r3, [r4, #12]
 80226b4:	4632      	mov	r2, r6
 80226b6:	463b      	mov	r3, r7
 80226b8:	4628      	mov	r0, r5
 80226ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80226be:	f000 b94d 	b.w	802295c <_write_r>

080226c2 <__sseek>:
 80226c2:	b510      	push	{r4, lr}
 80226c4:	460c      	mov	r4, r1
 80226c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226ca:	f000 f8ff 	bl	80228cc <_lseek_r>
 80226ce:	1c43      	adds	r3, r0, #1
 80226d0:	89a3      	ldrh	r3, [r4, #12]
 80226d2:	bf15      	itete	ne
 80226d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80226d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80226da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80226de:	81a3      	strheq	r3, [r4, #12]
 80226e0:	bf18      	it	ne
 80226e2:	81a3      	strhne	r3, [r4, #12]
 80226e4:	bd10      	pop	{r4, pc}

080226e6 <__sclose>:
 80226e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226ea:	f000 b8df 	b.w	80228ac <_close_r>

080226ee <__swbuf_r>:
 80226ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226f0:	460e      	mov	r6, r1
 80226f2:	4614      	mov	r4, r2
 80226f4:	4605      	mov	r5, r0
 80226f6:	b118      	cbz	r0, 8022700 <__swbuf_r+0x12>
 80226f8:	6a03      	ldr	r3, [r0, #32]
 80226fa:	b90b      	cbnz	r3, 8022700 <__swbuf_r+0x12>
 80226fc:	f7ff ff6c 	bl	80225d8 <__sinit>
 8022700:	69a3      	ldr	r3, [r4, #24]
 8022702:	60a3      	str	r3, [r4, #8]
 8022704:	89a3      	ldrh	r3, [r4, #12]
 8022706:	071a      	lsls	r2, r3, #28
 8022708:	d501      	bpl.n	802270e <__swbuf_r+0x20>
 802270a:	6923      	ldr	r3, [r4, #16]
 802270c:	b943      	cbnz	r3, 8022720 <__swbuf_r+0x32>
 802270e:	4621      	mov	r1, r4
 8022710:	4628      	mov	r0, r5
 8022712:	f000 f82b 	bl	802276c <__swsetup_r>
 8022716:	b118      	cbz	r0, 8022720 <__swbuf_r+0x32>
 8022718:	f04f 37ff 	mov.w	r7, #4294967295
 802271c:	4638      	mov	r0, r7
 802271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022720:	6823      	ldr	r3, [r4, #0]
 8022722:	6922      	ldr	r2, [r4, #16]
 8022724:	1a98      	subs	r0, r3, r2
 8022726:	6963      	ldr	r3, [r4, #20]
 8022728:	b2f6      	uxtb	r6, r6
 802272a:	4283      	cmp	r3, r0
 802272c:	4637      	mov	r7, r6
 802272e:	dc05      	bgt.n	802273c <__swbuf_r+0x4e>
 8022730:	4621      	mov	r1, r4
 8022732:	4628      	mov	r0, r5
 8022734:	f000 fd58 	bl	80231e8 <_fflush_r>
 8022738:	2800      	cmp	r0, #0
 802273a:	d1ed      	bne.n	8022718 <__swbuf_r+0x2a>
 802273c:	68a3      	ldr	r3, [r4, #8]
 802273e:	3b01      	subs	r3, #1
 8022740:	60a3      	str	r3, [r4, #8]
 8022742:	6823      	ldr	r3, [r4, #0]
 8022744:	1c5a      	adds	r2, r3, #1
 8022746:	6022      	str	r2, [r4, #0]
 8022748:	701e      	strb	r6, [r3, #0]
 802274a:	6962      	ldr	r2, [r4, #20]
 802274c:	1c43      	adds	r3, r0, #1
 802274e:	429a      	cmp	r2, r3
 8022750:	d004      	beq.n	802275c <__swbuf_r+0x6e>
 8022752:	89a3      	ldrh	r3, [r4, #12]
 8022754:	07db      	lsls	r3, r3, #31
 8022756:	d5e1      	bpl.n	802271c <__swbuf_r+0x2e>
 8022758:	2e0a      	cmp	r6, #10
 802275a:	d1df      	bne.n	802271c <__swbuf_r+0x2e>
 802275c:	4621      	mov	r1, r4
 802275e:	4628      	mov	r0, r5
 8022760:	f000 fd42 	bl	80231e8 <_fflush_r>
 8022764:	2800      	cmp	r0, #0
 8022766:	d0d9      	beq.n	802271c <__swbuf_r+0x2e>
 8022768:	e7d6      	b.n	8022718 <__swbuf_r+0x2a>
	...

0802276c <__swsetup_r>:
 802276c:	b538      	push	{r3, r4, r5, lr}
 802276e:	4b29      	ldr	r3, [pc, #164]	@ (8022814 <__swsetup_r+0xa8>)
 8022770:	4605      	mov	r5, r0
 8022772:	6818      	ldr	r0, [r3, #0]
 8022774:	460c      	mov	r4, r1
 8022776:	b118      	cbz	r0, 8022780 <__swsetup_r+0x14>
 8022778:	6a03      	ldr	r3, [r0, #32]
 802277a:	b90b      	cbnz	r3, 8022780 <__swsetup_r+0x14>
 802277c:	f7ff ff2c 	bl	80225d8 <__sinit>
 8022780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022784:	0719      	lsls	r1, r3, #28
 8022786:	d422      	bmi.n	80227ce <__swsetup_r+0x62>
 8022788:	06da      	lsls	r2, r3, #27
 802278a:	d407      	bmi.n	802279c <__swsetup_r+0x30>
 802278c:	2209      	movs	r2, #9
 802278e:	602a      	str	r2, [r5, #0]
 8022790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022794:	81a3      	strh	r3, [r4, #12]
 8022796:	f04f 30ff 	mov.w	r0, #4294967295
 802279a:	e033      	b.n	8022804 <__swsetup_r+0x98>
 802279c:	0758      	lsls	r0, r3, #29
 802279e:	d512      	bpl.n	80227c6 <__swsetup_r+0x5a>
 80227a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80227a2:	b141      	cbz	r1, 80227b6 <__swsetup_r+0x4a>
 80227a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80227a8:	4299      	cmp	r1, r3
 80227aa:	d002      	beq.n	80227b2 <__swsetup_r+0x46>
 80227ac:	4628      	mov	r0, r5
 80227ae:	f000 f97f 	bl	8022ab0 <_free_r>
 80227b2:	2300      	movs	r3, #0
 80227b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80227b6:	89a3      	ldrh	r3, [r4, #12]
 80227b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80227bc:	81a3      	strh	r3, [r4, #12]
 80227be:	2300      	movs	r3, #0
 80227c0:	6063      	str	r3, [r4, #4]
 80227c2:	6923      	ldr	r3, [r4, #16]
 80227c4:	6023      	str	r3, [r4, #0]
 80227c6:	89a3      	ldrh	r3, [r4, #12]
 80227c8:	f043 0308 	orr.w	r3, r3, #8
 80227cc:	81a3      	strh	r3, [r4, #12]
 80227ce:	6923      	ldr	r3, [r4, #16]
 80227d0:	b94b      	cbnz	r3, 80227e6 <__swsetup_r+0x7a>
 80227d2:	89a3      	ldrh	r3, [r4, #12]
 80227d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80227d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80227dc:	d003      	beq.n	80227e6 <__swsetup_r+0x7a>
 80227de:	4621      	mov	r1, r4
 80227e0:	4628      	mov	r0, r5
 80227e2:	f000 fd4f 	bl	8023284 <__smakebuf_r>
 80227e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227ea:	f013 0201 	ands.w	r2, r3, #1
 80227ee:	d00a      	beq.n	8022806 <__swsetup_r+0x9a>
 80227f0:	2200      	movs	r2, #0
 80227f2:	60a2      	str	r2, [r4, #8]
 80227f4:	6962      	ldr	r2, [r4, #20]
 80227f6:	4252      	negs	r2, r2
 80227f8:	61a2      	str	r2, [r4, #24]
 80227fa:	6922      	ldr	r2, [r4, #16]
 80227fc:	b942      	cbnz	r2, 8022810 <__swsetup_r+0xa4>
 80227fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022802:	d1c5      	bne.n	8022790 <__swsetup_r+0x24>
 8022804:	bd38      	pop	{r3, r4, r5, pc}
 8022806:	0799      	lsls	r1, r3, #30
 8022808:	bf58      	it	pl
 802280a:	6962      	ldrpl	r2, [r4, #20]
 802280c:	60a2      	str	r2, [r4, #8]
 802280e:	e7f4      	b.n	80227fa <__swsetup_r+0x8e>
 8022810:	2000      	movs	r0, #0
 8022812:	e7f7      	b.n	8022804 <__swsetup_r+0x98>
 8022814:	240000e8 	.word	0x240000e8

08022818 <memset>:
 8022818:	4402      	add	r2, r0
 802281a:	4603      	mov	r3, r0
 802281c:	4293      	cmp	r3, r2
 802281e:	d100      	bne.n	8022822 <memset+0xa>
 8022820:	4770      	bx	lr
 8022822:	f803 1b01 	strb.w	r1, [r3], #1
 8022826:	e7f9      	b.n	802281c <memset+0x4>

08022828 <strncmp>:
 8022828:	b510      	push	{r4, lr}
 802282a:	b16a      	cbz	r2, 8022848 <strncmp+0x20>
 802282c:	3901      	subs	r1, #1
 802282e:	1884      	adds	r4, r0, r2
 8022830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022838:	429a      	cmp	r2, r3
 802283a:	d103      	bne.n	8022844 <strncmp+0x1c>
 802283c:	42a0      	cmp	r0, r4
 802283e:	d001      	beq.n	8022844 <strncmp+0x1c>
 8022840:	2a00      	cmp	r2, #0
 8022842:	d1f5      	bne.n	8022830 <strncmp+0x8>
 8022844:	1ad0      	subs	r0, r2, r3
 8022846:	bd10      	pop	{r4, pc}
 8022848:	4610      	mov	r0, r2
 802284a:	e7fc      	b.n	8022846 <strncmp+0x1e>

0802284c <_raise_r>:
 802284c:	291f      	cmp	r1, #31
 802284e:	b538      	push	{r3, r4, r5, lr}
 8022850:	4605      	mov	r5, r0
 8022852:	460c      	mov	r4, r1
 8022854:	d904      	bls.n	8022860 <_raise_r+0x14>
 8022856:	2316      	movs	r3, #22
 8022858:	6003      	str	r3, [r0, #0]
 802285a:	f04f 30ff 	mov.w	r0, #4294967295
 802285e:	bd38      	pop	{r3, r4, r5, pc}
 8022860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022862:	b112      	cbz	r2, 802286a <_raise_r+0x1e>
 8022864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022868:	b94b      	cbnz	r3, 802287e <_raise_r+0x32>
 802286a:	4628      	mov	r0, r5
 802286c:	f000 f864 	bl	8022938 <_getpid_r>
 8022870:	4622      	mov	r2, r4
 8022872:	4601      	mov	r1, r0
 8022874:	4628      	mov	r0, r5
 8022876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802287a:	f000 b84b 	b.w	8022914 <_kill_r>
 802287e:	2b01      	cmp	r3, #1
 8022880:	d00a      	beq.n	8022898 <_raise_r+0x4c>
 8022882:	1c59      	adds	r1, r3, #1
 8022884:	d103      	bne.n	802288e <_raise_r+0x42>
 8022886:	2316      	movs	r3, #22
 8022888:	6003      	str	r3, [r0, #0]
 802288a:	2001      	movs	r0, #1
 802288c:	e7e7      	b.n	802285e <_raise_r+0x12>
 802288e:	2100      	movs	r1, #0
 8022890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022894:	4620      	mov	r0, r4
 8022896:	4798      	blx	r3
 8022898:	2000      	movs	r0, #0
 802289a:	e7e0      	b.n	802285e <_raise_r+0x12>

0802289c <raise>:
 802289c:	4b02      	ldr	r3, [pc, #8]	@ (80228a8 <raise+0xc>)
 802289e:	4601      	mov	r1, r0
 80228a0:	6818      	ldr	r0, [r3, #0]
 80228a2:	f7ff bfd3 	b.w	802284c <_raise_r>
 80228a6:	bf00      	nop
 80228a8:	240000e8 	.word	0x240000e8

080228ac <_close_r>:
 80228ac:	b538      	push	{r3, r4, r5, lr}
 80228ae:	4d06      	ldr	r5, [pc, #24]	@ (80228c8 <_close_r+0x1c>)
 80228b0:	2300      	movs	r3, #0
 80228b2:	4604      	mov	r4, r0
 80228b4:	4608      	mov	r0, r1
 80228b6:	602b      	str	r3, [r5, #0]
 80228b8:	f7de ff00 	bl	80016bc <_close>
 80228bc:	1c43      	adds	r3, r0, #1
 80228be:	d102      	bne.n	80228c6 <_close_r+0x1a>
 80228c0:	682b      	ldr	r3, [r5, #0]
 80228c2:	b103      	cbz	r3, 80228c6 <_close_r+0x1a>
 80228c4:	6023      	str	r3, [r4, #0]
 80228c6:	bd38      	pop	{r3, r4, r5, pc}
 80228c8:	24025dec 	.word	0x24025dec

080228cc <_lseek_r>:
 80228cc:	b538      	push	{r3, r4, r5, lr}
 80228ce:	4d07      	ldr	r5, [pc, #28]	@ (80228ec <_lseek_r+0x20>)
 80228d0:	4604      	mov	r4, r0
 80228d2:	4608      	mov	r0, r1
 80228d4:	4611      	mov	r1, r2
 80228d6:	2200      	movs	r2, #0
 80228d8:	602a      	str	r2, [r5, #0]
 80228da:	461a      	mov	r2, r3
 80228dc:	f7de fef8 	bl	80016d0 <_lseek>
 80228e0:	1c43      	adds	r3, r0, #1
 80228e2:	d102      	bne.n	80228ea <_lseek_r+0x1e>
 80228e4:	682b      	ldr	r3, [r5, #0]
 80228e6:	b103      	cbz	r3, 80228ea <_lseek_r+0x1e>
 80228e8:	6023      	str	r3, [r4, #0]
 80228ea:	bd38      	pop	{r3, r4, r5, pc}
 80228ec:	24025dec 	.word	0x24025dec

080228f0 <_read_r>:
 80228f0:	b538      	push	{r3, r4, r5, lr}
 80228f2:	4d07      	ldr	r5, [pc, #28]	@ (8022910 <_read_r+0x20>)
 80228f4:	4604      	mov	r4, r0
 80228f6:	4608      	mov	r0, r1
 80228f8:	4611      	mov	r1, r2
 80228fa:	2200      	movs	r2, #0
 80228fc:	602a      	str	r2, [r5, #0]
 80228fe:	461a      	mov	r2, r3
 8022900:	f7de fec0 	bl	8001684 <_read>
 8022904:	1c43      	adds	r3, r0, #1
 8022906:	d102      	bne.n	802290e <_read_r+0x1e>
 8022908:	682b      	ldr	r3, [r5, #0]
 802290a:	b103      	cbz	r3, 802290e <_read_r+0x1e>
 802290c:	6023      	str	r3, [r4, #0]
 802290e:	bd38      	pop	{r3, r4, r5, pc}
 8022910:	24025dec 	.word	0x24025dec

08022914 <_kill_r>:
 8022914:	b538      	push	{r3, r4, r5, lr}
 8022916:	4d07      	ldr	r5, [pc, #28]	@ (8022934 <_kill_r+0x20>)
 8022918:	2300      	movs	r3, #0
 802291a:	4604      	mov	r4, r0
 802291c:	4608      	mov	r0, r1
 802291e:	4611      	mov	r1, r2
 8022920:	602b      	str	r3, [r5, #0]
 8022922:	f7de fea1 	bl	8001668 <_kill>
 8022926:	1c43      	adds	r3, r0, #1
 8022928:	d102      	bne.n	8022930 <_kill_r+0x1c>
 802292a:	682b      	ldr	r3, [r5, #0]
 802292c:	b103      	cbz	r3, 8022930 <_kill_r+0x1c>
 802292e:	6023      	str	r3, [r4, #0]
 8022930:	bd38      	pop	{r3, r4, r5, pc}
 8022932:	bf00      	nop
 8022934:	24025dec 	.word	0x24025dec

08022938 <_getpid_r>:
 8022938:	f7de be94 	b.w	8001664 <_getpid>

0802293c <_sbrk_r>:
 802293c:	b538      	push	{r3, r4, r5, lr}
 802293e:	4d06      	ldr	r5, [pc, #24]	@ (8022958 <_sbrk_r+0x1c>)
 8022940:	2300      	movs	r3, #0
 8022942:	4604      	mov	r4, r0
 8022944:	4608      	mov	r0, r1
 8022946:	602b      	str	r3, [r5, #0]
 8022948:	f7de fec4 	bl	80016d4 <_sbrk>
 802294c:	1c43      	adds	r3, r0, #1
 802294e:	d102      	bne.n	8022956 <_sbrk_r+0x1a>
 8022950:	682b      	ldr	r3, [r5, #0]
 8022952:	b103      	cbz	r3, 8022956 <_sbrk_r+0x1a>
 8022954:	6023      	str	r3, [r4, #0]
 8022956:	bd38      	pop	{r3, r4, r5, pc}
 8022958:	24025dec 	.word	0x24025dec

0802295c <_write_r>:
 802295c:	b538      	push	{r3, r4, r5, lr}
 802295e:	4d07      	ldr	r5, [pc, #28]	@ (802297c <_write_r+0x20>)
 8022960:	4604      	mov	r4, r0
 8022962:	4608      	mov	r0, r1
 8022964:	4611      	mov	r1, r2
 8022966:	2200      	movs	r2, #0
 8022968:	602a      	str	r2, [r5, #0]
 802296a:	461a      	mov	r2, r3
 802296c:	f7de fe98 	bl	80016a0 <_write>
 8022970:	1c43      	adds	r3, r0, #1
 8022972:	d102      	bne.n	802297a <_write_r+0x1e>
 8022974:	682b      	ldr	r3, [r5, #0]
 8022976:	b103      	cbz	r3, 802297a <_write_r+0x1e>
 8022978:	6023      	str	r3, [r4, #0]
 802297a:	bd38      	pop	{r3, r4, r5, pc}
 802297c:	24025dec 	.word	0x24025dec

08022980 <__errno>:
 8022980:	4b01      	ldr	r3, [pc, #4]	@ (8022988 <__errno+0x8>)
 8022982:	6818      	ldr	r0, [r3, #0]
 8022984:	4770      	bx	lr
 8022986:	bf00      	nop
 8022988:	240000e8 	.word	0x240000e8

0802298c <__libc_init_array>:
 802298c:	b570      	push	{r4, r5, r6, lr}
 802298e:	4d0d      	ldr	r5, [pc, #52]	@ (80229c4 <__libc_init_array+0x38>)
 8022990:	4c0d      	ldr	r4, [pc, #52]	@ (80229c8 <__libc_init_array+0x3c>)
 8022992:	1b64      	subs	r4, r4, r5
 8022994:	10a4      	asrs	r4, r4, #2
 8022996:	2600      	movs	r6, #0
 8022998:	42a6      	cmp	r6, r4
 802299a:	d109      	bne.n	80229b0 <__libc_init_array+0x24>
 802299c:	4d0b      	ldr	r5, [pc, #44]	@ (80229cc <__libc_init_array+0x40>)
 802299e:	4c0c      	ldr	r4, [pc, #48]	@ (80229d0 <__libc_init_array+0x44>)
 80229a0:	f000 fcce 	bl	8023340 <_init>
 80229a4:	1b64      	subs	r4, r4, r5
 80229a6:	10a4      	asrs	r4, r4, #2
 80229a8:	2600      	movs	r6, #0
 80229aa:	42a6      	cmp	r6, r4
 80229ac:	d105      	bne.n	80229ba <__libc_init_array+0x2e>
 80229ae:	bd70      	pop	{r4, r5, r6, pc}
 80229b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80229b4:	4798      	blx	r3
 80229b6:	3601      	adds	r6, #1
 80229b8:	e7ee      	b.n	8022998 <__libc_init_array+0xc>
 80229ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80229be:	4798      	blx	r3
 80229c0:	3601      	adds	r6, #1
 80229c2:	e7f2      	b.n	80229aa <__libc_init_array+0x1e>
 80229c4:	08027318 	.word	0x08027318
 80229c8:	08027318 	.word	0x08027318
 80229cc:	08027318 	.word	0x08027318
 80229d0:	08027334 	.word	0x08027334

080229d4 <__retarget_lock_init_recursive>:
 80229d4:	4770      	bx	lr

080229d6 <__retarget_lock_acquire_recursive>:
 80229d6:	4770      	bx	lr

080229d8 <__retarget_lock_release_recursive>:
 80229d8:	4770      	bx	lr

080229da <memcpy>:
 80229da:	440a      	add	r2, r1
 80229dc:	4291      	cmp	r1, r2
 80229de:	f100 33ff 	add.w	r3, r0, #4294967295
 80229e2:	d100      	bne.n	80229e6 <memcpy+0xc>
 80229e4:	4770      	bx	lr
 80229e6:	b510      	push	{r4, lr}
 80229e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80229ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80229f0:	4291      	cmp	r1, r2
 80229f2:	d1f9      	bne.n	80229e8 <memcpy+0xe>
 80229f4:	bd10      	pop	{r4, pc}
	...

080229f8 <__register_exitproc>:
 80229f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80229fc:	4d27      	ldr	r5, [pc, #156]	@ (8022a9c <__register_exitproc+0xa4>)
 80229fe:	4607      	mov	r7, r0
 8022a00:	6828      	ldr	r0, [r5, #0]
 8022a02:	4691      	mov	r9, r2
 8022a04:	460e      	mov	r6, r1
 8022a06:	4698      	mov	r8, r3
 8022a08:	f7ff ffe5 	bl	80229d6 <__retarget_lock_acquire_recursive>
 8022a0c:	4a24      	ldr	r2, [pc, #144]	@ (8022aa0 <__register_exitproc+0xa8>)
 8022a0e:	6814      	ldr	r4, [r2, #0]
 8022a10:	b93c      	cbnz	r4, 8022a22 <__register_exitproc+0x2a>
 8022a12:	4b24      	ldr	r3, [pc, #144]	@ (8022aa4 <__register_exitproc+0xac>)
 8022a14:	6013      	str	r3, [r2, #0]
 8022a16:	4a24      	ldr	r2, [pc, #144]	@ (8022aa8 <__register_exitproc+0xb0>)
 8022a18:	b112      	cbz	r2, 8022a20 <__register_exitproc+0x28>
 8022a1a:	6812      	ldr	r2, [r2, #0]
 8022a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8022a20:	4c20      	ldr	r4, [pc, #128]	@ (8022aa4 <__register_exitproc+0xac>)
 8022a22:	6863      	ldr	r3, [r4, #4]
 8022a24:	2b1f      	cmp	r3, #31
 8022a26:	dd06      	ble.n	8022a36 <__register_exitproc+0x3e>
 8022a28:	6828      	ldr	r0, [r5, #0]
 8022a2a:	f7ff ffd5 	bl	80229d8 <__retarget_lock_release_recursive>
 8022a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8022a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a36:	b32f      	cbz	r7, 8022a84 <__register_exitproc+0x8c>
 8022a38:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8022a3c:	b968      	cbnz	r0, 8022a5a <__register_exitproc+0x62>
 8022a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8022aac <__register_exitproc+0xb4>)
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d0f1      	beq.n	8022a28 <__register_exitproc+0x30>
 8022a44:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8022a48:	f7ff fc6e 	bl	8022328 <malloc>
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	d0eb      	beq.n	8022a28 <__register_exitproc+0x30>
 8022a50:	2300      	movs	r3, #0
 8022a52:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8022a56:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8022a5a:	6863      	ldr	r3, [r4, #4]
 8022a5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022a60:	2201      	movs	r2, #1
 8022a62:	409a      	lsls	r2, r3
 8022a64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022a68:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8022a6c:	4313      	orrs	r3, r2
 8022a6e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8022a72:	2f02      	cmp	r7, #2
 8022a74:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8022a78:	bf02      	ittt	eq
 8022a7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8022a7e:	4313      	orreq	r3, r2
 8022a80:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8022a84:	6863      	ldr	r3, [r4, #4]
 8022a86:	6828      	ldr	r0, [r5, #0]
 8022a88:	1c5a      	adds	r2, r3, #1
 8022a8a:	3302      	adds	r3, #2
 8022a8c:	6062      	str	r2, [r4, #4]
 8022a8e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8022a92:	f7ff ffa1 	bl	80229d8 <__retarget_lock_release_recursive>
 8022a96:	2000      	movs	r0, #0
 8022a98:	e7cb      	b.n	8022a32 <__register_exitproc+0x3a>
 8022a9a:	bf00      	nop
 8022a9c:	24000138 	.word	0x24000138
 8022aa0:	24025e80 	.word	0x24025e80
 8022aa4:	24025df4 	.word	0x24025df4
 8022aa8:	08026ae0 	.word	0x08026ae0
 8022aac:	08022329 	.word	0x08022329

08022ab0 <_free_r>:
 8022ab0:	b538      	push	{r3, r4, r5, lr}
 8022ab2:	4605      	mov	r5, r0
 8022ab4:	2900      	cmp	r1, #0
 8022ab6:	d041      	beq.n	8022b3c <_free_r+0x8c>
 8022ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022abc:	1f0c      	subs	r4, r1, #4
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	bfb8      	it	lt
 8022ac2:	18e4      	addlt	r4, r4, r3
 8022ac4:	f7ff fce2 	bl	802248c <__malloc_lock>
 8022ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8022b40 <_free_r+0x90>)
 8022aca:	6813      	ldr	r3, [r2, #0]
 8022acc:	b933      	cbnz	r3, 8022adc <_free_r+0x2c>
 8022ace:	6063      	str	r3, [r4, #4]
 8022ad0:	6014      	str	r4, [r2, #0]
 8022ad2:	4628      	mov	r0, r5
 8022ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ad8:	f7ff bcde 	b.w	8022498 <__malloc_unlock>
 8022adc:	42a3      	cmp	r3, r4
 8022ade:	d908      	bls.n	8022af2 <_free_r+0x42>
 8022ae0:	6820      	ldr	r0, [r4, #0]
 8022ae2:	1821      	adds	r1, r4, r0
 8022ae4:	428b      	cmp	r3, r1
 8022ae6:	bf01      	itttt	eq
 8022ae8:	6819      	ldreq	r1, [r3, #0]
 8022aea:	685b      	ldreq	r3, [r3, #4]
 8022aec:	1809      	addeq	r1, r1, r0
 8022aee:	6021      	streq	r1, [r4, #0]
 8022af0:	e7ed      	b.n	8022ace <_free_r+0x1e>
 8022af2:	461a      	mov	r2, r3
 8022af4:	685b      	ldr	r3, [r3, #4]
 8022af6:	b10b      	cbz	r3, 8022afc <_free_r+0x4c>
 8022af8:	42a3      	cmp	r3, r4
 8022afa:	d9fa      	bls.n	8022af2 <_free_r+0x42>
 8022afc:	6811      	ldr	r1, [r2, #0]
 8022afe:	1850      	adds	r0, r2, r1
 8022b00:	42a0      	cmp	r0, r4
 8022b02:	d10b      	bne.n	8022b1c <_free_r+0x6c>
 8022b04:	6820      	ldr	r0, [r4, #0]
 8022b06:	4401      	add	r1, r0
 8022b08:	1850      	adds	r0, r2, r1
 8022b0a:	4283      	cmp	r3, r0
 8022b0c:	6011      	str	r1, [r2, #0]
 8022b0e:	d1e0      	bne.n	8022ad2 <_free_r+0x22>
 8022b10:	6818      	ldr	r0, [r3, #0]
 8022b12:	685b      	ldr	r3, [r3, #4]
 8022b14:	6053      	str	r3, [r2, #4]
 8022b16:	4408      	add	r0, r1
 8022b18:	6010      	str	r0, [r2, #0]
 8022b1a:	e7da      	b.n	8022ad2 <_free_r+0x22>
 8022b1c:	d902      	bls.n	8022b24 <_free_r+0x74>
 8022b1e:	230c      	movs	r3, #12
 8022b20:	602b      	str	r3, [r5, #0]
 8022b22:	e7d6      	b.n	8022ad2 <_free_r+0x22>
 8022b24:	6820      	ldr	r0, [r4, #0]
 8022b26:	1821      	adds	r1, r4, r0
 8022b28:	428b      	cmp	r3, r1
 8022b2a:	bf04      	itt	eq
 8022b2c:	6819      	ldreq	r1, [r3, #0]
 8022b2e:	685b      	ldreq	r3, [r3, #4]
 8022b30:	6063      	str	r3, [r4, #4]
 8022b32:	bf04      	itt	eq
 8022b34:	1809      	addeq	r1, r1, r0
 8022b36:	6021      	streq	r1, [r4, #0]
 8022b38:	6054      	str	r4, [r2, #4]
 8022b3a:	e7ca      	b.n	8022ad2 <_free_r+0x22>
 8022b3c:	bd38      	pop	{r3, r4, r5, pc}
 8022b3e:	bf00      	nop
 8022b40:	24025cac 	.word	0x24025cac

08022b44 <__sfputc_r>:
 8022b44:	6893      	ldr	r3, [r2, #8]
 8022b46:	3b01      	subs	r3, #1
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	b410      	push	{r4}
 8022b4c:	6093      	str	r3, [r2, #8]
 8022b4e:	da08      	bge.n	8022b62 <__sfputc_r+0x1e>
 8022b50:	6994      	ldr	r4, [r2, #24]
 8022b52:	42a3      	cmp	r3, r4
 8022b54:	db01      	blt.n	8022b5a <__sfputc_r+0x16>
 8022b56:	290a      	cmp	r1, #10
 8022b58:	d103      	bne.n	8022b62 <__sfputc_r+0x1e>
 8022b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b5e:	f7ff bdc6 	b.w	80226ee <__swbuf_r>
 8022b62:	6813      	ldr	r3, [r2, #0]
 8022b64:	1c58      	adds	r0, r3, #1
 8022b66:	6010      	str	r0, [r2, #0]
 8022b68:	7019      	strb	r1, [r3, #0]
 8022b6a:	4608      	mov	r0, r1
 8022b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b70:	4770      	bx	lr

08022b72 <__sfputs_r>:
 8022b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b74:	4606      	mov	r6, r0
 8022b76:	460f      	mov	r7, r1
 8022b78:	4614      	mov	r4, r2
 8022b7a:	18d5      	adds	r5, r2, r3
 8022b7c:	42ac      	cmp	r4, r5
 8022b7e:	d101      	bne.n	8022b84 <__sfputs_r+0x12>
 8022b80:	2000      	movs	r0, #0
 8022b82:	e007      	b.n	8022b94 <__sfputs_r+0x22>
 8022b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b88:	463a      	mov	r2, r7
 8022b8a:	4630      	mov	r0, r6
 8022b8c:	f7ff ffda 	bl	8022b44 <__sfputc_r>
 8022b90:	1c43      	adds	r3, r0, #1
 8022b92:	d1f3      	bne.n	8022b7c <__sfputs_r+0xa>
 8022b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b98 <_vfiprintf_r>:
 8022b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b9c:	460d      	mov	r5, r1
 8022b9e:	b09d      	sub	sp, #116	@ 0x74
 8022ba0:	4614      	mov	r4, r2
 8022ba2:	4698      	mov	r8, r3
 8022ba4:	4606      	mov	r6, r0
 8022ba6:	b118      	cbz	r0, 8022bb0 <_vfiprintf_r+0x18>
 8022ba8:	6a03      	ldr	r3, [r0, #32]
 8022baa:	b90b      	cbnz	r3, 8022bb0 <_vfiprintf_r+0x18>
 8022bac:	f7ff fd14 	bl	80225d8 <__sinit>
 8022bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022bb2:	07d9      	lsls	r1, r3, #31
 8022bb4:	d405      	bmi.n	8022bc2 <_vfiprintf_r+0x2a>
 8022bb6:	89ab      	ldrh	r3, [r5, #12]
 8022bb8:	059a      	lsls	r2, r3, #22
 8022bba:	d402      	bmi.n	8022bc2 <_vfiprintf_r+0x2a>
 8022bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022bbe:	f7ff ff0a 	bl	80229d6 <__retarget_lock_acquire_recursive>
 8022bc2:	89ab      	ldrh	r3, [r5, #12]
 8022bc4:	071b      	lsls	r3, r3, #28
 8022bc6:	d501      	bpl.n	8022bcc <_vfiprintf_r+0x34>
 8022bc8:	692b      	ldr	r3, [r5, #16]
 8022bca:	b99b      	cbnz	r3, 8022bf4 <_vfiprintf_r+0x5c>
 8022bcc:	4629      	mov	r1, r5
 8022bce:	4630      	mov	r0, r6
 8022bd0:	f7ff fdcc 	bl	802276c <__swsetup_r>
 8022bd4:	b170      	cbz	r0, 8022bf4 <_vfiprintf_r+0x5c>
 8022bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022bd8:	07dc      	lsls	r4, r3, #31
 8022bda:	d504      	bpl.n	8022be6 <_vfiprintf_r+0x4e>
 8022bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8022be0:	b01d      	add	sp, #116	@ 0x74
 8022be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022be6:	89ab      	ldrh	r3, [r5, #12]
 8022be8:	0598      	lsls	r0, r3, #22
 8022bea:	d4f7      	bmi.n	8022bdc <_vfiprintf_r+0x44>
 8022bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022bee:	f7ff fef3 	bl	80229d8 <__retarget_lock_release_recursive>
 8022bf2:	e7f3      	b.n	8022bdc <_vfiprintf_r+0x44>
 8022bf4:	2300      	movs	r3, #0
 8022bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bf8:	2320      	movs	r3, #32
 8022bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8022c02:	2330      	movs	r3, #48	@ 0x30
 8022c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022db4 <_vfiprintf_r+0x21c>
 8022c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022c0c:	f04f 0901 	mov.w	r9, #1
 8022c10:	4623      	mov	r3, r4
 8022c12:	469a      	mov	sl, r3
 8022c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c18:	b10a      	cbz	r2, 8022c1e <_vfiprintf_r+0x86>
 8022c1a:	2a25      	cmp	r2, #37	@ 0x25
 8022c1c:	d1f9      	bne.n	8022c12 <_vfiprintf_r+0x7a>
 8022c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8022c22:	d00b      	beq.n	8022c3c <_vfiprintf_r+0xa4>
 8022c24:	465b      	mov	r3, fp
 8022c26:	4622      	mov	r2, r4
 8022c28:	4629      	mov	r1, r5
 8022c2a:	4630      	mov	r0, r6
 8022c2c:	f7ff ffa1 	bl	8022b72 <__sfputs_r>
 8022c30:	3001      	adds	r0, #1
 8022c32:	f000 80a7 	beq.w	8022d84 <_vfiprintf_r+0x1ec>
 8022c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022c38:	445a      	add	r2, fp
 8022c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8022c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	f000 809f 	beq.w	8022d84 <_vfiprintf_r+0x1ec>
 8022c46:	2300      	movs	r3, #0
 8022c48:	f04f 32ff 	mov.w	r2, #4294967295
 8022c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c50:	f10a 0a01 	add.w	sl, sl, #1
 8022c54:	9304      	str	r3, [sp, #16]
 8022c56:	9307      	str	r3, [sp, #28]
 8022c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8022c5e:	4654      	mov	r4, sl
 8022c60:	2205      	movs	r2, #5
 8022c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c66:	4853      	ldr	r0, [pc, #332]	@ (8022db4 <_vfiprintf_r+0x21c>)
 8022c68:	f7dd fb3a 	bl	80002e0 <memchr>
 8022c6c:	9a04      	ldr	r2, [sp, #16]
 8022c6e:	b9d8      	cbnz	r0, 8022ca8 <_vfiprintf_r+0x110>
 8022c70:	06d1      	lsls	r1, r2, #27
 8022c72:	bf44      	itt	mi
 8022c74:	2320      	movmi	r3, #32
 8022c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022c7a:	0713      	lsls	r3, r2, #28
 8022c7c:	bf44      	itt	mi
 8022c7e:	232b      	movmi	r3, #43	@ 0x2b
 8022c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022c84:	f89a 3000 	ldrb.w	r3, [sl]
 8022c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8022c8a:	d015      	beq.n	8022cb8 <_vfiprintf_r+0x120>
 8022c8c:	9a07      	ldr	r2, [sp, #28]
 8022c8e:	4654      	mov	r4, sl
 8022c90:	2000      	movs	r0, #0
 8022c92:	f04f 0c0a 	mov.w	ip, #10
 8022c96:	4621      	mov	r1, r4
 8022c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c9c:	3b30      	subs	r3, #48	@ 0x30
 8022c9e:	2b09      	cmp	r3, #9
 8022ca0:	d94b      	bls.n	8022d3a <_vfiprintf_r+0x1a2>
 8022ca2:	b1b0      	cbz	r0, 8022cd2 <_vfiprintf_r+0x13a>
 8022ca4:	9207      	str	r2, [sp, #28]
 8022ca6:	e014      	b.n	8022cd2 <_vfiprintf_r+0x13a>
 8022ca8:	eba0 0308 	sub.w	r3, r0, r8
 8022cac:	fa09 f303 	lsl.w	r3, r9, r3
 8022cb0:	4313      	orrs	r3, r2
 8022cb2:	9304      	str	r3, [sp, #16]
 8022cb4:	46a2      	mov	sl, r4
 8022cb6:	e7d2      	b.n	8022c5e <_vfiprintf_r+0xc6>
 8022cb8:	9b03      	ldr	r3, [sp, #12]
 8022cba:	1d19      	adds	r1, r3, #4
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	9103      	str	r1, [sp, #12]
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	bfbb      	ittet	lt
 8022cc4:	425b      	neglt	r3, r3
 8022cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8022cca:	9307      	strge	r3, [sp, #28]
 8022ccc:	9307      	strlt	r3, [sp, #28]
 8022cce:	bfb8      	it	lt
 8022cd0:	9204      	strlt	r2, [sp, #16]
 8022cd2:	7823      	ldrb	r3, [r4, #0]
 8022cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8022cd6:	d10a      	bne.n	8022cee <_vfiprintf_r+0x156>
 8022cd8:	7863      	ldrb	r3, [r4, #1]
 8022cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8022cdc:	d132      	bne.n	8022d44 <_vfiprintf_r+0x1ac>
 8022cde:	9b03      	ldr	r3, [sp, #12]
 8022ce0:	1d1a      	adds	r2, r3, #4
 8022ce2:	681b      	ldr	r3, [r3, #0]
 8022ce4:	9203      	str	r2, [sp, #12]
 8022ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022cea:	3402      	adds	r4, #2
 8022cec:	9305      	str	r3, [sp, #20]
 8022cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022dc4 <_vfiprintf_r+0x22c>
 8022cf2:	7821      	ldrb	r1, [r4, #0]
 8022cf4:	2203      	movs	r2, #3
 8022cf6:	4650      	mov	r0, sl
 8022cf8:	f7dd faf2 	bl	80002e0 <memchr>
 8022cfc:	b138      	cbz	r0, 8022d0e <_vfiprintf_r+0x176>
 8022cfe:	9b04      	ldr	r3, [sp, #16]
 8022d00:	eba0 000a 	sub.w	r0, r0, sl
 8022d04:	2240      	movs	r2, #64	@ 0x40
 8022d06:	4082      	lsls	r2, r0
 8022d08:	4313      	orrs	r3, r2
 8022d0a:	3401      	adds	r4, #1
 8022d0c:	9304      	str	r3, [sp, #16]
 8022d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d12:	4829      	ldr	r0, [pc, #164]	@ (8022db8 <_vfiprintf_r+0x220>)
 8022d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022d18:	2206      	movs	r2, #6
 8022d1a:	f7dd fae1 	bl	80002e0 <memchr>
 8022d1e:	2800      	cmp	r0, #0
 8022d20:	d03f      	beq.n	8022da2 <_vfiprintf_r+0x20a>
 8022d22:	4b26      	ldr	r3, [pc, #152]	@ (8022dbc <_vfiprintf_r+0x224>)
 8022d24:	bb1b      	cbnz	r3, 8022d6e <_vfiprintf_r+0x1d6>
 8022d26:	9b03      	ldr	r3, [sp, #12]
 8022d28:	3307      	adds	r3, #7
 8022d2a:	f023 0307 	bic.w	r3, r3, #7
 8022d2e:	3308      	adds	r3, #8
 8022d30:	9303      	str	r3, [sp, #12]
 8022d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d34:	443b      	add	r3, r7
 8022d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d38:	e76a      	b.n	8022c10 <_vfiprintf_r+0x78>
 8022d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d3e:	460c      	mov	r4, r1
 8022d40:	2001      	movs	r0, #1
 8022d42:	e7a8      	b.n	8022c96 <_vfiprintf_r+0xfe>
 8022d44:	2300      	movs	r3, #0
 8022d46:	3401      	adds	r4, #1
 8022d48:	9305      	str	r3, [sp, #20]
 8022d4a:	4619      	mov	r1, r3
 8022d4c:	f04f 0c0a 	mov.w	ip, #10
 8022d50:	4620      	mov	r0, r4
 8022d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d56:	3a30      	subs	r2, #48	@ 0x30
 8022d58:	2a09      	cmp	r2, #9
 8022d5a:	d903      	bls.n	8022d64 <_vfiprintf_r+0x1cc>
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d0c6      	beq.n	8022cee <_vfiprintf_r+0x156>
 8022d60:	9105      	str	r1, [sp, #20]
 8022d62:	e7c4      	b.n	8022cee <_vfiprintf_r+0x156>
 8022d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d68:	4604      	mov	r4, r0
 8022d6a:	2301      	movs	r3, #1
 8022d6c:	e7f0      	b.n	8022d50 <_vfiprintf_r+0x1b8>
 8022d6e:	ab03      	add	r3, sp, #12
 8022d70:	9300      	str	r3, [sp, #0]
 8022d72:	462a      	mov	r2, r5
 8022d74:	4b12      	ldr	r3, [pc, #72]	@ (8022dc0 <_vfiprintf_r+0x228>)
 8022d76:	a904      	add	r1, sp, #16
 8022d78:	4630      	mov	r0, r6
 8022d7a:	f3af 8000 	nop.w
 8022d7e:	4607      	mov	r7, r0
 8022d80:	1c78      	adds	r0, r7, #1
 8022d82:	d1d6      	bne.n	8022d32 <_vfiprintf_r+0x19a>
 8022d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022d86:	07d9      	lsls	r1, r3, #31
 8022d88:	d405      	bmi.n	8022d96 <_vfiprintf_r+0x1fe>
 8022d8a:	89ab      	ldrh	r3, [r5, #12]
 8022d8c:	059a      	lsls	r2, r3, #22
 8022d8e:	d402      	bmi.n	8022d96 <_vfiprintf_r+0x1fe>
 8022d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022d92:	f7ff fe21 	bl	80229d8 <__retarget_lock_release_recursive>
 8022d96:	89ab      	ldrh	r3, [r5, #12]
 8022d98:	065b      	lsls	r3, r3, #25
 8022d9a:	f53f af1f 	bmi.w	8022bdc <_vfiprintf_r+0x44>
 8022d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022da0:	e71e      	b.n	8022be0 <_vfiprintf_r+0x48>
 8022da2:	ab03      	add	r3, sp, #12
 8022da4:	9300      	str	r3, [sp, #0]
 8022da6:	462a      	mov	r2, r5
 8022da8:	4b05      	ldr	r3, [pc, #20]	@ (8022dc0 <_vfiprintf_r+0x228>)
 8022daa:	a904      	add	r1, sp, #16
 8022dac:	4630      	mov	r0, r6
 8022dae:	f000 f879 	bl	8022ea4 <_printf_i>
 8022db2:	e7e4      	b.n	8022d7e <_vfiprintf_r+0x1e6>
 8022db4:	0802520c 	.word	0x0802520c
 8022db8:	08025216 	.word	0x08025216
 8022dbc:	00000000 	.word	0x00000000
 8022dc0:	08022b73 	.word	0x08022b73
 8022dc4:	08025212 	.word	0x08025212

08022dc8 <_printf_common>:
 8022dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dcc:	4616      	mov	r6, r2
 8022dce:	4698      	mov	r8, r3
 8022dd0:	688a      	ldr	r2, [r1, #8]
 8022dd2:	690b      	ldr	r3, [r1, #16]
 8022dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022dd8:	4293      	cmp	r3, r2
 8022dda:	bfb8      	it	lt
 8022ddc:	4613      	movlt	r3, r2
 8022dde:	6033      	str	r3, [r6, #0]
 8022de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022de4:	4607      	mov	r7, r0
 8022de6:	460c      	mov	r4, r1
 8022de8:	b10a      	cbz	r2, 8022dee <_printf_common+0x26>
 8022dea:	3301      	adds	r3, #1
 8022dec:	6033      	str	r3, [r6, #0]
 8022dee:	6823      	ldr	r3, [r4, #0]
 8022df0:	0699      	lsls	r1, r3, #26
 8022df2:	bf42      	ittt	mi
 8022df4:	6833      	ldrmi	r3, [r6, #0]
 8022df6:	3302      	addmi	r3, #2
 8022df8:	6033      	strmi	r3, [r6, #0]
 8022dfa:	6825      	ldr	r5, [r4, #0]
 8022dfc:	f015 0506 	ands.w	r5, r5, #6
 8022e00:	d106      	bne.n	8022e10 <_printf_common+0x48>
 8022e02:	f104 0a19 	add.w	sl, r4, #25
 8022e06:	68e3      	ldr	r3, [r4, #12]
 8022e08:	6832      	ldr	r2, [r6, #0]
 8022e0a:	1a9b      	subs	r3, r3, r2
 8022e0c:	42ab      	cmp	r3, r5
 8022e0e:	dc26      	bgt.n	8022e5e <_printf_common+0x96>
 8022e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022e14:	6822      	ldr	r2, [r4, #0]
 8022e16:	3b00      	subs	r3, #0
 8022e18:	bf18      	it	ne
 8022e1a:	2301      	movne	r3, #1
 8022e1c:	0692      	lsls	r2, r2, #26
 8022e1e:	d42b      	bmi.n	8022e78 <_printf_common+0xb0>
 8022e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022e24:	4641      	mov	r1, r8
 8022e26:	4638      	mov	r0, r7
 8022e28:	47c8      	blx	r9
 8022e2a:	3001      	adds	r0, #1
 8022e2c:	d01e      	beq.n	8022e6c <_printf_common+0xa4>
 8022e2e:	6823      	ldr	r3, [r4, #0]
 8022e30:	6922      	ldr	r2, [r4, #16]
 8022e32:	f003 0306 	and.w	r3, r3, #6
 8022e36:	2b04      	cmp	r3, #4
 8022e38:	bf02      	ittt	eq
 8022e3a:	68e5      	ldreq	r5, [r4, #12]
 8022e3c:	6833      	ldreq	r3, [r6, #0]
 8022e3e:	1aed      	subeq	r5, r5, r3
 8022e40:	68a3      	ldr	r3, [r4, #8]
 8022e42:	bf0c      	ite	eq
 8022e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022e48:	2500      	movne	r5, #0
 8022e4a:	4293      	cmp	r3, r2
 8022e4c:	bfc4      	itt	gt
 8022e4e:	1a9b      	subgt	r3, r3, r2
 8022e50:	18ed      	addgt	r5, r5, r3
 8022e52:	2600      	movs	r6, #0
 8022e54:	341a      	adds	r4, #26
 8022e56:	42b5      	cmp	r5, r6
 8022e58:	d11a      	bne.n	8022e90 <_printf_common+0xc8>
 8022e5a:	2000      	movs	r0, #0
 8022e5c:	e008      	b.n	8022e70 <_printf_common+0xa8>
 8022e5e:	2301      	movs	r3, #1
 8022e60:	4652      	mov	r2, sl
 8022e62:	4641      	mov	r1, r8
 8022e64:	4638      	mov	r0, r7
 8022e66:	47c8      	blx	r9
 8022e68:	3001      	adds	r0, #1
 8022e6a:	d103      	bne.n	8022e74 <_printf_common+0xac>
 8022e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8022e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e74:	3501      	adds	r5, #1
 8022e76:	e7c6      	b.n	8022e06 <_printf_common+0x3e>
 8022e78:	18e1      	adds	r1, r4, r3
 8022e7a:	1c5a      	adds	r2, r3, #1
 8022e7c:	2030      	movs	r0, #48	@ 0x30
 8022e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022e82:	4422      	add	r2, r4
 8022e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022e8c:	3302      	adds	r3, #2
 8022e8e:	e7c7      	b.n	8022e20 <_printf_common+0x58>
 8022e90:	2301      	movs	r3, #1
 8022e92:	4622      	mov	r2, r4
 8022e94:	4641      	mov	r1, r8
 8022e96:	4638      	mov	r0, r7
 8022e98:	47c8      	blx	r9
 8022e9a:	3001      	adds	r0, #1
 8022e9c:	d0e6      	beq.n	8022e6c <_printf_common+0xa4>
 8022e9e:	3601      	adds	r6, #1
 8022ea0:	e7d9      	b.n	8022e56 <_printf_common+0x8e>
	...

08022ea4 <_printf_i>:
 8022ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022ea8:	7e0f      	ldrb	r7, [r1, #24]
 8022eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022eac:	2f78      	cmp	r7, #120	@ 0x78
 8022eae:	4691      	mov	r9, r2
 8022eb0:	4680      	mov	r8, r0
 8022eb2:	460c      	mov	r4, r1
 8022eb4:	469a      	mov	sl, r3
 8022eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022eba:	d807      	bhi.n	8022ecc <_printf_i+0x28>
 8022ebc:	2f62      	cmp	r7, #98	@ 0x62
 8022ebe:	d80a      	bhi.n	8022ed6 <_printf_i+0x32>
 8022ec0:	2f00      	cmp	r7, #0
 8022ec2:	f000 80d1 	beq.w	8023068 <_printf_i+0x1c4>
 8022ec6:	2f58      	cmp	r7, #88	@ 0x58
 8022ec8:	f000 80b8 	beq.w	802303c <_printf_i+0x198>
 8022ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022ed4:	e03a      	b.n	8022f4c <_printf_i+0xa8>
 8022ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022eda:	2b15      	cmp	r3, #21
 8022edc:	d8f6      	bhi.n	8022ecc <_printf_i+0x28>
 8022ede:	a101      	add	r1, pc, #4	@ (adr r1, 8022ee4 <_printf_i+0x40>)
 8022ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022ee4:	08022f3d 	.word	0x08022f3d
 8022ee8:	08022f51 	.word	0x08022f51
 8022eec:	08022ecd 	.word	0x08022ecd
 8022ef0:	08022ecd 	.word	0x08022ecd
 8022ef4:	08022ecd 	.word	0x08022ecd
 8022ef8:	08022ecd 	.word	0x08022ecd
 8022efc:	08022f51 	.word	0x08022f51
 8022f00:	08022ecd 	.word	0x08022ecd
 8022f04:	08022ecd 	.word	0x08022ecd
 8022f08:	08022ecd 	.word	0x08022ecd
 8022f0c:	08022ecd 	.word	0x08022ecd
 8022f10:	0802304f 	.word	0x0802304f
 8022f14:	08022f7b 	.word	0x08022f7b
 8022f18:	08023009 	.word	0x08023009
 8022f1c:	08022ecd 	.word	0x08022ecd
 8022f20:	08022ecd 	.word	0x08022ecd
 8022f24:	08023071 	.word	0x08023071
 8022f28:	08022ecd 	.word	0x08022ecd
 8022f2c:	08022f7b 	.word	0x08022f7b
 8022f30:	08022ecd 	.word	0x08022ecd
 8022f34:	08022ecd 	.word	0x08022ecd
 8022f38:	08023011 	.word	0x08023011
 8022f3c:	6833      	ldr	r3, [r6, #0]
 8022f3e:	1d1a      	adds	r2, r3, #4
 8022f40:	681b      	ldr	r3, [r3, #0]
 8022f42:	6032      	str	r2, [r6, #0]
 8022f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022f4c:	2301      	movs	r3, #1
 8022f4e:	e09c      	b.n	802308a <_printf_i+0x1e6>
 8022f50:	6833      	ldr	r3, [r6, #0]
 8022f52:	6820      	ldr	r0, [r4, #0]
 8022f54:	1d19      	adds	r1, r3, #4
 8022f56:	6031      	str	r1, [r6, #0]
 8022f58:	0606      	lsls	r6, r0, #24
 8022f5a:	d501      	bpl.n	8022f60 <_printf_i+0xbc>
 8022f5c:	681d      	ldr	r5, [r3, #0]
 8022f5e:	e003      	b.n	8022f68 <_printf_i+0xc4>
 8022f60:	0645      	lsls	r5, r0, #25
 8022f62:	d5fb      	bpl.n	8022f5c <_printf_i+0xb8>
 8022f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022f68:	2d00      	cmp	r5, #0
 8022f6a:	da03      	bge.n	8022f74 <_printf_i+0xd0>
 8022f6c:	232d      	movs	r3, #45	@ 0x2d
 8022f6e:	426d      	negs	r5, r5
 8022f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022f74:	4858      	ldr	r0, [pc, #352]	@ (80230d8 <_printf_i+0x234>)
 8022f76:	230a      	movs	r3, #10
 8022f78:	e011      	b.n	8022f9e <_printf_i+0xfa>
 8022f7a:	6821      	ldr	r1, [r4, #0]
 8022f7c:	6833      	ldr	r3, [r6, #0]
 8022f7e:	0608      	lsls	r0, r1, #24
 8022f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8022f84:	d402      	bmi.n	8022f8c <_printf_i+0xe8>
 8022f86:	0649      	lsls	r1, r1, #25
 8022f88:	bf48      	it	mi
 8022f8a:	b2ad      	uxthmi	r5, r5
 8022f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8022f8e:	4852      	ldr	r0, [pc, #328]	@ (80230d8 <_printf_i+0x234>)
 8022f90:	6033      	str	r3, [r6, #0]
 8022f92:	bf14      	ite	ne
 8022f94:	230a      	movne	r3, #10
 8022f96:	2308      	moveq	r3, #8
 8022f98:	2100      	movs	r1, #0
 8022f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022f9e:	6866      	ldr	r6, [r4, #4]
 8022fa0:	60a6      	str	r6, [r4, #8]
 8022fa2:	2e00      	cmp	r6, #0
 8022fa4:	db05      	blt.n	8022fb2 <_printf_i+0x10e>
 8022fa6:	6821      	ldr	r1, [r4, #0]
 8022fa8:	432e      	orrs	r6, r5
 8022faa:	f021 0104 	bic.w	r1, r1, #4
 8022fae:	6021      	str	r1, [r4, #0]
 8022fb0:	d04b      	beq.n	802304a <_printf_i+0x1a6>
 8022fb2:	4616      	mov	r6, r2
 8022fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8022fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8022fbc:	5dc7      	ldrb	r7, [r0, r7]
 8022fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022fc2:	462f      	mov	r7, r5
 8022fc4:	42bb      	cmp	r3, r7
 8022fc6:	460d      	mov	r5, r1
 8022fc8:	d9f4      	bls.n	8022fb4 <_printf_i+0x110>
 8022fca:	2b08      	cmp	r3, #8
 8022fcc:	d10b      	bne.n	8022fe6 <_printf_i+0x142>
 8022fce:	6823      	ldr	r3, [r4, #0]
 8022fd0:	07df      	lsls	r7, r3, #31
 8022fd2:	d508      	bpl.n	8022fe6 <_printf_i+0x142>
 8022fd4:	6923      	ldr	r3, [r4, #16]
 8022fd6:	6861      	ldr	r1, [r4, #4]
 8022fd8:	4299      	cmp	r1, r3
 8022fda:	bfde      	ittt	le
 8022fdc:	2330      	movle	r3, #48	@ 0x30
 8022fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022fe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022fe6:	1b92      	subs	r2, r2, r6
 8022fe8:	6122      	str	r2, [r4, #16]
 8022fea:	f8cd a000 	str.w	sl, [sp]
 8022fee:	464b      	mov	r3, r9
 8022ff0:	aa03      	add	r2, sp, #12
 8022ff2:	4621      	mov	r1, r4
 8022ff4:	4640      	mov	r0, r8
 8022ff6:	f7ff fee7 	bl	8022dc8 <_printf_common>
 8022ffa:	3001      	adds	r0, #1
 8022ffc:	d14a      	bne.n	8023094 <_printf_i+0x1f0>
 8022ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8023002:	b004      	add	sp, #16
 8023004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023008:	6823      	ldr	r3, [r4, #0]
 802300a:	f043 0320 	orr.w	r3, r3, #32
 802300e:	6023      	str	r3, [r4, #0]
 8023010:	4832      	ldr	r0, [pc, #200]	@ (80230dc <_printf_i+0x238>)
 8023012:	2778      	movs	r7, #120	@ 0x78
 8023014:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023018:	6823      	ldr	r3, [r4, #0]
 802301a:	6831      	ldr	r1, [r6, #0]
 802301c:	061f      	lsls	r7, r3, #24
 802301e:	f851 5b04 	ldr.w	r5, [r1], #4
 8023022:	d402      	bmi.n	802302a <_printf_i+0x186>
 8023024:	065f      	lsls	r7, r3, #25
 8023026:	bf48      	it	mi
 8023028:	b2ad      	uxthmi	r5, r5
 802302a:	6031      	str	r1, [r6, #0]
 802302c:	07d9      	lsls	r1, r3, #31
 802302e:	bf44      	itt	mi
 8023030:	f043 0320 	orrmi.w	r3, r3, #32
 8023034:	6023      	strmi	r3, [r4, #0]
 8023036:	b11d      	cbz	r5, 8023040 <_printf_i+0x19c>
 8023038:	2310      	movs	r3, #16
 802303a:	e7ad      	b.n	8022f98 <_printf_i+0xf4>
 802303c:	4826      	ldr	r0, [pc, #152]	@ (80230d8 <_printf_i+0x234>)
 802303e:	e7e9      	b.n	8023014 <_printf_i+0x170>
 8023040:	6823      	ldr	r3, [r4, #0]
 8023042:	f023 0320 	bic.w	r3, r3, #32
 8023046:	6023      	str	r3, [r4, #0]
 8023048:	e7f6      	b.n	8023038 <_printf_i+0x194>
 802304a:	4616      	mov	r6, r2
 802304c:	e7bd      	b.n	8022fca <_printf_i+0x126>
 802304e:	6833      	ldr	r3, [r6, #0]
 8023050:	6825      	ldr	r5, [r4, #0]
 8023052:	6961      	ldr	r1, [r4, #20]
 8023054:	1d18      	adds	r0, r3, #4
 8023056:	6030      	str	r0, [r6, #0]
 8023058:	062e      	lsls	r6, r5, #24
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	d501      	bpl.n	8023062 <_printf_i+0x1be>
 802305e:	6019      	str	r1, [r3, #0]
 8023060:	e002      	b.n	8023068 <_printf_i+0x1c4>
 8023062:	0668      	lsls	r0, r5, #25
 8023064:	d5fb      	bpl.n	802305e <_printf_i+0x1ba>
 8023066:	8019      	strh	r1, [r3, #0]
 8023068:	2300      	movs	r3, #0
 802306a:	6123      	str	r3, [r4, #16]
 802306c:	4616      	mov	r6, r2
 802306e:	e7bc      	b.n	8022fea <_printf_i+0x146>
 8023070:	6833      	ldr	r3, [r6, #0]
 8023072:	1d1a      	adds	r2, r3, #4
 8023074:	6032      	str	r2, [r6, #0]
 8023076:	681e      	ldr	r6, [r3, #0]
 8023078:	6862      	ldr	r2, [r4, #4]
 802307a:	2100      	movs	r1, #0
 802307c:	4630      	mov	r0, r6
 802307e:	f7dd f92f 	bl	80002e0 <memchr>
 8023082:	b108      	cbz	r0, 8023088 <_printf_i+0x1e4>
 8023084:	1b80      	subs	r0, r0, r6
 8023086:	6060      	str	r0, [r4, #4]
 8023088:	6863      	ldr	r3, [r4, #4]
 802308a:	6123      	str	r3, [r4, #16]
 802308c:	2300      	movs	r3, #0
 802308e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023092:	e7aa      	b.n	8022fea <_printf_i+0x146>
 8023094:	6923      	ldr	r3, [r4, #16]
 8023096:	4632      	mov	r2, r6
 8023098:	4649      	mov	r1, r9
 802309a:	4640      	mov	r0, r8
 802309c:	47d0      	blx	sl
 802309e:	3001      	adds	r0, #1
 80230a0:	d0ad      	beq.n	8022ffe <_printf_i+0x15a>
 80230a2:	6823      	ldr	r3, [r4, #0]
 80230a4:	079b      	lsls	r3, r3, #30
 80230a6:	d413      	bmi.n	80230d0 <_printf_i+0x22c>
 80230a8:	68e0      	ldr	r0, [r4, #12]
 80230aa:	9b03      	ldr	r3, [sp, #12]
 80230ac:	4298      	cmp	r0, r3
 80230ae:	bfb8      	it	lt
 80230b0:	4618      	movlt	r0, r3
 80230b2:	e7a6      	b.n	8023002 <_printf_i+0x15e>
 80230b4:	2301      	movs	r3, #1
 80230b6:	4632      	mov	r2, r6
 80230b8:	4649      	mov	r1, r9
 80230ba:	4640      	mov	r0, r8
 80230bc:	47d0      	blx	sl
 80230be:	3001      	adds	r0, #1
 80230c0:	d09d      	beq.n	8022ffe <_printf_i+0x15a>
 80230c2:	3501      	adds	r5, #1
 80230c4:	68e3      	ldr	r3, [r4, #12]
 80230c6:	9903      	ldr	r1, [sp, #12]
 80230c8:	1a5b      	subs	r3, r3, r1
 80230ca:	42ab      	cmp	r3, r5
 80230cc:	dcf2      	bgt.n	80230b4 <_printf_i+0x210>
 80230ce:	e7eb      	b.n	80230a8 <_printf_i+0x204>
 80230d0:	2500      	movs	r5, #0
 80230d2:	f104 0619 	add.w	r6, r4, #25
 80230d6:	e7f5      	b.n	80230c4 <_printf_i+0x220>
 80230d8:	0802521d 	.word	0x0802521d
 80230dc:	0802522e 	.word	0x0802522e

080230e0 <__sflush_r>:
 80230e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80230e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230e8:	0716      	lsls	r6, r2, #28
 80230ea:	4605      	mov	r5, r0
 80230ec:	460c      	mov	r4, r1
 80230ee:	d454      	bmi.n	802319a <__sflush_r+0xba>
 80230f0:	684b      	ldr	r3, [r1, #4]
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	dc02      	bgt.n	80230fc <__sflush_r+0x1c>
 80230f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	dd48      	ble.n	802318e <__sflush_r+0xae>
 80230fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80230fe:	2e00      	cmp	r6, #0
 8023100:	d045      	beq.n	802318e <__sflush_r+0xae>
 8023102:	2300      	movs	r3, #0
 8023104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023108:	682f      	ldr	r7, [r5, #0]
 802310a:	6a21      	ldr	r1, [r4, #32]
 802310c:	602b      	str	r3, [r5, #0]
 802310e:	d030      	beq.n	8023172 <__sflush_r+0x92>
 8023110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023112:	89a3      	ldrh	r3, [r4, #12]
 8023114:	0759      	lsls	r1, r3, #29
 8023116:	d505      	bpl.n	8023124 <__sflush_r+0x44>
 8023118:	6863      	ldr	r3, [r4, #4]
 802311a:	1ad2      	subs	r2, r2, r3
 802311c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802311e:	b10b      	cbz	r3, 8023124 <__sflush_r+0x44>
 8023120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023122:	1ad2      	subs	r2, r2, r3
 8023124:	2300      	movs	r3, #0
 8023126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023128:	6a21      	ldr	r1, [r4, #32]
 802312a:	4628      	mov	r0, r5
 802312c:	47b0      	blx	r6
 802312e:	1c43      	adds	r3, r0, #1
 8023130:	89a3      	ldrh	r3, [r4, #12]
 8023132:	d106      	bne.n	8023142 <__sflush_r+0x62>
 8023134:	6829      	ldr	r1, [r5, #0]
 8023136:	291d      	cmp	r1, #29
 8023138:	d82b      	bhi.n	8023192 <__sflush_r+0xb2>
 802313a:	4a2a      	ldr	r2, [pc, #168]	@ (80231e4 <__sflush_r+0x104>)
 802313c:	40ca      	lsrs	r2, r1
 802313e:	07d6      	lsls	r6, r2, #31
 8023140:	d527      	bpl.n	8023192 <__sflush_r+0xb2>
 8023142:	2200      	movs	r2, #0
 8023144:	6062      	str	r2, [r4, #4]
 8023146:	04d9      	lsls	r1, r3, #19
 8023148:	6922      	ldr	r2, [r4, #16]
 802314a:	6022      	str	r2, [r4, #0]
 802314c:	d504      	bpl.n	8023158 <__sflush_r+0x78>
 802314e:	1c42      	adds	r2, r0, #1
 8023150:	d101      	bne.n	8023156 <__sflush_r+0x76>
 8023152:	682b      	ldr	r3, [r5, #0]
 8023154:	b903      	cbnz	r3, 8023158 <__sflush_r+0x78>
 8023156:	6560      	str	r0, [r4, #84]	@ 0x54
 8023158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802315a:	602f      	str	r7, [r5, #0]
 802315c:	b1b9      	cbz	r1, 802318e <__sflush_r+0xae>
 802315e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023162:	4299      	cmp	r1, r3
 8023164:	d002      	beq.n	802316c <__sflush_r+0x8c>
 8023166:	4628      	mov	r0, r5
 8023168:	f7ff fca2 	bl	8022ab0 <_free_r>
 802316c:	2300      	movs	r3, #0
 802316e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023170:	e00d      	b.n	802318e <__sflush_r+0xae>
 8023172:	2301      	movs	r3, #1
 8023174:	4628      	mov	r0, r5
 8023176:	47b0      	blx	r6
 8023178:	4602      	mov	r2, r0
 802317a:	1c50      	adds	r0, r2, #1
 802317c:	d1c9      	bne.n	8023112 <__sflush_r+0x32>
 802317e:	682b      	ldr	r3, [r5, #0]
 8023180:	2b00      	cmp	r3, #0
 8023182:	d0c6      	beq.n	8023112 <__sflush_r+0x32>
 8023184:	2b1d      	cmp	r3, #29
 8023186:	d001      	beq.n	802318c <__sflush_r+0xac>
 8023188:	2b16      	cmp	r3, #22
 802318a:	d11e      	bne.n	80231ca <__sflush_r+0xea>
 802318c:	602f      	str	r7, [r5, #0]
 802318e:	2000      	movs	r0, #0
 8023190:	e022      	b.n	80231d8 <__sflush_r+0xf8>
 8023192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023196:	b21b      	sxth	r3, r3
 8023198:	e01b      	b.n	80231d2 <__sflush_r+0xf2>
 802319a:	690f      	ldr	r7, [r1, #16]
 802319c:	2f00      	cmp	r7, #0
 802319e:	d0f6      	beq.n	802318e <__sflush_r+0xae>
 80231a0:	0793      	lsls	r3, r2, #30
 80231a2:	680e      	ldr	r6, [r1, #0]
 80231a4:	bf08      	it	eq
 80231a6:	694b      	ldreq	r3, [r1, #20]
 80231a8:	600f      	str	r7, [r1, #0]
 80231aa:	bf18      	it	ne
 80231ac:	2300      	movne	r3, #0
 80231ae:	eba6 0807 	sub.w	r8, r6, r7
 80231b2:	608b      	str	r3, [r1, #8]
 80231b4:	f1b8 0f00 	cmp.w	r8, #0
 80231b8:	dde9      	ble.n	802318e <__sflush_r+0xae>
 80231ba:	6a21      	ldr	r1, [r4, #32]
 80231bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80231be:	4643      	mov	r3, r8
 80231c0:	463a      	mov	r2, r7
 80231c2:	4628      	mov	r0, r5
 80231c4:	47b0      	blx	r6
 80231c6:	2800      	cmp	r0, #0
 80231c8:	dc08      	bgt.n	80231dc <__sflush_r+0xfc>
 80231ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80231d2:	81a3      	strh	r3, [r4, #12]
 80231d4:	f04f 30ff 	mov.w	r0, #4294967295
 80231d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231dc:	4407      	add	r7, r0
 80231de:	eba8 0800 	sub.w	r8, r8, r0
 80231e2:	e7e7      	b.n	80231b4 <__sflush_r+0xd4>
 80231e4:	20400001 	.word	0x20400001

080231e8 <_fflush_r>:
 80231e8:	b538      	push	{r3, r4, r5, lr}
 80231ea:	690b      	ldr	r3, [r1, #16]
 80231ec:	4605      	mov	r5, r0
 80231ee:	460c      	mov	r4, r1
 80231f0:	b913      	cbnz	r3, 80231f8 <_fflush_r+0x10>
 80231f2:	2500      	movs	r5, #0
 80231f4:	4628      	mov	r0, r5
 80231f6:	bd38      	pop	{r3, r4, r5, pc}
 80231f8:	b118      	cbz	r0, 8023202 <_fflush_r+0x1a>
 80231fa:	6a03      	ldr	r3, [r0, #32]
 80231fc:	b90b      	cbnz	r3, 8023202 <_fflush_r+0x1a>
 80231fe:	f7ff f9eb 	bl	80225d8 <__sinit>
 8023202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023206:	2b00      	cmp	r3, #0
 8023208:	d0f3      	beq.n	80231f2 <_fflush_r+0xa>
 802320a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802320c:	07d0      	lsls	r0, r2, #31
 802320e:	d404      	bmi.n	802321a <_fflush_r+0x32>
 8023210:	0599      	lsls	r1, r3, #22
 8023212:	d402      	bmi.n	802321a <_fflush_r+0x32>
 8023214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023216:	f7ff fbde 	bl	80229d6 <__retarget_lock_acquire_recursive>
 802321a:	4628      	mov	r0, r5
 802321c:	4621      	mov	r1, r4
 802321e:	f7ff ff5f 	bl	80230e0 <__sflush_r>
 8023222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023224:	07da      	lsls	r2, r3, #31
 8023226:	4605      	mov	r5, r0
 8023228:	d4e4      	bmi.n	80231f4 <_fflush_r+0xc>
 802322a:	89a3      	ldrh	r3, [r4, #12]
 802322c:	059b      	lsls	r3, r3, #22
 802322e:	d4e1      	bmi.n	80231f4 <_fflush_r+0xc>
 8023230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023232:	f7ff fbd1 	bl	80229d8 <__retarget_lock_release_recursive>
 8023236:	e7dd      	b.n	80231f4 <_fflush_r+0xc>

08023238 <__swhatbuf_r>:
 8023238:	b570      	push	{r4, r5, r6, lr}
 802323a:	460c      	mov	r4, r1
 802323c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023240:	2900      	cmp	r1, #0
 8023242:	b096      	sub	sp, #88	@ 0x58
 8023244:	4615      	mov	r5, r2
 8023246:	461e      	mov	r6, r3
 8023248:	da0d      	bge.n	8023266 <__swhatbuf_r+0x2e>
 802324a:	89a3      	ldrh	r3, [r4, #12]
 802324c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023250:	f04f 0100 	mov.w	r1, #0
 8023254:	bf14      	ite	ne
 8023256:	2340      	movne	r3, #64	@ 0x40
 8023258:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802325c:	2000      	movs	r0, #0
 802325e:	6031      	str	r1, [r6, #0]
 8023260:	602b      	str	r3, [r5, #0]
 8023262:	b016      	add	sp, #88	@ 0x58
 8023264:	bd70      	pop	{r4, r5, r6, pc}
 8023266:	466a      	mov	r2, sp
 8023268:	f000 f848 	bl	80232fc <_fstat_r>
 802326c:	2800      	cmp	r0, #0
 802326e:	dbec      	blt.n	802324a <__swhatbuf_r+0x12>
 8023270:	9901      	ldr	r1, [sp, #4]
 8023272:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023276:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802327a:	4259      	negs	r1, r3
 802327c:	4159      	adcs	r1, r3
 802327e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023282:	e7eb      	b.n	802325c <__swhatbuf_r+0x24>

08023284 <__smakebuf_r>:
 8023284:	898b      	ldrh	r3, [r1, #12]
 8023286:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023288:	079d      	lsls	r5, r3, #30
 802328a:	4606      	mov	r6, r0
 802328c:	460c      	mov	r4, r1
 802328e:	d507      	bpl.n	80232a0 <__smakebuf_r+0x1c>
 8023290:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023294:	6023      	str	r3, [r4, #0]
 8023296:	6123      	str	r3, [r4, #16]
 8023298:	2301      	movs	r3, #1
 802329a:	6163      	str	r3, [r4, #20]
 802329c:	b003      	add	sp, #12
 802329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232a0:	ab01      	add	r3, sp, #4
 80232a2:	466a      	mov	r2, sp
 80232a4:	f7ff ffc8 	bl	8023238 <__swhatbuf_r>
 80232a8:	9f00      	ldr	r7, [sp, #0]
 80232aa:	4605      	mov	r5, r0
 80232ac:	4639      	mov	r1, r7
 80232ae:	4630      	mov	r0, r6
 80232b0:	f7ff f86c 	bl	802238c <_malloc_r>
 80232b4:	b948      	cbnz	r0, 80232ca <__smakebuf_r+0x46>
 80232b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232ba:	059a      	lsls	r2, r3, #22
 80232bc:	d4ee      	bmi.n	802329c <__smakebuf_r+0x18>
 80232be:	f023 0303 	bic.w	r3, r3, #3
 80232c2:	f043 0302 	orr.w	r3, r3, #2
 80232c6:	81a3      	strh	r3, [r4, #12]
 80232c8:	e7e2      	b.n	8023290 <__smakebuf_r+0xc>
 80232ca:	89a3      	ldrh	r3, [r4, #12]
 80232cc:	6020      	str	r0, [r4, #0]
 80232ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80232d2:	81a3      	strh	r3, [r4, #12]
 80232d4:	9b01      	ldr	r3, [sp, #4]
 80232d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80232da:	b15b      	cbz	r3, 80232f4 <__smakebuf_r+0x70>
 80232dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232e0:	4630      	mov	r0, r6
 80232e2:	f000 f81d 	bl	8023320 <_isatty_r>
 80232e6:	b128      	cbz	r0, 80232f4 <__smakebuf_r+0x70>
 80232e8:	89a3      	ldrh	r3, [r4, #12]
 80232ea:	f023 0303 	bic.w	r3, r3, #3
 80232ee:	f043 0301 	orr.w	r3, r3, #1
 80232f2:	81a3      	strh	r3, [r4, #12]
 80232f4:	89a3      	ldrh	r3, [r4, #12]
 80232f6:	431d      	orrs	r5, r3
 80232f8:	81a5      	strh	r5, [r4, #12]
 80232fa:	e7cf      	b.n	802329c <__smakebuf_r+0x18>

080232fc <_fstat_r>:
 80232fc:	b538      	push	{r3, r4, r5, lr}
 80232fe:	4d07      	ldr	r5, [pc, #28]	@ (802331c <_fstat_r+0x20>)
 8023300:	2300      	movs	r3, #0
 8023302:	4604      	mov	r4, r0
 8023304:	4608      	mov	r0, r1
 8023306:	4611      	mov	r1, r2
 8023308:	602b      	str	r3, [r5, #0]
 802330a:	f7de f9da 	bl	80016c2 <_fstat>
 802330e:	1c43      	adds	r3, r0, #1
 8023310:	d102      	bne.n	8023318 <_fstat_r+0x1c>
 8023312:	682b      	ldr	r3, [r5, #0]
 8023314:	b103      	cbz	r3, 8023318 <_fstat_r+0x1c>
 8023316:	6023      	str	r3, [r4, #0]
 8023318:	bd38      	pop	{r3, r4, r5, pc}
 802331a:	bf00      	nop
 802331c:	24025dec 	.word	0x24025dec

08023320 <_isatty_r>:
 8023320:	b538      	push	{r3, r4, r5, lr}
 8023322:	4d06      	ldr	r5, [pc, #24]	@ (802333c <_isatty_r+0x1c>)
 8023324:	2300      	movs	r3, #0
 8023326:	4604      	mov	r4, r0
 8023328:	4608      	mov	r0, r1
 802332a:	602b      	str	r3, [r5, #0]
 802332c:	f7de f9ce 	bl	80016cc <_isatty>
 8023330:	1c43      	adds	r3, r0, #1
 8023332:	d102      	bne.n	802333a <_isatty_r+0x1a>
 8023334:	682b      	ldr	r3, [r5, #0]
 8023336:	b103      	cbz	r3, 802333a <_isatty_r+0x1a>
 8023338:	6023      	str	r3, [r4, #0]
 802333a:	bd38      	pop	{r3, r4, r5, pc}
 802333c:	24025dec 	.word	0x24025dec

08023340 <_init>:
 8023340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023342:	bf00      	nop
 8023344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023346:	bc08      	pop	{r3}
 8023348:	469e      	mov	lr, r3
 802334a:	4770      	bx	lr

0802334c <_fini>:
 802334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802334e:	bf00      	nop
 8023350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023352:	bc08      	pop	{r3}
 8023354:	469e      	mov	lr, r3
 8023356:	4770      	bx	lr
